; Listing generated by Microsoft (R) Optimizing Compiler Version 13.10.3077 

	TITLE	.\source\draw.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT PARA USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_0IJ@HCPPNHNP@c?3?2documents?5and?5settings?2jarhea@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_02GMLFBBN@wb?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _IsEqualGUID
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _==
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _acosl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _asinl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _atanl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _atan2l
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _ceill
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _cosl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _coshl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _expl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _fabsl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _floorl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _fmodl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _frexpl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _ldexpl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _logl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _log10l
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _modfl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _powl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _sinl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _sinhl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _sqrtl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _tanl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _tanhl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _frexpf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _ldexpf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _acosf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _asinf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _atanf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _atan2f
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _ceilf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _cosf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _coshf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _expf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _fabsf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _floorf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _fmodf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _logf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _log10f
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _modff
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _powf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _sinf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _sinhf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _sqrtf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _tanf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _tanhf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?sin@@YAMM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?sqrt@@YAMM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?InitPolyBuckets@@YAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?KillPolyBuckets@@YAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?FlushPolyBuckets@@YAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?FlushEnvBuckets@@YAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?FlushOneBucketTEX0@@YAXPAUBUCKET_TEX0@@J@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?FlushOneBucketTEX1@@YAXPAUBUCKET_TEX1@@J@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?FlushOneBucketEnv@@YAXPAUBUCKET_ENV@@J@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Reset3dPolyList@@YAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Draw3dPolyList@@YAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Get3dPoly@@YAPAUDRAW_3D_POLY@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DrawNearClipPolyTEX0@@YAXPAUVectorStruct@@PAJJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ResetSemiList@@YAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DrawSemiList@@YAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DrawFacingPolyMirror@@YAXPAUVectorStruct@@PAUFACING_POLY@@JM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DrawFacingPoly@@YAXPAUVectorStruct@@PAUFACING_POLY@@JM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DrawFacingPolyRotMirror@@YAXPAUVectorStruct@@PATMatrixUnion@@PAUFACING_POLY@@JM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DrawFacingPolyRot@@YAXPAUVectorStruct@@PATMatrixUnion@@PAUFACING_POLY@@JM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?InitRenderStates@@YAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetNearFar@@YAXMM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetFogVars@@YAXMMM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DrawAxis@@YAXPATMatrixUnion@@PAUVectorStruct@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DumpImage@@YAXDMMMMMMMMK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DrawMousePointer@@YAXK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?LoadBitmapA@@YAHPADPAPAUHBITMAP__@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?FreeBitmap@@YAHPAUHBITMAP__@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?BlitBitmap@@YAHPAUHBITMAP__@@PAPAUIDirectDrawSurface4@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DrawCollPoly@@YAXPAUCollPolyStruct@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DrawBoundingBox@@YAXMMMMMMJJJJJJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DrawCubeNormals@@YAXPAUWORLD_MODEL@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DrawConvex@@YA_NPAUConvexStruct@@F@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DrawLine@@YAXPAUVectorStruct@@0JJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DrawTriClip@@YAXPAUVERTEX_TEX1@@00@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DrawQuadClip@@YAXPAUVERTEX_TEX1@@000@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DrawFanClip@@YAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ClipLineTEX0@@YAXPAUVERTEX_TEX0@@0M0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ClipLineTEX1@@YAXPAUVERTEX_TEX1@@0M0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SaveFrontBuffer@@YAXPAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ResetMeshFxList@@YAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddWorldMeshFx@@YAXP6AXPAX@Z0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddModelMeshFx@@YAXP6AXPAX@Z0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?InitJumpSparkOffsets@@YAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DrawJumpSpark@@YAXPAUVectorStruct@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DrawJumpSpark2@@YAXPAUVectorStruct@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Pow_int@N@@YANNH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Pow_int@H@@YAHHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Pow_int@M@@YAMMH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Pow_int@O@@YAOOH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?__LINE__Var@?1??DrawCollPoly@@YAXPAUCollPolyStruct@@@Z@4JA
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
sxdata	SEGMENT DWORD USE32 'SXDATA'
sxdata	ENDS
FLAT	GROUP _DATA, CONST, _BSS
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBCD
INCLUDELIB OLDNAMES

PUBLIC	?BucketEnvStill@@3UBUCKET_ENV@@A		; BucketEnvStill
PUBLIC	?BucketEnvStillFog@@3UBUCKET_ENV@@A		; BucketEnvStillFog
PUBLIC	?BucketEnvStillClip@@3UBUCKET_ENV@@A		; BucketEnvStillClip
PUBLIC	?BucketEnvStillClipFog@@3UBUCKET_ENV@@A		; BucketEnvStillClipFog
PUBLIC	?BucketEnvRoll@@3UBUCKET_ENV@@A			; BucketEnvRoll
PUBLIC	?BucketEnvRollFog@@3UBUCKET_ENV@@A		; BucketEnvRollFog
PUBLIC	?BucketEnvRollClip@@3UBUCKET_ENV@@A		; BucketEnvRollClip
PUBLIC	?BucketEnvRollClipFog@@3UBUCKET_ENV@@A		; BucketEnvRollClipFog
PUBLIC	?BucketRGB@@3UBUCKET_TEX0@@A			; BucketRGB
PUBLIC	?BucketFogRGB@@3UBUCKET_TEX0@@A			; BucketFogRGB
PUBLIC	?BucketClipRGB@@3UBUCKET_TEX0@@A		; BucketClipRGB
PUBLIC	?BucketClipFogRGB@@3UBUCKET_TEX0@@A		; BucketClipFogRGB
PUBLIC	?Bucket@@3PAUBUCKET_TEX1@@A			; Bucket
PUBLIC	?BucketFog@@3PAUBUCKET_TEX1@@A			; BucketFog
PUBLIC	?BucketClip@@3PAUBUCKET_TEX1@@A			; BucketClip
PUBLIC	?BucketClipFog@@3PAUBUCKET_TEX1@@A		; BucketClipFog
PUBLIC	?DrawVertsTEX0@@3PAUVERTEX_TEX0@@A		; DrawVertsTEX0
PUBLIC	?DrawVertsTEX1@@3PAUVERTEX_TEX1@@A		; DrawVertsTEX1
PUBLIC	?DrawVertsTEX2@@3PAUVERTEX_TEX2@@A		; DrawVertsTEX2
PUBLIC	?SemiPoly@@3PAUDRAW_SEMI_POLY@@A		; SemiPoly
PUBLIC	?WorldMeshFx@@3PAUWORLD_MESH_FX@@A		; WorldMeshFx
PUBLIC	?ModelMeshFx@@3PAUMODEL_MESH_FX@@A		; ModelMeshFx
PUBLIC	?SemiCount@@3JA					; SemiCount
PUBLIC	?WorldMeshFxCount@@3JA				; WorldMeshFxCount
PUBLIC	?ModelMeshFxCount@@3JA				; ModelMeshFxCount
_BSS	SEGMENT
?BucketEnvStill@@3UBUCKET_ENV@@A DB 011948H DUP (?)	; BucketEnvStill
?BucketEnvStillFog@@3UBUCKET_ENV@@A DB 011948H DUP (?)	; BucketEnvStillFog
?BucketEnvStillClip@@3UBUCKET_ENV@@A DB 011948H DUP (?)	; BucketEnvStillClip
?BucketEnvStillClipFog@@3UBUCKET_ENV@@A DB 011948H DUP (?) ; BucketEnvStillClipFog
?BucketEnvRoll@@3UBUCKET_ENV@@A DB 011948H DUP (?)	; BucketEnvRoll
?BucketEnvRollFog@@3UBUCKET_ENV@@A DB 011948H DUP (?)	; BucketEnvRollFog
?BucketEnvRollClip@@3UBUCKET_ENV@@A DB 011948H DUP (?)	; BucketEnvRollClip
?BucketEnvRollClipFog@@3UBUCKET_ENV@@A DB 011948H DUP (?) ; BucketEnvRollClipFog
?BucketRGB@@3UBUCKET_TEX0@@A DB 015e8H DUP (?)		; BucketRGB
?BucketFogRGB@@3UBUCKET_TEX0@@A DB 015e8H DUP (?)	; BucketFogRGB
?BucketClipRGB@@3UBUCKET_TEX0@@A DB 015e8H DUP (?)	; BucketClipRGB
?BucketClipFogRGB@@3UBUCKET_TEX0@@A DB 015e8H DUP (?)	; BucketClipFogRGB
?Bucket@@3PAUBUCKET_TEX1@@A DB 0368d8H DUP (?)		; Bucket
?BucketFog@@3PAUBUCKET_TEX1@@A DB 0368d8H DUP (?)	; BucketFog
?BucketClip@@3PAUBUCKET_TEX1@@A DB 0368d8H DUP (?)	; BucketClip
?BucketClipFog@@3PAUBUCKET_TEX1@@A DB 0368d8H DUP (?)	; BucketClipFog
?DrawVertsTEX0@@3PAUVERTEX_TEX0@@A DB 0c0H DUP (?)	; DrawVertsTEX0
?DrawVertsTEX1@@3PAUVERTEX_TEX1@@A DB 0100H DUP (?)	; DrawVertsTEX1
?DrawVertsTEX2@@3PAUVERTEX_TEX2@@A DB 0140H DUP (?)	; DrawVertsTEX2
?SemiPoly@@3PAUDRAW_SEMI_POLY@@A DB 01db00H DUP (?)	; SemiPoly
?WorldMeshFx@@3PAUWORLD_MESH_FX@@A DQ 020H DUP (?)	; WorldMeshFx
?ModelMeshFx@@3PAUMODEL_MESH_FX@@A DQ 020H DUP (?)	; ModelMeshFx
?SemiCount@@3JA DD 01H DUP (?)				; SemiCount
?WorldMeshFxCount@@3JA DD 01H DUP (?)			; WorldMeshFxCount
?ModelMeshFxCount@@3JA DD 01H DUP (?)			; ModelMeshFxCount
_BSS	ENDS
_DATA	SEGMENT
_SemiShellGap DD 0dH
	DD	04H
	DD	01H
_DATA	ENDS
PUBLIC	?InitPolyBuckets@@YAXXZ				; InitPolyBuckets
; Function compile flags: /Odt /ZI
; File c:\documents and settings\jarhead\desktop\shit to display my love for xbox revolt and fuck you borman-ness\revolt source\source\draw.cpp
;	COMDAT ?InitPolyBuckets@@YAXXZ
_TEXT	SEGMENT
_i$ = -4						; size = 4
?InitPolyBuckets@@YAXXZ PROC NEAR			; InitPolyBuckets, COMDAT

; 49   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 50   : 	long i;
; 51   : 
; 52   : // env
; 53   : 
; 54   : 	BucketEnvStill.CurrentIndex = BucketEnvStill.Index;

	mov	DWORD PTR ?BucketEnvStill@@3UBUCKET_ENV@@A+8000, OFFSET FLAT:?BucketEnvStill@@3UBUCKET_ENV@@A ; BucketEnvStill

; 55   : 	BucketEnvStill.CurrentVerts = BucketEnvStill.Verts;

	mov	DWORD PTR ?BucketEnvStill@@3UBUCKET_ENV@@A+8004, OFFSET FLAT:?BucketEnvStill@@3UBUCKET_ENV@@A+8008

; 56   : 
; 57   : 	BucketEnvStillFog.CurrentIndex = BucketEnvStillFog.Index;

	mov	DWORD PTR ?BucketEnvStillFog@@3UBUCKET_ENV@@A+8000, OFFSET FLAT:?BucketEnvStillFog@@3UBUCKET_ENV@@A ; BucketEnvStillFog

; 58   : 	BucketEnvStillFog.CurrentVerts = BucketEnvStillFog.Verts;

	mov	DWORD PTR ?BucketEnvStillFog@@3UBUCKET_ENV@@A+8004, OFFSET FLAT:?BucketEnvStillFog@@3UBUCKET_ENV@@A+8008

; 59   : 
; 60   : 	BucketEnvStillClip.CurrentIndex = BucketEnvStillClip.Index;

	mov	DWORD PTR ?BucketEnvStillClip@@3UBUCKET_ENV@@A+8000, OFFSET FLAT:?BucketEnvStillClip@@3UBUCKET_ENV@@A ; BucketEnvStillClip

; 61   : 	BucketEnvStillClip.CurrentVerts = BucketEnvStillClip.Verts;

	mov	DWORD PTR ?BucketEnvStillClip@@3UBUCKET_ENV@@A+8004, OFFSET FLAT:?BucketEnvStillClip@@3UBUCKET_ENV@@A+8008

; 62   : 
; 63   : 	BucketEnvStillClipFog.CurrentIndex = BucketEnvStillClipFog.Index;

	mov	DWORD PTR ?BucketEnvStillClipFog@@3UBUCKET_ENV@@A+8000, OFFSET FLAT:?BucketEnvStillClipFog@@3UBUCKET_ENV@@A ; BucketEnvStillClipFog

; 64   : 	BucketEnvStillClipFog.CurrentVerts = BucketEnvStillClipFog.Verts;

	mov	DWORD PTR ?BucketEnvStillClipFog@@3UBUCKET_ENV@@A+8004, OFFSET FLAT:?BucketEnvStillClipFog@@3UBUCKET_ENV@@A+8008

; 65   : 
; 66   : 	BucketEnvRoll.CurrentIndex = BucketEnvRoll.Index;

	mov	DWORD PTR ?BucketEnvRoll@@3UBUCKET_ENV@@A+8000, OFFSET FLAT:?BucketEnvRoll@@3UBUCKET_ENV@@A ; BucketEnvRoll

; 67   : 	BucketEnvRoll.CurrentVerts = BucketEnvRoll.Verts;

	mov	DWORD PTR ?BucketEnvRoll@@3UBUCKET_ENV@@A+8004, OFFSET FLAT:?BucketEnvRoll@@3UBUCKET_ENV@@A+8008

; 68   : 
; 69   : 	BucketEnvRollFog.CurrentIndex = BucketEnvRollFog.Index;

	mov	DWORD PTR ?BucketEnvRollFog@@3UBUCKET_ENV@@A+8000, OFFSET FLAT:?BucketEnvRollFog@@3UBUCKET_ENV@@A ; BucketEnvRollFog

; 70   : 	BucketEnvRollFog.CurrentVerts = BucketEnvRollFog.Verts;

	mov	DWORD PTR ?BucketEnvRollFog@@3UBUCKET_ENV@@A+8004, OFFSET FLAT:?BucketEnvRollFog@@3UBUCKET_ENV@@A+8008

; 71   : 
; 72   : 	BucketEnvRollClip.CurrentIndex = BucketEnvRollClip.Index;

	mov	DWORD PTR ?BucketEnvRollClip@@3UBUCKET_ENV@@A+8000, OFFSET FLAT:?BucketEnvRollClip@@3UBUCKET_ENV@@A ; BucketEnvRollClip

; 73   : 	BucketEnvRollClip.CurrentVerts = BucketEnvRollClip.Verts;

	mov	DWORD PTR ?BucketEnvRollClip@@3UBUCKET_ENV@@A+8004, OFFSET FLAT:?BucketEnvRollClip@@3UBUCKET_ENV@@A+8008

; 74   : 
; 75   : 	BucketEnvRollClipFog.CurrentIndex = BucketEnvRollClipFog.Index;

	mov	DWORD PTR ?BucketEnvRollClipFog@@3UBUCKET_ENV@@A+8000, OFFSET FLAT:?BucketEnvRollClipFog@@3UBUCKET_ENV@@A ; BucketEnvRollClipFog

; 76   : 	BucketEnvRollClipFog.CurrentVerts = BucketEnvRollClipFog.Verts;

	mov	DWORD PTR ?BucketEnvRollClipFog@@3UBUCKET_ENV@@A+8004, OFFSET FLAT:?BucketEnvRollClipFog@@3UBUCKET_ENV@@A+8008

; 77   : 
; 78   : // rgb
; 79   : 
; 80   : 	BucketRGB.CurrentIndex = BucketRGB.Index;

	mov	DWORD PTR ?BucketRGB@@3UBUCKET_TEX0@@A+800, OFFSET FLAT:?BucketRGB@@3UBUCKET_TEX0@@A ; BucketRGB

; 81   : 	BucketRGB.CurrentVerts = BucketRGB.Verts;

	mov	DWORD PTR ?BucketRGB@@3UBUCKET_TEX0@@A+804, OFFSET FLAT:?BucketRGB@@3UBUCKET_TEX0@@A+808

; 82   : 
; 83   : 	BucketFogRGB.CurrentIndex = BucketFogRGB.Index;

	mov	DWORD PTR ?BucketFogRGB@@3UBUCKET_TEX0@@A+800, OFFSET FLAT:?BucketFogRGB@@3UBUCKET_TEX0@@A ; BucketFogRGB

; 84   : 	BucketFogRGB.CurrentVerts = BucketFogRGB.Verts;

	mov	DWORD PTR ?BucketFogRGB@@3UBUCKET_TEX0@@A+804, OFFSET FLAT:?BucketFogRGB@@3UBUCKET_TEX0@@A+808

; 85   : 
; 86   : 	BucketClipRGB.CurrentIndex = BucketClipRGB.Index;

	mov	DWORD PTR ?BucketClipRGB@@3UBUCKET_TEX0@@A+800, OFFSET FLAT:?BucketClipRGB@@3UBUCKET_TEX0@@A ; BucketClipRGB

; 87   : 	BucketClipRGB.CurrentVerts = BucketClipRGB.Verts;

	mov	DWORD PTR ?BucketClipRGB@@3UBUCKET_TEX0@@A+804, OFFSET FLAT:?BucketClipRGB@@3UBUCKET_TEX0@@A+808

; 88   : 
; 89   : 	BucketClipFogRGB.CurrentIndex = BucketClipFogRGB.Index;

	mov	DWORD PTR ?BucketClipFogRGB@@3UBUCKET_TEX0@@A+800, OFFSET FLAT:?BucketClipFogRGB@@3UBUCKET_TEX0@@A ; BucketClipFogRGB

; 90   : 	BucketClipFogRGB.CurrentVerts = BucketClipFogRGB.Verts;

	mov	DWORD PTR ?BucketClipFogRGB@@3UBUCKET_TEX0@@A+804, OFFSET FLAT:?BucketClipFogRGB@@3UBUCKET_TEX0@@A+808

; 91   : 
; 92   : // textured
; 93   : 
; 94   : 	for (i = 0 ; i < MAX_POLY_BUCKETS ; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $L81229
$L81230:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$L81229:
	cmp	DWORD PTR _i$[ebp], 31			; 0000001fH
	jge	$L81227

; 95   : 	{
; 96   : 		Bucket[i].CurrentIndex = Bucket[i].Index;

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 7208				; 00001c28H
	add	eax, OFFSET FLAT:?Bucket@@3PAUBUCKET_TEX1@@A ; Bucket
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 7208				; 00001c28H
	mov	DWORD PTR ?Bucket@@3PAUBUCKET_TEX1@@A[ecx+800], eax

; 97   : 		Bucket[i].CurrentVerts = Bucket[i].Verts;

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 7208				; 00001c28H
	add	eax, OFFSET FLAT:?Bucket@@3PAUBUCKET_TEX1@@A+808
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 7208				; 00001c28H
	mov	DWORD PTR ?Bucket@@3PAUBUCKET_TEX1@@A[ecx+804], eax

; 98   : 
; 99   : 		BucketFog[i].CurrentIndex = BucketFog[i].Index;

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 7208				; 00001c28H
	add	eax, OFFSET FLAT:?BucketFog@@3PAUBUCKET_TEX1@@A ; BucketFog
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 7208				; 00001c28H
	mov	DWORD PTR ?BucketFog@@3PAUBUCKET_TEX1@@A[ecx+800], eax

; 100  : 		BucketFog[i].CurrentVerts = BucketFog[i].Verts;

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 7208				; 00001c28H
	add	eax, OFFSET FLAT:?BucketFog@@3PAUBUCKET_TEX1@@A+808
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 7208				; 00001c28H
	mov	DWORD PTR ?BucketFog@@3PAUBUCKET_TEX1@@A[ecx+804], eax

; 101  : 
; 102  : 		BucketClip[i].CurrentIndex = BucketClip[i].Index;

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 7208				; 00001c28H
	add	eax, OFFSET FLAT:?BucketClip@@3PAUBUCKET_TEX1@@A ; BucketClip
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 7208				; 00001c28H
	mov	DWORD PTR ?BucketClip@@3PAUBUCKET_TEX1@@A[ecx+800], eax

; 103  : 		BucketClip[i].CurrentVerts = BucketClip[i].Verts;

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 7208				; 00001c28H
	add	eax, OFFSET FLAT:?BucketClip@@3PAUBUCKET_TEX1@@A+808
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 7208				; 00001c28H
	mov	DWORD PTR ?BucketClip@@3PAUBUCKET_TEX1@@A[ecx+804], eax

; 104  : 
; 105  : 		BucketClipFog[i].CurrentIndex = BucketClipFog[i].Index;

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 7208				; 00001c28H
	add	eax, OFFSET FLAT:?BucketClipFog@@3PAUBUCKET_TEX1@@A ; BucketClipFog
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 7208				; 00001c28H
	mov	DWORD PTR ?BucketClipFog@@3PAUBUCKET_TEX1@@A[ecx+800], eax

; 106  : 		BucketClipFog[i].CurrentVerts = BucketClipFog[i].Verts;

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 7208				; 00001c28H
	add	eax, OFFSET FLAT:?BucketClipFog@@3PAUBUCKET_TEX1@@A+808
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 7208				; 00001c28H
	mov	DWORD PTR ?BucketClipFog@@3PAUBUCKET_TEX1@@A[ecx+804], eax

; 107  : 	}

	jmp	$L81230
$L81227:

; 108  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?InitPolyBuckets@@YAXXZ ENDP				; InitPolyBuckets
_TEXT	ENDS
PUBLIC	?KillPolyBuckets@@YAXXZ				; KillPolyBuckets
; Function compile flags: /Odt /ZI
;	COMDAT ?KillPolyBuckets@@YAXXZ
_TEXT	SEGMENT
?KillPolyBuckets@@YAXXZ PROC NEAR			; KillPolyBuckets, COMDAT

; 115  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 116  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?KillPolyBuckets@@YAXXZ ENDP				; KillPolyBuckets
_TEXT	ENDS
PUBLIC	?FlushPolyBuckets@@YAXXZ			; FlushPolyBuckets
PUBLIC	?FlushOneBucketTEX0@@YAXPAUBUCKET_TEX0@@J@Z	; FlushOneBucketTEX0
PUBLIC	?FlushOneBucketTEX1@@YAXPAUBUCKET_TEX1@@J@Z	; FlushOneBucketTEX1
EXTRN	?D3Ddevice@@3PAUIDirect3DDevice3@@A:DWORD	; D3Ddevice
EXTRN	?RenderStateChange@@3JA:DWORD			; RenderStateChange
EXTRN	?TextureStateChange@@3JA:DWORD			; TextureStateChange
EXTRN	?RenderTP@@3FA:WORD				; RenderTP
EXTRN	?RenderFog@@3FA:WORD				; RenderFog
EXTRN	?TexInfo@@3PAUTEXINFO@@A:DWORD			; TexInfo
; Function compile flags: /Odt /ZI
;	COMDAT ?FlushPolyBuckets@@YAXXZ
_TEXT	SEGMENT
_i$ = -4						; size = 2
?FlushPolyBuckets@@YAXXZ PROC NEAR			; FlushPolyBuckets, COMDAT

; 123  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 124  : 	short i;
; 125  : 
; 126  : // rgb
; 127  : 
; 128  : 	if (BucketRGB.CurrentVerts != BucketRGB.Verts)

	cmp	DWORD PTR ?BucketRGB@@3UBUCKET_TEX0@@A+804, OFFSET FLAT:?BucketRGB@@3UBUCKET_TEX0@@A+808
	je	$L81239

; 129  : 	{
; 130  : 		FOG_OFF();

	movsx	eax, WORD PTR ?RenderFog@@3FA		; RenderFog
	test	eax, eax
	je	SHORT $L81240
	mov	WORD PTR ?RenderFog@@3FA, 0		; RenderFog
	movsx	eax, WORD PTR ?RenderFog@@3FA		; RenderFog
	push	eax
	push	28					; 0000001cH
	mov	ecx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	eax
	call	DWORD PTR [edx+88]
	mov	eax, DWORD PTR ?RenderStateChange@@3JA	; RenderStateChange
	add	eax, 1
	mov	DWORD PTR ?RenderStateChange@@3JA, eax	; RenderStateChange
$L81240:

; 131  : 		SET_TPAGE(-1);

	movsx	eax, WORD PTR ?RenderTP@@3FA		; RenderTP
	cmp	eax, -1
	je	SHORT $L81241
	mov	WORD PTR ?RenderTP@@3FA, -1		; RenderTP
	movsx	eax, WORD PTR ?RenderTP@@3FA		; RenderTP
	cmp	eax, -1
	jne	SHORT $L81242
	push	0
	push	0
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	edx
	call	DWORD PTR [ecx+152]
	mov	eax, DWORD PTR ?TextureStateChange@@3JA	; TextureStateChange
	add	eax, 1
	mov	DWORD PTR ?TextureStateChange@@3JA, eax	; TextureStateChange
	jmp	SHORT $L81241
$L81242:
	movsx	eax, WORD PTR ?RenderTP@@3FA		; RenderTP
	shl	eax, 6
	mov	ecx, DWORD PTR ?TexInfo@@3PAUTEXINFO@@A	; TexInfo
	mov	edx, DWORD PTR [ecx+eax+52]
	push	edx
	push	0
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	edx
	call	DWORD PTR [ecx+152]
	mov	eax, DWORD PTR ?TextureStateChange@@3JA	; TextureStateChange
	add	eax, 1
	mov	DWORD PTR ?TextureStateChange@@3JA, eax	; TextureStateChange
$L81241:

; 132  : 		FlushOneBucketTEX0(&BucketRGB, FALSE);

	push	0
	push	OFFSET FLAT:?BucketRGB@@3UBUCKET_TEX0@@A ; BucketRGB
	call	?FlushOneBucketTEX0@@YAXPAUBUCKET_TEX0@@J@Z ; FlushOneBucketTEX0
	add	esp, 8
$L81239:

; 133  : 	}
; 134  : 
; 135  : 	if (BucketFogRGB.CurrentVerts != BucketFogRGB.Verts)

	cmp	DWORD PTR ?BucketFogRGB@@3UBUCKET_TEX0@@A+804, OFFSET FLAT:?BucketFogRGB@@3UBUCKET_TEX0@@A+808
	je	$L81244

; 136  : 	{
; 137  : 		FOG_ON();

	movsx	eax, WORD PTR ?RenderFog@@3FA		; RenderFog
	test	eax, eax
	jne	SHORT $L81245
	mov	WORD PTR ?RenderFog@@3FA, 1		; RenderFog
	movsx	eax, WORD PTR ?RenderFog@@3FA		; RenderFog
	push	eax
	push	28					; 0000001cH
	mov	ecx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	eax
	call	DWORD PTR [edx+88]
	mov	eax, DWORD PTR ?RenderStateChange@@3JA	; RenderStateChange
	add	eax, 1
	mov	DWORD PTR ?RenderStateChange@@3JA, eax	; RenderStateChange
$L81245:

; 138  : 		SET_TPAGE(-1);

	movsx	eax, WORD PTR ?RenderTP@@3FA		; RenderTP
	cmp	eax, -1
	je	SHORT $L81246
	mov	WORD PTR ?RenderTP@@3FA, -1		; RenderTP
	movsx	eax, WORD PTR ?RenderTP@@3FA		; RenderTP
	cmp	eax, -1
	jne	SHORT $L81247
	push	0
	push	0
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	edx
	call	DWORD PTR [ecx+152]
	mov	eax, DWORD PTR ?TextureStateChange@@3JA	; TextureStateChange
	add	eax, 1
	mov	DWORD PTR ?TextureStateChange@@3JA, eax	; TextureStateChange
	jmp	SHORT $L81246
$L81247:
	movsx	eax, WORD PTR ?RenderTP@@3FA		; RenderTP
	shl	eax, 6
	mov	ecx, DWORD PTR ?TexInfo@@3PAUTEXINFO@@A	; TexInfo
	mov	edx, DWORD PTR [ecx+eax+52]
	push	edx
	push	0
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	edx
	call	DWORD PTR [ecx+152]
	mov	eax, DWORD PTR ?TextureStateChange@@3JA	; TextureStateChange
	add	eax, 1
	mov	DWORD PTR ?TextureStateChange@@3JA, eax	; TextureStateChange
$L81246:

; 139  : 		FlushOneBucketTEX0(&BucketFogRGB, FALSE);

	push	0
	push	OFFSET FLAT:?BucketFogRGB@@3UBUCKET_TEX0@@A ; BucketFogRGB
	call	?FlushOneBucketTEX0@@YAXPAUBUCKET_TEX0@@J@Z ; FlushOneBucketTEX0
	add	esp, 8
$L81244:

; 140  : 	}
; 141  : 
; 142  : 	if (BucketClipRGB.CurrentVerts != BucketClipRGB.Verts)

	cmp	DWORD PTR ?BucketClipRGB@@3UBUCKET_TEX0@@A+804, OFFSET FLAT:?BucketClipRGB@@3UBUCKET_TEX0@@A+808
	je	$L81249

; 143  : 	{
; 144  : 		FOG_OFF();

	movsx	eax, WORD PTR ?RenderFog@@3FA		; RenderFog
	test	eax, eax
	je	SHORT $L81250
	mov	WORD PTR ?RenderFog@@3FA, 0		; RenderFog
	movsx	eax, WORD PTR ?RenderFog@@3FA		; RenderFog
	push	eax
	push	28					; 0000001cH
	mov	ecx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	eax
	call	DWORD PTR [edx+88]
	mov	eax, DWORD PTR ?RenderStateChange@@3JA	; RenderStateChange
	add	eax, 1
	mov	DWORD PTR ?RenderStateChange@@3JA, eax	; RenderStateChange
$L81250:

; 145  : 		SET_TPAGE(-1);

	movsx	eax, WORD PTR ?RenderTP@@3FA		; RenderTP
	cmp	eax, -1
	je	SHORT $L81251
	mov	WORD PTR ?RenderTP@@3FA, -1		; RenderTP
	movsx	eax, WORD PTR ?RenderTP@@3FA		; RenderTP
	cmp	eax, -1
	jne	SHORT $L81252
	push	0
	push	0
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	edx
	call	DWORD PTR [ecx+152]
	mov	eax, DWORD PTR ?TextureStateChange@@3JA	; TextureStateChange
	add	eax, 1
	mov	DWORD PTR ?TextureStateChange@@3JA, eax	; TextureStateChange
	jmp	SHORT $L81251
$L81252:
	movsx	eax, WORD PTR ?RenderTP@@3FA		; RenderTP
	shl	eax, 6
	mov	ecx, DWORD PTR ?TexInfo@@3PAUTEXINFO@@A	; TexInfo
	mov	edx, DWORD PTR [ecx+eax+52]
	push	edx
	push	0
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	edx
	call	DWORD PTR [ecx+152]
	mov	eax, DWORD PTR ?TextureStateChange@@3JA	; TextureStateChange
	add	eax, 1
	mov	DWORD PTR ?TextureStateChange@@3JA, eax	; TextureStateChange
$L81251:

; 146  : 		FlushOneBucketTEX0(&BucketClipRGB, TRUE);

	push	1
	push	OFFSET FLAT:?BucketClipRGB@@3UBUCKET_TEX0@@A ; BucketClipRGB
	call	?FlushOneBucketTEX0@@YAXPAUBUCKET_TEX0@@J@Z ; FlushOneBucketTEX0
	add	esp, 8
$L81249:

; 147  : 	}
; 148  : 
; 149  : 	if (BucketClipFogRGB.CurrentVerts != BucketClipFogRGB.Verts)

	cmp	DWORD PTR ?BucketClipFogRGB@@3UBUCKET_TEX0@@A+804, OFFSET FLAT:?BucketClipFogRGB@@3UBUCKET_TEX0@@A+808
	je	$L81254

; 150  : 	{
; 151  : 		FOG_ON();

	movsx	eax, WORD PTR ?RenderFog@@3FA		; RenderFog
	test	eax, eax
	jne	SHORT $L81255
	mov	WORD PTR ?RenderFog@@3FA, 1		; RenderFog
	movsx	eax, WORD PTR ?RenderFog@@3FA		; RenderFog
	push	eax
	push	28					; 0000001cH
	mov	ecx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	eax
	call	DWORD PTR [edx+88]
	mov	eax, DWORD PTR ?RenderStateChange@@3JA	; RenderStateChange
	add	eax, 1
	mov	DWORD PTR ?RenderStateChange@@3JA, eax	; RenderStateChange
$L81255:

; 152  : 		SET_TPAGE(-1);

	movsx	eax, WORD PTR ?RenderTP@@3FA		; RenderTP
	cmp	eax, -1
	je	SHORT $L81256
	mov	WORD PTR ?RenderTP@@3FA, -1		; RenderTP
	movsx	eax, WORD PTR ?RenderTP@@3FA		; RenderTP
	cmp	eax, -1
	jne	SHORT $L81257
	push	0
	push	0
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	edx
	call	DWORD PTR [ecx+152]
	mov	eax, DWORD PTR ?TextureStateChange@@3JA	; TextureStateChange
	add	eax, 1
	mov	DWORD PTR ?TextureStateChange@@3JA, eax	; TextureStateChange
	jmp	SHORT $L81256
$L81257:
	movsx	eax, WORD PTR ?RenderTP@@3FA		; RenderTP
	shl	eax, 6
	mov	ecx, DWORD PTR ?TexInfo@@3PAUTEXINFO@@A	; TexInfo
	mov	edx, DWORD PTR [ecx+eax+52]
	push	edx
	push	0
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	edx
	call	DWORD PTR [ecx+152]
	mov	eax, DWORD PTR ?TextureStateChange@@3JA	; TextureStateChange
	add	eax, 1
	mov	DWORD PTR ?TextureStateChange@@3JA, eax	; TextureStateChange
$L81256:

; 153  : 		FlushOneBucketTEX0(&BucketClipFogRGB, TRUE);

	push	1
	push	OFFSET FLAT:?BucketClipFogRGB@@3UBUCKET_TEX0@@A ; BucketClipFogRGB
	call	?FlushOneBucketTEX0@@YAXPAUBUCKET_TEX0@@J@Z ; FlushOneBucketTEX0
	add	esp, 8
$L81254:

; 154  : 	}
; 155  : 
; 156  : // textured
; 157  : 
; 158  : 	for (i = 0 ; i < MAX_POLY_BUCKETS ; i++)

	mov	WORD PTR _i$[ebp], 0
	jmp	SHORT $L81259
$L81260:
	mov	ax, WORD PTR _i$[ebp]
	add	ax, 1
	mov	WORD PTR _i$[ebp], ax
$L81259:
	movsx	eax, WORD PTR _i$[ebp]
	cmp	eax, 31					; 0000001fH
	jge	$L81261

; 159  : 	{
; 160  : 		if (Bucket[i].CurrentVerts != Bucket[i].Verts)

	movsx	eax, WORD PTR _i$[ebp]
	imul	eax, 7208				; 00001c28H
	movsx	ecx, WORD PTR _i$[ebp]
	imul	ecx, 7208				; 00001c28H
	add	ecx, OFFSET FLAT:?Bucket@@3PAUBUCKET_TEX1@@A+808
	cmp	DWORD PTR ?Bucket@@3PAUBUCKET_TEX1@@A[eax+804], ecx
	je	$L81262

; 161  : 		{
; 162  : 			FOG_OFF();

	movsx	eax, WORD PTR ?RenderFog@@3FA		; RenderFog
	test	eax, eax
	je	SHORT $L81263
	mov	WORD PTR ?RenderFog@@3FA, 0		; RenderFog
	movsx	eax, WORD PTR ?RenderFog@@3FA		; RenderFog
	push	eax
	push	28					; 0000001cH
	mov	ecx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	eax
	call	DWORD PTR [edx+88]
	mov	eax, DWORD PTR ?RenderStateChange@@3JA	; RenderStateChange
	add	eax, 1
	mov	DWORD PTR ?RenderStateChange@@3JA, eax	; RenderStateChange
$L81263:

; 163  : 			SET_TPAGE(i);

	movsx	eax, WORD PTR ?RenderTP@@3FA		; RenderTP
	movsx	ecx, WORD PTR _i$[ebp]
	cmp	eax, ecx
	je	SHORT $L81264
	mov	ax, WORD PTR _i$[ebp]
	mov	WORD PTR ?RenderTP@@3FA, ax		; RenderTP
	movsx	ecx, WORD PTR ?RenderTP@@3FA		; RenderTP
	cmp	ecx, -1
	jne	SHORT $L81265
	push	0
	push	0
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	edx
	call	DWORD PTR [ecx+152]
	mov	eax, DWORD PTR ?TextureStateChange@@3JA	; TextureStateChange
	add	eax, 1
	mov	DWORD PTR ?TextureStateChange@@3JA, eax	; TextureStateChange
	jmp	SHORT $L81264
$L81265:
	movsx	eax, WORD PTR ?RenderTP@@3FA		; RenderTP
	shl	eax, 6
	mov	ecx, DWORD PTR ?TexInfo@@3PAUTEXINFO@@A	; TexInfo
	mov	edx, DWORD PTR [ecx+eax+52]
	push	edx
	push	0
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	edx
	call	DWORD PTR [ecx+152]
	mov	eax, DWORD PTR ?TextureStateChange@@3JA	; TextureStateChange
	add	eax, 1
	mov	DWORD PTR ?TextureStateChange@@3JA, eax	; TextureStateChange
$L81264:

; 164  : 			FlushOneBucketTEX1(&Bucket[i], FALSE);

	push	0
	movsx	eax, WORD PTR _i$[ebp]
	imul	eax, 7208				; 00001c28H
	add	eax, OFFSET FLAT:?Bucket@@3PAUBUCKET_TEX1@@A ; Bucket
	push	eax
	call	?FlushOneBucketTEX1@@YAXPAUBUCKET_TEX1@@J@Z ; FlushOneBucketTEX1
	add	esp, 8
$L81262:

; 165  : 		}
; 166  : 
; 167  : 		if (BucketFog[i].CurrentVerts != BucketFog[i].Verts)

	movsx	eax, WORD PTR _i$[ebp]
	imul	eax, 7208				; 00001c28H
	movsx	ecx, WORD PTR _i$[ebp]
	imul	ecx, 7208				; 00001c28H
	add	ecx, OFFSET FLAT:?BucketFog@@3PAUBUCKET_TEX1@@A+808
	cmp	DWORD PTR ?BucketFog@@3PAUBUCKET_TEX1@@A[eax+804], ecx
	je	$L81267

; 168  : 		{
; 169  : 			FOG_ON();

	movsx	eax, WORD PTR ?RenderFog@@3FA		; RenderFog
	test	eax, eax
	jne	SHORT $L81268
	mov	WORD PTR ?RenderFog@@3FA, 1		; RenderFog
	movsx	eax, WORD PTR ?RenderFog@@3FA		; RenderFog
	push	eax
	push	28					; 0000001cH
	mov	ecx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	eax
	call	DWORD PTR [edx+88]
	mov	eax, DWORD PTR ?RenderStateChange@@3JA	; RenderStateChange
	add	eax, 1
	mov	DWORD PTR ?RenderStateChange@@3JA, eax	; RenderStateChange
$L81268:

; 170  : 			SET_TPAGE(i);

	movsx	eax, WORD PTR ?RenderTP@@3FA		; RenderTP
	movsx	ecx, WORD PTR _i$[ebp]
	cmp	eax, ecx
	je	SHORT $L81269
	mov	ax, WORD PTR _i$[ebp]
	mov	WORD PTR ?RenderTP@@3FA, ax		; RenderTP
	movsx	ecx, WORD PTR ?RenderTP@@3FA		; RenderTP
	cmp	ecx, -1
	jne	SHORT $L81270
	push	0
	push	0
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	edx
	call	DWORD PTR [ecx+152]
	mov	eax, DWORD PTR ?TextureStateChange@@3JA	; TextureStateChange
	add	eax, 1
	mov	DWORD PTR ?TextureStateChange@@3JA, eax	; TextureStateChange
	jmp	SHORT $L81269
$L81270:
	movsx	eax, WORD PTR ?RenderTP@@3FA		; RenderTP
	shl	eax, 6
	mov	ecx, DWORD PTR ?TexInfo@@3PAUTEXINFO@@A	; TexInfo
	mov	edx, DWORD PTR [ecx+eax+52]
	push	edx
	push	0
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	edx
	call	DWORD PTR [ecx+152]
	mov	eax, DWORD PTR ?TextureStateChange@@3JA	; TextureStateChange
	add	eax, 1
	mov	DWORD PTR ?TextureStateChange@@3JA, eax	; TextureStateChange
$L81269:

; 171  : 			FlushOneBucketTEX1(&BucketFog[i], FALSE);

	push	0
	movsx	eax, WORD PTR _i$[ebp]
	imul	eax, 7208				; 00001c28H
	add	eax, OFFSET FLAT:?BucketFog@@3PAUBUCKET_TEX1@@A ; BucketFog
	push	eax
	call	?FlushOneBucketTEX1@@YAXPAUBUCKET_TEX1@@J@Z ; FlushOneBucketTEX1
	add	esp, 8
$L81267:

; 172  : 		}
; 173  : 
; 174  : 		if (BucketClip[i].CurrentVerts != BucketClip[i].Verts)

	movsx	eax, WORD PTR _i$[ebp]
	imul	eax, 7208				; 00001c28H
	movsx	ecx, WORD PTR _i$[ebp]
	imul	ecx, 7208				; 00001c28H
	add	ecx, OFFSET FLAT:?BucketClip@@3PAUBUCKET_TEX1@@A+808
	cmp	DWORD PTR ?BucketClip@@3PAUBUCKET_TEX1@@A[eax+804], ecx
	je	$L81272

; 175  : 		{
; 176  : 			FOG_OFF();

	movsx	eax, WORD PTR ?RenderFog@@3FA		; RenderFog
	test	eax, eax
	je	SHORT $L81273
	mov	WORD PTR ?RenderFog@@3FA, 0		; RenderFog
	movsx	eax, WORD PTR ?RenderFog@@3FA		; RenderFog
	push	eax
	push	28					; 0000001cH
	mov	ecx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	eax
	call	DWORD PTR [edx+88]
	mov	eax, DWORD PTR ?RenderStateChange@@3JA	; RenderStateChange
	add	eax, 1
	mov	DWORD PTR ?RenderStateChange@@3JA, eax	; RenderStateChange
$L81273:

; 177  : 			SET_TPAGE(i);

	movsx	eax, WORD PTR ?RenderTP@@3FA		; RenderTP
	movsx	ecx, WORD PTR _i$[ebp]
	cmp	eax, ecx
	je	SHORT $L81274
	mov	ax, WORD PTR _i$[ebp]
	mov	WORD PTR ?RenderTP@@3FA, ax		; RenderTP
	movsx	ecx, WORD PTR ?RenderTP@@3FA		; RenderTP
	cmp	ecx, -1
	jne	SHORT $L81275
	push	0
	push	0
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	edx
	call	DWORD PTR [ecx+152]
	mov	eax, DWORD PTR ?TextureStateChange@@3JA	; TextureStateChange
	add	eax, 1
	mov	DWORD PTR ?TextureStateChange@@3JA, eax	; TextureStateChange
	jmp	SHORT $L81274
$L81275:
	movsx	eax, WORD PTR ?RenderTP@@3FA		; RenderTP
	shl	eax, 6
	mov	ecx, DWORD PTR ?TexInfo@@3PAUTEXINFO@@A	; TexInfo
	mov	edx, DWORD PTR [ecx+eax+52]
	push	edx
	push	0
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	edx
	call	DWORD PTR [ecx+152]
	mov	eax, DWORD PTR ?TextureStateChange@@3JA	; TextureStateChange
	add	eax, 1
	mov	DWORD PTR ?TextureStateChange@@3JA, eax	; TextureStateChange
$L81274:

; 178  : 			FlushOneBucketTEX1(&BucketClip[i], TRUE);

	push	1
	movsx	eax, WORD PTR _i$[ebp]
	imul	eax, 7208				; 00001c28H
	add	eax, OFFSET FLAT:?BucketClip@@3PAUBUCKET_TEX1@@A ; BucketClip
	push	eax
	call	?FlushOneBucketTEX1@@YAXPAUBUCKET_TEX1@@J@Z ; FlushOneBucketTEX1
	add	esp, 8
$L81272:

; 179  : 		}
; 180  : 
; 181  : 		if (BucketClipFog[i].CurrentVerts != BucketClipFog[i].Verts)

	movsx	eax, WORD PTR _i$[ebp]
	imul	eax, 7208				; 00001c28H
	movsx	ecx, WORD PTR _i$[ebp]
	imul	ecx, 7208				; 00001c28H
	add	ecx, OFFSET FLAT:?BucketClipFog@@3PAUBUCKET_TEX1@@A+808
	cmp	DWORD PTR ?BucketClipFog@@3PAUBUCKET_TEX1@@A[eax+804], ecx
	je	$L81277

; 182  : 		{
; 183  : 			FOG_ON();

	movsx	eax, WORD PTR ?RenderFog@@3FA		; RenderFog
	test	eax, eax
	jne	SHORT $L81278
	mov	WORD PTR ?RenderFog@@3FA, 1		; RenderFog
	movsx	eax, WORD PTR ?RenderFog@@3FA		; RenderFog
	push	eax
	push	28					; 0000001cH
	mov	ecx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	eax
	call	DWORD PTR [edx+88]
	mov	eax, DWORD PTR ?RenderStateChange@@3JA	; RenderStateChange
	add	eax, 1
	mov	DWORD PTR ?RenderStateChange@@3JA, eax	; RenderStateChange
$L81278:

; 184  : 			SET_TPAGE(i);

	movsx	eax, WORD PTR ?RenderTP@@3FA		; RenderTP
	movsx	ecx, WORD PTR _i$[ebp]
	cmp	eax, ecx
	je	SHORT $L81279
	mov	ax, WORD PTR _i$[ebp]
	mov	WORD PTR ?RenderTP@@3FA, ax		; RenderTP
	movsx	ecx, WORD PTR ?RenderTP@@3FA		; RenderTP
	cmp	ecx, -1
	jne	SHORT $L81280
	push	0
	push	0
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	edx
	call	DWORD PTR [ecx+152]
	mov	eax, DWORD PTR ?TextureStateChange@@3JA	; TextureStateChange
	add	eax, 1
	mov	DWORD PTR ?TextureStateChange@@3JA, eax	; TextureStateChange
	jmp	SHORT $L81279
$L81280:
	movsx	eax, WORD PTR ?RenderTP@@3FA		; RenderTP
	shl	eax, 6
	mov	ecx, DWORD PTR ?TexInfo@@3PAUTEXINFO@@A	; TexInfo
	mov	edx, DWORD PTR [ecx+eax+52]
	push	edx
	push	0
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	edx
	call	DWORD PTR [ecx+152]
	mov	eax, DWORD PTR ?TextureStateChange@@3JA	; TextureStateChange
	add	eax, 1
	mov	DWORD PTR ?TextureStateChange@@3JA, eax	; TextureStateChange
$L81279:

; 185  : 			FlushOneBucketTEX1(&BucketClipFog[i], TRUE);

	push	1
	movsx	eax, WORD PTR _i$[ebp]
	imul	eax, 7208				; 00001c28H
	add	eax, OFFSET FLAT:?BucketClipFog@@3PAUBUCKET_TEX1@@A ; BucketClipFog
	push	eax
	call	?FlushOneBucketTEX1@@YAXPAUBUCKET_TEX1@@J@Z ; FlushOneBucketTEX1
	add	esp, 8
$L81277:

; 186  : 		}
; 187  : 	}

	jmp	$L81260
$L81261:

; 188  : 
; 189  : // reset states
; 190  : 
; 191  : 	FOG_OFF();

	movsx	eax, WORD PTR ?RenderFog@@3FA		; RenderFog
	test	eax, eax
	je	SHORT $L81237
	mov	WORD PTR ?RenderFog@@3FA, 0		; RenderFog
	movsx	eax, WORD PTR ?RenderFog@@3FA		; RenderFog
	push	eax
	push	28					; 0000001cH
	mov	ecx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	eax
	call	DWORD PTR [edx+88]
	mov	eax, DWORD PTR ?RenderStateChange@@3JA	; RenderStateChange
	add	eax, 1
	mov	DWORD PTR ?RenderStateChange@@3JA, eax	; RenderStateChange
$L81237:

; 192  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?FlushPolyBuckets@@YAXXZ ENDP				; FlushPolyBuckets
_TEXT	ENDS
PUBLIC	?FlushEnvBuckets@@YAXXZ				; FlushEnvBuckets
PUBLIC	?FlushOneBucketEnv@@YAXPAUBUCKET_ENV@@J@Z	; FlushOneBucketEnv
EXTRN	?RenderAlpha@@3FA:WORD				; RenderAlpha
EXTRN	?RenderAlphaSrc@@3FA:WORD			; RenderAlphaSrc
EXTRN	?RenderAlphaDest@@3FA:WORD			; RenderAlphaDest
EXTRN	?RenderZwrite@@3FA:WORD				; RenderZwrite
; Function compile flags: /Odt /ZI
;	COMDAT ?FlushEnvBuckets@@YAXXZ
_TEXT	SEGMENT
?FlushEnvBuckets@@YAXXZ PROC NEAR			; FlushEnvBuckets, COMDAT

; 199  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 200  : 
; 201  : // set env render states
; 202  : 
; 203  : 	ZWRITE_OFF();

	movsx	eax, WORD PTR ?RenderZwrite@@3FA	; RenderZwrite
	test	eax, eax
	je	SHORT $L81286
	mov	WORD PTR ?RenderZwrite@@3FA, 0		; RenderZwrite
	movsx	eax, WORD PTR ?RenderZwrite@@3FA	; RenderZwrite
	push	eax
	push	14					; 0000000eH
	mov	ecx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	eax
	call	DWORD PTR [edx+88]
	mov	eax, DWORD PTR ?RenderStateChange@@3JA	; RenderStateChange
	add	eax, 1
	mov	DWORD PTR ?RenderStateChange@@3JA, eax	; RenderStateChange
$L81286:

; 204  : 	ALPHA_ON();

	movsx	eax, WORD PTR ?RenderAlpha@@3FA		; RenderAlpha
	test	eax, eax
	jne	SHORT $L81287
	mov	WORD PTR ?RenderAlpha@@3FA, 1		; RenderAlpha
	movsx	eax, WORD PTR ?RenderAlpha@@3FA		; RenderAlpha
	push	eax
	push	27					; 0000001bH
	mov	ecx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	eax
	call	DWORD PTR [edx+88]
	mov	eax, DWORD PTR ?RenderStateChange@@3JA	; RenderStateChange
	add	eax, 1
	mov	DWORD PTR ?RenderStateChange@@3JA, eax	; RenderStateChange
$L81287:

; 205  : 
; 206  : 	ALPHA_SRC(D3DBLEND_ONE);

	movsx	eax, WORD PTR ?RenderAlphaSrc@@3FA	; RenderAlphaSrc
	cmp	eax, 2
	je	SHORT $L81288
	mov	WORD PTR ?RenderAlphaSrc@@3FA, 2	; RenderAlphaSrc
	movsx	eax, WORD PTR ?RenderAlphaSrc@@3FA	; RenderAlphaSrc
	push	eax
	push	19					; 00000013H
	mov	ecx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	eax
	call	DWORD PTR [edx+88]
	mov	eax, DWORD PTR ?RenderStateChange@@3JA	; RenderStateChange
	add	eax, 1
	mov	DWORD PTR ?RenderStateChange@@3JA, eax	; RenderStateChange
$L81288:

; 207  : 	ALPHA_DEST(D3DBLEND_ONE);

	movsx	eax, WORD PTR ?RenderAlphaDest@@3FA	; RenderAlphaDest
	cmp	eax, 2
	je	SHORT $L81289
	mov	WORD PTR ?RenderAlphaDest@@3FA, 2	; RenderAlphaDest
	movsx	eax, WORD PTR ?RenderAlphaDest@@3FA	; RenderAlphaDest
	push	eax
	push	20					; 00000014H
	mov	ecx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	eax
	call	DWORD PTR [edx+88]
	mov	eax, DWORD PTR ?RenderStateChange@@3JA	; RenderStateChange
	add	eax, 1
	mov	DWORD PTR ?RenderStateChange@@3JA, eax	; RenderStateChange
$L81289:

; 208  : 
; 209  : // env still
; 210  : 
; 211  : 	if (BucketEnvStill.CurrentVerts != BucketEnvStill.Verts)

	cmp	DWORD PTR ?BucketEnvStill@@3UBUCKET_ENV@@A+8004, OFFSET FLAT:?BucketEnvStill@@3UBUCKET_ENV@@A+8008
	je	$L81290

; 212  : 	{
; 213  : 		FOG_OFF();

	movsx	eax, WORD PTR ?RenderFog@@3FA		; RenderFog
	test	eax, eax
	je	SHORT $L81291
	mov	WORD PTR ?RenderFog@@3FA, 0		; RenderFog
	movsx	eax, WORD PTR ?RenderFog@@3FA		; RenderFog
	push	eax
	push	28					; 0000001cH
	mov	ecx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	eax
	call	DWORD PTR [edx+88]
	mov	eax, DWORD PTR ?RenderStateChange@@3JA	; RenderStateChange
	add	eax, 1
	mov	DWORD PTR ?RenderStateChange@@3JA, eax	; RenderStateChange
$L81291:

; 214  : 		SET_TPAGE(TPAGE_ENVSTILL);

	movsx	eax, WORD PTR ?RenderTP@@3FA		; RenderTP
	cmp	eax, 24					; 00000018H
	je	SHORT $L81292
	mov	WORD PTR ?RenderTP@@3FA, 24		; RenderTP, 00000018H
	movsx	eax, WORD PTR ?RenderTP@@3FA		; RenderTP
	cmp	eax, -1
	jne	SHORT $L81293
	push	0
	push	0
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	edx
	call	DWORD PTR [ecx+152]
	mov	eax, DWORD PTR ?TextureStateChange@@3JA	; TextureStateChange
	add	eax, 1
	mov	DWORD PTR ?TextureStateChange@@3JA, eax	; TextureStateChange
	jmp	SHORT $L81292
$L81293:
	movsx	eax, WORD PTR ?RenderTP@@3FA		; RenderTP
	shl	eax, 6
	mov	ecx, DWORD PTR ?TexInfo@@3PAUTEXINFO@@A	; TexInfo
	mov	edx, DWORD PTR [ecx+eax+52]
	push	edx
	push	0
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	edx
	call	DWORD PTR [ecx+152]
	mov	eax, DWORD PTR ?TextureStateChange@@3JA	; TextureStateChange
	add	eax, 1
	mov	DWORD PTR ?TextureStateChange@@3JA, eax	; TextureStateChange
$L81292:

; 215  : 		FlushOneBucketEnv(&BucketEnvStill, FALSE);

	push	0
	push	OFFSET FLAT:?BucketEnvStill@@3UBUCKET_ENV@@A ; BucketEnvStill
	call	?FlushOneBucketEnv@@YAXPAUBUCKET_ENV@@J@Z ; FlushOneBucketEnv
	add	esp, 8
$L81290:

; 216  : 	}
; 217  : 
; 218  : 	if (BucketEnvStillFog.CurrentVerts != BucketEnvStillFog.Verts)

	cmp	DWORD PTR ?BucketEnvStillFog@@3UBUCKET_ENV@@A+8004, OFFSET FLAT:?BucketEnvStillFog@@3UBUCKET_ENV@@A+8008
	je	$L81295

; 219  : 	{
; 220  : 		FOG_ON();

	movsx	eax, WORD PTR ?RenderFog@@3FA		; RenderFog
	test	eax, eax
	jne	SHORT $L81296
	mov	WORD PTR ?RenderFog@@3FA, 1		; RenderFog
	movsx	eax, WORD PTR ?RenderFog@@3FA		; RenderFog
	push	eax
	push	28					; 0000001cH
	mov	ecx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	eax
	call	DWORD PTR [edx+88]
	mov	eax, DWORD PTR ?RenderStateChange@@3JA	; RenderStateChange
	add	eax, 1
	mov	DWORD PTR ?RenderStateChange@@3JA, eax	; RenderStateChange
$L81296:

; 221  : 		SET_TPAGE(TPAGE_ENVSTILL);

	movsx	eax, WORD PTR ?RenderTP@@3FA		; RenderTP
	cmp	eax, 24					; 00000018H
	je	SHORT $L81297
	mov	WORD PTR ?RenderTP@@3FA, 24		; RenderTP, 00000018H
	movsx	eax, WORD PTR ?RenderTP@@3FA		; RenderTP
	cmp	eax, -1
	jne	SHORT $L81298
	push	0
	push	0
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	edx
	call	DWORD PTR [ecx+152]
	mov	eax, DWORD PTR ?TextureStateChange@@3JA	; TextureStateChange
	add	eax, 1
	mov	DWORD PTR ?TextureStateChange@@3JA, eax	; TextureStateChange
	jmp	SHORT $L81297
$L81298:
	movsx	eax, WORD PTR ?RenderTP@@3FA		; RenderTP
	shl	eax, 6
	mov	ecx, DWORD PTR ?TexInfo@@3PAUTEXINFO@@A	; TexInfo
	mov	edx, DWORD PTR [ecx+eax+52]
	push	edx
	push	0
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	edx
	call	DWORD PTR [ecx+152]
	mov	eax, DWORD PTR ?TextureStateChange@@3JA	; TextureStateChange
	add	eax, 1
	mov	DWORD PTR ?TextureStateChange@@3JA, eax	; TextureStateChange
$L81297:

; 222  : 		FlushOneBucketEnv(&BucketEnvStillFog, FALSE);

	push	0
	push	OFFSET FLAT:?BucketEnvStillFog@@3UBUCKET_ENV@@A ; BucketEnvStillFog
	call	?FlushOneBucketEnv@@YAXPAUBUCKET_ENV@@J@Z ; FlushOneBucketEnv
	add	esp, 8
$L81295:

; 223  : 	}
; 224  : 
; 225  : 	if (BucketEnvStillClip.CurrentVerts != BucketEnvStillClip.Verts)

	cmp	DWORD PTR ?BucketEnvStillClip@@3UBUCKET_ENV@@A+8004, OFFSET FLAT:?BucketEnvStillClip@@3UBUCKET_ENV@@A+8008
	je	$L81300

; 226  : 	{
; 227  : 		FOG_OFF();

	movsx	eax, WORD PTR ?RenderFog@@3FA		; RenderFog
	test	eax, eax
	je	SHORT $L81301
	mov	WORD PTR ?RenderFog@@3FA, 0		; RenderFog
	movsx	eax, WORD PTR ?RenderFog@@3FA		; RenderFog
	push	eax
	push	28					; 0000001cH
	mov	ecx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	eax
	call	DWORD PTR [edx+88]
	mov	eax, DWORD PTR ?RenderStateChange@@3JA	; RenderStateChange
	add	eax, 1
	mov	DWORD PTR ?RenderStateChange@@3JA, eax	; RenderStateChange
$L81301:

; 228  : 		SET_TPAGE(TPAGE_ENVSTILL);

	movsx	eax, WORD PTR ?RenderTP@@3FA		; RenderTP
	cmp	eax, 24					; 00000018H
	je	SHORT $L81302
	mov	WORD PTR ?RenderTP@@3FA, 24		; RenderTP, 00000018H
	movsx	eax, WORD PTR ?RenderTP@@3FA		; RenderTP
	cmp	eax, -1
	jne	SHORT $L81303
	push	0
	push	0
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	edx
	call	DWORD PTR [ecx+152]
	mov	eax, DWORD PTR ?TextureStateChange@@3JA	; TextureStateChange
	add	eax, 1
	mov	DWORD PTR ?TextureStateChange@@3JA, eax	; TextureStateChange
	jmp	SHORT $L81302
$L81303:
	movsx	eax, WORD PTR ?RenderTP@@3FA		; RenderTP
	shl	eax, 6
	mov	ecx, DWORD PTR ?TexInfo@@3PAUTEXINFO@@A	; TexInfo
	mov	edx, DWORD PTR [ecx+eax+52]
	push	edx
	push	0
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	edx
	call	DWORD PTR [ecx+152]
	mov	eax, DWORD PTR ?TextureStateChange@@3JA	; TextureStateChange
	add	eax, 1
	mov	DWORD PTR ?TextureStateChange@@3JA, eax	; TextureStateChange
$L81302:

; 229  : 		FlushOneBucketEnv(&BucketEnvStillClip, TRUE);

	push	1
	push	OFFSET FLAT:?BucketEnvStillClip@@3UBUCKET_ENV@@A ; BucketEnvStillClip
	call	?FlushOneBucketEnv@@YAXPAUBUCKET_ENV@@J@Z ; FlushOneBucketEnv
	add	esp, 8
$L81300:

; 230  : 	}
; 231  : 
; 232  : 	if (BucketEnvStillClipFog.CurrentVerts != BucketEnvStillClipFog.Verts)

	cmp	DWORD PTR ?BucketEnvStillClipFog@@3UBUCKET_ENV@@A+8004, OFFSET FLAT:?BucketEnvStillClipFog@@3UBUCKET_ENV@@A+8008
	je	$L81305

; 233  : 	{
; 234  : 		FOG_ON();

	movsx	eax, WORD PTR ?RenderFog@@3FA		; RenderFog
	test	eax, eax
	jne	SHORT $L81306
	mov	WORD PTR ?RenderFog@@3FA, 1		; RenderFog
	movsx	eax, WORD PTR ?RenderFog@@3FA		; RenderFog
	push	eax
	push	28					; 0000001cH
	mov	ecx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	eax
	call	DWORD PTR [edx+88]
	mov	eax, DWORD PTR ?RenderStateChange@@3JA	; RenderStateChange
	add	eax, 1
	mov	DWORD PTR ?RenderStateChange@@3JA, eax	; RenderStateChange
$L81306:

; 235  : 		SET_TPAGE(TPAGE_ENVSTILL);

	movsx	eax, WORD PTR ?RenderTP@@3FA		; RenderTP
	cmp	eax, 24					; 00000018H
	je	SHORT $L81307
	mov	WORD PTR ?RenderTP@@3FA, 24		; RenderTP, 00000018H
	movsx	eax, WORD PTR ?RenderTP@@3FA		; RenderTP
	cmp	eax, -1
	jne	SHORT $L81308
	push	0
	push	0
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	edx
	call	DWORD PTR [ecx+152]
	mov	eax, DWORD PTR ?TextureStateChange@@3JA	; TextureStateChange
	add	eax, 1
	mov	DWORD PTR ?TextureStateChange@@3JA, eax	; TextureStateChange
	jmp	SHORT $L81307
$L81308:
	movsx	eax, WORD PTR ?RenderTP@@3FA		; RenderTP
	shl	eax, 6
	mov	ecx, DWORD PTR ?TexInfo@@3PAUTEXINFO@@A	; TexInfo
	mov	edx, DWORD PTR [ecx+eax+52]
	push	edx
	push	0
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	edx
	call	DWORD PTR [ecx+152]
	mov	eax, DWORD PTR ?TextureStateChange@@3JA	; TextureStateChange
	add	eax, 1
	mov	DWORD PTR ?TextureStateChange@@3JA, eax	; TextureStateChange
$L81307:

; 236  : 		FlushOneBucketEnv(&BucketEnvStillClipFog, TRUE);

	push	1
	push	OFFSET FLAT:?BucketEnvStillClipFog@@3UBUCKET_ENV@@A ; BucketEnvStillClipFog
	call	?FlushOneBucketEnv@@YAXPAUBUCKET_ENV@@J@Z ; FlushOneBucketEnv
	add	esp, 8
$L81305:

; 237  : 	}
; 238  : 
; 239  : // env roll
; 240  : 
; 241  : 	if (BucketEnvRoll.CurrentVerts != BucketEnvRoll.Verts)

	cmp	DWORD PTR ?BucketEnvRoll@@3UBUCKET_ENV@@A+8004, OFFSET FLAT:?BucketEnvRoll@@3UBUCKET_ENV@@A+8008
	je	$L81310

; 242  : 	{
; 243  : 		FOG_OFF();

	movsx	eax, WORD PTR ?RenderFog@@3FA		; RenderFog
	test	eax, eax
	je	SHORT $L81311
	mov	WORD PTR ?RenderFog@@3FA, 0		; RenderFog
	movsx	eax, WORD PTR ?RenderFog@@3FA		; RenderFog
	push	eax
	push	28					; 0000001cH
	mov	ecx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	eax
	call	DWORD PTR [edx+88]
	mov	eax, DWORD PTR ?RenderStateChange@@3JA	; RenderStateChange
	add	eax, 1
	mov	DWORD PTR ?RenderStateChange@@3JA, eax	; RenderStateChange
$L81311:

; 244  : 		SET_TPAGE(TPAGE_ENVROLL);

	movsx	eax, WORD PTR ?RenderTP@@3FA		; RenderTP
	cmp	eax, 25					; 00000019H
	je	SHORT $L81312
	mov	WORD PTR ?RenderTP@@3FA, 25		; RenderTP, 00000019H
	movsx	eax, WORD PTR ?RenderTP@@3FA		; RenderTP
	cmp	eax, -1
	jne	SHORT $L81313
	push	0
	push	0
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	edx
	call	DWORD PTR [ecx+152]
	mov	eax, DWORD PTR ?TextureStateChange@@3JA	; TextureStateChange
	add	eax, 1
	mov	DWORD PTR ?TextureStateChange@@3JA, eax	; TextureStateChange
	jmp	SHORT $L81312
$L81313:
	movsx	eax, WORD PTR ?RenderTP@@3FA		; RenderTP
	shl	eax, 6
	mov	ecx, DWORD PTR ?TexInfo@@3PAUTEXINFO@@A	; TexInfo
	mov	edx, DWORD PTR [ecx+eax+52]
	push	edx
	push	0
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	edx
	call	DWORD PTR [ecx+152]
	mov	eax, DWORD PTR ?TextureStateChange@@3JA	; TextureStateChange
	add	eax, 1
	mov	DWORD PTR ?TextureStateChange@@3JA, eax	; TextureStateChange
$L81312:

; 245  : 		FlushOneBucketEnv(&BucketEnvRoll, FALSE);

	push	0
	push	OFFSET FLAT:?BucketEnvRoll@@3UBUCKET_ENV@@A ; BucketEnvRoll
	call	?FlushOneBucketEnv@@YAXPAUBUCKET_ENV@@J@Z ; FlushOneBucketEnv
	add	esp, 8
$L81310:

; 246  : 	}
; 247  : 
; 248  : 	if (BucketEnvRollFog.CurrentVerts != BucketEnvRollFog.Verts)

	cmp	DWORD PTR ?BucketEnvRollFog@@3UBUCKET_ENV@@A+8004, OFFSET FLAT:?BucketEnvRollFog@@3UBUCKET_ENV@@A+8008
	je	$L81315

; 249  : 	{
; 250  : 		FOG_ON();

	movsx	eax, WORD PTR ?RenderFog@@3FA		; RenderFog
	test	eax, eax
	jne	SHORT $L81316
	mov	WORD PTR ?RenderFog@@3FA, 1		; RenderFog
	movsx	eax, WORD PTR ?RenderFog@@3FA		; RenderFog
	push	eax
	push	28					; 0000001cH
	mov	ecx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	eax
	call	DWORD PTR [edx+88]
	mov	eax, DWORD PTR ?RenderStateChange@@3JA	; RenderStateChange
	add	eax, 1
	mov	DWORD PTR ?RenderStateChange@@3JA, eax	; RenderStateChange
$L81316:

; 251  : 		SET_TPAGE(TPAGE_ENVROLL);

	movsx	eax, WORD PTR ?RenderTP@@3FA		; RenderTP
	cmp	eax, 25					; 00000019H
	je	SHORT $L81317
	mov	WORD PTR ?RenderTP@@3FA, 25		; RenderTP, 00000019H
	movsx	eax, WORD PTR ?RenderTP@@3FA		; RenderTP
	cmp	eax, -1
	jne	SHORT $L81318
	push	0
	push	0
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	edx
	call	DWORD PTR [ecx+152]
	mov	eax, DWORD PTR ?TextureStateChange@@3JA	; TextureStateChange
	add	eax, 1
	mov	DWORD PTR ?TextureStateChange@@3JA, eax	; TextureStateChange
	jmp	SHORT $L81317
$L81318:
	movsx	eax, WORD PTR ?RenderTP@@3FA		; RenderTP
	shl	eax, 6
	mov	ecx, DWORD PTR ?TexInfo@@3PAUTEXINFO@@A	; TexInfo
	mov	edx, DWORD PTR [ecx+eax+52]
	push	edx
	push	0
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	edx
	call	DWORD PTR [ecx+152]
	mov	eax, DWORD PTR ?TextureStateChange@@3JA	; TextureStateChange
	add	eax, 1
	mov	DWORD PTR ?TextureStateChange@@3JA, eax	; TextureStateChange
$L81317:

; 252  : 		FlushOneBucketEnv(&BucketEnvRollFog, FALSE);

	push	0
	push	OFFSET FLAT:?BucketEnvRollFog@@3UBUCKET_ENV@@A ; BucketEnvRollFog
	call	?FlushOneBucketEnv@@YAXPAUBUCKET_ENV@@J@Z ; FlushOneBucketEnv
	add	esp, 8
$L81315:

; 253  : 	}
; 254  : 
; 255  : 	if (BucketEnvRollClip.CurrentVerts != BucketEnvRollClip.Verts)

	cmp	DWORD PTR ?BucketEnvRollClip@@3UBUCKET_ENV@@A+8004, OFFSET FLAT:?BucketEnvRollClip@@3UBUCKET_ENV@@A+8008
	je	$L81320

; 256  : 	{
; 257  : 		FOG_OFF();

	movsx	eax, WORD PTR ?RenderFog@@3FA		; RenderFog
	test	eax, eax
	je	SHORT $L81321
	mov	WORD PTR ?RenderFog@@3FA, 0		; RenderFog
	movsx	eax, WORD PTR ?RenderFog@@3FA		; RenderFog
	push	eax
	push	28					; 0000001cH
	mov	ecx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	eax
	call	DWORD PTR [edx+88]
	mov	eax, DWORD PTR ?RenderStateChange@@3JA	; RenderStateChange
	add	eax, 1
	mov	DWORD PTR ?RenderStateChange@@3JA, eax	; RenderStateChange
$L81321:

; 258  : 		SET_TPAGE(TPAGE_ENVROLL);

	movsx	eax, WORD PTR ?RenderTP@@3FA		; RenderTP
	cmp	eax, 25					; 00000019H
	je	SHORT $L81322
	mov	WORD PTR ?RenderTP@@3FA, 25		; RenderTP, 00000019H
	movsx	eax, WORD PTR ?RenderTP@@3FA		; RenderTP
	cmp	eax, -1
	jne	SHORT $L81323
	push	0
	push	0
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	edx
	call	DWORD PTR [ecx+152]
	mov	eax, DWORD PTR ?TextureStateChange@@3JA	; TextureStateChange
	add	eax, 1
	mov	DWORD PTR ?TextureStateChange@@3JA, eax	; TextureStateChange
	jmp	SHORT $L81322
$L81323:
	movsx	eax, WORD PTR ?RenderTP@@3FA		; RenderTP
	shl	eax, 6
	mov	ecx, DWORD PTR ?TexInfo@@3PAUTEXINFO@@A	; TexInfo
	mov	edx, DWORD PTR [ecx+eax+52]
	push	edx
	push	0
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	edx
	call	DWORD PTR [ecx+152]
	mov	eax, DWORD PTR ?TextureStateChange@@3JA	; TextureStateChange
	add	eax, 1
	mov	DWORD PTR ?TextureStateChange@@3JA, eax	; TextureStateChange
$L81322:

; 259  : 		FlushOneBucketEnv(&BucketEnvRollClip, TRUE);

	push	1
	push	OFFSET FLAT:?BucketEnvRollClip@@3UBUCKET_ENV@@A ; BucketEnvRollClip
	call	?FlushOneBucketEnv@@YAXPAUBUCKET_ENV@@J@Z ; FlushOneBucketEnv
	add	esp, 8
$L81320:

; 260  : 	}
; 261  : 
; 262  : 	if (BucketEnvRollClipFog.CurrentVerts != BucketEnvRollClipFog.Verts)

	cmp	DWORD PTR ?BucketEnvRollClipFog@@3UBUCKET_ENV@@A+8004, OFFSET FLAT:?BucketEnvRollClipFog@@3UBUCKET_ENV@@A+8008
	je	$L81325

; 263  : 	{
; 264  : 		FOG_ON();

	movsx	eax, WORD PTR ?RenderFog@@3FA		; RenderFog
	test	eax, eax
	jne	SHORT $L81326
	mov	WORD PTR ?RenderFog@@3FA, 1		; RenderFog
	movsx	eax, WORD PTR ?RenderFog@@3FA		; RenderFog
	push	eax
	push	28					; 0000001cH
	mov	ecx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	eax
	call	DWORD PTR [edx+88]
	mov	eax, DWORD PTR ?RenderStateChange@@3JA	; RenderStateChange
	add	eax, 1
	mov	DWORD PTR ?RenderStateChange@@3JA, eax	; RenderStateChange
$L81326:

; 265  : 		SET_TPAGE(TPAGE_ENVROLL);

	movsx	eax, WORD PTR ?RenderTP@@3FA		; RenderTP
	cmp	eax, 25					; 00000019H
	je	SHORT $L81327
	mov	WORD PTR ?RenderTP@@3FA, 25		; RenderTP, 00000019H
	movsx	eax, WORD PTR ?RenderTP@@3FA		; RenderTP
	cmp	eax, -1
	jne	SHORT $L81328
	push	0
	push	0
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	edx
	call	DWORD PTR [ecx+152]
	mov	eax, DWORD PTR ?TextureStateChange@@3JA	; TextureStateChange
	add	eax, 1
	mov	DWORD PTR ?TextureStateChange@@3JA, eax	; TextureStateChange
	jmp	SHORT $L81327
$L81328:
	movsx	eax, WORD PTR ?RenderTP@@3FA		; RenderTP
	shl	eax, 6
	mov	ecx, DWORD PTR ?TexInfo@@3PAUTEXINFO@@A	; TexInfo
	mov	edx, DWORD PTR [ecx+eax+52]
	push	edx
	push	0
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	edx
	call	DWORD PTR [ecx+152]
	mov	eax, DWORD PTR ?TextureStateChange@@3JA	; TextureStateChange
	add	eax, 1
	mov	DWORD PTR ?TextureStateChange@@3JA, eax	; TextureStateChange
$L81327:

; 266  : 		FlushOneBucketEnv(&BucketEnvRollClipFog, TRUE);

	push	1
	push	OFFSET FLAT:?BucketEnvRollClipFog@@3UBUCKET_ENV@@A ; BucketEnvRollClipFog
	call	?FlushOneBucketEnv@@YAXPAUBUCKET_ENV@@J@Z ; FlushOneBucketEnv
	add	esp, 8
$L81325:

; 267  : 	}
; 268  : 
; 269  : // reset states
; 270  : 
; 271  : 	FOG_OFF();

	movsx	eax, WORD PTR ?RenderFog@@3FA		; RenderFog
	test	eax, eax
	je	SHORT $L81330
	mov	WORD PTR ?RenderFog@@3FA, 0		; RenderFog
	movsx	eax, WORD PTR ?RenderFog@@3FA		; RenderFog
	push	eax
	push	28					; 0000001cH
	mov	ecx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	eax
	call	DWORD PTR [edx+88]
	mov	eax, DWORD PTR ?RenderStateChange@@3JA	; RenderStateChange
	add	eax, 1
	mov	DWORD PTR ?RenderStateChange@@3JA, eax	; RenderStateChange
$L81330:

; 272  : 	ALPHA_OFF();

	movsx	eax, WORD PTR ?RenderAlpha@@3FA		; RenderAlpha
	test	eax, eax
	je	SHORT $L81331
	mov	WORD PTR ?RenderAlpha@@3FA, 0		; RenderAlpha
	movsx	eax, WORD PTR ?RenderAlpha@@3FA		; RenderAlpha
	push	eax
	push	27					; 0000001bH
	mov	ecx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	eax
	call	DWORD PTR [edx+88]
	mov	eax, DWORD PTR ?RenderStateChange@@3JA	; RenderStateChange
	add	eax, 1
	mov	DWORD PTR ?RenderStateChange@@3JA, eax	; RenderStateChange
$L81331:

; 273  : 	ZWRITE_ON();

	movsx	eax, WORD PTR ?RenderZwrite@@3FA	; RenderZwrite
	test	eax, eax
	jne	SHORT $L81285
	mov	WORD PTR ?RenderZwrite@@3FA, 1		; RenderZwrite
	movsx	eax, WORD PTR ?RenderZwrite@@3FA	; RenderZwrite
	push	eax
	push	14					; 0000000eH
	mov	ecx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	eax
	call	DWORD PTR [edx+88]
	mov	eax, DWORD PTR ?RenderStateChange@@3JA	; RenderStateChange
	add	eax, 1
	mov	DWORD PTR ?RenderStateChange@@3JA, eax	; RenderStateChange
$L81285:

; 274  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?FlushEnvBuckets@@YAXXZ ENDP				; FlushEnvBuckets
; Function compile flags: /Odt /ZI
_TEXT	ENDS
;	COMDAT ?FlushOneBucketTEX0@@YAXPAUBUCKET_TEX0@@J@Z
_TEXT	SEGMENT
_flag$ = -4						; size = 4
_bucket$ = 8						; size = 4
_clip$ = 12						; size = 4
?FlushOneBucketTEX0@@YAXPAUBUCKET_TEX0@@J@Z PROC NEAR	; FlushOneBucketTEX0, COMDAT

; 281  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 282  : 	DWORD flag;
; 283  : 
; 284  : 	if (clip) flag = D3DDP_DONOTUPDATEEXTENTS;

	cmp	DWORD PTR _clip$[ebp], 0
	je	SHORT $L81338
	mov	DWORD PTR _flag$[ebp], 8

; 285  : 	else flag = D3DDP_DONOTUPDATEEXTENTS | D3DDP_DONOTCLIP;

	jmp	SHORT $L81339
$L81338:
	mov	DWORD PTR _flag$[ebp], 12		; 0000000cH
$L81339:

; 286  : 
; 287  : 	D3Ddevice->DrawIndexedPrimitive(D3DPT_TRIANGLELIST, FVF_TEX0, bucket->Verts, (DWORD)(bucket->CurrentVerts - bucket->Verts), bucket->Index, (DWORD)(bucket->CurrentIndex - bucket->Index), flag);

	mov	eax, DWORD PTR _flag$[ebp]
	push	eax
	mov	ecx, DWORD PTR _bucket$[ebp]
	mov	edx, DWORD PTR [ecx+800]
	sub	edx, DWORD PTR _bucket$[ebp]
	sar	edx, 1
	push	edx
	mov	eax, DWORD PTR _bucket$[ebp]
	push	eax
	mov	ecx, DWORD PTR _bucket$[ebp]
	add	ecx, 808				; 00000328H
	mov	edx, DWORD PTR _bucket$[ebp]
	mov	eax, DWORD PTR [edx+804]
	sub	eax, ecx
	cdq
	mov	ecx, 24					; 00000018H
	idiv	ecx
	push	eax
	mov	edx, DWORD PTR _bucket$[ebp]
	add	edx, 808				; 00000328H
	push	edx
	push	196					; 000000c4H
	push	4
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	edx
	call	DWORD PTR [ecx+116]

; 288  : 
; 289  : 	bucket->CurrentIndex = bucket->Index;

	mov	eax, DWORD PTR _bucket$[ebp]
	mov	ecx, DWORD PTR _bucket$[ebp]
	mov	DWORD PTR [eax+800], ecx

; 290  : 	bucket->CurrentVerts = bucket->Verts;

	mov	eax, DWORD PTR _bucket$[ebp]
	add	eax, 808				; 00000328H
	mov	ecx, DWORD PTR _bucket$[ebp]
	mov	DWORD PTR [ecx+804], eax

; 291  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?FlushOneBucketTEX0@@YAXPAUBUCKET_TEX0@@J@Z ENDP	; FlushOneBucketTEX0
; Function compile flags: /Odt /ZI
_TEXT	ENDS
;	COMDAT ?FlushOneBucketTEX1@@YAXPAUBUCKET_TEX1@@J@Z
_TEXT	SEGMENT
_flag$ = -4						; size = 4
_bucket$ = 8						; size = 4
_clip$ = 12						; size = 4
?FlushOneBucketTEX1@@YAXPAUBUCKET_TEX1@@J@Z PROC NEAR	; FlushOneBucketTEX1, COMDAT

; 298  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 299  : 	DWORD flag;
; 300  : 
; 301  : 	if (clip) flag = D3DDP_DONOTUPDATEEXTENTS;

	cmp	DWORD PTR _clip$[ebp], 0
	je	SHORT $L81347
	mov	DWORD PTR _flag$[ebp], 8

; 302  : 	else flag = D3DDP_DONOTUPDATEEXTENTS | D3DDP_DONOTCLIP;

	jmp	SHORT $L81348
$L81347:
	mov	DWORD PTR _flag$[ebp], 12		; 0000000cH
$L81348:

; 303  : 
; 304  : 	D3Ddevice->DrawIndexedPrimitive(D3DPT_TRIANGLELIST, FVF_TEX1, bucket->Verts, (DWORD)(bucket->CurrentVerts - bucket->Verts), bucket->Index, (DWORD)(bucket->CurrentIndex - bucket->Index), flag);

	mov	eax, DWORD PTR _flag$[ebp]
	push	eax
	mov	ecx, DWORD PTR _bucket$[ebp]
	mov	edx, DWORD PTR [ecx+800]
	sub	edx, DWORD PTR _bucket$[ebp]
	sar	edx, 1
	push	edx
	mov	eax, DWORD PTR _bucket$[ebp]
	push	eax
	mov	ecx, DWORD PTR _bucket$[ebp]
	add	ecx, 808				; 00000328H
	mov	edx, DWORD PTR _bucket$[ebp]
	mov	eax, DWORD PTR [edx+804]
	sub	eax, ecx
	sar	eax, 5
	push	eax
	mov	ecx, DWORD PTR _bucket$[ebp]
	add	ecx, 808				; 00000328H
	push	ecx
	push	452					; 000001c4H
	push	4
	mov	edx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	ecx
	call	DWORD PTR [eax+116]

; 305  : 
; 306  : 	bucket->CurrentIndex = bucket->Index;

	mov	eax, DWORD PTR _bucket$[ebp]
	mov	ecx, DWORD PTR _bucket$[ebp]
	mov	DWORD PTR [eax+800], ecx

; 307  : 	bucket->CurrentVerts = bucket->Verts;

	mov	eax, DWORD PTR _bucket$[ebp]
	add	eax, 808				; 00000328H
	mov	ecx, DWORD PTR _bucket$[ebp]
	mov	DWORD PTR [ecx+804], eax

; 308  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?FlushOneBucketTEX1@@YAXPAUBUCKET_TEX1@@J@Z ENDP	; FlushOneBucketTEX1
; Function compile flags: /Odt /ZI
_TEXT	ENDS
;	COMDAT ?FlushOneBucketEnv@@YAXPAUBUCKET_ENV@@J@Z
_TEXT	SEGMENT
_flag$ = -4						; size = 4
_bucket$ = 8						; size = 4
_clip$ = 12						; size = 4
?FlushOneBucketEnv@@YAXPAUBUCKET_ENV@@J@Z PROC NEAR	; FlushOneBucketEnv, COMDAT

; 315  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 316  : 	DWORD flag;
; 317  : 
; 318  : 	if (clip) flag = D3DDP_DONOTUPDATEEXTENTS;

	cmp	DWORD PTR _clip$[ebp], 0
	je	SHORT $L81356
	mov	DWORD PTR _flag$[ebp], 8

; 319  : 	else flag = D3DDP_DONOTUPDATEEXTENTS | D3DDP_DONOTCLIP;

	jmp	SHORT $L81357
$L81356:
	mov	DWORD PTR _flag$[ebp], 12		; 0000000cH
$L81357:

; 320  : 
; 321  : 	D3Ddevice->DrawIndexedPrimitive(D3DPT_TRIANGLELIST, FVF_TEX1, bucket->Verts, (DWORD)(bucket->CurrentVerts - bucket->Verts), bucket->Index, (DWORD)(bucket->CurrentIndex - bucket->Index), flag);

	mov	eax, DWORD PTR _flag$[ebp]
	push	eax
	mov	ecx, DWORD PTR _bucket$[ebp]
	mov	edx, DWORD PTR [ecx+8000]
	sub	edx, DWORD PTR _bucket$[ebp]
	sar	edx, 1
	push	edx
	mov	eax, DWORD PTR _bucket$[ebp]
	push	eax
	mov	ecx, DWORD PTR _bucket$[ebp]
	add	ecx, 8008				; 00001f48H
	mov	edx, DWORD PTR _bucket$[ebp]
	mov	eax, DWORD PTR [edx+8004]
	sub	eax, ecx
	sar	eax, 5
	push	eax
	mov	ecx, DWORD PTR _bucket$[ebp]
	add	ecx, 8008				; 00001f48H
	push	ecx
	push	452					; 000001c4H
	push	4
	mov	edx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	ecx
	call	DWORD PTR [eax+116]

; 322  : 
; 323  : 	bucket->CurrentIndex = bucket->Index;

	mov	eax, DWORD PTR _bucket$[ebp]
	mov	ecx, DWORD PTR _bucket$[ebp]
	mov	DWORD PTR [eax+8000], ecx

; 324  : 	bucket->CurrentVerts = bucket->Verts;

	mov	eax, DWORD PTR _bucket$[ebp]
	add	eax, 8008				; 00001f48H
	mov	ecx, DWORD PTR _bucket$[ebp]
	mov	DWORD PTR [ecx+8004], eax

; 325  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?FlushOneBucketEnv@@YAXPAUBUCKET_ENV@@J@Z ENDP		; FlushOneBucketEnv
_TEXT	ENDS
PUBLIC	?Reset3dPolyList@@YAXXZ				; Reset3dPolyList
_BSS	SEGMENT
_Poly3dCount DD	01H DUP (?)
; Function compile flags: /Odt /ZI
_BSS	ENDS
;	COMDAT ?Reset3dPolyList@@YAXXZ
_TEXT	SEGMENT
?Reset3dPolyList@@YAXXZ PROC NEAR			; Reset3dPolyList, COMDAT

; 332  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 333  : 	Poly3dCount = 0;

	mov	DWORD PTR _Poly3dCount, 0

; 334  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Reset3dPolyList@@YAXXZ ENDP				; Reset3dPolyList
_TEXT	ENDS
PUBLIC	?Draw3dPolyList@@YAXXZ				; Draw3dPolyList
EXTRN	__fltused:NEAR
EXTRN	?ViewMatrixScaled@@3TMatrixUnion@@A:BYTE	; ViewMatrixScaled
EXTRN	?ViewTransScaled@@3UVectorStruct@@A:BYTE	; ViewTransScaled
EXTRN	?RotTransPersVector@@YAXPATMatrixUnion@@PAUVectorStruct@@1PAM@Z:NEAR ; RotTransPersVector
_BSS	SEGMENT
_Poly3d	DB	06000H DUP (?)
; Function compile flags: /Odt /ZI
_BSS	ENDS
;	COMDAT ?Draw3dPolyList@@YAXXZ
_TEXT	SEGMENT
_verts$ = -16						; size = 4
_poly$ = -12						; size = 4
_j$ = -8						; size = 4
_i$ = -4						; size = 4
?Draw3dPolyList@@YAXXZ PROC NEAR			; Draw3dPolyList, COMDAT

; 341  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi

; 342  : 	long i, j;
; 343  : 	DRAW_3D_POLY *poly;
; 344  : 	VERTEX_TEX1 *verts;
; 345  : 
; 346  : // skip if none
; 347  : 
; 348  : 	if (!Poly3dCount) return;

	cmp	DWORD PTR _Poly3dCount, 0
	jne	SHORT $L81370
	jmp	$L81365
$L81370:

; 349  : 
; 350  : // leap thru polys
; 351  : 
; 352  : 	poly = Poly3d;

	mov	DWORD PTR _poly$[ebp], OFFSET FLAT:_Poly3d

; 353  : 
; 354  : 	for (i = Poly3dCount ; i ; i--, poly++)

	mov	eax, DWORD PTR _Poly3dCount
	mov	DWORD PTR _i$[ebp], eax
	jmp	SHORT $L81371
$L81372:
	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	mov	ecx, DWORD PTR _poly$[ebp]
	add	ecx, 192				; 000000c0H
	mov	DWORD PTR _poly$[ebp], ecx
$L81371:
	cmp	DWORD PTR _i$[ebp], 0
	je	$L81373

; 355  : 	{
; 356  : 
; 357  : // semi
; 358  : 
; 359  : 		if (poly->SemiType != -1)

	mov	eax, DWORD PTR _poly$[ebp]
	cmp	DWORD PTR [eax+12], -1
	je	$L81374

; 360  : 		{
; 361  : 			if (SEMI_POLY_FREE())

	cmp	DWORD PTR ?SemiCount@@3JA, 800		; SemiCount, 00000320H
	jge	$L81375

; 362  : 			{
; 363  : 				SEMI_POLY_SETUP(verts, poly->Fog, poly->VertNum, poly->Tpage, TRUE, poly->SemiType);

	mov	eax, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	eax, 152				; 00000098H
	mov	ecx, DWORD PTR _poly$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[eax+12], edx
	mov	eax, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	eax, 152				; 00000098H
	mov	ecx, DWORD PTR _poly$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[eax+4], edx
	mov	eax, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	eax, 152				; 00000098H
	mov	ecx, DWORD PTR _poly$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[eax+8], edx
	mov	eax, 1
	test	eax, eax
	je	SHORT $L81376
	mov	eax, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	eax, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[eax], 8
	jmp	SHORT $L81377
$L81376:
	mov	eax, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	eax, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[eax], 12 ; 0000000cH
$L81377:
	mov	eax, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	eax, 152				; 00000098H
	mov	ecx, DWORD PTR _poly$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[eax+16], edx
	mov	eax, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	eax, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[eax+20], 0
	mov	eax, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	eax, 152				; 00000098H
	add	eax, OFFSET FLAT:?SemiPoly@@3PAUDRAW_SEMI_POLY@@A+24
	mov	DWORD PTR _verts$[ebp], eax
	mov	ecx, DWORD PTR ?SemiCount@@3JA		; SemiCount
	add	ecx, 1
	mov	DWORD PTR ?SemiCount@@3JA, ecx		; SemiCount

; 364  : 				for (j = 0 ; j < poly->VertNum ; j++)

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $L81378
$L81379:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$L81378:
	mov	eax, DWORD PTR _poly$[ebp]
	mov	ecx, DWORD PTR _j$[ebp]
	cmp	ecx, DWORD PTR [eax]
	jge	$L81375

; 365  : 				{
; 366  : 					RotTransPersVector(&ViewMatrixScaled, &ViewTransScaled, &poly->Pos[j], (REAL*)&verts[j]);

	mov	eax, DWORD PTR _j$[ebp]
	shl	eax, 5
	add	eax, DWORD PTR _verts$[ebp]
	push	eax
	mov	ecx, DWORD PTR _j$[ebp]
	imul	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR _poly$[ebp]
	lea	eax, DWORD PTR [edx+ecx+16]
	push	eax
	push	OFFSET FLAT:?ViewTransScaled@@3UVectorStruct@@A ; ViewTransScaled
	push	OFFSET FLAT:?ViewMatrixScaled@@3TMatrixUnion@@A ; ViewMatrixScaled
	call	?RotTransPersVector@@YAXPATMatrixUnion@@PAUVectorStruct@@1PAM@Z ; RotTransPersVector
	add	esp, 16					; 00000010H

; 367  : 					verts[j].color = poly->Verts[j].color;

	mov	eax, DWORD PTR _j$[ebp]
	shl	eax, 5
	mov	ecx, DWORD PTR _j$[ebp]
	shl	ecx, 5
	mov	edx, DWORD PTR _verts$[ebp]
	mov	esi, DWORD PTR _poly$[ebp]
	mov	eax, DWORD PTR [esi+eax+80]
	mov	DWORD PTR [edx+ecx+16], eax

; 368  : 					verts[j].specular = poly->Verts[j].specular;

	mov	eax, DWORD PTR _j$[ebp]
	shl	eax, 5
	mov	ecx, DWORD PTR _j$[ebp]
	shl	ecx, 5
	mov	edx, DWORD PTR _verts$[ebp]
	mov	esi, DWORD PTR _poly$[ebp]
	mov	eax, DWORD PTR [esi+eax+84]
	mov	DWORD PTR [edx+ecx+20], eax

; 369  : 					verts[j].tu = poly->Verts[j].tu;

	mov	eax, DWORD PTR _j$[ebp]
	shl	eax, 5
	mov	ecx, DWORD PTR _j$[ebp]
	shl	ecx, 5
	mov	edx, DWORD PTR _verts$[ebp]
	mov	esi, DWORD PTR _poly$[ebp]
	mov	eax, DWORD PTR [esi+eax+88]
	mov	DWORD PTR [edx+ecx+24], eax

; 370  : 					verts[j].tv = poly->Verts[j].tv;

	mov	eax, DWORD PTR _j$[ebp]
	shl	eax, 5
	mov	ecx, DWORD PTR _j$[ebp]
	shl	ecx, 5
	mov	edx, DWORD PTR _verts$[ebp]
	mov	esi, DWORD PTR _poly$[ebp]
	mov	eax, DWORD PTR [esi+eax+92]
	mov	DWORD PTR [edx+ecx+28], eax

; 371  : 				}

	jmp	$L81379
$L81375:

; 372  : 			}
; 373  : 		}
; 374  : 
; 375  : // opaque
; 376  : 
; 377  : 		else

	jmp	$L81382
$L81374:

; 378  : 		{
; 379  : 			for (j = 0 ; j < poly->VertNum ; j++)

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $L81383
$L81384:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$L81383:
	mov	eax, DWORD PTR _poly$[ebp]
	mov	ecx, DWORD PTR _j$[ebp]
	cmp	ecx, DWORD PTR [eax]
	jge	SHORT $L81385

; 380  : 				RotTransPersVector(&ViewMatrixScaled, &ViewTransScaled, &poly->Pos[j], (REAL*)&poly->Verts[j]);

	mov	eax, DWORD PTR _j$[ebp]
	shl	eax, 5
	mov	ecx, DWORD PTR _poly$[ebp]
	lea	edx, DWORD PTR [ecx+eax+64]
	push	edx
	mov	eax, DWORD PTR _j$[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _poly$[ebp]
	lea	edx, DWORD PTR [ecx+eax+16]
	push	edx
	push	OFFSET FLAT:?ViewTransScaled@@3UVectorStruct@@A ; ViewTransScaled
	push	OFFSET FLAT:?ViewMatrixScaled@@3TMatrixUnion@@A ; ViewMatrixScaled
	call	?RotTransPersVector@@YAXPATMatrixUnion@@PAUVectorStruct@@1PAM@Z ; RotTransPersVector
	add	esp, 16					; 00000010H
	jmp	SHORT $L81384
$L81385:

; 381  : 
; 382  : 			SET_TPAGE((short)poly->Tpage);

	movsx	eax, WORD PTR ?RenderTP@@3FA		; RenderTP
	mov	ecx, DWORD PTR _poly$[ebp]
	movsx	edx, WORD PTR [ecx+4]
	cmp	eax, edx
	je	SHORT $L81388
	mov	eax, DWORD PTR _poly$[ebp]
	mov	cx, WORD PTR [eax+4]
	mov	WORD PTR ?RenderTP@@3FA, cx		; RenderTP
	movsx	edx, WORD PTR ?RenderTP@@3FA		; RenderTP
	cmp	edx, -1
	jne	SHORT $L81390
	push	0
	push	0
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	edx
	call	DWORD PTR [ecx+152]
	mov	eax, DWORD PTR ?TextureStateChange@@3JA	; TextureStateChange
	add	eax, 1
	mov	DWORD PTR ?TextureStateChange@@3JA, eax	; TextureStateChange
	jmp	SHORT $L81388
$L81390:
	movsx	eax, WORD PTR ?RenderTP@@3FA		; RenderTP
	shl	eax, 6
	mov	ecx, DWORD PTR ?TexInfo@@3PAUTEXINFO@@A	; TexInfo
	mov	edx, DWORD PTR [ecx+eax+52]
	push	edx
	push	0
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	edx
	call	DWORD PTR [ecx+152]
	mov	eax, DWORD PTR ?TextureStateChange@@3JA	; TextureStateChange
	add	eax, 1
	mov	DWORD PTR ?TextureStateChange@@3JA, eax	; TextureStateChange
$L81388:

; 383  : 
; 384  : 			if (poly->Fog)

	mov	eax, DWORD PTR _poly$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $L81392

; 385  : 			{
; 386  : 				FOG_ON();

	movsx	eax, WORD PTR ?RenderFog@@3FA		; RenderFog
	test	eax, eax
	jne	SHORT $L81393
	mov	WORD PTR ?RenderFog@@3FA, 1		; RenderFog
	movsx	eax, WORD PTR ?RenderFog@@3FA		; RenderFog
	push	eax
	push	28					; 0000001cH
	mov	ecx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	eax
	call	DWORD PTR [edx+88]
	mov	eax, DWORD PTR ?RenderStateChange@@3JA	; RenderStateChange
	add	eax, 1
	mov	DWORD PTR ?RenderStateChange@@3JA, eax	; RenderStateChange
$L81393:

; 387  : 			}
; 388  : 			else

	jmp	SHORT $L81394
$L81392:

; 389  : 			{
; 390  : 				FOG_OFF();

	movsx	eax, WORD PTR ?RenderFog@@3FA		; RenderFog
	test	eax, eax
	je	SHORT $L81394
	mov	WORD PTR ?RenderFog@@3FA, 0		; RenderFog
	movsx	eax, WORD PTR ?RenderFog@@3FA		; RenderFog
	push	eax
	push	28					; 0000001cH
	mov	ecx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	eax
	call	DWORD PTR [edx+88]
	mov	eax, DWORD PTR ?RenderStateChange@@3JA	; RenderStateChange
	add	eax, 1
	mov	DWORD PTR ?RenderStateChange@@3JA, eax	; RenderStateChange
$L81394:

; 391  : 			}
; 392  : 
; 393  : 			D3Ddevice->DrawPrimitive(D3DPT_TRIANGLEFAN, FVF_TEX1, poly->Verts, poly->VertNum, D3DDP_DONOTUPDATEEXTENTS);

	push	8
	mov	eax, DWORD PTR _poly$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _poly$[ebp]
	add	edx, 64					; 00000040H
	push	edx
	push	452					; 000001c4H
	push	6
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	edx
	call	DWORD PTR [ecx+112]
$L81382:

; 394  : 		}
; 395  : 	}

	jmp	$L81372
$L81373:

; 396  : 
; 397  : // fog off
; 398  : 
; 399  : 	FOG_OFF();

	movsx	eax, WORD PTR ?RenderFog@@3FA		; RenderFog
	test	eax, eax
	je	SHORT $L81365
	mov	WORD PTR ?RenderFog@@3FA, 0		; RenderFog
	movsx	eax, WORD PTR ?RenderFog@@3FA		; RenderFog
	push	eax
	push	28					; 0000001cH
	mov	ecx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	eax
	call	DWORD PTR [edx+88]
	mov	eax, DWORD PTR ?RenderStateChange@@3JA	; RenderStateChange
	add	eax, 1
	mov	DWORD PTR ?RenderStateChange@@3JA, eax	; RenderStateChange
$L81365:

; 400  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Draw3dPolyList@@YAXXZ ENDP				; Draw3dPolyList
_TEXT	ENDS
PUBLIC	?Get3dPoly@@YAPAUDRAW_3D_POLY@@XZ		; Get3dPoly
; Function compile flags: /Odt /ZI
;	COMDAT ?Get3dPoly@@YAPAUDRAW_3D_POLY@@XZ
_TEXT	SEGMENT
tv68 = -68						; size = 4
?Get3dPoly@@YAPAUDRAW_3D_POLY@@XZ PROC NEAR		; Get3dPoly, COMDAT

; 407  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 408  : 
; 409  : // ret if full
; 410  : 
; 411  : 	if (Poly3dCount == MAX_3D_POLYS)

	cmp	DWORD PTR _Poly3dCount, 128		; 00000080H
	jne	SHORT $L81400

; 412  : 		return NULL;

	xor	eax, eax
	jmp	SHORT $L81399
$L81400:

; 413  : 
; 414  : // ret ptr to poly
; 415  : 
; 416  : 	return &Poly3d[Poly3dCount++];

	mov	eax, DWORD PTR _Poly3dCount
	imul	eax, 192				; 000000c0H
	add	eax, OFFSET FLAT:_Poly3d
	mov	DWORD PTR tv68[ebp], eax
	mov	ecx, DWORD PTR _Poly3dCount
	add	ecx, 1
	mov	DWORD PTR _Poly3dCount, ecx
	mov	eax, DWORD PTR tv68[ebp]
$L81399:

; 417  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get3dPoly@@YAPAUDRAW_3D_POLY@@XZ ENDP			; Get3dPoly
_TEXT	ENDS
PUBLIC	__real@00000000
PUBLIC	__real@43800000
PUBLIC	__real@4b000000
PUBLIC	?DrawNearClipPolyTEX0@@YAXPAUVectorStruct@@PAJJ@Z ; DrawNearClipPolyTEX0
EXTRN	?RenderSettings@@3URENDER_SETTINGS@@A:BYTE	; RenderSettings
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT __real@43800000
CONST	SEGMENT
__real@43800000 DD 043800000r			; 256
CONST	ENDS
;	COMDAT __real@4b000000
CONST	SEGMENT
__real@4b000000 DD 04b000000r			; 8.38861e+006
; Function compile flags: /Odt /ZI
CONST	ENDS
;	COMDAT ?DrawNearClipPolyTEX0@@YAXPAUVectorStruct@@PAJJ@Z
_TEXT	SEGMENT
__temp$81440 = -212					; size = 4
__temp$81428 = -208					; size = 4
_rgbout$ = -204						; size = 4
_rgb1$ = -200						; size = 4
_rgb0$ = -196						; size = 4
_newpos$ = -192						; size = 96
_vec1$ = -96						; size = 4
_vec0$ = -92						; size = 4
_z$ = -88						; size = 32
_z1$ = -56						; size = 4
_z0$ = -52						; size = 4
_mul$ = -48						; size = 4
_newrgb$ = -44						; size = 32
_lmul$ = -12						; size = 4
_i$ = -8						; size = 4
_newvertnum$ = -4					; size = 4
_pos$ = 8						; size = 4
_rgb$ = 12						; size = 4
_vertnum$ = 16						; size = 4
?DrawNearClipPolyTEX0@@YAXPAUVectorStruct@@PAJJ@Z PROC NEAR ; DrawNearClipPolyTEX0, COMDAT

; 424  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 276				; 00000114H
	push	ebx
	push	esi
	push	edi

; 425  : 	long newvertnum, i, lmul, newrgb[8];
; 426  : 	float mul, z0, z1, z[8];
; 427  : 	VEC *vec0, *vec1, newpos[8];
; 428  : 	MODEL_RGB *rgb0, *rgb1, *rgbout;
; 429  : 
; 430  : // clip
; 431  : 
; 432  : 	newvertnum = 0;

	mov	DWORD PTR _newvertnum$[ebp], 0

; 433  : 
; 434  : 	for (i = 0 ; i < vertnum ; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $L81420
$L81421:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$L81420:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _vertnum$[ebp]
	jge	SHORT $L81422

; 435  : 		z[i] = pos[i].v[X] * ViewMatrixScaled.m[RZ] + pos[i].v[Y] * ViewMatrixScaled.m[UZ] + pos[i].v[Z] * ViewMatrixScaled.m[LZ] + ViewTransScaled.v[Z];

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _pos$[ebp]
	fld	DWORD PTR ?ViewMatrixScaled@@3TMatrixUnion@@A+8
	fmul	DWORD PTR [ecx+eax]
	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 12					; 0000000cH
	mov	eax, DWORD PTR _pos$[ebp]
	fld	DWORD PTR ?ViewMatrixScaled@@3TMatrixUnion@@A+20
	fmul	DWORD PTR [eax+edx+4]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR _pos$[ebp]
	fld	DWORD PTR ?ViewMatrixScaled@@3TMatrixUnion@@A+32
	fmul	DWORD PTR [edx+ecx+8]
	faddp	ST(1), ST(0)
	fadd	DWORD PTR ?ViewTransScaled@@3UVectorStruct@@A+8
	mov	eax, DWORD PTR _i$[ebp]
	fstp	DWORD PTR _z$[ebp+eax*4]
	jmp	SHORT $L81421
$L81422:

; 436  : 
; 437  : 	for (i = 0 ; i < vertnum ; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $L81423
$L81424:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$L81423:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _vertnum$[ebp]
	jge	$L81425

; 438  : 	{
; 439  : 		vec0 = &pos[i];

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 12					; 0000000cH
	add	eax, DWORD PTR _pos$[ebp]
	mov	DWORD PTR _vec0$[ebp], eax

; 440  : 		vec1 = &pos[(i + 1) % vertnum];

	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	cdq
	idiv	DWORD PTR _vertnum$[ebp]
	imul	edx, 12					; 0000000cH
	add	edx, DWORD PTR _pos$[ebp]
	mov	DWORD PTR _vec1$[ebp], edx

; 441  : 		z0 = z[i];

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _z$[ebp+eax*4]
	mov	DWORD PTR _z0$[ebp], ecx

; 442  : 		z1 = z[(i + 1) % vertnum];

	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	cdq
	idiv	DWORD PTR _vertnum$[ebp]
	mov	eax, DWORD PTR _z$[ebp+edx*4]
	mov	DWORD PTR _z1$[ebp], eax

; 443  : 
; 444  : 		if (z0 >= 0)

	fld	DWORD PTR _z0$[ebp]
	fcomp	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 1
	jne	$L81426

; 445  : 		{
; 446  : 			newpos[newvertnum] = pos[i];

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 12					; 0000000cH
	add	eax, DWORD PTR _pos$[ebp]
	mov	ecx, DWORD PTR _newvertnum$[ebp]
	imul	ecx, 12					; 0000000cH
	lea	edx, DWORD PTR _newpos$[ebp+ecx]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [edx+8], eax

; 447  : 			newrgb[newvertnum] = rgb[i];

	mov	eax, DWORD PTR _newvertnum$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _rgb$[ebp]
	mov	ecx, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR _newrgb$[ebp+eax*4], ecx

; 448  : 			newvertnum++;

	mov	eax, DWORD PTR _newvertnum$[ebp]
	add	eax, 1
	mov	DWORD PTR _newvertnum$[ebp], eax

; 449  : 
; 450  : 			if (z1 < 0)

	fld	DWORD PTR _z1$[ebp]
	fcomp	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 5
	jp	$L81427

; 451  : 			{
; 452  : 				mul = z0 / (z0 - z1);

	fld	DWORD PTR _z0$[ebp]
	fsub	DWORD PTR _z1$[ebp]
	fdivr	DWORD PTR _z0$[ebp]
	fstp	DWORD PTR _mul$[ebp]

; 453  : 
; 454  : 				newpos[newvertnum].v[X] = vec0->v[X] + (vec1->v[X] - vec0->v[X]) * mul;

	mov	eax, DWORD PTR _vec1$[ebp]
	mov	ecx, DWORD PTR _vec0$[ebp]
	fld	DWORD PTR [eax]
	fsub	DWORD PTR [ecx]
	fmul	DWORD PTR _mul$[ebp]
	mov	edx, DWORD PTR _vec0$[ebp]
	fadd	DWORD PTR [edx]
	mov	eax, DWORD PTR _newvertnum$[ebp]
	imul	eax, 12					; 0000000cH
	fstp	DWORD PTR _newpos$[ebp+eax]

; 455  : 				newpos[newvertnum].v[Y] = vec0->v[Y] + (vec1->v[Y] - vec0->v[Y]) * mul;

	mov	eax, DWORD PTR _vec1$[ebp]
	mov	ecx, DWORD PTR _vec0$[ebp]
	fld	DWORD PTR [eax+4]
	fsub	DWORD PTR [ecx+4]
	fmul	DWORD PTR _mul$[ebp]
	mov	edx, DWORD PTR _vec0$[ebp]
	fadd	DWORD PTR [edx+4]
	mov	eax, DWORD PTR _newvertnum$[ebp]
	imul	eax, 12					; 0000000cH
	fstp	DWORD PTR _newpos$[ebp+eax+4]

; 456  : 				newpos[newvertnum].v[Z] = vec0->v[Z] + (vec1->v[Z] - vec0->v[Z]) * mul;

	mov	eax, DWORD PTR _vec1$[ebp]
	mov	ecx, DWORD PTR _vec0$[ebp]
	fld	DWORD PTR [eax+8]
	fsub	DWORD PTR [ecx+8]
	fmul	DWORD PTR _mul$[ebp]
	mov	edx, DWORD PTR _vec0$[ebp]
	fadd	DWORD PTR [edx+8]
	mov	eax, DWORD PTR _newvertnum$[ebp]
	imul	eax, 12					; 0000000cH
	fstp	DWORD PTR _newpos$[ebp+eax+8]

; 457  : 
; 458  : 				FTOL(mul * 256, lmul);

	fld	DWORD PTR _mul$[ebp]
	fmul	DWORD PTR __real@43800000
	fadd	DWORD PTR __real@4b000000
	fstp	DWORD PTR __temp$81428[ebp]
	mov	eax, DWORD PTR __temp$81428[ebp]
	and	eax, 16777215				; 00ffffffH
	mov	DWORD PTR _lmul$[ebp], eax

; 459  : 
; 460  : 				rgb0 = (MODEL_RGB*)&rgb[i];

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _rgb$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _rgb0$[ebp], edx

; 461  : 				rgb1 = (MODEL_RGB*)&rgb[(i + 1) % vertnum];

	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	cdq
	idiv	DWORD PTR _vertnum$[ebp]
	mov	eax, DWORD PTR _rgb$[ebp]
	lea	ecx, DWORD PTR [eax+edx*4]
	mov	DWORD PTR _rgb1$[ebp], ecx

; 462  : 				rgbout = (MODEL_RGB*)&newrgb[newvertnum];

	mov	eax, DWORD PTR _newvertnum$[ebp]
	lea	ecx, DWORD PTR _newrgb$[ebp+eax*4]
	mov	DWORD PTR _rgbout$[ebp], ecx

; 463  : 
; 464  : 				rgbout->a = rgb0->a + (unsigned char)(((rgb1->a - rgb0->a) * lmul) >> 8);

	mov	eax, DWORD PTR _rgb0$[ebp]
	movzx	ecx, BYTE PTR [eax+3]
	mov	edx, DWORD PTR _rgb1$[ebp]
	movzx	eax, BYTE PTR [edx+3]
	mov	edx, DWORD PTR _rgb0$[ebp]
	movzx	edx, BYTE PTR [edx+3]
	sub	eax, edx
	imul	eax, DWORD PTR _lmul$[ebp]
	sar	eax, 8
	movzx	eax, al
	add	ecx, eax
	mov	edx, DWORD PTR _rgbout$[ebp]
	mov	BYTE PTR [edx+3], cl

; 465  : 				rgbout->r = rgb0->r + (unsigned char)(((rgb1->r - rgb0->r) * lmul) >> 8);

	mov	eax, DWORD PTR _rgb0$[ebp]
	movzx	ecx, BYTE PTR [eax+2]
	mov	edx, DWORD PTR _rgb1$[ebp]
	movzx	eax, BYTE PTR [edx+2]
	mov	edx, DWORD PTR _rgb0$[ebp]
	movzx	edx, BYTE PTR [edx+2]
	sub	eax, edx
	imul	eax, DWORD PTR _lmul$[ebp]
	sar	eax, 8
	movzx	eax, al
	add	ecx, eax
	mov	edx, DWORD PTR _rgbout$[ebp]
	mov	BYTE PTR [edx+2], cl

; 466  : 				rgbout->g = rgb0->g + (unsigned char)(((rgb1->g - rgb0->g) * lmul) >> 8);

	mov	eax, DWORD PTR _rgb0$[ebp]
	movzx	ecx, BYTE PTR [eax+1]
	mov	edx, DWORD PTR _rgb1$[ebp]
	movzx	eax, BYTE PTR [edx+1]
	mov	edx, DWORD PTR _rgb0$[ebp]
	movzx	edx, BYTE PTR [edx+1]
	sub	eax, edx
	imul	eax, DWORD PTR _lmul$[ebp]
	sar	eax, 8
	movzx	eax, al
	add	ecx, eax
	mov	edx, DWORD PTR _rgbout$[ebp]
	mov	BYTE PTR [edx+1], cl

; 467  : 				rgbout->b = rgb0->b + (unsigned char)(((rgb1->b - rgb0->b) * lmul) >> 8);

	mov	eax, DWORD PTR _rgb0$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	edx, DWORD PTR _rgb1$[ebp]
	movzx	eax, BYTE PTR [edx]
	mov	edx, DWORD PTR _rgb0$[ebp]
	movzx	edx, BYTE PTR [edx]
	sub	eax, edx
	imul	eax, DWORD PTR _lmul$[ebp]
	sar	eax, 8
	movzx	eax, al
	add	ecx, eax
	mov	edx, DWORD PTR _rgbout$[ebp]
	mov	BYTE PTR [edx], cl

; 468  : 
; 469  : 				newvertnum++;

	mov	eax, DWORD PTR _newvertnum$[ebp]
	add	eax, 1
	mov	DWORD PTR _newvertnum$[ebp], eax
$L81427:

; 470  : 			}
; 471  : 		}
; 472  : 		else

	jmp	$L81438
$L81426:

; 473  : 		{
; 474  : 			if (z1 >= RenderSettings.NearClip)

	fld	DWORD PTR _z1$[ebp]
	fcomp	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+28
	fnstsw	ax
	test	ah, 1
	jne	$L81438

; 475  : 			{
; 476  : 				mul = z1 / (z1 - z0);

	fld	DWORD PTR _z1$[ebp]
	fsub	DWORD PTR _z0$[ebp]
	fdivr	DWORD PTR _z1$[ebp]
	fstp	DWORD PTR _mul$[ebp]

; 477  : 
; 478  : 				newpos[newvertnum].v[X] = vec1->v[X] + (vec0->v[X] - vec1->v[X]) * mul;

	mov	eax, DWORD PTR _vec0$[ebp]
	mov	ecx, DWORD PTR _vec1$[ebp]
	fld	DWORD PTR [eax]
	fsub	DWORD PTR [ecx]
	fmul	DWORD PTR _mul$[ebp]
	mov	edx, DWORD PTR _vec1$[ebp]
	fadd	DWORD PTR [edx]
	mov	eax, DWORD PTR _newvertnum$[ebp]
	imul	eax, 12					; 0000000cH
	fstp	DWORD PTR _newpos$[ebp+eax]

; 479  : 				newpos[newvertnum].v[Y] = vec1->v[Y] + (vec0->v[Y] - vec1->v[Y]) * mul;

	mov	eax, DWORD PTR _vec0$[ebp]
	mov	ecx, DWORD PTR _vec1$[ebp]
	fld	DWORD PTR [eax+4]
	fsub	DWORD PTR [ecx+4]
	fmul	DWORD PTR _mul$[ebp]
	mov	edx, DWORD PTR _vec1$[ebp]
	fadd	DWORD PTR [edx+4]
	mov	eax, DWORD PTR _newvertnum$[ebp]
	imul	eax, 12					; 0000000cH
	fstp	DWORD PTR _newpos$[ebp+eax+4]

; 480  : 				newpos[newvertnum].v[Z] = vec1->v[Z] + (vec0->v[Z] - vec1->v[Z]) * mul;

	mov	eax, DWORD PTR _vec0$[ebp]
	mov	ecx, DWORD PTR _vec1$[ebp]
	fld	DWORD PTR [eax+8]
	fsub	DWORD PTR [ecx+8]
	fmul	DWORD PTR _mul$[ebp]
	mov	edx, DWORD PTR _vec1$[ebp]
	fadd	DWORD PTR [edx+8]
	mov	eax, DWORD PTR _newvertnum$[ebp]
	imul	eax, 12					; 0000000cH
	fstp	DWORD PTR _newpos$[ebp+eax+8]

; 481  : 
; 482  : 				FTOL(mul * 256, lmul);

	fld	DWORD PTR _mul$[ebp]
	fmul	DWORD PTR __real@43800000
	fadd	DWORD PTR __real@4b000000
	fstp	DWORD PTR __temp$81440[ebp]
	mov	eax, DWORD PTR __temp$81440[ebp]
	and	eax, 16777215				; 00ffffffH
	mov	DWORD PTR _lmul$[ebp], eax

; 483  : 
; 484  : 				rgb0 = (MODEL_RGB*)&rgb[(i + 1) % vertnum];

	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	cdq
	idiv	DWORD PTR _vertnum$[ebp]
	mov	eax, DWORD PTR _rgb$[ebp]
	lea	ecx, DWORD PTR [eax+edx*4]
	mov	DWORD PTR _rgb0$[ebp], ecx

; 485  : 				rgb1 = (MODEL_RGB*)&rgb[i];

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _rgb$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _rgb1$[ebp], edx

; 486  : 				rgbout = (MODEL_RGB*)&newrgb[newvertnum];

	mov	eax, DWORD PTR _newvertnum$[ebp]
	lea	ecx, DWORD PTR _newrgb$[ebp+eax*4]
	mov	DWORD PTR _rgbout$[ebp], ecx

; 487  : 
; 488  : 				rgbout->a = rgb0->a + (unsigned char)(((rgb1->a - rgb0->a) * lmul) >> 8);

	mov	eax, DWORD PTR _rgb0$[ebp]
	movzx	ecx, BYTE PTR [eax+3]
	mov	edx, DWORD PTR _rgb1$[ebp]
	movzx	eax, BYTE PTR [edx+3]
	mov	edx, DWORD PTR _rgb0$[ebp]
	movzx	edx, BYTE PTR [edx+3]
	sub	eax, edx
	imul	eax, DWORD PTR _lmul$[ebp]
	sar	eax, 8
	movzx	eax, al
	add	ecx, eax
	mov	edx, DWORD PTR _rgbout$[ebp]
	mov	BYTE PTR [edx+3], cl

; 489  : 				rgbout->r = rgb0->r + (unsigned char)(((rgb1->r - rgb0->r) * lmul) >> 8);

	mov	eax, DWORD PTR _rgb0$[ebp]
	movzx	ecx, BYTE PTR [eax+2]
	mov	edx, DWORD PTR _rgb1$[ebp]
	movzx	eax, BYTE PTR [edx+2]
	mov	edx, DWORD PTR _rgb0$[ebp]
	movzx	edx, BYTE PTR [edx+2]
	sub	eax, edx
	imul	eax, DWORD PTR _lmul$[ebp]
	sar	eax, 8
	movzx	eax, al
	add	ecx, eax
	mov	edx, DWORD PTR _rgbout$[ebp]
	mov	BYTE PTR [edx+2], cl

; 490  : 				rgbout->g = rgb0->g + (unsigned char)(((rgb1->g - rgb0->g) * lmul) >> 8);

	mov	eax, DWORD PTR _rgb0$[ebp]
	movzx	ecx, BYTE PTR [eax+1]
	mov	edx, DWORD PTR _rgb1$[ebp]
	movzx	eax, BYTE PTR [edx+1]
	mov	edx, DWORD PTR _rgb0$[ebp]
	movzx	edx, BYTE PTR [edx+1]
	sub	eax, edx
	imul	eax, DWORD PTR _lmul$[ebp]
	sar	eax, 8
	movzx	eax, al
	add	ecx, eax
	mov	edx, DWORD PTR _rgbout$[ebp]
	mov	BYTE PTR [edx+1], cl

; 491  : 				rgbout->b = rgb0->b + (unsigned char)(((rgb1->b - rgb0->b) * lmul) >> 8);

	mov	eax, DWORD PTR _rgb0$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	edx, DWORD PTR _rgb1$[ebp]
	movzx	eax, BYTE PTR [edx]
	mov	edx, DWORD PTR _rgb0$[ebp]
	movzx	edx, BYTE PTR [edx]
	sub	eax, edx
	imul	eax, DWORD PTR _lmul$[ebp]
	sar	eax, 8
	movzx	eax, al
	add	ecx, eax
	mov	edx, DWORD PTR _rgbout$[ebp]
	mov	BYTE PTR [edx], cl

; 492  : 
; 493  : 				newvertnum++;

	mov	eax, DWORD PTR _newvertnum$[ebp]
	add	eax, 1
	mov	DWORD PTR _newvertnum$[ebp], eax
$L81438:

; 494  : 			}
; 495  : 		}
; 496  : 	}

	jmp	$L81424
$L81425:

; 497  : 
; 498  : 	if (!newvertnum)

	cmp	DWORD PTR _newvertnum$[ebp], 0
	jne	SHORT $L81450

; 499  : 		return;

	jmp	SHORT $L81405
$L81450:

; 500  : 
; 501  : // setup verts
; 502  : 
; 503  : 	for (i = 0 ; i < newvertnum ; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $L81451
$L81452:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$L81451:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _newvertnum$[ebp]
	jge	SHORT $L81453

; 504  : 	{
; 505  : 		RotTransPersVector(&ViewMatrixScaled, &ViewTransScaled, &newpos[i], &DrawVertsTEX0[i].sx);

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 24					; 00000018H
	add	eax, OFFSET FLAT:?DrawVertsTEX0@@3PAUVERTEX_TEX0@@A ; DrawVertsTEX0
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 12					; 0000000cH
	lea	edx, DWORD PTR _newpos$[ebp+ecx]
	push	edx
	push	OFFSET FLAT:?ViewTransScaled@@3UVectorStruct@@A ; ViewTransScaled
	push	OFFSET FLAT:?ViewMatrixScaled@@3TMatrixUnion@@A ; ViewMatrixScaled
	call	?RotTransPersVector@@YAXPATMatrixUnion@@PAUVectorStruct@@1PAM@Z ; RotTransPersVector
	add	esp, 16					; 00000010H

; 506  : 		DrawVertsTEX0[i].color = newrgb[i];

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _newrgb$[ebp+ecx*4]
	mov	DWORD PTR ?DrawVertsTEX0@@3PAUVERTEX_TEX0@@A[eax+16], edx

; 507  : 	}

	jmp	SHORT $L81452
$L81453:

; 508  : 
; 509  : // draw
; 510  : 
; 511  : 	D3Ddevice->DrawPrimitive(D3DPT_TRIANGLEFAN, FVF_TEX0, DrawVertsTEX0, newvertnum, D3DDP_DONOTUPDATEEXTENTS);

	push	8
	mov	eax, DWORD PTR _newvertnum$[ebp]
	push	eax
	push	OFFSET FLAT:?DrawVertsTEX0@@3PAUVERTEX_TEX0@@A ; DrawVertsTEX0
	push	196					; 000000c4H
	push	6
	mov	ecx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	eax
	call	DWORD PTR [edx+112]
$L81405:

; 512  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?DrawNearClipPolyTEX0@@YAXPAUVectorStruct@@PAJJ@Z ENDP	; DrawNearClipPolyTEX0
_TEXT	ENDS
PUBLIC	?ResetSemiList@@YAXXZ				; ResetSemiList
; Function compile flags: /Odt /ZI
;	COMDAT ?ResetSemiList@@YAXXZ
_TEXT	SEGMENT
?ResetSemiList@@YAXXZ PROC NEAR				; ResetSemiList, COMDAT

; 519  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 520  : 	SemiCount = 0;

	mov	DWORD PTR ?SemiCount@@3JA, 0		; SemiCount

; 521  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?ResetSemiList@@YAXXZ ENDP				; ResetSemiList
_TEXT	ENDS
PUBLIC	__real@3f800000
PUBLIC	?DrawSemiList@@YAXXZ				; DrawSemiList
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
; Function compile flags: /Odt /ZI
CONST	ENDS
;	COMDAT ?DrawSemiList@@YAXXZ
_TEXT	SEGMENT
_swap$ = -176						; size = 152
_poly$ = -24						; size = 4
_z$ = -20						; size = 4
_gap$ = -16						; size = 4
_k$ = -12						; size = 4
_j$ = -8						; size = 4
_i$ = -4						; size = 4
?DrawSemiList@@YAXXZ PROC NEAR				; DrawSemiList, COMDAT

; 528  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi

; 529  : 	long i, j, k, gap;
; 530  : 	float z;
; 531  : 	DRAW_SEMI_POLY *poly, swap;
; 532  : 
; 533  : // skip if none
; 534  : 
; 535  : 	if (!SemiCount) return;

	cmp	DWORD PTR ?SemiCount@@3JA, 0		; SemiCount
	jne	SHORT $L81467
	jmp	$L81459
$L81467:

; 536  : 
; 537  : // setup misc render states
; 538  : 
; 539  : 	ALPHA_ON();

	movsx	eax, WORD PTR ?RenderAlpha@@3FA		; RenderAlpha
	test	eax, eax
	jne	SHORT $L81468
	mov	WORD PTR ?RenderAlpha@@3FA, 1		; RenderAlpha
	movsx	eax, WORD PTR ?RenderAlpha@@3FA		; RenderAlpha
	push	eax
	push	27					; 0000001bH
	mov	ecx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	eax
	call	DWORD PTR [edx+88]
	mov	eax, DWORD PTR ?RenderStateChange@@3JA	; RenderStateChange
	add	eax, 1
	mov	DWORD PTR ?RenderStateChange@@3JA, eax	; RenderStateChange
$L81468:

; 540  : 	ZWRITE_OFF();

	movsx	eax, WORD PTR ?RenderZwrite@@3FA	; RenderZwrite
	test	eax, eax
	je	SHORT $L81469
	mov	WORD PTR ?RenderZwrite@@3FA, 0		; RenderZwrite
	movsx	eax, WORD PTR ?RenderZwrite@@3FA	; RenderZwrite
	push	eax
	push	14					; 0000000eH
	mov	ecx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	eax
	call	DWORD PTR [edx+88]
	mov	eax, DWORD PTR ?RenderStateChange@@3JA	; RenderStateChange
	add	eax, 1
	mov	DWORD PTR ?RenderStateChange@@3JA, eax	; RenderStateChange
$L81469:

; 541  : 
; 542  : // set z's
; 543  : 
; 544  : 	poly = SemiPoly;

	mov	DWORD PTR _poly$[ebp], OFFSET FLAT:?SemiPoly@@3PAUDRAW_SEMI_POLY@@A ; SemiPoly

; 545  : 
; 546  : 	for (i = SemiCount ; i ; i--, poly++)

	mov	eax, DWORD PTR ?SemiCount@@3JA		; SemiCount
	mov	DWORD PTR _i$[ebp], eax
	jmp	SHORT $L81470
$L81471:
	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	mov	ecx, DWORD PTR _poly$[ebp]
	add	ecx, 152				; 00000098H
	mov	DWORD PTR _poly$[ebp], ecx
$L81470:
	cmp	DWORD PTR _i$[ebp], 0
	je	$L81472

; 547  : 	{
; 548  : 		z = 0.0f;

	mov	DWORD PTR _z$[ebp], 0

; 549  : 
; 550  : 		if (poly->Tpage == -1)

	mov	eax, DWORD PTR _poly$[ebp]
	cmp	DWORD PTR [eax+8], -1
	jne	SHORT $L81473

; 551  : 			for (j = 0 ; j < poly->VertNum ; j++) z += 1.0f / poly->VertsRGB[j].rhw;

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $L81474
$L81475:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$L81474:
	mov	eax, DWORD PTR _poly$[ebp]
	mov	ecx, DWORD PTR _j$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jge	SHORT $L81476
	mov	eax, DWORD PTR _j$[ebp]
	imul	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _poly$[ebp]
	fld	DWORD PTR __real@3f800000
	fdiv	DWORD PTR [ecx+eax+36]
	fadd	DWORD PTR _z$[ebp]
	fstp	DWORD PTR _z$[ebp]
	jmp	SHORT $L81475
$L81476:
	jmp	SHORT $L81477
$L81473:

; 552  : 		else
; 553  : 			for (j = 0 ; j < poly->VertNum ; j++) z += 1.0f / poly->Verts[j].rhw;

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $L81478
$L81479:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$L81478:
	mov	eax, DWORD PTR _poly$[ebp]
	mov	ecx, DWORD PTR _j$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jge	SHORT $L81477
	mov	eax, DWORD PTR _j$[ebp]
	shl	eax, 5
	mov	ecx, DWORD PTR _poly$[ebp]
	fld	DWORD PTR __real@3f800000
	fdiv	DWORD PTR [ecx+eax+36]
	fadd	DWORD PTR _z$[ebp]
	fstp	DWORD PTR _z$[ebp]
	jmp	SHORT $L81479
$L81477:

; 554  : 
; 555  : 		poly->z += z / j;

	fild	DWORD PTR _j$[ebp]
	fdivr	DWORD PTR _z$[ebp]
	mov	eax, DWORD PTR _poly$[ebp]
	fadd	DWORD PTR [eax+20]
	mov	ecx, DWORD PTR _poly$[ebp]
	fstp	DWORD PTR [ecx+20]

; 556  : 	}

	jmp	$L81471
$L81472:

; 557  : 
; 558  : // sort
; 559  : 
; 560  : 	for (k = 0 ; k < 3 ; k++)

	mov	DWORD PTR _k$[ebp], 0
	jmp	SHORT $L81481
$L81482:
	mov	eax, DWORD PTR _k$[ebp]
	add	eax, 1
	mov	DWORD PTR _k$[ebp], eax
$L81481:
	cmp	DWORD PTR _k$[ebp], 3
	jge	$L81483

; 561  : 	{
; 562  : 		gap = SemiShellGap[k];

	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _SemiShellGap[eax*4]
	mov	DWORD PTR _gap$[ebp], ecx

; 563  : 		for (i = gap ; i < SemiCount ; i++)

	mov	eax, DWORD PTR _gap$[ebp]
	mov	DWORD PTR _i$[ebp], eax
	jmp	SHORT $L81484
$L81485:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$L81484:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR ?SemiCount@@3JA		; SemiCount
	jge	$L81486

; 564  : 		{
; 565  : 			swap = SemiPoly[i];

	mov	esi, DWORD PTR _i$[ebp]
	imul	esi, 152				; 00000098H
	add	esi, OFFSET FLAT:?SemiPoly@@3PAUDRAW_SEMI_POLY@@A ; SemiPoly
	mov	ecx, 38					; 00000026H
	lea	edi, DWORD PTR _swap$[ebp]
	rep movsd

; 566  : 			for (j = i - gap ; j >= 0 && swap.z > SemiPoly[j].z ; j -= gap)

	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, DWORD PTR _gap$[ebp]
	mov	DWORD PTR _j$[ebp], eax
	jmp	SHORT $L81487
$L81488:
	mov	eax, DWORD PTR _j$[ebp]
	sub	eax, DWORD PTR _gap$[ebp]
	mov	DWORD PTR _j$[ebp], eax
$L81487:
	cmp	DWORD PTR _j$[ebp], 0
	jl	SHORT $L81489
	mov	eax, DWORD PTR _j$[ebp]
	imul	eax, 152				; 00000098H
	fld	DWORD PTR _swap$[ebp+20]
	fcomp	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[eax+20]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $L81489

; 567  : 			{
; 568  : 				SemiPoly[j + gap] = SemiPoly[j];

	mov	esi, DWORD PTR _j$[ebp]
	imul	esi, 152				; 00000098H
	add	esi, OFFSET FLAT:?SemiPoly@@3PAUDRAW_SEMI_POLY@@A ; SemiPoly
	mov	edi, DWORD PTR _j$[ebp]
	add	edi, DWORD PTR _gap$[ebp]
	imul	edi, 152				; 00000098H
	add	edi, OFFSET FLAT:?SemiPoly@@3PAUDRAW_SEMI_POLY@@A ; SemiPoly
	mov	ecx, 38					; 00000026H
	rep movsd

; 569  : 			}

	jmp	SHORT $L81488
$L81489:

; 570  : 			SemiPoly[j + gap] = swap;

	mov	edi, DWORD PTR _j$[ebp]
	add	edi, DWORD PTR _gap$[ebp]
	imul	edi, 152				; 00000098H
	add	edi, OFFSET FLAT:?SemiPoly@@3PAUDRAW_SEMI_POLY@@A ; SemiPoly
	mov	ecx, 38					; 00000026H
	lea	esi, DWORD PTR _swap$[ebp]
	rep movsd

; 571  : 		}

	jmp	$L81485
$L81486:

; 572  : 	}

	jmp	$L81482
$L81483:

; 573  : 
; 574  : // loop thru
; 575  : 
; 576  : 	poly = SemiPoly;

	mov	DWORD PTR _poly$[ebp], OFFSET FLAT:?SemiPoly@@3PAUDRAW_SEMI_POLY@@A ; SemiPoly

; 577  : 	for (i = SemiCount ; i ; i--, poly++)

	mov	eax, DWORD PTR ?SemiCount@@3JA		; SemiCount
	mov	DWORD PTR _i$[ebp], eax
	jmp	SHORT $L81490
$L81491:
	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	mov	ecx, DWORD PTR _poly$[ebp]
	add	ecx, 152				; 00000098H
	mov	DWORD PTR _poly$[ebp], ecx
$L81490:
	cmp	DWORD PTR _i$[ebp], 0
	je	$L81492

; 578  : 	{
; 579  : 
; 580  : // set render states
; 581  : 
; 582  : 		SET_TPAGE((short)poly->Tpage);

	movsx	eax, WORD PTR ?RenderTP@@3FA		; RenderTP
	mov	ecx, DWORD PTR _poly$[ebp]
	movsx	edx, WORD PTR [ecx+8]
	cmp	eax, edx
	je	SHORT $L81494
	mov	eax, DWORD PTR _poly$[ebp]
	mov	cx, WORD PTR [eax+8]
	mov	WORD PTR ?RenderTP@@3FA, cx		; RenderTP
	movsx	edx, WORD PTR ?RenderTP@@3FA		; RenderTP
	cmp	edx, -1
	jne	SHORT $L81496
	push	0
	push	0
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	edx
	call	DWORD PTR [ecx+152]
	mov	eax, DWORD PTR ?TextureStateChange@@3JA	; TextureStateChange
	add	eax, 1
	mov	DWORD PTR ?TextureStateChange@@3JA, eax	; TextureStateChange
	jmp	SHORT $L81494
$L81496:
	movsx	eax, WORD PTR ?RenderTP@@3FA		; RenderTP
	shl	eax, 6
	mov	ecx, DWORD PTR ?TexInfo@@3PAUTEXINFO@@A	; TexInfo
	mov	edx, DWORD PTR [ecx+eax+52]
	push	edx
	push	0
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	edx
	call	DWORD PTR [ecx+152]
	mov	eax, DWORD PTR ?TextureStateChange@@3JA	; TextureStateChange
	add	eax, 1
	mov	DWORD PTR ?TextureStateChange@@3JA, eax	; TextureStateChange
$L81494:

; 583  : 
; 584  : 		if (poly->Fog)

	mov	eax, DWORD PTR _poly$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $L81498

; 585  : 		{
; 586  : 			FOG_ON();

	movsx	eax, WORD PTR ?RenderFog@@3FA		; RenderFog
	test	eax, eax
	jne	SHORT $L81499
	mov	WORD PTR ?RenderFog@@3FA, 1		; RenderFog
	movsx	eax, WORD PTR ?RenderFog@@3FA		; RenderFog
	push	eax
	push	28					; 0000001cH
	mov	ecx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	eax
	call	DWORD PTR [edx+88]
	mov	eax, DWORD PTR ?RenderStateChange@@3JA	; RenderStateChange
	add	eax, 1
	mov	DWORD PTR ?RenderStateChange@@3JA, eax	; RenderStateChange
$L81499:

; 587  : 		}
; 588  : 		else

	jmp	SHORT $L81500
$L81498:

; 589  : 		{
; 590  : 			FOG_OFF();

	movsx	eax, WORD PTR ?RenderFog@@3FA		; RenderFog
	test	eax, eax
	je	SHORT $L81500
	mov	WORD PTR ?RenderFog@@3FA, 0		; RenderFog
	movsx	eax, WORD PTR ?RenderFog@@3FA		; RenderFog
	push	eax
	push	28					; 0000001cH
	mov	ecx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	eax
	call	DWORD PTR [edx+88]
	mov	eax, DWORD PTR ?RenderStateChange@@3JA	; RenderStateChange
	add	eax, 1
	mov	DWORD PTR ?RenderStateChange@@3JA, eax	; RenderStateChange
$L81500:

; 591  : 		}
; 592  : 
; 593  : 		if (!poly->SemiType)

	mov	eax, DWORD PTR _poly$[ebp]
	cmp	DWORD PTR [eax+16], 0
	jne	SHORT $L81502

; 594  : 		{
; 595  : 			ALPHA_SRC(D3DBLEND_SRCALPHA);

	movsx	eax, WORD PTR ?RenderAlphaSrc@@3FA	; RenderAlphaSrc
	cmp	eax, 5
	je	SHORT $L81503
	mov	WORD PTR ?RenderAlphaSrc@@3FA, 5	; RenderAlphaSrc
	movsx	eax, WORD PTR ?RenderAlphaSrc@@3FA	; RenderAlphaSrc
	push	eax
	push	19					; 00000013H
	mov	ecx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	eax
	call	DWORD PTR [edx+88]
	mov	eax, DWORD PTR ?RenderStateChange@@3JA	; RenderStateChange
	add	eax, 1
	mov	DWORD PTR ?RenderStateChange@@3JA, eax	; RenderStateChange
$L81503:

; 596  : 			ALPHA_DEST(D3DBLEND_INVSRCALPHA);

	movsx	eax, WORD PTR ?RenderAlphaDest@@3FA	; RenderAlphaDest
	cmp	eax, 6
	je	SHORT $L81504
	mov	WORD PTR ?RenderAlphaDest@@3FA, 6	; RenderAlphaDest
	movsx	eax, WORD PTR ?RenderAlphaDest@@3FA	; RenderAlphaDest
	push	eax
	push	20					; 00000014H
	mov	ecx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	eax
	call	DWORD PTR [edx+88]
	mov	eax, DWORD PTR ?RenderStateChange@@3JA	; RenderStateChange
	add	eax, 1
	mov	DWORD PTR ?RenderStateChange@@3JA, eax	; RenderStateChange
$L81504:

; 597  : 		}
; 598  : 		else if (poly->SemiType == 1)

	jmp	$L81505
$L81502:
	mov	eax, DWORD PTR _poly$[ebp]
	cmp	DWORD PTR [eax+16], 1
	jne	SHORT $L81506

; 599  : 		{
; 600  : 			ALPHA_SRC(D3DBLEND_ONE);

	movsx	eax, WORD PTR ?RenderAlphaSrc@@3FA	; RenderAlphaSrc
	cmp	eax, 2
	je	SHORT $L81507
	mov	WORD PTR ?RenderAlphaSrc@@3FA, 2	; RenderAlphaSrc
	movsx	eax, WORD PTR ?RenderAlphaSrc@@3FA	; RenderAlphaSrc
	push	eax
	push	19					; 00000013H
	mov	ecx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	eax
	call	DWORD PTR [edx+88]
	mov	eax, DWORD PTR ?RenderStateChange@@3JA	; RenderStateChange
	add	eax, 1
	mov	DWORD PTR ?RenderStateChange@@3JA, eax	; RenderStateChange
$L81507:

; 601  : 			ALPHA_DEST(D3DBLEND_ONE);

	movsx	eax, WORD PTR ?RenderAlphaDest@@3FA	; RenderAlphaDest
	cmp	eax, 2
	je	SHORT $L81508
	mov	WORD PTR ?RenderAlphaDest@@3FA, 2	; RenderAlphaDest
	movsx	eax, WORD PTR ?RenderAlphaDest@@3FA	; RenderAlphaDest
	push	eax
	push	20					; 00000014H
	mov	ecx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	eax
	call	DWORD PTR [edx+88]
	mov	eax, DWORD PTR ?RenderStateChange@@3JA	; RenderStateChange
	add	eax, 1
	mov	DWORD PTR ?RenderStateChange@@3JA, eax	; RenderStateChange
$L81508:

; 602  : 		}
; 603  : 		else

	jmp	SHORT $L81505
$L81506:

; 604  : 		{
; 605  : 			ALPHA_SRC(D3DBLEND_ZERO);

	movsx	eax, WORD PTR ?RenderAlphaSrc@@3FA	; RenderAlphaSrc
	cmp	eax, 1
	je	SHORT $L81510
	mov	WORD PTR ?RenderAlphaSrc@@3FA, 1	; RenderAlphaSrc
	movsx	eax, WORD PTR ?RenderAlphaSrc@@3FA	; RenderAlphaSrc
	push	eax
	push	19					; 00000013H
	mov	ecx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	eax
	call	DWORD PTR [edx+88]
	mov	eax, DWORD PTR ?RenderStateChange@@3JA	; RenderStateChange
	add	eax, 1
	mov	DWORD PTR ?RenderStateChange@@3JA, eax	; RenderStateChange
$L81510:

; 606  : 			ALPHA_DEST(D3DBLEND_INVSRCCOLOR);

	movsx	eax, WORD PTR ?RenderAlphaDest@@3FA	; RenderAlphaDest
	cmp	eax, 4
	je	SHORT $L81505
	mov	WORD PTR ?RenderAlphaDest@@3FA, 4	; RenderAlphaDest
	movsx	eax, WORD PTR ?RenderAlphaDest@@3FA	; RenderAlphaDest
	push	eax
	push	20					; 00000014H
	mov	ecx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	eax
	call	DWORD PTR [edx+88]
	mov	eax, DWORD PTR ?RenderStateChange@@3JA	; RenderStateChange
	add	eax, 1
	mov	DWORD PTR ?RenderStateChange@@3JA, eax	; RenderStateChange
$L81505:

; 607  : 		}
; 608  : 
; 609  : // draw
; 610  : 
; 611  : 		if (poly->Tpage == -1)

	mov	eax, DWORD PTR _poly$[ebp]
	cmp	DWORD PTR [eax+8], -1
	jne	SHORT $L81512

; 612  : 			D3Ddevice->DrawPrimitive(D3DPT_TRIANGLEFAN, FVF_TEX0, poly->VertsRGB, poly->VertNum, poly->DrawFlag);

	mov	eax, DWORD PTR _poly$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _poly$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _poly$[ebp]
	add	ecx, 24					; 00000018H
	push	ecx
	push	196					; 000000c4H
	push	6
	mov	edx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	ecx
	call	DWORD PTR [eax+112]

; 613  : 		else

	jmp	SHORT $L81513
$L81512:

; 614  : 			D3Ddevice->DrawPrimitive(D3DPT_TRIANGLEFAN, FVF_TEX1, poly->Verts, poly->VertNum, poly->DrawFlag);

	mov	eax, DWORD PTR _poly$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _poly$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _poly$[ebp]
	add	ecx, 24					; 00000018H
	push	ecx
	push	452					; 000001c4H
	push	6
	mov	edx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	ecx
	call	DWORD PTR [eax+112]
$L81513:

; 615  : 	}

	jmp	$L81491
$L81492:

; 616  : 
; 617  : // fog off
; 618  : 
; 619  : 	FOG_OFF();

	movsx	eax, WORD PTR ?RenderFog@@3FA		; RenderFog
	test	eax, eax
	je	SHORT $L81459
	mov	WORD PTR ?RenderFog@@3FA, 0		; RenderFog
	movsx	eax, WORD PTR ?RenderFog@@3FA		; RenderFog
	push	eax
	push	28					; 0000001cH
	mov	ecx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	eax
	call	DWORD PTR [edx+88]
	mov	eax, DWORD PTR ?RenderStateChange@@3JA	; RenderStateChange
	add	eax, 1
	mov	DWORD PTR ?RenderStateChange@@3JA, eax	; RenderStateChange
$L81459:

; 620  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?DrawSemiList@@YAXXZ ENDP				; DrawSemiList
_TEXT	ENDS
PUBLIC	__real@c0000000
PUBLIC	__real@437f0000
PUBLIC	?DrawFacingPolyMirror@@YAXPAUVectorStruct@@PAUFACING_POLY@@JM@Z ; DrawFacingPolyMirror
PUBLIC	?DrawFacingPoly@@YAXPAUVectorStruct@@PAUFACING_POLY@@JM@Z ; DrawFacingPoly
EXTRN	?GetMirrorPlane@@YAJPAUVectorStruct@@@Z:NEAR	; GetMirrorPlane
EXTRN	?MirrorHeight@@3MA:DWORD			; MirrorHeight
EXTRN	?MirrorMul@@3MA:DWORD				; MirrorMul
EXTRN	?MirrorAdd@@3MA:DWORD				; MirrorAdd
EXTRN	?ViewCameraPos@@3UVectorStruct@@A:BYTE		; ViewCameraPos
;	COMDAT __real@c0000000
CONST	SEGMENT
__real@c0000000 DD 0c0000000r			; -2
CONST	ENDS
;	COMDAT __real@437f0000
CONST	SEGMENT
__real@437f0000 DD 0437f0000r			; 255
; Function compile flags: /Odt /ZI
CONST	ENDS
;	COMDAT ?DrawFacingPolyMirror@@YAXPAUVectorStruct@@PAUFACING_POLY@@JM@Z
_TEXT	SEGMENT
_mirrory$ = -48						; size = 4
_mirroradd$ = -44					; size = 4
_vert$ = -40						; size = 4
_mirrorfog$ = -36					; size = 4
_fog$ = -32						; size = 4
_z$ = -28						; size = 4
_yadd$ = -24						; size = 4
_xadd$ = -20						; size = 4
_screen$ = -16						; size = 16
_pos$ = 8						; size = 4
_poly$ = 12						; size = 4
_semi$ = 16						; size = 4
_zbias$ = 20						; size = 4
?DrawFacingPolyMirror@@YAXPAUVectorStruct@@PAUFACING_POLY@@JM@Z PROC NEAR ; DrawFacingPolyMirror, COMDAT

; 627  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 112				; 00000070H
	push	ebx
	push	esi
	push	edi

; 628  : 	float screen[4];
; 629  : 	float xadd, yadd;
; 630  : 	float z, fog, mirrorfog;
; 631  : 	VERTEX_TEX1 *vert;
; 632  : 	float mirroradd, mirrory;
; 633  : 
; 634  : // draw original
; 635  : 
; 636  : 	DrawFacingPoly(pos, poly, semi, zbias);

	mov	eax, DWORD PTR _zbias$[ebp]
	push	eax
	mov	ecx, DWORD PTR _semi$[ebp]
	push	ecx
	mov	edx, DWORD PTR _poly$[ebp]
	push	edx
	mov	eax, DWORD PTR _pos$[ebp]
	push	eax
	call	?DrawFacingPoly@@YAXPAUVectorStruct@@PAUFACING_POLY@@JM@Z ; DrawFacingPoly
	add	esp, 16					; 00000010H

; 637  : 
; 638  : // reflect?
; 639  : 
; 640  : 	if (!RenderSettings.Mirror)

	cmp	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+80, 0
	jne	SHORT $L81530

; 641  : 		return;

	jmp	$L81520
$L81530:

; 642  : 
; 643  : 	if (!GetMirrorPlane(pos))

	mov	eax, DWORD PTR _pos$[ebp]
	push	eax
	call	?GetMirrorPlane@@YAJPAUVectorStruct@@@Z	; GetMirrorPlane
	add	esp, 4
	test	eax, eax
	jne	SHORT $L81531

; 644  : 		return;

	jmp	$L81520
$L81531:

; 645  : 
; 646  : 	if (ViewCameraPos.v[Y] >= MirrorHeight)

	fld	DWORD PTR ?ViewCameraPos@@3UVectorStruct@@A+4
	fcomp	DWORD PTR ?MirrorHeight@@3MA		; MirrorHeight
	fnstsw	ax
	test	ah, 1
	jne	SHORT $L81532

; 647  : 		return;

	jmp	$L81520
$L81532:

; 648  : 
; 649  : 	mirroradd = MirrorHeight - pos->v[Y];

	mov	eax, DWORD PTR _pos$[ebp]
	fld	DWORD PTR ?MirrorHeight@@3MA		; MirrorHeight
	fsub	DWORD PTR [eax+4]
	fstp	DWORD PTR _mirroradd$[ebp]

; 650  : 	if (mirroradd <= -MIRROR_OVERLAP_TOL)

	fld	DWORD PTR _mirroradd$[ebp]
	fcomp	DWORD PTR __real@c0000000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jp	SHORT $L81533

; 651  : 		return;

	jmp	$L81520
$L81533:

; 652  : 
; 653  : // yep
; 654  : 
; 655  : 	mirrory = MirrorHeight + mirroradd;

	fld	DWORD PTR ?MirrorHeight@@3MA		; MirrorHeight
	fadd	DWORD PTR _mirroradd$[ebp]
	fstp	DWORD PTR _mirrory$[ebp]

; 656  : 
; 657  : // get screen coors
; 658  : 
; 659  : 	z = pos->v[X] * ViewMatrixScaled.m[RZ] + mirrory * ViewMatrixScaled.m[UZ] + pos->v[Z] * ViewMatrixScaled.m[LZ] + ViewTransScaled.v[Z];

	mov	eax, DWORD PTR _pos$[ebp]
	fld	DWORD PTR ?ViewMatrixScaled@@3TMatrixUnion@@A+8
	fmul	DWORD PTR [eax]
	fld	DWORD PTR _mirrory$[ebp]
	fmul	DWORD PTR ?ViewMatrixScaled@@3TMatrixUnion@@A+20
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR _pos$[ebp]
	fld	DWORD PTR ?ViewMatrixScaled@@3TMatrixUnion@@A+32
	fmul	DWORD PTR [ecx+8]
	faddp	ST(1), ST(0)
	fadd	DWORD PTR ?ViewTransScaled@@3UVectorStruct@@A+8
	fstp	DWORD PTR _z$[ebp]

; 660  : 	if (z < RenderSettings.NearClip || z >= RenderSettings.FarClip)

	fld	DWORD PTR _z$[ebp]
	fcomp	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+28
	fnstsw	ax
	test	ah, 5
	jnp	SHORT $L81535
	fld	DWORD PTR _z$[ebp]
	fcomp	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+32
	fnstsw	ax
	test	ah, 1
	jne	SHORT $L81534
$L81535:

; 661  : 		return;

	jmp	$L81520
$L81534:

; 662  : 
; 663  : 	screen[0] = (pos->v[X] * ViewMatrixScaled.m[RX] + mirrory * ViewMatrixScaled.m[UX] + pos->v[Z] * ViewMatrixScaled.m[LX] + ViewTransScaled.v[X]) / z + RenderSettings.GeomCentreX;

	mov	eax, DWORD PTR _pos$[ebp]
	fld	DWORD PTR ?ViewMatrixScaled@@3TMatrixUnion@@A
	fmul	DWORD PTR [eax]
	fld	DWORD PTR _mirrory$[ebp]
	fmul	DWORD PTR ?ViewMatrixScaled@@3TMatrixUnion@@A+12
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR _pos$[ebp]
	fld	DWORD PTR ?ViewMatrixScaled@@3TMatrixUnion@@A+24
	fmul	DWORD PTR [ecx+8]
	faddp	ST(1), ST(0)
	fadd	DWORD PTR ?ViewTransScaled@@3UVectorStruct@@A
	fdiv	DWORD PTR _z$[ebp]
	fadd	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+4
	fstp	DWORD PTR _screen$[ebp]

; 664  : 	screen[1] = (pos->v[X] * ViewMatrixScaled.m[RY] + mirrory * ViewMatrixScaled.m[UY] + pos->v[Z] * ViewMatrixScaled.m[LY] + ViewTransScaled.v[Y]) / z + RenderSettings.GeomCentreY;

	mov	eax, DWORD PTR _pos$[ebp]
	fld	DWORD PTR ?ViewMatrixScaled@@3TMatrixUnion@@A+4
	fmul	DWORD PTR [eax]
	fld	DWORD PTR _mirrory$[ebp]
	fmul	DWORD PTR ?ViewMatrixScaled@@3TMatrixUnion@@A+16
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR _pos$[ebp]
	fld	DWORD PTR ?ViewMatrixScaled@@3TMatrixUnion@@A+28
	fmul	DWORD PTR [ecx+8]
	faddp	ST(1), ST(0)
	fadd	DWORD PTR ?ViewTransScaled@@3UVectorStruct@@A+4
	fdiv	DWORD PTR _z$[ebp]
	fadd	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+8
	fstp	DWORD PTR _screen$[ebp+4]

; 665  : 
; 666  : 	screen[3] = 1 / z;

	fld	DWORD PTR __real@3f800000
	fdiv	DWORD PTR _z$[ebp]
	fstp	DWORD PTR _screen$[ebp+12]

; 667  : 	screen[2] = GET_ZBUFFER(z + zbias);

	fld	DWORD PTR _z$[ebp]
	fadd	DWORD PTR _zbias$[ebp]
	fmul	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+36
	fdivr	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+44
	fsubr	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+40
	fstp	DWORD PTR _screen$[ebp+8]

; 668  : 
; 669  : // get verts
; 670  : 
; 671  : 	if (semi == -1)

	cmp	DWORD PTR _semi$[ebp], -1
	jne	SHORT $L81536

; 672  : 	{
; 673  : 		vert = DrawVertsTEX1;

	mov	DWORD PTR _vert$[ebp], OFFSET FLAT:?DrawVertsTEX1@@3PAUVERTEX_TEX1@@A ; DrawVertsTEX1

; 674  : 	}
; 675  : 	else

	jmp	$L81537
$L81536:

; 676  : 	{
; 677  : 		if (!SEMI_POLY_FREE()) return;

	cmp	DWORD PTR ?SemiCount@@3JA, 800		; SemiCount, 00000320H
	jl	SHORT $L81538
	jmp	$L81520
$L81538:

; 678  : 		SEMI_POLY_SETUP(vert, TRUE, 4, poly->Tpage, TRUE, semi);

	mov	eax, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	eax, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[eax+12], 1
	mov	eax, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	eax, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[eax+4], 4
	mov	eax, DWORD PTR _poly$[ebp]
	movsx	ecx, WORD PTR [eax+24]
	mov	edx, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	edx, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[edx+8], ecx
	mov	eax, 1
	test	eax, eax
	je	SHORT $L81539
	mov	eax, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	eax, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[eax], 8
	jmp	SHORT $L81540
$L81539:
	mov	eax, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	eax, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[eax], 12 ; 0000000cH
$L81540:
	mov	eax, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	eax, 152				; 00000098H
	mov	ecx, DWORD PTR _semi$[ebp]
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[eax+16], ecx
	mov	eax, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	eax, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[eax+20], 0
	mov	eax, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	eax, 152				; 00000098H
	add	eax, OFFSET FLAT:?SemiPoly@@3PAUDRAW_SEMI_POLY@@A+24
	mov	DWORD PTR _vert$[ebp], eax
	mov	ecx, DWORD PTR ?SemiCount@@3JA		; SemiCount
	add	ecx, 1
	mov	DWORD PTR ?SemiCount@@3JA, ecx		; SemiCount
$L81537:

; 679  : 	}
; 680  : 
; 681  : // get xy adds
; 682  : 
; 683  : 	xadd = (poly->Xsize * RenderSettings.MatScaleX) / z;

	mov	eax, DWORD PTR _poly$[ebp]
	fld	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+20
	fmul	DWORD PTR [eax]
	fdiv	DWORD PTR _z$[ebp]
	fstp	DWORD PTR _xadd$[ebp]

; 684  : 	yadd = (poly->Ysize * RenderSettings.MatScaleY) / z;

	mov	eax, DWORD PTR _poly$[ebp]
	fld	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+24
	fmul	DWORD PTR [eax+4]
	fdiv	DWORD PTR _z$[ebp]
	fstp	DWORD PTR _yadd$[ebp]

; 685  : 
; 686  : // build 4 from one
; 687  : 
; 688  : 	vert[0].sx = vert[3].sx = screen[0] - xadd;

	fld	DWORD PTR _screen$[ebp]
	fsub	DWORD PTR _xadd$[ebp]
	mov	eax, DWORD PTR _vert$[ebp]
	fstp	DWORD PTR [eax+96]
	mov	ecx, DWORD PTR _vert$[ebp]
	mov	edx, DWORD PTR _vert$[ebp]
	mov	eax, DWORD PTR [edx+96]
	mov	DWORD PTR [ecx], eax

; 689  : 	vert[1].sx = vert[2].sx = screen[0] + xadd;

	fld	DWORD PTR _screen$[ebp]
	fadd	DWORD PTR _xadd$[ebp]
	mov	eax, DWORD PTR _vert$[ebp]
	fstp	DWORD PTR [eax+64]
	mov	ecx, DWORD PTR _vert$[ebp]
	mov	edx, DWORD PTR _vert$[ebp]
	mov	eax, DWORD PTR [edx+64]
	mov	DWORD PTR [ecx+32], eax

; 690  : 
; 691  : 	vert[0].sy = vert[1].sy = screen[1] + yadd;

	fld	DWORD PTR _screen$[ebp+4]
	fadd	DWORD PTR _yadd$[ebp]
	mov	eax, DWORD PTR _vert$[ebp]
	fstp	DWORD PTR [eax+36]
	mov	ecx, DWORD PTR _vert$[ebp]
	mov	edx, DWORD PTR _vert$[ebp]
	mov	eax, DWORD PTR [edx+36]
	mov	DWORD PTR [ecx+4], eax

; 692  : 	vert[2].sy = vert[3].sy = screen[1] - yadd;

	fld	DWORD PTR _screen$[ebp+4]
	fsub	DWORD PTR _yadd$[ebp]
	mov	eax, DWORD PTR _vert$[ebp]
	fstp	DWORD PTR [eax+100]
	mov	ecx, DWORD PTR _vert$[ebp]
	mov	edx, DWORD PTR _vert$[ebp]
	mov	eax, DWORD PTR [edx+100]
	mov	DWORD PTR [ecx+68], eax

; 693  : 
; 694  : 	vert[0].sz = vert[1].sz = vert[2].sz = vert[3].sz = screen[2];

	mov	eax, DWORD PTR _vert$[ebp]
	mov	ecx, DWORD PTR _screen$[ebp+8]
	mov	DWORD PTR [eax+104], ecx
	mov	edx, DWORD PTR _vert$[ebp]
	mov	eax, DWORD PTR _screen$[ebp+8]
	mov	DWORD PTR [edx+72], eax
	mov	ecx, DWORD PTR _vert$[ebp]
	mov	edx, DWORD PTR _screen$[ebp+8]
	mov	DWORD PTR [ecx+40], edx
	mov	eax, DWORD PTR _vert$[ebp]
	mov	ecx, DWORD PTR _screen$[ebp+8]
	mov	DWORD PTR [eax+8], ecx

; 695  : 	vert[0].rhw = vert[1].rhw = vert[2].rhw = vert[3].rhw = screen[3];

	mov	eax, DWORD PTR _vert$[ebp]
	mov	ecx, DWORD PTR _screen$[ebp+12]
	mov	DWORD PTR [eax+108], ecx
	mov	edx, DWORD PTR _vert$[ebp]
	mov	eax, DWORD PTR _screen$[ebp+12]
	mov	DWORD PTR [edx+76], eax
	mov	ecx, DWORD PTR _vert$[ebp]
	mov	edx, DWORD PTR _screen$[ebp+12]
	mov	DWORD PTR [ecx+44], edx
	mov	eax, DWORD PTR _vert$[ebp]
	mov	ecx, DWORD PTR _screen$[ebp+12]
	mov	DWORD PTR [eax+12], ecx

; 696  : 
; 697  : // set RGB's
; 698  : 
; 699  : 	vert[0].color = vert[1].color = vert[2].color = vert[3].color = poly->RGB;

	mov	eax, DWORD PTR _vert$[ebp]
	mov	ecx, DWORD PTR _poly$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR [eax+112], edx
	mov	eax, DWORD PTR _vert$[ebp]
	mov	ecx, DWORD PTR _vert$[ebp]
	mov	edx, DWORD PTR [ecx+112]
	mov	DWORD PTR [eax+80], edx
	mov	eax, DWORD PTR _vert$[ebp]
	mov	ecx, DWORD PTR _vert$[ebp]
	mov	edx, DWORD PTR [ecx+80]
	mov	DWORD PTR [eax+48], edx
	mov	eax, DWORD PTR _vert$[ebp]
	mov	ecx, DWORD PTR _vert$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	mov	DWORD PTR [eax+16], edx

; 700  : 
; 701  : // set UV's
; 702  : 
; 703  : 	vert[0].tu = vert[3].tu = poly->U;

	mov	eax, DWORD PTR _vert$[ebp]
	mov	ecx, DWORD PTR _poly$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+120], edx
	mov	eax, DWORD PTR _vert$[ebp]
	mov	ecx, DWORD PTR _vert$[ebp]
	mov	edx, DWORD PTR [ecx+120]
	mov	DWORD PTR [eax+24], edx

; 704  : 	vert[1].tu = vert[2].tu = poly->U + poly->Usize;

	mov	eax, DWORD PTR _poly$[ebp]
	mov	ecx, DWORD PTR _poly$[ebp]
	fld	DWORD PTR [eax+8]
	fadd	DWORD PTR [ecx+16]
	mov	edx, DWORD PTR _vert$[ebp]
	fstp	DWORD PTR [edx+88]
	mov	eax, DWORD PTR _vert$[ebp]
	mov	ecx, DWORD PTR _vert$[ebp]
	mov	edx, DWORD PTR [ecx+88]
	mov	DWORD PTR [eax+56], edx

; 705  : 
; 706  : 	vert[0].tv = vert[1].tv = poly->V;

	mov	eax, DWORD PTR _vert$[ebp]
	mov	ecx, DWORD PTR _poly$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+60], edx
	mov	eax, DWORD PTR _vert$[ebp]
	mov	ecx, DWORD PTR _vert$[ebp]
	mov	edx, DWORD PTR [ecx+60]
	mov	DWORD PTR [eax+28], edx

; 707  : 	vert[2].tv = vert[3].tv = poly->V + poly->Vsize;

	mov	eax, DWORD PTR _poly$[ebp]
	mov	ecx, DWORD PTR _poly$[ebp]
	fld	DWORD PTR [eax+12]
	fadd	DWORD PTR [ecx+20]
	mov	edx, DWORD PTR _vert$[ebp]
	fstp	DWORD PTR [edx+124]
	mov	eax, DWORD PTR _vert$[ebp]
	mov	ecx, DWORD PTR _vert$[ebp]
	mov	edx, DWORD PTR [ecx+124]
	mov	DWORD PTR [eax+92], edx

; 708  : 
; 709  : // set fog
; 710  : 
; 711  : 	mirrorfog = GET_MIRROR_FOG(mirroradd);

	fld	DWORD PTR _mirroradd$[ebp]
	fmul	DWORD PTR ?MirrorMul@@3MA		; MirrorMul
	fadd	DWORD PTR ?MirrorAdd@@3MA		; MirrorAdd
	fstp	DWORD PTR _mirrorfog$[ebp]

; 712  : 	if (mirrorfog < 0) mirrorfog = 0;

	fld	DWORD PTR _mirrorfog$[ebp]
	fcomp	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L81541
	mov	DWORD PTR _mirrorfog$[ebp], 0
$L81541:

; 713  : 
; 714  : 	fog = (RenderSettings.FarClip - z) * RenderSettings.FogMul;

	fld	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+32
	fsub	DWORD PTR _z$[ebp]
	fmul	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+56
	fstp	DWORD PTR _fog$[ebp]

; 715  : 	if (fog > 255) fog = 255;

	fld	DWORD PTR _fog$[ebp]
	fcomp	DWORD PTR __real@437f0000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $L81542
	mov	DWORD PTR _fog$[ebp], 1132396544	; 437f0000H
$L81542:

; 716  : 	fog -= mirrorfog;

	fld	DWORD PTR _fog$[ebp]
	fsub	DWORD PTR _mirrorfog$[ebp]
	fstp	DWORD PTR _fog$[ebp]

; 717  : 	if (fog < 0) fog = 0;

	fld	DWORD PTR _fog$[ebp]
	fcomp	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L81543
	mov	DWORD PTR _fog$[ebp], 0
$L81543:

; 718  : 	vert[0].specular = vert[1].specular = vert[2].specular = vert[3].specular = FTOL3(fog) << 24;

	fld	DWORD PTR _fog$[ebp]
	fadd	DWORD PTR __real@4b000000
	fstp	DWORD PTR _fog$[ebp]
	mov	eax, DWORD PTR _fog$[ebp]
	shl	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _vert$[ebp]
	mov	DWORD PTR [ecx+116], eax
	mov	edx, DWORD PTR _vert$[ebp]
	mov	eax, DWORD PTR _vert$[ebp]
	mov	ecx, DWORD PTR [eax+116]
	mov	DWORD PTR [edx+84], ecx
	mov	edx, DWORD PTR _vert$[ebp]
	mov	eax, DWORD PTR _vert$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	mov	DWORD PTR [edx+52], ecx
	mov	edx, DWORD PTR _vert$[ebp]
	mov	eax, DWORD PTR _vert$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	mov	DWORD PTR [edx+20], ecx

; 719  : 
; 720  : // draw
; 721  : 
; 722  : 	if (semi == -1)

	cmp	DWORD PTR _semi$[ebp], -1
	jne	$L81520

; 723  : 	{
; 724  : 		SET_TPAGE(poly->Tpage);

	movsx	eax, WORD PTR ?RenderTP@@3FA		; RenderTP
	mov	ecx, DWORD PTR _poly$[ebp]
	movsx	edx, WORD PTR [ecx+24]
	cmp	eax, edx
	je	SHORT $L81547
	mov	eax, DWORD PTR _poly$[ebp]
	mov	cx, WORD PTR [eax+24]
	mov	WORD PTR ?RenderTP@@3FA, cx		; RenderTP
	movsx	edx, WORD PTR ?RenderTP@@3FA		; RenderTP
	cmp	edx, -1
	jne	SHORT $L81548
	push	0
	push	0
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	edx
	call	DWORD PTR [ecx+152]
	mov	eax, DWORD PTR ?TextureStateChange@@3JA	; TextureStateChange
	add	eax, 1
	mov	DWORD PTR ?TextureStateChange@@3JA, eax	; TextureStateChange
	jmp	SHORT $L81547
$L81548:
	movsx	eax, WORD PTR ?RenderTP@@3FA		; RenderTP
	shl	eax, 6
	mov	ecx, DWORD PTR ?TexInfo@@3PAUTEXINFO@@A	; TexInfo
	mov	edx, DWORD PTR [ecx+eax+52]
	push	edx
	push	0
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	edx
	call	DWORD PTR [ecx+152]
	mov	eax, DWORD PTR ?TextureStateChange@@3JA	; TextureStateChange
	add	eax, 1
	mov	DWORD PTR ?TextureStateChange@@3JA, eax	; TextureStateChange
$L81547:

; 725  : 		D3Ddevice->DrawPrimitive(D3DPT_TRIANGLEFAN, FVF_TEX1, vert, 4, D3DDP_DONOTUPDATEEXTENTS);

	push	8
	push	4
	mov	eax, DWORD PTR _vert$[ebp]
	push	eax
	push	452					; 000001c4H
	push	6
	mov	ecx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	eax
	call	DWORD PTR [edx+112]
$L81520:

; 726  : 	}
; 727  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?DrawFacingPolyMirror@@YAXPAUVectorStruct@@PAUFACING_POLY@@JM@Z ENDP ; DrawFacingPolyMirror
; Function compile flags: /Odt /ZI
_TEXT	ENDS
;	COMDAT ?DrawFacingPoly@@YAXPAUVectorStruct@@PAUFACING_POLY@@JM@Z
_TEXT	SEGMENT
_vert$ = -36						; size = 4
_fog$ = -32						; size = 4
_z$ = -28						; size = 4
_yadd$ = -24						; size = 4
_xadd$ = -20						; size = 4
_screen$ = -16						; size = 16
_pos$ = 8						; size = 4
_poly$ = 12						; size = 4
_semi$ = 16						; size = 4
_zbias$ = 20						; size = 4
?DrawFacingPoly@@YAXPAUVectorStruct@@PAUFACING_POLY@@JM@Z PROC NEAR ; DrawFacingPoly, COMDAT

; 734  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 100				; 00000064H
	push	ebx
	push	esi
	push	edi

; 735  : 	float screen[4];
; 736  : 	float xadd, yadd;
; 737  : 	float z, fog;
; 738  : 	VERTEX_TEX1 *vert;
; 739  : 
; 740  : // get screen coors
; 741  : 
; 742  : 	z = pos->v[X] * ViewMatrixScaled.m[RZ] + pos->v[Y] * ViewMatrixScaled.m[UZ] + pos->v[Z] * ViewMatrixScaled.m[LZ] + ViewTransScaled.v[Z];

	mov	eax, DWORD PTR _pos$[ebp]
	fld	DWORD PTR ?ViewMatrixScaled@@3TMatrixUnion@@A+8
	fmul	DWORD PTR [eax]
	mov	ecx, DWORD PTR _pos$[ebp]
	fld	DWORD PTR ?ViewMatrixScaled@@3TMatrixUnion@@A+20
	fmul	DWORD PTR [ecx+4]
	faddp	ST(1), ST(0)
	mov	edx, DWORD PTR _pos$[ebp]
	fld	DWORD PTR ?ViewMatrixScaled@@3TMatrixUnion@@A+32
	fmul	DWORD PTR [edx+8]
	faddp	ST(1), ST(0)
	fadd	DWORD PTR ?ViewTransScaled@@3UVectorStruct@@A+8
	fstp	DWORD PTR _z$[ebp]

; 743  : 	if (z < RenderSettings.NearClip || z >= RenderSettings.FarClip)

	fld	DWORD PTR _z$[ebp]
	fcomp	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+28
	fnstsw	ax
	test	ah, 5
	jnp	SHORT $L81563
	fld	DWORD PTR _z$[ebp]
	fcomp	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+32
	fnstsw	ax
	test	ah, 1
	jne	SHORT $L81562
$L81563:

; 744  : 		return;

	jmp	$L81555
$L81562:

; 745  : 
; 746  : 	screen[0] = (pos->v[X] * ViewMatrixScaled.m[RX] + pos->v[Y] * ViewMatrixScaled.m[UX] + pos->v[Z] * ViewMatrixScaled.m[LX] + ViewTransScaled.v[X]) / z + RenderSettings.GeomCentreX;

	mov	eax, DWORD PTR _pos$[ebp]
	fld	DWORD PTR ?ViewMatrixScaled@@3TMatrixUnion@@A
	fmul	DWORD PTR [eax]
	mov	ecx, DWORD PTR _pos$[ebp]
	fld	DWORD PTR ?ViewMatrixScaled@@3TMatrixUnion@@A+12
	fmul	DWORD PTR [ecx+4]
	faddp	ST(1), ST(0)
	mov	edx, DWORD PTR _pos$[ebp]
	fld	DWORD PTR ?ViewMatrixScaled@@3TMatrixUnion@@A+24
	fmul	DWORD PTR [edx+8]
	faddp	ST(1), ST(0)
	fadd	DWORD PTR ?ViewTransScaled@@3UVectorStruct@@A
	fdiv	DWORD PTR _z$[ebp]
	fadd	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+4
	fstp	DWORD PTR _screen$[ebp]

; 747  : 	screen[1] = (pos->v[X] * ViewMatrixScaled.m[RY] + pos->v[Y] * ViewMatrixScaled.m[UY] + pos->v[Z] * ViewMatrixScaled.m[LY] + ViewTransScaled.v[Y]) / z + RenderSettings.GeomCentreY;

	mov	eax, DWORD PTR _pos$[ebp]
	fld	DWORD PTR ?ViewMatrixScaled@@3TMatrixUnion@@A+4
	fmul	DWORD PTR [eax]
	mov	ecx, DWORD PTR _pos$[ebp]
	fld	DWORD PTR ?ViewMatrixScaled@@3TMatrixUnion@@A+16
	fmul	DWORD PTR [ecx+4]
	faddp	ST(1), ST(0)
	mov	edx, DWORD PTR _pos$[ebp]
	fld	DWORD PTR ?ViewMatrixScaled@@3TMatrixUnion@@A+28
	fmul	DWORD PTR [edx+8]
	faddp	ST(1), ST(0)
	fadd	DWORD PTR ?ViewTransScaled@@3UVectorStruct@@A+4
	fdiv	DWORD PTR _z$[ebp]
	fadd	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+8
	fstp	DWORD PTR _screen$[ebp+4]

; 748  : 
; 749  : 	screen[3] = 1 / z;

	fld	DWORD PTR __real@3f800000
	fdiv	DWORD PTR _z$[ebp]
	fstp	DWORD PTR _screen$[ebp+12]

; 750  : 	screen[2] = GET_ZBUFFER(z + zbias);

	fld	DWORD PTR _z$[ebp]
	fadd	DWORD PTR _zbias$[ebp]
	fmul	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+36
	fdivr	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+44
	fsubr	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+40
	fstp	DWORD PTR _screen$[ebp+8]

; 751  : 
; 752  : // get verts
; 753  : 
; 754  : 	if (semi == -1)

	cmp	DWORD PTR _semi$[ebp], -1
	jne	SHORT $L81564

; 755  : 	{
; 756  : 		vert = DrawVertsTEX1;

	mov	DWORD PTR _vert$[ebp], OFFSET FLAT:?DrawVertsTEX1@@3PAUVERTEX_TEX1@@A ; DrawVertsTEX1

; 757  : 	}
; 758  : 	else

	jmp	$L81565
$L81564:

; 759  : 	{
; 760  : 		if (!SEMI_POLY_FREE()) return;

	cmp	DWORD PTR ?SemiCount@@3JA, 800		; SemiCount, 00000320H
	jl	SHORT $L81566
	jmp	$L81555
$L81566:

; 761  : 		SEMI_POLY_SETUP(vert, TRUE, 4, poly->Tpage, TRUE, semi);

	mov	eax, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	eax, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[eax+12], 1
	mov	eax, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	eax, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[eax+4], 4
	mov	eax, DWORD PTR _poly$[ebp]
	movsx	ecx, WORD PTR [eax+24]
	mov	edx, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	edx, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[edx+8], ecx
	mov	eax, 1
	test	eax, eax
	je	SHORT $L81567
	mov	eax, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	eax, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[eax], 8
	jmp	SHORT $L81568
$L81567:
	mov	eax, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	eax, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[eax], 12 ; 0000000cH
$L81568:
	mov	eax, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	eax, 152				; 00000098H
	mov	ecx, DWORD PTR _semi$[ebp]
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[eax+16], ecx
	mov	eax, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	eax, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[eax+20], 0
	mov	eax, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	eax, 152				; 00000098H
	add	eax, OFFSET FLAT:?SemiPoly@@3PAUDRAW_SEMI_POLY@@A+24
	mov	DWORD PTR _vert$[ebp], eax
	mov	ecx, DWORD PTR ?SemiCount@@3JA		; SemiCount
	add	ecx, 1
	mov	DWORD PTR ?SemiCount@@3JA, ecx		; SemiCount
$L81565:

; 762  : 	}
; 763  : 
; 764  : // get xy adds
; 765  : 
; 766  : 	xadd = (poly->Xsize * RenderSettings.MatScaleX) / z;

	mov	eax, DWORD PTR _poly$[ebp]
	fld	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+20
	fmul	DWORD PTR [eax]
	fdiv	DWORD PTR _z$[ebp]
	fstp	DWORD PTR _xadd$[ebp]

; 767  : 	yadd = (poly->Ysize * RenderSettings.MatScaleY) / z;

	mov	eax, DWORD PTR _poly$[ebp]
	fld	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+24
	fmul	DWORD PTR [eax+4]
	fdiv	DWORD PTR _z$[ebp]
	fstp	DWORD PTR _yadd$[ebp]

; 768  : 
; 769  : // build 4 from one
; 770  : 
; 771  : 	vert[0].sx = vert[3].sx = screen[0] - xadd;

	fld	DWORD PTR _screen$[ebp]
	fsub	DWORD PTR _xadd$[ebp]
	mov	eax, DWORD PTR _vert$[ebp]
	fstp	DWORD PTR [eax+96]
	mov	ecx, DWORD PTR _vert$[ebp]
	mov	edx, DWORD PTR _vert$[ebp]
	mov	eax, DWORD PTR [edx+96]
	mov	DWORD PTR [ecx], eax

; 772  : 	vert[1].sx = vert[2].sx = screen[0] + xadd;

	fld	DWORD PTR _screen$[ebp]
	fadd	DWORD PTR _xadd$[ebp]
	mov	eax, DWORD PTR _vert$[ebp]
	fstp	DWORD PTR [eax+64]
	mov	ecx, DWORD PTR _vert$[ebp]
	mov	edx, DWORD PTR _vert$[ebp]
	mov	eax, DWORD PTR [edx+64]
	mov	DWORD PTR [ecx+32], eax

; 773  : 
; 774  : 	vert[0].sy = vert[1].sy = screen[1] - yadd;

	fld	DWORD PTR _screen$[ebp+4]
	fsub	DWORD PTR _yadd$[ebp]
	mov	eax, DWORD PTR _vert$[ebp]
	fstp	DWORD PTR [eax+36]
	mov	ecx, DWORD PTR _vert$[ebp]
	mov	edx, DWORD PTR _vert$[ebp]
	mov	eax, DWORD PTR [edx+36]
	mov	DWORD PTR [ecx+4], eax

; 775  : 	vert[2].sy = vert[3].sy = screen[1] + yadd;

	fld	DWORD PTR _screen$[ebp+4]
	fadd	DWORD PTR _yadd$[ebp]
	mov	eax, DWORD PTR _vert$[ebp]
	fstp	DWORD PTR [eax+100]
	mov	ecx, DWORD PTR _vert$[ebp]
	mov	edx, DWORD PTR _vert$[ebp]
	mov	eax, DWORD PTR [edx+100]
	mov	DWORD PTR [ecx+68], eax

; 776  : 
; 777  : 	vert[0].sz = vert[1].sz = vert[2].sz = vert[3].sz = screen[2];

	mov	eax, DWORD PTR _vert$[ebp]
	mov	ecx, DWORD PTR _screen$[ebp+8]
	mov	DWORD PTR [eax+104], ecx
	mov	edx, DWORD PTR _vert$[ebp]
	mov	eax, DWORD PTR _screen$[ebp+8]
	mov	DWORD PTR [edx+72], eax
	mov	ecx, DWORD PTR _vert$[ebp]
	mov	edx, DWORD PTR _screen$[ebp+8]
	mov	DWORD PTR [ecx+40], edx
	mov	eax, DWORD PTR _vert$[ebp]
	mov	ecx, DWORD PTR _screen$[ebp+8]
	mov	DWORD PTR [eax+8], ecx

; 778  : 	vert[0].rhw = vert[1].rhw = vert[2].rhw = vert[3].rhw = screen[3];

	mov	eax, DWORD PTR _vert$[ebp]
	mov	ecx, DWORD PTR _screen$[ebp+12]
	mov	DWORD PTR [eax+108], ecx
	mov	edx, DWORD PTR _vert$[ebp]
	mov	eax, DWORD PTR _screen$[ebp+12]
	mov	DWORD PTR [edx+76], eax
	mov	ecx, DWORD PTR _vert$[ebp]
	mov	edx, DWORD PTR _screen$[ebp+12]
	mov	DWORD PTR [ecx+44], edx
	mov	eax, DWORD PTR _vert$[ebp]
	mov	ecx, DWORD PTR _screen$[ebp+12]
	mov	DWORD PTR [eax+12], ecx

; 779  : 
; 780  : // set RGB's
; 781  : 
; 782  : 	vert[0].color = vert[1].color = vert[2].color = vert[3].color = poly->RGB;

	mov	eax, DWORD PTR _vert$[ebp]
	mov	ecx, DWORD PTR _poly$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR [eax+112], edx
	mov	eax, DWORD PTR _vert$[ebp]
	mov	ecx, DWORD PTR _vert$[ebp]
	mov	edx, DWORD PTR [ecx+112]
	mov	DWORD PTR [eax+80], edx
	mov	eax, DWORD PTR _vert$[ebp]
	mov	ecx, DWORD PTR _vert$[ebp]
	mov	edx, DWORD PTR [ecx+80]
	mov	DWORD PTR [eax+48], edx
	mov	eax, DWORD PTR _vert$[ebp]
	mov	ecx, DWORD PTR _vert$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	mov	DWORD PTR [eax+16], edx

; 783  : 
; 784  : // set UV's
; 785  : 
; 786  : 	vert[0].tu = vert[3].tu = poly->U;

	mov	eax, DWORD PTR _vert$[ebp]
	mov	ecx, DWORD PTR _poly$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+120], edx
	mov	eax, DWORD PTR _vert$[ebp]
	mov	ecx, DWORD PTR _vert$[ebp]
	mov	edx, DWORD PTR [ecx+120]
	mov	DWORD PTR [eax+24], edx

; 787  : 	vert[1].tu = vert[2].tu = poly->U + poly->Usize;

	mov	eax, DWORD PTR _poly$[ebp]
	mov	ecx, DWORD PTR _poly$[ebp]
	fld	DWORD PTR [eax+8]
	fadd	DWORD PTR [ecx+16]
	mov	edx, DWORD PTR _vert$[ebp]
	fstp	DWORD PTR [edx+88]
	mov	eax, DWORD PTR _vert$[ebp]
	mov	ecx, DWORD PTR _vert$[ebp]
	mov	edx, DWORD PTR [ecx+88]
	mov	DWORD PTR [eax+56], edx

; 788  : 
; 789  : 	vert[0].tv = vert[1].tv = poly->V;

	mov	eax, DWORD PTR _vert$[ebp]
	mov	ecx, DWORD PTR _poly$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+60], edx
	mov	eax, DWORD PTR _vert$[ebp]
	mov	ecx, DWORD PTR _vert$[ebp]
	mov	edx, DWORD PTR [ecx+60]
	mov	DWORD PTR [eax+28], edx

; 790  : 	vert[2].tv = vert[3].tv = poly->V + poly->Vsize;

	mov	eax, DWORD PTR _poly$[ebp]
	mov	ecx, DWORD PTR _poly$[ebp]
	fld	DWORD PTR [eax+12]
	fadd	DWORD PTR [ecx+20]
	mov	edx, DWORD PTR _vert$[ebp]
	fstp	DWORD PTR [edx+124]
	mov	eax, DWORD PTR _vert$[ebp]
	mov	ecx, DWORD PTR _vert$[ebp]
	mov	edx, DWORD PTR [ecx+124]
	mov	DWORD PTR [eax+92], edx

; 791  : 
; 792  : // set fog
; 793  : 
; 794  : 	fog = (RenderSettings.FarClip - z) * RenderSettings.FogMul;

	fld	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+32
	fsub	DWORD PTR _z$[ebp]
	fmul	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+56
	fstp	DWORD PTR _fog$[ebp]

; 795  : 	if (fog > 255) fog = 255;

	fld	DWORD PTR _fog$[ebp]
	fcomp	DWORD PTR __real@437f0000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $L81569
	mov	DWORD PTR _fog$[ebp], 1132396544	; 437f0000H

; 796  : 	else if (fog < 0) fog = 0;

	jmp	SHORT $L81570
$L81569:
	fld	DWORD PTR _fog$[ebp]
	fcomp	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L81570
	mov	DWORD PTR _fog$[ebp], 0
$L81570:

; 797  : 	vert[0].specular = vert[1].specular = vert[2].specular = vert[3].specular = FTOL3(fog) << 24;

	fld	DWORD PTR _fog$[ebp]
	fadd	DWORD PTR __real@4b000000
	fstp	DWORD PTR _fog$[ebp]
	mov	eax, DWORD PTR _fog$[ebp]
	shl	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _vert$[ebp]
	mov	DWORD PTR [ecx+116], eax
	mov	edx, DWORD PTR _vert$[ebp]
	mov	eax, DWORD PTR _vert$[ebp]
	mov	ecx, DWORD PTR [eax+116]
	mov	DWORD PTR [edx+84], ecx
	mov	edx, DWORD PTR _vert$[ebp]
	mov	eax, DWORD PTR _vert$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	mov	DWORD PTR [edx+52], ecx
	mov	edx, DWORD PTR _vert$[ebp]
	mov	eax, DWORD PTR _vert$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	mov	DWORD PTR [edx+20], ecx

; 798  : 
; 799  : // draw
; 800  : 
; 801  : 	if (semi == -1)

	cmp	DWORD PTR _semi$[ebp], -1
	jne	$L81555

; 802  : 	{
; 803  : 		SET_TPAGE(poly->Tpage);

	movsx	eax, WORD PTR ?RenderTP@@3FA		; RenderTP
	mov	ecx, DWORD PTR _poly$[ebp]
	movsx	edx, WORD PTR [ecx+24]
	cmp	eax, edx
	je	SHORT $L81575
	mov	eax, DWORD PTR _poly$[ebp]
	mov	cx, WORD PTR [eax+24]
	mov	WORD PTR ?RenderTP@@3FA, cx		; RenderTP
	movsx	edx, WORD PTR ?RenderTP@@3FA		; RenderTP
	cmp	edx, -1
	jne	SHORT $L81576
	push	0
	push	0
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	edx
	call	DWORD PTR [ecx+152]
	mov	eax, DWORD PTR ?TextureStateChange@@3JA	; TextureStateChange
	add	eax, 1
	mov	DWORD PTR ?TextureStateChange@@3JA, eax	; TextureStateChange
	jmp	SHORT $L81575
$L81576:
	movsx	eax, WORD PTR ?RenderTP@@3FA		; RenderTP
	shl	eax, 6
	mov	ecx, DWORD PTR ?TexInfo@@3PAUTEXINFO@@A	; TexInfo
	mov	edx, DWORD PTR [ecx+eax+52]
	push	edx
	push	0
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	edx
	call	DWORD PTR [ecx+152]
	mov	eax, DWORD PTR ?TextureStateChange@@3JA	; TextureStateChange
	add	eax, 1
	mov	DWORD PTR ?TextureStateChange@@3JA, eax	; TextureStateChange
$L81575:

; 804  : 		D3Ddevice->DrawPrimitive(D3DPT_TRIANGLEFAN, FVF_TEX1, vert, 4, D3DDP_DONOTUPDATEEXTENTS);

	push	8
	push	4
	mov	eax, DWORD PTR _vert$[ebp]
	push	eax
	push	452					; 000001c4H
	push	6
	mov	ecx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	eax
	call	DWORD PTR [edx+112]
$L81555:

; 805  : 	}
; 806  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?DrawFacingPoly@@YAXPAUVectorStruct@@PAUFACING_POLY@@JM@Z ENDP ; DrawFacingPoly
_TEXT	ENDS
PUBLIC	__real@43000000
PUBLIC	?DrawFacingPolyRotMirror@@YAXPAUVectorStruct@@PATMatrixUnion@@PAUFACING_POLY@@JM@Z ; DrawFacingPolyRotMirror
PUBLIC	?DrawFacingPolyRot@@YAXPAUVectorStruct@@PATMatrixUnion@@PAUFACING_POLY@@JM@Z ; DrawFacingPolyRot
EXTRN	?RotTransPersVectorZbias@@YAXPATMatrixUnion@@PAUVectorStruct@@1PAMM@Z:NEAR ; RotTransPersVectorZbias
EXTRN	?MulMatrix@@YAXPATMatrixUnion@@00@Z:NEAR	; MulMatrix
EXTRN	?BuildLookMatrixForward@@YAXPAUVectorStruct@@0PATMatrixUnion@@@Z:NEAR ; BuildLookMatrixForward
EXTRN	?CopyMat@@YAXPATMatrixUnion@@0@Z:NEAR		; CopyMat
;	COMDAT __real@43000000
CONST	SEGMENT
__real@43000000 DD 043000000r			; 128
; Function compile flags: /Odt /ZI
CONST	ENDS
;	COMDAT ?DrawFacingPolyRotMirror@@YAXPAUVectorStruct@@PATMatrixUnion@@PAUFACING_POLY@@JM@Z
_TEXT	SEGMENT
_mirrory$ = -188					; size = 4
_mirroradd$ = -184					; size = 4
_vert$ = -180						; size = 4
_mat4$ = -176						; size = 36
_mat3$ = -140						; size = 36
_mat2$ = -104						; size = 36
_v3$ = -68						; size = 12
_v2$ = -56						; size = 12
_v1$ = -44						; size = 12
_v0$ = -32						; size = 12
_trans$ = -20						; size = 12
_mirrorfog$ = -8					; size = 4
_fog$ = -4						; size = 4
_pos$ = 8						; size = 4
_mat$ = 12						; size = 4
_poly$ = 16						; size = 4
_semi$ = 20						; size = 4
_zbias$ = 24						; size = 4
?DrawFacingPolyRotMirror@@YAXPAUVectorStruct@@PATMatrixUnion@@PAUFACING_POLY@@JM@Z PROC NEAR ; DrawFacingPolyRotMirror, COMDAT

; 813  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 252				; 000000fcH
	push	ebx
	push	esi
	push	edi

; 814  : 	float fog, mirrorfog;
; 815  : 	VEC trans;
; 816  : 	VEC v0, v1, v2, v3;
; 817  : 	MAT mat2, mat3, mat4;
; 818  : 	VERTEX_TEX1 *vert;
; 819  : 	float mirroradd, mirrory;
; 820  : 
; 821  : // draw original
; 822  : 
; 823  : 	DrawFacingPolyRot(pos, mat, poly, semi, zbias);

	mov	eax, DWORD PTR _zbias$[ebp]
	push	eax
	mov	ecx, DWORD PTR _semi$[ebp]
	push	ecx
	mov	edx, DWORD PTR _poly$[ebp]
	push	edx
	mov	eax, DWORD PTR _mat$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pos$[ebp]
	push	ecx
	call	?DrawFacingPolyRot@@YAXPAUVectorStruct@@PATMatrixUnion@@PAUFACING_POLY@@JM@Z ; DrawFacingPolyRot
	add	esp, 20					; 00000014H

; 824  : 
; 825  : // reflect?
; 826  : 
; 827  : 	if (!RenderSettings.Mirror)

	cmp	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+80, 0
	jne	SHORT $L81598

; 828  : 		return;

	jmp	$L81584
$L81598:

; 829  : 
; 830  : 	if (!GetMirrorPlane(pos))

	mov	eax, DWORD PTR _pos$[ebp]
	push	eax
	call	?GetMirrorPlane@@YAJPAUVectorStruct@@@Z	; GetMirrorPlane
	add	esp, 4
	test	eax, eax
	jne	SHORT $L81599

; 831  : 		return;

	jmp	$L81584
$L81599:

; 832  : 
; 833  : 	if (ViewCameraPos.v[Y] >= MirrorHeight)

	fld	DWORD PTR ?ViewCameraPos@@3UVectorStruct@@A+4
	fcomp	DWORD PTR ?MirrorHeight@@3MA		; MirrorHeight
	fnstsw	ax
	test	ah, 1
	jne	SHORT $L81600

; 834  : 		return;

	jmp	$L81584
$L81600:

; 835  : 
; 836  : 	mirroradd = MirrorHeight - pos->v[Y];

	mov	eax, DWORD PTR _pos$[ebp]
	fld	DWORD PTR ?MirrorHeight@@3MA		; MirrorHeight
	fsub	DWORD PTR [eax+4]
	fstp	DWORD PTR _mirroradd$[ebp]

; 837  : 	if (mirroradd <= -MIRROR_OVERLAP_TOL)

	fld	DWORD PTR _mirroradd$[ebp]
	fcomp	DWORD PTR __real@c0000000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jp	SHORT $L81601

; 838  : 		return;

	jmp	$L81584
$L81601:

; 839  : 
; 840  : // yep
; 841  : 
; 842  : 	mirrory = MirrorHeight + mirroradd;

	fld	DWORD PTR ?MirrorHeight@@3MA		; MirrorHeight
	fadd	DWORD PTR _mirroradd$[ebp]
	fstp	DWORD PTR _mirrory$[ebp]

; 843  : 
; 844  : // get vector translation
; 845  : 
; 846  : 	trans.v[Z] = pos->v[X] * ViewMatrixScaled.m[RZ] + mirrory * ViewMatrixScaled.m[UZ] + pos->v[Z] * ViewMatrixScaled.m[LZ] + ViewTransScaled.v[Z];

	mov	eax, DWORD PTR _pos$[ebp]
	fld	DWORD PTR ?ViewMatrixScaled@@3TMatrixUnion@@A+8
	fmul	DWORD PTR [eax]
	fld	DWORD PTR _mirrory$[ebp]
	fmul	DWORD PTR ?ViewMatrixScaled@@3TMatrixUnion@@A+20
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR _pos$[ebp]
	fld	DWORD PTR ?ViewMatrixScaled@@3TMatrixUnion@@A+32
	fmul	DWORD PTR [ecx+8]
	faddp	ST(1), ST(0)
	fadd	DWORD PTR ?ViewTransScaled@@3UVectorStruct@@A+8
	fstp	DWORD PTR _trans$[ebp+8]

; 847  : 	if (trans.v[Z] < RenderSettings.NearClip - 128 || trans.v[Z] >= RenderSettings.FarClip + 128)

	fld	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+28
	fsub	DWORD PTR __real@43000000
	fcomp	DWORD PTR _trans$[ebp+8]
	fnstsw	ax
	test	ah, 65					; 00000041H
	je	SHORT $L81603
	fld	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+32
	fadd	DWORD PTR __real@43000000
	fcomp	DWORD PTR _trans$[ebp+8]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jp	SHORT $L81602
$L81603:

; 848  : 		return;

	jmp	$L81584
$L81602:

; 849  : 
; 850  : 	trans.v[X] = pos->v[X] * ViewMatrixScaled.m[RX] + mirrory * ViewMatrixScaled.m[UX] + pos->v[Z] * ViewMatrixScaled.m[LX] + ViewTransScaled.v[X];

	mov	eax, DWORD PTR _pos$[ebp]
	fld	DWORD PTR ?ViewMatrixScaled@@3TMatrixUnion@@A
	fmul	DWORD PTR [eax]
	fld	DWORD PTR _mirrory$[ebp]
	fmul	DWORD PTR ?ViewMatrixScaled@@3TMatrixUnion@@A+12
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR _pos$[ebp]
	fld	DWORD PTR ?ViewMatrixScaled@@3TMatrixUnion@@A+24
	fmul	DWORD PTR [ecx+8]
	faddp	ST(1), ST(0)
	fadd	DWORD PTR ?ViewTransScaled@@3UVectorStruct@@A
	fstp	DWORD PTR _trans$[ebp]

; 851  : 	trans.v[Y] = pos->v[X] * ViewMatrixScaled.m[RY] + mirrory * ViewMatrixScaled.m[UY] + pos->v[Z] * ViewMatrixScaled.m[LY] + ViewTransScaled.v[Y];

	mov	eax, DWORD PTR _pos$[ebp]
	fld	DWORD PTR ?ViewMatrixScaled@@3TMatrixUnion@@A+4
	fmul	DWORD PTR [eax]
	fld	DWORD PTR _mirrory$[ebp]
	fmul	DWORD PTR ?ViewMatrixScaled@@3TMatrixUnion@@A+16
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR _pos$[ebp]
	fld	DWORD PTR ?ViewMatrixScaled@@3TMatrixUnion@@A+28
	fmul	DWORD PTR [ecx+8]
	faddp	ST(1), ST(0)
	fadd	DWORD PTR ?ViewTransScaled@@3UVectorStruct@@A+4
	fstp	DWORD PTR _trans$[ebp+4]

; 852  : 
; 853  : // get verts
; 854  : 
; 855  : 	if (semi == -1)

	cmp	DWORD PTR _semi$[ebp], -1
	jne	SHORT $L81604

; 856  : 	{
; 857  : 		vert = DrawVertsTEX1;

	mov	DWORD PTR _vert$[ebp], OFFSET FLAT:?DrawVertsTEX1@@3PAUVERTEX_TEX1@@A ; DrawVertsTEX1

; 858  : 	}
; 859  : 	else

	jmp	$L81605
$L81604:

; 860  : 	{
; 861  : 		if (!SEMI_POLY_FREE()) return;

	cmp	DWORD PTR ?SemiCount@@3JA, 800		; SemiCount, 00000320H
	jl	SHORT $L81606
	jmp	$L81584
$L81606:

; 862  : 		SEMI_POLY_SETUP(vert, TRUE, 4, poly->Tpage, TRUE, semi);

	mov	eax, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	eax, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[eax+12], 1
	mov	eax, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	eax, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[eax+4], 4
	mov	eax, DWORD PTR _poly$[ebp]
	movsx	ecx, WORD PTR [eax+24]
	mov	edx, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	edx, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[edx+8], ecx
	mov	eax, 1
	test	eax, eax
	je	SHORT $L81607
	mov	eax, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	eax, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[eax], 8
	jmp	SHORT $L81608
$L81607:
	mov	eax, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	eax, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[eax], 12 ; 0000000cH
$L81608:
	mov	eax, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	eax, 152				; 00000098H
	mov	ecx, DWORD PTR _semi$[ebp]
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[eax+16], ecx
	mov	eax, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	eax, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[eax+20], 0
	mov	eax, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	eax, 152				; 00000098H
	add	eax, OFFSET FLAT:?SemiPoly@@3PAUDRAW_SEMI_POLY@@A+24
	mov	DWORD PTR _vert$[ebp], eax
	mov	ecx, DWORD PTR ?SemiCount@@3JA		; SemiCount
	add	ecx, 1
	mov	DWORD PTR ?SemiCount@@3JA, ecx		; SemiCount
$L81605:

; 863  : 	}
; 864  : 
; 865  : // set mat
; 866  : 
; 867  : 	CopyMat(mat, &mat4);

	lea	eax, DWORD PTR _mat4$[ebp]
	push	eax
	mov	ecx, DWORD PTR _mat$[ebp]
	push	ecx
	call	?CopyMat@@YAXPATMatrixUnion@@0@Z	; CopyMat
	add	esp, 8

; 868  : 	mat4.m[UX] = -mat4.m[UX];

	fld	DWORD PTR _mat4$[ebp+12]
	fchs
	fstp	DWORD PTR _mat4$[ebp+12]

; 869  : 	mat4.m[UY] = -mat4.m[UY];

	fld	DWORD PTR _mat4$[ebp+16]
	fchs
	fstp	DWORD PTR _mat4$[ebp+16]

; 870  : 	mat4.m[UZ] = -mat4.m[UZ];

	fld	DWORD PTR _mat4$[ebp+20]
	fchs
	fstp	DWORD PTR _mat4$[ebp+20]

; 871  : 
; 872  : 	BuildLookMatrixForward(pos, &ViewCameraPos, &mat2);

	lea	eax, DWORD PTR _mat2$[ebp]
	push	eax
	push	OFFSET FLAT:?ViewCameraPos@@3UVectorStruct@@A ; ViewCameraPos
	mov	ecx, DWORD PTR _pos$[ebp]
	push	ecx
	call	?BuildLookMatrixForward@@YAXPAUVectorStruct@@0PATMatrixUnion@@@Z ; BuildLookMatrixForward
	add	esp, 12					; 0000000cH

; 873  : 	MulMatrix(&ViewMatrixScaled, &mat2, &mat3);

	lea	eax, DWORD PTR _mat3$[ebp]
	push	eax
	lea	ecx, DWORD PTR _mat2$[ebp]
	push	ecx
	push	OFFSET FLAT:?ViewMatrixScaled@@3TMatrixUnion@@A ; ViewMatrixScaled
	call	?MulMatrix@@YAXPATMatrixUnion@@00@Z	; MulMatrix
	add	esp, 12					; 0000000cH

; 874  : 	MulMatrix(&mat3, &mat4, &mat2);

	lea	eax, DWORD PTR _mat2$[ebp]
	push	eax
	lea	ecx, DWORD PTR _mat4$[ebp]
	push	ecx
	lea	edx, DWORD PTR _mat3$[ebp]
	push	edx
	call	?MulMatrix@@YAXPATMatrixUnion@@00@Z	; MulMatrix
	add	esp, 12					; 0000000cH

; 875  : 
; 876  : // setup 4 vectors
; 877  : 
; 878  : 	SetVector(&v0, -poly->Xsize, -poly->Ysize, 0);

	mov	eax, DWORD PTR _poly$[ebp]
	fld	DWORD PTR [eax]
	fchs
	fstp	DWORD PTR _v0$[ebp]
	mov	eax, DWORD PTR _poly$[ebp]
	fld	DWORD PTR [eax+4]
	fchs
	fstp	DWORD PTR _v0$[ebp+4]
	mov	DWORD PTR _v0$[ebp+8], 0

; 879  : 	SetVector(&v1, poly->Xsize, -poly->Ysize, 0);

	mov	eax, DWORD PTR _poly$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _v1$[ebp], ecx
	mov	eax, DWORD PTR _poly$[ebp]
	fld	DWORD PTR [eax+4]
	fchs
	fstp	DWORD PTR _v1$[ebp+4]
	mov	DWORD PTR _v1$[ebp+8], 0

; 880  : 	SetVector(&v2, poly->Xsize, poly->Ysize, 0);

	mov	eax, DWORD PTR _poly$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _v2$[ebp], ecx
	mov	eax, DWORD PTR _poly$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _v2$[ebp+4], ecx
	mov	DWORD PTR _v2$[ebp+8], 0

; 881  : 	SetVector(&v3, -poly->Xsize, poly->Ysize, 0);

	mov	eax, DWORD PTR _poly$[ebp]
	fld	DWORD PTR [eax]
	fchs
	fstp	DWORD PTR _v3$[ebp]
	mov	eax, DWORD PTR _poly$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _v3$[ebp+4], ecx
	mov	DWORD PTR _v3$[ebp+8], 0

; 882  : 
; 883  : // get screen coors
; 884  : 
; 885  : 	RotTransPersVectorZbias(&mat2, &trans, &v0, &vert[0].sx, zbias);

	mov	eax, DWORD PTR _zbias$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vert$[ebp]
	push	ecx
	lea	edx, DWORD PTR _v0$[ebp]
	push	edx
	lea	eax, DWORD PTR _trans$[ebp]
	push	eax
	lea	ecx, DWORD PTR _mat2$[ebp]
	push	ecx
	call	?RotTransPersVectorZbias@@YAXPATMatrixUnion@@PAUVectorStruct@@1PAMM@Z ; RotTransPersVectorZbias
	add	esp, 20					; 00000014H

; 886  : 	RotTransPersVectorZbias(&mat2, &trans, &v1, &vert[1].sx, zbias);

	mov	eax, DWORD PTR _zbias$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vert$[ebp]
	add	ecx, 32					; 00000020H
	push	ecx
	lea	edx, DWORD PTR _v1$[ebp]
	push	edx
	lea	eax, DWORD PTR _trans$[ebp]
	push	eax
	lea	ecx, DWORD PTR _mat2$[ebp]
	push	ecx
	call	?RotTransPersVectorZbias@@YAXPATMatrixUnion@@PAUVectorStruct@@1PAMM@Z ; RotTransPersVectorZbias
	add	esp, 20					; 00000014H

; 887  : 	RotTransPersVectorZbias(&mat2, &trans, &v2, &vert[2].sx, zbias);

	mov	eax, DWORD PTR _zbias$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vert$[ebp]
	add	ecx, 64					; 00000040H
	push	ecx
	lea	edx, DWORD PTR _v2$[ebp]
	push	edx
	lea	eax, DWORD PTR _trans$[ebp]
	push	eax
	lea	ecx, DWORD PTR _mat2$[ebp]
	push	ecx
	call	?RotTransPersVectorZbias@@YAXPATMatrixUnion@@PAUVectorStruct@@1PAMM@Z ; RotTransPersVectorZbias
	add	esp, 20					; 00000014H

; 888  : 	RotTransPersVectorZbias(&mat2, &trans, &v3, &vert[3].sx, zbias);

	mov	eax, DWORD PTR _zbias$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vert$[ebp]
	add	ecx, 96					; 00000060H
	push	ecx
	lea	edx, DWORD PTR _v3$[ebp]
	push	edx
	lea	eax, DWORD PTR _trans$[ebp]
	push	eax
	lea	ecx, DWORD PTR _mat2$[ebp]
	push	ecx
	call	?RotTransPersVectorZbias@@YAXPATMatrixUnion@@PAUVectorStruct@@1PAMM@Z ; RotTransPersVectorZbias
	add	esp, 20					; 00000014H

; 889  : 
; 890  : // set RGB's
; 891  : 
; 892  : 	vert[0].color = vert[1].color = vert[2].color = vert[3].color = poly->RGB;

	mov	eax, DWORD PTR _vert$[ebp]
	mov	ecx, DWORD PTR _poly$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR [eax+112], edx
	mov	eax, DWORD PTR _vert$[ebp]
	mov	ecx, DWORD PTR _vert$[ebp]
	mov	edx, DWORD PTR [ecx+112]
	mov	DWORD PTR [eax+80], edx
	mov	eax, DWORD PTR _vert$[ebp]
	mov	ecx, DWORD PTR _vert$[ebp]
	mov	edx, DWORD PTR [ecx+80]
	mov	DWORD PTR [eax+48], edx
	mov	eax, DWORD PTR _vert$[ebp]
	mov	ecx, DWORD PTR _vert$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	mov	DWORD PTR [eax+16], edx

; 893  : 
; 894  : // set UV's
; 895  : 
; 896  : 	vert[0].tu = vert[3].tu = poly->U;

	mov	eax, DWORD PTR _vert$[ebp]
	mov	ecx, DWORD PTR _poly$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+120], edx
	mov	eax, DWORD PTR _vert$[ebp]
	mov	ecx, DWORD PTR _vert$[ebp]
	mov	edx, DWORD PTR [ecx+120]
	mov	DWORD PTR [eax+24], edx

; 897  : 	vert[1].tu = vert[2].tu = poly->U + poly->Usize;

	mov	eax, DWORD PTR _poly$[ebp]
	mov	ecx, DWORD PTR _poly$[ebp]
	fld	DWORD PTR [eax+8]
	fadd	DWORD PTR [ecx+16]
	mov	edx, DWORD PTR _vert$[ebp]
	fstp	DWORD PTR [edx+88]
	mov	eax, DWORD PTR _vert$[ebp]
	mov	ecx, DWORD PTR _vert$[ebp]
	mov	edx, DWORD PTR [ecx+88]
	mov	DWORD PTR [eax+56], edx

; 898  : 
; 899  : 	vert[0].tv = vert[1].tv = poly->V;

	mov	eax, DWORD PTR _vert$[ebp]
	mov	ecx, DWORD PTR _poly$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+60], edx
	mov	eax, DWORD PTR _vert$[ebp]
	mov	ecx, DWORD PTR _vert$[ebp]
	mov	edx, DWORD PTR [ecx+60]
	mov	DWORD PTR [eax+28], edx

; 900  : 	vert[2].tv = vert[3].tv = poly->V + poly->Vsize;

	mov	eax, DWORD PTR _poly$[ebp]
	mov	ecx, DWORD PTR _poly$[ebp]
	fld	DWORD PTR [eax+12]
	fadd	DWORD PTR [ecx+20]
	mov	edx, DWORD PTR _vert$[ebp]
	fstp	DWORD PTR [edx+124]
	mov	eax, DWORD PTR _vert$[ebp]
	mov	ecx, DWORD PTR _vert$[ebp]
	mov	edx, DWORD PTR [ecx+124]
	mov	DWORD PTR [eax+92], edx

; 901  : 
; 902  : // set fog
; 903  : 
; 904  : 	mirrorfog = GET_MIRROR_FOG(mirroradd);

	fld	DWORD PTR _mirroradd$[ebp]
	fmul	DWORD PTR ?MirrorMul@@3MA		; MirrorMul
	fadd	DWORD PTR ?MirrorAdd@@3MA		; MirrorAdd
	fstp	DWORD PTR _mirrorfog$[ebp]

; 905  : 	if (mirrorfog < 0) mirrorfog = 0;

	fld	DWORD PTR _mirrorfog$[ebp]
	fcomp	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L81609
	mov	DWORD PTR _mirrorfog$[ebp], 0
$L81609:

; 906  : 
; 907  : 	fog = (RenderSettings.FarClip - 1 / vert[0].rhw) * RenderSettings.FogMul;

	mov	eax, DWORD PTR _vert$[ebp]
	fld	DWORD PTR __real@3f800000
	fdiv	DWORD PTR [eax+12]
	fsubr	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+32
	fmul	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+56
	fstp	DWORD PTR _fog$[ebp]

; 908  : 	if (fog > 255) fog = 255;

	fld	DWORD PTR _fog$[ebp]
	fcomp	DWORD PTR __real@437f0000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $L81610
	mov	DWORD PTR _fog$[ebp], 1132396544	; 437f0000H
$L81610:

; 909  : 	fog -= mirrorfog;

	fld	DWORD PTR _fog$[ebp]
	fsub	DWORD PTR _mirrorfog$[ebp]
	fstp	DWORD PTR _fog$[ebp]

; 910  : 	if (fog < 0) fog = 0;

	fld	DWORD PTR _fog$[ebp]
	fcomp	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L81611
	mov	DWORD PTR _fog$[ebp], 0
$L81611:

; 911  : 	vert[0].specular = FTOL3(fog) << 24;

	fld	DWORD PTR _fog$[ebp]
	fadd	DWORD PTR __real@4b000000
	fstp	DWORD PTR _fog$[ebp]
	mov	eax, DWORD PTR _fog$[ebp]
	shl	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _vert$[ebp]
	mov	DWORD PTR [ecx+20], eax

; 912  : 
; 913  : 	fog = (RenderSettings.FarClip - 1 / vert[1].rhw) * RenderSettings.FogMul;

	mov	eax, DWORD PTR _vert$[ebp]
	fld	DWORD PTR __real@3f800000
	fdiv	DWORD PTR [eax+44]
	fsubr	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+32
	fmul	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+56
	fstp	DWORD PTR _fog$[ebp]

; 914  : 	if (fog > 255) fog = 255;

	fld	DWORD PTR _fog$[ebp]
	fcomp	DWORD PTR __real@437f0000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $L81614
	mov	DWORD PTR _fog$[ebp], 1132396544	; 437f0000H
$L81614:

; 915  : 	fog -= mirrorfog;

	fld	DWORD PTR _fog$[ebp]
	fsub	DWORD PTR _mirrorfog$[ebp]
	fstp	DWORD PTR _fog$[ebp]

; 916  : 	if (fog < 0) fog = 0;

	fld	DWORD PTR _fog$[ebp]
	fcomp	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L81615
	mov	DWORD PTR _fog$[ebp], 0
$L81615:

; 917  : 	vert[1].specular = FTOL3(fog) << 24;

	fld	DWORD PTR _fog$[ebp]
	fadd	DWORD PTR __real@4b000000
	fstp	DWORD PTR _fog$[ebp]
	mov	eax, DWORD PTR _fog$[ebp]
	shl	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _vert$[ebp]
	mov	DWORD PTR [ecx+52], eax

; 918  : 
; 919  : 	fog = (RenderSettings.FarClip - 1 / vert[2].rhw) * RenderSettings.FogMul;

	mov	eax, DWORD PTR _vert$[ebp]
	fld	DWORD PTR __real@3f800000
	fdiv	DWORD PTR [eax+76]
	fsubr	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+32
	fmul	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+56
	fstp	DWORD PTR _fog$[ebp]

; 920  : 	if (fog > 255) fog = 255;

	fld	DWORD PTR _fog$[ebp]
	fcomp	DWORD PTR __real@437f0000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $L81618
	mov	DWORD PTR _fog$[ebp], 1132396544	; 437f0000H
$L81618:

; 921  : 	fog -= mirrorfog;

	fld	DWORD PTR _fog$[ebp]
	fsub	DWORD PTR _mirrorfog$[ebp]
	fstp	DWORD PTR _fog$[ebp]

; 922  : 	if (fog < 0) fog = 0;

	fld	DWORD PTR _fog$[ebp]
	fcomp	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L81619
	mov	DWORD PTR _fog$[ebp], 0
$L81619:

; 923  : 	vert[2].specular = FTOL3(fog) << 24;

	fld	DWORD PTR _fog$[ebp]
	fadd	DWORD PTR __real@4b000000
	fstp	DWORD PTR _fog$[ebp]
	mov	eax, DWORD PTR _fog$[ebp]
	shl	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _vert$[ebp]
	mov	DWORD PTR [ecx+84], eax

; 924  : 
; 925  : 	fog = (RenderSettings.FarClip - 1 / vert[3].rhw) * RenderSettings.FogMul;

	mov	eax, DWORD PTR _vert$[ebp]
	fld	DWORD PTR __real@3f800000
	fdiv	DWORD PTR [eax+108]
	fsubr	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+32
	fmul	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+56
	fstp	DWORD PTR _fog$[ebp]

; 926  : 	if (fog > 255) fog = 255;

	fld	DWORD PTR _fog$[ebp]
	fcomp	DWORD PTR __real@437f0000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $L81622
	mov	DWORD PTR _fog$[ebp], 1132396544	; 437f0000H
$L81622:

; 927  : 	fog -= mirrorfog;

	fld	DWORD PTR _fog$[ebp]
	fsub	DWORD PTR _mirrorfog$[ebp]
	fstp	DWORD PTR _fog$[ebp]

; 928  : 	if (fog < 0) fog = 0;

	fld	DWORD PTR _fog$[ebp]
	fcomp	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L81623
	mov	DWORD PTR _fog$[ebp], 0
$L81623:

; 929  : 	vert[3].specular = FTOL3(fog) << 24;

	fld	DWORD PTR _fog$[ebp]
	fadd	DWORD PTR __real@4b000000
	fstp	DWORD PTR _fog$[ebp]
	mov	eax, DWORD PTR _fog$[ebp]
	shl	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _vert$[ebp]
	mov	DWORD PTR [ecx+116], eax

; 930  : 
; 931  : // draw
; 932  : 
; 933  : 	if (semi == -1)

	cmp	DWORD PTR _semi$[ebp], -1
	jne	$L81584

; 934  : 	{
; 935  : 		SET_TPAGE(poly->Tpage);

	movsx	eax, WORD PTR ?RenderTP@@3FA		; RenderTP
	mov	ecx, DWORD PTR _poly$[ebp]
	movsx	edx, WORD PTR [ecx+24]
	cmp	eax, edx
	je	SHORT $L81627
	mov	eax, DWORD PTR _poly$[ebp]
	mov	cx, WORD PTR [eax+24]
	mov	WORD PTR ?RenderTP@@3FA, cx		; RenderTP
	movsx	edx, WORD PTR ?RenderTP@@3FA		; RenderTP
	cmp	edx, -1
	jne	SHORT $L81628
	push	0
	push	0
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	edx
	call	DWORD PTR [ecx+152]
	mov	eax, DWORD PTR ?TextureStateChange@@3JA	; TextureStateChange
	add	eax, 1
	mov	DWORD PTR ?TextureStateChange@@3JA, eax	; TextureStateChange
	jmp	SHORT $L81627
$L81628:
	movsx	eax, WORD PTR ?RenderTP@@3FA		; RenderTP
	shl	eax, 6
	mov	ecx, DWORD PTR ?TexInfo@@3PAUTEXINFO@@A	; TexInfo
	mov	edx, DWORD PTR [ecx+eax+52]
	push	edx
	push	0
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	edx
	call	DWORD PTR [ecx+152]
	mov	eax, DWORD PTR ?TextureStateChange@@3JA	; TextureStateChange
	add	eax, 1
	mov	DWORD PTR ?TextureStateChange@@3JA, eax	; TextureStateChange
$L81627:

; 936  : 		D3Ddevice->DrawPrimitive(D3DPT_TRIANGLEFAN, FVF_TEX1, vert, 4, D3DDP_DONOTUPDATEEXTENTS);

	push	8
	push	4
	mov	eax, DWORD PTR _vert$[ebp]
	push	eax
	push	452					; 000001c4H
	push	6
	mov	ecx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	eax
	call	DWORD PTR [edx+112]
$L81584:

; 937  : 	}
; 938  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?DrawFacingPolyRotMirror@@YAXPAUVectorStruct@@PATMatrixUnion@@PAUFACING_POLY@@JM@Z ENDP ; DrawFacingPolyRotMirror
; Function compile flags: /Odt /ZI
_TEXT	ENDS
;	COMDAT ?DrawFacingPolyRot@@YAXPAUVectorStruct@@PATMatrixUnion@@PAUFACING_POLY@@JM@Z
_TEXT	SEGMENT
_vert$ = -140						; size = 4
_mat3$ = -136						; size = 36
_mat2$ = -100						; size = 36
_v3$ = -64						; size = 12
_v2$ = -52						; size = 12
_v1$ = -40						; size = 12
_v0$ = -28						; size = 12
_trans$ = -16						; size = 12
_fog$ = -4						; size = 4
_pos$ = 8						; size = 4
_mat$ = 12						; size = 4
_poly$ = 16						; size = 4
_semi$ = 20						; size = 4
_zbias$ = 24						; size = 4
?DrawFacingPolyRot@@YAXPAUVectorStruct@@PATMatrixUnion@@PAUFACING_POLY@@JM@Z PROC NEAR ; DrawFacingPolyRot, COMDAT

; 945  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi

; 946  : 	float fog;
; 947  : 	VEC trans;
; 948  : 	VEC v0, v1, v2, v3;
; 949  : 	MAT mat2, mat3;
; 950  : 	VERTEX_TEX1 *vert;
; 951  : 
; 952  : // get vector translation
; 953  : 
; 954  : 	trans.v[Z] = pos->v[X] * ViewMatrixScaled.m[RZ] + pos->v[Y] * ViewMatrixScaled.m[UZ] + pos->v[Z] * ViewMatrixScaled.m[LZ] + ViewTransScaled.v[Z];

	mov	eax, DWORD PTR _pos$[ebp]
	fld	DWORD PTR ?ViewMatrixScaled@@3TMatrixUnion@@A+8
	fmul	DWORD PTR [eax]
	mov	ecx, DWORD PTR _pos$[ebp]
	fld	DWORD PTR ?ViewMatrixScaled@@3TMatrixUnion@@A+20
	fmul	DWORD PTR [ecx+4]
	faddp	ST(1), ST(0)
	mov	edx, DWORD PTR _pos$[ebp]
	fld	DWORD PTR ?ViewMatrixScaled@@3TMatrixUnion@@A+32
	fmul	DWORD PTR [edx+8]
	faddp	ST(1), ST(0)
	fadd	DWORD PTR ?ViewTransScaled@@3UVectorStruct@@A+8
	fstp	DWORD PTR _trans$[ebp+8]

; 955  : 	if (trans.v[Z] < RenderSettings.NearClip - 128 || trans.v[Z] >= RenderSettings.FarClip + 128)

	fld	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+28
	fsub	DWORD PTR __real@43000000
	fcomp	DWORD PTR _trans$[ebp+8]
	fnstsw	ax
	test	ah, 65					; 00000041H
	je	SHORT $L81647
	fld	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+32
	fadd	DWORD PTR __real@43000000
	fcomp	DWORD PTR _trans$[ebp+8]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jp	SHORT $L81646
$L81647:

; 956  : 		return;

	jmp	$L81636
$L81646:

; 957  : 
; 958  : 	trans.v[X] = pos->v[X] * ViewMatrixScaled.m[RX] + pos->v[Y] * ViewMatrixScaled.m[UX] + pos->v[Z] * ViewMatrixScaled.m[LX] + ViewTransScaled.v[X];

	mov	eax, DWORD PTR _pos$[ebp]
	fld	DWORD PTR ?ViewMatrixScaled@@3TMatrixUnion@@A
	fmul	DWORD PTR [eax]
	mov	ecx, DWORD PTR _pos$[ebp]
	fld	DWORD PTR ?ViewMatrixScaled@@3TMatrixUnion@@A+12
	fmul	DWORD PTR [ecx+4]
	faddp	ST(1), ST(0)
	mov	edx, DWORD PTR _pos$[ebp]
	fld	DWORD PTR ?ViewMatrixScaled@@3TMatrixUnion@@A+24
	fmul	DWORD PTR [edx+8]
	faddp	ST(1), ST(0)
	fadd	DWORD PTR ?ViewTransScaled@@3UVectorStruct@@A
	fstp	DWORD PTR _trans$[ebp]

; 959  : 	trans.v[Y] = pos->v[X] * ViewMatrixScaled.m[RY] + pos->v[Y] * ViewMatrixScaled.m[UY] + pos->v[Z] * ViewMatrixScaled.m[LY] + ViewTransScaled.v[Y];

	mov	eax, DWORD PTR _pos$[ebp]
	fld	DWORD PTR ?ViewMatrixScaled@@3TMatrixUnion@@A+4
	fmul	DWORD PTR [eax]
	mov	ecx, DWORD PTR _pos$[ebp]
	fld	DWORD PTR ?ViewMatrixScaled@@3TMatrixUnion@@A+16
	fmul	DWORD PTR [ecx+4]
	faddp	ST(1), ST(0)
	mov	edx, DWORD PTR _pos$[ebp]
	fld	DWORD PTR ?ViewMatrixScaled@@3TMatrixUnion@@A+28
	fmul	DWORD PTR [edx+8]
	faddp	ST(1), ST(0)
	fadd	DWORD PTR ?ViewTransScaled@@3UVectorStruct@@A+4
	fstp	DWORD PTR _trans$[ebp+4]

; 960  : 
; 961  : // get verts
; 962  : 
; 963  : 	if (semi == -1)

	cmp	DWORD PTR _semi$[ebp], -1
	jne	SHORT $L81648

; 964  : 	{
; 965  : 		vert = DrawVertsTEX1;

	mov	DWORD PTR _vert$[ebp], OFFSET FLAT:?DrawVertsTEX1@@3PAUVERTEX_TEX1@@A ; DrawVertsTEX1

; 966  : 	}
; 967  : 	else

	jmp	$L81649
$L81648:

; 968  : 	{
; 969  : 		if (!SEMI_POLY_FREE()) return;

	cmp	DWORD PTR ?SemiCount@@3JA, 800		; SemiCount, 00000320H
	jl	SHORT $L81650
	jmp	$L81636
$L81650:

; 970  : 		SEMI_POLY_SETUP(vert, TRUE, 4, poly->Tpage, TRUE, semi);

	mov	eax, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	eax, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[eax+12], 1
	mov	eax, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	eax, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[eax+4], 4
	mov	eax, DWORD PTR _poly$[ebp]
	movsx	ecx, WORD PTR [eax+24]
	mov	edx, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	edx, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[edx+8], ecx
	mov	eax, 1
	test	eax, eax
	je	SHORT $L81651
	mov	eax, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	eax, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[eax], 8
	jmp	SHORT $L81652
$L81651:
	mov	eax, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	eax, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[eax], 12 ; 0000000cH
$L81652:
	mov	eax, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	eax, 152				; 00000098H
	mov	ecx, DWORD PTR _semi$[ebp]
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[eax+16], ecx
	mov	eax, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	eax, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[eax+20], 0
	mov	eax, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	eax, 152				; 00000098H
	add	eax, OFFSET FLAT:?SemiPoly@@3PAUDRAW_SEMI_POLY@@A+24
	mov	DWORD PTR _vert$[ebp], eax
	mov	ecx, DWORD PTR ?SemiCount@@3JA		; SemiCount
	add	ecx, 1
	mov	DWORD PTR ?SemiCount@@3JA, ecx		; SemiCount
$L81649:

; 971  : 	}
; 972  : 
; 973  : // set mat
; 974  : 
; 975  : 	BuildLookMatrixForward(pos, &ViewCameraPos, &mat2);

	lea	eax, DWORD PTR _mat2$[ebp]
	push	eax
	push	OFFSET FLAT:?ViewCameraPos@@3UVectorStruct@@A ; ViewCameraPos
	mov	ecx, DWORD PTR _pos$[ebp]
	push	ecx
	call	?BuildLookMatrixForward@@YAXPAUVectorStruct@@0PATMatrixUnion@@@Z ; BuildLookMatrixForward
	add	esp, 12					; 0000000cH

; 976  : 	MulMatrix(&ViewMatrixScaled, &mat2, &mat3);

	lea	eax, DWORD PTR _mat3$[ebp]
	push	eax
	lea	ecx, DWORD PTR _mat2$[ebp]
	push	ecx
	push	OFFSET FLAT:?ViewMatrixScaled@@3TMatrixUnion@@A ; ViewMatrixScaled
	call	?MulMatrix@@YAXPATMatrixUnion@@00@Z	; MulMatrix
	add	esp, 12					; 0000000cH

; 977  : 	MulMatrix(&mat3, mat, &mat2);

	lea	eax, DWORD PTR _mat2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _mat$[ebp]
	push	ecx
	lea	edx, DWORD PTR _mat3$[ebp]
	push	edx
	call	?MulMatrix@@YAXPATMatrixUnion@@00@Z	; MulMatrix
	add	esp, 12					; 0000000cH

; 978  : 
; 979  : // setup 4 vectors
; 980  : 
; 981  : 	SetVector(&v0, -poly->Xsize, -poly->Ysize, 0);

	mov	eax, DWORD PTR _poly$[ebp]
	fld	DWORD PTR [eax]
	fchs
	fstp	DWORD PTR _v0$[ebp]
	mov	eax, DWORD PTR _poly$[ebp]
	fld	DWORD PTR [eax+4]
	fchs
	fstp	DWORD PTR _v0$[ebp+4]
	mov	DWORD PTR _v0$[ebp+8], 0

; 982  : 	SetVector(&v1, poly->Xsize, -poly->Ysize, 0);

	mov	eax, DWORD PTR _poly$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _v1$[ebp], ecx
	mov	eax, DWORD PTR _poly$[ebp]
	fld	DWORD PTR [eax+4]
	fchs
	fstp	DWORD PTR _v1$[ebp+4]
	mov	DWORD PTR _v1$[ebp+8], 0

; 983  : 	SetVector(&v2, poly->Xsize, poly->Ysize, 0);

	mov	eax, DWORD PTR _poly$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _v2$[ebp], ecx
	mov	eax, DWORD PTR _poly$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _v2$[ebp+4], ecx
	mov	DWORD PTR _v2$[ebp+8], 0

; 984  : 	SetVector(&v3, -poly->Xsize, poly->Ysize, 0);

	mov	eax, DWORD PTR _poly$[ebp]
	fld	DWORD PTR [eax]
	fchs
	fstp	DWORD PTR _v3$[ebp]
	mov	eax, DWORD PTR _poly$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _v3$[ebp+4], ecx
	mov	DWORD PTR _v3$[ebp+8], 0

; 985  : 
; 986  : // get screen coors
; 987  : 
; 988  : 	RotTransPersVectorZbias(&mat2, &trans, &v0, &vert[0].sx, zbias);

	mov	eax, DWORD PTR _zbias$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vert$[ebp]
	push	ecx
	lea	edx, DWORD PTR _v0$[ebp]
	push	edx
	lea	eax, DWORD PTR _trans$[ebp]
	push	eax
	lea	ecx, DWORD PTR _mat2$[ebp]
	push	ecx
	call	?RotTransPersVectorZbias@@YAXPATMatrixUnion@@PAUVectorStruct@@1PAMM@Z ; RotTransPersVectorZbias
	add	esp, 20					; 00000014H

; 989  : 	RotTransPersVectorZbias(&mat2, &trans, &v1, &vert[1].sx, zbias);

	mov	eax, DWORD PTR _zbias$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vert$[ebp]
	add	ecx, 32					; 00000020H
	push	ecx
	lea	edx, DWORD PTR _v1$[ebp]
	push	edx
	lea	eax, DWORD PTR _trans$[ebp]
	push	eax
	lea	ecx, DWORD PTR _mat2$[ebp]
	push	ecx
	call	?RotTransPersVectorZbias@@YAXPATMatrixUnion@@PAUVectorStruct@@1PAMM@Z ; RotTransPersVectorZbias
	add	esp, 20					; 00000014H

; 990  : 	RotTransPersVectorZbias(&mat2, &trans, &v2, &vert[2].sx, zbias);

	mov	eax, DWORD PTR _zbias$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vert$[ebp]
	add	ecx, 64					; 00000040H
	push	ecx
	lea	edx, DWORD PTR _v2$[ebp]
	push	edx
	lea	eax, DWORD PTR _trans$[ebp]
	push	eax
	lea	ecx, DWORD PTR _mat2$[ebp]
	push	ecx
	call	?RotTransPersVectorZbias@@YAXPATMatrixUnion@@PAUVectorStruct@@1PAMM@Z ; RotTransPersVectorZbias
	add	esp, 20					; 00000014H

; 991  : 	RotTransPersVectorZbias(&mat2, &trans, &v3, &vert[3].sx, zbias);

	mov	eax, DWORD PTR _zbias$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vert$[ebp]
	add	ecx, 96					; 00000060H
	push	ecx
	lea	edx, DWORD PTR _v3$[ebp]
	push	edx
	lea	eax, DWORD PTR _trans$[ebp]
	push	eax
	lea	ecx, DWORD PTR _mat2$[ebp]
	push	ecx
	call	?RotTransPersVectorZbias@@YAXPATMatrixUnion@@PAUVectorStruct@@1PAMM@Z ; RotTransPersVectorZbias
	add	esp, 20					; 00000014H

; 992  : 
; 993  : // set RGB's
; 994  : 
; 995  : 	vert[0].color = vert[1].color = vert[2].color = vert[3].color = poly->RGB;

	mov	eax, DWORD PTR _vert$[ebp]
	mov	ecx, DWORD PTR _poly$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR [eax+112], edx
	mov	eax, DWORD PTR _vert$[ebp]
	mov	ecx, DWORD PTR _vert$[ebp]
	mov	edx, DWORD PTR [ecx+112]
	mov	DWORD PTR [eax+80], edx
	mov	eax, DWORD PTR _vert$[ebp]
	mov	ecx, DWORD PTR _vert$[ebp]
	mov	edx, DWORD PTR [ecx+80]
	mov	DWORD PTR [eax+48], edx
	mov	eax, DWORD PTR _vert$[ebp]
	mov	ecx, DWORD PTR _vert$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	mov	DWORD PTR [eax+16], edx

; 996  : 
; 997  : // set UV's
; 998  : 
; 999  : 	vert[0].tu = vert[3].tu = poly->U;

	mov	eax, DWORD PTR _vert$[ebp]
	mov	ecx, DWORD PTR _poly$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+120], edx
	mov	eax, DWORD PTR _vert$[ebp]
	mov	ecx, DWORD PTR _vert$[ebp]
	mov	edx, DWORD PTR [ecx+120]
	mov	DWORD PTR [eax+24], edx

; 1000 : 	vert[1].tu = vert[2].tu = poly->U + poly->Usize;

	mov	eax, DWORD PTR _poly$[ebp]
	mov	ecx, DWORD PTR _poly$[ebp]
	fld	DWORD PTR [eax+8]
	fadd	DWORD PTR [ecx+16]
	mov	edx, DWORD PTR _vert$[ebp]
	fstp	DWORD PTR [edx+88]
	mov	eax, DWORD PTR _vert$[ebp]
	mov	ecx, DWORD PTR _vert$[ebp]
	mov	edx, DWORD PTR [ecx+88]
	mov	DWORD PTR [eax+56], edx

; 1001 : 
; 1002 : 	vert[0].tv = vert[1].tv = poly->V;

	mov	eax, DWORD PTR _vert$[ebp]
	mov	ecx, DWORD PTR _poly$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+60], edx
	mov	eax, DWORD PTR _vert$[ebp]
	mov	ecx, DWORD PTR _vert$[ebp]
	mov	edx, DWORD PTR [ecx+60]
	mov	DWORD PTR [eax+28], edx

; 1003 : 	vert[2].tv = vert[3].tv = poly->V + poly->Vsize;

	mov	eax, DWORD PTR _poly$[ebp]
	mov	ecx, DWORD PTR _poly$[ebp]
	fld	DWORD PTR [eax+12]
	fadd	DWORD PTR [ecx+20]
	mov	edx, DWORD PTR _vert$[ebp]
	fstp	DWORD PTR [edx+124]
	mov	eax, DWORD PTR _vert$[ebp]
	mov	ecx, DWORD PTR _vert$[ebp]
	mov	edx, DWORD PTR [ecx+124]
	mov	DWORD PTR [eax+92], edx

; 1004 : 
; 1005 : // set fog
; 1006 : 
; 1007 : 	fog = (RenderSettings.FarClip - 1 / vert[0].rhw) * RenderSettings.FogMul;

	mov	eax, DWORD PTR _vert$[ebp]
	fld	DWORD PTR __real@3f800000
	fdiv	DWORD PTR [eax+12]
	fsubr	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+32
	fmul	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+56
	fstp	DWORD PTR _fog$[ebp]

; 1008 : 	if (fog > 255) fog = 255;

	fld	DWORD PTR _fog$[ebp]
	fcomp	DWORD PTR __real@437f0000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $L81653
	mov	DWORD PTR _fog$[ebp], 1132396544	; 437f0000H

; 1009 : 	else if (fog < 0) fog = 0;

	jmp	SHORT $L81654
$L81653:
	fld	DWORD PTR _fog$[ebp]
	fcomp	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L81654
	mov	DWORD PTR _fog$[ebp], 0
$L81654:

; 1010 : 	vert[0].specular = FTOL3(fog) << 24;

	fld	DWORD PTR _fog$[ebp]
	fadd	DWORD PTR __real@4b000000
	fstp	DWORD PTR _fog$[ebp]
	mov	eax, DWORD PTR _fog$[ebp]
	shl	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _vert$[ebp]
	mov	DWORD PTR [ecx+20], eax

; 1011 : 
; 1012 : 	fog = (RenderSettings.FarClip - 1 / vert[1].rhw) * RenderSettings.FogMul;

	mov	eax, DWORD PTR _vert$[ebp]
	fld	DWORD PTR __real@3f800000
	fdiv	DWORD PTR [eax+44]
	fsubr	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+32
	fmul	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+56
	fstp	DWORD PTR _fog$[ebp]

; 1013 : 	if (fog > 255) fog = 255;

	fld	DWORD PTR _fog$[ebp]
	fcomp	DWORD PTR __real@437f0000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $L81658
	mov	DWORD PTR _fog$[ebp], 1132396544	; 437f0000H

; 1014 : 	else if (fog < 0) fog = 0;

	jmp	SHORT $L81659
$L81658:
	fld	DWORD PTR _fog$[ebp]
	fcomp	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L81659
	mov	DWORD PTR _fog$[ebp], 0
$L81659:

; 1015 : 	vert[1].specular = FTOL3(fog) << 24;

	fld	DWORD PTR _fog$[ebp]
	fadd	DWORD PTR __real@4b000000
	fstp	DWORD PTR _fog$[ebp]
	mov	eax, DWORD PTR _fog$[ebp]
	shl	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _vert$[ebp]
	mov	DWORD PTR [ecx+52], eax

; 1016 : 
; 1017 : 	fog = (RenderSettings.FarClip - 1 / vert[2].rhw) * RenderSettings.FogMul;

	mov	eax, DWORD PTR _vert$[ebp]
	fld	DWORD PTR __real@3f800000
	fdiv	DWORD PTR [eax+76]
	fsubr	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+32
	fmul	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+56
	fstp	DWORD PTR _fog$[ebp]

; 1018 : 	if (fog > 255) fog = 255;

	fld	DWORD PTR _fog$[ebp]
	fcomp	DWORD PTR __real@437f0000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $L81663
	mov	DWORD PTR _fog$[ebp], 1132396544	; 437f0000H

; 1019 : 	else if (fog < 0) fog = 0;

	jmp	SHORT $L81664
$L81663:
	fld	DWORD PTR _fog$[ebp]
	fcomp	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L81664
	mov	DWORD PTR _fog$[ebp], 0
$L81664:

; 1020 : 	vert[2].specular = FTOL3(fog) << 24;

	fld	DWORD PTR _fog$[ebp]
	fadd	DWORD PTR __real@4b000000
	fstp	DWORD PTR _fog$[ebp]
	mov	eax, DWORD PTR _fog$[ebp]
	shl	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _vert$[ebp]
	mov	DWORD PTR [ecx+84], eax

; 1021 : 
; 1022 : 	fog = (RenderSettings.FarClip - 1 / vert[3].rhw) * RenderSettings.FogMul;

	mov	eax, DWORD PTR _vert$[ebp]
	fld	DWORD PTR __real@3f800000
	fdiv	DWORD PTR [eax+108]
	fsubr	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+32
	fmul	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+56
	fstp	DWORD PTR _fog$[ebp]

; 1023 : 	if (fog > 255) fog = 255;

	fld	DWORD PTR _fog$[ebp]
	fcomp	DWORD PTR __real@437f0000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $L81668
	mov	DWORD PTR _fog$[ebp], 1132396544	; 437f0000H

; 1024 : 	else if (fog < 0) fog = 0;

	jmp	SHORT $L81669
$L81668:
	fld	DWORD PTR _fog$[ebp]
	fcomp	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L81669
	mov	DWORD PTR _fog$[ebp], 0
$L81669:

; 1025 : 	vert[3].specular = FTOL3(fog) << 24;

	fld	DWORD PTR _fog$[ebp]
	fadd	DWORD PTR __real@4b000000
	fstp	DWORD PTR _fog$[ebp]
	mov	eax, DWORD PTR _fog$[ebp]
	shl	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _vert$[ebp]
	mov	DWORD PTR [ecx+116], eax

; 1026 : 
; 1027 : // draw
; 1028 : 
; 1029 : 	if (semi == -1)

	cmp	DWORD PTR _semi$[ebp], -1
	jne	$L81636

; 1030 : 	{
; 1031 : 		SET_TPAGE(poly->Tpage);

	movsx	eax, WORD PTR ?RenderTP@@3FA		; RenderTP
	mov	ecx, DWORD PTR _poly$[ebp]
	movsx	edx, WORD PTR [ecx+24]
	cmp	eax, edx
	je	SHORT $L81674
	mov	eax, DWORD PTR _poly$[ebp]
	mov	cx, WORD PTR [eax+24]
	mov	WORD PTR ?RenderTP@@3FA, cx		; RenderTP
	movsx	edx, WORD PTR ?RenderTP@@3FA		; RenderTP
	cmp	edx, -1
	jne	SHORT $L81675
	push	0
	push	0
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	edx
	call	DWORD PTR [ecx+152]
	mov	eax, DWORD PTR ?TextureStateChange@@3JA	; TextureStateChange
	add	eax, 1
	mov	DWORD PTR ?TextureStateChange@@3JA, eax	; TextureStateChange
	jmp	SHORT $L81674
$L81675:
	movsx	eax, WORD PTR ?RenderTP@@3FA		; RenderTP
	shl	eax, 6
	mov	ecx, DWORD PTR ?TexInfo@@3PAUTEXINFO@@A	; TexInfo
	mov	edx, DWORD PTR [ecx+eax+52]
	push	edx
	push	0
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	edx
	call	DWORD PTR [ecx+152]
	mov	eax, DWORD PTR ?TextureStateChange@@3JA	; TextureStateChange
	add	eax, 1
	mov	DWORD PTR ?TextureStateChange@@3JA, eax	; TextureStateChange
$L81674:

; 1032 : 		D3Ddevice->DrawPrimitive(D3DPT_TRIANGLEFAN, FVF_TEX1, vert, 4, D3DDP_DONOTUPDATEEXTENTS);

	push	8
	push	4
	mov	eax, DWORD PTR _vert$[ebp]
	push	eax
	push	452					; 000001c4H
	push	6
	mov	ecx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	eax
	call	DWORD PTR [edx+112]
$L81636:

; 1033 : 	}
; 1034 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?DrawFacingPolyRot@@YAXPAUVectorStruct@@PATMatrixUnion@@PAUFACING_POLY@@JM@Z ENDP ; DrawFacingPolyRot
_TEXT	ENDS
PUBLIC	?InitRenderStates@@YAXXZ			; InitRenderStates
EXTRN	?DxState@@3UDX_STATE@@A:BYTE			; DxState
EXTRN	?WorldPolyCount@@3FA:WORD			; WorldPolyCount
EXTRN	?WorldDrawnCount@@3FA:WORD			; WorldDrawnCount
EXTRN	?RenderZbuffer@@3FA:WORD			; RenderZbuffer
EXTRN	?ModelPolyCount@@3FA:WORD			; ModelPolyCount
EXTRN	?ModelDrawnCount@@3FA:WORD			; ModelDrawnCount
; Function compile flags: /Odt /ZI
;	COMDAT ?InitRenderStates@@YAXXZ
_TEXT	SEGMENT
?InitRenderStates@@YAXXZ PROC NEAR			; InitRenderStates, COMDAT

; 1041 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 1042 : 
; 1043 : // set misc render states
; 1044 : 
; 1045 : 	RenderAlpha = TRUE;

	mov	WORD PTR ?RenderAlpha@@3FA, 1		; RenderAlpha

; 1046 : 
; 1047 : 	ALPHA_OFF();

	movsx	eax, WORD PTR ?RenderAlpha@@3FA		; RenderAlpha
	test	eax, eax
	je	SHORT $L81680
	mov	WORD PTR ?RenderAlpha@@3FA, 0		; RenderAlpha
	movsx	eax, WORD PTR ?RenderAlpha@@3FA		; RenderAlpha
	push	eax
	push	27					; 0000001bH
	mov	ecx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	eax
	call	DWORD PTR [edx+88]
	mov	eax, DWORD PTR ?RenderStateChange@@3JA	; RenderStateChange
	add	eax, 1
	mov	DWORD PTR ?RenderStateChange@@3JA, eax	; RenderStateChange
$L81680:

; 1048 : 	FOG_OFF();

	movsx	eax, WORD PTR ?RenderFog@@3FA		; RenderFog
	test	eax, eax
	je	SHORT $L81681
	mov	WORD PTR ?RenderFog@@3FA, 0		; RenderFog
	movsx	eax, WORD PTR ?RenderFog@@3FA		; RenderFog
	push	eax
	push	28					; 0000001cH
	mov	ecx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	eax
	call	DWORD PTR [edx+88]
	mov	eax, DWORD PTR ?RenderStateChange@@3JA	; RenderStateChange
	add	eax, 1
	mov	DWORD PTR ?RenderStateChange@@3JA, eax	; RenderStateChange
$L81681:

; 1049 : 	WIREFRAME_ON();

	mov	eax, DWORD PTR ?DxState@@3UDX_STATE@@A+4
	push	eax
	push	8
	mov	ecx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	eax
	call	DWORD PTR [edx+88]
	mov	eax, DWORD PTR ?RenderStateChange@@3JA	; RenderStateChange
	add	eax, 1
	mov	DWORD PTR ?RenderStateChange@@3JA, eax	; RenderStateChange

; 1050 : 	ZBUFFER_ON();

	movsx	eax, WORD PTR ?RenderZbuffer@@3FA	; RenderZbuffer
	cmp	eax, 1
	je	SHORT $L81682
	mov	WORD PTR ?RenderZbuffer@@3FA, 1		; RenderZbuffer
	movsx	eax, WORD PTR ?RenderZbuffer@@3FA	; RenderZbuffer
	push	eax
	push	7
	mov	ecx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	eax
	call	DWORD PTR [edx+88]
	mov	eax, DWORD PTR ?RenderStateChange@@3JA	; RenderStateChange
	add	eax, 1
	mov	DWORD PTR ?RenderStateChange@@3JA, eax	; RenderStateChange
$L81682:

; 1051 : 	ZWRITE_ON();

	movsx	eax, WORD PTR ?RenderZwrite@@3FA	; RenderZwrite
	test	eax, eax
	jne	SHORT $L81683
	mov	WORD PTR ?RenderZwrite@@3FA, 1		; RenderZwrite
	movsx	eax, WORD PTR ?RenderZwrite@@3FA	; RenderZwrite
	push	eax
	push	14					; 0000000eH
	mov	ecx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	eax
	call	DWORD PTR [edx+88]
	mov	eax, DWORD PTR ?RenderStateChange@@3JA	; RenderStateChange
	add	eax, 1
	mov	DWORD PTR ?RenderStateChange@@3JA, eax	; RenderStateChange
$L81683:

; 1052 : 
; 1053 : // reset screen debug misc
; 1054 : 
; 1055 : 	#if SCREEN_DEBUG
; 1056 : 	WorldPolyCount = 0;

	mov	WORD PTR ?WorldPolyCount@@3FA, 0	; WorldPolyCount

; 1057 : 	WorldDrawnCount = 0;

	mov	WORD PTR ?WorldDrawnCount@@3FA, 0	; WorldDrawnCount

; 1058 : 	ModelPolyCount = 0;

	mov	WORD PTR ?ModelPolyCount@@3FA, 0	; ModelPolyCount

; 1059 : 	ModelDrawnCount = 0;

	mov	WORD PTR ?ModelDrawnCount@@3FA, 0	; ModelDrawnCount

; 1060 : 	RenderStateChange = 0;

	mov	DWORD PTR ?RenderStateChange@@3JA, 0	; RenderStateChange

; 1061 : 	TextureStateChange = 0;

	mov	DWORD PTR ?TextureStateChange@@3JA, 0	; TextureStateChange

; 1062 : 	#endif
; 1063 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?InitRenderStates@@YAXXZ ENDP				; InitRenderStates
_TEXT	ENDS
PUBLIC	?SetNearFar@@YAXMM@Z				; SetNearFar
; Function compile flags: /Odt /ZI
;	COMDAT ?SetNearFar@@YAXMM@Z
_TEXT	SEGMENT
_n$ = 8							; size = 4
_f$ = 12						; size = 4
?SetNearFar@@YAXMM@Z PROC NEAR				; SetNearFar, COMDAT

; 1070 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 1071 : 	RenderSettings.NearClip = n;

	mov	eax, DWORD PTR _n$[ebp]
	mov	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+28, eax

; 1072 : 	RenderSettings.FarClip = f;

	mov	eax, DWORD PTR _f$[ebp]
	mov	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+32, eax

; 1073 : 
; 1074 : 	RenderSettings.DrawDist = RenderSettings.FarClip - RenderSettings.NearClip;

	fld	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+32
	fsub	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+28
	fstp	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+36

; 1075 : 	RenderSettings.FarDivDist = RenderSettings.FarClip / RenderSettings.DrawDist;

	fld	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+32
	fdiv	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+36
	fstp	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+40

; 1076 : 	RenderSettings.FarMulNear = RenderSettings.FarClip * RenderSettings.NearClip;

	fld	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+32
	fmul	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+28
	fstp	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+44

; 1077 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?SetNearFar@@YAXMM@Z ENDP				; SetNearFar
_TEXT	ENDS
PUBLIC	__real@477fff00
PUBLIC	?SetFogVars@@YAXMMM@Z				; SetFogVars
;	COMDAT __real@477fff00
CONST	SEGMENT
__real@477fff00 DD 0477fff00r			; 65535
; Function compile flags: /Odt /ZI
CONST	ENDS
;	COMDAT ?SetFogVars@@YAXMMM@Z
_TEXT	SEGMENT
_fogstart$ = 8						; size = 4
_vertstart$ = 12					; size = 4
_vertend$ = 16						; size = 4
?SetFogVars@@YAXMMM@Z PROC NEAR				; SetFogVars, COMDAT

; 1084 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 1085 : 
; 1086 : // set fog vars
; 1087 : 
; 1088 : 	RenderSettings.FogStart = fogstart;

	mov	eax, DWORD PTR _fogstart$[ebp]
	mov	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+48, eax

; 1089 : 	RenderSettings.FogDist = RenderSettings.FarClip - RenderSettings.FogStart;

	fld	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+32
	fsub	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+48
	fstp	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+52

; 1090 : 	if (RenderSettings.FogDist <= 0) RenderSettings.FogMul = 256, RenderSettings.FogStart += 0xffff;

	fld	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+52
	fcomp	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jp	SHORT $L81693
	mov	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+56, 1132462080 ; 43800000H
	fld	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+48
	fadd	DWORD PTR __real@477fff00
	fstp	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+48

; 1091 : 	else RenderSettings.FogMul = 256 / RenderSettings.FogDist;

	jmp	SHORT $L81694
$L81693:
	fld	DWORD PTR __real@43800000
	fdiv	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+52
	fstp	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+56
$L81694:

; 1092 : 
; 1093 : 	RenderSettings.VertFogStart = vertstart;

	mov	eax, DWORD PTR _vertstart$[ebp]
	mov	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+60, eax

; 1094 : 	RenderSettings.VertFogEnd = vertend;

	mov	eax, DWORD PTR _vertend$[ebp]
	mov	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+64, eax

; 1095 : 	if (RenderSettings.VertFogStart == RenderSettings.VertFogEnd) RenderSettings.VertFogMul = 0;

	fld	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+64
	fld	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+60
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $L81695
	mov	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+72, 0

; 1096 : 	else RenderSettings.VertFogMul = 256 / (RenderSettings.VertFogEnd - RenderSettings.VertFogStart);

	jmp	SHORT $L81696
$L81695:
	fld	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+64
	fsub	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+60
	fdivr	DWORD PTR __real@43800000
	fstp	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+72
$L81696:

; 1097 : 	if (RenderSettings.VertFogMul) RenderSettings.FogStart = 0;

	fld	DWORD PTR __real@00000000
	fld	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+72
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jnp	SHORT $L81692
	mov	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+48, 0
$L81692:

; 1098 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?SetFogVars@@YAXMMM@Z ENDP				; SetFogVars
_TEXT	ENDS
PUBLIC	?DrawAxis@@YAXPATMatrixUnion@@PAUVectorStruct@@@Z ; DrawAxis
PUBLIC	?DrawLine@@YAXPAUVectorStruct@@0JJ@Z		; DrawLine
EXTRN	?RotVector@@YAXPATMatrixUnion@@PAUVectorStruct@@1@Z:NEAR ; RotVector
; Function compile flags: /Odt /ZI
;	COMDAT ?DrawAxis@@YAXPATMatrixUnion@@PAUVectorStruct@@@Z
_TEXT	SEGMENT
_out$ = -56						; size = 12
_in$ = -44						; size = 12
_fp$ = -32						; size = 32
_mat$ = 8						; size = 4
_pos$ = 12						; size = 4
?DrawAxis@@YAXPATMatrixUnion@@PAUVectorStruct@@@Z PROC NEAR ; DrawAxis, COMDAT

; 1105 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 120				; 00000078H
	push	ebx
	push	esi
	push	edi

; 1106 : 	FACING_POLY fp;
; 1107 : 	VEC in, out;
; 1108 : 
; 1109 : // init facing misc
; 1110 : 
; 1111 : 	fp.Tpage = TPAGE_FONT;

	mov	WORD PTR _fp$[ebp+24], 22		; 00000016H

; 1112 : 	fp.Xsize = 8;

	mov	DWORD PTR _fp$[ebp], 1090519040		; 41000000H

; 1113 : 	fp.Ysize = 8;

	mov	DWORD PTR _fp$[ebp+4], 1090519040	; 41000000H

; 1114 : 	fp.Usize = FONT_UWIDTH / 256.0f;

	mov	DWORD PTR _fp$[ebp+16], 1027604480	; 3d400000H

; 1115 : 	fp.Vsize = FONT_VHEIGHT / 256.0f;

	mov	DWORD PTR _fp$[ebp+20], 1031798784	; 3d800000H

; 1116 : 	fp.RGB = 0xffffff;

	mov	DWORD PTR _fp$[ebp+28], 16777215	; 00ffffffH

; 1117 : 
; 1118 : // X
; 1119 : 
; 1120 : 	SetVector(&in, 64, 0, 0);

	mov	DWORD PTR _in$[ebp], 1115684864		; 42800000H
	mov	DWORD PTR _in$[ebp+4], 0
	mov	DWORD PTR _in$[ebp+8], 0

; 1121 : 	RotVector(mat, &in, &out);

	lea	eax, DWORD PTR _out$[ebp]
	push	eax
	lea	ecx, DWORD PTR _in$[ebp]
	push	ecx
	mov	edx, DWORD PTR _mat$[ebp]
	push	edx
	call	?RotVector@@YAXPATMatrixUnion@@PAUVectorStruct@@1@Z ; RotVector
	add	esp, 12					; 0000000cH

; 1122 : 	AddVector(&out, pos, &out);

	mov	eax, DWORD PTR _pos$[ebp]
	fld	DWORD PTR _out$[ebp]
	fadd	DWORD PTR [eax]
	fstp	DWORD PTR _out$[ebp]
	mov	eax, DWORD PTR _pos$[ebp]
	fld	DWORD PTR _out$[ebp+4]
	fadd	DWORD PTR [eax+4]
	fstp	DWORD PTR _out$[ebp+4]
	mov	eax, DWORD PTR _pos$[ebp]
	fld	DWORD PTR _out$[ebp+8]
	fadd	DWORD PTR [eax+8]
	fstp	DWORD PTR _out$[ebp+8]

; 1123 : 
; 1124 : 	fp.U = 221.0f / 256.0f;

	mov	DWORD PTR _fp$[ebp+8], 1063059456	; 3f5d0000H

; 1125 : 	fp.V = 34.0f / 256.0f;

	mov	DWORD PTR _fp$[ebp+12], 1040711680	; 3e080000H

; 1126 : 	DrawFacingPoly(&out, &fp, -1, 0);

	push	0
	push	-1
	lea	eax, DWORD PTR _fp$[ebp]
	push	eax
	lea	ecx, DWORD PTR _out$[ebp]
	push	ecx
	call	?DrawFacingPoly@@YAXPAUVectorStruct@@PAUFACING_POLY@@JM@Z ; DrawFacingPoly
	add	esp, 16					; 00000010H

; 1127 : 
; 1128 : 	DrawLine(pos, &out, 0xff0000, 0xff0000);

	push	16711680				; 00ff0000H
	push	16711680				; 00ff0000H
	lea	eax, DWORD PTR _out$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pos$[ebp]
	push	ecx
	call	?DrawLine@@YAXPAUVectorStruct@@0JJ@Z	; DrawLine
	add	esp, 16					; 00000010H

; 1129 : 
; 1130 : // Y
; 1131 : 
; 1132 : 	SetVector(&in, 0, 64, 0);

	mov	DWORD PTR _in$[ebp], 0
	mov	DWORD PTR _in$[ebp+4], 1115684864	; 42800000H
	mov	DWORD PTR _in$[ebp+8], 0

; 1133 : 	RotVector(mat, &in, &out);

	lea	eax, DWORD PTR _out$[ebp]
	push	eax
	lea	ecx, DWORD PTR _in$[ebp]
	push	ecx
	mov	edx, DWORD PTR _mat$[ebp]
	push	edx
	call	?RotVector@@YAXPATMatrixUnion@@PAUVectorStruct@@1@Z ; RotVector
	add	esp, 12					; 0000000cH

; 1134 : 	AddVector(&out, pos, &out);

	mov	eax, DWORD PTR _pos$[ebp]
	fld	DWORD PTR _out$[ebp]
	fadd	DWORD PTR [eax]
	fstp	DWORD PTR _out$[ebp]
	mov	eax, DWORD PTR _pos$[ebp]
	fld	DWORD PTR _out$[ebp+4]
	fadd	DWORD PTR [eax+4]
	fstp	DWORD PTR _out$[ebp+4]
	mov	eax, DWORD PTR _pos$[ebp]
	fld	DWORD PTR _out$[ebp+8]
	fadd	DWORD PTR [eax+8]
	fstp	DWORD PTR _out$[ebp+8]

; 1135 : 
; 1136 : 	fp.U = 234.0f / 256.0f;

	mov	DWORD PTR _fp$[ebp+8], 1063911424	; 3f6a0000H

; 1137 : 	fp.V = 34.0f / 256.0f;

	mov	DWORD PTR _fp$[ebp+12], 1040711680	; 3e080000H

; 1138 : 	DrawFacingPoly(&out, &fp, -1, 0);

	push	0
	push	-1
	lea	eax, DWORD PTR _fp$[ebp]
	push	eax
	lea	ecx, DWORD PTR _out$[ebp]
	push	ecx
	call	?DrawFacingPoly@@YAXPAUVectorStruct@@PAUFACING_POLY@@JM@Z ; DrawFacingPoly
	add	esp, 16					; 00000010H

; 1139 : 
; 1140 : 	DrawLine(pos, &out, 0x00ff00, 0x00ff00);

	push	65280					; 0000ff00H
	push	65280					; 0000ff00H
	lea	eax, DWORD PTR _out$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pos$[ebp]
	push	ecx
	call	?DrawLine@@YAXPAUVectorStruct@@0JJ@Z	; DrawLine
	add	esp, 16					; 00000010H

; 1141 : 
; 1142 : // Z
; 1143 : 
; 1144 : 	SetVector(&in, 0, 0, 64);

	mov	DWORD PTR _in$[ebp], 0
	mov	DWORD PTR _in$[ebp+4], 0
	mov	DWORD PTR _in$[ebp+8], 1115684864	; 42800000H

; 1145 : 	RotVector(mat, &in, &out);

	lea	eax, DWORD PTR _out$[ebp]
	push	eax
	lea	ecx, DWORD PTR _in$[ebp]
	push	ecx
	mov	edx, DWORD PTR _mat$[ebp]
	push	edx
	call	?RotVector@@YAXPATMatrixUnion@@PAUVectorStruct@@1@Z ; RotVector
	add	esp, 12					; 0000000cH

; 1146 : 	AddVector(&out, pos, &out);

	mov	eax, DWORD PTR _pos$[ebp]
	fld	DWORD PTR _out$[ebp]
	fadd	DWORD PTR [eax]
	fstp	DWORD PTR _out$[ebp]
	mov	eax, DWORD PTR _pos$[ebp]
	fld	DWORD PTR _out$[ebp+4]
	fadd	DWORD PTR [eax+4]
	fstp	DWORD PTR _out$[ebp+4]
	mov	eax, DWORD PTR _pos$[ebp]
	fld	DWORD PTR _out$[ebp+8]
	fadd	DWORD PTR [eax+8]
	fstp	DWORD PTR _out$[ebp+8]

; 1147 : 
; 1148 : 	fp.U = 0.0f / 256.0f;

	mov	DWORD PTR _fp$[ebp+8], 0

; 1149 : 	fp.V = 51.0f / 256.0f;

	mov	DWORD PTR _fp$[ebp+12], 1045168128	; 3e4c0000H

; 1150 : 	DrawFacingPoly(&out, &fp, -1, 0);

	push	0
	push	-1
	lea	eax, DWORD PTR _fp$[ebp]
	push	eax
	lea	ecx, DWORD PTR _out$[ebp]
	push	ecx
	call	?DrawFacingPoly@@YAXPAUVectorStruct@@PAUFACING_POLY@@JM@Z ; DrawFacingPoly
	add	esp, 16					; 00000010H

; 1151 : 
; 1152 : 	DrawLine(pos, &out, 0x0000ff, 0x0000ff);

	push	255					; 000000ffH
	push	255					; 000000ffH
	lea	eax, DWORD PTR _out$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pos$[ebp]
	push	ecx
	call	?DrawLine@@YAXPAUVectorStruct@@0JJ@Z	; DrawLine
	add	esp, 16					; 00000010H

; 1153 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?DrawAxis@@YAXPATMatrixUnion@@PAUVectorStruct@@@Z ENDP	; DrawAxis
_TEXT	ENDS
PUBLIC	?DumpImage@@YAXDMMMMMMMMK@Z			; DumpImage
EXTRN	?ScreenLeftClip@@3MA:DWORD			; ScreenLeftClip
EXTRN	?ScreenTopClip@@3MA:DWORD			; ScreenTopClip
; Function compile flags: /Odt /ZI
;	COMDAT ?DumpImage@@YAXDMMMMMMMMK@Z
_TEXT	SEGMENT
_ysize$ = -20						; size = 4
_xsize$ = -16						; size = 4
_ystart$ = -12						; size = 4
_xstart$ = -8						; size = 4
_i$ = -4						; size = 4
_handle$ = 8						; size = 1
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_w$ = 20						; size = 4
_h$ = 24						; size = 4
_u$ = 28						; size = 4
_v$ = 32						; size = 4
_tw$ = 36						; size = 4
_th$ = 40						; size = 4
_col$ = 44						; size = 4
?DumpImage@@YAXDMMMMMMMMK@Z PROC NEAR			; DumpImage, COMDAT

; 1160 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi

; 1161 : 	long i;
; 1162 : 	float xstart, ystart, xsize, ysize;
; 1163 : 
; 1164 : // scale
; 1165 : 
; 1166 : 	xstart = x * RenderSettings.GeomScaleX + ScreenLeftClip;

	fld	DWORD PTR _x$[ebp]
	fmul	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+12
	fadd	DWORD PTR ?ScreenLeftClip@@3MA		; ScreenLeftClip
	fstp	DWORD PTR _xstart$[ebp]

; 1167 : 	ystart = y * RenderSettings.GeomScaleY + ScreenTopClip;

	fld	DWORD PTR _y$[ebp]
	fmul	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+16
	fadd	DWORD PTR ?ScreenTopClip@@3MA		; ScreenTopClip
	fstp	DWORD PTR _ystart$[ebp]

; 1168 : 
; 1169 : 	xsize = w * RenderSettings.GeomScaleX;

	fld	DWORD PTR _w$[ebp]
	fmul	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+12
	fstp	DWORD PTR _xsize$[ebp]

; 1170 : 	ysize = h * RenderSettings.GeomScaleY;

	fld	DWORD PTR _h$[ebp]
	fmul	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+16
	fstp	DWORD PTR _ysize$[ebp]

; 1171 : 
; 1172 : // set render states
; 1173 : 
; 1174 : 	SET_TPAGE(handle);

	movsx	eax, WORD PTR ?RenderTP@@3FA		; RenderTP
	movsx	ecx, BYTE PTR _handle$[ebp]
	cmp	eax, ecx
	je	SHORT $L81722
	movsx	ax, BYTE PTR _handle$[ebp]
	mov	WORD PTR ?RenderTP@@3FA, ax		; RenderTP
	movsx	ecx, WORD PTR ?RenderTP@@3FA		; RenderTP
	cmp	ecx, -1
	jne	SHORT $L81723
	push	0
	push	0
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	edx
	call	DWORD PTR [ecx+152]
	mov	eax, DWORD PTR ?TextureStateChange@@3JA	; TextureStateChange
	add	eax, 1
	mov	DWORD PTR ?TextureStateChange@@3JA, eax	; TextureStateChange
	jmp	SHORT $L81722
$L81723:
	movsx	eax, WORD PTR ?RenderTP@@3FA		; RenderTP
	shl	eax, 6
	mov	ecx, DWORD PTR ?TexInfo@@3PAUTEXINFO@@A	; TexInfo
	mov	edx, DWORD PTR [ecx+eax+52]
	push	edx
	push	0
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	edx
	call	DWORD PTR [ecx+152]
	mov	eax, DWORD PTR ?TextureStateChange@@3JA	; TextureStateChange
	add	eax, 1
	mov	DWORD PTR ?TextureStateChange@@3JA, eax	; TextureStateChange
$L81722:

; 1175 : 
; 1176 : // init vert misc
; 1177 : 
; 1178 : 	for (i = 0 ; i < 4 ; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $L81725
$L81726:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$L81725:
	cmp	DWORD PTR _i$[ebp], 4
	jge	SHORT $L81727

; 1179 : 	{
; 1180 : 		DrawVertsTEX1[i].color = col;

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 5
	mov	ecx, DWORD PTR _col$[ebp]
	mov	DWORD PTR ?DrawVertsTEX1@@3PAUVERTEX_TEX1@@A[eax+16], ecx

; 1181 : 		DrawVertsTEX1[i].rhw = 1;

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 5
	mov	DWORD PTR ?DrawVertsTEX1@@3PAUVERTEX_TEX1@@A[eax+12], 1065353216 ; 3f800000H

; 1182 : 	}

	jmp	SHORT $L81726
$L81727:

; 1183 : 
; 1184 : // set screen coors
; 1185 : 
; 1186 : 	DrawVertsTEX1[0].sx = DrawVertsTEX1[3].sx = xstart;

	mov	eax, DWORD PTR _xstart$[ebp]
	mov	DWORD PTR ?DrawVertsTEX1@@3PAUVERTEX_TEX1@@A+96, eax
	mov	ecx, DWORD PTR ?DrawVertsTEX1@@3PAUVERTEX_TEX1@@A+96
	mov	DWORD PTR ?DrawVertsTEX1@@3PAUVERTEX_TEX1@@A, ecx

; 1187 : 	DrawVertsTEX1[1].sx = DrawVertsTEX1[2].sx = xstart + xsize;

	fld	DWORD PTR _xstart$[ebp]
	fadd	DWORD PTR _xsize$[ebp]
	fstp	DWORD PTR ?DrawVertsTEX1@@3PAUVERTEX_TEX1@@A+64
	mov	eax, DWORD PTR ?DrawVertsTEX1@@3PAUVERTEX_TEX1@@A+64
	mov	DWORD PTR ?DrawVertsTEX1@@3PAUVERTEX_TEX1@@A+32, eax

; 1188 : 	DrawVertsTEX1[0].sy = DrawVertsTEX1[1].sy = ystart;

	mov	eax, DWORD PTR _ystart$[ebp]
	mov	DWORD PTR ?DrawVertsTEX1@@3PAUVERTEX_TEX1@@A+36, eax
	mov	ecx, DWORD PTR ?DrawVertsTEX1@@3PAUVERTEX_TEX1@@A+36
	mov	DWORD PTR ?DrawVertsTEX1@@3PAUVERTEX_TEX1@@A+4, ecx

; 1189 : 	DrawVertsTEX1[2].sy = DrawVertsTEX1[3].sy = ystart + ysize;

	fld	DWORD PTR _ystart$[ebp]
	fadd	DWORD PTR _ysize$[ebp]
	fstp	DWORD PTR ?DrawVertsTEX1@@3PAUVERTEX_TEX1@@A+100
	mov	eax, DWORD PTR ?DrawVertsTEX1@@3PAUVERTEX_TEX1@@A+100
	mov	DWORD PTR ?DrawVertsTEX1@@3PAUVERTEX_TEX1@@A+68, eax

; 1190 : 
; 1191 : // set uv's
; 1192 : 
; 1193 : 	DrawVertsTEX1[0].tu = DrawVertsTEX1[3].tu = u;

	mov	eax, DWORD PTR _u$[ebp]
	mov	DWORD PTR ?DrawVertsTEX1@@3PAUVERTEX_TEX1@@A+120, eax
	mov	ecx, DWORD PTR ?DrawVertsTEX1@@3PAUVERTEX_TEX1@@A+120
	mov	DWORD PTR ?DrawVertsTEX1@@3PAUVERTEX_TEX1@@A+24, ecx

; 1194 : 	DrawVertsTEX1[1].tu = DrawVertsTEX1[2].tu = u + tw;

	fld	DWORD PTR _u$[ebp]
	fadd	DWORD PTR _tw$[ebp]
	fstp	DWORD PTR ?DrawVertsTEX1@@3PAUVERTEX_TEX1@@A+88
	mov	eax, DWORD PTR ?DrawVertsTEX1@@3PAUVERTEX_TEX1@@A+88
	mov	DWORD PTR ?DrawVertsTEX1@@3PAUVERTEX_TEX1@@A+56, eax

; 1195 : 	DrawVertsTEX1[0].tv = DrawVertsTEX1[1].tv = v;

	mov	eax, DWORD PTR _v$[ebp]
	mov	DWORD PTR ?DrawVertsTEX1@@3PAUVERTEX_TEX1@@A+60, eax
	mov	ecx, DWORD PTR ?DrawVertsTEX1@@3PAUVERTEX_TEX1@@A+60
	mov	DWORD PTR ?DrawVertsTEX1@@3PAUVERTEX_TEX1@@A+28, ecx

; 1196 : 	DrawVertsTEX1[2].tv = DrawVertsTEX1[3].tv = v + th;

	fld	DWORD PTR _v$[ebp]
	fadd	DWORD PTR _th$[ebp]
	fstp	DWORD PTR ?DrawVertsTEX1@@3PAUVERTEX_TEX1@@A+124
	mov	eax, DWORD PTR ?DrawVertsTEX1@@3PAUVERTEX_TEX1@@A+124
	mov	DWORD PTR ?DrawVertsTEX1@@3PAUVERTEX_TEX1@@A+92, eax

; 1197 : 
; 1198 : // draw
; 1199 : 
; 1200 : 	D3Ddevice->DrawPrimitive(D3DPT_TRIANGLEFAN, FVF_TEX1, DrawVertsTEX1, 4, D3DDP_DONOTUPDATEEXTENTS);

	push	8
	push	4
	push	OFFSET FLAT:?DrawVertsTEX1@@3PAUVERTEX_TEX1@@A ; DrawVertsTEX1
	push	452					; 000001c4H
	push	6
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	edx
	call	DWORD PTR [ecx+112]

; 1201 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?DumpImage@@YAXDMMMMMMMMK@Z ENDP			; DumpImage
_TEXT	ENDS
PUBLIC	__real@41400000
PUBLIC	__real@41800000
PUBLIC	?DrawMousePointer@@YAXK@Z			; DrawMousePointer
EXTRN	?MouseXpos@@3MA:DWORD				; MouseXpos
EXTRN	?MouseYpos@@3MA:DWORD				; MouseYpos
;	COMDAT __real@41400000
CONST	SEGMENT
__real@41400000 DD 041400000r			; 12
CONST	ENDS
;	COMDAT __real@41800000
CONST	SEGMENT
__real@41800000 DD 041800000r			; 16
; Function compile flags: /Odt /ZI
CONST	ENDS
;	COMDAT ?DrawMousePointer@@YAXK@Z
_TEXT	SEGMENT
_tv$ = -28						; size = 4
_tu$ = -24						; size = 4
_ys$ = -20						; size = 4
_xs$ = -16						; size = 4
_y$ = -12						; size = 4
_x$ = -8						; size = 4
_i$ = -1						; size = 1
_color$ = 8						; size = 4
?DrawMousePointer@@YAXK@Z PROC NEAR			; DrawMousePointer, COMDAT

; 1208 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 92					; 0000005cH
	push	ebx
	push	esi
	push	edi

; 1209 : 	char i;
; 1210 : 	float x, y, xs, ys, tu, tv;
; 1211 : 
; 1212 : // init verts
; 1213 : 
; 1214 : 	for (i = 0 ; i < 4 ; i++)

	mov	BYTE PTR _i$[ebp], 0
	jmp	SHORT $L81738
$L81739:
	mov	al, BYTE PTR _i$[ebp]
	add	al, 1
	mov	BYTE PTR _i$[ebp], al
$L81738:
	movsx	eax, BYTE PTR _i$[ebp]
	cmp	eax, 4
	jge	SHORT $L81740

; 1215 : 	{
; 1216 : 		DrawVertsTEX1[i].color = color;

	movsx	eax, BYTE PTR _i$[ebp]
	shl	eax, 5
	mov	ecx, DWORD PTR _color$[ebp]
	mov	DWORD PTR ?DrawVertsTEX1@@3PAUVERTEX_TEX1@@A[eax+16], ecx

; 1217 : 		DrawVertsTEX1[i].rhw = 1;

	movsx	eax, BYTE PTR _i$[ebp]
	shl	eax, 5
	mov	DWORD PTR ?DrawVertsTEX1@@3PAUVERTEX_TEX1@@A[eax+12], 1065353216 ; 3f800000H

; 1218 : 	}

	jmp	SHORT $L81739
$L81740:

; 1219 : 
; 1220 : // set screen coors
; 1221 : 
; 1222 : 	x = MouseXpos * RenderSettings.GeomScaleX + ScreenLeftClip;

	fld	DWORD PTR ?MouseXpos@@3MA		; MouseXpos
	fmul	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+12
	fadd	DWORD PTR ?ScreenLeftClip@@3MA		; ScreenLeftClip
	fstp	DWORD PTR _x$[ebp]

; 1223 : 	y = MouseYpos * RenderSettings.GeomScaleY + ScreenTopClip;

	fld	DWORD PTR ?MouseYpos@@3MA		; MouseYpos
	fmul	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+16
	fadd	DWORD PTR ?ScreenTopClip@@3MA		; ScreenTopClip
	fstp	DWORD PTR _y$[ebp]

; 1224 : 	xs = 12 * RenderSettings.GeomScaleX;

	fld	DWORD PTR __real@41400000
	fmul	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+12
	fstp	DWORD PTR _xs$[ebp]

; 1225 : 	ys = 16 * RenderSettings.GeomScaleY;

	fld	DWORD PTR __real@41800000
	fmul	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+16
	fstp	DWORD PTR _ys$[ebp]

; 1226 : 
; 1227 : 	DrawVertsTEX1[0].sx = x;

	mov	eax, DWORD PTR _x$[ebp]
	mov	DWORD PTR ?DrawVertsTEX1@@3PAUVERTEX_TEX1@@A, eax

; 1228 : 	DrawVertsTEX1[0].sy = y;

	mov	eax, DWORD PTR _y$[ebp]
	mov	DWORD PTR ?DrawVertsTEX1@@3PAUVERTEX_TEX1@@A+4, eax

; 1229 : 
; 1230 : 	DrawVertsTEX1[1].sx = x + xs;

	fld	DWORD PTR _x$[ebp]
	fadd	DWORD PTR _xs$[ebp]
	fstp	DWORD PTR ?DrawVertsTEX1@@3PAUVERTEX_TEX1@@A+32

; 1231 : 	DrawVertsTEX1[1].sy = y;

	mov	eax, DWORD PTR _y$[ebp]
	mov	DWORD PTR ?DrawVertsTEX1@@3PAUVERTEX_TEX1@@A+36, eax

; 1232 : 
; 1233 : 	DrawVertsTEX1[2].sx = x + xs;

	fld	DWORD PTR _x$[ebp]
	fadd	DWORD PTR _xs$[ebp]
	fstp	DWORD PTR ?DrawVertsTEX1@@3PAUVERTEX_TEX1@@A+64

; 1234 : 	DrawVertsTEX1[2].sy = y + ys;

	fld	DWORD PTR _y$[ebp]
	fadd	DWORD PTR _ys$[ebp]
	fstp	DWORD PTR ?DrawVertsTEX1@@3PAUVERTEX_TEX1@@A+68

; 1235 : 
; 1236 : 	DrawVertsTEX1[3].sx = x;

	mov	eax, DWORD PTR _x$[ebp]
	mov	DWORD PTR ?DrawVertsTEX1@@3PAUVERTEX_TEX1@@A+96, eax

; 1237 : 	DrawVertsTEX1[3].sy = y + ys;

	fld	DWORD PTR _y$[ebp]
	fadd	DWORD PTR _ys$[ebp]
	fstp	DWORD PTR ?DrawVertsTEX1@@3PAUVERTEX_TEX1@@A+100

; 1238 : 
; 1239 : // set uv's
; 1240 : 
; 1241 : 	tu = 234.0f;

	mov	DWORD PTR _tu$[ebp], 1131020288		; 436a0000H

; 1242 : 	tv = 68.0f;

	mov	DWORD PTR _tv$[ebp], 1116209152		; 42880000H

; 1243 : 
; 1244 : 	DrawVertsTEX1[0].tu = tu / 256;

	fld	DWORD PTR _tu$[ebp]
	fdiv	DWORD PTR __real@43800000
	fstp	DWORD PTR ?DrawVertsTEX1@@3PAUVERTEX_TEX1@@A+24

; 1245 : 	DrawVertsTEX1[0].tv = tv / 256;

	fld	DWORD PTR _tv$[ebp]
	fdiv	DWORD PTR __real@43800000
	fstp	DWORD PTR ?DrawVertsTEX1@@3PAUVERTEX_TEX1@@A+28

; 1246 : 
; 1247 : 	DrawVertsTEX1[1].tu = (tu + 12) / 256;

	fld	DWORD PTR _tu$[ebp]
	fadd	DWORD PTR __real@41400000
	fdiv	DWORD PTR __real@43800000
	fstp	DWORD PTR ?DrawVertsTEX1@@3PAUVERTEX_TEX1@@A+56

; 1248 : 	DrawVertsTEX1[1].tv = tv / 256;

	fld	DWORD PTR _tv$[ebp]
	fdiv	DWORD PTR __real@43800000
	fstp	DWORD PTR ?DrawVertsTEX1@@3PAUVERTEX_TEX1@@A+60

; 1249 : 
; 1250 : 	DrawVertsTEX1[2].tu = (tu + 12) / 256;

	fld	DWORD PTR _tu$[ebp]
	fadd	DWORD PTR __real@41400000
	fdiv	DWORD PTR __real@43800000
	fstp	DWORD PTR ?DrawVertsTEX1@@3PAUVERTEX_TEX1@@A+88

; 1251 : 	DrawVertsTEX1[2].tv = (tv + 16) / 256;

	fld	DWORD PTR _tv$[ebp]
	fadd	DWORD PTR __real@41800000
	fdiv	DWORD PTR __real@43800000
	fstp	DWORD PTR ?DrawVertsTEX1@@3PAUVERTEX_TEX1@@A+92

; 1252 : 
; 1253 : 	DrawVertsTEX1[3].tu = tu / 256;

	fld	DWORD PTR _tu$[ebp]
	fdiv	DWORD PTR __real@43800000
	fstp	DWORD PTR ?DrawVertsTEX1@@3PAUVERTEX_TEX1@@A+120

; 1254 : 	DrawVertsTEX1[3].tv = (tv + 16) / 256;

	fld	DWORD PTR _tv$[ebp]
	fadd	DWORD PTR __real@41800000
	fdiv	DWORD PTR __real@43800000
	fstp	DWORD PTR ?DrawVertsTEX1@@3PAUVERTEX_TEX1@@A+124

; 1255 : 
; 1256 : // draw
; 1257 : 
; 1258 : 	D3Ddevice->DrawPrimitive(D3DPT_TRIANGLEFAN, FVF_TEX1, DrawVertsTEX1, 4, D3DDP_DONOTUPDATEEXTENTS);

	push	8
	push	4
	push	OFFSET FLAT:?DrawVertsTEX1@@3PAUVERTEX_TEX1@@A ; DrawVertsTEX1
	push	452					; 000001c4H
	push	6
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	edx
	call	DWORD PTR [ecx+112]

; 1259 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?DrawMousePointer@@YAXK@Z ENDP				; DrawMousePointer
_TEXT	ENDS
PUBLIC	?LoadBitmapA@@YAHPADPAPAUHBITMAP__@@@Z		; LoadBitmapA
EXTRN	__imp__LoadImageA@24:NEAR
; Function compile flags: /Odt /ZI
;	COMDAT ?LoadBitmapA@@YAHPADPAPAUHBITMAP__@@@Z
_TEXT	SEGMENT
_bitmap$ = 8						; size = 4
_hbm$ = 12						; size = 4
?LoadBitmapA@@YAHPADPAPAUHBITMAP__@@@Z PROC NEAR	; LoadBitmapA, COMDAT

; 1266 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 1267 : 	*hbm = (HBITMAP)LoadImage(NULL, bitmap, IMAGE_BITMAP, 0, 0, LR_LOADFROMFILE | LR_CREATEDIBSECTION);

	push	8208					; 00002010H
	push	0
	push	0
	push	0
	mov	eax, DWORD PTR _bitmap$[ebp]
	push	eax
	push	0
	call	DWORD PTR __imp__LoadImageA@24
	mov	ecx, DWORD PTR _hbm$[ebp]
	mov	DWORD PTR [ecx], eax

; 1268 : 	return (BOOL)*hbm;

	mov	eax, DWORD PTR _hbm$[ebp]
	mov	eax, DWORD PTR [eax]

; 1269 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?LoadBitmapA@@YAHPADPAPAUHBITMAP__@@@Z ENDP		; LoadBitmapA
_TEXT	ENDS
PUBLIC	?FreeBitmap@@YAHPAUHBITMAP__@@@Z		; FreeBitmap
EXTRN	__imp__DeleteObject@4:NEAR
; Function compile flags: /Odt /ZI
;	COMDAT ?FreeBitmap@@YAHPAUHBITMAP__@@@Z
_TEXT	SEGMENT
_hbm$ = 8						; size = 4
?FreeBitmap@@YAHPAUHBITMAP__@@@Z PROC NEAR		; FreeBitmap, COMDAT

; 1276 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 1277 : 	return (BOOL)DeleteObject(hbm);

	mov	eax, DWORD PTR _hbm$[ebp]
	push	eax
	call	DWORD PTR __imp__DeleteObject@4

; 1278 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?FreeBitmap@@YAHPAUHBITMAP__@@@Z ENDP			; FreeBitmap
_TEXT	ENDS
PUBLIC	?BlitBitmap@@YAHPAUHBITMAP__@@PAPAUIDirectDrawSurface4@@@Z ; BlitBitmap
EXTRN	__imp__DeleteDC@4:NEAR
EXTRN	?ScreenXsize@@3KA:DWORD				; ScreenXsize
EXTRN	?ScreenYsize@@3KA:DWORD				; ScreenYsize
EXTRN	__imp__GetObjectA@12:NEAR
EXTRN	__imp__SelectObject@8:NEAR
EXTRN	__imp__StretchBlt@44:NEAR
EXTRN	__imp__CreateCompatibleDC@4:NEAR
; Function compile flags: /Odt /ZI
;	COMDAT ?BlitBitmap@@YAHPAUHBITMAP__@@PAPAUIDirectDrawSurface4@@@Z
_TEXT	SEGMENT
_dc$ = -36						; size = 4
_dcimage$ = -32						; size = 4
_bm$ = -28						; size = 24
_r$ = -4						; size = 4
_hbm$ = 8						; size = 4
_surface$ = 12						; size = 4
?BlitBitmap@@YAHPAUHBITMAP__@@PAPAUIDirectDrawSurface4@@@Z PROC NEAR ; BlitBitmap, COMDAT

; 1285 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 100				; 00000064H
	push	ebx
	push	esi
	push	edi

; 1286 : 	HRESULT r;
; 1287 : 	BITMAP bm;
; 1288 : 	HDC dcimage, dc;
; 1289 : 
; 1290 : // get bitmap info
; 1291 : 
; 1292 : 	GetObject(hbm, sizeof(bm), &bm);

	lea	eax, DWORD PTR _bm$[ebp]
	push	eax
	push	24					; 00000018H
	mov	ecx, DWORD PTR _hbm$[ebp]
	push	ecx
	call	DWORD PTR __imp__GetObjectA@12

; 1293 : 
; 1294 : // get  dc's
; 1295 : 
; 1296 : 	dcimage = CreateCompatibleDC(NULL);

	push	0
	call	DWORD PTR __imp__CreateCompatibleDC@4
	mov	DWORD PTR _dcimage$[ebp], eax

; 1297 : 	SelectObject(dcimage, hbm);

	mov	eax, DWORD PTR _hbm$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dcimage$[ebp]
	push	ecx
	call	DWORD PTR __imp__SelectObject@8

; 1298 : 	r = (*surface)->GetDC(&dc);

	lea	eax, DWORD PTR _dc$[ebp]
	push	eax
	mov	ecx, DWORD PTR _surface$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _surface$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	push	ecx
	call	DWORD PTR [edx+68]
	mov	DWORD PTR _r$[ebp], eax

; 1299 : 
; 1300 : // blit
; 1301 : 
; 1302 : 	if (r == DD_OK)

	cmp	DWORD PTR _r$[ebp], 0
	jne	SHORT $L81759

; 1303 : 		r = StretchBlt(dc, 0, 0, ScreenXsize, ScreenYsize, dcimage, 0, 0, bm.bmWidth, bm.bmHeight, SRCCOPY);

	push	13369376				; 00cc0020H
	mov	eax, DWORD PTR _bm$[ebp+8]
	push	eax
	mov	ecx, DWORD PTR _bm$[ebp+4]
	push	ecx
	push	0
	push	0
	mov	edx, DWORD PTR _dcimage$[ebp]
	push	edx
	mov	eax, DWORD PTR ?ScreenYsize@@3KA	; ScreenYsize
	push	eax
	mov	ecx, DWORD PTR ?ScreenXsize@@3KA	; ScreenXsize
	push	ecx
	push	0
	push	0
	mov	edx, DWORD PTR _dc$[ebp]
	push	edx
	call	DWORD PTR __imp__StretchBlt@44
	mov	DWORD PTR _r$[ebp], eax
$L81759:

; 1304 : 
; 1305 : // free dc's
; 1306 : 
; 1307 : 	(*surface)->ReleaseDC(dc);

	mov	eax, DWORD PTR _dc$[ebp]
	push	eax
	mov	ecx, DWORD PTR _surface$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _surface$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	push	ecx
	call	DWORD PTR [edx+104]

; 1308 : 	DeleteDC(dcimage);

	mov	eax, DWORD PTR _dcimage$[ebp]
	push	eax
	call	DWORD PTR __imp__DeleteDC@4

; 1309 : 
; 1310 : // return
; 1311 : 
; 1312 : 	return (r == DD_OK);

	xor	eax, eax
	cmp	DWORD PTR _r$[ebp], 0
	sete	al

; 1313 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?BlitBitmap@@YAHPAUHBITMAP__@@PAPAUIDirectDrawSurface4@@@Z ENDP ; BlitBitmap
_TEXT	ENDS
PUBLIC	__real@42fe0000
PUBLIC	?__LINE__Var@?1??DrawCollPoly@@YAXPAUCollPolyStruct@@@Z@4JA ; `DrawCollPoly'::`2'::__LINE__Var
PUBLIC	??_C@_0IJ@HCPPNHNP@c?3?2documents?5and?5settings?2jarhea@ ; `string'
PUBLIC	?DrawCollPoly@@YAXPAUCollPolyStruct@@@Z		; DrawCollPoly
EXTRN	?DownVec@@3UVectorStruct@@A:BYTE		; DownVec
EXTRN	__ftol2:NEAR
EXTRN	?GetCollPolyVertices@@YAHPAUCollPolyStruct@@PAUVectorStruct@@111@Z:NEAR ; GetCollPolyVertices
EXTRN	?DebugAssert@@YAX_NHPAD@Z:NEAR			; DebugAssert
;	COMDAT ??_C@_0IJ@HCPPNHNP@c?3?2documents?5and?5settings?2jarhea@
CONST	SEGMENT
??_C@_0IJ@HCPPNHNP@c?3?2documents?5and?5settings?2jarhea@ DB 'c:\document'
	DB	's and settings\jarhead\desktop\shit to display my love for xb'
	DB	'ox revolt and fuck you borman-ness\revolt source\source\draw.'
	DB	'cpp', 00H					; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??DrawCollPoly@@YAXPAUCollPolyStruct@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??DrawCollPoly@@YAXPAUCollPolyStruct@@@Z@4JA DD 052cH ; `DrawCollPoly'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT __real@42fe0000
CONST	SEGMENT
__real@42fe0000 DD 042fe0000r			; 127
; Function compile flags: /Odt /ZI
CONST	ENDS
;	COMDAT ?DrawCollPoly@@YAXPAUCollPolyStruct@@@Z
_TEXT	SEGMENT
tv78 = -141						; size = 1
_rgb$ = -76						; size = 16
_pos$ = -60						; size = 48
_normDotUp$ = -12					; size = 4
_vertnum$ = -8						; size = 4
_col$ = -4						; size = 4
_poly$ = 8						; size = 4
?DrawCollPoly@@YAXPAUCollPolyStruct@@@Z PROC NEAR	; DrawCollPoly, COMDAT

; 1324 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 144				; 00000090H
	push	ebx
	push	esi
	push	edi

; 1325 : 	long col, vertnum;
; 1326 : 	REAL normDotUp;
; 1327 : 	VEC pos[4];
; 1328 : 	long rgb[4];
; 1329 : 
; 1330 : 	// Get the polygon vertex positions and number of vertices
; 1331 : 	vertnum = GetCollPolyVertices(poly, &pos[0], &pos[1], &pos[2], &pos[3]);

	lea	eax, DWORD PTR _pos$[ebp+36]
	push	eax
	lea	ecx, DWORD PTR _pos$[ebp+24]
	push	ecx
	lea	edx, DWORD PTR _pos$[ebp+12]
	push	edx
	lea	eax, DWORD PTR _pos$[ebp]
	push	eax
	mov	ecx, DWORD PTR _poly$[ebp]
	push	ecx
	call	?GetCollPolyVertices@@YAHPAUCollPolyStruct@@PAUVectorStruct@@111@Z ; GetCollPolyVertices
	add	esp, 20					; 00000014H
	mov	DWORD PTR _vertnum$[ebp], eax

; 1332 : 	Assert(vertnum >= 3 && vertnum <= 4);

	cmp	DWORD PTR _vertnum$[ebp], 3
	jl	SHORT $L82398
	cmp	DWORD PTR _vertnum$[ebp], 4
	jg	SHORT $L82398
	mov	BYTE PTR tv78[ebp], 1
	jmp	SHORT $L82399
$L82398:
	mov	BYTE PTR tv78[ebp], 0
$L82399:
	push	OFFSET FLAT:??_C@_0IJ@HCPPNHNP@c?3?2documents?5and?5settings?2jarhea@
	mov	eax, DWORD PTR ?__LINE__Var@?1??DrawCollPoly@@YAXPAUCollPolyStruct@@@Z@4JA
	add	eax, 8
	push	eax
	mov	cl, BYTE PTR tv78[ebp]
	push	ecx
	call	?DebugAssert@@YAX_NHPAD@Z		; DebugAssert
	add	esp, 12					; 0000000cH

; 1333 : 
; 1334 : 	// calc rgb
; 1335 : 	normDotUp = ONE - VecDotVec(&DownVec, PlaneNormal(&poly->Plane));

	mov	eax, DWORD PTR _poly$[ebp]
	fld	DWORD PTR ?DownVec@@3UVectorStruct@@A
	fmul	DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _poly$[ebp]
	fld	DWORD PTR ?DownVec@@3UVectorStruct@@A+4
	fmul	DWORD PTR [ecx+12]
	faddp	ST(1), ST(0)
	mov	edx, DWORD PTR _poly$[ebp]
	fld	DWORD PTR ?DownVec@@3UVectorStruct@@A+8
	fmul	DWORD PTR [edx+16]
	faddp	ST(1), ST(0)
	fsubr	DWORD PTR __real@3f800000
	fstp	DWORD PTR _normDotUp$[ebp]

; 1336 : 	col = (long)(127 * normDotUp);

	fld	DWORD PTR __real@42fe0000
	fmul	DWORD PTR _normDotUp$[ebp]
	call	__ftol2
	mov	DWORD PTR _col$[ebp], eax

; 1337 : 	if (poly->Type & NON_PLANAR) {

	mov	eax, DWORD PTR _poly$[ebp]
	mov	ecx, DWORD PTR [eax]
	and	ecx, 16					; 00000010H
	je	SHORT $L81775

; 1338 : 	//	col |= col << 24;
; 1339 : 	} else {

	jmp	SHORT $L81776
$L81775:

; 1340 : 		col |= col << 8 | col << 16 | col << 24;

	mov	eax, DWORD PTR _col$[ebp]
	shl	eax, 8
	mov	ecx, DWORD PTR _col$[ebp]
	shl	ecx, 16					; 00000010H
	or	eax, ecx
	mov	edx, DWORD PTR _col$[ebp]
	shl	edx, 24					; 00000018H
	or	eax, edx
	or	eax, DWORD PTR _col$[ebp]
	mov	DWORD PTR _col$[ebp], eax
$L81776:

; 1341 : 	}
; 1342 : //	rgb[0] = rgb[1] = rgb[2] = rgb[3] = col;
; 1343 : 
; 1344 : 	rgb[0] = 0xff0000;

	mov	DWORD PTR _rgb$[ebp], 16711680		; 00ff0000H

; 1345 : 	rgb[1] = 0x00ff00;

	mov	DWORD PTR _rgb$[ebp+4], 65280		; 0000ff00H

; 1346 : 	rgb[2] = 0x0000ff;

	mov	DWORD PTR _rgb$[ebp+8], 255		; 000000ffH

; 1347 : 	rgb[3] = 0xffff00;

	mov	DWORD PTR _rgb$[ebp+12], 16776960	; 00ffff00H

; 1348 : 
; 1349 : 	// draw
; 1350 : 	DrawNearClipPolyTEX0(pos, rgb, vertnum);

	mov	eax, DWORD PTR _vertnum$[ebp]
	push	eax
	lea	ecx, DWORD PTR _rgb$[ebp]
	push	ecx
	lea	edx, DWORD PTR _pos$[ebp]
	push	edx
	call	?DrawNearClipPolyTEX0@@YAXPAUVectorStruct@@PAJJ@Z ; DrawNearClipPolyTEX0
	add	esp, 12					; 0000000cH

; 1351 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?DrawCollPoly@@YAXPAUCollPolyStruct@@@Z ENDP		; DrawCollPoly
_TEXT	ENDS
PUBLIC	?DrawBoundingBox@@YAXMMMMMMJJJJJJ@Z		; DrawBoundingBox
; Function compile flags: /Odt /ZI
;	COMDAT ?DrawBoundingBox@@YAXMMMMMMJJJJJJ@Z
_TEXT	SEGMENT
_col$ = -160						; size = 16
_pos$ = -144						; size = 48
_v7$ = -96						; size = 12
_v6$ = -84						; size = 12
_v5$ = -72						; size = 12
_v4$ = -60						; size = 12
_v3$ = -48						; size = 12
_v2$ = -36						; size = 12
_v1$ = -24						; size = 12
_v0$ = -12						; size = 12
_xmin$ = 8						; size = 4
_xmax$ = 12						; size = 4
_ymin$ = 16						; size = 4
_ymax$ = 20						; size = 4
_zmin$ = 24						; size = 4
_zmax$ = 28						; size = 4
_c0$ = 32						; size = 4
_c1$ = 36						; size = 4
_c2$ = 40						; size = 4
_c3$ = 44						; size = 4
_c4$ = 48						; size = 4
_c5$ = 52						; size = 4
?DrawBoundingBox@@YAXMMMMMMJJJJJJ@Z PROC NEAR		; DrawBoundingBox, COMDAT

; 1358 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 224				; 000000e0H
	push	ebx
	push	esi
	push	edi

; 1359 : 	VEC v0;
; 1360 : 	VEC v1;
; 1361 : 	VEC v2;
; 1362 : 	VEC v3;
; 1363 : 	VEC v4;
; 1364 : 	VEC v5;
; 1365 : 	VEC v6;
; 1366 : 	VEC v7;
; 1367 : 	VEC pos[4];
; 1368 : 	long col[4];
; 1369 : 
; 1370 : // no textures
; 1371 : 
; 1372 : 	SET_TPAGE(-1);

	movsx	eax, WORD PTR ?RenderTP@@3FA		; RenderTP
	cmp	eax, -1
	je	SHORT $L81801
	mov	WORD PTR ?RenderTP@@3FA, -1		; RenderTP
	movsx	eax, WORD PTR ?RenderTP@@3FA		; RenderTP
	cmp	eax, -1
	jne	SHORT $L81802
	push	0
	push	0
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	edx
	call	DWORD PTR [ecx+152]
	mov	eax, DWORD PTR ?TextureStateChange@@3JA	; TextureStateChange
	add	eax, 1
	mov	DWORD PTR ?TextureStateChange@@3JA, eax	; TextureStateChange
	jmp	SHORT $L81801
$L81802:
	movsx	eax, WORD PTR ?RenderTP@@3FA		; RenderTP
	shl	eax, 6
	mov	ecx, DWORD PTR ?TexInfo@@3PAUTEXINFO@@A	; TexInfo
	mov	edx, DWORD PTR [ecx+eax+52]
	push	edx
	push	0
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	edx
	call	DWORD PTR [ecx+152]
	mov	eax, DWORD PTR ?TextureStateChange@@3JA	; TextureStateChange
	add	eax, 1
	mov	DWORD PTR ?TextureStateChange@@3JA, eax	; TextureStateChange
$L81801:

; 1373 : 
; 1374 : // set 8 world points
; 1375 : 
; 1376 : 	SetVector(&v0, xmin, ymin, zmin);

	mov	eax, DWORD PTR _xmin$[ebp]
	mov	DWORD PTR _v0$[ebp], eax
	mov	eax, DWORD PTR _ymin$[ebp]
	mov	DWORD PTR _v0$[ebp+4], eax
	mov	eax, DWORD PTR _zmin$[ebp]
	mov	DWORD PTR _v0$[ebp+8], eax

; 1377 : 	SetVector(&v1, xmax, ymin, zmin);

	mov	eax, DWORD PTR _xmax$[ebp]
	mov	DWORD PTR _v1$[ebp], eax
	mov	eax, DWORD PTR _ymin$[ebp]
	mov	DWORD PTR _v1$[ebp+4], eax
	mov	eax, DWORD PTR _zmin$[ebp]
	mov	DWORD PTR _v1$[ebp+8], eax

; 1378 : 	SetVector(&v2, xmin, ymax, zmin);

	mov	eax, DWORD PTR _xmin$[ebp]
	mov	DWORD PTR _v2$[ebp], eax
	mov	eax, DWORD PTR _ymax$[ebp]
	mov	DWORD PTR _v2$[ebp+4], eax
	mov	eax, DWORD PTR _zmin$[ebp]
	mov	DWORD PTR _v2$[ebp+8], eax

; 1379 : 	SetVector(&v3, xmax, ymax, zmin);

	mov	eax, DWORD PTR _xmax$[ebp]
	mov	DWORD PTR _v3$[ebp], eax
	mov	eax, DWORD PTR _ymax$[ebp]
	mov	DWORD PTR _v3$[ebp+4], eax
	mov	eax, DWORD PTR _zmin$[ebp]
	mov	DWORD PTR _v3$[ebp+8], eax

; 1380 : 	SetVector(&v4, xmin, ymin, zmax);

	mov	eax, DWORD PTR _xmin$[ebp]
	mov	DWORD PTR _v4$[ebp], eax
	mov	eax, DWORD PTR _ymin$[ebp]
	mov	DWORD PTR _v4$[ebp+4], eax
	mov	eax, DWORD PTR _zmax$[ebp]
	mov	DWORD PTR _v4$[ebp+8], eax

; 1381 : 	SetVector(&v5, xmax, ymin, zmax);

	mov	eax, DWORD PTR _xmax$[ebp]
	mov	DWORD PTR _v5$[ebp], eax
	mov	eax, DWORD PTR _ymin$[ebp]
	mov	DWORD PTR _v5$[ebp+4], eax
	mov	eax, DWORD PTR _zmax$[ebp]
	mov	DWORD PTR _v5$[ebp+8], eax

; 1382 : 	SetVector(&v6, xmin, ymax, zmax);

	mov	eax, DWORD PTR _xmin$[ebp]
	mov	DWORD PTR _v6$[ebp], eax
	mov	eax, DWORD PTR _ymax$[ebp]
	mov	DWORD PTR _v6$[ebp+4], eax
	mov	eax, DWORD PTR _zmax$[ebp]
	mov	DWORD PTR _v6$[ebp+8], eax

; 1383 : 	SetVector(&v7, xmax, ymax, zmax);

	mov	eax, DWORD PTR _xmax$[ebp]
	mov	DWORD PTR _v7$[ebp], eax
	mov	eax, DWORD PTR _ymax$[ebp]
	mov	DWORD PTR _v7$[ebp+4], eax
	mov	eax, DWORD PTR _zmax$[ebp]
	mov	DWORD PTR _v7$[ebp+8], eax

; 1384 : 
; 1385 : // draw xmin
; 1386 : 
; 1387 : 	pos[0] = v4;

	mov	eax, DWORD PTR _v4$[ebp]
	mov	DWORD PTR _pos$[ebp], eax
	mov	ecx, DWORD PTR _v4$[ebp+4]
	mov	DWORD PTR _pos$[ebp+4], ecx
	mov	edx, DWORD PTR _v4$[ebp+8]
	mov	DWORD PTR _pos$[ebp+8], edx

; 1388 : 	pos[1] = v0;

	mov	eax, DWORD PTR _v0$[ebp]
	mov	DWORD PTR _pos$[ebp+12], eax
	mov	ecx, DWORD PTR _v0$[ebp+4]
	mov	DWORD PTR _pos$[ebp+16], ecx
	mov	edx, DWORD PTR _v0$[ebp+8]
	mov	DWORD PTR _pos$[ebp+20], edx

; 1389 : 	pos[2] = v2;

	mov	eax, DWORD PTR _v2$[ebp]
	mov	DWORD PTR _pos$[ebp+24], eax
	mov	ecx, DWORD PTR _v2$[ebp+4]
	mov	DWORD PTR _pos$[ebp+28], ecx
	mov	edx, DWORD PTR _v2$[ebp+8]
	mov	DWORD PTR _pos$[ebp+32], edx

; 1390 : 	pos[3] = v6;

	mov	eax, DWORD PTR _v6$[ebp]
	mov	DWORD PTR _pos$[ebp+36], eax
	mov	ecx, DWORD PTR _v6$[ebp+4]
	mov	DWORD PTR _pos$[ebp+40], ecx
	mov	edx, DWORD PTR _v6$[ebp+8]
	mov	DWORD PTR _pos$[ebp+44], edx

; 1391 : 	col[0] = col[1] = col[2] = col[3] = c0;

	mov	eax, DWORD PTR _c0$[ebp]
	mov	DWORD PTR _col$[ebp+12], eax
	mov	ecx, DWORD PTR _col$[ebp+12]
	mov	DWORD PTR _col$[ebp+8], ecx
	mov	edx, DWORD PTR _col$[ebp+8]
	mov	DWORD PTR _col$[ebp+4], edx
	mov	eax, DWORD PTR _col$[ebp+4]
	mov	DWORD PTR _col$[ebp], eax

; 1392 : 	DrawNearClipPolyTEX0(pos, col, 4);

	push	4
	lea	eax, DWORD PTR _col$[ebp]
	push	eax
	lea	ecx, DWORD PTR _pos$[ebp]
	push	ecx
	call	?DrawNearClipPolyTEX0@@YAXPAUVectorStruct@@PAJJ@Z ; DrawNearClipPolyTEX0
	add	esp, 12					; 0000000cH

; 1393 : 
; 1394 : // draw xmax
; 1395 : 
; 1396 : 	pos[0] = v1;

	mov	eax, DWORD PTR _v1$[ebp]
	mov	DWORD PTR _pos$[ebp], eax
	mov	ecx, DWORD PTR _v1$[ebp+4]
	mov	DWORD PTR _pos$[ebp+4], ecx
	mov	edx, DWORD PTR _v1$[ebp+8]
	mov	DWORD PTR _pos$[ebp+8], edx

; 1397 : 	pos[1] = v5;

	mov	eax, DWORD PTR _v5$[ebp]
	mov	DWORD PTR _pos$[ebp+12], eax
	mov	ecx, DWORD PTR _v5$[ebp+4]
	mov	DWORD PTR _pos$[ebp+16], ecx
	mov	edx, DWORD PTR _v5$[ebp+8]
	mov	DWORD PTR _pos$[ebp+20], edx

; 1398 : 	pos[2] = v7;

	mov	eax, DWORD PTR _v7$[ebp]
	mov	DWORD PTR _pos$[ebp+24], eax
	mov	ecx, DWORD PTR _v7$[ebp+4]
	mov	DWORD PTR _pos$[ebp+28], ecx
	mov	edx, DWORD PTR _v7$[ebp+8]
	mov	DWORD PTR _pos$[ebp+32], edx

; 1399 : 	pos[3] = v3;

	mov	eax, DWORD PTR _v3$[ebp]
	mov	DWORD PTR _pos$[ebp+36], eax
	mov	ecx, DWORD PTR _v3$[ebp+4]
	mov	DWORD PTR _pos$[ebp+40], ecx
	mov	edx, DWORD PTR _v3$[ebp+8]
	mov	DWORD PTR _pos$[ebp+44], edx

; 1400 : 	col[0] = col[1] = col[2] = col[3] = c1;

	mov	eax, DWORD PTR _c1$[ebp]
	mov	DWORD PTR _col$[ebp+12], eax
	mov	ecx, DWORD PTR _col$[ebp+12]
	mov	DWORD PTR _col$[ebp+8], ecx
	mov	edx, DWORD PTR _col$[ebp+8]
	mov	DWORD PTR _col$[ebp+4], edx
	mov	eax, DWORD PTR _col$[ebp+4]
	mov	DWORD PTR _col$[ebp], eax

; 1401 : 	DrawNearClipPolyTEX0(pos, col, 4);

	push	4
	lea	eax, DWORD PTR _col$[ebp]
	push	eax
	lea	ecx, DWORD PTR _pos$[ebp]
	push	ecx
	call	?DrawNearClipPolyTEX0@@YAXPAUVectorStruct@@PAJJ@Z ; DrawNearClipPolyTEX0
	add	esp, 12					; 0000000cH

; 1402 : 
; 1403 : // draw ymin
; 1404 : 
; 1405 : 	pos[0] = v4;

	mov	eax, DWORD PTR _v4$[ebp]
	mov	DWORD PTR _pos$[ebp], eax
	mov	ecx, DWORD PTR _v4$[ebp+4]
	mov	DWORD PTR _pos$[ebp+4], ecx
	mov	edx, DWORD PTR _v4$[ebp+8]
	mov	DWORD PTR _pos$[ebp+8], edx

; 1406 : 	pos[1] = v5;

	mov	eax, DWORD PTR _v5$[ebp]
	mov	DWORD PTR _pos$[ebp+12], eax
	mov	ecx, DWORD PTR _v5$[ebp+4]
	mov	DWORD PTR _pos$[ebp+16], ecx
	mov	edx, DWORD PTR _v5$[ebp+8]
	mov	DWORD PTR _pos$[ebp+20], edx

; 1407 : 	pos[2] = v1;

	mov	eax, DWORD PTR _v1$[ebp]
	mov	DWORD PTR _pos$[ebp+24], eax
	mov	ecx, DWORD PTR _v1$[ebp+4]
	mov	DWORD PTR _pos$[ebp+28], ecx
	mov	edx, DWORD PTR _v1$[ebp+8]
	mov	DWORD PTR _pos$[ebp+32], edx

; 1408 : 	pos[3] = v0;

	mov	eax, DWORD PTR _v0$[ebp]
	mov	DWORD PTR _pos$[ebp+36], eax
	mov	ecx, DWORD PTR _v0$[ebp+4]
	mov	DWORD PTR _pos$[ebp+40], ecx
	mov	edx, DWORD PTR _v0$[ebp+8]
	mov	DWORD PTR _pos$[ebp+44], edx

; 1409 : 	col[0] = col[1] = col[2] = col[3] = c2;

	mov	eax, DWORD PTR _c2$[ebp]
	mov	DWORD PTR _col$[ebp+12], eax
	mov	ecx, DWORD PTR _col$[ebp+12]
	mov	DWORD PTR _col$[ebp+8], ecx
	mov	edx, DWORD PTR _col$[ebp+8]
	mov	DWORD PTR _col$[ebp+4], edx
	mov	eax, DWORD PTR _col$[ebp+4]
	mov	DWORD PTR _col$[ebp], eax

; 1410 : 	DrawNearClipPolyTEX0(pos, col, 4);

	push	4
	lea	eax, DWORD PTR _col$[ebp]
	push	eax
	lea	ecx, DWORD PTR _pos$[ebp]
	push	ecx
	call	?DrawNearClipPolyTEX0@@YAXPAUVectorStruct@@PAJJ@Z ; DrawNearClipPolyTEX0
	add	esp, 12					; 0000000cH

; 1411 : 
; 1412 : // draw ymax
; 1413 : 
; 1414 : 	pos[0] = v2;

	mov	eax, DWORD PTR _v2$[ebp]
	mov	DWORD PTR _pos$[ebp], eax
	mov	ecx, DWORD PTR _v2$[ebp+4]
	mov	DWORD PTR _pos$[ebp+4], ecx
	mov	edx, DWORD PTR _v2$[ebp+8]
	mov	DWORD PTR _pos$[ebp+8], edx

; 1415 : 	pos[1] = v3;

	mov	eax, DWORD PTR _v3$[ebp]
	mov	DWORD PTR _pos$[ebp+12], eax
	mov	ecx, DWORD PTR _v3$[ebp+4]
	mov	DWORD PTR _pos$[ebp+16], ecx
	mov	edx, DWORD PTR _v3$[ebp+8]
	mov	DWORD PTR _pos$[ebp+20], edx

; 1416 : 	pos[2] = v7;

	mov	eax, DWORD PTR _v7$[ebp]
	mov	DWORD PTR _pos$[ebp+24], eax
	mov	ecx, DWORD PTR _v7$[ebp+4]
	mov	DWORD PTR _pos$[ebp+28], ecx
	mov	edx, DWORD PTR _v7$[ebp+8]
	mov	DWORD PTR _pos$[ebp+32], edx

; 1417 : 	pos[3] = v6;

	mov	eax, DWORD PTR _v6$[ebp]
	mov	DWORD PTR _pos$[ebp+36], eax
	mov	ecx, DWORD PTR _v6$[ebp+4]
	mov	DWORD PTR _pos$[ebp+40], ecx
	mov	edx, DWORD PTR _v6$[ebp+8]
	mov	DWORD PTR _pos$[ebp+44], edx

; 1418 : 	col[0] = col[1] = col[2] = col[3] = c3;

	mov	eax, DWORD PTR _c3$[ebp]
	mov	DWORD PTR _col$[ebp+12], eax
	mov	ecx, DWORD PTR _col$[ebp+12]
	mov	DWORD PTR _col$[ebp+8], ecx
	mov	edx, DWORD PTR _col$[ebp+8]
	mov	DWORD PTR _col$[ebp+4], edx
	mov	eax, DWORD PTR _col$[ebp+4]
	mov	DWORD PTR _col$[ebp], eax

; 1419 : 	DrawNearClipPolyTEX0(pos, col, 4);

	push	4
	lea	eax, DWORD PTR _col$[ebp]
	push	eax
	lea	ecx, DWORD PTR _pos$[ebp]
	push	ecx
	call	?DrawNearClipPolyTEX0@@YAXPAUVectorStruct@@PAJJ@Z ; DrawNearClipPolyTEX0
	add	esp, 12					; 0000000cH

; 1420 : 
; 1421 : // draw zmin
; 1422 : 
; 1423 : 	pos[0] = v0;

	mov	eax, DWORD PTR _v0$[ebp]
	mov	DWORD PTR _pos$[ebp], eax
	mov	ecx, DWORD PTR _v0$[ebp+4]
	mov	DWORD PTR _pos$[ebp+4], ecx
	mov	edx, DWORD PTR _v0$[ebp+8]
	mov	DWORD PTR _pos$[ebp+8], edx

; 1424 : 	pos[1] = v1;

	mov	eax, DWORD PTR _v1$[ebp]
	mov	DWORD PTR _pos$[ebp+12], eax
	mov	ecx, DWORD PTR _v1$[ebp+4]
	mov	DWORD PTR _pos$[ebp+16], ecx
	mov	edx, DWORD PTR _v1$[ebp+8]
	mov	DWORD PTR _pos$[ebp+20], edx

; 1425 : 	pos[2] = v3;

	mov	eax, DWORD PTR _v3$[ebp]
	mov	DWORD PTR _pos$[ebp+24], eax
	mov	ecx, DWORD PTR _v3$[ebp+4]
	mov	DWORD PTR _pos$[ebp+28], ecx
	mov	edx, DWORD PTR _v3$[ebp+8]
	mov	DWORD PTR _pos$[ebp+32], edx

; 1426 : 	pos[3] = v2;

	mov	eax, DWORD PTR _v2$[ebp]
	mov	DWORD PTR _pos$[ebp+36], eax
	mov	ecx, DWORD PTR _v2$[ebp+4]
	mov	DWORD PTR _pos$[ebp+40], ecx
	mov	edx, DWORD PTR _v2$[ebp+8]
	mov	DWORD PTR _pos$[ebp+44], edx

; 1427 : 	col[0] = col[1] = col[2] = col[3] = c4;

	mov	eax, DWORD PTR _c4$[ebp]
	mov	DWORD PTR _col$[ebp+12], eax
	mov	ecx, DWORD PTR _col$[ebp+12]
	mov	DWORD PTR _col$[ebp+8], ecx
	mov	edx, DWORD PTR _col$[ebp+8]
	mov	DWORD PTR _col$[ebp+4], edx
	mov	eax, DWORD PTR _col$[ebp+4]
	mov	DWORD PTR _col$[ebp], eax

; 1428 : 	DrawNearClipPolyTEX0(pos, col, 4);

	push	4
	lea	eax, DWORD PTR _col$[ebp]
	push	eax
	lea	ecx, DWORD PTR _pos$[ebp]
	push	ecx
	call	?DrawNearClipPolyTEX0@@YAXPAUVectorStruct@@PAJJ@Z ; DrawNearClipPolyTEX0
	add	esp, 12					; 0000000cH

; 1429 : 
; 1430 : // draw zmax
; 1431 : 
; 1432 : 	pos[0] = v4;

	mov	eax, DWORD PTR _v4$[ebp]
	mov	DWORD PTR _pos$[ebp], eax
	mov	ecx, DWORD PTR _v4$[ebp+4]
	mov	DWORD PTR _pos$[ebp+4], ecx
	mov	edx, DWORD PTR _v4$[ebp+8]
	mov	DWORD PTR _pos$[ebp+8], edx

; 1433 : 	pos[1] = v5;

	mov	eax, DWORD PTR _v5$[ebp]
	mov	DWORD PTR _pos$[ebp+12], eax
	mov	ecx, DWORD PTR _v5$[ebp+4]
	mov	DWORD PTR _pos$[ebp+16], ecx
	mov	edx, DWORD PTR _v5$[ebp+8]
	mov	DWORD PTR _pos$[ebp+20], edx

; 1434 : 	pos[2] = v7;

	mov	eax, DWORD PTR _v7$[ebp]
	mov	DWORD PTR _pos$[ebp+24], eax
	mov	ecx, DWORD PTR _v7$[ebp+4]
	mov	DWORD PTR _pos$[ebp+28], ecx
	mov	edx, DWORD PTR _v7$[ebp+8]
	mov	DWORD PTR _pos$[ebp+32], edx

; 1435 : 	pos[3] = v6;

	mov	eax, DWORD PTR _v6$[ebp]
	mov	DWORD PTR _pos$[ebp+36], eax
	mov	ecx, DWORD PTR _v6$[ebp+4]
	mov	DWORD PTR _pos$[ebp+40], ecx
	mov	edx, DWORD PTR _v6$[ebp+8]
	mov	DWORD PTR _pos$[ebp+44], edx

; 1436 : 	col[0] = col[1] = col[2] = col[3] = c5;

	mov	eax, DWORD PTR _c5$[ebp]
	mov	DWORD PTR _col$[ebp+12], eax
	mov	ecx, DWORD PTR _col$[ebp+12]
	mov	DWORD PTR _col$[ebp+8], ecx
	mov	edx, DWORD PTR _col$[ebp+8]
	mov	DWORD PTR _col$[ebp+4], edx
	mov	eax, DWORD PTR _col$[ebp+4]
	mov	DWORD PTR _col$[ebp], eax

; 1437 : 	DrawNearClipPolyTEX0(pos, col, 4);

	push	4
	lea	eax, DWORD PTR _col$[ebp]
	push	eax
	lea	ecx, DWORD PTR _pos$[ebp]
	push	ecx
	call	?DrawNearClipPolyTEX0@@YAXPAUVectorStruct@@PAJJ@Z ; DrawNearClipPolyTEX0
	add	esp, 12					; 0000000cH

; 1438 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?DrawBoundingBox@@YAXMMMMMMJJJJJJ@Z ENDP		; DrawBoundingBox
_TEXT	ENDS
PUBLIC	__real@42800000
PUBLIC	?DrawCubeNormals@@YAXPAUWORLD_MODEL@@@Z		; DrawCubeNormals
;	COMDAT __real@42800000
CONST	SEGMENT
__real@42800000 DD 042800000r			; 64
; Function compile flags: /Odt /ZI
CONST	ENDS
;	COMDAT ?DrawCubeNormals@@YAXPAUWORLD_MODEL@@@Z
_TEXT	SEGMENT
_point2$ = -32						; size = 12
_point1$ = -20						; size = 12
_v$ = -8						; size = 4
_i$ = -4						; size = 4
_m$ = 8							; size = 4
?DrawCubeNormals@@YAXPAUWORLD_MODEL@@@Z PROC NEAR	; DrawCubeNormals, COMDAT

; 1445 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 96					; 00000060H
	push	ebx
	push	esi
	push	edi

; 1446 : 	long i;
; 1447 : 	WORLD_VERTEX *v;
; 1448 : 	VEC point1, point2;
; 1449 : 
; 1450 : // loop thru polys
; 1451 : 
; 1452 : 	v = m->VertPtr;

	mov	eax, DWORD PTR _m$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	DWORD PTR _v$[ebp], ecx

; 1453 : 	for (i = 0 ; i < m->VertNum + m->PolyNum ; i++, v++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $L81811
$L81812:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	mov	ecx, DWORD PTR _v$[ebp]
	add	ecx, 92					; 0000005cH
	mov	DWORD PTR _v$[ebp], ecx
$L81811:
	mov	eax, DWORD PTR _m$[ebp]
	movsx	ecx, WORD PTR [eax+6]
	mov	edx, DWORD PTR _m$[ebp]
	movsx	eax, WORD PTR [edx+4]
	add	ecx, eax
	cmp	DWORD PTR _i$[ebp], ecx
	jge	SHORT $L81806

; 1454 : 	{
; 1455 : 		point1.v[X] = v->x;

	mov	eax, DWORD PTR _v$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _point1$[ebp], ecx

; 1456 : 		point1.v[Y] = v->y;

	mov	eax, DWORD PTR _v$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _point1$[ebp+4], ecx

; 1457 : 		point1.v[Z] = v->z;

	mov	eax, DWORD PTR _v$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _point1$[ebp+8], ecx

; 1458 : 
; 1459 : 		point2.v[X] = point1.v[X] + (v->nx * 64);

	mov	eax, DWORD PTR _v$[ebp]
	fld	DWORD PTR [eax+24]
	fmul	DWORD PTR __real@42800000
	fadd	DWORD PTR _point1$[ebp]
	fstp	DWORD PTR _point2$[ebp]

; 1460 : 		point2.v[Y] = point1.v[Y] + (v->ny * 64);

	mov	eax, DWORD PTR _v$[ebp]
	fld	DWORD PTR [eax+28]
	fmul	DWORD PTR __real@42800000
	fadd	DWORD PTR _point1$[ebp+4]
	fstp	DWORD PTR _point2$[ebp+4]

; 1461 : 		point2.v[Z] = point1.v[Z] + (v->nz * 64);

	mov	eax, DWORD PTR _v$[ebp]
	fld	DWORD PTR [eax+32]
	fmul	DWORD PTR __real@42800000
	fadd	DWORD PTR _point1$[ebp+8]
	fstp	DWORD PTR _point2$[ebp+8]

; 1462 : 
; 1463 : 		DrawLine(&point1, &point2, 0xffffff, 0);

	push	0
	push	16777215				; 00ffffffH
	lea	eax, DWORD PTR _point2$[ebp]
	push	eax
	lea	ecx, DWORD PTR _point1$[ebp]
	push	ecx
	call	?DrawLine@@YAXPAUVectorStruct@@0JJ@Z	; DrawLine
	add	esp, 16					; 00000010H

; 1464 : 	}

	jmp	$L81812
$L81806:

; 1465 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?DrawCubeNormals@@YAXPAUWORLD_MODEL@@@Z ENDP		; DrawCubeNormals
_TEXT	ENDS
PUBLIC	?DrawConvex@@YA_NPAUConvexStruct@@F@Z		; DrawConvex
; Function compile flags: /Odt /ZI
;	COMDAT ?DrawConvex@@YA_NPAUConvexStruct@@F@Z
_TEXT	SEGMENT
tv69 = -84						; size = 4
_c1$ = -16						; size = 4
_c0$ = -12						; size = 4
_j$ = -8						; size = 4
_i$ = -4						; size = 4
_skin$ = 8						; size = 4
_count$ = 12						; size = 2
?DrawConvex@@YA_NPAUConvexStruct@@F@Z PROC NEAR		; DrawConvex, COMDAT

; 1472 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi

; 1473 : 	long i, j, c0, c1;
; 1474 : 
; 1475 : // NULL skin ptr?
; 1476 : 
; 1477 : 	if (!skin)

	cmp	DWORD PTR _skin$[ebp], 0
	jne	SHORT $L81822

; 1478 : 		return FALSE;

	xor	al, al
	jmp	$L81817
$L81822:

; 1479 : 
; 1480 : // loop thru all skins
; 1481 : 
; 1482 : 	for ( i = 0 ; i < count ; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $L81823
$L81824:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$L81823:
	movsx	eax, WORD PTR _count$[ebp]
	cmp	DWORD PTR _i$[ebp], eax
	jge	$L81825

; 1483 : 	{
; 1484 : 
; 1485 : // good colors please!
; 1486 : 
; 1487 : 		switch (i % 3)

	mov	eax, DWORD PTR _i$[ebp]
	cdq
	mov	ecx, 3
	idiv	ecx
	mov	DWORD PTR tv69[ebp], edx
	cmp	DWORD PTR tv69[ebp], 0
	je	SHORT $L81830
	cmp	DWORD PTR tv69[ebp], 1
	je	SHORT $L81831
	cmp	DWORD PTR tv69[ebp], 2
	je	SHORT $L81832
	jmp	SHORT $L81827
$L81830:

; 1488 : 		{
; 1489 : 			case 0:
; 1490 : 				c0 = 0xff0000;

	mov	DWORD PTR _c0$[ebp], 16711680		; 00ff0000H

; 1491 : 				c1 = 0xff0000;

	mov	DWORD PTR _c1$[ebp], 16711680		; 00ff0000H

; 1492 : 				break;

	jmp	SHORT $L81827
$L81831:

; 1493 : 			case 1:
; 1494 : 				c0 = 0x00ff00;

	mov	DWORD PTR _c0$[ebp], 65280		; 0000ff00H

; 1495 : 				c1 = 0x00ff00;

	mov	DWORD PTR _c1$[ebp], 65280		; 0000ff00H

; 1496 : 				break;

	jmp	SHORT $L81827
$L81832:

; 1497 : 			case 2:
; 1498 : 				c0 = 0x0000ff;

	mov	DWORD PTR _c0$[ebp], 255		; 000000ffH

; 1499 : 				c1 = 0x0000ff;

	mov	DWORD PTR _c1$[ebp], 255		; 000000ffH
$L81827:

; 1500 : 				break;
; 1501 : 		}
; 1502 : 
; 1503 : // draw all edges
; 1504 : 
; 1505 : 		for (j = 0 ; j < skin[i].NEdges ; j++)

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $L81833
$L81834:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$L81833:
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 44					; 0000002cH
	mov	ecx, DWORD PTR _skin$[ebp]
	movsx	edx, WORD PTR [ecx+eax+2]
	cmp	DWORD PTR _j$[ebp], edx
	jge	SHORT $L81835

; 1506 : 		{
; 1507 : 			DrawLine(&skin[i].Pts[skin[i].Edges[j].Vtx[0]], &skin[i].Pts[skin[i].Edges[j].Vtx[1]], c0, c1);

	mov	eax, DWORD PTR _c1$[ebp]
	push	eax
	mov	ecx, DWORD PTR _c0$[ebp]
	push	ecx
	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 44					; 0000002cH
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 44					; 0000002cH
	mov	ecx, DWORD PTR _skin$[ebp]
	mov	eax, DWORD PTR [ecx+eax+36]
	mov	ecx, DWORD PTR _j$[ebp]
	movsx	eax, WORD PTR [eax+ecx*4+2]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _skin$[ebp]
	add	eax, DWORD PTR [ecx+edx+32]
	push	eax
	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 44					; 0000002cH
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 44					; 0000002cH
	mov	ecx, DWORD PTR _skin$[ebp]
	mov	eax, DWORD PTR [ecx+eax+36]
	mov	ecx, DWORD PTR _j$[ebp]
	movsx	eax, WORD PTR [eax+ecx*4]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _skin$[ebp]
	add	eax, DWORD PTR [ecx+edx+32]
	push	eax
	call	?DrawLine@@YAXPAUVectorStruct@@0JJ@Z	; DrawLine
	add	esp, 16					; 00000010H

; 1508 : 		}

	jmp	SHORT $L81834
$L81835:

; 1509 : 	}

	jmp	$L81824
$L81825:

; 1510 : 
; 1511 : // return OK
; 1512 : 
; 1513 : 	return TRUE;

	mov	al, 1
$L81817:

; 1514 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?DrawConvex@@YA_NPAUConvexStruct@@F@Z ENDP		; DrawConvex
_TEXT	ENDS
EXTRN	?RotTransVector@@YAXPATMatrixUnion@@PAUVectorStruct@@11@Z:NEAR ; RotTransVector
; Function compile flags: /Odt /ZI
;	COMDAT ?DrawLine@@YAXPAUVectorStruct@@0JJ@Z
_TEXT	SEGMENT
__temp$81873 = -36					; size = 4
__temp$81857 = -32					; size = 4
_rgb1$ = -28						; size = 4
_rgb0$ = -24						; size = 4
_delta$ = -20						; size = 12
_lmul$ = -8						; size = 4
_mul$ = -4						; size = 4
_v0$ = 8						; size = 4
_v1$ = 12						; size = 4
_col0$ = 16						; size = 4
_col1$ = 20						; size = 4
?DrawLine@@YAXPAUVectorStruct@@0JJ@Z PROC NEAR		; DrawLine, COMDAT

; 1521 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 100				; 00000064H
	push	ebx
	push	esi
	push	edi

; 1522 : 	float mul;
; 1523 : 	long lmul;
; 1524 : 	VEC delta;
; 1525 : 	MODEL_RGB *rgb0, *rgb1;
; 1526 : 
; 1527 : // transform to camera space
; 1528 : 
; 1529 : 	RotTransVector(&ViewMatrixScaled, &ViewTransScaled, v0, (VEC*)&DrawVertsTEX0[0].sx);

	push	OFFSET FLAT:?DrawVertsTEX0@@3PAUVERTEX_TEX0@@A
	mov	eax, DWORD PTR _v0$[ebp]
	push	eax
	push	OFFSET FLAT:?ViewTransScaled@@3UVectorStruct@@A ; ViewTransScaled
	push	OFFSET FLAT:?ViewMatrixScaled@@3TMatrixUnion@@A ; ViewMatrixScaled
	call	?RotTransVector@@YAXPATMatrixUnion@@PAUVectorStruct@@11@Z ; RotTransVector
	add	esp, 16					; 00000010H

; 1530 : 	RotTransVector(&ViewMatrixScaled, &ViewTransScaled, v1, (VEC*)&DrawVertsTEX0[1].sx);

	push	OFFSET FLAT:?DrawVertsTEX0@@3PAUVERTEX_TEX0@@A+24
	mov	eax, DWORD PTR _v1$[ebp]
	push	eax
	push	OFFSET FLAT:?ViewTransScaled@@3UVectorStruct@@A ; ViewTransScaled
	push	OFFSET FLAT:?ViewMatrixScaled@@3TMatrixUnion@@A ; ViewMatrixScaled
	call	?RotTransVector@@YAXPATMatrixUnion@@PAUVectorStruct@@11@Z ; RotTransVector
	add	esp, 16					; 00000010H

; 1531 : 
; 1532 : // clip verts if < 1
; 1533 : 
; 1534 : 	if (DrawVertsTEX0[0].sz < 1)

	fld	DWORD PTR ?DrawVertsTEX0@@3PAUVERTEX_TEX0@@A+8
	fcomp	DWORD PTR __real@3f800000
	fnstsw	ax
	test	ah, 5
	jp	$L81849

; 1535 : 	{
; 1536 : 		if (DrawVertsTEX0[1].sz < 1)

	fld	DWORD PTR ?DrawVertsTEX0@@3PAUVERTEX_TEX0@@A+32
	fcomp	DWORD PTR __real@3f800000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L81850

; 1537 : 			return;

	jmp	$L81841
$L81850:

; 1538 : 
; 1539 : 		SubVector((VEC*)&DrawVertsTEX0[1].sx, (VEC*)&DrawVertsTEX0[0].sx, &delta);

	fld	DWORD PTR ?DrawVertsTEX0@@3PAUVERTEX_TEX0@@A+24
	fsub	DWORD PTR ?DrawVertsTEX0@@3PAUVERTEX_TEX0@@A
	fstp	DWORD PTR _delta$[ebp]
	fld	DWORD PTR ?DrawVertsTEX0@@3PAUVERTEX_TEX0@@A+28
	fsub	DWORD PTR ?DrawVertsTEX0@@3PAUVERTEX_TEX0@@A+4
	fstp	DWORD PTR _delta$[ebp+4]
	fld	DWORD PTR ?DrawVertsTEX0@@3PAUVERTEX_TEX0@@A+32
	fsub	DWORD PTR ?DrawVertsTEX0@@3PAUVERTEX_TEX0@@A+8
	fstp	DWORD PTR _delta$[ebp+8]

; 1540 : 		mul = (1 - DrawVertsTEX0[0].sz) / (DrawVertsTEX0[1].sz - DrawVertsTEX0[0].sz);

	fld	DWORD PTR __real@3f800000
	fsub	DWORD PTR ?DrawVertsTEX0@@3PAUVERTEX_TEX0@@A+8
	fld	DWORD PTR ?DrawVertsTEX0@@3PAUVERTEX_TEX0@@A+32
	fsub	DWORD PTR ?DrawVertsTEX0@@3PAUVERTEX_TEX0@@A+8
	fdivp	ST(1), ST(0)
	fstp	DWORD PTR _mul$[ebp]

; 1541 : 		DrawVertsTEX0[0].sx += delta.v[X] * mul;

	fld	DWORD PTR _delta$[ebp]
	fmul	DWORD PTR _mul$[ebp]
	fadd	DWORD PTR ?DrawVertsTEX0@@3PAUVERTEX_TEX0@@A
	fstp	DWORD PTR ?DrawVertsTEX0@@3PAUVERTEX_TEX0@@A

; 1542 : 		DrawVertsTEX0[0].sy += delta.v[Y] * mul;

	fld	DWORD PTR _delta$[ebp+4]
	fmul	DWORD PTR _mul$[ebp]
	fadd	DWORD PTR ?DrawVertsTEX0@@3PAUVERTEX_TEX0@@A+4
	fstp	DWORD PTR ?DrawVertsTEX0@@3PAUVERTEX_TEX0@@A+4

; 1543 : 		DrawVertsTEX0[0].sz += delta.v[Z] * mul;

	fld	DWORD PTR _delta$[ebp+8]
	fmul	DWORD PTR _mul$[ebp]
	fadd	DWORD PTR ?DrawVertsTEX0@@3PAUVERTEX_TEX0@@A+8
	fstp	DWORD PTR ?DrawVertsTEX0@@3PAUVERTEX_TEX0@@A+8

; 1544 : 
; 1545 : 		FTOL(mul * 256, lmul);

	fld	DWORD PTR _mul$[ebp]
	fmul	DWORD PTR __real@43800000
	fadd	DWORD PTR __real@4b000000
	fstp	DWORD PTR __temp$81857[ebp]
	mov	eax, DWORD PTR __temp$81857[ebp]
	and	eax, 16777215				; 00ffffffH
	mov	DWORD PTR _lmul$[ebp], eax

; 1546 : 		rgb0 = (MODEL_RGB*)&col0;

	lea	eax, DWORD PTR _col0$[ebp]
	mov	DWORD PTR _rgb0$[ebp], eax

; 1547 : 		rgb1 = (MODEL_RGB*)&col1;

	lea	eax, DWORD PTR _col1$[ebp]
	mov	DWORD PTR _rgb1$[ebp], eax

; 1548 : 		rgb0->r = (unsigned char)((rgb0->r * (256 - lmul) + rgb1->r * lmul) >> 8);

	mov	eax, DWORD PTR _rgb0$[ebp]
	movzx	ecx, BYTE PTR [eax+2]
	mov	edx, 256				; 00000100H
	sub	edx, DWORD PTR _lmul$[ebp]
	imul	ecx, edx
	mov	eax, DWORD PTR _rgb1$[ebp]
	movzx	edx, BYTE PTR [eax+2]
	imul	edx, DWORD PTR _lmul$[ebp]
	add	ecx, edx
	sar	ecx, 8
	mov	eax, DWORD PTR _rgb0$[ebp]
	mov	BYTE PTR [eax+2], cl

; 1549 : 		rgb0->g = (unsigned char)((rgb0->g * (256 - lmul) + rgb1->g * lmul) >> 8);

	mov	eax, DWORD PTR _rgb0$[ebp]
	movzx	ecx, BYTE PTR [eax+1]
	mov	edx, 256				; 00000100H
	sub	edx, DWORD PTR _lmul$[ebp]
	imul	ecx, edx
	mov	eax, DWORD PTR _rgb1$[ebp]
	movzx	edx, BYTE PTR [eax+1]
	imul	edx, DWORD PTR _lmul$[ebp]
	add	ecx, edx
	sar	ecx, 8
	mov	eax, DWORD PTR _rgb0$[ebp]
	mov	BYTE PTR [eax+1], cl

; 1550 : 		rgb0->b = (unsigned char)((rgb0->b * (256 - lmul) + rgb1->b * lmul) >> 8);

	mov	eax, DWORD PTR _rgb0$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	edx, 256				; 00000100H
	sub	edx, DWORD PTR _lmul$[ebp]
	imul	ecx, edx
	mov	eax, DWORD PTR _rgb1$[ebp]
	movzx	edx, BYTE PTR [eax]
	imul	edx, DWORD PTR _lmul$[ebp]
	add	ecx, edx
	sar	ecx, 8
	mov	eax, DWORD PTR _rgb0$[ebp]
	mov	BYTE PTR [eax], cl

; 1551 : 	}
; 1552 : 
; 1553 : 	else if (DrawVertsTEX0[1].sz < 1)

	jmp	$L81865
$L81849:
	fld	DWORD PTR ?DrawVertsTEX0@@3PAUVERTEX_TEX0@@A+32
	fcomp	DWORD PTR __real@3f800000
	fnstsw	ax
	test	ah, 5
	jp	$L81865

; 1554 : 	{
; 1555 : 		SubVector((VEC*)&DrawVertsTEX0[0].sx, (VEC*)&DrawVertsTEX0[1].sx, &delta);

	fld	DWORD PTR ?DrawVertsTEX0@@3PAUVERTEX_TEX0@@A
	fsub	DWORD PTR ?DrawVertsTEX0@@3PAUVERTEX_TEX0@@A+24
	fstp	DWORD PTR _delta$[ebp]
	fld	DWORD PTR ?DrawVertsTEX0@@3PAUVERTEX_TEX0@@A+4
	fsub	DWORD PTR ?DrawVertsTEX0@@3PAUVERTEX_TEX0@@A+28
	fstp	DWORD PTR _delta$[ebp+4]
	fld	DWORD PTR ?DrawVertsTEX0@@3PAUVERTEX_TEX0@@A+8
	fsub	DWORD PTR ?DrawVertsTEX0@@3PAUVERTEX_TEX0@@A+32
	fstp	DWORD PTR _delta$[ebp+8]

; 1556 : 		mul = (1 - DrawVertsTEX0[1].sz) / (DrawVertsTEX0[0].sz - DrawVertsTEX0[1].sz);

	fld	DWORD PTR __real@3f800000
	fsub	DWORD PTR ?DrawVertsTEX0@@3PAUVERTEX_TEX0@@A+32
	fld	DWORD PTR ?DrawVertsTEX0@@3PAUVERTEX_TEX0@@A+8
	fsub	DWORD PTR ?DrawVertsTEX0@@3PAUVERTEX_TEX0@@A+32
	fdivp	ST(1), ST(0)
	fstp	DWORD PTR _mul$[ebp]

; 1557 : 		DrawVertsTEX0[1].sx += delta.v[X] * mul;

	fld	DWORD PTR _delta$[ebp]
	fmul	DWORD PTR _mul$[ebp]
	fadd	DWORD PTR ?DrawVertsTEX0@@3PAUVERTEX_TEX0@@A+24
	fstp	DWORD PTR ?DrawVertsTEX0@@3PAUVERTEX_TEX0@@A+24

; 1558 : 		DrawVertsTEX0[1].sy += delta.v[Y] * mul;

	fld	DWORD PTR _delta$[ebp+4]
	fmul	DWORD PTR _mul$[ebp]
	fadd	DWORD PTR ?DrawVertsTEX0@@3PAUVERTEX_TEX0@@A+28
	fstp	DWORD PTR ?DrawVertsTEX0@@3PAUVERTEX_TEX0@@A+28

; 1559 : 		DrawVertsTEX0[1].sz += delta.v[Z] * mul;

	fld	DWORD PTR _delta$[ebp+8]
	fmul	DWORD PTR _mul$[ebp]
	fadd	DWORD PTR ?DrawVertsTEX0@@3PAUVERTEX_TEX0@@A+32
	fstp	DWORD PTR ?DrawVertsTEX0@@3PAUVERTEX_TEX0@@A+32

; 1560 : 
; 1561 : 		FTOL(mul * 256, lmul);

	fld	DWORD PTR _mul$[ebp]
	fmul	DWORD PTR __real@43800000
	fadd	DWORD PTR __real@4b000000
	fstp	DWORD PTR __temp$81873[ebp]
	mov	eax, DWORD PTR __temp$81873[ebp]
	and	eax, 16777215				; 00ffffffH
	mov	DWORD PTR _lmul$[ebp], eax

; 1562 : 		rgb0 = (MODEL_RGB*)&col1;

	lea	eax, DWORD PTR _col1$[ebp]
	mov	DWORD PTR _rgb0$[ebp], eax

; 1563 : 		rgb1 = (MODEL_RGB*)&col0;

	lea	eax, DWORD PTR _col0$[ebp]
	mov	DWORD PTR _rgb1$[ebp], eax

; 1564 : 		rgb0->r = (unsigned char)((rgb0->r * (256 - lmul) + rgb1->r * lmul) >> 8);

	mov	eax, DWORD PTR _rgb0$[ebp]
	movzx	ecx, BYTE PTR [eax+2]
	mov	edx, 256				; 00000100H
	sub	edx, DWORD PTR _lmul$[ebp]
	imul	ecx, edx
	mov	eax, DWORD PTR _rgb1$[ebp]
	movzx	edx, BYTE PTR [eax+2]
	imul	edx, DWORD PTR _lmul$[ebp]
	add	ecx, edx
	sar	ecx, 8
	mov	eax, DWORD PTR _rgb0$[ebp]
	mov	BYTE PTR [eax+2], cl

; 1565 : 		rgb0->g = (unsigned char)((rgb0->g * (256 - lmul) + rgb1->g * lmul) >> 8);

	mov	eax, DWORD PTR _rgb0$[ebp]
	movzx	ecx, BYTE PTR [eax+1]
	mov	edx, 256				; 00000100H
	sub	edx, DWORD PTR _lmul$[ebp]
	imul	ecx, edx
	mov	eax, DWORD PTR _rgb1$[ebp]
	movzx	edx, BYTE PTR [eax+1]
	imul	edx, DWORD PTR _lmul$[ebp]
	add	ecx, edx
	sar	ecx, 8
	mov	eax, DWORD PTR _rgb0$[ebp]
	mov	BYTE PTR [eax+1], cl

; 1566 : 		rgb0->b = (unsigned char)((rgb0->b * (256 - lmul) + rgb1->b * lmul) >> 8);

	mov	eax, DWORD PTR _rgb0$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	edx, 256				; 00000100H
	sub	edx, DWORD PTR _lmul$[ebp]
	imul	ecx, edx
	mov	eax, DWORD PTR _rgb1$[ebp]
	movzx	edx, BYTE PTR [eax]
	imul	edx, DWORD PTR _lmul$[ebp]
	add	ecx, edx
	sar	ecx, 8
	mov	eax, DWORD PTR _rgb0$[ebp]
	mov	BYTE PTR [eax], cl
$L81865:

; 1567 : 	}
; 1568 : 
; 1569 : // perspectify
; 1570 : 
; 1571 : 	DrawVertsTEX0[0].sx = DrawVertsTEX0[0].sx / DrawVertsTEX0[0].sz + RenderSettings.GeomCentreX;

	fld	DWORD PTR ?DrawVertsTEX0@@3PAUVERTEX_TEX0@@A
	fdiv	DWORD PTR ?DrawVertsTEX0@@3PAUVERTEX_TEX0@@A+8
	fadd	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+4
	fstp	DWORD PTR ?DrawVertsTEX0@@3PAUVERTEX_TEX0@@A

; 1572 : 	DrawVertsTEX0[0].sy = DrawVertsTEX0[0].sy / DrawVertsTEX0[0].sz + RenderSettings.GeomCentreY;

	fld	DWORD PTR ?DrawVertsTEX0@@3PAUVERTEX_TEX0@@A+4
	fdiv	DWORD PTR ?DrawVertsTEX0@@3PAUVERTEX_TEX0@@A+8
	fadd	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+8
	fstp	DWORD PTR ?DrawVertsTEX0@@3PAUVERTEX_TEX0@@A+4

; 1573 : 	DrawVertsTEX0[0].rhw = 1 / DrawVertsTEX0[0].sz;

	fld	DWORD PTR __real@3f800000
	fdiv	DWORD PTR ?DrawVertsTEX0@@3PAUVERTEX_TEX0@@A+8
	fstp	DWORD PTR ?DrawVertsTEX0@@3PAUVERTEX_TEX0@@A+12

; 1574 : 	DrawVertsTEX0[0].sz = GET_ZBUFFER(DrawVertsTEX0[0].sz);

	fld	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+36
	fmul	DWORD PTR ?DrawVertsTEX0@@3PAUVERTEX_TEX0@@A+8
	fdivr	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+44
	fsubr	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+40
	fstp	DWORD PTR ?DrawVertsTEX0@@3PAUVERTEX_TEX0@@A+8

; 1575 : 
; 1576 : 	DrawVertsTEX0[1].sx = DrawVertsTEX0[1].sx / DrawVertsTEX0[1].sz + RenderSettings.GeomCentreX;

	fld	DWORD PTR ?DrawVertsTEX0@@3PAUVERTEX_TEX0@@A+24
	fdiv	DWORD PTR ?DrawVertsTEX0@@3PAUVERTEX_TEX0@@A+32
	fadd	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+4
	fstp	DWORD PTR ?DrawVertsTEX0@@3PAUVERTEX_TEX0@@A+24

; 1577 : 	DrawVertsTEX0[1].sy = DrawVertsTEX0[1].sy / DrawVertsTEX0[1].sz + RenderSettings.GeomCentreY;

	fld	DWORD PTR ?DrawVertsTEX0@@3PAUVERTEX_TEX0@@A+28
	fdiv	DWORD PTR ?DrawVertsTEX0@@3PAUVERTEX_TEX0@@A+32
	fadd	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+8
	fstp	DWORD PTR ?DrawVertsTEX0@@3PAUVERTEX_TEX0@@A+28

; 1578 : 	DrawVertsTEX0[1].rhw = 1 / DrawVertsTEX0[1].sz;

	fld	DWORD PTR __real@3f800000
	fdiv	DWORD PTR ?DrawVertsTEX0@@3PAUVERTEX_TEX0@@A+32
	fstp	DWORD PTR ?DrawVertsTEX0@@3PAUVERTEX_TEX0@@A+36

; 1579 : 	DrawVertsTEX0[1].sz = GET_ZBUFFER(DrawVertsTEX0[1].sz);

	fld	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+36
	fmul	DWORD PTR ?DrawVertsTEX0@@3PAUVERTEX_TEX0@@A+32
	fdivr	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+44
	fsubr	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+40
	fstp	DWORD PTR ?DrawVertsTEX0@@3PAUVERTEX_TEX0@@A+32

; 1580 : 
; 1581 : // draw
; 1582 : 
; 1583 : 	DrawVertsTEX0[0].color = col0;

	mov	eax, DWORD PTR _col0$[ebp]
	mov	DWORD PTR ?DrawVertsTEX0@@3PAUVERTEX_TEX0@@A+16, eax

; 1584 : 	DrawVertsTEX0[1].color = col1;

	mov	eax, DWORD PTR _col1$[ebp]
	mov	DWORD PTR ?DrawVertsTEX0@@3PAUVERTEX_TEX0@@A+40, eax

; 1585 : 
; 1586 : 	SET_TPAGE(-1);

	movsx	eax, WORD PTR ?RenderTP@@3FA		; RenderTP
	cmp	eax, -1
	je	SHORT $L81881
	mov	WORD PTR ?RenderTP@@3FA, -1		; RenderTP
	movsx	eax, WORD PTR ?RenderTP@@3FA		; RenderTP
	cmp	eax, -1
	jne	SHORT $L81882
	push	0
	push	0
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	edx
	call	DWORD PTR [ecx+152]
	mov	eax, DWORD PTR ?TextureStateChange@@3JA	; TextureStateChange
	add	eax, 1
	mov	DWORD PTR ?TextureStateChange@@3JA, eax	; TextureStateChange
	jmp	SHORT $L81881
$L81882:
	movsx	eax, WORD PTR ?RenderTP@@3FA		; RenderTP
	shl	eax, 6
	mov	ecx, DWORD PTR ?TexInfo@@3PAUTEXINFO@@A	; TexInfo
	mov	edx, DWORD PTR [ecx+eax+52]
	push	edx
	push	0
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	edx
	call	DWORD PTR [ecx+152]
	mov	eax, DWORD PTR ?TextureStateChange@@3JA	; TextureStateChange
	add	eax, 1
	mov	DWORD PTR ?TextureStateChange@@3JA, eax	; TextureStateChange
$L81881:

; 1587 : 	D3Ddevice->DrawPrimitive(D3DPT_LINELIST, FVF_TEX0, DrawVertsTEX0, 2, D3DDP_DONOTUPDATEEXTENTS);

	push	8
	push	2
	push	OFFSET FLAT:?DrawVertsTEX0@@3PAUVERTEX_TEX0@@A
	push	196					; 000000c4H
	push	2
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	edx
	call	DWORD PTR [ecx+112]
$L81841:

; 1588 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?DrawLine@@YAXPAUVectorStruct@@0JJ@Z ENDP		; DrawLine
_TEXT	ENDS
PUBLIC	?DrawTriClip@@YAXPAUVERTEX_TEX1@@00@Z		; DrawTriClip
PUBLIC	?DrawFanClip@@YAXXZ				; DrawFanClip
_BSS	SEGMENT
_ClipVertNum DW	01H DUP (?)
	ALIGN	4

_ClipVertFree DW 01H DUP (?)
	ALIGN	4

_ClipVertList DW 010H DUP (?)
_ClipVert DB	0400H DUP (?)
; Function compile flags: /Odt /ZI
_BSS	ENDS
;	COMDAT ?DrawTriClip@@YAXPAUVERTEX_TEX1@@00@Z
_TEXT	SEGMENT
_v0$ = 8						; size = 4
_v1$ = 12						; size = 4
_v2$ = 16						; size = 4
?DrawTriClip@@YAXPAUVERTEX_TEX1@@00@Z PROC NEAR		; DrawTriClip, COMDAT

; 1595 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 1596 : 
; 1597 : // setup misc
; 1598 : 
; 1599 : 	ClipVertNum = 3;

	mov	WORD PTR _ClipVertNum, 3

; 1600 : 	ClipVertFree = 3;

	mov	WORD PTR _ClipVertFree, 3

; 1601 : 
; 1602 : 	ClipVertList[0][0] = 0;

	mov	WORD PTR _ClipVertList, 0

; 1603 : 	ClipVertList[0][1] = 1;

	mov	WORD PTR _ClipVertList+2, 1

; 1604 : 	ClipVertList[0][2] = 2;

	mov	WORD PTR _ClipVertList+4, 2

; 1605 : 
; 1606 : 	ClipVert[0] = *v0;

	mov	esi, DWORD PTR _v0$[ebp]
	mov	ecx, 8
	mov	edi, OFFSET FLAT:_ClipVert
	rep movsd

; 1607 : 	ClipVert[1] = *v1;

	mov	esi, DWORD PTR _v1$[ebp]
	mov	ecx, 8
	mov	edi, OFFSET FLAT:_ClipVert+32
	rep movsd

; 1608 : 	ClipVert[2] = *v2;

	mov	esi, DWORD PTR _v2$[ebp]
	mov	ecx, 8
	mov	edi, OFFSET FLAT:_ClipVert+64
	rep movsd

; 1609 : 
; 1610 : // clip
; 1611 : 
; 1612 : 	DrawFanClip();

	call	?DrawFanClip@@YAXXZ			; DrawFanClip

; 1613 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?DrawTriClip@@YAXPAUVERTEX_TEX1@@00@Z ENDP		; DrawTriClip
_TEXT	ENDS
PUBLIC	?DrawQuadClip@@YAXPAUVERTEX_TEX1@@000@Z		; DrawQuadClip
; Function compile flags: /Odt /ZI
;	COMDAT ?DrawQuadClip@@YAXPAUVERTEX_TEX1@@000@Z
_TEXT	SEGMENT
_v0$ = 8						; size = 4
_v1$ = 12						; size = 4
_v2$ = 16						; size = 4
_v3$ = 20						; size = 4
?DrawQuadClip@@YAXPAUVERTEX_TEX1@@000@Z PROC NEAR	; DrawQuadClip, COMDAT

; 1620 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 1621 : 
; 1622 : // setup misc
; 1623 : 
; 1624 : 	ClipVertNum = 4;

	mov	WORD PTR _ClipVertNum, 4

; 1625 : 	ClipVertFree = 4;

	mov	WORD PTR _ClipVertFree, 4

; 1626 : 
; 1627 : 	ClipVertList[0][0] = 0;

	mov	WORD PTR _ClipVertList, 0

; 1628 : 	ClipVertList[0][1] = 1;

	mov	WORD PTR _ClipVertList+2, 1

; 1629 : 	ClipVertList[0][2] = 2;

	mov	WORD PTR _ClipVertList+4, 2

; 1630 : 	ClipVertList[0][3] = 3;

	mov	WORD PTR _ClipVertList+6, 3

; 1631 : 
; 1632 : 	ClipVert[0] = *v0;

	mov	esi, DWORD PTR _v0$[ebp]
	mov	ecx, 8
	mov	edi, OFFSET FLAT:_ClipVert
	rep movsd

; 1633 : 	ClipVert[1] = *v1;

	mov	esi, DWORD PTR _v1$[ebp]
	mov	ecx, 8
	mov	edi, OFFSET FLAT:_ClipVert+32
	rep movsd

; 1634 : 	ClipVert[2] = *v2;

	mov	esi, DWORD PTR _v2$[ebp]
	mov	ecx, 8
	mov	edi, OFFSET FLAT:_ClipVert+64
	rep movsd

; 1635 : 	ClipVert[3] = *v3;

	mov	esi, DWORD PTR _v3$[ebp]
	mov	ecx, 8
	mov	edi, OFFSET FLAT:_ClipVert+96
	rep movsd

; 1636 : 
; 1637 : // clip
; 1638 : 
; 1639 : 	DrawFanClip();

	call	?DrawFanClip@@YAXXZ			; DrawFanClip

; 1640 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?DrawQuadClip@@YAXPAUVERTEX_TEX1@@000@Z ENDP		; DrawQuadClip
_TEXT	ENDS
PUBLIC	?ClipLineTEX1@@YAXPAUVERTEX_TEX1@@0M0@Z		; ClipLineTEX1
EXTRN	?ScreenRightClip@@3MA:DWORD			; ScreenRightClip
EXTRN	?ScreenBottomClip@@3MA:DWORD			; ScreenBottomClip
; Function compile flags: /Odt /ZI
;	COMDAT ?DrawFanClip@@YAXXZ
_TEXT	SEGMENT
_vert1$ = -16						; size = 4
_vert0$ = -12						; size = 4
_newcount$ = -8						; size = 2
_i$ = -4						; size = 2
?DrawFanClip@@YAXXZ PROC NEAR				; DrawFanClip, COMDAT

; 1647 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi

; 1648 : 	short i, newcount;
; 1649 : 	VERTEX_TEX1 *vert0, *vert1;
; 1650 : 
; 1651 : // top
; 1652 : 
; 1653 : 	for (i = newcount = 0 ; i < ClipVertNum ; i++)

	mov	WORD PTR _newcount$[ebp], 0
	mov	ax, WORD PTR _newcount$[ebp]
	mov	WORD PTR _i$[ebp], ax
	jmp	SHORT $L81902
$L81903:
	mov	ax, WORD PTR _i$[ebp]
	add	ax, 1
	mov	WORD PTR _i$[ebp], ax
$L81902:
	movsx	eax, WORD PTR _i$[ebp]
	movzx	ecx, WORD PTR _ClipVertNum
	cmp	eax, ecx
	jge	$L81904

; 1654 : 	{
; 1655 : 		vert0 = ClipVert + ClipVertList[0][i];

	movsx	eax, WORD PTR _i$[ebp]
	movzx	ecx, WORD PTR _ClipVertList[eax*2]
	shl	ecx, 5
	add	ecx, OFFSET FLAT:_ClipVert
	mov	DWORD PTR _vert0$[ebp], ecx

; 1656 : 		vert1 = ClipVert + ClipVertList[0][(i + 1) % ClipVertNum];

	movsx	eax, WORD PTR _i$[ebp]
	add	eax, 1
	movzx	ecx, WORD PTR _ClipVertNum
	cdq
	idiv	ecx
	movzx	edx, WORD PTR _ClipVertList[edx*2]
	shl	edx, 5
	add	edx, OFFSET FLAT:_ClipVert
	mov	DWORD PTR _vert1$[ebp], edx

; 1657 : 
; 1658 : 		if (vert0->sy >= ScreenTopClip)

	mov	eax, DWORD PTR _vert0$[ebp]
	fld	DWORD PTR [eax+4]
	fcomp	DWORD PTR ?ScreenTopClip@@3MA		; ScreenTopClip
	fnstsw	ax
	test	ah, 1
	jne	$L81905

; 1659 : 		{
; 1660 : 			ClipVertList[1][newcount++] = ClipVertList[0][i];

	movsx	eax, WORD PTR _i$[ebp]
	movsx	ecx, WORD PTR _newcount$[ebp]
	mov	dx, WORD PTR _ClipVertList[eax*2]
	mov	WORD PTR _ClipVertList[ecx*2+16], dx
	mov	ax, WORD PTR _newcount$[ebp]
	add	ax, 1
	mov	WORD PTR _newcount$[ebp], ax

; 1661 : 
; 1662 : 			if (vert1->sy < ScreenTopClip)

	mov	eax, DWORD PTR _vert1$[ebp]
	fld	DWORD PTR [eax+4]
	fcomp	DWORD PTR ?ScreenTopClip@@3MA		; ScreenTopClip
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L81906

; 1663 : 			{
; 1664 : 				ClipLineTEX1(vert0, vert1, (vert0->sy - ScreenTopClip) / (vert0->sy - vert1->sy), ClipVert + ClipVertFree);

	movzx	eax, WORD PTR _ClipVertFree
	shl	eax, 5
	add	eax, OFFSET FLAT:_ClipVert
	push	eax
	mov	ecx, DWORD PTR _vert0$[ebp]
	fld	DWORD PTR [ecx+4]
	fsub	DWORD PTR ?ScreenTopClip@@3MA		; ScreenTopClip
	mov	edx, DWORD PTR _vert0$[ebp]
	mov	eax, DWORD PTR _vert1$[ebp]
	fld	DWORD PTR [edx+4]
	fsub	DWORD PTR [eax+4]
	fdivp	ST(1), ST(0)
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _vert1$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vert0$[ebp]
	push	edx
	call	?ClipLineTEX1@@YAXPAUVERTEX_TEX1@@0M0@Z	; ClipLineTEX1
	add	esp, 16					; 00000010H

; 1665 : 				ClipVertList[1][newcount++] = ClipVertFree++;

	movsx	eax, WORD PTR _newcount$[ebp]
	mov	cx, WORD PTR _ClipVertFree
	mov	WORD PTR _ClipVertList[eax*2+16], cx
	mov	dx, WORD PTR _newcount$[ebp]
	add	dx, 1
	mov	WORD PTR _newcount$[ebp], dx
	mov	ax, WORD PTR _ClipVertFree
	add	ax, 1
	mov	WORD PTR _ClipVertFree, ax
$L81906:

; 1666 : 			}
; 1667 : 		}
; 1668 : 		else

	jmp	$L81907
$L81905:

; 1669 : 		{
; 1670 : 			if (vert1->sy >= ScreenTopClip)

	mov	eax, DWORD PTR _vert1$[ebp]
	fld	DWORD PTR [eax+4]
	fcomp	DWORD PTR ?ScreenTopClip@@3MA		; ScreenTopClip
	fnstsw	ax
	test	ah, 1
	jne	SHORT $L81907

; 1671 : 			{
; 1672 : 				ClipLineTEX1(vert1, vert0, (vert1->sy - ScreenTopClip) / (vert1->sy - vert0->sy), ClipVert + ClipVertFree);

	movzx	eax, WORD PTR _ClipVertFree
	shl	eax, 5
	add	eax, OFFSET FLAT:_ClipVert
	push	eax
	mov	ecx, DWORD PTR _vert1$[ebp]
	fld	DWORD PTR [ecx+4]
	fsub	DWORD PTR ?ScreenTopClip@@3MA		; ScreenTopClip
	mov	edx, DWORD PTR _vert1$[ebp]
	mov	eax, DWORD PTR _vert0$[ebp]
	fld	DWORD PTR [edx+4]
	fsub	DWORD PTR [eax+4]
	fdivp	ST(1), ST(0)
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _vert0$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vert1$[ebp]
	push	edx
	call	?ClipLineTEX1@@YAXPAUVERTEX_TEX1@@0M0@Z	; ClipLineTEX1
	add	esp, 16					; 00000010H

; 1673 : 				ClipVertList[1][newcount++] = ClipVertFree++;

	movsx	eax, WORD PTR _newcount$[ebp]
	mov	cx, WORD PTR _ClipVertFree
	mov	WORD PTR _ClipVertList[eax*2+16], cx
	mov	dx, WORD PTR _newcount$[ebp]
	add	dx, 1
	mov	WORD PTR _newcount$[ebp], dx
	mov	ax, WORD PTR _ClipVertFree
	add	ax, 1
	mov	WORD PTR _ClipVertFree, ax
$L81907:

; 1674 : 			}
; 1675 : 		}
; 1676 : 	}

	jmp	$L81903
$L81904:

; 1677 : 
; 1678 : 	ClipVertNum = newcount;

	mov	ax, WORD PTR _newcount$[ebp]
	mov	WORD PTR _ClipVertNum, ax

; 1679 : 
; 1680 : // bottom
; 1681 : 
; 1682 : 	for (i = newcount = 0 ; i < ClipVertNum ; i++)

	mov	WORD PTR _newcount$[ebp], 0
	mov	ax, WORD PTR _newcount$[ebp]
	mov	WORD PTR _i$[ebp], ax
	jmp	SHORT $L81909
$L81910:
	mov	ax, WORD PTR _i$[ebp]
	add	ax, 1
	mov	WORD PTR _i$[ebp], ax
$L81909:
	movsx	eax, WORD PTR _i$[ebp]
	movzx	ecx, WORD PTR _ClipVertNum
	cmp	eax, ecx
	jge	$L81911

; 1683 : 	{
; 1684 : 		vert0 = ClipVert + ClipVertList[1][i];

	movsx	eax, WORD PTR _i$[ebp]
	movzx	ecx, WORD PTR _ClipVertList[eax*2+16]
	shl	ecx, 5
	add	ecx, OFFSET FLAT:_ClipVert
	mov	DWORD PTR _vert0$[ebp], ecx

; 1685 : 		vert1 = ClipVert + ClipVertList[1][(i + 1) % ClipVertNum];

	movsx	eax, WORD PTR _i$[ebp]
	add	eax, 1
	movzx	ecx, WORD PTR _ClipVertNum
	cdq
	idiv	ecx
	movzx	edx, WORD PTR _ClipVertList[edx*2+16]
	shl	edx, 5
	add	edx, OFFSET FLAT:_ClipVert
	mov	DWORD PTR _vert1$[ebp], edx

; 1686 : 
; 1687 : 		if (vert0->sy <= ScreenBottomClip)

	mov	eax, DWORD PTR _vert0$[ebp]
	fld	DWORD PTR [eax+4]
	fcomp	DWORD PTR ?ScreenBottomClip@@3MA	; ScreenBottomClip
	fnstsw	ax
	test	ah, 65					; 00000041H
	jp	$L81912

; 1688 : 		{
; 1689 : 			ClipVertList[0][newcount++] = ClipVertList[1][i];

	movsx	eax, WORD PTR _i$[ebp]
	movsx	ecx, WORD PTR _newcount$[ebp]
	mov	dx, WORD PTR _ClipVertList[eax*2+16]
	mov	WORD PTR _ClipVertList[ecx*2], dx
	mov	ax, WORD PTR _newcount$[ebp]
	add	ax, 1
	mov	WORD PTR _newcount$[ebp], ax

; 1690 : 
; 1691 : 			if (vert1->sy > ScreenBottomClip)

	mov	eax, DWORD PTR _vert1$[ebp]
	fld	DWORD PTR [eax+4]
	fcomp	DWORD PTR ?ScreenBottomClip@@3MA	; ScreenBottomClip
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $L81913

; 1692 : 			{
; 1693 : 				ClipLineTEX1(vert0, vert1, (ScreenBottomClip - vert0->sy) / (vert1->sy - vert0->sy), ClipVert + ClipVertFree);

	movzx	eax, WORD PTR _ClipVertFree
	shl	eax, 5
	add	eax, OFFSET FLAT:_ClipVert
	push	eax
	mov	ecx, DWORD PTR _vert0$[ebp]
	fld	DWORD PTR ?ScreenBottomClip@@3MA	; ScreenBottomClip
	fsub	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _vert1$[ebp]
	mov	eax, DWORD PTR _vert0$[ebp]
	fld	DWORD PTR [edx+4]
	fsub	DWORD PTR [eax+4]
	fdivp	ST(1), ST(0)
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _vert1$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vert0$[ebp]
	push	edx
	call	?ClipLineTEX1@@YAXPAUVERTEX_TEX1@@0M0@Z	; ClipLineTEX1
	add	esp, 16					; 00000010H

; 1694 : 				ClipVertList[0][newcount++] = ClipVertFree++;

	movsx	eax, WORD PTR _newcount$[ebp]
	mov	cx, WORD PTR _ClipVertFree
	mov	WORD PTR _ClipVertList[eax*2], cx
	mov	dx, WORD PTR _newcount$[ebp]
	add	dx, 1
	mov	WORD PTR _newcount$[ebp], dx
	mov	ax, WORD PTR _ClipVertFree
	add	ax, 1
	mov	WORD PTR _ClipVertFree, ax
$L81913:

; 1695 : 			}
; 1696 : 		}
; 1697 : 		else

	jmp	$L81914
$L81912:

; 1698 : 		{
; 1699 : 			if (vert1->sy <= ScreenBottomClip)

	mov	eax, DWORD PTR _vert1$[ebp]
	fld	DWORD PTR [eax+4]
	fcomp	DWORD PTR ?ScreenBottomClip@@3MA	; ScreenBottomClip
	fnstsw	ax
	test	ah, 65					; 00000041H
	jp	SHORT $L81914

; 1700 : 			{
; 1701 : 				ClipLineTEX1(vert1, vert0, (ScreenBottomClip - vert1->sy) / (vert0->sy - vert1->sy), ClipVert + ClipVertFree);

	movzx	eax, WORD PTR _ClipVertFree
	shl	eax, 5
	add	eax, OFFSET FLAT:_ClipVert
	push	eax
	mov	ecx, DWORD PTR _vert1$[ebp]
	fld	DWORD PTR ?ScreenBottomClip@@3MA	; ScreenBottomClip
	fsub	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _vert0$[ebp]
	mov	eax, DWORD PTR _vert1$[ebp]
	fld	DWORD PTR [edx+4]
	fsub	DWORD PTR [eax+4]
	fdivp	ST(1), ST(0)
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _vert0$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vert1$[ebp]
	push	edx
	call	?ClipLineTEX1@@YAXPAUVERTEX_TEX1@@0M0@Z	; ClipLineTEX1
	add	esp, 16					; 00000010H

; 1702 : 				ClipVertList[0][newcount++] = ClipVertFree++;

	movsx	eax, WORD PTR _newcount$[ebp]
	mov	cx, WORD PTR _ClipVertFree
	mov	WORD PTR _ClipVertList[eax*2], cx
	mov	dx, WORD PTR _newcount$[ebp]
	add	dx, 1
	mov	WORD PTR _newcount$[ebp], dx
	mov	ax, WORD PTR _ClipVertFree
	add	ax, 1
	mov	WORD PTR _ClipVertFree, ax
$L81914:

; 1703 : 			}
; 1704 : 		}
; 1705 : 	}

	jmp	$L81910
$L81911:

; 1706 : 
; 1707 : 	ClipVertNum = newcount;

	mov	ax, WORD PTR _newcount$[ebp]
	mov	WORD PTR _ClipVertNum, ax

; 1708 : 
; 1709 : // left
; 1710 : 
; 1711 : 	for (i = newcount = 0 ; i < ClipVertNum ; i++)

	mov	WORD PTR _newcount$[ebp], 0
	mov	ax, WORD PTR _newcount$[ebp]
	mov	WORD PTR _i$[ebp], ax
	jmp	SHORT $L81916
$L81917:
	mov	ax, WORD PTR _i$[ebp]
	add	ax, 1
	mov	WORD PTR _i$[ebp], ax
$L81916:
	movsx	eax, WORD PTR _i$[ebp]
	movzx	ecx, WORD PTR _ClipVertNum
	cmp	eax, ecx
	jge	$L81918

; 1712 : 	{
; 1713 : 		vert0 = ClipVert + ClipVertList[0][i];

	movsx	eax, WORD PTR _i$[ebp]
	movzx	ecx, WORD PTR _ClipVertList[eax*2]
	shl	ecx, 5
	add	ecx, OFFSET FLAT:_ClipVert
	mov	DWORD PTR _vert0$[ebp], ecx

; 1714 : 		vert1 = ClipVert + ClipVertList[0][(i + 1) % ClipVertNum];

	movsx	eax, WORD PTR _i$[ebp]
	add	eax, 1
	movzx	ecx, WORD PTR _ClipVertNum
	cdq
	idiv	ecx
	movzx	edx, WORD PTR _ClipVertList[edx*2]
	shl	edx, 5
	add	edx, OFFSET FLAT:_ClipVert
	mov	DWORD PTR _vert1$[ebp], edx

; 1715 : 
; 1716 : 		if (vert0->sx >= ScreenLeftClip)

	mov	eax, DWORD PTR _vert0$[ebp]
	fld	DWORD PTR [eax]
	fcomp	DWORD PTR ?ScreenLeftClip@@3MA		; ScreenLeftClip
	fnstsw	ax
	test	ah, 1
	jne	$L81919

; 1717 : 		{
; 1718 : 			ClipVertList[1][newcount++] = ClipVertList[0][i];

	movsx	eax, WORD PTR _i$[ebp]
	movsx	ecx, WORD PTR _newcount$[ebp]
	mov	dx, WORD PTR _ClipVertList[eax*2]
	mov	WORD PTR _ClipVertList[ecx*2+16], dx
	mov	ax, WORD PTR _newcount$[ebp]
	add	ax, 1
	mov	WORD PTR _newcount$[ebp], ax

; 1719 : 
; 1720 : 			if (vert1->sx < ScreenLeftClip)

	mov	eax, DWORD PTR _vert1$[ebp]
	fld	DWORD PTR [eax]
	fcomp	DWORD PTR ?ScreenLeftClip@@3MA		; ScreenLeftClip
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L81920

; 1721 : 			{
; 1722 : 				ClipLineTEX1(vert0, vert1, (vert0->sx - ScreenLeftClip) / (vert0->sx - vert1->sx), ClipVert + ClipVertFree);

	movzx	eax, WORD PTR _ClipVertFree
	shl	eax, 5
	add	eax, OFFSET FLAT:_ClipVert
	push	eax
	mov	ecx, DWORD PTR _vert0$[ebp]
	fld	DWORD PTR [ecx]
	fsub	DWORD PTR ?ScreenLeftClip@@3MA		; ScreenLeftClip
	mov	edx, DWORD PTR _vert0$[ebp]
	mov	eax, DWORD PTR _vert1$[ebp]
	fld	DWORD PTR [edx]
	fsub	DWORD PTR [eax]
	fdivp	ST(1), ST(0)
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _vert1$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vert0$[ebp]
	push	edx
	call	?ClipLineTEX1@@YAXPAUVERTEX_TEX1@@0M0@Z	; ClipLineTEX1
	add	esp, 16					; 00000010H

; 1723 : 				ClipVertList[1][newcount++] = ClipVertFree++;

	movsx	eax, WORD PTR _newcount$[ebp]
	mov	cx, WORD PTR _ClipVertFree
	mov	WORD PTR _ClipVertList[eax*2+16], cx
	mov	dx, WORD PTR _newcount$[ebp]
	add	dx, 1
	mov	WORD PTR _newcount$[ebp], dx
	mov	ax, WORD PTR _ClipVertFree
	add	ax, 1
	mov	WORD PTR _ClipVertFree, ax
$L81920:

; 1724 : 			}
; 1725 : 		}
; 1726 : 		else

	jmp	SHORT $L81921
$L81919:

; 1727 : 		{
; 1728 : 			if (vert1->sx >= ScreenLeftClip)

	mov	eax, DWORD PTR _vert1$[ebp]
	fld	DWORD PTR [eax]
	fcomp	DWORD PTR ?ScreenLeftClip@@3MA		; ScreenLeftClip
	fnstsw	ax
	test	ah, 1
	jne	SHORT $L81921

; 1729 : 			{
; 1730 : 				ClipLineTEX1(vert1, vert0, (vert1->sx - ScreenLeftClip) / (vert1->sx - vert0->sx), ClipVert + ClipVertFree);

	movzx	eax, WORD PTR _ClipVertFree
	shl	eax, 5
	add	eax, OFFSET FLAT:_ClipVert
	push	eax
	mov	ecx, DWORD PTR _vert1$[ebp]
	fld	DWORD PTR [ecx]
	fsub	DWORD PTR ?ScreenLeftClip@@3MA		; ScreenLeftClip
	mov	edx, DWORD PTR _vert1$[ebp]
	mov	eax, DWORD PTR _vert0$[ebp]
	fld	DWORD PTR [edx]
	fsub	DWORD PTR [eax]
	fdivp	ST(1), ST(0)
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _vert0$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vert1$[ebp]
	push	edx
	call	?ClipLineTEX1@@YAXPAUVERTEX_TEX1@@0M0@Z	; ClipLineTEX1
	add	esp, 16					; 00000010H

; 1731 : 				ClipVertList[1][newcount++] = ClipVertFree++;

	movsx	eax, WORD PTR _newcount$[ebp]
	mov	cx, WORD PTR _ClipVertFree
	mov	WORD PTR _ClipVertList[eax*2+16], cx
	mov	dx, WORD PTR _newcount$[ebp]
	add	dx, 1
	mov	WORD PTR _newcount$[ebp], dx
	mov	ax, WORD PTR _ClipVertFree
	add	ax, 1
	mov	WORD PTR _ClipVertFree, ax
$L81921:

; 1732 : 			}
; 1733 : 		}
; 1734 : 	}

	jmp	$L81917
$L81918:

; 1735 : 
; 1736 : 	ClipVertNum = newcount;

	mov	ax, WORD PTR _newcount$[ebp]
	mov	WORD PTR _ClipVertNum, ax

; 1737 : 
; 1738 : // right
; 1739 : 
; 1740 : 	for (i = newcount = 0 ; i < ClipVertNum ; i++)

	mov	WORD PTR _newcount$[ebp], 0
	mov	ax, WORD PTR _newcount$[ebp]
	mov	WORD PTR _i$[ebp], ax
	jmp	SHORT $L81923
$L81924:
	mov	ax, WORD PTR _i$[ebp]
	add	ax, 1
	mov	WORD PTR _i$[ebp], ax
$L81923:
	movsx	eax, WORD PTR _i$[ebp]
	movzx	ecx, WORD PTR _ClipVertNum
	cmp	eax, ecx
	jge	$L81925

; 1741 : 	{
; 1742 : 		vert0 = ClipVert + ClipVertList[1][i];

	movsx	eax, WORD PTR _i$[ebp]
	movzx	ecx, WORD PTR _ClipVertList[eax*2+16]
	shl	ecx, 5
	add	ecx, OFFSET FLAT:_ClipVert
	mov	DWORD PTR _vert0$[ebp], ecx

; 1743 : 		vert1 = ClipVert + ClipVertList[1][(i + 1) % ClipVertNum];

	movsx	eax, WORD PTR _i$[ebp]
	add	eax, 1
	movzx	ecx, WORD PTR _ClipVertNum
	cdq
	idiv	ecx
	movzx	edx, WORD PTR _ClipVertList[edx*2+16]
	shl	edx, 5
	add	edx, OFFSET FLAT:_ClipVert
	mov	DWORD PTR _vert1$[ebp], edx

; 1744 : 
; 1745 : 		if (vert0->sx <= ScreenRightClip)

	mov	eax, DWORD PTR _vert0$[ebp]
	fld	DWORD PTR [eax]
	fcomp	DWORD PTR ?ScreenRightClip@@3MA		; ScreenRightClip
	fnstsw	ax
	test	ah, 65					; 00000041H
	jp	$L81926

; 1746 : 		{
; 1747 : 			ClipVertList[0][newcount++] = ClipVertList[1][i];

	movsx	eax, WORD PTR _i$[ebp]
	movsx	ecx, WORD PTR _newcount$[ebp]
	mov	dx, WORD PTR _ClipVertList[eax*2+16]
	mov	WORD PTR _ClipVertList[ecx*2], dx
	mov	ax, WORD PTR _newcount$[ebp]
	add	ax, 1
	mov	WORD PTR _newcount$[ebp], ax

; 1748 : 
; 1749 : 			if (vert1->sx > ScreenRightClip)

	mov	eax, DWORD PTR _vert1$[ebp]
	fld	DWORD PTR [eax]
	fcomp	DWORD PTR ?ScreenRightClip@@3MA		; ScreenRightClip
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $L81927

; 1750 : 			{
; 1751 : 				ClipLineTEX1(vert0, vert1, (ScreenRightClip - vert0->sx) / (vert1->sx - vert0->sx), ClipVert + ClipVertFree);

	movzx	eax, WORD PTR _ClipVertFree
	shl	eax, 5
	add	eax, OFFSET FLAT:_ClipVert
	push	eax
	mov	ecx, DWORD PTR _vert0$[ebp]
	fld	DWORD PTR ?ScreenRightClip@@3MA		; ScreenRightClip
	fsub	DWORD PTR [ecx]
	mov	edx, DWORD PTR _vert1$[ebp]
	mov	eax, DWORD PTR _vert0$[ebp]
	fld	DWORD PTR [edx]
	fsub	DWORD PTR [eax]
	fdivp	ST(1), ST(0)
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _vert1$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vert0$[ebp]
	push	edx
	call	?ClipLineTEX1@@YAXPAUVERTEX_TEX1@@0M0@Z	; ClipLineTEX1
	add	esp, 16					; 00000010H

; 1752 : 				ClipVertList[0][newcount++] = ClipVertFree++;

	movsx	eax, WORD PTR _newcount$[ebp]
	mov	cx, WORD PTR _ClipVertFree
	mov	WORD PTR _ClipVertList[eax*2], cx
	mov	dx, WORD PTR _newcount$[ebp]
	add	dx, 1
	mov	WORD PTR _newcount$[ebp], dx
	mov	ax, WORD PTR _ClipVertFree
	add	ax, 1
	mov	WORD PTR _ClipVertFree, ax
$L81927:

; 1753 : 			}
; 1754 : 		}
; 1755 : 		else

	jmp	SHORT $L81928
$L81926:

; 1756 : 		{
; 1757 : 			if (vert1->sx <= ScreenRightClip)

	mov	eax, DWORD PTR _vert1$[ebp]
	fld	DWORD PTR [eax]
	fcomp	DWORD PTR ?ScreenRightClip@@3MA		; ScreenRightClip
	fnstsw	ax
	test	ah, 65					; 00000041H
	jp	SHORT $L81928

; 1758 : 			{
; 1759 : 				ClipLineTEX1(vert1, vert0, (ScreenRightClip - vert1->sx) / (vert0->sx - vert1->sx), ClipVert + ClipVertFree);

	movzx	eax, WORD PTR _ClipVertFree
	shl	eax, 5
	add	eax, OFFSET FLAT:_ClipVert
	push	eax
	mov	ecx, DWORD PTR _vert1$[ebp]
	fld	DWORD PTR ?ScreenRightClip@@3MA		; ScreenRightClip
	fsub	DWORD PTR [ecx]
	mov	edx, DWORD PTR _vert0$[ebp]
	mov	eax, DWORD PTR _vert1$[ebp]
	fld	DWORD PTR [edx]
	fsub	DWORD PTR [eax]
	fdivp	ST(1), ST(0)
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _vert0$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vert1$[ebp]
	push	edx
	call	?ClipLineTEX1@@YAXPAUVERTEX_TEX1@@0M0@Z	; ClipLineTEX1
	add	esp, 16					; 00000010H

; 1760 : 				ClipVertList[0][newcount++] = ClipVertFree++;

	movsx	eax, WORD PTR _newcount$[ebp]
	mov	cx, WORD PTR _ClipVertFree
	mov	WORD PTR _ClipVertList[eax*2], cx
	mov	dx, WORD PTR _newcount$[ebp]
	add	dx, 1
	mov	WORD PTR _newcount$[ebp], dx
	mov	ax, WORD PTR _ClipVertFree
	add	ax, 1
	mov	WORD PTR _ClipVertFree, ax
$L81928:

; 1761 : 			}
; 1762 : 		}
; 1763 : 	}

	jmp	$L81924
$L81925:

; 1764 : 
; 1765 : 	ClipVertNum = newcount;

	mov	ax, WORD PTR _newcount$[ebp]
	mov	WORD PTR _ClipVertNum, ax

; 1766 : 
; 1767 : // draw
; 1768 : 
; 1769 : 	D3Ddevice->DrawIndexedPrimitive(D3DPT_TRIANGLEFAN, D3DFVF_TLVERTEX, ClipVert, 32, ClipVertList[0], ClipVertNum, D3DDP_DONOTUPDATEEXTENTS | D3DDP_DONOTCLIP);

	push	12					; 0000000cH
	movzx	eax, WORD PTR _ClipVertNum
	push	eax
	push	OFFSET FLAT:_ClipVertList
	push	32					; 00000020H
	push	OFFSET FLAT:_ClipVert
	push	452					; 000001c4H
	push	6
	mov	ecx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	eax
	call	DWORD PTR [edx+116]

; 1770 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?DrawFanClip@@YAXXZ ENDP				; DrawFanClip
_TEXT	ENDS
PUBLIC	?ClipLineTEX0@@YAXPAUVERTEX_TEX0@@0M0@Z		; ClipLineTEX0
; Function compile flags: /Odt /ZI
;	COMDAT ?ClipLineTEX0@@YAXPAUVERTEX_TEX0@@0M0@Z
_TEXT	SEGMENT
__temp$81941 = -24					; size = 4
_rgbout$ = -20						; size = 4
_rgb1$ = -16						; size = 4
_rgb0$ = -12						; size = 4
_zout$ = -8						; size = 4
_lmul$ = -4						; size = 4
_v0$ = 8						; size = 4
_v1$ = 12						; size = 4
_mul$ = 16						; size = 4
_out$ = 20						; size = 4
?ClipLineTEX0@@YAXPAUVERTEX_TEX0@@0M0@Z PROC NEAR	; ClipLineTEX0, COMDAT

; 1777 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	ebx
	push	esi
	push	edi

; 1778 : 	long lmul;
; 1779 : 	float zout;
; 1780 : 	MODEL_RGB *rgb0, *rgb1, *rgbout;
; 1781 : 
; 1782 : // clip xyz rhw
; 1783 : 
; 1784 : 	out->sx = v0->sx + (v1->sx - v0->sx) * mul;

	mov	eax, DWORD PTR _v1$[ebp]
	mov	ecx, DWORD PTR _v0$[ebp]
	fld	DWORD PTR [eax]
	fsub	DWORD PTR [ecx]
	fmul	DWORD PTR _mul$[ebp]
	mov	edx, DWORD PTR _v0$[ebp]
	fadd	DWORD PTR [edx]
	mov	eax, DWORD PTR _out$[ebp]
	fstp	DWORD PTR [eax]

; 1785 : 	out->sy = v0->sy + (v1->sy - v0->sy) * mul;

	mov	eax, DWORD PTR _v1$[ebp]
	mov	ecx, DWORD PTR _v0$[ebp]
	fld	DWORD PTR [eax+4]
	fsub	DWORD PTR [ecx+4]
	fmul	DWORD PTR _mul$[ebp]
	mov	edx, DWORD PTR _v0$[ebp]
	fadd	DWORD PTR [edx+4]
	mov	eax, DWORD PTR _out$[ebp]
	fstp	DWORD PTR [eax+4]

; 1786 : 	out->rhw = v0->rhw + (v1->rhw - v0->rhw) * mul;

	mov	eax, DWORD PTR _v1$[ebp]
	mov	ecx, DWORD PTR _v0$[ebp]
	fld	DWORD PTR [eax+12]
	fsub	DWORD PTR [ecx+12]
	fmul	DWORD PTR _mul$[ebp]
	mov	edx, DWORD PTR _v0$[ebp]
	fadd	DWORD PTR [edx+12]
	mov	eax, DWORD PTR _out$[ebp]
	fstp	DWORD PTR [eax+12]

; 1787 : 	zout = 1.0f / out->rhw;

	mov	eax, DWORD PTR _out$[ebp]
	fld	DWORD PTR __real@3f800000
	fdiv	DWORD PTR [eax+12]
	fstp	DWORD PTR _zout$[ebp]

; 1788 : 	out->sz = GET_ZBUFFER(zout);

	fld	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+36
	fmul	DWORD PTR _zout$[ebp]
	fdivr	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+44
	fsubr	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+40
	mov	eax, DWORD PTR _out$[ebp]
	fstp	DWORD PTR [eax+8]

; 1789 : 
; 1790 : // clip fog + rgb
; 1791 : 
; 1792 : 	FTOL(mul * 256, lmul);

	fld	DWORD PTR _mul$[ebp]
	fmul	DWORD PTR __real@43800000
	fadd	DWORD PTR __real@4b000000
	fstp	DWORD PTR __temp$81941[ebp]
	mov	eax, DWORD PTR __temp$81941[ebp]
	and	eax, 16777215				; 00ffffffH
	mov	DWORD PTR _lmul$[ebp], eax

; 1793 : 
; 1794 : 	out->specular = v0->specular + ((((v1->specular >> 24) - (v0->specular >> 24)) * lmul) << 16);

	mov	eax, DWORD PTR _v1$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	shr	ecx, 24					; 00000018H
	mov	edx, DWORD PTR _v0$[ebp]
	mov	eax, DWORD PTR [edx+20]
	shr	eax, 24					; 00000018H
	sub	ecx, eax
	imul	ecx, DWORD PTR _lmul$[ebp]
	shl	ecx, 16					; 00000010H
	mov	edx, DWORD PTR _v0$[ebp]
	add	ecx, DWORD PTR [edx+20]
	mov	eax, DWORD PTR _out$[ebp]
	mov	DWORD PTR [eax+20], ecx

; 1795 : 
; 1796 : 	rgb0 = (MODEL_RGB*)&v0->color;

	mov	eax, DWORD PTR _v0$[ebp]
	add	eax, 16					; 00000010H
	mov	DWORD PTR _rgb0$[ebp], eax

; 1797 : 	rgb1 = (MODEL_RGB*)&v1->color;

	mov	eax, DWORD PTR _v1$[ebp]
	add	eax, 16					; 00000010H
	mov	DWORD PTR _rgb1$[ebp], eax

; 1798 : 	rgbout = (MODEL_RGB*)&out->color;

	mov	eax, DWORD PTR _out$[ebp]
	add	eax, 16					; 00000010H
	mov	DWORD PTR _rgbout$[ebp], eax

; 1799 : 
; 1800 : 	rgbout->r = rgb0->r + (unsigned char)(((rgb1->r - rgb0->r) * lmul) >> 8);

	mov	eax, DWORD PTR _rgb0$[ebp]
	movzx	ecx, BYTE PTR [eax+2]
	mov	edx, DWORD PTR _rgb1$[ebp]
	movzx	eax, BYTE PTR [edx+2]
	mov	edx, DWORD PTR _rgb0$[ebp]
	movzx	edx, BYTE PTR [edx+2]
	sub	eax, edx
	imul	eax, DWORD PTR _lmul$[ebp]
	sar	eax, 8
	movzx	eax, al
	add	ecx, eax
	mov	edx, DWORD PTR _rgbout$[ebp]
	mov	BYTE PTR [edx+2], cl

; 1801 : 	rgbout->g = rgb0->g + (unsigned char)(((rgb1->g - rgb0->g) * lmul) >> 8);

	mov	eax, DWORD PTR _rgb0$[ebp]
	movzx	ecx, BYTE PTR [eax+1]
	mov	edx, DWORD PTR _rgb1$[ebp]
	movzx	eax, BYTE PTR [edx+1]
	mov	edx, DWORD PTR _rgb0$[ebp]
	movzx	edx, BYTE PTR [edx+1]
	sub	eax, edx
	imul	eax, DWORD PTR _lmul$[ebp]
	sar	eax, 8
	movzx	eax, al
	add	ecx, eax
	mov	edx, DWORD PTR _rgbout$[ebp]
	mov	BYTE PTR [edx+1], cl

; 1802 : 	rgbout->b = rgb0->b + (unsigned char)(((rgb1->b - rgb0->b) * lmul) >> 8);

	mov	eax, DWORD PTR _rgb0$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	edx, DWORD PTR _rgb1$[ebp]
	movzx	eax, BYTE PTR [edx]
	mov	edx, DWORD PTR _rgb0$[ebp]
	movzx	edx, BYTE PTR [edx]
	sub	eax, edx
	imul	eax, DWORD PTR _lmul$[ebp]
	sar	eax, 8
	movzx	eax, al
	add	ecx, eax
	mov	edx, DWORD PTR _rgbout$[ebp]
	mov	BYTE PTR [edx], cl

; 1803 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?ClipLineTEX0@@YAXPAUVERTEX_TEX0@@0M0@Z ENDP		; ClipLineTEX0
; Function compile flags: /Odt /ZI
_TEXT	ENDS
;	COMDAT ?ClipLineTEX1@@YAXPAUVERTEX_TEX1@@0M0@Z
_TEXT	SEGMENT
__temp$81964 = -36					; size = 4
_rgbout$ = -32						; size = 4
_rgb1$ = -28						; size = 4
_rgb0$ = -24						; size = 4
_zmul$ = -20						; size = 4
_zout$ = -16						; size = 4
_z1$ = -12						; size = 4
_z0$ = -8						; size = 4
_lmul$ = -4						; size = 4
_v0$ = 8						; size = 4
_v1$ = 12						; size = 4
_mul$ = 16						; size = 4
_out$ = 20						; size = 4
?ClipLineTEX1@@YAXPAUVERTEX_TEX1@@0M0@Z PROC NEAR	; ClipLineTEX1, COMDAT

; 1810 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 100				; 00000064H
	push	ebx
	push	esi
	push	edi

; 1811 : 	long lmul;
; 1812 : 	float z0, z1, zout, zmul;
; 1813 : 	MODEL_RGB *rgb0, *rgb1, *rgbout;
; 1814 : 
; 1815 : // clip xyz rhw
; 1816 : 
; 1817 : 	out->sx = v0->sx + (v1->sx - v0->sx) * mul;

	mov	eax, DWORD PTR _v1$[ebp]
	mov	ecx, DWORD PTR _v0$[ebp]
	fld	DWORD PTR [eax]
	fsub	DWORD PTR [ecx]
	fmul	DWORD PTR _mul$[ebp]
	mov	edx, DWORD PTR _v0$[ebp]
	fadd	DWORD PTR [edx]
	mov	eax, DWORD PTR _out$[ebp]
	fstp	DWORD PTR [eax]

; 1818 : 	out->sy = v0->sy + (v1->sy - v0->sy) * mul;

	mov	eax, DWORD PTR _v1$[ebp]
	mov	ecx, DWORD PTR _v0$[ebp]
	fld	DWORD PTR [eax+4]
	fsub	DWORD PTR [ecx+4]
	fmul	DWORD PTR _mul$[ebp]
	mov	edx, DWORD PTR _v0$[ebp]
	fadd	DWORD PTR [edx+4]
	mov	eax, DWORD PTR _out$[ebp]
	fstp	DWORD PTR [eax+4]

; 1819 : 	out->rhw = v0->rhw + (v1->rhw - v0->rhw) * mul;

	mov	eax, DWORD PTR _v1$[ebp]
	mov	ecx, DWORD PTR _v0$[ebp]
	fld	DWORD PTR [eax+12]
	fsub	DWORD PTR [ecx+12]
	fmul	DWORD PTR _mul$[ebp]
	mov	edx, DWORD PTR _v0$[ebp]
	fadd	DWORD PTR [edx+12]
	mov	eax, DWORD PTR _out$[ebp]
	fstp	DWORD PTR [eax+12]

; 1820 : 	zout = 1.0f / out->rhw;

	mov	eax, DWORD PTR _out$[ebp]
	fld	DWORD PTR __real@3f800000
	fdiv	DWORD PTR [eax+12]
	fstp	DWORD PTR _zout$[ebp]

; 1821 : 	out->sz = GET_ZBUFFER(zout);

	fld	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+36
	fmul	DWORD PTR _zout$[ebp]
	fdivr	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+44
	fsubr	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+40
	mov	eax, DWORD PTR _out$[ebp]
	fstp	DWORD PTR [eax+8]

; 1822 : 
; 1823 : // clip uv
; 1824 : 
; 1825 : 	z0 = 1.0f / v0->rhw;

	mov	eax, DWORD PTR _v0$[ebp]
	fld	DWORD PTR __real@3f800000
	fdiv	DWORD PTR [eax+12]
	fstp	DWORD PTR _z0$[ebp]

; 1826 : 	z1 = 1.0f / v1->rhw;

	mov	eax, DWORD PTR _v1$[ebp]
	fld	DWORD PTR __real@3f800000
	fdiv	DWORD PTR [eax+12]
	fstp	DWORD PTR _z1$[ebp]

; 1827 : 	zmul = (zout - z0) / (z1 - z0);

	fld	DWORD PTR _zout$[ebp]
	fsub	DWORD PTR _z0$[ebp]
	fld	DWORD PTR _z1$[ebp]
	fsub	DWORD PTR _z0$[ebp]
	fdivp	ST(1), ST(0)
	fstp	DWORD PTR _zmul$[ebp]

; 1828 : 
; 1829 : 	out->tu = v0->tu + (v1->tu - v0->tu) * zmul;

	mov	eax, DWORD PTR _v1$[ebp]
	mov	ecx, DWORD PTR _v0$[ebp]
	fld	DWORD PTR [eax+24]
	fsub	DWORD PTR [ecx+24]
	fmul	DWORD PTR _zmul$[ebp]
	mov	edx, DWORD PTR _v0$[ebp]
	fadd	DWORD PTR [edx+24]
	mov	eax, DWORD PTR _out$[ebp]
	fstp	DWORD PTR [eax+24]

; 1830 : 	out->tv = v0->tv + (v1->tv - v0->tv) * zmul;

	mov	eax, DWORD PTR _v1$[ebp]
	mov	ecx, DWORD PTR _v0$[ebp]
	fld	DWORD PTR [eax+28]
	fsub	DWORD PTR [ecx+28]
	fmul	DWORD PTR _zmul$[ebp]
	mov	edx, DWORD PTR _v0$[ebp]
	fadd	DWORD PTR [edx+28]
	mov	eax, DWORD PTR _out$[ebp]
	fstp	DWORD PTR [eax+28]

; 1831 : 
; 1832 : // clip fog + rgb
; 1833 : 
; 1834 : 	FTOL(mul * 256, lmul);

	fld	DWORD PTR _mul$[ebp]
	fmul	DWORD PTR __real@43800000
	fadd	DWORD PTR __real@4b000000
	fstp	DWORD PTR __temp$81964[ebp]
	mov	eax, DWORD PTR __temp$81964[ebp]
	and	eax, 16777215				; 00ffffffH
	mov	DWORD PTR _lmul$[ebp], eax

; 1835 : 
; 1836 : 	out->specular = v0->specular + ((((v1->specular >> 24) - (v0->specular >> 24)) * lmul) << 16);

	mov	eax, DWORD PTR _v1$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	shr	ecx, 24					; 00000018H
	mov	edx, DWORD PTR _v0$[ebp]
	mov	eax, DWORD PTR [edx+20]
	shr	eax, 24					; 00000018H
	sub	ecx, eax
	imul	ecx, DWORD PTR _lmul$[ebp]
	shl	ecx, 16					; 00000010H
	mov	edx, DWORD PTR _v0$[ebp]
	add	ecx, DWORD PTR [edx+20]
	mov	eax, DWORD PTR _out$[ebp]
	mov	DWORD PTR [eax+20], ecx

; 1837 : 
; 1838 : 	rgb0 = (MODEL_RGB*)&v0->color;

	mov	eax, DWORD PTR _v0$[ebp]
	add	eax, 16					; 00000010H
	mov	DWORD PTR _rgb0$[ebp], eax

; 1839 : 	rgb1 = (MODEL_RGB*)&v1->color;

	mov	eax, DWORD PTR _v1$[ebp]
	add	eax, 16					; 00000010H
	mov	DWORD PTR _rgb1$[ebp], eax

; 1840 : 	rgbout = (MODEL_RGB*)&out->color;

	mov	eax, DWORD PTR _out$[ebp]
	add	eax, 16					; 00000010H
	mov	DWORD PTR _rgbout$[ebp], eax

; 1841 : 
; 1842 : 	rgbout->r = rgb0->r + (unsigned char)(((rgb1->r - rgb0->r) * lmul) >> 8);

	mov	eax, DWORD PTR _rgb0$[ebp]
	movzx	ecx, BYTE PTR [eax+2]
	mov	edx, DWORD PTR _rgb1$[ebp]
	movzx	eax, BYTE PTR [edx+2]
	mov	edx, DWORD PTR _rgb0$[ebp]
	movzx	edx, BYTE PTR [edx+2]
	sub	eax, edx
	imul	eax, DWORD PTR _lmul$[ebp]
	sar	eax, 8
	movzx	eax, al
	add	ecx, eax
	mov	edx, DWORD PTR _rgbout$[ebp]
	mov	BYTE PTR [edx+2], cl

; 1843 : 	rgbout->g = rgb0->g + (unsigned char)(((rgb1->g - rgb0->g) * lmul) >> 8);

	mov	eax, DWORD PTR _rgb0$[ebp]
	movzx	ecx, BYTE PTR [eax+1]
	mov	edx, DWORD PTR _rgb1$[ebp]
	movzx	eax, BYTE PTR [edx+1]
	mov	edx, DWORD PTR _rgb0$[ebp]
	movzx	edx, BYTE PTR [edx+1]
	sub	eax, edx
	imul	eax, DWORD PTR _lmul$[ebp]
	sar	eax, 8
	movzx	eax, al
	add	ecx, eax
	mov	edx, DWORD PTR _rgbout$[ebp]
	mov	BYTE PTR [edx+1], cl

; 1844 : 	rgbout->b = rgb0->b + (unsigned char)(((rgb1->b - rgb0->b) * lmul) >> 8);

	mov	eax, DWORD PTR _rgb0$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	edx, DWORD PTR _rgb1$[ebp]
	movzx	eax, BYTE PTR [edx]
	mov	edx, DWORD PTR _rgb0$[ebp]
	movzx	edx, BYTE PTR [edx]
	sub	eax, edx
	imul	eax, DWORD PTR _lmul$[ebp]
	sar	eax, 8
	movzx	eax, al
	add	ecx, eax
	mov	edx, DWORD PTR _rgbout$[ebp]
	mov	BYTE PTR [edx], cl

; 1845 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?ClipLineTEX1@@YAXPAUVERTEX_TEX1@@0M0@Z ENDP		; ClipLineTEX1
_TEXT	ENDS
PUBLIC	??_C@_02GMLFBBN@wb?$AA@				; `string'
PUBLIC	?SaveFrontBuffer@@YAXPAD@Z			; SaveFrontBuffer
EXTRN	_fclose:NEAR
EXTRN	_fopen:NEAR
EXTRN	_fwrite:NEAR
EXTRN	?FrontBuffer@@3PAUIDirectDrawSurface4@@A:DWORD	; FrontBuffer
;	COMDAT ??_C@_02GMLFBBN@wb?$AA@
CONST	SEGMENT
??_C@_02GMLFBBN@wb?$AA@ DB 'wb', 00H			; `string'
; Function compile flags: /Odt /ZI
CONST	ENDS
;	COMDAT ?SaveFrontBuffer@@YAXPAD@Z
_TEXT	SEGMENT
_outbuf$ = -3408					; size = 3200
_b$ = -208						; size = 2
_g$ = -204						; size = 2
_r$ = -200						; size = 2
_p$ = -196						; size = 4
_x$ = -192						; size = 4
_y$ = -188						; size = 4
_fp$ = -184						; size = 4
_bi$ = -180						; size = 40
_bf$ = -140						; size = 14
_ddsd$ = -124						; size = 124
_file$ = 8						; size = 4
?SaveFrontBuffer@@YAXPAD@Z PROC NEAR			; SaveFrontBuffer, COMDAT

; 1852 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 3472				; 00000d90H
	push	ebx
	push	esi
	push	edi

; 1853 : 	DDSURFACEDESC2 ddsd;
; 1854 : 	BITMAPFILEHEADER bf;
; 1855 : 	BITMAPINFOHEADER bi;
; 1856 : 	FILE *fp;
; 1857 : 	DWORD y, x;
; 1858 : 	short *p, r, g, b;
; 1859 : 	short outbuf[1600];
; 1860 : 
; 1861 : // open file
; 1862 : 
; 1863 : 	fp = fopen(file, "wb");

	push	OFFSET FLAT:??_C@_02GMLFBBN@wb?$AA@
	mov	eax, DWORD PTR _file$[ebp]
	push	eax
	call	_fopen
	add	esp, 8
	mov	DWORD PTR _fp$[ebp], eax

; 1864 : 	if (!fp) return;

	cmp	DWORD PTR _fp$[ebp], 0
	jne	SHORT $L81988
	jmp	$L81975
$L81988:

; 1865 : 
; 1866 : // lock front buffer
; 1867 : 
; 1868 : 	ddsd.dwSize = sizeof(ddsd);

	mov	DWORD PTR _ddsd$[ebp], 124		; 0000007cH
$L81990:

; 1869 : 	while (FrontBuffer->Lock(NULL, &ddsd, DDLOCK_SURFACEMEMORYPTR | DDLOCK_WAIT, NULL) != DD_OK);

	push	0
	push	1
	lea	eax, DWORD PTR _ddsd$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR ?FrontBuffer@@3PAUIDirectDrawSurface4@@A ; FrontBuffer
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?FrontBuffer@@3PAUIDirectDrawSurface4@@A ; FrontBuffer
	push	eax
	call	DWORD PTR [edx+100]
	test	eax, eax
	je	SHORT $L81991
	jmp	SHORT $L81990
$L81991:

; 1870 : 
; 1871 : // write header
; 1872 : 
; 1873 : 	bf.bfType = MAKEWORD((BYTE)'B',(BYTE)'M');

	mov	WORD PTR _bf$[ebp], 19778		; 00004d42H

; 1874 : 	bf.bfSize = sizeof(bf) + sizeof(bi) + ScreenXsize * ScreenYsize * sizeof(short);

	mov	eax, DWORD PTR ?ScreenXsize@@3KA	; ScreenXsize
	imul	eax, DWORD PTR ?ScreenYsize@@3KA	; ScreenYsize
	lea	ecx, DWORD PTR [eax+eax+54]
	mov	DWORD PTR _bf$[ebp+2], ecx

; 1875 : 	bf.bfReserved1 = 0;

	mov	WORD PTR _bf$[ebp+6], 0

; 1876 : 	bf.bfReserved2 = 0;

	mov	WORD PTR _bf$[ebp+8], 0

; 1877 : 	bf.bfOffBits = sizeof(bf) + sizeof(bi);

	mov	DWORD PTR _bf$[ebp+10], 54		; 00000036H

; 1878 : 
; 1879 : 	fwrite(&bf, sizeof(bf), 1, fp);

	mov	eax, DWORD PTR _fp$[ebp]
	push	eax
	push	1
	push	14					; 0000000eH
	lea	ecx, DWORD PTR _bf$[ebp]
	push	ecx
	call	_fwrite
	add	esp, 16					; 00000010H

; 1880 : 
; 1881 : 	bi.biSize = sizeof(BITMAPINFOHEADER);

	mov	DWORD PTR _bi$[ebp], 40			; 00000028H

; 1882 : 	bi.biWidth = ScreenXsize;

	mov	eax, DWORD PTR ?ScreenXsize@@3KA	; ScreenXsize
	mov	DWORD PTR _bi$[ebp+4], eax

; 1883 : 	bi.biHeight = ScreenYsize;

	mov	eax, DWORD PTR ?ScreenYsize@@3KA	; ScreenYsize
	mov	DWORD PTR _bi$[ebp+8], eax

; 1884 : 	bi.biPlanes = 1;

	mov	WORD PTR _bi$[ebp+12], 1

; 1885 : 	bi.biBitCount = 16;

	mov	WORD PTR _bi$[ebp+14], 16		; 00000010H

; 1886 : 	bi.biCompression = BI_RGB;

	mov	DWORD PTR _bi$[ebp+16], 0

; 1887 : 	bi.biSizeImage = 0;

	mov	DWORD PTR _bi$[ebp+20], 0

; 1888 : 	bi.biXPelsPerMeter = 0;

	mov	DWORD PTR _bi$[ebp+24], 0

; 1889 : 	bi.biYPelsPerMeter = 0;

	mov	DWORD PTR _bi$[ebp+28], 0

; 1890 : 	bi.biClrUsed = 0;

	mov	DWORD PTR _bi$[ebp+32], 0

; 1891 : 	bi.biClrImportant = 0;

	mov	DWORD PTR _bi$[ebp+36], 0

; 1892 : 
; 1893 : 	fwrite(&bi, sizeof(bi), 1, fp);

	mov	eax, DWORD PTR _fp$[ebp]
	push	eax
	push	1
	push	40					; 00000028H
	lea	ecx, DWORD PTR _bi$[ebp]
	push	ecx
	call	_fwrite
	add	esp, 16					; 00000010H

; 1894 : 
; 1895 : // write buffer
; 1896 : 
; 1897 : 	p = (short*)ddsd.lpSurface;

	mov	eax, DWORD PTR _ddsd$[ebp+36]
	mov	DWORD PTR _p$[ebp], eax

; 1898 : 	p += ddsd.lPitch * (ScreenYsize - 1) / 2;

	mov	eax, DWORD PTR ?ScreenYsize@@3KA	; ScreenYsize
	sub	eax, 1
	imul	eax, DWORD PTR _ddsd$[ebp+16]
	shr	eax, 1
	mov	ecx, DWORD PTR _p$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2]
	mov	DWORD PTR _p$[ebp], edx

; 1899 : 
; 1900 : 	if (ddsd.ddpfPixelFormat.dwGBitMask & 1024)

	mov	eax, DWORD PTR _ddsd$[ebp+92]
	and	eax, 1024				; 00000400H
	je	$L82003

; 1901 : 	{
; 1902 : 		for (y = 0 ; y < ScreenYsize ; y++)

	mov	DWORD PTR _y$[ebp], 0
	jmp	SHORT $L82004
$L82005:
	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 1
	mov	DWORD PTR _y$[ebp], eax
$L82004:
	mov	eax, DWORD PTR _y$[ebp]
	cmp	eax, DWORD PTR ?ScreenYsize@@3KA	; ScreenYsize
	jae	$L82006

; 1903 : 		{
; 1904 : 			for (x = 0 ; x < ScreenXsize ; x++)

	mov	DWORD PTR _x$[ebp], 0
	jmp	SHORT $L82007
$L82008:
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, 1
	mov	DWORD PTR _x$[ebp], eax
$L82007:
	mov	eax, DWORD PTR _x$[ebp]
	cmp	eax, DWORD PTR ?ScreenXsize@@3KA	; ScreenXsize
	jae	$L82009

; 1905 : 			{
; 1906 : 				b = p[x] & 31;

	mov	eax, DWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	movsx	edx, WORD PTR [ecx+eax*2]
	and	edx, 31					; 0000001fH
	mov	WORD PTR _b$[ebp], dx

; 1907 : 				g = (p[x] >> 6) & 31;

	mov	eax, DWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	movsx	edx, WORD PTR [ecx+eax*2]
	sar	edx, 6
	and	edx, 31					; 0000001fH
	mov	WORD PTR _g$[ebp], dx

; 1908 : 				r = (p[x] >> 11) & 31;

	mov	eax, DWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	movsx	edx, WORD PTR [ecx+eax*2]
	sar	edx, 11					; 0000000bH
	and	edx, 31					; 0000001fH
	mov	WORD PTR _r$[ebp], dx

; 1909 : 				outbuf[x] = b | (g << 5) | (r << 10);

	movsx	eax, WORD PTR _b$[ebp]
	movsx	ecx, WORD PTR _g$[ebp]
	shl	ecx, 5
	or	eax, ecx
	movsx	edx, WORD PTR _r$[ebp]
	shl	edx, 10					; 0000000aH
	or	eax, edx
	mov	ecx, DWORD PTR _x$[ebp]
	mov	WORD PTR _outbuf$[ebp+ecx*2], ax

; 1910 : 			}

	jmp	$L82008
$L82009:

; 1911 : 			fwrite(outbuf, sizeof(short), ScreenXsize, fp);

	mov	eax, DWORD PTR _fp$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?ScreenXsize@@3KA	; ScreenXsize
	push	ecx
	push	2
	lea	edx, DWORD PTR _outbuf$[ebp]
	push	edx
	call	_fwrite
	add	esp, 16					; 00000010H

; 1912 : 			p -= ddsd.lPitch / 2;

	mov	eax, DWORD PTR _ddsd$[ebp+16]
	cdq
	sub	eax, edx
	sar	eax, 1
	shl	eax, 1
	mov	ecx, DWORD PTR _p$[ebp]
	sub	ecx, eax
	mov	DWORD PTR _p$[ebp], ecx

; 1913 : 		}

	jmp	$L82005
$L82006:

; 1914 : 	}
; 1915 : 	else

	jmp	SHORT $L82011
$L82003:

; 1916 : 	{
; 1917 : 		for (y = 0 ; y < ScreenYsize ; y++)

	mov	DWORD PTR _y$[ebp], 0
	jmp	SHORT $L82012
$L82013:
	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 1
	mov	DWORD PTR _y$[ebp], eax
$L82012:
	mov	eax, DWORD PTR _y$[ebp]
	cmp	eax, DWORD PTR ?ScreenYsize@@3KA	; ScreenYsize
	jae	SHORT $L82011

; 1918 : 		{
; 1919 : 			fwrite(p, sizeof(short), ScreenXsize, fp);

	mov	eax, DWORD PTR _fp$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?ScreenXsize@@3KA	; ScreenXsize
	push	ecx
	push	2
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	call	_fwrite
	add	esp, 16					; 00000010H

; 1920 : 			p -= ddsd.lPitch / 2;

	mov	eax, DWORD PTR _ddsd$[ebp+16]
	cdq
	sub	eax, edx
	sar	eax, 1
	shl	eax, 1
	mov	ecx, DWORD PTR _p$[ebp]
	sub	ecx, eax
	mov	DWORD PTR _p$[ebp], ecx

; 1921 : 		}

	jmp	SHORT $L82013
$L82011:

; 1922 : 	}
; 1923 : 
; 1924 : // unlock front buffer
; 1925 : 
; 1926 : 	FrontBuffer->Unlock(NULL);

	push	0
	mov	eax, DWORD PTR ?FrontBuffer@@3PAUIDirectDrawSurface4@@A ; FrontBuffer
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?FrontBuffer@@3PAUIDirectDrawSurface4@@A ; FrontBuffer
	push	edx
	call	DWORD PTR [ecx+128]

; 1927 : 
; 1928 : // close file
; 1929 : 
; 1930 : 	fclose(fp);

	mov	eax, DWORD PTR _fp$[ebp]
	push	eax
	call	_fclose
	add	esp, 4
$L81975:

; 1931 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?SaveFrontBuffer@@YAXPAD@Z ENDP				; SaveFrontBuffer
_TEXT	ENDS
PUBLIC	?ResetMeshFxList@@YAXXZ				; ResetMeshFxList
; Function compile flags: /Odt /ZI
;	COMDAT ?ResetMeshFxList@@YAXXZ
_TEXT	SEGMENT
?ResetMeshFxList@@YAXXZ PROC NEAR			; ResetMeshFxList, COMDAT

; 1938 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 1939 : 	WorldMeshFxCount = 0;

	mov	DWORD PTR ?WorldMeshFxCount@@3JA, 0	; WorldMeshFxCount

; 1940 : 	ModelMeshFxCount = 0;

	mov	DWORD PTR ?ModelMeshFxCount@@3JA, 0	; ModelMeshFxCount

; 1941 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?ResetMeshFxList@@YAXXZ ENDP				; ResetMeshFxList
_TEXT	ENDS
PUBLIC	?AddWorldMeshFx@@YAXP6AXPAX@Z0@Z		; AddWorldMeshFx
; Function compile flags: /Odt /ZI
;	COMDAT ?AddWorldMeshFx@@YAXP6AXPAX@Z0@Z
_TEXT	SEGMENT
_checker$ = 8						; size = 4
_data$ = 12						; size = 4
?AddWorldMeshFx@@YAXP6AXPAX@Z0@Z PROC NEAR		; AddWorldMeshFx, COMDAT

; 1948 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 1949 : 
; 1950 : // quit if full
; 1951 : 
; 1952 : 	if (WorldMeshFxCount >= MAX_WORLD_MESH_FX)

	cmp	DWORD PTR ?WorldMeshFxCount@@3JA, 32	; WorldMeshFxCount, 00000020H
	jl	SHORT $L82024

; 1953 : 		return;

	jmp	SHORT $L82023
$L82024:

; 1954 : 
; 1955 : // add
; 1956 : 
; 1957 : 	WorldMeshFx[WorldMeshFxCount].Checker = checker;

	mov	eax, DWORD PTR ?WorldMeshFxCount@@3JA	; WorldMeshFxCount
	mov	ecx, DWORD PTR _checker$[ebp]
	mov	DWORD PTR ?WorldMeshFx@@3PAUWORLD_MESH_FX@@A[eax*8], ecx

; 1958 : 	WorldMeshFx[WorldMeshFxCount].Data = data;

	mov	eax, DWORD PTR ?WorldMeshFxCount@@3JA	; WorldMeshFxCount
	mov	ecx, DWORD PTR _data$[ebp]
	mov	DWORD PTR ?WorldMeshFx@@3PAUWORLD_MESH_FX@@A[eax*8+4], ecx

; 1959 : 	WorldMeshFxCount++;

	mov	eax, DWORD PTR ?WorldMeshFxCount@@3JA	; WorldMeshFxCount
	add	eax, 1
	mov	DWORD PTR ?WorldMeshFxCount@@3JA, eax	; WorldMeshFxCount
$L82023:

; 1960 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?AddWorldMeshFx@@YAXP6AXPAX@Z0@Z ENDP			; AddWorldMeshFx
_TEXT	ENDS
PUBLIC	?AddModelMeshFx@@YAXP6AXPAX@Z0@Z		; AddModelMeshFx
; Function compile flags: /Odt /ZI
;	COMDAT ?AddModelMeshFx@@YAXP6AXPAX@Z0@Z
_TEXT	SEGMENT
_checker$ = 8						; size = 4
_data$ = 12						; size = 4
?AddModelMeshFx@@YAXP6AXPAX@Z0@Z PROC NEAR		; AddModelMeshFx, COMDAT

; 1967 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 1968 : 
; 1969 : // quit if full
; 1970 : 
; 1971 : 	if (ModelMeshFxCount >= MAX_MODEL_MESH_FX)

	cmp	DWORD PTR ?ModelMeshFxCount@@3JA, 32	; ModelMeshFxCount, 00000020H
	jl	SHORT $L82030

; 1972 : 		return;

	jmp	SHORT $L82029
$L82030:

; 1973 : 
; 1974 : // add
; 1975 : 
; 1976 : 	ModelMeshFx[ModelMeshFxCount].Checker = checker;

	mov	eax, DWORD PTR ?ModelMeshFxCount@@3JA	; ModelMeshFxCount
	mov	ecx, DWORD PTR _checker$[ebp]
	mov	DWORD PTR ?ModelMeshFx@@3PAUMODEL_MESH_FX@@A[eax*8], ecx

; 1977 : 	ModelMeshFx[ModelMeshFxCount].Data = data;

	mov	eax, DWORD PTR ?ModelMeshFxCount@@3JA	; ModelMeshFxCount
	mov	ecx, DWORD PTR _data$[ebp]
	mov	DWORD PTR ?ModelMeshFx@@3PAUMODEL_MESH_FX@@A[eax*8+4], ecx

; 1978 : 	ModelMeshFxCount++;

	mov	eax, DWORD PTR ?ModelMeshFxCount@@3JA	; ModelMeshFxCount
	add	eax, 1
	mov	DWORD PTR ?ModelMeshFxCount@@3JA, eax	; ModelMeshFxCount
$L82029:

; 1979 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?AddModelMeshFx@@YAXP6AXPAX@Z0@Z ENDP			; AddModelMeshFx
_TEXT	ENDS
PUBLIC	__real@46fffe00
PUBLIC	__real@40800000
PUBLIC	__real@40000000
PUBLIC	?InitJumpSparkOffsets@@YAXXZ			; InitJumpSparkOffsets
EXTRN	_rand:NEAR
_BSS	SEGMENT
_JumpSparkOffset DB 0180H DUP (?)
_BSS	ENDS
;	COMDAT __real@46fffe00
CONST	SEGMENT
__real@46fffe00 DD 046fffe00r			; 32767
CONST	ENDS
;	COMDAT __real@40800000
CONST	SEGMENT
__real@40800000 DD 040800000r			; 4
CONST	ENDS
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
; Function compile flags: /Odt /ZI
CONST	ENDS
;	COMDAT ?InitJumpSparkOffsets@@YAXXZ
_TEXT	SEGMENT
tv132 = -72						; size = 4
tv129 = -72						; size = 4
tv94 = -72						; size = 4
_i$ = -4						; size = 4
?InitJumpSparkOffsets@@YAXXZ PROC NEAR			; InitJumpSparkOffsets, COMDAT

; 1986 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi

; 1987 : 	long i;
; 1988 : 
; 1989 : 	for (i = 0 ; i < JUMPSPARK_OFFSET_NUM ; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $L82035
$L82036:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$L82035:
	cmp	DWORD PTR _i$[ebp], 32			; 00000020H
	jge	$L82033

; 1990 : 	{
; 1991 : 		SetVector(&JumpSparkOffset[i], frand(4.0f) - 2.0f, frand(4.0f) - 2.0f, frand(4.0f) - 2.0f);

	call	_rand
	mov	DWORD PTR tv94[ebp], eax
	fild	DWORD PTR tv94[ebp]
	fdiv	DWORD PTR __real@46fffe00
	fmul	DWORD PTR __real@40800000
	fsub	DWORD PTR __real@40000000
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 12					; 0000000cH
	fstp	DWORD PTR _JumpSparkOffset[eax]
	call	_rand
	mov	DWORD PTR tv129[ebp], eax
	fild	DWORD PTR tv129[ebp]
	fdiv	DWORD PTR __real@46fffe00
	fmul	DWORD PTR __real@40800000
	fsub	DWORD PTR __real@40000000
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 12					; 0000000cH
	fstp	DWORD PTR _JumpSparkOffset[eax+4]
	call	_rand
	mov	DWORD PTR tv132[ebp], eax
	fild	DWORD PTR tv132[ebp]
	fdiv	DWORD PTR __real@46fffe00
	fmul	DWORD PTR __real@40800000
	fsub	DWORD PTR __real@40000000
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 12					; 0000000cH
	fstp	DWORD PTR _JumpSparkOffset[eax+8]

; 1992 : 	}

	jmp	$L82036
$L82033:

; 1993 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?InitJumpSparkOffsets@@YAXXZ ENDP			; InitJumpSparkOffsets
_TEXT	ENDS
PUBLIC	?sin@@YAMM@Z					; sin
PUBLIC	?sqrt@@YAMM@Z					; sqrt
PUBLIC	__real@41000000
PUBLIC	__real@42c80000
PUBLIC	__real@40c00000
PUBLIC	__real@41100000
PUBLIC	__real@43960000
PUBLIC	__real@40400000
PUBLIC	__real@3f400000
PUBLIC	__real@41c80000
PUBLIC	__real@461c4000
PUBLIC	?DrawJumpSpark@@YAXPAUVectorStruct@@0@Z		; DrawJumpSpark
EXTRN	?TimerCurrent@@3KA:DWORD			; TimerCurrent
EXTRN	?TimerFreq@@3KA:DWORD				; TimerFreq
EXTRN	?ViewCameraMatrix@@3TMatrixUnion@@A:BYTE	; ViewCameraMatrix
EXTRN	?RotMatrixZ@@YAXPATMatrixUnion@@M@Z:NEAR	; RotMatrixZ
_BSS	SEGMENT
_JumpSparkTime DD 01H DUP (?)
_JumpSparkOff DD 01H DUP (?)
_JumpSparkSinTime DD 01H DUP (?)
_JumpSparkSinDiv DD 01H DUP (?)
_BSS	ENDS
;	COMDAT __real@41000000
CONST	SEGMENT
__real@41000000 DD 041000000r			; 8
CONST	ENDS
;	COMDAT __real@42c80000
CONST	SEGMENT
__real@42c80000 DD 042c80000r			; 100
CONST	ENDS
;	COMDAT __real@40c00000
CONST	SEGMENT
__real@40c00000 DD 040c00000r			; 6
CONST	ENDS
;	COMDAT __real@41100000
CONST	SEGMENT
__real@41100000 DD 041100000r			; 9
CONST	ENDS
;	COMDAT __real@43960000
CONST	SEGMENT
__real@43960000 DD 043960000r			; 300
CONST	ENDS
;	COMDAT __real@40400000
CONST	SEGMENT
__real@40400000 DD 040400000r			; 3
CONST	ENDS
;	COMDAT __real@3f400000
CONST	SEGMENT
__real@3f400000 DD 03f400000r			; 0.75
CONST	ENDS
;	COMDAT __real@41c80000
CONST	SEGMENT
__real@41c80000 DD 041c80000r			; 25
CONST	ENDS
;	COMDAT __real@461c4000
CONST	SEGMENT
__real@461c4000 DD 0461c4000r			; 10000
; Function compile flags: /Odt /ZI
CONST	ENDS
;	COMDAT ?DrawJumpSpark@@YAXPAUVectorStruct@@0@Z
_TEXT	SEGMENT
tv871 = -2360						; size = 8
tv701 = -2360						; size = 8
tv674 = -2360						; size = 8
tv864 = -2352						; size = 8
tv858 = -2352						; size = 8
tv694 = -2352						; size = 8
tv667 = -2352						; size = 8
tv691 = -2348						; size = 4
__mul$82078 = -2280					; size = 4
__temp$82073 = -2276					; size = 4
_mat$ = -2272						; size = 36
_poly$ = -2236						; size = 32
_verts$ = -2204						; size = 4
_points$ = -2200					; size = 1560
_dy$ = -640						; size = 256
_dx$ = -384						; size = 256
_smul$ = -128						; size = 4
_sadd$ = -124						; size = 4
_s$ = -120						; size = 4
_ang$ = -116						; size = 4
_dy2$ = -112						; size = 4
_dx2$ = -108						; size = 4
_dy1$ = -104						; size = 4
_dx1$ = -100						; size = 4
_mul$ = -96						; size = 4
_fsteps$ = -92						; size = 4
_len$ = -88						; size = 4
_svec$ = -84						; size = 12
_end$ = -72						; size = 12
_start$ = -60						; size = 12
_vec$ = -48						; size = 12
_pos$ = -36						; size = 12
_delta$ = -24						; size = 12
_offset$ = -12						; size = 4
_steps$ = -8						; size = 4
_i$ = -4						; size = 4
_v1$ = 8						; size = 4
_v2$ = 12						; size = 4
?DrawJumpSpark@@YAXPAUVectorStruct@@0@Z PROC NEAR	; DrawJumpSpark, COMDAT

; 2000 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 2360				; 00000938H
	push	ebx
	push	esi
	push	edi

; 2001 : 	long i, steps, offset;
; 2002 : 	VEC delta, pos, vec, start, end, svec;
; 2003 : 	REAL len, fsteps, mul, dx1, dy1, dx2, dy2, ang, s, sadd, smul;
; 2004 : 	REAL dx[JUMPSPARK_STEP_MAX], dy[JUMPSPARK_STEP_MAX];
; 2005 : 	VERTEX_TEX0 points[JUMPSPARK_STEP_MAX + 1];
; 2006 : 	VERTEX_TEX1 *verts;
; 2007 : 	FACING_POLY poly;
; 2008 : 	MAT mat;
; 2009 : 
; 2010 : // calc steps
; 2011 : 
; 2012 : 	SubVector(v2, v1, &delta);

	mov	eax, DWORD PTR _v2$[ebp]
	mov	ecx, DWORD PTR _v1$[ebp]
	fld	DWORD PTR [eax]
	fsub	DWORD PTR [ecx]
	fstp	DWORD PTR _delta$[ebp]
	mov	eax, DWORD PTR _v2$[ebp]
	mov	ecx, DWORD PTR _v1$[ebp]
	fld	DWORD PTR [eax+4]
	fsub	DWORD PTR [ecx+4]
	fstp	DWORD PTR _delta$[ebp+4]
	mov	eax, DWORD PTR _v2$[ebp]
	mov	ecx, DWORD PTR _v1$[ebp]
	fld	DWORD PTR [eax+8]
	fsub	DWORD PTR [ecx+8]
	fstp	DWORD PTR _delta$[ebp+8]

; 2013 : 	len = Length(&delta);

	fld	DWORD PTR _delta$[ebp]
	fmul	DWORD PTR _delta$[ebp]
	fld	DWORD PTR _delta$[ebp+4]
	fmul	DWORD PTR _delta$[ebp+4]
	faddp	ST(1), ST(0)
	fld	DWORD PTR _delta$[ebp+8]
	fmul	DWORD PTR _delta$[ebp+8]
	faddp	ST(1), ST(0)
	push	ecx
	fstp	DWORD PTR [esp]
	call	?sqrt@@YAMM@Z				; sqrt
	add	esp, 4
	fstp	DWORD PTR _len$[ebp]

; 2014 : 	fsteps = len / JUMPSPARK_STEP_LEN;

	fld	DWORD PTR _len$[ebp]
	fdiv	DWORD PTR __real@41000000
	fstp	DWORD PTR _fsteps$[ebp]

; 2015 : 	if (fsteps > JUMPSPARK_STEP_MAX)

	fld	DWORD PTR _fsteps$[ebp]
	fcomp	DWORD PTR __real@42800000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $L82072

; 2016 : 		fsteps = JUMPSPARK_STEP_MAX;

	mov	DWORD PTR _fsteps$[ebp], 1115684864	; 42800000H
$L82072:

; 2017 : 
; 2018 : 	FTOL(fsteps, steps);

	fld	DWORD PTR _fsteps$[ebp]
	fadd	DWORD PTR __real@4b000000
	fstp	DWORD PTR __temp$82073[ebp]
	mov	eax, DWORD PTR __temp$82073[ebp]
	and	eax, 16777215				; 00ffffffH
	mov	DWORD PTR _steps$[ebp], eax

; 2019 : 	fsteps = (float)steps;

	fild	DWORD PTR _steps$[ebp]
	fstp	DWORD PTR _fsteps$[ebp]

; 2020 : 
; 2021 : // build screen xyz's
; 2022 : 
; 2023 : 	CopyVec(v1, &pos);

	mov	eax, DWORD PTR _v1$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _pos$[ebp], ecx
	mov	eax, DWORD PTR _v1$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _pos$[ebp+4], ecx
	mov	eax, DWORD PTR _v1$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _pos$[ebp+8], ecx

; 2024 : 	mul = 1.0f / fsteps;

	fld	DWORD PTR __real@3f800000
	fdiv	DWORD PTR _fsteps$[ebp]
	fstp	DWORD PTR _mul$[ebp]

; 2025 : 	VecMulScalar(&delta, mul);

	fld	DWORD PTR _delta$[ebp]
	fmul	DWORD PTR _mul$[ebp]
	fstp	DWORD PTR _delta$[ebp]
	fld	DWORD PTR _delta$[ebp+4]
	fmul	DWORD PTR _mul$[ebp]
	fstp	DWORD PTR _delta$[ebp+4]
	fld	DWORD PTR _delta$[ebp+8]
	fmul	DWORD PTR _mul$[ebp]
	fstp	DWORD PTR _delta$[ebp+8]

; 2026 : 
; 2027 : 	i = TIME2MS(TimerCurrent) / 20;

	mov	eax, DWORD PTR ?TimerFreq@@3KA		; TimerFreq
	xor	edx, edx
	mov	ecx, 1000				; 000003e8H
	div	ecx
	mov	ecx, eax
	mov	eax, DWORD PTR ?TimerCurrent@@3KA	; TimerCurrent
	xor	edx, edx
	div	ecx
	xor	edx, edx
	mov	ecx, 20					; 00000014H
	div	ecx
	mov	DWORD PTR _i$[ebp], eax

; 2028 : 	if (i != JumpSparkTime)

	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _JumpSparkTime
	je	SHORT $L82077

; 2029 : 	{
; 2030 : 		JumpSparkTime = i;

	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR _JumpSparkTime, eax

; 2031 : 		JumpSparkOff = rand() % JUMPSPARK_OFFSET_NUM;

	call	_rand
	and	eax, -2147483617			; 8000001fH
	jns	SHORT $L82459
	dec	eax
	or	eax, -32				; ffffffe0H
	inc	eax
$L82459:
	mov	DWORD PTR _JumpSparkOff, eax
$L82077:

; 2032 : 	}
; 2033 : 
; 2034 : 	offset = JumpSparkOff;

	mov	eax, DWORD PTR _JumpSparkOff
	mov	DWORD PTR _offset$[ebp], eax

; 2035 : 
; 2036 : 	CrossProduct(&delta, &ViewCameraMatrix.mv[U], &vec);

	fld	DWORD PTR _delta$[ebp+4]
	fmul	DWORD PTR ?ViewCameraMatrix@@3TMatrixUnion@@A+20
	fld	DWORD PTR _delta$[ebp+8]
	fmul	DWORD PTR ?ViewCameraMatrix@@3TMatrixUnion@@A+16
	fsubp	ST(1), ST(0)
	fstp	DWORD PTR _vec$[ebp]
	fld	DWORD PTR _delta$[ebp+8]
	fmul	DWORD PTR ?ViewCameraMatrix@@3TMatrixUnion@@A+12
	fld	DWORD PTR _delta$[ebp]
	fmul	DWORD PTR ?ViewCameraMatrix@@3TMatrixUnion@@A+20
	fsubp	ST(1), ST(0)
	fstp	DWORD PTR _vec$[ebp+4]
	fld	DWORD PTR _delta$[ebp]
	fmul	DWORD PTR ?ViewCameraMatrix@@3TMatrixUnion@@A+16
	fld	DWORD PTR _delta$[ebp+4]
	fmul	DWORD PTR ?ViewCameraMatrix@@3TMatrixUnion@@A+12
	fsubp	ST(1), ST(0)
	fstp	DWORD PTR _vec$[ebp+8]

; 2037 : 	CrossProduct(&vec, &delta, &svec);

	fld	DWORD PTR _vec$[ebp+4]
	fmul	DWORD PTR _delta$[ebp+8]
	fld	DWORD PTR _vec$[ebp+8]
	fmul	DWORD PTR _delta$[ebp+4]
	fsubp	ST(1), ST(0)
	fstp	DWORD PTR _svec$[ebp]
	fld	DWORD PTR _vec$[ebp+8]
	fmul	DWORD PTR _delta$[ebp]
	fld	DWORD PTR _vec$[ebp]
	fmul	DWORD PTR _delta$[ebp+8]
	fsubp	ST(1), ST(0)
	fstp	DWORD PTR _svec$[ebp+4]
	fld	DWORD PTR _vec$[ebp]
	fmul	DWORD PTR _delta$[ebp+4]
	fld	DWORD PTR _vec$[ebp+4]
	fmul	DWORD PTR _delta$[ebp]
	fsubp	ST(1), ST(0)
	fstp	DWORD PTR _svec$[ebp+8]

; 2038 : 	NormalizeVector(&svec);

	fld	DWORD PTR _svec$[ebp]
	fmul	DWORD PTR _svec$[ebp]
	fld	DWORD PTR _svec$[ebp+4]
	fmul	DWORD PTR _svec$[ebp+4]
	faddp	ST(1), ST(0)
	fld	DWORD PTR _svec$[ebp+8]
	fmul	DWORD PTR _svec$[ebp+8]
	faddp	ST(1), ST(0)
	push	ecx
	fstp	DWORD PTR [esp]
	call	?sqrt@@YAMM@Z				; sqrt
	add	esp, 4
	fdivr	DWORD PTR __real@3f800000
	fstp	DWORD PTR __mul$82078[ebp]
	fld	DWORD PTR _svec$[ebp]
	fmul	DWORD PTR __mul$82078[ebp]
	fstp	DWORD PTR _svec$[ebp]
	fld	DWORD PTR _svec$[ebp+4]
	fmul	DWORD PTR __mul$82078[ebp]
	fstp	DWORD PTR _svec$[ebp+4]
	fld	DWORD PTR _svec$[ebp+8]
	fmul	DWORD PTR __mul$82078[ebp]
	fstp	DWORD PTR _svec$[ebp+8]

; 2039 : 
; 2040 : 	s = (float)TIME2MS(TimerCurrent) / 100.0f;

	mov	eax, DWORD PTR ?TimerCurrent@@3KA	; TimerCurrent
	mov	DWORD PTR tv667[ebp], eax
	mov	DWORD PTR tv667[ebp+4], 0
	fild	QWORD PTR tv667[ebp]
	mov	eax, DWORD PTR ?TimerFreq@@3KA		; TimerFreq
	xor	edx, edx
	mov	ecx, 1000				; 000003e8H
	div	ecx
	mov	DWORD PTR tv674[ebp], eax
	mov	DWORD PTR tv674[ebp+4], 0
	fild	QWORD PTR tv674[ebp]
	fdivp	ST(1), ST(0)
	fdiv	DWORD PTR __real@42c80000
	fstp	DWORD PTR _s$[ebp]

; 2041 : 
; 2042 : 	i = TIME2MS(TimerCurrent) / 500;

	mov	eax, DWORD PTR ?TimerFreq@@3KA		; TimerFreq
	xor	edx, edx
	mov	ecx, 1000				; 000003e8H
	div	ecx
	mov	ecx, eax
	mov	eax, DWORD PTR ?TimerCurrent@@3KA	; TimerCurrent
	xor	edx, edx
	div	ecx
	xor	edx, edx
	mov	ecx, 500				; 000001f4H
	div	ecx
	mov	DWORD PTR _i$[ebp], eax

; 2043 : 	if (i != JumpSparkSinTime)

	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _JumpSparkSinTime
	je	SHORT $L82081

; 2044 : 	{	
; 2045 : 		JumpSparkSinTime = i;

	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR _JumpSparkSinTime, eax

; 2046 : 		JumpSparkSinDiv = frand(6.0f) + 9.0f;

	call	_rand
	mov	DWORD PTR tv691[ebp], eax
	fild	DWORD PTR tv691[ebp]
	fdiv	DWORD PTR __real@46fffe00
	fmul	DWORD PTR __real@40c00000
	fadd	DWORD PTR __real@41100000
	fstp	DWORD PTR _JumpSparkSinDiv
$L82081:

; 2047 : 	}
; 2048 : 	sadd = len / fsteps / JumpSparkSinDiv;

	fld	DWORD PTR _len$[ebp]
	fdiv	DWORD PTR _fsteps$[ebp]
	fdiv	DWORD PTR _JumpSparkSinDiv
	fstp	DWORD PTR _sadd$[ebp]

; 2049 : 
; 2050 : 	smul = (float)sin((float)TIME2MS(TimerCurrent) / 300.0f) + 3.0f;

	mov	eax, DWORD PTR ?TimerCurrent@@3KA	; TimerCurrent
	mov	DWORD PTR tv694[ebp], eax
	mov	DWORD PTR tv694[ebp+4], 0
	fild	QWORD PTR tv694[ebp]
	mov	eax, DWORD PTR ?TimerFreq@@3KA		; TimerFreq
	xor	edx, edx
	mov	ecx, 1000				; 000003e8H
	div	ecx
	mov	DWORD PTR tv701[ebp], eax
	mov	DWORD PTR tv701[ebp+4], 0
	fild	QWORD PTR tv701[ebp]
	fdivp	ST(1), ST(0)
	fdiv	DWORD PTR __real@43960000
	push	ecx
	fstp	DWORD PTR [esp]
	call	?sin@@YAMM@Z				; sin
	add	esp, 4
	fadd	DWORD PTR __real@40400000
	fstp	DWORD PTR _smul$[ebp]

; 2051 : 
; 2052 : 	for (i = 0 ; i < steps + 1; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $L82085
$L82086:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$L82085:
	mov	eax, DWORD PTR _steps$[ebp]
	add	eax, 1
	cmp	DWORD PTR _i$[ebp], eax
	jge	$L82087

; 2053 : 	{
; 2054 : 		CopyVec(&pos, &vec);

	mov	eax, DWORD PTR _pos$[ebp]
	mov	DWORD PTR _vec$[ebp], eax
	mov	eax, DWORD PTR _pos$[ebp+4]
	mov	DWORD PTR _vec$[ebp+4], eax
	mov	eax, DWORD PTR _pos$[ebp+8]
	mov	DWORD PTR _vec$[ebp+8], eax

; 2055 : 
; 2056 : //		if (i && i < steps)
; 2057 : 		{
; 2058 : 			vec.v[X] += JumpSparkOffset[offset].v[X];

	mov	eax, DWORD PTR _offset$[ebp]
	imul	eax, 12					; 0000000cH
	fld	DWORD PTR _vec$[ebp]
	fadd	DWORD PTR _JumpSparkOffset[eax]
	fstp	DWORD PTR _vec$[ebp]

; 2059 : 			vec.v[Y] += JumpSparkOffset[offset].v[Y];

	mov	eax, DWORD PTR _offset$[ebp]
	imul	eax, 12					; 0000000cH
	fld	DWORD PTR _vec$[ebp+4]
	fadd	DWORD PTR _JumpSparkOffset[eax+4]
	fstp	DWORD PTR _vec$[ebp+4]

; 2060 : 			vec.v[Z] += JumpSparkOffset[offset].v[Z];

	mov	eax, DWORD PTR _offset$[ebp]
	imul	eax, 12					; 0000000cH
	fld	DWORD PTR _vec$[ebp+8]
	fadd	DWORD PTR _JumpSparkOffset[eax+8]
	fstp	DWORD PTR _vec$[ebp+8]

; 2061 : 
; 2062 : 			mul = (float)sin(s) * smul;

	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	?sin@@YAMM@Z				; sin
	add	esp, 4
	fmul	DWORD PTR _smul$[ebp]
	fstp	DWORD PTR _mul$[ebp]

; 2063 : 			VecPlusEqScalarVec(&vec, mul, &svec);

	fld	DWORD PTR _mul$[ebp]
	fmul	DWORD PTR _svec$[ebp]
	fadd	DWORD PTR _vec$[ebp]
	fstp	DWORD PTR _vec$[ebp]
	fld	DWORD PTR _mul$[ebp]
	fmul	DWORD PTR _svec$[ebp+4]
	fadd	DWORD PTR _vec$[ebp+4]
	fstp	DWORD PTR _vec$[ebp+4]
	fld	DWORD PTR _mul$[ebp]
	fmul	DWORD PTR _svec$[ebp+8]
	fadd	DWORD PTR _vec$[ebp+8]
	fstp	DWORD PTR _vec$[ebp+8]

; 2064 : 		}
; 2065 : 
; 2066 : 		if (!i)

	cmp	DWORD PTR _i$[ebp], 0
	jne	SHORT $L82089

; 2067 : 			CopyVec(&vec, &start)

	mov	eax, DWORD PTR _vec$[ebp]
	mov	DWORD PTR _start$[ebp], eax
	mov	eax, DWORD PTR _vec$[ebp+4]
	mov	DWORD PTR _start$[ebp+4], eax
	mov	eax, DWORD PTR _vec$[ebp+8]
	mov	DWORD PTR _start$[ebp+8], eax
$L82089:

; 2068 : 
; 2069 : 		if (i == steps)

	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _steps$[ebp]
	jne	SHORT $L82090

; 2070 : 			CopyVec(&vec, &end)

	mov	eax, DWORD PTR _vec$[ebp]
	mov	DWORD PTR _end$[ebp], eax
	mov	eax, DWORD PTR _vec$[ebp+4]
	mov	DWORD PTR _end$[ebp+4], eax
	mov	eax, DWORD PTR _vec$[ebp+8]
	mov	DWORD PTR _end$[ebp+8], eax
$L82090:

; 2071 : 
; 2072 : 		RotTransPersVector(&ViewMatrixScaled, &ViewTransScaled, &vec, (float*)&points[i]);

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 24					; 00000018H
	lea	ecx, DWORD PTR _points$[ebp+eax]
	push	ecx
	lea	edx, DWORD PTR _vec$[ebp]
	push	edx
	push	OFFSET FLAT:?ViewTransScaled@@3UVectorStruct@@A ; ViewTransScaled
	push	OFFSET FLAT:?ViewMatrixScaled@@3TMatrixUnion@@A ; ViewMatrixScaled
	call	?RotTransPersVector@@YAXPATMatrixUnion@@PAUVectorStruct@@1PAM@Z ; RotTransPersVector
	add	esp, 16					; 00000010H

; 2073 : 		AddVector(&pos, &delta, &pos);

	fld	DWORD PTR _pos$[ebp]
	fadd	DWORD PTR _delta$[ebp]
	fstp	DWORD PTR _pos$[ebp]
	fld	DWORD PTR _pos$[ebp+4]
	fadd	DWORD PTR _delta$[ebp+4]
	fstp	DWORD PTR _pos$[ebp+4]
	fld	DWORD PTR _pos$[ebp+8]
	fadd	DWORD PTR _delta$[ebp+8]
	fstp	DWORD PTR _pos$[ebp+8]

; 2074 : 
; 2075 : 		offset++;

	mov	eax, DWORD PTR _offset$[ebp]
	add	eax, 1
	mov	DWORD PTR _offset$[ebp], eax

; 2076 : 		offset %= JUMPSPARK_OFFSET_NUM;

	mov	eax, DWORD PTR _offset$[ebp]
	and	eax, -2147483617			; 8000001fH
	jns	SHORT $L82460
	dec	eax
	or	eax, -32				; ffffffe0H
	inc	eax
$L82460:
	mov	DWORD PTR _offset$[ebp], eax

; 2077 : 
; 2078 : 		s += sadd;

	fld	DWORD PTR _s$[ebp]
	fadd	DWORD PTR _sadd$[ebp]
	fstp	DWORD PTR _s$[ebp]

; 2079 : 	}

	jmp	$L82086
$L82087:

; 2080 : 
; 2081 : // calc delta's for each step
; 2082 : 
; 2083 : 	for (i = 0 ; i < steps ; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $L82092
$L82093:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$L82092:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _steps$[ebp]
	jge	$L82094

; 2084 : 	{
; 2085 : 		dx1 = points[i + 1].sx - points[i].sx;

	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	imul	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 24					; 00000018H
	fld	DWORD PTR _points$[ebp+eax]
	fsub	DWORD PTR _points$[ebp+ecx]
	fstp	DWORD PTR _dx1$[ebp]

; 2086 : 		dy1 = points[i + 1].sy - points[i].sy;

	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	imul	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 24					; 00000018H
	fld	DWORD PTR _points$[ebp+eax+4]
	fsub	DWORD PTR _points$[ebp+ecx+4]
	fstp	DWORD PTR _dy1$[ebp]

; 2087 : 		mul = 4.0f / (float)sqrt(dx1 * dx1 + dy1 * dy1) * points[i].rhw * RenderSettings.GeomPers;

	fld	DWORD PTR _dx1$[ebp]
	fmul	DWORD PTR _dx1$[ebp]
	fld	DWORD PTR _dy1$[ebp]
	fmul	DWORD PTR _dy1$[ebp]
	faddp	ST(1), ST(0)
	push	ecx
	fstp	DWORD PTR [esp]
	call	?sqrt@@YAMM@Z				; sqrt
	add	esp, 4
	fdivr	DWORD PTR __real@40800000
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 24					; 00000018H
	fmul	DWORD PTR _points$[ebp+eax+12]
	fmul	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A
	fstp	DWORD PTR _mul$[ebp]

; 2088 : 		dy[i] = dx1 * mul;

	fld	DWORD PTR _dx1$[ebp]
	fmul	DWORD PTR _mul$[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	fstp	DWORD PTR _dy$[ebp+eax*4]

; 2089 : 		dx[i] = -dy1 * mul;

	fld	DWORD PTR _dy1$[ebp]
	fchs
	fmul	DWORD PTR _mul$[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	fstp	DWORD PTR _dx$[ebp+eax*4]

; 2090 : 	}

	jmp	$L82093
$L82094:

; 2091 : 
; 2092 : // create each poly
; 2093 : 
; 2094 : 	for (i = 0 ; i < steps ; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $L82096
$L82097:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$L82096:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _steps$[ebp]
	jge	$L82098

; 2095 : 	{
; 2096 : 
; 2097 : // get semi slot
; 2098 : 
; 2099 : 		if (!SEMI_POLY_FREE()) return;

	cmp	DWORD PTR ?SemiCount@@3JA, 800		; SemiCount, 00000320H
	jl	SHORT $L82099
	jmp	$L82044
$L82099:

; 2100 : 		SEMI_POLY_SETUP_ZBIAS(verts, FALSE, 4, TPAGE_FX1, TRUE, 1, -128.0f);

	mov	eax, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	eax, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[eax+12], 0
	mov	eax, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	eax, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[eax+4], 4
	mov	eax, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	eax, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[eax+8], 27 ; 0000001bH
	mov	eax, 1
	test	eax, eax
	je	SHORT $L82100
	mov	eax, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	eax, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[eax], 8
	jmp	SHORT $L82101
$L82100:
	mov	eax, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	eax, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[eax], 12 ; 0000000cH
$L82101:
	mov	eax, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	eax, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[eax+16], 1
	mov	eax, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	eax, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[eax+20], -1023410176 ; c3000000H
	mov	eax, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	eax, 152				; 00000098H
	add	eax, OFFSET FLAT:?SemiPoly@@3PAUDRAW_SEMI_POLY@@A+24
	mov	DWORD PTR _verts$[ebp], eax
	mov	ecx, DWORD PTR ?SemiCount@@3JA		; SemiCount
	add	ecx, 1
	mov	DWORD PTR ?SemiCount@@3JA, ecx		; SemiCount

; 2101 : 
; 2102 : // calc dx1, dy1
; 2103 : 
; 2104 : 		if (!i)

	cmp	DWORD PTR _i$[ebp], 0
	jne	SHORT $L82102

; 2105 : 		{
; 2106 : 			dx1 = dx[i] * 0.75f;

	mov	eax, DWORD PTR _i$[ebp]
	fld	DWORD PTR _dx$[ebp+eax*4]
	fmul	DWORD PTR __real@3f400000
	fstp	DWORD PTR _dx1$[ebp]

; 2107 : 			dy1 = dy[i] * 0.75f;

	mov	eax, DWORD PTR _i$[ebp]
	fld	DWORD PTR _dy$[ebp+eax*4]
	fmul	DWORD PTR __real@3f400000
	fstp	DWORD PTR _dy1$[ebp]

; 2108 : 		}
; 2109 : 		else

	jmp	SHORT $L82103
$L82102:

; 2110 : 		{
; 2111 : 			dx1 = dx2;

	mov	eax, DWORD PTR _dx2$[ebp]
	mov	DWORD PTR _dx1$[ebp], eax

; 2112 : 			dy1 = dy2;

	mov	eax, DWORD PTR _dy2$[ebp]
	mov	DWORD PTR _dy1$[ebp], eax
$L82103:

; 2113 : 		}
; 2114 : 
; 2115 : // calc dx2, dy2
; 2116 : 
; 2117 : 		if (i == steps - 1)

	mov	eax, DWORD PTR _steps$[ebp]
	sub	eax, 1
	cmp	DWORD PTR _i$[ebp], eax
	jne	SHORT $L82104

; 2118 : 		{
; 2119 : 			dx2 = dx[i] * 0.75f;

	mov	eax, DWORD PTR _i$[ebp]
	fld	DWORD PTR _dx$[ebp+eax*4]
	fmul	DWORD PTR __real@3f400000
	fstp	DWORD PTR _dx2$[ebp]

; 2120 : 			dy2 = dy[i] * 0.75f;

	mov	eax, DWORD PTR _i$[ebp]
	fld	DWORD PTR _dy$[ebp+eax*4]
	fmul	DWORD PTR __real@3f400000
	fstp	DWORD PTR _dy2$[ebp]

; 2121 : 		}
; 2122 : 		else

	jmp	SHORT $L82105
$L82104:

; 2123 : 		{
; 2124 : 			dx2 = dx[i] + dx[i + 1];

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	fld	DWORD PTR _dx$[ebp+eax*4]
	fadd	DWORD PTR _dx$[ebp+ecx*4+4]
	fstp	DWORD PTR _dx2$[ebp]

; 2125 : 			dy2 = dy[i] + dy[i + 1];

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	fld	DWORD PTR _dy$[ebp+eax*4]
	fadd	DWORD PTR _dy$[ebp+ecx*4+4]
	fstp	DWORD PTR _dy2$[ebp]

; 2126 : 			mul = 4.0f / (float)sqrt(dx2 * dx2 + dy2 * dy2) * points[i + 1].rhw * RenderSettings.GeomPers;

	fld	DWORD PTR _dx2$[ebp]
	fmul	DWORD PTR _dx2$[ebp]
	fld	DWORD PTR _dy2$[ebp]
	fmul	DWORD PTR _dy2$[ebp]
	faddp	ST(1), ST(0)
	push	ecx
	fstp	DWORD PTR [esp]
	call	?sqrt@@YAMM@Z				; sqrt
	add	esp, 4
	fdivr	DWORD PTR __real@40800000
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	imul	eax, 24					; 00000018H
	fmul	DWORD PTR _points$[ebp+eax+12]
	fmul	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A
	fstp	DWORD PTR _mul$[ebp]

; 2127 : 			dx2 *= mul;

	fld	DWORD PTR _dx2$[ebp]
	fmul	DWORD PTR _mul$[ebp]
	fstp	DWORD PTR _dx2$[ebp]

; 2128 : 			dy2 *= mul;

	fld	DWORD PTR _dy2$[ebp]
	fmul	DWORD PTR _mul$[ebp]
	fstp	DWORD PTR _dy2$[ebp]
$L82105:

; 2129 : 		}
; 2130 : 
; 2131 : // build poly
; 2132 : 
; 2133 : 		verts[0].sx = points[i].sx - dx1;

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 24					; 00000018H
	fld	DWORD PTR _points$[ebp+eax]
	fsub	DWORD PTR _dx1$[ebp]
	mov	ecx, DWORD PTR _verts$[ebp]
	fstp	DWORD PTR [ecx]

; 2134 : 		verts[0].sy = points[i].sy - dy1;

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 24					; 00000018H
	fld	DWORD PTR _points$[ebp+eax+4]
	fsub	DWORD PTR _dy1$[ebp]
	mov	ecx, DWORD PTR _verts$[ebp]
	fstp	DWORD PTR [ecx+4]

; 2135 : 
; 2136 : 		verts[1].sx = points[i + 1].sx - dx2;

	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	imul	eax, 24					; 00000018H
	fld	DWORD PTR _points$[ebp+eax]
	fsub	DWORD PTR _dx2$[ebp]
	mov	ecx, DWORD PTR _verts$[ebp]
	fstp	DWORD PTR [ecx+32]

; 2137 : 		verts[1].sy = points[i + 1].sy - dy2;

	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	imul	eax, 24					; 00000018H
	fld	DWORD PTR _points$[ebp+eax+4]
	fsub	DWORD PTR _dy2$[ebp]
	mov	ecx, DWORD PTR _verts$[ebp]
	fstp	DWORD PTR [ecx+36]

; 2138 : 
; 2139 : 		verts[2].sx = points[i + 1].sx + dx2;

	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	imul	eax, 24					; 00000018H
	fld	DWORD PTR _dx2$[ebp]
	fadd	DWORD PTR _points$[ebp+eax]
	mov	ecx, DWORD PTR _verts$[ebp]
	fstp	DWORD PTR [ecx+64]

; 2140 : 		verts[2].sy = points[i + 1].sy + dy2;

	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	imul	eax, 24					; 00000018H
	fld	DWORD PTR _dy2$[ebp]
	fadd	DWORD PTR _points$[ebp+eax+4]
	mov	ecx, DWORD PTR _verts$[ebp]
	fstp	DWORD PTR [ecx+68]

; 2141 : 
; 2142 : 		verts[3].sx = points[i].sx + dx1;

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 24					; 00000018H
	fld	DWORD PTR _dx1$[ebp]
	fadd	DWORD PTR _points$[ebp+eax]
	mov	ecx, DWORD PTR _verts$[ebp]
	fstp	DWORD PTR [ecx+96]

; 2143 : 		verts[3].sy = points[i].sy + dy1;

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 24					; 00000018H
	fld	DWORD PTR _dy1$[ebp]
	fadd	DWORD PTR _points$[ebp+eax+4]
	mov	ecx, DWORD PTR _verts$[ebp]
	fstp	DWORD PTR [ecx+100]

; 2144 : 
; 2145 : 		verts[0].sz = verts[3].sz = points[i].sz;

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _verts$[ebp]
	mov	edx, DWORD PTR _points$[ebp+eax+8]
	mov	DWORD PTR [ecx+104], edx
	mov	eax, DWORD PTR _verts$[ebp]
	mov	ecx, DWORD PTR _verts$[ebp]
	mov	edx, DWORD PTR [ecx+104]
	mov	DWORD PTR [eax+8], edx

; 2146 : 		verts[1].sz = verts[2].sz = points[i + 1].sz;

	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	imul	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _verts$[ebp]
	mov	edx, DWORD PTR _points$[ebp+eax+8]
	mov	DWORD PTR [ecx+72], edx
	mov	eax, DWORD PTR _verts$[ebp]
	mov	ecx, DWORD PTR _verts$[ebp]
	mov	edx, DWORD PTR [ecx+72]
	mov	DWORD PTR [eax+40], edx

; 2147 : 		verts[0].rhw = verts[3].rhw = points[i].rhw;

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _verts$[ebp]
	mov	edx, DWORD PTR _points$[ebp+eax+12]
	mov	DWORD PTR [ecx+108], edx
	mov	eax, DWORD PTR _verts$[ebp]
	mov	ecx, DWORD PTR _verts$[ebp]
	mov	edx, DWORD PTR [ecx+108]
	mov	DWORD PTR [eax+12], edx

; 2148 : 		verts[1].rhw = verts[2].rhw = points[i + 1].rhw;

	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	imul	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _verts$[ebp]
	mov	edx, DWORD PTR _points$[ebp+eax+12]
	mov	DWORD PTR [ecx+76], edx
	mov	eax, DWORD PTR _verts$[ebp]
	mov	ecx, DWORD PTR _verts$[ebp]
	mov	edx, DWORD PTR [ecx+76]
	mov	DWORD PTR [eax+44], edx

; 2149 : 
; 2150 : 		verts[0].tu = verts[3].tu = 216.0f / 256.0f;

	mov	eax, DWORD PTR _verts$[ebp]
	mov	DWORD PTR [eax+120], 1062731776		; 3f580000H
	mov	ecx, DWORD PTR _verts$[ebp]
	mov	DWORD PTR [ecx+24], 1062731776		; 3f580000H

; 2151 : 		verts[1].tu = verts[2].tu = 223.0f / 256.0f;

	mov	eax, DWORD PTR _verts$[ebp]
	mov	DWORD PTR [eax+88], 1063190528		; 3f5f0000H
	mov	ecx, DWORD PTR _verts$[ebp]
	mov	DWORD PTR [ecx+56], 1063190528		; 3f5f0000H

; 2152 : 		verts[0].tv = verts[1].tv = 33.0f / 256.0f;

	mov	eax, DWORD PTR _verts$[ebp]
	mov	DWORD PTR [eax+60], 1040449536		; 3e040000H
	mov	ecx, DWORD PTR _verts$[ebp]
	mov	DWORD PTR [ecx+28], 1040449536		; 3e040000H

; 2153 : 		verts[2].tv = verts[3].tv = 47.0f / 256.0f;

	mov	eax, DWORD PTR _verts$[ebp]
	mov	DWORD PTR [eax+124], 1044119552		; 3e3c0000H
	mov	ecx, DWORD PTR _verts$[ebp]
	mov	DWORD PTR [ecx+92], 1044119552		; 3e3c0000H

; 2154 : 
; 2155 : 		verts[0].color = verts[1].color = verts[2].color = verts[3].color = 0xffffff;

	mov	eax, DWORD PTR _verts$[ebp]
	mov	DWORD PTR [eax+112], 16777215		; 00ffffffH
	mov	ecx, DWORD PTR _verts$[ebp]
	mov	DWORD PTR [ecx+80], 16777215		; 00ffffffH
	mov	edx, DWORD PTR _verts$[ebp]
	mov	DWORD PTR [edx+48], 16777215		; 00ffffffH
	mov	eax, DWORD PTR _verts$[ebp]
	mov	DWORD PTR [eax+16], 16777215		; 00ffffffH

; 2156 : 	}

	jmp	$L82097
$L82098:

; 2157 : 
; 2158 : // draw 'end' flares
; 2159 : 
; 2160 : 	poly.Xsize = poly.Ysize = (float)(TIME2MS(TimerCurrent) % 100) / 25.0f + 4.0f;

	mov	eax, DWORD PTR ?TimerFreq@@3KA		; TimerFreq
	xor	edx, edx
	mov	ecx, 1000				; 000003e8H
	div	ecx
	mov	ecx, eax
	mov	eax, DWORD PTR ?TimerCurrent@@3KA	; TimerCurrent
	xor	edx, edx
	div	ecx
	xor	edx, edx
	mov	ecx, 100				; 00000064H
	div	ecx
	mov	DWORD PTR tv858[ebp], edx
	mov	DWORD PTR tv858[ebp+4], 0
	fild	QWORD PTR tv858[ebp]
	fdiv	DWORD PTR __real@41c80000
	fadd	DWORD PTR __real@40800000
	fstp	DWORD PTR _poly$[ebp+4]
	mov	edx, DWORD PTR _poly$[ebp+4]
	mov	DWORD PTR _poly$[ebp], edx

; 2161 : 	poly.U = 192.0f / 256.0f;

	mov	DWORD PTR _poly$[ebp+8], 1061158912	; 3f400000H

; 2162 : 	poly.V = 64.0f / 256.0f;

	mov	DWORD PTR _poly$[ebp+12], 1048576000	; 3e800000H

; 2163 : 	poly.Usize = poly.Vsize = 64.0f / 256.0f;

	mov	DWORD PTR _poly$[ebp+20], 1048576000	; 3e800000H
	mov	eax, DWORD PTR _poly$[ebp+20]
	mov	DWORD PTR _poly$[ebp+16], eax

; 2164 : 	poly.Tpage = TPAGE_FX1;

	mov	WORD PTR _poly$[ebp+24], 27		; 0000001bH

; 2165 : 	poly.RGB = 0x8080ff;

	mov	DWORD PTR _poly$[ebp+28], 8421631	; 008080ffH

; 2166 : 
; 2167 : 	ang = (float)TIME2MS(TimerCurrent) / 10000.0f;

	mov	eax, DWORD PTR ?TimerCurrent@@3KA	; TimerCurrent
	mov	DWORD PTR tv864[ebp], eax
	mov	DWORD PTR tv864[ebp+4], 0
	fild	QWORD PTR tv864[ebp]
	mov	eax, DWORD PTR ?TimerFreq@@3KA		; TimerFreq
	xor	edx, edx
	mov	ecx, 1000				; 000003e8H
	div	ecx
	mov	DWORD PTR tv871[ebp], eax
	mov	DWORD PTR tv871[ebp+4], 0
	fild	QWORD PTR tv871[ebp]
	fdivp	ST(1), ST(0)
	fdiv	DWORD PTR __real@461c4000
	fstp	DWORD PTR _ang$[ebp]

; 2168 : 
; 2169 : 	RotMatrixZ(&mat, ang);

	mov	eax, DWORD PTR _ang$[ebp]
	push	eax
	lea	ecx, DWORD PTR _mat$[ebp]
	push	ecx
	call	?RotMatrixZ@@YAXPATMatrixUnion@@M@Z	; RotMatrixZ
	add	esp, 8

; 2170 : 	DrawFacingPolyRot(&start, &mat, &poly, 1, -16.0f);

	push	-1048576000				; c1800000H
	push	1
	lea	eax, DWORD PTR _poly$[ebp]
	push	eax
	lea	ecx, DWORD PTR _mat$[ebp]
	push	ecx
	lea	edx, DWORD PTR _start$[ebp]
	push	edx
	call	?DrawFacingPolyRot@@YAXPAUVectorStruct@@PATMatrixUnion@@PAUFACING_POLY@@JM@Z ; DrawFacingPolyRot
	add	esp, 20					; 00000014H

; 2171 : 	DrawFacingPolyRot(&end, &mat, &poly, 1, -16.0f);

	push	-1048576000				; c1800000H
	push	1
	lea	eax, DWORD PTR _poly$[ebp]
	push	eax
	lea	ecx, DWORD PTR _mat$[ebp]
	push	ecx
	lea	edx, DWORD PTR _end$[ebp]
	push	edx
	call	?DrawFacingPolyRot@@YAXPAUVectorStruct@@PATMatrixUnion@@PAUFACING_POLY@@JM@Z ; DrawFacingPolyRot
	add	esp, 20					; 00000014H

; 2172 : 
; 2173 : 	RotMatrixZ(&mat, ang * 2.0f);

	fld	DWORD PTR _ang$[ebp]
	fadd	ST(0), ST(0)
	push	ecx
	fstp	DWORD PTR [esp]
	lea	eax, DWORD PTR _mat$[ebp]
	push	eax
	call	?RotMatrixZ@@YAXPATMatrixUnion@@M@Z	; RotMatrixZ
	add	esp, 8

; 2174 : 	DrawFacingPolyRot(&start, &mat, &poly, 1, -16.0f);

	push	-1048576000				; c1800000H
	push	1
	lea	eax, DWORD PTR _poly$[ebp]
	push	eax
	lea	ecx, DWORD PTR _mat$[ebp]
	push	ecx
	lea	edx, DWORD PTR _start$[ebp]
	push	edx
	call	?DrawFacingPolyRot@@YAXPAUVectorStruct@@PATMatrixUnion@@PAUFACING_POLY@@JM@Z ; DrawFacingPolyRot
	add	esp, 20					; 00000014H

; 2175 : 	DrawFacingPolyRot(&end, &mat, &poly, 1, -16.0f);

	push	-1048576000				; c1800000H
	push	1
	lea	eax, DWORD PTR _poly$[ebp]
	push	eax
	lea	ecx, DWORD PTR _mat$[ebp]
	push	ecx
	lea	edx, DWORD PTR _end$[ebp]
	push	edx
	call	?DrawFacingPolyRot@@YAXPAUVectorStruct@@PATMatrixUnion@@PAUFACING_POLY@@JM@Z ; DrawFacingPolyRot
	add	esp, 20					; 00000014H
$L82044:

; 2176 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?DrawJumpSpark@@YAXPAUVectorStruct@@0@Z ENDP		; DrawJumpSpark
_TEXT	ENDS
PUBLIC	_sinf
; Function compile flags: /Odt /ZI
; File c:\program files\microsoft visual studio .net 2003\vc7\include\math.h
;	COMDAT ?sin@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?sin@@YAMM@Z PROC NEAR					; sin, COMDAT

; 575  :         {return (sinf(_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR __X$[ebp]
	push	eax
	call	_sinf
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?sin@@YAMM@Z ENDP					; sin
_TEXT	ENDS
EXTRN	_sin:NEAR
; Function compile flags: /Odt /ZI
;	COMDAT _sinf
_TEXT	SEGMENT
tv70 = -68						; size = 4
__X$ = 8						; size = 4
_sinf	PROC NEAR					; COMDAT

; 466  :         {return ((float)sin((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	fld	DWORD PTR __X$[ebp]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	call	_sin
	add	esp, 8
	fst	DWORD PTR tv70[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_sinf	ENDP
_TEXT	ENDS
PUBLIC	_sqrtf
; Function compile flags: /Odt /ZI
;	COMDAT ?sqrt@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?sqrt@@YAMM@Z PROC NEAR					; sqrt, COMDAT

; 579  :         {return (sqrtf(_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR __X$[ebp]
	push	eax
	call	_sqrtf
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?sqrt@@YAMM@Z ENDP					; sqrt
_TEXT	ENDS
EXTRN	_sqrt:NEAR
; Function compile flags: /Odt /ZI
;	COMDAT _sqrtf
_TEXT	SEGMENT
tv70 = -68						; size = 4
__X$ = 8						; size = 4
_sqrtf	PROC NEAR					; COMDAT

; 470  :         {return ((float)sqrt((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	fld	DWORD PTR __X$[ebp]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	call	_sqrt
	add	esp, 8
	fst	DWORD PTR tv70[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_sqrtf	ENDP
_TEXT	ENDS
PUBLIC	?DrawJumpSpark2@@YAXPAUVectorStruct@@0@Z	; DrawJumpSpark2
; Function compile flags: /Odt /ZI
; File c:\documents and settings\jarhead\desktop\shit to display my love for xbox revolt and fuck you borman-ness\revolt source\source\draw.cpp
;	COMDAT ?DrawJumpSpark2@@YAXPAUVectorStruct@@0@Z
_TEXT	SEGMENT
tv621 = -2288						; size = 8
tv594 = -2288						; size = 8
tv614 = -2280						; size = 8
tv587 = -2280						; size = 8
tv611 = -2276						; size = 4
__mul$82143 = -2208					; size = 4
__temp$82138 = -2204					; size = 4
_verts$ = -2200						; size = 4
_points$ = -2196					; size = 1560
_dy$ = -636						; size = 256
_dx$ = -380						; size = 256
_smul$ = -124						; size = 4
_sadd$ = -120						; size = 4
_s$ = -116						; size = 4
_dy2$ = -112						; size = 4
_dx2$ = -108						; size = 4
_dy1$ = -104						; size = 4
_dx1$ = -100						; size = 4
_mul$ = -96						; size = 4
_fsteps$ = -92						; size = 4
_len$ = -88						; size = 4
_svec$ = -84						; size = 12
_end$ = -72						; size = 12
_start$ = -60						; size = 12
_vec$ = -48						; size = 12
_pos$ = -36						; size = 12
_delta$ = -24						; size = 12
_offset$ = -12						; size = 4
_steps$ = -8						; size = 4
_i$ = -4						; size = 4
_v1$ = 8						; size = 4
_v2$ = 12						; size = 4
?DrawJumpSpark2@@YAXPAUVectorStruct@@0@Z PROC NEAR	; DrawJumpSpark2, COMDAT

; 2179 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 2288				; 000008f0H
	push	ebx
	push	esi
	push	edi

; 2180 : 	long i, steps, offset;
; 2181 : 	VEC delta, pos, vec, start, end, svec;
; 2182 : 	REAL len, fsteps, mul, dx1, dy1, dx2, dy2, s, sadd, smul;
; 2183 : 	REAL dx[JUMPSPARK_STEP_MAX], dy[JUMPSPARK_STEP_MAX];
; 2184 : 	VERTEX_TEX0 points[JUMPSPARK_STEP_MAX + 1];
; 2185 : 	VERTEX_TEX1 *verts;
; 2186 : 
; 2187 : // calc steps
; 2188 : 
; 2189 : 	SubVector(v2, v1, &delta);

	mov	eax, DWORD PTR _v2$[ebp]
	mov	ecx, DWORD PTR _v1$[ebp]
	fld	DWORD PTR [eax]
	fsub	DWORD PTR [ecx]
	fstp	DWORD PTR _delta$[ebp]
	mov	eax, DWORD PTR _v2$[ebp]
	mov	ecx, DWORD PTR _v1$[ebp]
	fld	DWORD PTR [eax+4]
	fsub	DWORD PTR [ecx+4]
	fstp	DWORD PTR _delta$[ebp+4]
	mov	eax, DWORD PTR _v2$[ebp]
	mov	ecx, DWORD PTR _v1$[ebp]
	fld	DWORD PTR [eax+8]
	fsub	DWORD PTR [ecx+8]
	fstp	DWORD PTR _delta$[ebp+8]

; 2190 : 	len = Length(&delta);

	fld	DWORD PTR _delta$[ebp]
	fmul	DWORD PTR _delta$[ebp]
	fld	DWORD PTR _delta$[ebp+4]
	fmul	DWORD PTR _delta$[ebp+4]
	faddp	ST(1), ST(0)
	fld	DWORD PTR _delta$[ebp+8]
	fmul	DWORD PTR _delta$[ebp+8]
	faddp	ST(1), ST(0)
	push	ecx
	fstp	DWORD PTR [esp]
	call	?sqrt@@YAMM@Z				; sqrt
	add	esp, 4
	fstp	DWORD PTR _len$[ebp]

; 2191 : 	fsteps = len / JUMPSPARK_STEP_LEN;

	fld	DWORD PTR _len$[ebp]
	fdiv	DWORD PTR __real@41000000
	fstp	DWORD PTR _fsteps$[ebp]

; 2192 : 	if (fsteps > JUMPSPARK_STEP_MAX)

	fld	DWORD PTR _fsteps$[ebp]
	fcomp	DWORD PTR __real@42800000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $L82137

; 2193 : 		fsteps = JUMPSPARK_STEP_MAX;

	mov	DWORD PTR _fsteps$[ebp], 1115684864	; 42800000H
$L82137:

; 2194 : 
; 2195 : 	FTOL(fsteps, steps);

	fld	DWORD PTR _fsteps$[ebp]
	fadd	DWORD PTR __real@4b000000
	fstp	DWORD PTR __temp$82138[ebp]
	mov	eax, DWORD PTR __temp$82138[ebp]
	and	eax, 16777215				; 00ffffffH
	mov	DWORD PTR _steps$[ebp], eax

; 2196 : 	fsteps = (float)steps;

	fild	DWORD PTR _steps$[ebp]
	fstp	DWORD PTR _fsteps$[ebp]

; 2197 : 
; 2198 : // build screen xyz's
; 2199 : 
; 2200 : 	CopyVec(v1, &pos);

	mov	eax, DWORD PTR _v1$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _pos$[ebp], ecx
	mov	eax, DWORD PTR _v1$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _pos$[ebp+4], ecx
	mov	eax, DWORD PTR _v1$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _pos$[ebp+8], ecx

; 2201 : 	mul = 1.0f / fsteps;

	fld	DWORD PTR __real@3f800000
	fdiv	DWORD PTR _fsteps$[ebp]
	fstp	DWORD PTR _mul$[ebp]

; 2202 : 	VecMulScalar(&delta, mul);

	fld	DWORD PTR _delta$[ebp]
	fmul	DWORD PTR _mul$[ebp]
	fstp	DWORD PTR _delta$[ebp]
	fld	DWORD PTR _delta$[ebp+4]
	fmul	DWORD PTR _mul$[ebp]
	fstp	DWORD PTR _delta$[ebp+4]
	fld	DWORD PTR _delta$[ebp+8]
	fmul	DWORD PTR _mul$[ebp]
	fstp	DWORD PTR _delta$[ebp+8]

; 2203 : 
; 2204 : 	i = TIME2MS(TimerCurrent) / 20;

	mov	eax, DWORD PTR ?TimerFreq@@3KA		; TimerFreq
	xor	edx, edx
	mov	ecx, 1000				; 000003e8H
	div	ecx
	mov	ecx, eax
	mov	eax, DWORD PTR ?TimerCurrent@@3KA	; TimerCurrent
	xor	edx, edx
	div	ecx
	xor	edx, edx
	mov	ecx, 20					; 00000014H
	div	ecx
	mov	DWORD PTR _i$[ebp], eax

; 2205 : 	if (i != JumpSparkTime)

	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _JumpSparkTime
	je	SHORT $L82142

; 2206 : 	{
; 2207 : 		JumpSparkTime = i;

	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR _JumpSparkTime, eax

; 2208 : 		JumpSparkOff = rand() % JUMPSPARK_OFFSET_NUM;

	call	_rand
	and	eax, -2147483617			; 8000001fH
	jns	SHORT $L82471
	dec	eax
	or	eax, -32				; ffffffe0H
	inc	eax
$L82471:
	mov	DWORD PTR _JumpSparkOff, eax
$L82142:

; 2209 : 	}
; 2210 : 
; 2211 : 	offset = JumpSparkOff;

	mov	eax, DWORD PTR _JumpSparkOff
	mov	DWORD PTR _offset$[ebp], eax

; 2212 : 
; 2213 : 	CrossProduct(&delta, &ViewCameraMatrix.mv[U], &vec);

	fld	DWORD PTR _delta$[ebp+4]
	fmul	DWORD PTR ?ViewCameraMatrix@@3TMatrixUnion@@A+20
	fld	DWORD PTR _delta$[ebp+8]
	fmul	DWORD PTR ?ViewCameraMatrix@@3TMatrixUnion@@A+16
	fsubp	ST(1), ST(0)
	fstp	DWORD PTR _vec$[ebp]
	fld	DWORD PTR _delta$[ebp+8]
	fmul	DWORD PTR ?ViewCameraMatrix@@3TMatrixUnion@@A+12
	fld	DWORD PTR _delta$[ebp]
	fmul	DWORD PTR ?ViewCameraMatrix@@3TMatrixUnion@@A+20
	fsubp	ST(1), ST(0)
	fstp	DWORD PTR _vec$[ebp+4]
	fld	DWORD PTR _delta$[ebp]
	fmul	DWORD PTR ?ViewCameraMatrix@@3TMatrixUnion@@A+16
	fld	DWORD PTR _delta$[ebp+4]
	fmul	DWORD PTR ?ViewCameraMatrix@@3TMatrixUnion@@A+12
	fsubp	ST(1), ST(0)
	fstp	DWORD PTR _vec$[ebp+8]

; 2214 : 	CrossProduct(&vec, &delta, &svec);

	fld	DWORD PTR _vec$[ebp+4]
	fmul	DWORD PTR _delta$[ebp+8]
	fld	DWORD PTR _vec$[ebp+8]
	fmul	DWORD PTR _delta$[ebp+4]
	fsubp	ST(1), ST(0)
	fstp	DWORD PTR _svec$[ebp]
	fld	DWORD PTR _vec$[ebp+8]
	fmul	DWORD PTR _delta$[ebp]
	fld	DWORD PTR _vec$[ebp]
	fmul	DWORD PTR _delta$[ebp+8]
	fsubp	ST(1), ST(0)
	fstp	DWORD PTR _svec$[ebp+4]
	fld	DWORD PTR _vec$[ebp]
	fmul	DWORD PTR _delta$[ebp+4]
	fld	DWORD PTR _vec$[ebp+4]
	fmul	DWORD PTR _delta$[ebp]
	fsubp	ST(1), ST(0)
	fstp	DWORD PTR _svec$[ebp+8]

; 2215 : 	NormalizeVector(&svec);

	fld	DWORD PTR _svec$[ebp]
	fmul	DWORD PTR _svec$[ebp]
	fld	DWORD PTR _svec$[ebp+4]
	fmul	DWORD PTR _svec$[ebp+4]
	faddp	ST(1), ST(0)
	fld	DWORD PTR _svec$[ebp+8]
	fmul	DWORD PTR _svec$[ebp+8]
	faddp	ST(1), ST(0)
	push	ecx
	fstp	DWORD PTR [esp]
	call	?sqrt@@YAMM@Z				; sqrt
	add	esp, 4
	fdivr	DWORD PTR __real@3f800000
	fstp	DWORD PTR __mul$82143[ebp]
	fld	DWORD PTR _svec$[ebp]
	fmul	DWORD PTR __mul$82143[ebp]
	fstp	DWORD PTR _svec$[ebp]
	fld	DWORD PTR _svec$[ebp+4]
	fmul	DWORD PTR __mul$82143[ebp]
	fstp	DWORD PTR _svec$[ebp+4]
	fld	DWORD PTR _svec$[ebp+8]
	fmul	DWORD PTR __mul$82143[ebp]
	fstp	DWORD PTR _svec$[ebp+8]

; 2216 : 
; 2217 : 	s = (float)TIME2MS(TimerCurrent) / 100.0f;

	mov	eax, DWORD PTR ?TimerCurrent@@3KA	; TimerCurrent
	mov	DWORD PTR tv587[ebp], eax
	mov	DWORD PTR tv587[ebp+4], 0
	fild	QWORD PTR tv587[ebp]
	mov	eax, DWORD PTR ?TimerFreq@@3KA		; TimerFreq
	xor	edx, edx
	mov	ecx, 1000				; 000003e8H
	div	ecx
	mov	DWORD PTR tv594[ebp], eax
	mov	DWORD PTR tv594[ebp+4], 0
	fild	QWORD PTR tv594[ebp]
	fdivp	ST(1), ST(0)
	fdiv	DWORD PTR __real@42c80000
	fstp	DWORD PTR _s$[ebp]

; 2218 : 
; 2219 : 	i = TIME2MS(TimerCurrent) / 500;

	mov	eax, DWORD PTR ?TimerFreq@@3KA		; TimerFreq
	xor	edx, edx
	mov	ecx, 1000				; 000003e8H
	div	ecx
	mov	ecx, eax
	mov	eax, DWORD PTR ?TimerCurrent@@3KA	; TimerCurrent
	xor	edx, edx
	div	ecx
	xor	edx, edx
	mov	ecx, 500				; 000001f4H
	div	ecx
	mov	DWORD PTR _i$[ebp], eax

; 2220 : 	if (i != JumpSparkSinTime)

	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _JumpSparkSinTime
	je	SHORT $L82146

; 2221 : 	{	
; 2222 : 		JumpSparkSinTime = i;

	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR _JumpSparkSinTime, eax

; 2223 : 		JumpSparkSinDiv = frand(6.0f) + 9.0f;

	call	_rand
	mov	DWORD PTR tv611[ebp], eax
	fild	DWORD PTR tv611[ebp]
	fdiv	DWORD PTR __real@46fffe00
	fmul	DWORD PTR __real@40c00000
	fadd	DWORD PTR __real@41100000
	fstp	DWORD PTR _JumpSparkSinDiv
$L82146:

; 2224 : 	}
; 2225 : 	sadd = len / fsteps / JumpSparkSinDiv;

	fld	DWORD PTR _len$[ebp]
	fdiv	DWORD PTR _fsteps$[ebp]
	fdiv	DWORD PTR _JumpSparkSinDiv
	fstp	DWORD PTR _sadd$[ebp]

; 2226 : 
; 2227 : 	smul = (float)sin((float)TIME2MS(TimerCurrent) / 300.0f) + 3.0f;

	mov	eax, DWORD PTR ?TimerCurrent@@3KA	; TimerCurrent
	mov	DWORD PTR tv614[ebp], eax
	mov	DWORD PTR tv614[ebp+4], 0
	fild	QWORD PTR tv614[ebp]
	mov	eax, DWORD PTR ?TimerFreq@@3KA		; TimerFreq
	xor	edx, edx
	mov	ecx, 1000				; 000003e8H
	div	ecx
	mov	DWORD PTR tv621[ebp], eax
	mov	DWORD PTR tv621[ebp+4], 0
	fild	QWORD PTR tv621[ebp]
	fdivp	ST(1), ST(0)
	fdiv	DWORD PTR __real@43960000
	push	ecx
	fstp	DWORD PTR [esp]
	call	?sin@@YAMM@Z				; sin
	add	esp, 4
	fadd	DWORD PTR __real@40400000
	fstp	DWORD PTR _smul$[ebp]

; 2228 : 
; 2229 : 	for (i = 0 ; i < steps + 1; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $L82150
$L82151:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$L82150:
	mov	eax, DWORD PTR _steps$[ebp]
	add	eax, 1
	cmp	DWORD PTR _i$[ebp], eax
	jge	$L82152

; 2230 : 	{
; 2231 : 		CopyVec(&pos, &vec);

	mov	eax, DWORD PTR _pos$[ebp]
	mov	DWORD PTR _vec$[ebp], eax
	mov	eax, DWORD PTR _pos$[ebp+4]
	mov	DWORD PTR _vec$[ebp+4], eax
	mov	eax, DWORD PTR _pos$[ebp+8]
	mov	DWORD PTR _vec$[ebp+8], eax

; 2232 : 
; 2233 : //		if (i && i < steps)
; 2234 : 		{
; 2235 : 			vec.v[X] += JumpSparkOffset[offset].v[X];

	mov	eax, DWORD PTR _offset$[ebp]
	imul	eax, 12					; 0000000cH
	fld	DWORD PTR _vec$[ebp]
	fadd	DWORD PTR _JumpSparkOffset[eax]
	fstp	DWORD PTR _vec$[ebp]

; 2236 : 			vec.v[Y] += JumpSparkOffset[offset].v[Y];

	mov	eax, DWORD PTR _offset$[ebp]
	imul	eax, 12					; 0000000cH
	fld	DWORD PTR _vec$[ebp+4]
	fadd	DWORD PTR _JumpSparkOffset[eax+4]
	fstp	DWORD PTR _vec$[ebp+4]

; 2237 : 			vec.v[Z] += JumpSparkOffset[offset].v[Z];

	mov	eax, DWORD PTR _offset$[ebp]
	imul	eax, 12					; 0000000cH
	fld	DWORD PTR _vec$[ebp+8]
	fadd	DWORD PTR _JumpSparkOffset[eax+8]
	fstp	DWORD PTR _vec$[ebp+8]

; 2238 : 
; 2239 : 			mul = (float)sin(s) * smul;

	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	?sin@@YAMM@Z				; sin
	add	esp, 4
	fmul	DWORD PTR _smul$[ebp]
	fstp	DWORD PTR _mul$[ebp]

; 2240 : 			VecPlusEqScalarVec(&vec, mul, &svec);

	fld	DWORD PTR _mul$[ebp]
	fmul	DWORD PTR _svec$[ebp]
	fadd	DWORD PTR _vec$[ebp]
	fstp	DWORD PTR _vec$[ebp]
	fld	DWORD PTR _mul$[ebp]
	fmul	DWORD PTR _svec$[ebp+4]
	fadd	DWORD PTR _vec$[ebp+4]
	fstp	DWORD PTR _vec$[ebp+4]
	fld	DWORD PTR _mul$[ebp]
	fmul	DWORD PTR _svec$[ebp+8]
	fadd	DWORD PTR _vec$[ebp+8]
	fstp	DWORD PTR _vec$[ebp+8]

; 2241 : 		}
; 2242 : 
; 2243 : 		if (!i)

	cmp	DWORD PTR _i$[ebp], 0
	jne	SHORT $L82154

; 2244 : 			CopyVec(&vec, &start)

	mov	eax, DWORD PTR _vec$[ebp]
	mov	DWORD PTR _start$[ebp], eax
	mov	eax, DWORD PTR _vec$[ebp+4]
	mov	DWORD PTR _start$[ebp+4], eax
	mov	eax, DWORD PTR _vec$[ebp+8]
	mov	DWORD PTR _start$[ebp+8], eax
$L82154:

; 2245 : 
; 2246 : 		if (i == steps)

	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _steps$[ebp]
	jne	SHORT $L82155

; 2247 : 			CopyVec(&vec, &end)

	mov	eax, DWORD PTR _vec$[ebp]
	mov	DWORD PTR _end$[ebp], eax
	mov	eax, DWORD PTR _vec$[ebp+4]
	mov	DWORD PTR _end$[ebp+4], eax
	mov	eax, DWORD PTR _vec$[ebp+8]
	mov	DWORD PTR _end$[ebp+8], eax
$L82155:

; 2248 : 
; 2249 : 		RotTransPersVector(&ViewMatrixScaled, &ViewTransScaled, &vec, (float*)&points[i]);

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 24					; 00000018H
	lea	ecx, DWORD PTR _points$[ebp+eax]
	push	ecx
	lea	edx, DWORD PTR _vec$[ebp]
	push	edx
	push	OFFSET FLAT:?ViewTransScaled@@3UVectorStruct@@A ; ViewTransScaled
	push	OFFSET FLAT:?ViewMatrixScaled@@3TMatrixUnion@@A ; ViewMatrixScaled
	call	?RotTransPersVector@@YAXPATMatrixUnion@@PAUVectorStruct@@1PAM@Z ; RotTransPersVector
	add	esp, 16					; 00000010H

; 2250 : 		AddVector(&pos, &delta, &pos);

	fld	DWORD PTR _pos$[ebp]
	fadd	DWORD PTR _delta$[ebp]
	fstp	DWORD PTR _pos$[ebp]
	fld	DWORD PTR _pos$[ebp+4]
	fadd	DWORD PTR _delta$[ebp+4]
	fstp	DWORD PTR _pos$[ebp+4]
	fld	DWORD PTR _pos$[ebp+8]
	fadd	DWORD PTR _delta$[ebp+8]
	fstp	DWORD PTR _pos$[ebp+8]

; 2251 : 
; 2252 : 		offset++;

	mov	eax, DWORD PTR _offset$[ebp]
	add	eax, 1
	mov	DWORD PTR _offset$[ebp], eax

; 2253 : 		offset %= JUMPSPARK_OFFSET_NUM;

	mov	eax, DWORD PTR _offset$[ebp]
	and	eax, -2147483617			; 8000001fH
	jns	SHORT $L82472
	dec	eax
	or	eax, -32				; ffffffe0H
	inc	eax
$L82472:
	mov	DWORD PTR _offset$[ebp], eax

; 2254 : 
; 2255 : 		s += sadd;

	fld	DWORD PTR _s$[ebp]
	fadd	DWORD PTR _sadd$[ebp]
	fstp	DWORD PTR _s$[ebp]

; 2256 : 	}

	jmp	$L82151
$L82152:

; 2257 : 
; 2258 : // calc delta's for each step
; 2259 : 
; 2260 : 	for (i = 0 ; i < steps ; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $L82157
$L82158:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$L82157:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _steps$[ebp]
	jge	$L82159

; 2261 : 	{
; 2262 : 		dx1 = points[i + 1].sx - points[i].sx;

	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	imul	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 24					; 00000018H
	fld	DWORD PTR _points$[ebp+eax]
	fsub	DWORD PTR _points$[ebp+ecx]
	fstp	DWORD PTR _dx1$[ebp]

; 2263 : 		dy1 = points[i + 1].sy - points[i].sy;

	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	imul	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 24					; 00000018H
	fld	DWORD PTR _points$[ebp+eax+4]
	fsub	DWORD PTR _points$[ebp+ecx+4]
	fstp	DWORD PTR _dy1$[ebp]

; 2264 : 		mul = 4.0f / (float)sqrt(dx1 * dx1 + dy1 * dy1) * points[i].rhw * RenderSettings.GeomPers;

	fld	DWORD PTR _dx1$[ebp]
	fmul	DWORD PTR _dx1$[ebp]
	fld	DWORD PTR _dy1$[ebp]
	fmul	DWORD PTR _dy1$[ebp]
	faddp	ST(1), ST(0)
	push	ecx
	fstp	DWORD PTR [esp]
	call	?sqrt@@YAMM@Z				; sqrt
	add	esp, 4
	fdivr	DWORD PTR __real@40800000
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 24					; 00000018H
	fmul	DWORD PTR _points$[ebp+eax+12]
	fmul	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A
	fstp	DWORD PTR _mul$[ebp]

; 2265 : 		dy[i] = dx1 * mul;

	fld	DWORD PTR _dx1$[ebp]
	fmul	DWORD PTR _mul$[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	fstp	DWORD PTR _dy$[ebp+eax*4]

; 2266 : 		dx[i] = -dy1 * mul;

	fld	DWORD PTR _dy1$[ebp]
	fchs
	fmul	DWORD PTR _mul$[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	fstp	DWORD PTR _dx$[ebp+eax*4]

; 2267 : 	}

	jmp	$L82158
$L82159:

; 2268 : 
; 2269 : // create each poly
; 2270 : 
; 2271 : 	for (i = 0 ; i < steps ; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $L82161
$L82162:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$L82161:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _steps$[ebp]
	jge	$L82112

; 2272 : 	{
; 2273 : 
; 2274 : // get semi slot
; 2275 : 
; 2276 : 		if (!SEMI_POLY_FREE()) return;

	cmp	DWORD PTR ?SemiCount@@3JA, 800		; SemiCount, 00000320H
	jl	SHORT $L82164
	jmp	$L82112
$L82164:

; 2277 : 		SEMI_POLY_SETUP_ZBIAS(verts, FALSE, 4, TPAGE_FX1, TRUE, 1, -128.0f);

	mov	eax, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	eax, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[eax+12], 0
	mov	eax, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	eax, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[eax+4], 4
	mov	eax, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	eax, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[eax+8], 27 ; 0000001bH
	mov	eax, 1
	test	eax, eax
	je	SHORT $L82165
	mov	eax, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	eax, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[eax], 8
	jmp	SHORT $L82166
$L82165:
	mov	eax, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	eax, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[eax], 12 ; 0000000cH
$L82166:
	mov	eax, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	eax, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[eax+16], 1
	mov	eax, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	eax, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[eax+20], -1023410176 ; c3000000H
	mov	eax, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	eax, 152				; 00000098H
	add	eax, OFFSET FLAT:?SemiPoly@@3PAUDRAW_SEMI_POLY@@A+24
	mov	DWORD PTR _verts$[ebp], eax
	mov	ecx, DWORD PTR ?SemiCount@@3JA		; SemiCount
	add	ecx, 1
	mov	DWORD PTR ?SemiCount@@3JA, ecx		; SemiCount

; 2278 : 
; 2279 : // calc dx1, dy1
; 2280 : 
; 2281 : 		if (!i)

	cmp	DWORD PTR _i$[ebp], 0
	jne	SHORT $L82167

; 2282 : 		{
; 2283 : 			dx1 = 0;

	mov	DWORD PTR _dx1$[ebp], 0

; 2284 : 			dy1 = 0;

	mov	DWORD PTR _dy1$[ebp], 0

; 2285 : 		}
; 2286 : 		else

	jmp	SHORT $L82168
$L82167:

; 2287 : 		{
; 2288 : 			dx1 = dx2;

	mov	eax, DWORD PTR _dx2$[ebp]
	mov	DWORD PTR _dx1$[ebp], eax

; 2289 : 			dy1 = dy2;

	mov	eax, DWORD PTR _dy2$[ebp]
	mov	DWORD PTR _dy1$[ebp], eax
$L82168:

; 2290 : 		}
; 2291 : 
; 2292 : // calc dx2, dy2
; 2293 : 
; 2294 : 		if (i == steps - 1)

	mov	eax, DWORD PTR _steps$[ebp]
	sub	eax, 1
	cmp	DWORD PTR _i$[ebp], eax
	jne	SHORT $L82169

; 2295 : 		{
; 2296 : 			dx2 = 0;

	mov	DWORD PTR _dx2$[ebp], 0

; 2297 : 			dy2 = 0;

	mov	DWORD PTR _dy2$[ebp], 0

; 2298 : 		}
; 2299 : 		else

	jmp	SHORT $L82170
$L82169:

; 2300 : 		{
; 2301 : 			dx2 = dx[i] + dx[i + 1];

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	fld	DWORD PTR _dx$[ebp+eax*4]
	fadd	DWORD PTR _dx$[ebp+ecx*4+4]
	fstp	DWORD PTR _dx2$[ebp]

; 2302 : 			dy2 = dy[i] + dy[i + 1];

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	fld	DWORD PTR _dy$[ebp+eax*4]
	fadd	DWORD PTR _dy$[ebp+ecx*4+4]
	fstp	DWORD PTR _dy2$[ebp]

; 2303 : 			mul = 4.0f / (float)sqrt(dx2 * dx2 + dy2 * dy2) * points[i + 1].rhw * RenderSettings.GeomPers;

	fld	DWORD PTR _dx2$[ebp]
	fmul	DWORD PTR _dx2$[ebp]
	fld	DWORD PTR _dy2$[ebp]
	fmul	DWORD PTR _dy2$[ebp]
	faddp	ST(1), ST(0)
	push	ecx
	fstp	DWORD PTR [esp]
	call	?sqrt@@YAMM@Z				; sqrt
	add	esp, 4
	fdivr	DWORD PTR __real@40800000
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	imul	eax, 24					; 00000018H
	fmul	DWORD PTR _points$[ebp+eax+12]
	fmul	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A
	fstp	DWORD PTR _mul$[ebp]

; 2304 : 			dx2 *= mul;

	fld	DWORD PTR _dx2$[ebp]
	fmul	DWORD PTR _mul$[ebp]
	fstp	DWORD PTR _dx2$[ebp]

; 2305 : 			dy2 *= mul;

	fld	DWORD PTR _dy2$[ebp]
	fmul	DWORD PTR _mul$[ebp]
	fstp	DWORD PTR _dy2$[ebp]
$L82170:

; 2306 : 		}
; 2307 : 
; 2308 : // build poly
; 2309 : 
; 2310 : 		verts[0].sx = points[i].sx - dx1;

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 24					; 00000018H
	fld	DWORD PTR _points$[ebp+eax]
	fsub	DWORD PTR _dx1$[ebp]
	mov	ecx, DWORD PTR _verts$[ebp]
	fstp	DWORD PTR [ecx]

; 2311 : 		verts[0].sy = points[i].sy - dy1;

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 24					; 00000018H
	fld	DWORD PTR _points$[ebp+eax+4]
	fsub	DWORD PTR _dy1$[ebp]
	mov	ecx, DWORD PTR _verts$[ebp]
	fstp	DWORD PTR [ecx+4]

; 2312 : 
; 2313 : 		verts[1].sx = points[i + 1].sx - dx2;

	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	imul	eax, 24					; 00000018H
	fld	DWORD PTR _points$[ebp+eax]
	fsub	DWORD PTR _dx2$[ebp]
	mov	ecx, DWORD PTR _verts$[ebp]
	fstp	DWORD PTR [ecx+32]

; 2314 : 		verts[1].sy = points[i + 1].sy - dy2;

	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	imul	eax, 24					; 00000018H
	fld	DWORD PTR _points$[ebp+eax+4]
	fsub	DWORD PTR _dy2$[ebp]
	mov	ecx, DWORD PTR _verts$[ebp]
	fstp	DWORD PTR [ecx+36]

; 2315 : 
; 2316 : 		verts[2].sx = points[i + 1].sx + dx2;

	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	imul	eax, 24					; 00000018H
	fld	DWORD PTR _dx2$[ebp]
	fadd	DWORD PTR _points$[ebp+eax]
	mov	ecx, DWORD PTR _verts$[ebp]
	fstp	DWORD PTR [ecx+64]

; 2317 : 		verts[2].sy = points[i + 1].sy + dy2;

	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	imul	eax, 24					; 00000018H
	fld	DWORD PTR _dy2$[ebp]
	fadd	DWORD PTR _points$[ebp+eax+4]
	mov	ecx, DWORD PTR _verts$[ebp]
	fstp	DWORD PTR [ecx+68]

; 2318 : 
; 2319 : 		verts[3].sx = points[i].sx + dx1;

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 24					; 00000018H
	fld	DWORD PTR _dx1$[ebp]
	fadd	DWORD PTR _points$[ebp+eax]
	mov	ecx, DWORD PTR _verts$[ebp]
	fstp	DWORD PTR [ecx+96]

; 2320 : 		verts[3].sy = points[i].sy + dy1;

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 24					; 00000018H
	fld	DWORD PTR _dy1$[ebp]
	fadd	DWORD PTR _points$[ebp+eax+4]
	mov	ecx, DWORD PTR _verts$[ebp]
	fstp	DWORD PTR [ecx+100]

; 2321 : 
; 2322 : 		verts[0].sz = verts[3].sz = points[i].sz;

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _verts$[ebp]
	mov	edx, DWORD PTR _points$[ebp+eax+8]
	mov	DWORD PTR [ecx+104], edx
	mov	eax, DWORD PTR _verts$[ebp]
	mov	ecx, DWORD PTR _verts$[ebp]
	mov	edx, DWORD PTR [ecx+104]
	mov	DWORD PTR [eax+8], edx

; 2323 : 		verts[1].sz = verts[2].sz = points[i + 1].sz;

	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	imul	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _verts$[ebp]
	mov	edx, DWORD PTR _points$[ebp+eax+8]
	mov	DWORD PTR [ecx+72], edx
	mov	eax, DWORD PTR _verts$[ebp]
	mov	ecx, DWORD PTR _verts$[ebp]
	mov	edx, DWORD PTR [ecx+72]
	mov	DWORD PTR [eax+40], edx

; 2324 : 		verts[0].rhw = verts[3].rhw = points[i].rhw;

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _verts$[ebp]
	mov	edx, DWORD PTR _points$[ebp+eax+12]
	mov	DWORD PTR [ecx+108], edx
	mov	eax, DWORD PTR _verts$[ebp]
	mov	ecx, DWORD PTR _verts$[ebp]
	mov	edx, DWORD PTR [ecx+108]
	mov	DWORD PTR [eax+12], edx

; 2325 : 		verts[1].rhw = verts[2].rhw = points[i + 1].rhw;

	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	imul	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _verts$[ebp]
	mov	edx, DWORD PTR _points$[ebp+eax+12]
	mov	DWORD PTR [ecx+76], edx
	mov	eax, DWORD PTR _verts$[ebp]
	mov	ecx, DWORD PTR _verts$[ebp]
	mov	edx, DWORD PTR [ecx+76]
	mov	DWORD PTR [eax+44], edx

; 2326 : 
; 2327 : 		verts[0].tu = verts[3].tu = 216.0f / 256.0f;

	mov	eax, DWORD PTR _verts$[ebp]
	mov	DWORD PTR [eax+120], 1062731776		; 3f580000H
	mov	ecx, DWORD PTR _verts$[ebp]
	mov	DWORD PTR [ecx+24], 1062731776		; 3f580000H

; 2328 : 		verts[1].tu = verts[2].tu = 223.0f / 256.0f;

	mov	eax, DWORD PTR _verts$[ebp]
	mov	DWORD PTR [eax+88], 1063190528		; 3f5f0000H
	mov	ecx, DWORD PTR _verts$[ebp]
	mov	DWORD PTR [ecx+56], 1063190528		; 3f5f0000H

; 2329 : 		verts[0].tv = verts[1].tv = 33.0f / 256.0f;

	mov	eax, DWORD PTR _verts$[ebp]
	mov	DWORD PTR [eax+60], 1040449536		; 3e040000H
	mov	ecx, DWORD PTR _verts$[ebp]
	mov	DWORD PTR [ecx+28], 1040449536		; 3e040000H

; 2330 : 		verts[2].tv = verts[3].tv = 47.0f / 256.0f;

	mov	eax, DWORD PTR _verts$[ebp]
	mov	DWORD PTR [eax+124], 1044119552		; 3e3c0000H
	mov	ecx, DWORD PTR _verts$[ebp]
	mov	DWORD PTR [ecx+92], 1044119552		; 3e3c0000H

; 2331 : 
; 2332 : 		verts[0].color = verts[1].color = verts[2].color = verts[3].color = 0xffffff;

	mov	eax, DWORD PTR _verts$[ebp]
	mov	DWORD PTR [eax+112], 16777215		; 00ffffffH
	mov	ecx, DWORD PTR _verts$[ebp]
	mov	DWORD PTR [ecx+80], 16777215		; 00ffffffH
	mov	edx, DWORD PTR _verts$[ebp]
	mov	DWORD PTR [edx+48], 16777215		; 00ffffffH
	mov	eax, DWORD PTR _verts$[ebp]
	mov	DWORD PTR [eax+16], 16777215		; 00ffffffH

; 2333 : 	}

	jmp	$L82162
$L82112:

; 2334 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?DrawJumpSpark2@@YAXPAUVectorStruct@@0@Z ENDP		; DrawJumpSpark2
_TEXT	ENDS
END
