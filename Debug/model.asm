; Listing generated by Microsoft (R) Optimizing Compiler Version 13.10.3077 

	TITLE	.\source\model.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT PARA USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_0O@CMLKJBKA@models?2barrel?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BB@PMFGGHAN@models?2beachball?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0P@BOEJIKKO@models?2mercury?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0N@EJNEKLPF@models?2venus?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0N@ILCNDEIK@models?2earth?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0M@KPNEFEDG@models?2mars?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0P@DGALKNII@models?2jupiter?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0O@NENLBMLE@models?2saturn?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0O@OHHCOLEO@models?2uranus?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0P@PMIFGAJN@models?2neptune?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0N@PCDAMNGN@models?2pluto?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0M@KEJJHPDK@models?2moon?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0N@IBHHDPM@models?2rings?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0N@MGBFMDIJ@models?2plane?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0O@HJNCHKDG@models?2plane2?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0O@DLCNMIAH@models?2copter?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0P@HDCPOMBK@models?2copter2?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0P@GKDENNFL@models?2copter3?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0P@MBIFMNNC@models?2dragon1?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0P@OKKIJOBB@models?2dragon2?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0N@ENJBPLFK@models?2water?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0N@MNKEDP@models?2boat1?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0N@CLOAPHPM@models?2boat2?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0P@OPCFEAGL@models?2speedup?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0N@EKEMJFKK@models?2radar?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0P@KGHDELGF@models?2balloon?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0N@DIGCPBPN@models?2horse?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0N@GEOPGHDC@models?2train?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0O@CFMDOKJG@models?2train2?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0O@DMNINLNH@models?2train3?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0O@BFIDCNMH@models?2light1?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0O@DOKOHOAE@models?2light2?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BA@HJPGHMIO@models?2football?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BA@LGMOIDDA@models?2spaceman?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0O@LKGIMGCA@models?2pickup?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0M@BPCDPDBA@models?2flap?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_09FLGOAFFN@edit?2spot?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BA@GADMCOEF@models?2firework?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0M@PGGGEDAD@models?2ball?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0N@MJPIBCPN@models?2wbomb?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_02JDPG@rb?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BE@HDBPKIHH@Can?8t?5load?5model?5?$CFs?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0IK@IAEFILOF@c?3?2documents?5and?5settings?2jarhea@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BP@LIAGBLMI@Can?8t?5alloc?5memory?5for?5?$CFs?5?$CI?$CFd?$CJ?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_05MBDEGLCK@ERROR?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CA@MEBLDMBG@Dodgy?5poly?5texture?5num?5?$CFd?5in?5?$CFs?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_04KLPGNJOE@?$CFs?4m?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_06GJLBIJEM@?$CFs?4hul?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_06LCAGFEAP@?$CFs?4ncp?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BK@EBFHHFDD@Can?8t?5load?5morph?5frame?5?$CFs?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _IsEqualGUID
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _==
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _acosl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _asinl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _atanl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _atan2l
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _ceill
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _cosl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _coshl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _expl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _fabsl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _floorl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _fmodl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _frexpl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _ldexpl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _logl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _log10l
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _modfl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _powl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _sinl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _sinhl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _sqrtl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _tanl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _tanhl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _frexpf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _ldexpf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _acosf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _asinf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _atanf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _atan2f
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _ceilf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _cosf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _coshf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _expf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _fabsf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _floorf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _fmodf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _logf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _log10f
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _modff
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _powf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _sinf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _sinhf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _sqrtf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _tanf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _tanhf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?sqrt@@YAMM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?LoadModel@@YAJPADPAUMODEL@@DDDJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?FreeModel@@YAXPAUMODEL@@J@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DrawModel@@YAXPAUMODEL@@PATMatrixUnion@@PAUVectorStruct@@F@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?TransModelVertsPlainClip@@YAXPAUMODEL@@PATMatrixUnion@@PAUVectorStruct@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?TransModelVertsFogClip@@YAXPAUMODEL@@PATMatrixUnion@@PAUVectorStruct@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?TransModelVertsPlain@@YAXPAUMODEL@@PATMatrixUnion@@PAUVectorStruct@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?TransModelVertsFog@@YAXPAUMODEL@@PATMatrixUnion@@PAUVectorStruct@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?TransModelVertsPlainClipNewVerts@@YAXPAUMODEL@@PATMatrixUnion@@PAUVectorStruct@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?TransModelVertsFogClipNewVerts@@YAXPAUMODEL@@PATMatrixUnion@@PAUVectorStruct@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?TransModelVertsPlainNewVerts@@YAXPAUMODEL@@PATMatrixUnion@@PAUVectorStruct@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?TransModelVertsFogNewVerts@@YAXPAUMODEL@@PATMatrixUnion@@PAUVectorStruct@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?TransModelVertsMirror@@YAXPAUMODEL@@PATMatrixUnion@@PAUVectorStruct@@12@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?TransModelVertsMirrorNewVerts@@YAXPAUMODEL@@PATMatrixUnion@@PAUVectorStruct@@12@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetModelVertsEnvPlain@@YAXPAUMODEL@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetModelVertsEnvLit@@YAXPAUMODEL@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetModelVertsGhost@@YAXPAUMODEL@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetModelVertsGlare@@YAXPAUMODEL@@PAUVectorStruct@@PATMatrixUnion@@F@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DrawModelPolysClip@@YAXPAUMODEL@@JJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DrawModelPolys@@YAXPAUMODEL@@JJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DrawModelPolysMirror@@YAXPAUMODEL@@J@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetEnvStatic@@YAXPAUVectorStruct@@PATMatrixUnion@@JMMM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetEnvActive@@YAXPAUVectorStruct@@PATMatrixUnion@@1JMMM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?InitLevelModels@@YAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?FreeLevelModels@@YAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?LoadOneLevelModel@@YAJJJUrenderflags@@J@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?FreeOneLevelModel@@YAXJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetModelFrames@@YAXPAUMODEL@@PAPADJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetModelMorph@@YAXPAUMODEL@@JJM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CheckModelMeshFx@@YAXPAUMODEL@@PATMatrixUnion@@PAUVectorStruct@@PAF@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Pow_int@N@@YANNH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Pow_int@H@@YAHHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Pow_int@M@@YAMMH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Pow_int@O@@YAOOH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?__LINE__Var@?1??SetModelFrames@@YAXPAUMODEL@@PAPADJ@Z@4JA
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??FreeModel@@YAXPAUMODEL@@J@Z@4JA
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??LoadModel@@YAJPADPAUMODEL@@DDDJ@Z@4JA
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
sxdata	SEGMENT DWORD USE32 'SXDATA'
sxdata	ENDS
FLAT	GROUP _DATA, CONST, _BSS
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBCD
INCLUDELIB OLDNAMES

PUBLIC	?EnvXoffset@@3MA				; EnvXoffset
PUBLIC	?EnvYoffset@@3MA				; EnvYoffset
PUBLIC	?EnvScale@@3MA					; EnvScale
PUBLIC	??_C@_0O@CMLKJBKA@models?2barrel?$AA@		; `string'
PUBLIC	??_C@_0BB@PMFGGHAN@models?2beachball?$AA@	; `string'
PUBLIC	??_C@_0P@BOEJIKKO@models?2mercury?$AA@		; `string'
PUBLIC	??_C@_0N@EJNEKLPF@models?2venus?$AA@		; `string'
PUBLIC	??_C@_0N@ILCNDEIK@models?2earth?$AA@		; `string'
PUBLIC	??_C@_0M@KPNEFEDG@models?2mars?$AA@		; `string'
PUBLIC	??_C@_0P@DGALKNII@models?2jupiter?$AA@		; `string'
PUBLIC	??_C@_0O@NENLBMLE@models?2saturn?$AA@		; `string'
PUBLIC	??_C@_0O@OHHCOLEO@models?2uranus?$AA@		; `string'
PUBLIC	??_C@_0P@PMIFGAJN@models?2neptune?$AA@		; `string'
PUBLIC	??_C@_0N@PCDAMNGN@models?2pluto?$AA@		; `string'
PUBLIC	??_C@_0M@KEJJHPDK@models?2moon?$AA@		; `string'
PUBLIC	??_C@_0N@IBHHDPM@models?2rings?$AA@		; `string'
PUBLIC	??_C@_0N@MGBFMDIJ@models?2plane?$AA@		; `string'
PUBLIC	??_C@_0O@HJNCHKDG@models?2plane2?$AA@		; `string'
PUBLIC	??_C@_0O@DLCNMIAH@models?2copter?$AA@		; `string'
PUBLIC	??_C@_0P@HDCPOMBK@models?2copter2?$AA@		; `string'
PUBLIC	??_C@_0P@GKDENNFL@models?2copter3?$AA@		; `string'
PUBLIC	??_C@_0P@MBIFMNNC@models?2dragon1?$AA@		; `string'
PUBLIC	??_C@_0P@OKKIJOBB@models?2dragon2?$AA@		; `string'
PUBLIC	??_C@_0N@ENJBPLFK@models?2water?$AA@		; `string'
PUBLIC	??_C@_0N@MNKEDP@models?2boat1?$AA@		; `string'
PUBLIC	??_C@_0N@CLOAPHPM@models?2boat2?$AA@		; `string'
PUBLIC	??_C@_0P@OPCFEAGL@models?2speedup?$AA@		; `string'
PUBLIC	??_C@_0N@EKEMJFKK@models?2radar?$AA@		; `string'
PUBLIC	??_C@_0P@KGHDELGF@models?2balloon?$AA@		; `string'
PUBLIC	??_C@_0N@DIGCPBPN@models?2horse?$AA@		; `string'
PUBLIC	??_C@_0N@GEOPGHDC@models?2train?$AA@		; `string'
PUBLIC	??_C@_0O@CFMDOKJG@models?2train2?$AA@		; `string'
PUBLIC	??_C@_0O@DMNINLNH@models?2train3?$AA@		; `string'
PUBLIC	??_C@_0O@BFIDCNMH@models?2light1?$AA@		; `string'
PUBLIC	??_C@_0O@DOKOHOAE@models?2light2?$AA@		; `string'
PUBLIC	??_C@_0BA@HJPGHMIO@models?2football?$AA@	; `string'
PUBLIC	??_C@_0BA@LGMOIDDA@models?2spaceman?$AA@	; `string'
PUBLIC	??_C@_0O@LKGIMGCA@models?2pickup?$AA@		; `string'
PUBLIC	??_C@_0M@BPCDPDBA@models?2flap?$AA@		; `string'
PUBLIC	??_C@_09FLGOAFFN@edit?2spot?$AA@		; `string'
PUBLIC	??_C@_0BA@GADMCOEF@models?2firework?$AA@	; `string'
PUBLIC	??_C@_0M@PGGGEDAD@models?2ball?$AA@		; `string'
PUBLIC	??_C@_0N@MJPIBCPN@models?2wbomb?$AA@		; `string'
PUBLIC	?ModelVertFog@@3MA				; ModelVertFog
PUBLIC	?ModelPolyCount@@3FA				; ModelPolyCount
PUBLIC	?ModelDrawnCount@@3FA				; ModelDrawnCount
PUBLIC	?EnvTpage@@3FA					; EnvTpage
PUBLIC	?EnvMatrix@@3TMatrixUnion@@A			; EnvMatrix
PUBLIC	?EnvRgb@@3UMODEL_RGB@@A				; EnvRgb
PUBLIC	?ModelAddLit@@3JA				; ModelAddLit
PUBLIC	?ModelScale@@3MA				; ModelScale
PUBLIC	?GhostSineCount@@3MA				; GhostSineCount
PUBLIC	?GhostSinePos@@3MA				; GhostSinePos
PUBLIC	?GhostSineOffset@@3MA				; GhostSineOffset
PUBLIC	?LevelModel@@3PAULEVEL_MODEL@@A			; LevelModel
PUBLIC	?ModelMeshModel@@3PAUMODEL@@A			; ModelMeshModel
PUBLIC	?ModelMeshMat@@3PATMatrixUnion@@A		; ModelMeshMat
PUBLIC	?ModelMeshPos@@3PAUVectorStruct@@A		; ModelMeshPos
PUBLIC	?ModelMeshFlag@@3PAFA				; ModelMeshFlag
_BSS	SEGMENT
?EnvXoffset@@3MA DD 01H DUP (?)				; EnvXoffset
?EnvYoffset@@3MA DD 01H DUP (?)				; EnvYoffset
?EnvScale@@3MA DD 01H DUP (?)				; EnvScale
?ModelVertFog@@3MA DD 01H DUP (?)			; ModelVertFog
?ModelPolyCount@@3FA DW 01H DUP (?)			; ModelPolyCount
	ALIGN	4

?ModelDrawnCount@@3FA DW 01H DUP (?)			; ModelDrawnCount
	ALIGN	4

?EnvTpage@@3FA DW 01H DUP (?)				; EnvTpage
	ALIGN	4

?EnvMatrix@@3TMatrixUnion@@A DB 024H DUP (?)		; EnvMatrix
?EnvRgb@@3UMODEL_RGB@@A DD 01H DUP (?)			; EnvRgb
?ModelAddLit@@3JA DD 01H DUP (?)			; ModelAddLit
?ModelScale@@3MA DD 01H DUP (?)				; ModelScale
?GhostSineCount@@3MA DD 01H DUP (?)			; GhostSineCount
?GhostSinePos@@3MA DD 01H DUP (?)			; GhostSinePos
?GhostSineOffset@@3MA DD 01H DUP (?)			; GhostSineOffset
?LevelModel@@3PAULEVEL_MODEL@@A DB 02a00H DUP (?)	; LevelModel
?ModelMeshModel@@3PAUMODEL@@A DD 01H DUP (?)		; ModelMeshModel
?ModelMeshMat@@3PATMatrixUnion@@A DD 01H DUP (?)	; ModelMeshMat
?ModelMeshPos@@3PAUVectorStruct@@A DD 01H DUP (?)	; ModelMeshPos
?ModelMeshFlag@@3PAFA DD 01H DUP (?)			; ModelMeshFlag
_BSS	ENDS
_DATA	SEGMENT
_AerialSectionName DB 'CARS\misc\Aerial.m', 00H
	ORG $+1
_AerialTopName DB 'CARS\misc\Aerialt.m', 00H
_DATA	ENDS
;	COMDAT ??_C@_0O@CMLKJBKA@models?2barrel?$AA@
CONST	SEGMENT
??_C@_0O@CMLKJBKA@models?2barrel?$AA@ DB 'models\barrel', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@PMFGGHAN@models?2beachball?$AA@
CONST	SEGMENT
??_C@_0BB@PMFGGHAN@models?2beachball?$AA@ DB 'models\beachball', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@BOEJIKKO@models?2mercury?$AA@
CONST	SEGMENT
??_C@_0P@BOEJIKKO@models?2mercury?$AA@ DB 'models\mercury', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@EJNEKLPF@models?2venus?$AA@
CONST	SEGMENT
??_C@_0N@EJNEKLPF@models?2venus?$AA@ DB 'models\venus', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@ILCNDEIK@models?2earth?$AA@
CONST	SEGMENT
??_C@_0N@ILCNDEIK@models?2earth?$AA@ DB 'models\earth', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@KPNEFEDG@models?2mars?$AA@
CONST	SEGMENT
??_C@_0M@KPNEFEDG@models?2mars?$AA@ DB 'models\mars', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@DGALKNII@models?2jupiter?$AA@
CONST	SEGMENT
??_C@_0P@DGALKNII@models?2jupiter?$AA@ DB 'models\jupiter', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@NENLBMLE@models?2saturn?$AA@
CONST	SEGMENT
??_C@_0O@NENLBMLE@models?2saturn?$AA@ DB 'models\saturn', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@OHHCOLEO@models?2uranus?$AA@
CONST	SEGMENT
??_C@_0O@OHHCOLEO@models?2uranus?$AA@ DB 'models\uranus', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@PMIFGAJN@models?2neptune?$AA@
CONST	SEGMENT
??_C@_0P@PMIFGAJN@models?2neptune?$AA@ DB 'models\neptune', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@PCDAMNGN@models?2pluto?$AA@
CONST	SEGMENT
??_C@_0N@PCDAMNGN@models?2pluto?$AA@ DB 'models\pluto', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@KEJJHPDK@models?2moon?$AA@
CONST	SEGMENT
??_C@_0M@KEJJHPDK@models?2moon?$AA@ DB 'models\moon', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@IBHHDPM@models?2rings?$AA@
CONST	SEGMENT
??_C@_0N@IBHHDPM@models?2rings?$AA@ DB 'models\rings', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@MGBFMDIJ@models?2plane?$AA@
CONST	SEGMENT
??_C@_0N@MGBFMDIJ@models?2plane?$AA@ DB 'models\plane', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@HJNCHKDG@models?2plane2?$AA@
CONST	SEGMENT
??_C@_0O@HJNCHKDG@models?2plane2?$AA@ DB 'models\plane2', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@DLCNMIAH@models?2copter?$AA@
CONST	SEGMENT
??_C@_0O@DLCNMIAH@models?2copter?$AA@ DB 'models\copter', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@HDCPOMBK@models?2copter2?$AA@
CONST	SEGMENT
??_C@_0P@HDCPOMBK@models?2copter2?$AA@ DB 'models\copter2', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@GKDENNFL@models?2copter3?$AA@
CONST	SEGMENT
??_C@_0P@GKDENNFL@models?2copter3?$AA@ DB 'models\copter3', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@MBIFMNNC@models?2dragon1?$AA@
CONST	SEGMENT
??_C@_0P@MBIFMNNC@models?2dragon1?$AA@ DB 'models\dragon1', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@OKKIJOBB@models?2dragon2?$AA@
CONST	SEGMENT
??_C@_0P@OKKIJOBB@models?2dragon2?$AA@ DB 'models\dragon2', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@ENJBPLFK@models?2water?$AA@
CONST	SEGMENT
??_C@_0N@ENJBPLFK@models?2water?$AA@ DB 'models\water', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@MNKEDP@models?2boat1?$AA@
CONST	SEGMENT
??_C@_0N@MNKEDP@models?2boat1?$AA@ DB 'models\boat1', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@CLOAPHPM@models?2boat2?$AA@
CONST	SEGMENT
??_C@_0N@CLOAPHPM@models?2boat2?$AA@ DB 'models\boat2', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@OPCFEAGL@models?2speedup?$AA@
CONST	SEGMENT
??_C@_0P@OPCFEAGL@models?2speedup?$AA@ DB 'models\speedup', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@EKEMJFKK@models?2radar?$AA@
CONST	SEGMENT
??_C@_0N@EKEMJFKK@models?2radar?$AA@ DB 'models\radar', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@KGHDELGF@models?2balloon?$AA@
CONST	SEGMENT
??_C@_0P@KGHDELGF@models?2balloon?$AA@ DB 'models\balloon', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@DIGCPBPN@models?2horse?$AA@
CONST	SEGMENT
??_C@_0N@DIGCPBPN@models?2horse?$AA@ DB 'models\horse', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@GEOPGHDC@models?2train?$AA@
CONST	SEGMENT
??_C@_0N@GEOPGHDC@models?2train?$AA@ DB 'models\train', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@CFMDOKJG@models?2train2?$AA@
CONST	SEGMENT
??_C@_0O@CFMDOKJG@models?2train2?$AA@ DB 'models\train2', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@DMNINLNH@models?2train3?$AA@
CONST	SEGMENT
??_C@_0O@DMNINLNH@models?2train3?$AA@ DB 'models\train3', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@BFIDCNMH@models?2light1?$AA@
CONST	SEGMENT
??_C@_0O@BFIDCNMH@models?2light1?$AA@ DB 'models\light1', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@DOKOHOAE@models?2light2?$AA@
CONST	SEGMENT
??_C@_0O@DOKOHOAE@models?2light2?$AA@ DB 'models\light2', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@HJPGHMIO@models?2football?$AA@
CONST	SEGMENT
??_C@_0BA@HJPGHMIO@models?2football?$AA@ DB 'models\football', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@LGMOIDDA@models?2spaceman?$AA@
CONST	SEGMENT
??_C@_0BA@LGMOIDDA@models?2spaceman?$AA@ DB 'models\spaceman', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@LKGIMGCA@models?2pickup?$AA@
CONST	SEGMENT
??_C@_0O@LKGIMGCA@models?2pickup?$AA@ DB 'models\pickup', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@BPCDPDBA@models?2flap?$AA@
CONST	SEGMENT
??_C@_0M@BPCDPDBA@models?2flap?$AA@ DB 'models\flap', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09FLGOAFFN@edit?2spot?$AA@
CONST	SEGMENT
??_C@_09FLGOAFFN@edit?2spot?$AA@ DB 'edit\spot', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@GADMCOEF@models?2firework?$AA@
CONST	SEGMENT
??_C@_0BA@GADMCOEF@models?2firework?$AA@ DB 'models\firework', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@PGGGEDAD@models?2ball?$AA@
CONST	SEGMENT
??_C@_0M@PGGGEDAD@models?2ball?$AA@ DB 'models\ball', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@MJPIBCPN@models?2wbomb?$AA@
CONST	SEGMENT
??_C@_0N@MJPIBCPN@models?2wbomb?$AA@ DB 'models\wbomb', 00H ; `string'
CONST	ENDS
_DATA	SEGMENT
_LevelModelList DD FLAT:??_C@_0O@CMLKJBKA@models?2barrel?$AA@
	DD	FLAT:??_C@_0BB@PMFGGHAN@models?2beachball?$AA@
	DD	FLAT:??_C@_0P@BOEJIKKO@models?2mercury?$AA@
	DD	FLAT:??_C@_0N@EJNEKLPF@models?2venus?$AA@
	DD	FLAT:??_C@_0N@ILCNDEIK@models?2earth?$AA@
	DD	FLAT:??_C@_0M@KPNEFEDG@models?2mars?$AA@
	DD	FLAT:??_C@_0P@DGALKNII@models?2jupiter?$AA@
	DD	FLAT:??_C@_0O@NENLBMLE@models?2saturn?$AA@
	DD	FLAT:??_C@_0O@OHHCOLEO@models?2uranus?$AA@
	DD	FLAT:??_C@_0P@PMIFGAJN@models?2neptune?$AA@
	DD	FLAT:??_C@_0N@PCDAMNGN@models?2pluto?$AA@
	DD	FLAT:??_C@_0M@KEJJHPDK@models?2moon?$AA@
	DD	FLAT:??_C@_0N@IBHHDPM@models?2rings?$AA@
	DD	FLAT:??_C@_0N@MGBFMDIJ@models?2plane?$AA@
	DD	FLAT:??_C@_0O@HJNCHKDG@models?2plane2?$AA@
	DD	FLAT:??_C@_0O@DLCNMIAH@models?2copter?$AA@
	DD	FLAT:??_C@_0P@HDCPOMBK@models?2copter2?$AA@
	DD	FLAT:??_C@_0P@GKDENNFL@models?2copter3?$AA@
	DD	FLAT:??_C@_0P@MBIFMNNC@models?2dragon1?$AA@
	DD	FLAT:??_C@_0P@OKKIJOBB@models?2dragon2?$AA@
	DD	FLAT:??_C@_0N@ENJBPLFK@models?2water?$AA@
	DD	FLAT:??_C@_0N@MNKEDP@models?2boat1?$AA@
	DD	FLAT:??_C@_0N@CLOAPHPM@models?2boat2?$AA@
	DD	FLAT:??_C@_0P@OPCFEAGL@models?2speedup?$AA@
	DD	FLAT:??_C@_0N@EKEMJFKK@models?2radar?$AA@
	DD	FLAT:??_C@_0P@KGHDELGF@models?2balloon?$AA@
	DD	FLAT:??_C@_0N@DIGCPBPN@models?2horse?$AA@
	DD	FLAT:??_C@_0N@GEOPGHDC@models?2train?$AA@
	DD	FLAT:??_C@_0O@CFMDOKJG@models?2train2?$AA@
	DD	FLAT:??_C@_0O@DMNINLNH@models?2train3?$AA@
	DD	FLAT:??_C@_0O@BFIDCNMH@models?2light1?$AA@
	DD	FLAT:??_C@_0O@DOKOHOAE@models?2light2?$AA@
	DD	FLAT:??_C@_0BA@HJPGHMIO@models?2football?$AA@
	DD	FLAT:??_C@_0BA@LGMOIDDA@models?2spaceman?$AA@
	DD	FLAT:??_C@_0O@LKGIMGCA@models?2pickup?$AA@
	DD	FLAT:??_C@_0M@BPCDPDBA@models?2flap?$AA@
	DD	FLAT:??_C@_09FLGOAFFN@edit?2spot?$AA@
	DD	FLAT:??_C@_0BA@GADMCOEF@models?2firework?$AA@
	DD	FLAT:??_C@_0M@PGGGEDAD@models?2ball?$AA@
	DD	FLAT:??_C@_0N@MJPIBCPN@models?2wbomb?$AA@
	DD	FLAT:??_C@_0M@PGGGEDAD@models?2ball?$AA@
_DATA	ENDS
PUBLIC	?sqrt@@YAMM@Z					; sqrt
PUBLIC	??_C@_02JDPG@rb?$AA@				; `string'
PUBLIC	??_C@_0BE@HDBPKIHH@Can?8t?5load?5model?5?$CFs?$AA@ ; `string'
PUBLIC	?__LINE__Var@?1??LoadModel@@YAJPADPAUMODEL@@DDDJ@Z@4JA ; `LoadModel'::`2'::__LINE__Var
PUBLIC	??_C@_0IK@IAEFILOF@c?3?2documents?5and?5settings?2jarhea@ ; `string'
PUBLIC	??_C@_0BP@LIAGBLMI@Can?8t?5alloc?5memory?5for?5?$CFs?5?$CI?$CFd?$CJ?$AA@ ; `string'
PUBLIC	??_C@_05MBDEGLCK@ERROR?$AA@			; `string'
PUBLIC	??_C@_0CA@MEBLDMBG@Dodgy?5poly?5texture?5num?5?$CFd?5in?5?$CFs?$AA@ ; `string'
PUBLIC	?LoadModel@@YAJPADPAUMODEL@@DDDJ@Z		; LoadModel
EXTRN	_fclose:NEAR
EXTRN	_fopen:NEAR
EXTRN	_fread:NEAR
EXTRN	__fltused:NEAR
EXTRN	?DebugMalloc@@YAPAXIHPAD@Z:NEAR			; DebugMalloc
EXTRN	?Box@@YAJPAD0J@Z:NEAR				; Box
EXTRN	?GameSettings@@3UGAME_SETTINGS@@A:BYTE		; GameSettings
EXTRN	__imp__wsprintfA:NEAR
;	COMDAT ??_C@_02JDPG@rb?$AA@
; File c:\documents and settings\jarhead\desktop\shit to display my love for xbox revolt and fuck you borman-ness\revolt source\source\model.cpp
CONST	SEGMENT
??_C@_02JDPG@rb?$AA@ DB 'rb', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@HDBPKIHH@Can?8t?5load?5model?5?$CFs?$AA@
CONST	SEGMENT
??_C@_0BE@HDBPKIHH@Can?8t?5load?5model?5?$CFs?$AA@ DB 'Can''t load model '
	DB	'%s', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0IK@IAEFILOF@c?3?2documents?5and?5settings?2jarhea@
CONST	SEGMENT
??_C@_0IK@IAEFILOF@c?3?2documents?5and?5settings?2jarhea@ DB 'c:\document'
	DB	's and settings\jarhead\desktop\shit to display my love for xb'
	DB	'ox revolt and fuck you borman-ness\revolt source\source\model'
	DB	'.cpp', 00H					; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??LoadModel@@YAJPADPAUMODEL@@DDDJ@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??LoadModel@@YAJPADPAUMODEL@@DDDJ@Z@4JA DD 066H ; `LoadModel'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0BP@LIAGBLMI@Can?8t?5alloc?5memory?5for?5?$CFs?5?$CI?$CFd?$CJ?$AA@
CONST	SEGMENT
??_C@_0BP@LIAGBLMI@Can?8t?5alloc?5memory?5for?5?$CFs?5?$CI?$CFd?$CJ?$AA@ DB 'C'
	DB	'an''t alloc memory for %s (%d)', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05MBDEGLCK@ERROR?$AA@
CONST	SEGMENT
??_C@_05MBDEGLCK@ERROR?$AA@ DB 'ERROR', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@MEBLDMBG@Dodgy?5poly?5texture?5num?5?$CFd?5in?5?$CFs?$AA@
CONST	SEGMENT
??_C@_0CA@MEBLDMBG@Dodgy?5poly?5texture?5num?5?$CFd?5in?5?$CFs?$AA@ DB 'D'
	DB	'odgy poly texture num %d in %s', 00H	; `string'
; Function compile flags: /Odt /ZI
CONST	ENDS
;	COMDAT ?LoadModel@@YAJPADPAUMODEL@@DDDJ@Z
_TEXT	SEGMENT
_prm$ = -329						; size = 1
_buf$ = -328						; size = 128
_count$ = -200						; size = 4
_b$ = -196						; size = 4
_a$ = -192						; size = 4
_k$ = -188						; size = 4
_j$ = -184						; size = 4
_i$ = -180						; size = 4
_size$ = -176						; size = 4
_rad$ = -172						; size = 4
_poly$ = -168						; size = 52
_mp$ = -116						; size = 4
_rgb$ = -112						; size = 16
_mrgb$ = -96						; size = 4
_mvl$ = -92						; size = 24
_mpl$ = -68						; size = 60
_mh$ = -8						; size = 4
_fp$ = -4						; size = 4
_file$ = 8						; size = 4
_m$ = 12						; size = 4
_tpage$ = 16						; size = 1
_prmlevel$ = 20						; size = 1
_loadflag$ = 24						; size = 1
_RgbPer$ = 28						; size = 4
?LoadModel@@YAJPADPAUMODEL@@DDDJ@Z PROC NEAR		; LoadModel, COMDAT

; 102  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 396				; 0000018cH
	push	ebx
	push	esi
	push	edi

; 103  : 	FILE *fp;
; 104  : 	MODEL_HEADER mh;
; 105  : 	MODEL_POLY_LOAD mpl;
; 106  : 	MODEL_VERTEX_LOAD mvl;
; 107  : 	POLY_RGB *mrgb, rgb;
; 108  : 	MODEL_POLY *mp, poly;
; 109  : 	float rad;
; 110  : 	long size, i, j, k, a, b, count;
; 111  : 	char buf[128];
; 112  : 	char prm;
; 113  : 
; 114  : // open file for reading
; 115  : 
; 116  : 	if (file == NULL || file[0] == '\0')

	cmp	DWORD PTR _file$[ebp], 0
	je	SHORT $L81563
	mov	eax, DWORD PTR _file$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $L81562
$L81563:

; 117  : 		return FALSE;

	xor	eax, eax
	jmp	$L81543
$L81562:

; 118  : 
; 119  : 	fp = fopen(file, "rb");

	push	OFFSET FLAT:??_C@_02JDPG@rb?$AA@
	mov	eax, DWORD PTR _file$[ebp]
	push	eax
	call	_fopen
	add	esp, 8
	mov	DWORD PTR _fp$[ebp], eax

; 120  : 	if (fp == NULL)

	cmp	DWORD PTR _fp$[ebp], 0
	jne	SHORT $L81565

; 121  : 	{
; 122  : 		wsprintf(buf, "Can't load model %s", file);

	mov	eax, DWORD PTR _file$[ebp]
	push	eax
	push	OFFSET FLAT:??_C@_0BE@HDBPKIHH@Can?8t?5load?5model?5?$CFs?$AA@
	lea	ecx, DWORD PTR _buf$[ebp]
	push	ecx
	call	DWORD PTR __imp__wsprintfA
	add	esp, 12					; 0000000cH

; 123  : 		Box(NULL, buf, MB_OK);

	push	0
	lea	eax, DWORD PTR _buf$[ebp]
	push	eax
	push	0
	call	?Box@@YAJPAD0J@Z			; Box
	add	esp, 12					; 0000000cH

; 124  : 		return FALSE;

	xor	eax, eax
	jmp	$L81543
$L81565:

; 125  : 	}
; 126  : 
; 127  : // loop thru prm count
; 128  : 
; 129  : 	count = 0;

	mov	DWORD PTR _count$[ebp], 0

; 130  : 
; 131  : 	for (prm = 0 ; prm < prmlevel ; prm++, m++, count++)

	mov	BYTE PTR _prm$[ebp], 0
	jmp	SHORT $L81567
$L81568:
	mov	al, BYTE PTR _prm$[ebp]
	add	al, 1
	mov	BYTE PTR _prm$[ebp], al
	mov	ecx, DWORD PTR _m$[ebp]
	add	ecx, 60					; 0000003cH
	mov	DWORD PTR _m$[ebp], ecx
	mov	edx, DWORD PTR _count$[ebp]
	add	edx, 1
	mov	DWORD PTR _count$[ebp], edx
$L81567:
	movsx	eax, BYTE PTR _prm$[ebp]
	movsx	ecx, BYTE PTR _prmlevel$[ebp]
	cmp	eax, ecx
	jge	$L81569

; 132  : 	{
; 133  : 
; 134  : // get header info
; 135  : 
; 136  : 		fread(&mh, sizeof(mh), 1, fp);

	mov	eax, DWORD PTR _fp$[ebp]
	push	eax
	push	1
	push	4
	lea	ecx, DWORD PTR _mh$[ebp]
	push	ecx
	call	_fread
	add	esp, 16					; 00000010H

; 137  : 
; 138  : // NULL remaining models if end of file
; 139  : 
; 140  : 		if (feof(fp))

	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	and	ecx, 16					; 00000010H
	je	SHORT $L81570

; 141  : 		{
; 142  : 			for ( ; prm < prmlevel ; prm++, m++)

	jmp	SHORT $L81571
$L81572:
	mov	al, BYTE PTR _prm$[ebp]
	add	al, 1
	mov	BYTE PTR _prm$[ebp], al
	mov	ecx, DWORD PTR _m$[ebp]
	add	ecx, 60					; 0000003cH
	mov	DWORD PTR _m$[ebp], ecx
$L81571:
	movsx	eax, BYTE PTR _prm$[ebp]
	movsx	ecx, BYTE PTR _prmlevel$[ebp]
	cmp	eax, ecx
	jge	SHORT $L81573

; 143  : 			{
; 144  : 				m->PolyNum = 0;

	mov	eax, DWORD PTR _m$[ebp]
	mov	WORD PTR [eax+32], 0

; 145  : 				m->VertNum = 0;

	mov	eax, DWORD PTR _m$[ebp]
	mov	WORD PTR [eax+34], 0

; 146  : 				m->AllocPtr = NULL;

	mov	eax, DWORD PTR _m$[ebp]
	mov	DWORD PTR [eax+28], 0

; 147  : 				m->VertPtrMorph = NULL;

	mov	eax, DWORD PTR _m$[ebp]
	mov	DWORD PTR [eax+56], 0

; 148  : 			}

	jmp	SHORT $L81572
$L81573:

; 149  : 			break;

	jmp	$L81569
$L81570:

; 150  : 		}
; 151  : 
; 152  : // alloc model memory
; 153  : 
; 154  : 		m->PolyNum = mh.PolyNum;

	mov	eax, DWORD PTR _m$[ebp]
	mov	cx, WORD PTR _mh$[ebp]
	mov	WORD PTR [eax+32], cx

; 155  : 		m->VertNum = mh.VertNum;

	mov	eax, DWORD PTR _m$[ebp]
	mov	cx, WORD PTR _mh$[ebp+2]
	mov	WORD PTR [eax+34], cx

; 156  : 
; 157  : 		size = sizeof(POLY_RGB) * m->PolyNum;

	mov	eax, DWORD PTR _m$[ebp]
	movsx	ecx, WORD PTR [eax+32]
	shl	ecx, 4
	mov	DWORD PTR _size$[ebp], ecx

; 158  : 		size += sizeof(MODEL_POLY) * m->PolyNum;

	mov	eax, DWORD PTR _m$[ebp]
	movsx	ecx, WORD PTR [eax+32]
	imul	ecx, 52					; 00000034H
	add	ecx, DWORD PTR _size$[ebp]
	mov	DWORD PTR _size$[ebp], ecx

; 159  : 		size += sizeof(MODEL_VERTEX) * m->VertNum;

	mov	eax, DWORD PTR _m$[ebp]
	movsx	ecx, WORD PTR [eax+34]
	imul	ecx, 88					; 00000058H
	add	ecx, DWORD PTR _size$[ebp]
	mov	DWORD PTR _size$[ebp], ecx

; 160  : 
; 161  : 		m->AllocPtr = malloc(size);

	push	OFFSET FLAT:??_C@_0IK@IAEFILOF@c?3?2documents?5and?5settings?2jarhea@
	mov	eax, DWORD PTR ?__LINE__Var@?1??LoadModel@@YAJPADPAUMODEL@@DDDJ@Z@4JA
	add	eax, 59					; 0000003bH
	push	eax
	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	call	?DebugMalloc@@YAPAXIHPAD@Z		; DebugMalloc
	add	esp, 12					; 0000000cH
	mov	edx, DWORD PTR _m$[ebp]
	mov	DWORD PTR [edx+28], eax

; 162  : 		if (m->AllocPtr == NULL)

	mov	eax, DWORD PTR _m$[ebp]
	cmp	DWORD PTR [eax+28], 0
	jne	SHORT $L81579

; 163  : 		{
; 164  : 			wsprintf(buf, "Can't alloc memory for %s (%d)", file, prm);

	movsx	eax, BYTE PTR _prm$[ebp]
	push	eax
	mov	ecx, DWORD PTR _file$[ebp]
	push	ecx
	push	OFFSET FLAT:??_C@_0BP@LIAGBLMI@Can?8t?5alloc?5memory?5for?5?$CFs?5?$CI?$CFd?$CJ?$AA@
	lea	edx, DWORD PTR _buf$[ebp]
	push	edx
	call	DWORD PTR __imp__wsprintfA
	add	esp, 16					; 00000010H

; 165  : 			Box("ERROR", buf, MB_OK);

	push	0
	lea	eax, DWORD PTR _buf$[ebp]
	push	eax
	push	OFFSET FLAT:??_C@_05MBDEGLCK@ERROR?$AA@
	call	?Box@@YAJPAD0J@Z			; Box
	add	esp, 12					; 0000000cH

; 166  : 			return FALSE;

	xor	eax, eax
	jmp	$L81543
$L81579:

; 167  : 		}
; 168  : 
; 169  : 		m->PolyRGB = (POLY_RGB*)(m->AllocPtr);

	mov	eax, DWORD PTR _m$[ebp]
	mov	ecx, DWORD PTR _m$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR [eax+44], edx

; 170  : 		m->PolyPtr = (MODEL_POLY*)(m->PolyRGB + m->PolyNum);

	mov	eax, DWORD PTR _m$[ebp]
	movsx	ecx, WORD PTR [eax+32]
	shl	ecx, 4
	mov	edx, DWORD PTR _m$[ebp]
	add	ecx, DWORD PTR [edx+44]
	mov	eax, DWORD PTR _m$[ebp]
	mov	DWORD PTR [eax+48], ecx

; 171  : 		m->VertPtr = (MODEL_VERTEX*)(m->PolyPtr + m->PolyNum);

	mov	eax, DWORD PTR _m$[ebp]
	movsx	ecx, WORD PTR [eax+32]
	imul	ecx, 52					; 00000034H
	mov	edx, DWORD PTR _m$[ebp]
	add	ecx, DWORD PTR [edx+48]
	mov	eax, DWORD PTR _m$[ebp]
	mov	DWORD PTR [eax+52], ecx

; 172  : 		m->VertPtrMorph = NULL;

	mov	eax, DWORD PTR _m$[ebp]
	mov	DWORD PTR [eax+56], 0

; 173  : 
; 174  : // load polys - count textured / rgb + quads / tris's
; 175  : 
; 176  : 		mrgb = m->PolyRGB;

	mov	eax, DWORD PTR _m$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	mov	DWORD PTR _mrgb$[ebp], ecx

; 177  : 		mp = m->PolyPtr;

	mov	eax, DWORD PTR _m$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	mov	DWORD PTR _mp$[ebp], ecx

; 178  : 
; 179  : 		m->QuadNumTex = 0;

	mov	eax, DWORD PTR _m$[ebp]
	mov	WORD PTR [eax+36], 0

; 180  : 		m->TriNumTex = 0;

	mov	eax, DWORD PTR _m$[ebp]
	mov	WORD PTR [eax+38], 0

; 181  : 		m->QuadNumRGB = 0;

	mov	eax, DWORD PTR _m$[ebp]
	mov	WORD PTR [eax+40], 0

; 182  : 		m->TriNumRGB = 0;

	mov	eax, DWORD PTR _m$[ebp]
	mov	WORD PTR [eax+42], 0

; 183  : 
; 184  : 		for (i = 0 ; i < m->PolyNum ; i++, mrgb++, mp++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $L81585
$L81586:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	mov	ecx, DWORD PTR _mrgb$[ebp]
	add	ecx, 16					; 00000010H
	mov	DWORD PTR _mrgb$[ebp], ecx
	mov	edx, DWORD PTR _mp$[ebp]
	add	edx, 52					; 00000034H
	mov	DWORD PTR _mp$[ebp], edx
$L81585:
	mov	eax, DWORD PTR _m$[ebp]
	movsx	ecx, WORD PTR [eax+32]
	cmp	DWORD PTR _i$[ebp], ecx
	jge	$L81587

; 185  : 		{
; 186  : 			fread(&mpl, sizeof(mpl), 1, fp);

	mov	eax, DWORD PTR _fp$[ebp]
	push	eax
	push	1
	push	60					; 0000003cH
	lea	ecx, DWORD PTR _mpl$[ebp]
	push	ecx
	call	_fread
	add	esp, 16					; 00000010H

; 187  : 
; 188  : 			mp->Type = mpl.Type;

	mov	eax, DWORD PTR _mp$[ebp]
	mov	cx, WORD PTR _mpl$[ebp]
	mov	WORD PTR [eax], cx

; 189  : 
; 190  : 			if ((mp->Tpage = mpl.Tpage) != -1)

	mov	eax, DWORD PTR _mp$[ebp]
	mov	cx, WORD PTR _mpl$[ebp+2]
	mov	WORD PTR [eax+2], cx
	movsx	edx, WORD PTR _mpl$[ebp+2]
	cmp	edx, -1
	je	SHORT $L81588

; 191  : 			{
; 192  : 				if (loadflag & LOADMODEL_FORCE_TPAGE) mp->Tpage = tpage;

	movsx	eax, BYTE PTR _loadflag$[ebp]
	and	eax, 1
	je	SHORT $L81589
	movsx	ax, BYTE PTR _tpage$[ebp]
	mov	ecx, DWORD PTR _mp$[ebp]
	mov	WORD PTR [ecx+2], ax
$L81589:

; 193  : 				if (loadflag & LOADMODEL_OFFSET_TPAGE) mp->Tpage += tpage;

	movsx	eax, BYTE PTR _loadflag$[ebp]
	and	eax, 2
	je	SHORT $L81588
	movsx	eax, BYTE PTR _tpage$[ebp]
	mov	ecx, DWORD PTR _mp$[ebp]
	movsx	edx, WORD PTR [ecx+2]
	add	edx, eax
	mov	eax, DWORD PTR _mp$[ebp]
	mov	WORD PTR [eax+2], dx
$L81588:

; 194  : 			}
; 195  : 
; 196  : 			if (mp->Tpage < -1 || mp->Tpage > MAX_POLY_BUCKETS - 1)

	mov	eax, DWORD PTR _mp$[ebp]
	movsx	ecx, WORD PTR [eax+2]
	cmp	ecx, -1
	jl	SHORT $L81592
	mov	eax, DWORD PTR _mp$[ebp]
	movsx	ecx, WORD PTR [eax+2]
	cmp	ecx, 30					; 0000001eH
	jle	SHORT $L81591
$L81592:

; 197  : 			{
; 198  : 				wsprintf(buf, "Dodgy poly texture num %d in %s", mp->Tpage, file);

	mov	eax, DWORD PTR _file$[ebp]
	push	eax
	mov	ecx, DWORD PTR _mp$[ebp]
	movsx	edx, WORD PTR [ecx+2]
	push	edx
	push	OFFSET FLAT:??_C@_0CA@MEBLDMBG@Dodgy?5poly?5texture?5num?5?$CFd?5in?5?$CFs?$AA@
	lea	eax, DWORD PTR _buf$[ebp]
	push	eax
	call	DWORD PTR __imp__wsprintfA
	add	esp, 16					; 00000010H

; 199  : 				Box(NULL, buf, MB_OK);

	push	0
	lea	eax, DWORD PTR _buf$[ebp]
	push	eax
	push	0
	call	?Box@@YAJPAD0J@Z			; Box
	add	esp, 12					; 0000000cH

; 200  : 				mp->Tpage = -1;

	mov	eax, DWORD PTR _mp$[ebp]
	mov	WORD PTR [eax+2], -1
$L81591:

; 201  : 			}
; 202  : 
; 203  : 			if (GameSettings.Mirrored)

	cmp	DWORD PTR ?GameSettings@@3UGAME_SETTINGS@@A+16, 0
	je	$L81594

; 204  : 			{
; 205  : 				if (mp->Type & POLY_QUAD)

	mov	eax, DWORD PTR _mp$[ebp]
	movsx	ecx, WORD PTR [eax]
	and	ecx, 1
	je	$L81595

; 206  : 				{
; 207  : 					*(long*)&mrgb->rgb[0] = mpl.c3;

	mov	eax, DWORD PTR _mrgb$[ebp]
	mov	ecx, DWORD PTR _mpl$[ebp+24]
	mov	DWORD PTR [eax], ecx

; 208  : 					*(long*)&mrgb->rgb[1] = mpl.c2;

	mov	eax, DWORD PTR _mrgb$[ebp]
	mov	ecx, DWORD PTR _mpl$[ebp+20]
	mov	DWORD PTR [eax+4], ecx

; 209  : 					*(long*)&mrgb->rgb[2] = mpl.c1;

	mov	eax, DWORD PTR _mrgb$[ebp]
	mov	ecx, DWORD PTR _mpl$[ebp+16]
	mov	DWORD PTR [eax+8], ecx

; 210  : 					*(long*)&mrgb->rgb[3] = mpl.c0;

	mov	eax, DWORD PTR _mrgb$[ebp]
	mov	ecx, DWORD PTR _mpl$[ebp+12]
	mov	DWORD PTR [eax+12], ecx

; 211  : 
; 212  : 					mp->tu0 = mpl.u3;

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR _mpl$[ebp+52]
	mov	DWORD PTR [eax+4], ecx

; 213  : 					mp->tv0 = mpl.v3;

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR _mpl$[ebp+56]
	mov	DWORD PTR [eax+8], ecx

; 214  : 					mp->tu1 = mpl.u2;

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR _mpl$[ebp+44]
	mov	DWORD PTR [eax+12], ecx

; 215  : 					mp->tv1 = mpl.v2;

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR _mpl$[ebp+48]
	mov	DWORD PTR [eax+16], ecx

; 216  : 					mp->tu2 = mpl.u1;

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR _mpl$[ebp+36]
	mov	DWORD PTR [eax+20], ecx

; 217  : 					mp->tv2 = mpl.v1;

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR _mpl$[ebp+40]
	mov	DWORD PTR [eax+24], ecx

; 218  : 					mp->tu3 = mpl.u0;

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR _mpl$[ebp+28]
	mov	DWORD PTR [eax+28], ecx

; 219  : 					mp->tv3 = mpl.v0;

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR _mpl$[ebp+32]
	mov	DWORD PTR [eax+32], ecx

; 220  : 
; 221  : 					mp->v0 = m->VertPtr + mpl.vi3;

	movsx	eax, WORD PTR _mpl$[ebp+10]
	imul	eax, 88					; 00000058H
	mov	ecx, DWORD PTR _m$[ebp]
	add	eax, DWORD PTR [ecx+52]
	mov	edx, DWORD PTR _mp$[ebp]
	mov	DWORD PTR [edx+36], eax

; 222  : 					mp->v1 = m->VertPtr + mpl.vi2;

	movsx	eax, WORD PTR _mpl$[ebp+8]
	imul	eax, 88					; 00000058H
	mov	ecx, DWORD PTR _m$[ebp]
	add	eax, DWORD PTR [ecx+52]
	mov	edx, DWORD PTR _mp$[ebp]
	mov	DWORD PTR [edx+40], eax

; 223  : 					mp->v2 = m->VertPtr + mpl.vi1;

	movsx	eax, WORD PTR _mpl$[ebp+6]
	imul	eax, 88					; 00000058H
	mov	ecx, DWORD PTR _m$[ebp]
	add	eax, DWORD PTR [ecx+52]
	mov	edx, DWORD PTR _mp$[ebp]
	mov	DWORD PTR [edx+44], eax

; 224  : 					mp->v3 = m->VertPtr + mpl.vi0;

	movsx	eax, WORD PTR _mpl$[ebp+4]
	imul	eax, 88					; 00000058H
	mov	ecx, DWORD PTR _m$[ebp]
	add	eax, DWORD PTR [ecx+52]
	mov	edx, DWORD PTR _mp$[ebp]
	mov	DWORD PTR [edx+48], eax

; 225  : 				}
; 226  : 				else

	jmp	$L81600
$L81595:

; 227  : 				{
; 228  : 					*(long*)&mrgb->rgb[0] = mpl.c2;

	mov	eax, DWORD PTR _mrgb$[ebp]
	mov	ecx, DWORD PTR _mpl$[ebp+20]
	mov	DWORD PTR [eax], ecx

; 229  : 					*(long*)&mrgb->rgb[1] = mpl.c1;

	mov	eax, DWORD PTR _mrgb$[ebp]
	mov	ecx, DWORD PTR _mpl$[ebp+16]
	mov	DWORD PTR [eax+4], ecx

; 230  : 					*(long*)&mrgb->rgb[2] = mpl.c0;

	mov	eax, DWORD PTR _mrgb$[ebp]
	mov	ecx, DWORD PTR _mpl$[ebp+12]
	mov	DWORD PTR [eax+8], ecx

; 231  : 
; 232  : 					mp->tu0 = mpl.u2;

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR _mpl$[ebp+44]
	mov	DWORD PTR [eax+4], ecx

; 233  : 					mp->tv0 = mpl.v2;

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR _mpl$[ebp+48]
	mov	DWORD PTR [eax+8], ecx

; 234  : 					mp->tu1 = mpl.u1;

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR _mpl$[ebp+36]
	mov	DWORD PTR [eax+12], ecx

; 235  : 					mp->tv1 = mpl.v1;

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR _mpl$[ebp+40]
	mov	DWORD PTR [eax+16], ecx

; 236  : 					mp->tu2 = mpl.u0;

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR _mpl$[ebp+28]
	mov	DWORD PTR [eax+20], ecx

; 237  : 					mp->tv2 = mpl.v0;

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR _mpl$[ebp+32]
	mov	DWORD PTR [eax+24], ecx

; 238  : 
; 239  : 					mp->v0 = m->VertPtr + mpl.vi2;

	movsx	eax, WORD PTR _mpl$[ebp+8]
	imul	eax, 88					; 00000058H
	mov	ecx, DWORD PTR _m$[ebp]
	add	eax, DWORD PTR [ecx+52]
	mov	edx, DWORD PTR _mp$[ebp]
	mov	DWORD PTR [edx+36], eax

; 240  : 					mp->v1 = m->VertPtr + mpl.vi1;

	movsx	eax, WORD PTR _mpl$[ebp+6]
	imul	eax, 88					; 00000058H
	mov	ecx, DWORD PTR _m$[ebp]
	add	eax, DWORD PTR [ecx+52]
	mov	edx, DWORD PTR _mp$[ebp]
	mov	DWORD PTR [edx+40], eax

; 241  : 					mp->v2 = m->VertPtr + mpl.vi0;

	movsx	eax, WORD PTR _mpl$[ebp+4]
	imul	eax, 88					; 00000058H
	mov	ecx, DWORD PTR _m$[ebp]
	add	eax, DWORD PTR [ecx+52]
	mov	edx, DWORD PTR _mp$[ebp]
	mov	DWORD PTR [edx+44], eax
$L81600:

; 242  : 				}
; 243  : 			}
; 244  : 			else

	jmp	$L81604
$L81594:

; 245  : 			{
; 246  : 				*(long*)&mrgb->rgb[0] = mpl.c0;

	mov	eax, DWORD PTR _mrgb$[ebp]
	mov	ecx, DWORD PTR _mpl$[ebp+12]
	mov	DWORD PTR [eax], ecx

; 247  : 				*(long*)&mrgb->rgb[1] = mpl.c1;

	mov	eax, DWORD PTR _mrgb$[ebp]
	mov	ecx, DWORD PTR _mpl$[ebp+16]
	mov	DWORD PTR [eax+4], ecx

; 248  : 				*(long*)&mrgb->rgb[2] = mpl.c2;

	mov	eax, DWORD PTR _mrgb$[ebp]
	mov	ecx, DWORD PTR _mpl$[ebp+20]
	mov	DWORD PTR [eax+8], ecx

; 249  : 				*(long*)&mrgb->rgb[3] = mpl.c3;

	mov	eax, DWORD PTR _mrgb$[ebp]
	mov	ecx, DWORD PTR _mpl$[ebp+24]
	mov	DWORD PTR [eax+12], ecx

; 250  : 
; 251  : 				mp->tu0 = mpl.u0;

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR _mpl$[ebp+28]
	mov	DWORD PTR [eax+4], ecx

; 252  : 				mp->tv0 = mpl.v0;

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR _mpl$[ebp+32]
	mov	DWORD PTR [eax+8], ecx

; 253  : 				mp->tu1 = mpl.u1;

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR _mpl$[ebp+36]
	mov	DWORD PTR [eax+12], ecx

; 254  : 				mp->tv1 = mpl.v1;

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR _mpl$[ebp+40]
	mov	DWORD PTR [eax+16], ecx

; 255  : 				mp->tu2 = mpl.u2;

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR _mpl$[ebp+44]
	mov	DWORD PTR [eax+20], ecx

; 256  : 				mp->tv2 = mpl.v2;

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR _mpl$[ebp+48]
	mov	DWORD PTR [eax+24], ecx

; 257  : 				mp->tu3 = mpl.u3;

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR _mpl$[ebp+52]
	mov	DWORD PTR [eax+28], ecx

; 258  : 				mp->tv3 = mpl.v3;

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR _mpl$[ebp+56]
	mov	DWORD PTR [eax+32], ecx

; 259  : 
; 260  : 				mp->v0 = m->VertPtr + mpl.vi0;

	movsx	eax, WORD PTR _mpl$[ebp+4]
	imul	eax, 88					; 00000058H
	mov	ecx, DWORD PTR _m$[ebp]
	add	eax, DWORD PTR [ecx+52]
	mov	edx, DWORD PTR _mp$[ebp]
	mov	DWORD PTR [edx+36], eax

; 261  : 				mp->v1 = m->VertPtr + mpl.vi1;

	movsx	eax, WORD PTR _mpl$[ebp+6]
	imul	eax, 88					; 00000058H
	mov	ecx, DWORD PTR _m$[ebp]
	add	eax, DWORD PTR [ecx+52]
	mov	edx, DWORD PTR _mp$[ebp]
	mov	DWORD PTR [edx+40], eax

; 262  : 				mp->v2 = m->VertPtr + mpl.vi2;

	movsx	eax, WORD PTR _mpl$[ebp+8]
	imul	eax, 88					; 00000058H
	mov	ecx, DWORD PTR _m$[ebp]
	add	eax, DWORD PTR [ecx+52]
	mov	edx, DWORD PTR _mp$[ebp]
	mov	DWORD PTR [edx+44], eax

; 263  : 				mp->v3 = m->VertPtr + mpl.vi3;

	movsx	eax, WORD PTR _mpl$[ebp+10]
	imul	eax, 88					; 00000058H
	mov	ecx, DWORD PTR _m$[ebp]
	add	eax, DWORD PTR [ecx+52]
	mov	edx, DWORD PTR _mp$[ebp]
	mov	DWORD PTR [edx+48], eax
$L81604:

; 264  : 			}
; 265  : 
; 266  : 			ModelChangeGouraud(&mrgb->rgb[0], RgbPer);

	cmp	DWORD PTR _RgbPer$[ebp], 100		; 00000064H
	je	SHORT $L81609
	mov	eax, DWORD PTR _mrgb$[ebp]
	movzx	eax, BYTE PTR [eax+2]
	add	eax, 1
	imul	eax, DWORD PTR _RgbPer$[ebp]
	cdq
	mov	ecx, 100				; 00000064H
	idiv	ecx
	mov	edx, DWORD PTR _mrgb$[ebp]
	mov	BYTE PTR [edx+2], al
	mov	eax, DWORD PTR _mrgb$[ebp]
	movzx	eax, BYTE PTR [eax+1]
	add	eax, 1
	imul	eax, DWORD PTR _RgbPer$[ebp]
	cdq
	mov	ecx, 100				; 00000064H
	idiv	ecx
	mov	edx, DWORD PTR _mrgb$[ebp]
	mov	BYTE PTR [edx+1], al
	mov	eax, DWORD PTR _mrgb$[ebp]
	movzx	eax, BYTE PTR [eax]
	add	eax, 1
	imul	eax, DWORD PTR _RgbPer$[ebp]
	cdq
	mov	ecx, 100				; 00000064H
	idiv	ecx
	mov	edx, DWORD PTR _mrgb$[ebp]
	mov	BYTE PTR [edx], al
$L81609:

; 267  : 			ModelChangeGouraud(&mrgb->rgb[1], RgbPer);

	cmp	DWORD PTR _RgbPer$[ebp], 100		; 00000064H
	je	SHORT $L81610
	mov	eax, DWORD PTR _mrgb$[ebp]
	movzx	eax, BYTE PTR [eax+6]
	add	eax, 1
	imul	eax, DWORD PTR _RgbPer$[ebp]
	cdq
	mov	ecx, 100				; 00000064H
	idiv	ecx
	mov	edx, DWORD PTR _mrgb$[ebp]
	mov	BYTE PTR [edx+6], al
	mov	eax, DWORD PTR _mrgb$[ebp]
	movzx	eax, BYTE PTR [eax+5]
	add	eax, 1
	imul	eax, DWORD PTR _RgbPer$[ebp]
	cdq
	mov	ecx, 100				; 00000064H
	idiv	ecx
	mov	edx, DWORD PTR _mrgb$[ebp]
	mov	BYTE PTR [edx+5], al
	mov	eax, DWORD PTR _mrgb$[ebp]
	movzx	eax, BYTE PTR [eax+4]
	add	eax, 1
	imul	eax, DWORD PTR _RgbPer$[ebp]
	cdq
	mov	ecx, 100				; 00000064H
	idiv	ecx
	mov	edx, DWORD PTR _mrgb$[ebp]
	mov	BYTE PTR [edx+4], al
$L81610:

; 268  : 			ModelChangeGouraud(&mrgb->rgb[2], RgbPer);

	cmp	DWORD PTR _RgbPer$[ebp], 100		; 00000064H
	je	SHORT $L81611
	mov	eax, DWORD PTR _mrgb$[ebp]
	movzx	eax, BYTE PTR [eax+10]
	add	eax, 1
	imul	eax, DWORD PTR _RgbPer$[ebp]
	cdq
	mov	ecx, 100				; 00000064H
	idiv	ecx
	mov	edx, DWORD PTR _mrgb$[ebp]
	mov	BYTE PTR [edx+10], al
	mov	eax, DWORD PTR _mrgb$[ebp]
	movzx	eax, BYTE PTR [eax+9]
	add	eax, 1
	imul	eax, DWORD PTR _RgbPer$[ebp]
	cdq
	mov	ecx, 100				; 00000064H
	idiv	ecx
	mov	edx, DWORD PTR _mrgb$[ebp]
	mov	BYTE PTR [edx+9], al
	mov	eax, DWORD PTR _mrgb$[ebp]
	movzx	eax, BYTE PTR [eax+8]
	add	eax, 1
	imul	eax, DWORD PTR _RgbPer$[ebp]
	cdq
	mov	ecx, 100				; 00000064H
	idiv	ecx
	mov	edx, DWORD PTR _mrgb$[ebp]
	mov	BYTE PTR [edx+8], al
$L81611:

; 269  : 			ModelChangeGouraud(&mrgb->rgb[3], RgbPer);

	cmp	DWORD PTR _RgbPer$[ebp], 100		; 00000064H
	je	SHORT $L81612
	mov	eax, DWORD PTR _mrgb$[ebp]
	movzx	eax, BYTE PTR [eax+14]
	add	eax, 1
	imul	eax, DWORD PTR _RgbPer$[ebp]
	cdq
	mov	ecx, 100				; 00000064H
	idiv	ecx
	mov	edx, DWORD PTR _mrgb$[ebp]
	mov	BYTE PTR [edx+14], al
	mov	eax, DWORD PTR _mrgb$[ebp]
	movzx	eax, BYTE PTR [eax+13]
	add	eax, 1
	imul	eax, DWORD PTR _RgbPer$[ebp]
	cdq
	mov	ecx, 100				; 00000064H
	idiv	ecx
	mov	edx, DWORD PTR _mrgb$[ebp]
	mov	BYTE PTR [edx+13], al
	mov	eax, DWORD PTR _mrgb$[ebp]
	movzx	eax, BYTE PTR [eax+12]
	add	eax, 1
	imul	eax, DWORD PTR _RgbPer$[ebp]
	cdq
	mov	ecx, 100				; 00000064H
	idiv	ecx
	mov	edx, DWORD PTR _mrgb$[ebp]
	mov	BYTE PTR [edx+12], al
$L81612:

; 270  : 
; 271  : 			if (mp->Tpage != -1)

	mov	eax, DWORD PTR _mp$[ebp]
	movsx	ecx, WORD PTR [eax+2]
	cmp	ecx, -1
	je	SHORT $L81613

; 272  : 			{
; 273  : 				if (mp->Type & POLY_QUAD) m->QuadNumTex++;

	mov	eax, DWORD PTR _mp$[ebp]
	movsx	ecx, WORD PTR [eax]
	and	ecx, 1
	je	SHORT $L81614
	mov	eax, DWORD PTR _m$[ebp]
	mov	cx, WORD PTR [eax+36]
	add	cx, 1
	mov	edx, DWORD PTR _m$[ebp]
	mov	WORD PTR [edx+36], cx

; 274  : 				else m->TriNumTex++;

	jmp	SHORT $L81615
$L81614:
	mov	eax, DWORD PTR _m$[ebp]
	mov	cx, WORD PTR [eax+38]
	add	cx, 1
	mov	edx, DWORD PTR _m$[ebp]
	mov	WORD PTR [edx+38], cx
$L81615:

; 275  : 			}
; 276  : 			else

	jmp	SHORT $L81616
$L81613:

; 277  : 			{
; 278  : 				if (mp->Type & POLY_QUAD) m->QuadNumRGB++;

	mov	eax, DWORD PTR _mp$[ebp]
	movsx	ecx, WORD PTR [eax]
	and	ecx, 1
	je	SHORT $L81617
	mov	eax, DWORD PTR _m$[ebp]
	mov	cx, WORD PTR [eax+40]
	add	cx, 1
	mov	edx, DWORD PTR _m$[ebp]
	mov	WORD PTR [edx+40], cx

; 279  : 				else m->TriNumRGB++;

	jmp	SHORT $L81616
$L81617:
	mov	eax, DWORD PTR _m$[ebp]
	mov	cx, WORD PTR [eax+42]
	add	cx, 1
	mov	edx, DWORD PTR _m$[ebp]
	mov	WORD PTR [edx+42], cx
$L81616:

; 280  : 			}
; 281  : 		}

	jmp	$L81586
$L81587:

; 282  : 
; 283  : // sort polys into textured / untextured + quads / tri's
; 284  : 
; 285  : 		mp = m->PolyPtr;

	mov	eax, DWORD PTR _m$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	mov	DWORD PTR _mp$[ebp], ecx

; 286  : 
; 287  : 		for (j = m->PolyNum - 1; j ; j--) for (k = 0 ; k < j ; k++)

	mov	eax, DWORD PTR _m$[ebp]
	movsx	ecx, WORD PTR [eax+32]
	sub	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx
	jmp	SHORT $L81619
$L81620:
	mov	eax, DWORD PTR _j$[ebp]
	sub	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$L81619:
	cmp	DWORD PTR _j$[ebp], 0
	je	$L81621
	mov	DWORD PTR _k$[ebp], 0
	jmp	SHORT $L81622
$L81623:
	mov	eax, DWORD PTR _k$[ebp]
	add	eax, 1
	mov	DWORD PTR _k$[ebp], eax
$L81622:
	mov	eax, DWORD PTR _k$[ebp]
	cmp	eax, DWORD PTR _j$[ebp]
	jge	$L81624

; 288  : 		{
; 289  : 			a = mp[k].Type & POLY_QUAD;

	mov	eax, DWORD PTR _k$[ebp]
	imul	eax, 52					; 00000034H
	mov	ecx, DWORD PTR _mp$[ebp]
	movsx	edx, WORD PTR [ecx+eax]
	and	edx, 1
	mov	DWORD PTR _a$[ebp], edx

; 290  : 			if (mp[k].Tpage != -1) a += 256;

	mov	eax, DWORD PTR _k$[ebp]
	imul	eax, 52					; 00000034H
	mov	ecx, DWORD PTR _mp$[ebp]
	movsx	edx, WORD PTR [ecx+eax+2]
	cmp	edx, -1
	je	SHORT $L81625
	mov	eax, DWORD PTR _a$[ebp]
	add	eax, 256				; 00000100H
	mov	DWORD PTR _a$[ebp], eax
$L81625:

; 291  : 
; 292  : 			b = mp[k + 1].Type & POLY_QUAD;

	mov	eax, DWORD PTR _k$[ebp]
	add	eax, 1
	imul	eax, 52					; 00000034H
	mov	ecx, DWORD PTR _mp$[ebp]
	movsx	edx, WORD PTR [ecx+eax]
	and	edx, 1
	mov	DWORD PTR _b$[ebp], edx

; 293  : 			if (mp[k + 1].Tpage != -1) b += 256;

	mov	eax, DWORD PTR _k$[ebp]
	add	eax, 1
	imul	eax, 52					; 00000034H
	mov	ecx, DWORD PTR _mp$[ebp]
	movsx	edx, WORD PTR [ecx+eax+2]
	cmp	edx, -1
	je	SHORT $L81626
	mov	eax, DWORD PTR _b$[ebp]
	add	eax, 256				; 00000100H
	mov	DWORD PTR _b$[ebp], eax
$L81626:

; 294  : 
; 295  : 			if (b > a)

	mov	eax, DWORD PTR _b$[ebp]
	cmp	eax, DWORD PTR _a$[ebp]
	jle	$L81627

; 296  : 			{
; 297  : 				poly = mp[k];

	mov	esi, DWORD PTR _k$[ebp]
	imul	esi, 52					; 00000034H
	add	esi, DWORD PTR _mp$[ebp]
	mov	ecx, 13					; 0000000dH
	lea	edi, DWORD PTR _poly$[ebp]
	rep movsd

; 298  : 				mp[k] = mp[k + 1];

	mov	esi, DWORD PTR _k$[ebp]
	add	esi, 1
	imul	esi, 52					; 00000034H
	add	esi, DWORD PTR _mp$[ebp]
	mov	edi, DWORD PTR _k$[ebp]
	imul	edi, 52					; 00000034H
	add	edi, DWORD PTR _mp$[ebp]
	mov	ecx, 13					; 0000000dH
	rep movsd

; 299  : 				mp[k + 1] = poly;

	mov	edi, DWORD PTR _k$[ebp]
	add	edi, 1
	imul	edi, 52					; 00000034H
	add	edi, DWORD PTR _mp$[ebp]
	mov	ecx, 13					; 0000000dH
	lea	esi, DWORD PTR _poly$[ebp]
	rep movsd

; 300  : 
; 301  : 				rgb = m->PolyRGB[k];

	mov	eax, DWORD PTR _k$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _m$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	add	edx, eax
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _rgb$[ebp], eax
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR _rgb$[ebp+4], ecx
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _rgb$[ebp+8], eax
	mov	ecx, DWORD PTR [edx+12]
	mov	DWORD PTR _rgb$[ebp+12], ecx

; 302  : 				m->PolyRGB[k] = m->PolyRGB[k + 1];

	mov	eax, DWORD PTR _k$[ebp]
	add	eax, 1
	shl	eax, 4
	mov	ecx, DWORD PTR _m$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	add	edx, eax
	mov	eax, DWORD PTR _k$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _m$[ebp]
	mov	ecx, DWORD PTR [ecx+44]
	add	ecx, eax
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax
	mov	edx, DWORD PTR [edx+12]
	mov	DWORD PTR [ecx+12], edx

; 303  : 				m->PolyRGB[k + 1] = rgb;

	mov	eax, DWORD PTR _k$[ebp]
	add	eax, 1
	shl	eax, 4
	mov	ecx, DWORD PTR _m$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	add	edx, eax
	mov	eax, DWORD PTR _rgb$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR _rgb$[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR _rgb$[ebp+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR _rgb$[ebp+12]
	mov	DWORD PTR [edx+12], ecx
$L81627:

; 304  : 			}
; 305  : 		}

	jmp	$L81623
$L81624:
	jmp	$L81620
$L81621:

; 306  : 
; 307  : // load verts, set radius / bounding box
; 308  : 
; 309  : 		m->Radius = 0;

	mov	eax, DWORD PTR _m$[ebp]
	mov	DWORD PTR [eax], 0

; 310  : 		m->Xmin = m->Ymin = m->Zmin = 999999;

	mov	eax, DWORD PTR _m$[ebp]
	mov	DWORD PTR [eax+20], 1232348144		; 497423f0H
	mov	ecx, DWORD PTR _m$[ebp]
	mov	DWORD PTR [ecx+12], 1232348144		; 497423f0H
	mov	edx, DWORD PTR _m$[ebp]
	mov	DWORD PTR [edx+4], 1232348144		; 497423f0H

; 311  : 		m->Xmax = m->Ymax = m->Zmax = -999999;

	mov	eax, DWORD PTR _m$[ebp]
	mov	DWORD PTR [eax+24], -915135504		; c97423f0H
	mov	ecx, DWORD PTR _m$[ebp]
	mov	DWORD PTR [ecx+16], -915135504		; c97423f0H
	mov	edx, DWORD PTR _m$[ebp]
	mov	DWORD PTR [edx+8], -915135504		; c97423f0H

; 312  : 
; 313  : 		for (i = 0 ; i < m->VertNum ; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $L81628
$L81629:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$L81628:
	mov	eax, DWORD PTR _m$[ebp]
	movsx	ecx, WORD PTR [eax+34]
	cmp	DWORD PTR _i$[ebp], ecx
	jge	$L81630

; 314  : 		{
; 315  : 			fread(&mvl, sizeof(mvl), 1, fp);

	mov	eax, DWORD PTR _fp$[ebp]
	push	eax
	push	1
	push	24					; 00000018H
	lea	ecx, DWORD PTR _mvl$[ebp]
	push	ecx
	call	_fread
	add	esp, 16					; 00000010H

; 316  : 
; 317  : 			m->VertPtr[i].x = mvl.x;

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 88					; 00000058H
	mov	ecx, DWORD PTR _m$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	mov	ecx, DWORD PTR _mvl$[ebp]
	mov	DWORD PTR [eax+edx], ecx

; 318  : 			m->VertPtr[i].y = mvl.y;

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 88					; 00000058H
	mov	ecx, DWORD PTR _m$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	mov	ecx, DWORD PTR _mvl$[ebp+4]
	mov	DWORD PTR [edx+eax+4], ecx

; 319  : 			m->VertPtr[i].z = mvl.z;

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 88					; 00000058H
	mov	ecx, DWORD PTR _m$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	mov	ecx, DWORD PTR _mvl$[ebp+8]
	mov	DWORD PTR [edx+eax+8], ecx

; 320  : 
; 321  : 			m->VertPtr[i].nx = mvl.nx;

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 88					; 00000058H
	mov	ecx, DWORD PTR _m$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	mov	ecx, DWORD PTR _mvl$[ebp+12]
	mov	DWORD PTR [edx+eax+24], ecx

; 322  : 			m->VertPtr[i].ny = mvl.ny;

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 88					; 00000058H
	mov	ecx, DWORD PTR _m$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	mov	ecx, DWORD PTR _mvl$[ebp+16]
	mov	DWORD PTR [edx+eax+28], ecx

; 323  : 			m->VertPtr[i].nz = mvl.nz;

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 88					; 00000058H
	mov	ecx, DWORD PTR _m$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	mov	ecx, DWORD PTR _mvl$[ebp+20]
	mov	DWORD PTR [edx+eax+32], ecx

; 324  : 
; 325  : 			rad = Length((VEC*)&m->VertPtr[i].x);

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 88					; 00000058H
	mov	ecx, DWORD PTR _m$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 88					; 00000058H
	mov	esi, DWORD PTR _m$[ebp]
	mov	esi, DWORD PTR [esi+52]
	fld	DWORD PTR [edx+eax]
	fmul	DWORD PTR [esi+ecx]
	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 88					; 00000058H
	mov	eax, DWORD PTR _m$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 88					; 00000058H
	mov	esi, DWORD PTR _m$[ebp]
	mov	esi, DWORD PTR [esi+52]
	fld	DWORD PTR [ecx+edx+4]
	fmul	DWORD PTR [esi+eax+4]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 88					; 00000058H
	mov	edx, DWORD PTR _m$[ebp]
	mov	eax, DWORD PTR [edx+52]
	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 88					; 00000058H
	mov	esi, DWORD PTR _m$[ebp]
	mov	esi, DWORD PTR [esi+52]
	fld	DWORD PTR [eax+ecx+8]
	fmul	DWORD PTR [esi+edx+8]
	faddp	ST(1), ST(0)
	push	ecx
	fstp	DWORD PTR [esp]
	call	?sqrt@@YAMM@Z				; sqrt
	add	esp, 4
	fstp	DWORD PTR _rad$[ebp]

; 326  : 			if (rad > m->Radius) m->Radius = rad;

	mov	eax, DWORD PTR _m$[ebp]
	fld	DWORD PTR _rad$[ebp]
	fcomp	DWORD PTR [eax]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $L81638
	mov	eax, DWORD PTR _m$[ebp]
	mov	ecx, DWORD PTR _rad$[ebp]
	mov	DWORD PTR [eax], ecx
$L81638:

; 327  : 
; 328  : 			if (m->VertPtr[i].x < m->Xmin) m->Xmin = m->VertPtr[i].x;

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 88					; 00000058H
	mov	ecx, DWORD PTR _m$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	mov	ecx, DWORD PTR _m$[ebp]
	fld	DWORD PTR [eax+edx]
	fcomp	DWORD PTR [ecx+4]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L81639
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 88					; 00000058H
	mov	ecx, DWORD PTR _m$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	mov	ecx, DWORD PTR _m$[ebp]
	mov	edx, DWORD PTR [eax+edx]
	mov	DWORD PTR [ecx+4], edx
$L81639:

; 329  : 			if (m->VertPtr[i].x > m->Xmax) m->Xmax = m->VertPtr[i].x;

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 88					; 00000058H
	mov	ecx, DWORD PTR _m$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	mov	ecx, DWORD PTR _m$[ebp]
	fld	DWORD PTR [eax+edx]
	fcomp	DWORD PTR [ecx+8]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $L81640
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 88					; 00000058H
	mov	ecx, DWORD PTR _m$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	mov	ecx, DWORD PTR _m$[ebp]
	mov	edx, DWORD PTR [eax+edx]
	mov	DWORD PTR [ecx+8], edx
$L81640:

; 330  : 			if (m->VertPtr[i].y < m->Ymin) m->Ymin = m->VertPtr[i].y;

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 88					; 00000058H
	mov	ecx, DWORD PTR _m$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	mov	ecx, DWORD PTR _m$[ebp]
	fld	DWORD PTR [edx+eax+4]
	fcomp	DWORD PTR [ecx+12]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L81641
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 88					; 00000058H
	mov	ecx, DWORD PTR _m$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	mov	ecx, DWORD PTR _m$[ebp]
	mov	edx, DWORD PTR [edx+eax+4]
	mov	DWORD PTR [ecx+12], edx
$L81641:

; 331  : 			if (m->VertPtr[i].y > m->Ymax) m->Ymax = m->VertPtr[i].y;

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 88					; 00000058H
	mov	ecx, DWORD PTR _m$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	mov	ecx, DWORD PTR _m$[ebp]
	fld	DWORD PTR [edx+eax+4]
	fcomp	DWORD PTR [ecx+16]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $L81642
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 88					; 00000058H
	mov	ecx, DWORD PTR _m$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	mov	ecx, DWORD PTR _m$[ebp]
	mov	edx, DWORD PTR [edx+eax+4]
	mov	DWORD PTR [ecx+16], edx
$L81642:

; 332  : 			if (m->VertPtr[i].z < m->Zmin) m->Zmin = m->VertPtr[i].z;

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 88					; 00000058H
	mov	ecx, DWORD PTR _m$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	mov	ecx, DWORD PTR _m$[ebp]
	fld	DWORD PTR [edx+eax+8]
	fcomp	DWORD PTR [ecx+20]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L81643
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 88					; 00000058H
	mov	ecx, DWORD PTR _m$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	mov	ecx, DWORD PTR _m$[ebp]
	mov	edx, DWORD PTR [edx+eax+8]
	mov	DWORD PTR [ecx+20], edx
$L81643:

; 333  : 			if (m->VertPtr[i].z > m->Zmax) m->Zmax = m->VertPtr[i].z;

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 88					; 00000058H
	mov	ecx, DWORD PTR _m$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	mov	ecx, DWORD PTR _m$[ebp]
	fld	DWORD PTR [edx+eax+8]
	fcomp	DWORD PTR [ecx+24]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $L81644
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 88					; 00000058H
	mov	ecx, DWORD PTR _m$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	mov	ecx, DWORD PTR _m$[ebp]
	mov	edx, DWORD PTR [edx+eax+8]
	mov	DWORD PTR [ecx+24], edx
$L81644:

; 334  : 		}

	jmp	$L81629
$L81630:

; 335  : 	}

	jmp	$L81568
$L81569:

; 336  : 
; 337  : // close file
; 338  : 
; 339  : 	fclose(fp);

	mov	eax, DWORD PTR _fp$[ebp]
	push	eax
	call	_fclose
	add	esp, 4

; 340  : 	return count;

	mov	eax, DWORD PTR _count$[ebp]
$L81543:

; 341  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?LoadModel@@YAJPADPAUMODEL@@DDDJ@Z ENDP			; LoadModel
_TEXT	ENDS
PUBLIC	?__LINE__Var@?1??FreeModel@@YAXPAUMODEL@@J@Z@4JA ; `FreeModel'::`2'::__LINE__Var
PUBLIC	?FreeModel@@YAXPAUMODEL@@J@Z			; FreeModel
EXTRN	?DebugFree@@YAXPAXHPAD@Z:NEAR			; DebugFree
;	COMDAT ?__LINE__Var@?1??FreeModel@@YAXPAUMODEL@@J@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??FreeModel@@YAXPAUMODEL@@J@Z@4JA DD 015cH ; `FreeModel'::`2'::__LINE__Var
; Function compile flags: /Odt /ZI
_DATA	ENDS
;	COMDAT ?FreeModel@@YAXPAUMODEL@@J@Z
_TEXT	SEGMENT
_i$ = -4						; size = 4
_m$ = 8							; size = 4
_prmlevel$ = 12						; size = 4
?FreeModel@@YAXPAUMODEL@@J@Z PROC NEAR			; FreeModel, COMDAT

; 348  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 349  : 	long i;
; 350  : 
; 351  : 	for (i = 0 ; i < prmlevel ; i++, m++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $L81650
$L81651:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	mov	ecx, DWORD PTR _m$[ebp]
	add	ecx, 60					; 0000003cH
	mov	DWORD PTR _m$[ebp], ecx
$L81650:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _prmlevel$[ebp]
	jge	SHORT $L81648

; 352  : 	{
; 353  : 		if (m->VertPtrMorph)

	mov	eax, DWORD PTR _m$[ebp]
	cmp	DWORD PTR [eax+56], 0
	je	SHORT $L81653

; 354  : 			free(m->VertPtrMorph);

	push	OFFSET FLAT:??_C@_0IK@IAEFILOF@c?3?2documents?5and?5settings?2jarhea@
	mov	eax, DWORD PTR ?__LINE__Var@?1??FreeModel@@YAXPAUMODEL@@J@Z@4JA
	add	eax, 6
	push	eax
	mov	ecx, DWORD PTR _m$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	push	edx
	call	?DebugFree@@YAXPAXHPAD@Z		; DebugFree
	add	esp, 12					; 0000000cH
$L81653:

; 355  : 
; 356  : 		if (m->AllocPtr)

	mov	eax, DWORD PTR _m$[ebp]
	cmp	DWORD PTR [eax+28], 0
	je	SHORT $L81655

; 357  : 			free(m->AllocPtr);

	push	OFFSET FLAT:??_C@_0IK@IAEFILOF@c?3?2documents?5and?5settings?2jarhea@
	mov	eax, DWORD PTR ?__LINE__Var@?1??FreeModel@@YAXPAUMODEL@@J@Z@4JA
	add	eax, 9
	push	eax
	mov	ecx, DWORD PTR _m$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	push	edx
	call	?DebugFree@@YAXPAXHPAD@Z		; DebugFree
	add	esp, 12					; 0000000cH
$L81655:

; 358  : 	}

	jmp	SHORT $L81651
$L81648:

; 359  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?FreeModel@@YAXPAUMODEL@@J@Z ENDP			; FreeModel
_TEXT	ENDS
PUBLIC	__real@c0000000
PUBLIC	?DrawModel@@YAXPAUMODEL@@PATMatrixUnion@@PAUVectorStruct@@F@Z ; DrawModel
PUBLIC	?TransModelVertsFogClip@@YAXPAUMODEL@@PATMatrixUnion@@PAUVectorStruct@@@Z ; TransModelVertsFogClip
PUBLIC	?TransModelVertsPlainClip@@YAXPAUMODEL@@PATMatrixUnion@@PAUVectorStruct@@@Z ; TransModelVertsPlainClip
PUBLIC	?TransModelVertsPlain@@YAXPAUMODEL@@PATMatrixUnion@@PAUVectorStruct@@@Z ; TransModelVertsPlain
PUBLIC	?TransModelVertsFog@@YAXPAUMODEL@@PATMatrixUnion@@PAUVectorStruct@@@Z ; TransModelVertsFog
PUBLIC	?TransModelVertsFogClipNewVerts@@YAXPAUMODEL@@PATMatrixUnion@@PAUVectorStruct@@@Z ; TransModelVertsFogClipNewVerts
PUBLIC	?TransModelVertsPlainClipNewVerts@@YAXPAUMODEL@@PATMatrixUnion@@PAUVectorStruct@@@Z ; TransModelVertsPlainClipNewVerts
PUBLIC	?TransModelVertsPlainNewVerts@@YAXPAUMODEL@@PATMatrixUnion@@PAUVectorStruct@@@Z ; TransModelVertsPlainNewVerts
PUBLIC	?TransModelVertsFogNewVerts@@YAXPAUMODEL@@PATMatrixUnion@@PAUVectorStruct@@@Z ; TransModelVertsFogNewVerts
PUBLIC	?TransModelVertsMirror@@YAXPAUMODEL@@PATMatrixUnion@@PAUVectorStruct@@12@Z ; TransModelVertsMirror
PUBLIC	?TransModelVertsMirrorNewVerts@@YAXPAUMODEL@@PATMatrixUnion@@PAUVectorStruct@@12@Z ; TransModelVertsMirrorNewVerts
PUBLIC	?SetModelVertsEnvPlain@@YAXPAUMODEL@@@Z		; SetModelVertsEnvPlain
PUBLIC	?SetModelVertsEnvLit@@YAXPAUMODEL@@@Z		; SetModelVertsEnvLit
PUBLIC	?SetModelVertsGhost@@YAXPAUMODEL@@@Z		; SetModelVertsGhost
PUBLIC	?SetModelVertsGlare@@YAXPAUMODEL@@PAUVectorStruct@@PATMatrixUnion@@F@Z ; SetModelVertsGlare
PUBLIC	?DrawModelPolysClip@@YAXPAUMODEL@@JJ@Z		; DrawModelPolysClip
PUBLIC	?DrawModelPolys@@YAXPAUMODEL@@JJ@Z		; DrawModelPolys
PUBLIC	?DrawModelPolysMirror@@YAXPAUMODEL@@J@Z		; DrawModelPolysMirror
EXTRN	?BucketEnvStill@@3UBUCKET_ENV@@A:BYTE		; BucketEnvStill
EXTRN	?BucketEnvStillFog@@3UBUCKET_ENV@@A:BYTE	; BucketEnvStillFog
EXTRN	?BucketEnvStillClip@@3UBUCKET_ENV@@A:BYTE	; BucketEnvStillClip
EXTRN	?BucketEnvStillClipFog@@3UBUCKET_ENV@@A:BYTE	; BucketEnvStillClipFog
EXTRN	?BucketEnvRoll@@3UBUCKET_ENV@@A:BYTE		; BucketEnvRoll
EXTRN	?BucketEnvRollFog@@3UBUCKET_ENV@@A:BYTE		; BucketEnvRollFog
EXTRN	?BucketEnvRollClip@@3UBUCKET_ENV@@A:BYTE	; BucketEnvRollClip
EXTRN	?BucketEnvRollClipFog@@3UBUCKET_ENV@@A:BYTE	; BucketEnvRollClipFog
EXTRN	?BucketRGB@@3UBUCKET_TEX0@@A:BYTE		; BucketRGB
EXTRN	?BucketFogRGB@@3UBUCKET_TEX0@@A:BYTE		; BucketFogRGB
EXTRN	?BucketClipRGB@@3UBUCKET_TEX0@@A:BYTE		; BucketClipRGB
EXTRN	?BucketClipFogRGB@@3UBUCKET_TEX0@@A:BYTE	; BucketClipFogRGB
EXTRN	?Bucket@@3PAUBUCKET_TEX1@@A:BYTE		; Bucket
EXTRN	?BucketFog@@3PAUBUCKET_TEX1@@A:BYTE		; BucketFog
EXTRN	?BucketClip@@3PAUBUCKET_TEX1@@A:BYTE		; BucketClip
EXTRN	?BucketClipFog@@3PAUBUCKET_TEX1@@A:BYTE		; BucketClipFog
EXTRN	?ViewMatrixScaled@@3TMatrixUnion@@A:BYTE	; ViewMatrixScaled
EXTRN	?ViewMatrixScaledMirrorY@@3TMatrixUnion@@A:BYTE	; ViewMatrixScaledMirrorY
EXTRN	?ViewTransScaled@@3UVectorStruct@@A:BYTE	; ViewTransScaled
EXTRN	?D3Ddevice@@3PAUIDirect3DDevice3@@A:DWORD	; D3Ddevice
EXTRN	?RenderStateChange@@3JA:DWORD			; RenderStateChange
EXTRN	?RenderFog@@3FA:WORD				; RenderFog
EXTRN	?MirrorHeight@@3MA:DWORD			; MirrorHeight
EXTRN	?RotTransVector@@YAXPATMatrixUnion@@PAUVectorStruct@@11@Z:NEAR ; RotTransVector
EXTRN	?MulMatrix@@YAXPATMatrixUnion@@00@Z:NEAR	; MulMatrix
EXTRN	?RenderSettings@@3URENDER_SETTINGS@@A:BYTE	; RenderSettings
_BSS	SEGMENT
_ModelFog DW	01H DUP (?)
	ALIGN	4

_ModelBucketHeadRGB DD 01H DUP (?)
_ModelBucketHeadClipRGB DD 01H DUP (?)
_ModelBucketHead DD 01H DUP (?)
_ModelBucketHeadClip DD 01H DUP (?)
_ModelBucketHeadEnv DD 01H DUP (?)
_ModelBucketHeadEnvClip DD 01H DUP (?)
_BSS	ENDS
;	COMDAT __real@c0000000
CONST	SEGMENT
__real@c0000000 DD 0c0000000r			; -2
; Function compile flags: /Odt /ZI
CONST	ENDS
;	COMDAT ?DrawModel@@YAXPAUMODEL@@PATMatrixUnion@@PAUVectorStruct@@F@Z
_TEXT	SEGMENT
_mv$ = -72						; size = 4
_mirroradd$ = -68					; size = 4
_eyetrans$ = -64					; size = 12
_mirrorpos$ = -52					; size = 12
_eyematrix$ = -40					; size = 36
_i$ = -4						; size = 4
_m$ = 8							; size = 4
_worldmat$ = 12						; size = 4
_worldpos$ = 16						; size = 4
_flag$ = 20						; size = 2
?DrawModel@@YAXPAUMODEL@@PATMatrixUnion@@PAUVectorStruct@@F@Z PROC NEAR ; DrawModel, COMDAT

; 366  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 136				; 00000088H
	push	ebx
	push	esi
	push	edi

; 367  : 	long i;
; 368  : 	MAT eyematrix;
; 369  : 	VEC mirrorpos, eyetrans;
; 370  : 	float mirroradd;
; 371  : 	MODEL_VERTEX *mv;
; 372  : 
; 373  : // kill env flag if env off
; 374  : 
; 375  : 	if (!RenderSettings.Env)

	cmp	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+76, 0
	jne	SHORT $L81668

; 376  : 		flag &= ~MODEL_ENV;

	movsx	eax, WORD PTR _flag$[ebp]
	and	eax, -5					; fffffffbH
	mov	WORD PTR _flag$[ebp], ax
$L81668:

; 377  : 
; 378  : // set fog flag
; 379  : 
; 380  : 	ModelFog = flag & MODEL_FOG;

	movsx	eax, WORD PTR _flag$[ebp]
	and	eax, 1
	mov	WORD PTR _ModelFog, ax

; 381  : 
; 382  : // set bucket heads
; 383  : 
; 384  : 	if (ModelFog)

	movsx	eax, WORD PTR _ModelFog
	test	eax, eax
	je	SHORT $L81669

; 385  : 	{
; 386  : 		FOG_ON();

	movsx	eax, WORD PTR ?RenderFog@@3FA		; RenderFog
	test	eax, eax
	jne	SHORT $L81670
	mov	WORD PTR ?RenderFog@@3FA, 1		; RenderFog
	movsx	eax, WORD PTR ?RenderFog@@3FA		; RenderFog
	push	eax
	push	28					; 0000001cH
	mov	ecx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	eax
	call	DWORD PTR [edx+88]
	mov	eax, DWORD PTR ?RenderStateChange@@3JA	; RenderStateChange
	add	eax, 1
	mov	DWORD PTR ?RenderStateChange@@3JA, eax	; RenderStateChange
$L81670:

; 387  : 
; 388  : 		ModelBucketHead = BucketFog;

	mov	DWORD PTR _ModelBucketHead, OFFSET FLAT:?BucketFog@@3PAUBUCKET_TEX1@@A ; BucketFog

; 389  : 		ModelBucketHeadRGB = &BucketFogRGB;

	mov	DWORD PTR _ModelBucketHeadRGB, OFFSET FLAT:?BucketFogRGB@@3UBUCKET_TEX0@@A ; BucketFogRGB

; 390  : 		ModelBucketHeadClip = BucketClipFog;

	mov	DWORD PTR _ModelBucketHeadClip, OFFSET FLAT:?BucketClipFog@@3PAUBUCKET_TEX1@@A ; BucketClipFog

; 391  : 		ModelBucketHeadClipRGB = &BucketClipFogRGB;

	mov	DWORD PTR _ModelBucketHeadClipRGB, OFFSET FLAT:?BucketClipFogRGB@@3UBUCKET_TEX0@@A ; BucketClipFogRGB

; 392  : 	}
; 393  : 	else

	jmp	SHORT $L81671
$L81669:

; 394  : 	{
; 395  : 		ModelBucketHead = Bucket;

	mov	DWORD PTR _ModelBucketHead, OFFSET FLAT:?Bucket@@3PAUBUCKET_TEX1@@A ; Bucket

; 396  : 		ModelBucketHeadRGB = &BucketRGB;

	mov	DWORD PTR _ModelBucketHeadRGB, OFFSET FLAT:?BucketRGB@@3UBUCKET_TEX0@@A ; BucketRGB

; 397  : 		ModelBucketHeadClip = BucketClip;

	mov	DWORD PTR _ModelBucketHeadClip, OFFSET FLAT:?BucketClip@@3PAUBUCKET_TEX1@@A ; BucketClip

; 398  : 		ModelBucketHeadClipRGB = &BucketClipRGB;

	mov	DWORD PTR _ModelBucketHeadClipRGB, OFFSET FLAT:?BucketClipRGB@@3UBUCKET_TEX0@@A ; BucketClipRGB
$L81671:

; 399  : 	}
; 400  : 
; 401  : // set eye mat + trans
; 402  : 
; 403  : 	MulMatrix(&ViewMatrixScaled, worldmat, &eyematrix);

	lea	eax, DWORD PTR _eyematrix$[ebp]
	push	eax
	mov	ecx, DWORD PTR _worldmat$[ebp]
	push	ecx
	push	OFFSET FLAT:?ViewMatrixScaled@@3TMatrixUnion@@A ; ViewMatrixScaled
	call	?MulMatrix@@YAXPATMatrixUnion@@00@Z	; MulMatrix
	add	esp, 12					; 0000000cH

; 404  : 	RotTransVector(&ViewMatrixScaled, &ViewTransScaled, worldpos, &eyetrans);

	lea	eax, DWORD PTR _eyetrans$[ebp]
	push	eax
	mov	ecx, DWORD PTR _worldpos$[ebp]
	push	ecx
	push	OFFSET FLAT:?ViewTransScaled@@3UVectorStruct@@A ; ViewTransScaled
	push	OFFSET FLAT:?ViewMatrixScaled@@3TMatrixUnion@@A ; ViewMatrixScaled
	call	?RotTransVector@@YAXPATMatrixUnion@@PAUVectorStruct@@11@Z ; RotTransVector
	add	esp, 16					; 00000010H

; 405  : 
; 406  : // ghost?
; 407  : 
; 408  : 	if (flag & MODEL_GHOST)

	movsx	eax, WORD PTR _flag$[ebp]
	and	eax, 32					; 00000020H
	je	SHORT $L81672

; 409  : 	{
; 410  : 		SetModelVertsGhost(m);

	mov	eax, DWORD PTR _m$[ebp]
	push	eax
	call	?SetModelVertsGhost@@YAXPAUMODEL@@@Z	; SetModelVertsGhost
	add	esp, 4
$L81672:

; 411  : 	}
; 412  : 
; 413  : // env?
; 414  : 
; 415  : 	if (flag & MODEL_ENV)

	movsx	eax, WORD PTR _flag$[ebp]
	and	eax, 4
	je	$L81673

; 416  : 	{
; 417  : 		if (ModelFog)

	movsx	eax, WORD PTR _ModelFog
	test	eax, eax
	je	SHORT $L81674

; 418  : 		{
; 419  : 			if (EnvTpage == TPAGE_ENVSTILL)

	movsx	eax, WORD PTR ?EnvTpage@@3FA		; EnvTpage
	cmp	eax, 24					; 00000018H
	jne	SHORT $L81675

; 420  : 			{
; 421  : 				ModelBucketHeadEnv = &BucketEnvStillFog;

	mov	DWORD PTR _ModelBucketHeadEnv, OFFSET FLAT:?BucketEnvStillFog@@3UBUCKET_ENV@@A ; BucketEnvStillFog

; 422  : 				ModelBucketHeadEnvClip = &BucketEnvStillClipFog;

	mov	DWORD PTR _ModelBucketHeadEnvClip, OFFSET FLAT:?BucketEnvStillClipFog@@3UBUCKET_ENV@@A ; BucketEnvStillClipFog

; 423  : 			}
; 424  : 			else

	jmp	SHORT $L81676
$L81675:

; 425  : 			{
; 426  : 				ModelBucketHeadEnv = &BucketEnvRollFog;

	mov	DWORD PTR _ModelBucketHeadEnv, OFFSET FLAT:?BucketEnvRollFog@@3UBUCKET_ENV@@A ; BucketEnvRollFog

; 427  : 				ModelBucketHeadEnvClip = &BucketEnvRollClipFog;

	mov	DWORD PTR _ModelBucketHeadEnvClip, OFFSET FLAT:?BucketEnvRollClipFog@@3UBUCKET_ENV@@A ; BucketEnvRollClipFog
$L81676:

; 428  : 			}
; 429  : 		}
; 430  : 		else

	jmp	SHORT $L81677
$L81674:

; 431  : 		{
; 432  : 			if (EnvTpage == TPAGE_ENVSTILL)

	movsx	eax, WORD PTR ?EnvTpage@@3FA		; EnvTpage
	cmp	eax, 24					; 00000018H
	jne	SHORT $L81678

; 433  : 			{
; 434  : 				ModelBucketHeadEnv = &BucketEnvStill;

	mov	DWORD PTR _ModelBucketHeadEnv, OFFSET FLAT:?BucketEnvStill@@3UBUCKET_ENV@@A ; BucketEnvStill

; 435  : 				ModelBucketHeadEnvClip = &BucketEnvStillClip;

	mov	DWORD PTR _ModelBucketHeadEnvClip, OFFSET FLAT:?BucketEnvStillClip@@3UBUCKET_ENV@@A ; BucketEnvStillClip

; 436  : 			}
; 437  : 			else

	jmp	SHORT $L81677
$L81678:

; 438  : 			{
; 439  : 				ModelBucketHeadEnv = &BucketEnvRoll;

	mov	DWORD PTR _ModelBucketHeadEnv, OFFSET FLAT:?BucketEnvRoll@@3UBUCKET_ENV@@A ; BucketEnvRoll

; 440  : 				ModelBucketHeadEnvClip = &BucketEnvRollClip;

	mov	DWORD PTR _ModelBucketHeadEnvClip, OFFSET FLAT:?BucketEnvRollClip@@3UBUCKET_ENV@@A ; BucketEnvRollClip
$L81677:

; 441  : 			}
; 442  : 		}
; 443  : 
; 444  : 		if (flag & MODEL_LIT) SetModelVertsEnvLit(m);

	movsx	eax, WORD PTR _flag$[ebp]
	and	eax, 2
	je	SHORT $L81680
	mov	eax, DWORD PTR _m$[ebp]
	push	eax
	call	?SetModelVertsEnvLit@@YAXPAUMODEL@@@Z	; SetModelVertsEnvLit
	add	esp, 4

; 445  : 		else SetModelVertsEnvPlain(m);

	jmp	SHORT $L81673
$L81680:
	mov	eax, DWORD PTR _m$[ebp]
	push	eax
	call	?SetModelVertsEnvPlain@@YAXPAUMODEL@@@Z	; SetModelVertsEnvPlain
	add	esp, 4
$L81673:

; 446  : 	}
; 447  : 
; 448  : // add lit?
; 449  : 
; 450  : 	if (flag & MODEL_ADDLIT)

	movsx	eax, WORD PTR _flag$[ebp]
	and	eax, 256				; 00000100H
	je	$L81682

; 451  : 	{
; 452  : 		mv = m->VertPtr;

	mov	eax, DWORD PTR _m$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	mov	DWORD PTR _mv$[ebp], ecx

; 453  : 
; 454  : 		if (flag & MODEL_LIT)

	movsx	eax, WORD PTR _flag$[ebp]
	and	eax, 2
	je	SHORT $L81683

; 455  : 		{
; 456  : 			for (i = m->VertNum ; i ; i--, mv++)

	mov	eax, DWORD PTR _m$[ebp]
	movsx	ecx, WORD PTR [eax+34]
	mov	DWORD PTR _i$[ebp], ecx
	jmp	SHORT $L81684
$L81685:
	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	mov	ecx, DWORD PTR _mv$[ebp]
	add	ecx, 88					; 00000058H
	mov	DWORD PTR _mv$[ebp], ecx
$L81684:
	cmp	DWORD PTR _i$[ebp], 0
	je	SHORT $L81686

; 457  : 			{
; 458  : 				mv->r += ModelAddLit;

	mov	eax, DWORD PTR _mv$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	add	ecx, DWORD PTR ?ModelAddLit@@3JA	; ModelAddLit
	mov	edx, DWORD PTR _mv$[ebp]
	mov	DWORD PTR [edx+68], ecx

; 459  : 				mv->g += ModelAddLit;

	mov	eax, DWORD PTR _mv$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	add	ecx, DWORD PTR ?ModelAddLit@@3JA	; ModelAddLit
	mov	edx, DWORD PTR _mv$[ebp]
	mov	DWORD PTR [edx+72], ecx

; 460  : 				mv->b += ModelAddLit;

	mov	eax, DWORD PTR _mv$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	add	ecx, DWORD PTR ?ModelAddLit@@3JA	; ModelAddLit
	mov	edx, DWORD PTR _mv$[ebp]
	mov	DWORD PTR [edx+76], ecx

; 461  : 			}

	jmp	SHORT $L81685
$L81686:

; 462  : 		}
; 463  : 		else

	jmp	SHORT $L81682
$L81683:

; 464  : 		{
; 465  : 			for (i = m->VertNum ; i ; i--, mv++)

	mov	eax, DWORD PTR _m$[ebp]
	movsx	ecx, WORD PTR [eax+34]
	mov	DWORD PTR _i$[ebp], ecx
	jmp	SHORT $L81688
$L81689:
	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	mov	ecx, DWORD PTR _mv$[ebp]
	add	ecx, 88					; 00000058H
	mov	DWORD PTR _mv$[ebp], ecx
$L81688:
	cmp	DWORD PTR _i$[ebp], 0
	je	SHORT $L81690

; 466  : 			{
; 467  : 				mv->r = ModelAddLit;

	mov	eax, DWORD PTR _mv$[ebp]
	mov	ecx, DWORD PTR ?ModelAddLit@@3JA	; ModelAddLit
	mov	DWORD PTR [eax+68], ecx

; 468  : 				mv->g = ModelAddLit;

	mov	eax, DWORD PTR _mv$[ebp]
	mov	ecx, DWORD PTR ?ModelAddLit@@3JA	; ModelAddLit
	mov	DWORD PTR [eax+72], ecx

; 469  : 				mv->b = ModelAddLit;

	mov	eax, DWORD PTR _mv$[ebp]
	mov	ecx, DWORD PTR ?ModelAddLit@@3JA	; ModelAddLit
	mov	DWORD PTR [eax+76], ecx

; 470  : 			}

	jmp	SHORT $L81689
$L81690:

; 471  : 
; 472  : 			flag |= MODEL_LIT;

	movsx	eax, WORD PTR _flag$[ebp]
	or	eax, 2
	mov	WORD PTR _flag$[ebp], ax
$L81682:

; 473  : 		}
; 474  : 	}
; 475  : 
; 476  : // scale?
; 477  : 
; 478  : 	if (flag & MODEL_SCALE)

	movsx	eax, WORD PTR _flag$[ebp]
	and	eax, 512				; 00000200H
	je	SHORT $L81691

; 479  : 	{
; 480  : 		VecMulScalar(&eyematrix.mv[R], ModelScale);

	fld	DWORD PTR _eyematrix$[ebp]
	fmul	DWORD PTR ?ModelScale@@3MA		; ModelScale
	fstp	DWORD PTR _eyematrix$[ebp]
	fld	DWORD PTR _eyematrix$[ebp+4]
	fmul	DWORD PTR ?ModelScale@@3MA		; ModelScale
	fstp	DWORD PTR _eyematrix$[ebp+4]
	fld	DWORD PTR _eyematrix$[ebp+8]
	fmul	DWORD PTR ?ModelScale@@3MA		; ModelScale
	fstp	DWORD PTR _eyematrix$[ebp+8]

; 481  : 		VecMulScalar(&eyematrix.mv[U], ModelScale);

	fld	DWORD PTR _eyematrix$[ebp+12]
	fmul	DWORD PTR ?ModelScale@@3MA		; ModelScale
	fstp	DWORD PTR _eyematrix$[ebp+12]
	fld	DWORD PTR _eyematrix$[ebp+16]
	fmul	DWORD PTR ?ModelScale@@3MA		; ModelScale
	fstp	DWORD PTR _eyematrix$[ebp+16]
	fld	DWORD PTR _eyematrix$[ebp+20]
	fmul	DWORD PTR ?ModelScale@@3MA		; ModelScale
	fstp	DWORD PTR _eyematrix$[ebp+20]

; 482  : 		VecMulScalar(&eyematrix.mv[L], ModelScale);

	fld	DWORD PTR _eyematrix$[ebp+24]
	fmul	DWORD PTR ?ModelScale@@3MA		; ModelScale
	fstp	DWORD PTR _eyematrix$[ebp+24]
	fld	DWORD PTR _eyematrix$[ebp+28]
	fmul	DWORD PTR ?ModelScale@@3MA		; ModelScale
	fstp	DWORD PTR _eyematrix$[ebp+28]
	fld	DWORD PTR _eyematrix$[ebp+32]
	fmul	DWORD PTR ?ModelScale@@3MA		; ModelScale
	fstp	DWORD PTR _eyematrix$[ebp+32]
$L81691:

; 483  : 	}
; 484  : 
; 485  : // draw
; 486  : 
; 487  : 	if (flag & MODEL_USENEWVERTS)

	movsx	eax, WORD PTR _flag$[ebp]
	and	eax, 128				; 00000080H
	je	$L81692

; 488  : 	{
; 489  : 		if (flag & MODEL_DONOTCLIP)

	movsx	eax, WORD PTR _flag$[ebp]
	and	eax, 8
	je	SHORT $L81693

; 490  : 		{
; 491  : 			if (ModelFog) TransModelVertsFogNewVerts(m, &eyematrix, &eyetrans);

	movsx	eax, WORD PTR _ModelFog
	test	eax, eax
	je	SHORT $L81694
	lea	eax, DWORD PTR _eyetrans$[ebp]
	push	eax
	lea	ecx, DWORD PTR _eyematrix$[ebp]
	push	ecx
	mov	edx, DWORD PTR _m$[ebp]
	push	edx
	call	?TransModelVertsFogNewVerts@@YAXPAUMODEL@@PATMatrixUnion@@PAUVectorStruct@@@Z ; TransModelVertsFogNewVerts
	add	esp, 12					; 0000000cH

; 492  : 		else TransModelVertsPlainNewVerts(m, &eyematrix, &eyetrans);

	jmp	SHORT $L81695
$L81694:
	lea	eax, DWORD PTR _eyetrans$[ebp]
	push	eax
	lea	ecx, DWORD PTR _eyematrix$[ebp]
	push	ecx
	mov	edx, DWORD PTR _m$[ebp]
	push	edx
	call	?TransModelVertsPlainNewVerts@@YAXPAUMODEL@@PATMatrixUnion@@PAUVectorStruct@@@Z ; TransModelVertsPlainNewVerts
	add	esp, 12					; 0000000cH
$L81695:

; 493  : 			DrawModelPolys(m, flag & MODEL_LIT, flag & MODEL_ENV);

	movsx	eax, WORD PTR _flag$[ebp]
	and	eax, 4
	push	eax
	movsx	ecx, WORD PTR _flag$[ebp]
	and	ecx, 2
	push	ecx
	mov	edx, DWORD PTR _m$[ebp]
	push	edx
	call	?DrawModelPolys@@YAXPAUMODEL@@JJ@Z	; DrawModelPolys
	add	esp, 12					; 0000000cH

; 494  : 		}
; 495  : 		else

	jmp	SHORT $L81696
$L81693:

; 496  : 		{
; 497  : 			if (ModelFog) TransModelVertsFogClipNewVerts(m, &eyematrix, &eyetrans);

	movsx	eax, WORD PTR _ModelFog
	test	eax, eax
	je	SHORT $L81697
	lea	eax, DWORD PTR _eyetrans$[ebp]
	push	eax
	lea	ecx, DWORD PTR _eyematrix$[ebp]
	push	ecx
	mov	edx, DWORD PTR _m$[ebp]
	push	edx
	call	?TransModelVertsFogClipNewVerts@@YAXPAUMODEL@@PATMatrixUnion@@PAUVectorStruct@@@Z ; TransModelVertsFogClipNewVerts
	add	esp, 12					; 0000000cH

; 498  : 			else TransModelVertsPlainClipNewVerts(m, &eyematrix, &eyetrans);

	jmp	SHORT $L81698
$L81697:
	lea	eax, DWORD PTR _eyetrans$[ebp]
	push	eax
	lea	ecx, DWORD PTR _eyematrix$[ebp]
	push	ecx
	mov	edx, DWORD PTR _m$[ebp]
	push	edx
	call	?TransModelVertsPlainClipNewVerts@@YAXPAUMODEL@@PATMatrixUnion@@PAUVectorStruct@@@Z ; TransModelVertsPlainClipNewVerts
	add	esp, 12					; 0000000cH
$L81698:

; 499  : 			DrawModelPolysClip(m, flag & MODEL_LIT, flag & MODEL_ENV);

	movsx	eax, WORD PTR _flag$[ebp]
	and	eax, 4
	push	eax
	movsx	ecx, WORD PTR _flag$[ebp]
	and	ecx, 2
	push	ecx
	mov	edx, DWORD PTR _m$[ebp]
	push	edx
	call	?DrawModelPolysClip@@YAXPAUMODEL@@JJ@Z	; DrawModelPolysClip
	add	esp, 12					; 0000000cH
$L81696:

; 500  : 		}
; 501  : 	}
; 502  : 	else

	jmp	$L81699
$L81692:

; 503  : 	{
; 504  : 		if (flag & MODEL_DONOTCLIP)

	movsx	eax, WORD PTR _flag$[ebp]
	and	eax, 8
	je	SHORT $L81700

; 505  : 		{
; 506  : 			if (ModelFog) TransModelVertsFog(m, &eyematrix, &eyetrans);

	movsx	eax, WORD PTR _ModelFog
	test	eax, eax
	je	SHORT $L81701
	lea	eax, DWORD PTR _eyetrans$[ebp]
	push	eax
	lea	ecx, DWORD PTR _eyematrix$[ebp]
	push	ecx
	mov	edx, DWORD PTR _m$[ebp]
	push	edx
	call	?TransModelVertsFog@@YAXPAUMODEL@@PATMatrixUnion@@PAUVectorStruct@@@Z ; TransModelVertsFog
	add	esp, 12					; 0000000cH

; 507  : 		else TransModelVertsPlain(m, &eyematrix, &eyetrans);

	jmp	SHORT $L81702
$L81701:
	lea	eax, DWORD PTR _eyetrans$[ebp]
	push	eax
	lea	ecx, DWORD PTR _eyematrix$[ebp]
	push	ecx
	mov	edx, DWORD PTR _m$[ebp]
	push	edx
	call	?TransModelVertsPlain@@YAXPAUMODEL@@PATMatrixUnion@@PAUVectorStruct@@@Z ; TransModelVertsPlain
	add	esp, 12					; 0000000cH
$L81702:

; 508  : 			DrawModelPolys(m, flag & MODEL_LIT, flag & MODEL_ENV);

	movsx	eax, WORD PTR _flag$[ebp]
	and	eax, 4
	push	eax
	movsx	ecx, WORD PTR _flag$[ebp]
	and	ecx, 2
	push	ecx
	mov	edx, DWORD PTR _m$[ebp]
	push	edx
	call	?DrawModelPolys@@YAXPAUMODEL@@JJ@Z	; DrawModelPolys
	add	esp, 12					; 0000000cH

; 509  : 		}
; 510  : 		else

	jmp	SHORT $L81699
$L81700:

; 511  : 		{
; 512  : 			if (ModelFog) TransModelVertsFogClip(m, &eyematrix, &eyetrans);

	movsx	eax, WORD PTR _ModelFog
	test	eax, eax
	je	SHORT $L81704
	lea	eax, DWORD PTR _eyetrans$[ebp]
	push	eax
	lea	ecx, DWORD PTR _eyematrix$[ebp]
	push	ecx
	mov	edx, DWORD PTR _m$[ebp]
	push	edx
	call	?TransModelVertsFogClip@@YAXPAUMODEL@@PATMatrixUnion@@PAUVectorStruct@@@Z ; TransModelVertsFogClip
	add	esp, 12					; 0000000cH

; 513  : 			else TransModelVertsPlainClip(m, &eyematrix, &eyetrans);

	jmp	SHORT $L81705
$L81704:
	lea	eax, DWORD PTR _eyetrans$[ebp]
	push	eax
	lea	ecx, DWORD PTR _eyematrix$[ebp]
	push	ecx
	mov	edx, DWORD PTR _m$[ebp]
	push	edx
	call	?TransModelVertsPlainClip@@YAXPAUMODEL@@PATMatrixUnion@@PAUVectorStruct@@@Z ; TransModelVertsPlainClip
	add	esp, 12					; 0000000cH
$L81705:

; 514  : 			DrawModelPolysClip(m, flag & MODEL_LIT, flag & MODEL_ENV);

	movsx	eax, WORD PTR _flag$[ebp]
	and	eax, 4
	push	eax
	movsx	ecx, WORD PTR _flag$[ebp]
	and	ecx, 2
	push	ecx
	mov	edx, DWORD PTR _m$[ebp]
	push	edx
	call	?DrawModelPolysClip@@YAXPAUMODEL@@JJ@Z	; DrawModelPolysClip
	add	esp, 12					; 0000000cH
$L81699:

; 515  : 		}
; 516  : 	}
; 517  : 
; 518  : // mirrored?
; 519  : 
; 520  : 	if (flag & MODEL_MIRROR)

	movsx	eax, WORD PTR _flag$[ebp]
	and	eax, 16					; 00000010H
	je	$L81706

; 521  : 	{
; 522  : 		mirroradd = MirrorHeight - worldpos->v[Y];

	mov	eax, DWORD PTR _worldpos$[ebp]
	fld	DWORD PTR ?MirrorHeight@@3MA		; MirrorHeight
	fsub	DWORD PTR [eax+4]
	fstp	DWORD PTR _mirroradd$[ebp]

; 523  : 		if (mirroradd > -MIRROR_OVERLAP_TOL)

	fld	DWORD PTR _mirroradd$[ebp]
	fcomp	DWORD PTR __real@c0000000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	$L81706

; 524  : 		{
; 525  : 			if (!ModelFog)

	movsx	eax, WORD PTR _ModelFog
	test	eax, eax
	jne	SHORT $L81708

; 526  : 			{
; 527  : 				FOG_ON();

	movsx	eax, WORD PTR ?RenderFog@@3FA		; RenderFog
	test	eax, eax
	jne	SHORT $L81709
	mov	WORD PTR ?RenderFog@@3FA, 1		; RenderFog
	movsx	eax, WORD PTR ?RenderFog@@3FA		; RenderFog
	push	eax
	push	28					; 0000001cH
	mov	ecx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	eax
	call	DWORD PTR [edx+88]
	mov	eax, DWORD PTR ?RenderStateChange@@3JA	; RenderStateChange
	add	eax, 1
	mov	DWORD PTR ?RenderStateChange@@3JA, eax	; RenderStateChange
$L81709:

; 528  : 
; 529  : 				ModelBucketHead = BucketFog;

	mov	DWORD PTR _ModelBucketHead, OFFSET FLAT:?BucketFog@@3PAUBUCKET_TEX1@@A ; BucketFog

; 530  : 				ModelBucketHeadRGB = &BucketFogRGB;

	mov	DWORD PTR _ModelBucketHeadRGB, OFFSET FLAT:?BucketFogRGB@@3UBUCKET_TEX0@@A ; BucketFogRGB

; 531  : 				ModelBucketHeadClip = BucketClipFog;

	mov	DWORD PTR _ModelBucketHeadClip, OFFSET FLAT:?BucketClipFog@@3PAUBUCKET_TEX1@@A ; BucketClipFog

; 532  : 				ModelBucketHeadClipRGB = &BucketClipFogRGB;

	mov	DWORD PTR _ModelBucketHeadClipRGB, OFFSET FLAT:?BucketClipFogRGB@@3UBUCKET_TEX0@@A ; BucketClipFogRGB
$L81708:

; 533  : 			}
; 534  : 
; 535  : 			mirrorpos.v[X] = worldpos->v[X];

	mov	eax, DWORD PTR _worldpos$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _mirrorpos$[ebp], ecx

; 536  : 			mirrorpos.v[Y] = MirrorHeight + mirroradd;

	fld	DWORD PTR ?MirrorHeight@@3MA		; MirrorHeight
	fadd	DWORD PTR _mirroradd$[ebp]
	fstp	DWORD PTR _mirrorpos$[ebp+4]

; 537  : 			mirrorpos.v[Z] = worldpos->v[Z];

	mov	eax, DWORD PTR _worldpos$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _mirrorpos$[ebp+8], ecx

; 538  : 
; 539  : 			MulMatrix(&ViewMatrixScaledMirrorY, worldmat, &eyematrix);

	lea	eax, DWORD PTR _eyematrix$[ebp]
	push	eax
	mov	ecx, DWORD PTR _worldmat$[ebp]
	push	ecx
	push	OFFSET FLAT:?ViewMatrixScaledMirrorY@@3TMatrixUnion@@A ; ViewMatrixScaledMirrorY
	call	?MulMatrix@@YAXPATMatrixUnion@@00@Z	; MulMatrix
	add	esp, 12					; 0000000cH

; 540  : 			RotTransVector(&ViewMatrixScaled, &ViewTransScaled, &mirrorpos, &eyetrans);

	lea	eax, DWORD PTR _eyetrans$[ebp]
	push	eax
	lea	ecx, DWORD PTR _mirrorpos$[ebp]
	push	ecx
	push	OFFSET FLAT:?ViewTransScaled@@3UVectorStruct@@A ; ViewTransScaled
	push	OFFSET FLAT:?ViewMatrixScaled@@3TMatrixUnion@@A ; ViewMatrixScaled
	call	?RotTransVector@@YAXPATMatrixUnion@@PAUVectorStruct@@11@Z ; RotTransVector
	add	esp, 16					; 00000010H

; 541  : 
; 542  : 			if (flag & MODEL_USENEWVERTS)

	movsx	eax, WORD PTR _flag$[ebp]
	and	eax, 128				; 00000080H
	je	SHORT $L81710

; 543  : 			{
; 544  : 				TransModelVertsMirrorNewVerts(m, &eyematrix, &eyetrans, worldmat, worldpos);

	mov	eax, DWORD PTR _worldpos$[ebp]
	push	eax
	mov	ecx, DWORD PTR _worldmat$[ebp]
	push	ecx
	lea	edx, DWORD PTR _eyetrans$[ebp]
	push	edx
	lea	eax, DWORD PTR _eyematrix$[ebp]
	push	eax
	mov	ecx, DWORD PTR _m$[ebp]
	push	ecx
	call	?TransModelVertsMirrorNewVerts@@YAXPAUMODEL@@PATMatrixUnion@@PAUVectorStruct@@12@Z ; TransModelVertsMirrorNewVerts
	add	esp, 20					; 00000014H

; 545  : 				DrawModelPolysMirror(m, flag & MODEL_LIT);

	movsx	eax, WORD PTR _flag$[ebp]
	and	eax, 2
	push	eax
	mov	ecx, DWORD PTR _m$[ebp]
	push	ecx
	call	?DrawModelPolysMirror@@YAXPAUMODEL@@J@Z	; DrawModelPolysMirror
	add	esp, 8

; 546  : 			}
; 547  : 			else

	jmp	SHORT $L81706
$L81710:

; 548  : 			{
; 549  : 				TransModelVertsMirror(m, &eyematrix, &eyetrans, worldmat, worldpos);

	mov	eax, DWORD PTR _worldpos$[ebp]
	push	eax
	mov	ecx, DWORD PTR _worldmat$[ebp]
	push	ecx
	lea	edx, DWORD PTR _eyetrans$[ebp]
	push	edx
	lea	eax, DWORD PTR _eyematrix$[ebp]
	push	eax
	mov	ecx, DWORD PTR _m$[ebp]
	push	ecx
	call	?TransModelVertsMirror@@YAXPAUMODEL@@PATMatrixUnion@@PAUVectorStruct@@12@Z ; TransModelVertsMirror
	add	esp, 20					; 00000014H

; 550  : 				DrawModelPolysMirror(m, flag & MODEL_LIT);

	movsx	eax, WORD PTR _flag$[ebp]
	and	eax, 2
	push	eax
	mov	ecx, DWORD PTR _m$[ebp]
	push	ecx
	call	?DrawModelPolysMirror@@YAXPAUMODEL@@J@Z	; DrawModelPolysMirror
	add	esp, 8
$L81706:

; 551  : 			}
; 552  : 		}
; 553  : 	}
; 554  : 
; 555  : // glare?
; 556  : 
; 557  : 	if (flag & MODEL_GLARE)

	movsx	eax, WORD PTR _flag$[ebp]
	and	eax, 64					; 00000040H
	je	SHORT $L81712

; 558  : 	{
; 559  : 		SetModelVertsGlare(m, worldpos, worldmat, flag);

	mov	ax, WORD PTR _flag$[ebp]
	push	eax
	mov	ecx, DWORD PTR _worldmat$[ebp]
	push	ecx
	mov	edx, DWORD PTR _worldpos$[ebp]
	push	edx
	mov	eax, DWORD PTR _m$[ebp]
	push	eax
	call	?SetModelVertsGlare@@YAXPAUMODEL@@PAUVectorStruct@@PATMatrixUnion@@F@Z ; SetModelVertsGlare
	add	esp, 16					; 00000010H
$L81712:

; 560  : 	}
; 561  : 
; 562  : // fog off
; 563  : 
; 564  : 	FOG_OFF();

	movsx	eax, WORD PTR ?RenderFog@@3FA		; RenderFog
	test	eax, eax
	je	SHORT $L81661
	mov	WORD PTR ?RenderFog@@3FA, 0		; RenderFog
	movsx	eax, WORD PTR ?RenderFog@@3FA		; RenderFog
	push	eax
	push	28					; 0000001cH
	mov	ecx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	eax
	call	DWORD PTR [edx+88]
	mov	eax, DWORD PTR ?RenderStateChange@@3JA	; RenderStateChange
	add	eax, 1
	mov	DWORD PTR ?RenderStateChange@@3JA, eax	; RenderStateChange
$L81661:

; 565  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?DrawModel@@YAXPAUMODEL@@PATMatrixUnion@@PAUVectorStruct@@F@Z ENDP ; DrawModel
_TEXT	ENDS
PUBLIC	__real@3f800000
PUBLIC	__real@00000000
EXTRN	?ScreenLeftClipGuard@@3MA:DWORD			; ScreenLeftClipGuard
EXTRN	?ScreenRightClipGuard@@3MA:DWORD		; ScreenRightClipGuard
EXTRN	?ScreenTopClipGuard@@3MA:DWORD			; ScreenTopClipGuard
EXTRN	?ScreenBottomClipGuard@@3MA:DWORD		; ScreenBottomClipGuard
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
; Function compile flags: /Odt /ZI
CONST	ENDS
;	COMDAT ?TransModelVertsPlainClip@@YAXPAUMODEL@@PATMatrixUnion@@PAUVectorStruct@@@Z
_TEXT	SEGMENT
_mv$ = -12						; size = 4
_z$ = -8						; size = 4
_i$ = -4						; size = 2
_m$ = 8							; size = 4
_mat$ = 12						; size = 4
_trans$ = 16						; size = 4
?TransModelVertsPlainClip@@YAXPAUMODEL@@PATMatrixUnion@@PAUVectorStruct@@@Z PROC NEAR ; TransModelVertsPlainClip, COMDAT

; 572  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi

; 573  : 	short i;
; 574  : 	float z;
; 575  : 	MODEL_VERTEX *mv;
; 576  : 
; 577  : 	mv = m->VertPtr;

	mov	eax, DWORD PTR _m$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	mov	DWORD PTR _mv$[ebp], ecx

; 578  : 
; 579  : 	for (i = 0 ; i < m->VertNum ; i++, mv++)

	mov	WORD PTR _i$[ebp], 0
	jmp	SHORT $L81722
$L81723:
	mov	ax, WORD PTR _i$[ebp]
	add	ax, 1
	mov	WORD PTR _i$[ebp], ax
	mov	ecx, DWORD PTR _mv$[ebp]
	add	ecx, 88					; 00000058H
	mov	DWORD PTR _mv$[ebp], ecx
$L81722:
	movsx	eax, WORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _m$[ebp]
	movsx	edx, WORD PTR [ecx+34]
	cmp	eax, edx
	jge	$L81718

; 580  : 	{
; 581  : 		z = mv->x * mat->m[RZ] + mv->y * mat->m[UZ] + mv->z * mat->m[LZ] + trans->v[Z];

	mov	eax, DWORD PTR _mv$[ebp]
	mov	ecx, DWORD PTR _mat$[ebp]
	fld	DWORD PTR [eax]
	fmul	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _mv$[ebp]
	mov	eax, DWORD PTR _mat$[ebp]
	fld	DWORD PTR [edx+4]
	fmul	DWORD PTR [eax+20]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR _mv$[ebp]
	mov	edx, DWORD PTR _mat$[ebp]
	fld	DWORD PTR [ecx+8]
	fmul	DWORD PTR [edx+32]
	faddp	ST(1), ST(0)
	mov	eax, DWORD PTR _trans$[ebp]
	fadd	DWORD PTR [eax+8]
	fstp	DWORD PTR _z$[ebp]

; 582  : 		if (z < 1) z = 1;

	fld	DWORD PTR _z$[ebp]
	fcomp	DWORD PTR __real@3f800000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L81725
	mov	DWORD PTR _z$[ebp], 1065353216		; 3f800000H
$L81725:

; 583  : 
; 584  : 		mv->sx = (mv->x * mat->m[RX] + mv->y * mat->m[UX] + mv->z * mat->m[LX] + trans->v[X]) / z + RenderSettings.GeomCentreX;

	mov	eax, DWORD PTR _mv$[ebp]
	mov	ecx, DWORD PTR _mat$[ebp]
	fld	DWORD PTR [eax]
	fmul	DWORD PTR [ecx]
	mov	edx, DWORD PTR _mv$[ebp]
	mov	eax, DWORD PTR _mat$[ebp]
	fld	DWORD PTR [edx+4]
	fmul	DWORD PTR [eax+12]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR _mv$[ebp]
	mov	edx, DWORD PTR _mat$[ebp]
	fld	DWORD PTR [ecx+8]
	fmul	DWORD PTR [edx+24]
	faddp	ST(1), ST(0)
	mov	eax, DWORD PTR _trans$[ebp]
	fadd	DWORD PTR [eax]
	fdiv	DWORD PTR _z$[ebp]
	fadd	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+4
	mov	ecx, DWORD PTR _mv$[ebp]
	fstp	DWORD PTR [ecx+36]

; 585  : 		mv->sy = (mv->x * mat->m[RY] + mv->y * mat->m[UY] + mv->z * mat->m[LY] + trans->v[Y]) / z + RenderSettings.GeomCentreY;

	mov	eax, DWORD PTR _mv$[ebp]
	mov	ecx, DWORD PTR _mat$[ebp]
	fld	DWORD PTR [eax]
	fmul	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _mv$[ebp]
	mov	eax, DWORD PTR _mat$[ebp]
	fld	DWORD PTR [edx+4]
	fmul	DWORD PTR [eax+16]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR _mv$[ebp]
	mov	edx, DWORD PTR _mat$[ebp]
	fld	DWORD PTR [ecx+8]
	fmul	DWORD PTR [edx+28]
	faddp	ST(1), ST(0)
	mov	eax, DWORD PTR _trans$[ebp]
	fadd	DWORD PTR [eax+4]
	fdiv	DWORD PTR _z$[ebp]
	fadd	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+8
	mov	ecx, DWORD PTR _mv$[ebp]
	fstp	DWORD PTR [ecx+40]

; 586  : 
; 587  : 		mv->rhw = 1 / z;

	fld	DWORD PTR __real@3f800000
	fdiv	DWORD PTR _z$[ebp]
	mov	eax, DWORD PTR _mv$[ebp]
	fstp	DWORD PTR [eax+48]

; 588  : 		mv->sz = GET_ZBUFFER(z);

	fld	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+36
	fmul	DWORD PTR _z$[ebp]
	fdivr	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+44
	fsubr	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+40
	mov	eax, DWORD PTR _mv$[ebp]
	fstp	DWORD PTR [eax+44]

; 589  : 
; 590  : 		mv->Clip = 0;

	mov	eax, DWORD PTR _mv$[ebp]
	mov	BYTE PTR [eax+84], 0

; 591  : 		if (mv->sx < ScreenLeftClipGuard) mv->Clip |= 1;

	mov	eax, DWORD PTR _mv$[ebp]
	fld	DWORD PTR [eax+36]
	fcomp	DWORD PTR ?ScreenLeftClipGuard@@3MA	; ScreenLeftClipGuard
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L81726
	mov	eax, DWORD PTR _mv$[ebp]
	movzx	ecx, BYTE PTR [eax+84]
	or	ecx, 1
	mov	edx, DWORD PTR _mv$[ebp]
	mov	BYTE PTR [edx+84], cl

; 592  : 		else if (mv->sx > ScreenRightClipGuard) mv->Clip |= 2;

	jmp	SHORT $L81727
$L81726:
	mov	eax, DWORD PTR _mv$[ebp]
	fld	DWORD PTR [eax+36]
	fcomp	DWORD PTR ?ScreenRightClipGuard@@3MA	; ScreenRightClipGuard
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $L81727
	mov	eax, DWORD PTR _mv$[ebp]
	movzx	ecx, BYTE PTR [eax+84]
	or	ecx, 2
	mov	edx, DWORD PTR _mv$[ebp]
	mov	BYTE PTR [edx+84], cl
$L81727:

; 593  : 		if (mv->sy < ScreenTopClipGuard) mv->Clip |= 4;

	mov	eax, DWORD PTR _mv$[ebp]
	fld	DWORD PTR [eax+40]
	fcomp	DWORD PTR ?ScreenTopClipGuard@@3MA	; ScreenTopClipGuard
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L81729
	mov	eax, DWORD PTR _mv$[ebp]
	movzx	ecx, BYTE PTR [eax+84]
	or	ecx, 4
	mov	edx, DWORD PTR _mv$[ebp]
	mov	BYTE PTR [edx+84], cl

; 594  : 		else if (mv->sy > ScreenBottomClipGuard) mv->Clip |= 8;

	jmp	SHORT $L81730
$L81729:
	mov	eax, DWORD PTR _mv$[ebp]
	fld	DWORD PTR [eax+40]
	fcomp	DWORD PTR ?ScreenBottomClipGuard@@3MA	; ScreenBottomClipGuard
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $L81730
	mov	eax, DWORD PTR _mv$[ebp]
	movzx	ecx, BYTE PTR [eax+84]
	or	ecx, 8
	mov	edx, DWORD PTR _mv$[ebp]
	mov	BYTE PTR [edx+84], cl
$L81730:

; 595  : 		if (mv->sz < 0) mv->Clip |= 16;

	mov	eax, DWORD PTR _mv$[ebp]
	fld	DWORD PTR [eax+44]
	fcomp	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L81732
	mov	eax, DWORD PTR _mv$[ebp]
	movzx	ecx, BYTE PTR [eax+84]
	or	ecx, 16					; 00000010H
	mov	edx, DWORD PTR _mv$[ebp]
	mov	BYTE PTR [edx+84], cl

; 596  : 		else if (mv->sz >= 1) mv->Clip |= 32;

	jmp	SHORT $L81733
$L81732:
	mov	eax, DWORD PTR _mv$[ebp]
	fld	DWORD PTR [eax+44]
	fcomp	DWORD PTR __real@3f800000
	fnstsw	ax
	test	ah, 1
	jne	SHORT $L81733
	mov	eax, DWORD PTR _mv$[ebp]
	movzx	ecx, BYTE PTR [eax+84]
	or	ecx, 32					; 00000020H
	mov	edx, DWORD PTR _mv$[ebp]
	mov	BYTE PTR [edx+84], cl
$L81733:

; 597  : 	} 

	jmp	$L81723
$L81718:

; 598  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?TransModelVertsPlainClip@@YAXPAUMODEL@@PATMatrixUnion@@PAUVectorStruct@@@Z ENDP ; TransModelVertsPlainClip
_TEXT	ENDS
PUBLIC	_sqrtf
; Function compile flags: /Odt /ZI
; File c:\program files\microsoft visual studio .net 2003\vc7\include\math.h
;	COMDAT ?sqrt@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?sqrt@@YAMM@Z PROC NEAR					; sqrt, COMDAT

; 579  :         {return (sqrtf(_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR __X$[ebp]
	push	eax
	call	_sqrtf
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?sqrt@@YAMM@Z ENDP					; sqrt
_TEXT	ENDS
EXTRN	_sqrt:NEAR
; Function compile flags: /Odt /ZI
;	COMDAT _sqrtf
_TEXT	SEGMENT
tv70 = -68						; size = 4
__X$ = 8						; size = 4
_sqrtf	PROC NEAR					; COMDAT

; 470  :         {return ((float)sqrt((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	fld	DWORD PTR __X$[ebp]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	call	_sqrt
	add	esp, 8
	fst	DWORD PTR tv70[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_sqrtf	ENDP
_TEXT	ENDS
PUBLIC	__real@437f0000
PUBLIC	__real@4b000000
;	COMDAT __real@437f0000
; File c:\documents and settings\jarhead\desktop\shit to display my love for xbox revolt and fuck you borman-ness\revolt source\source\model.cpp
CONST	SEGMENT
__real@437f0000 DD 0437f0000r			; 255
CONST	ENDS
;	COMDAT __real@4b000000
CONST	SEGMENT
__real@4b000000 DD 04b000000r			; 8.38861e+006
; Function compile flags: /Odt /ZI
CONST	ENDS
;	COMDAT ?TransModelVertsFogClip@@YAXPAUMODEL@@PATMatrixUnion@@PAUVectorStruct@@@Z
_TEXT	SEGMENT
_mv$ = -16						; size = 4
_fog$ = -12						; size = 4
_z$ = -8						; size = 4
_i$ = -4						; size = 2
_m$ = 8							; size = 4
_mat$ = 12						; size = 4
_trans$ = 16						; size = 4
?TransModelVertsFogClip@@YAXPAUMODEL@@PATMatrixUnion@@PAUVectorStruct@@@Z PROC NEAR ; TransModelVertsFogClip, COMDAT

; 605  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi

; 606  : 	short i;
; 607  : 	float z;
; 608  : 	float fog;
; 609  : 	MODEL_VERTEX *mv;
; 610  : 
; 611  : 	mv = m->VertPtr;

	mov	eax, DWORD PTR _m$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	mov	DWORD PTR _mv$[ebp], ecx

; 612  : 
; 613  : 	for (i = 0 ; i < m->VertNum ; i++, mv++)

	mov	WORD PTR _i$[ebp], 0
	jmp	SHORT $L81744
$L81745:
	mov	ax, WORD PTR _i$[ebp]
	add	ax, 1
	mov	WORD PTR _i$[ebp], ax
	mov	ecx, DWORD PTR _mv$[ebp]
	add	ecx, 88					; 00000058H
	mov	DWORD PTR _mv$[ebp], ecx
$L81744:
	movsx	eax, WORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _m$[ebp]
	movsx	edx, WORD PTR [ecx+34]
	cmp	eax, edx
	jge	$L81739

; 614  : 	{
; 615  : 		z = mv->x * mat->m[RZ] + mv->y * mat->m[UZ] + mv->z * mat->m[LZ] + trans->v[Z];

	mov	eax, DWORD PTR _mv$[ebp]
	mov	ecx, DWORD PTR _mat$[ebp]
	fld	DWORD PTR [eax]
	fmul	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _mv$[ebp]
	mov	eax, DWORD PTR _mat$[ebp]
	fld	DWORD PTR [edx+4]
	fmul	DWORD PTR [eax+20]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR _mv$[ebp]
	mov	edx, DWORD PTR _mat$[ebp]
	fld	DWORD PTR [ecx+8]
	fmul	DWORD PTR [edx+32]
	faddp	ST(1), ST(0)
	mov	eax, DWORD PTR _trans$[ebp]
	fadd	DWORD PTR [eax+8]
	fstp	DWORD PTR _z$[ebp]

; 616  : 		if (z < 1) z = 1;

	fld	DWORD PTR _z$[ebp]
	fcomp	DWORD PTR __real@3f800000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L81747
	mov	DWORD PTR _z$[ebp], 1065353216		; 3f800000H
$L81747:

; 617  : 
; 618  : 		mv->sx = (mv->x * mat->m[RX] + mv->y * mat->m[UX] + mv->z * mat->m[LX] + trans->v[X]) / z + RenderSettings.GeomCentreX;

	mov	eax, DWORD PTR _mv$[ebp]
	mov	ecx, DWORD PTR _mat$[ebp]
	fld	DWORD PTR [eax]
	fmul	DWORD PTR [ecx]
	mov	edx, DWORD PTR _mv$[ebp]
	mov	eax, DWORD PTR _mat$[ebp]
	fld	DWORD PTR [edx+4]
	fmul	DWORD PTR [eax+12]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR _mv$[ebp]
	mov	edx, DWORD PTR _mat$[ebp]
	fld	DWORD PTR [ecx+8]
	fmul	DWORD PTR [edx+24]
	faddp	ST(1), ST(0)
	mov	eax, DWORD PTR _trans$[ebp]
	fadd	DWORD PTR [eax]
	fdiv	DWORD PTR _z$[ebp]
	fadd	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+4
	mov	ecx, DWORD PTR _mv$[ebp]
	fstp	DWORD PTR [ecx+36]

; 619  : 		mv->sy = (mv->x * mat->m[RY] + mv->y * mat->m[UY] + mv->z * mat->m[LY] + trans->v[Y]) / z + RenderSettings.GeomCentreY;

	mov	eax, DWORD PTR _mv$[ebp]
	mov	ecx, DWORD PTR _mat$[ebp]
	fld	DWORD PTR [eax]
	fmul	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _mv$[ebp]
	mov	eax, DWORD PTR _mat$[ebp]
	fld	DWORD PTR [edx+4]
	fmul	DWORD PTR [eax+16]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR _mv$[ebp]
	mov	edx, DWORD PTR _mat$[ebp]
	fld	DWORD PTR [ecx+8]
	fmul	DWORD PTR [edx+28]
	faddp	ST(1), ST(0)
	mov	eax, DWORD PTR _trans$[ebp]
	fadd	DWORD PTR [eax+4]
	fdiv	DWORD PTR _z$[ebp]
	fadd	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+8
	mov	ecx, DWORD PTR _mv$[ebp]
	fstp	DWORD PTR [ecx+40]

; 620  : 
; 621  : 		mv->rhw = 1 / z;

	fld	DWORD PTR __real@3f800000
	fdiv	DWORD PTR _z$[ebp]
	mov	eax, DWORD PTR _mv$[ebp]
	fstp	DWORD PTR [eax+48]

; 622  : 		mv->sz = GET_ZBUFFER(z);

	fld	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+36
	fmul	DWORD PTR _z$[ebp]
	fdivr	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+44
	fsubr	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+40
	mov	eax, DWORD PTR _mv$[ebp]
	fstp	DWORD PTR [eax+44]

; 623  : 
; 624  : 		fog = (RenderSettings.FarClip - z) * RenderSettings.FogMul;

	fld	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+32
	fsub	DWORD PTR _z$[ebp]
	fmul	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+56
	fstp	DWORD PTR _fog$[ebp]

; 625  : 		if (fog > 255) fog = 255;

	fld	DWORD PTR _fog$[ebp]
	fcomp	DWORD PTR __real@437f0000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $L81748
	mov	DWORD PTR _fog$[ebp], 1132396544	; 437f0000H
$L81748:

; 626  : 		fog -= ModelVertFog;

	fld	DWORD PTR _fog$[ebp]
	fsub	DWORD PTR ?ModelVertFog@@3MA		; ModelVertFog
	fstp	DWORD PTR _fog$[ebp]

; 627  : 		if (fog < 0) fog = 0;

	fld	DWORD PTR _fog$[ebp]
	fcomp	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L81749
	mov	DWORD PTR _fog$[ebp], 0
$L81749:

; 628  : 		mv->specular = FTOL3(fog) << 24;

	fld	DWORD PTR _fog$[ebp]
	fadd	DWORD PTR __real@4b000000
	fstp	DWORD PTR _fog$[ebp]
	mov	eax, DWORD PTR _fog$[ebp]
	shl	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _mv$[ebp]
	mov	DWORD PTR [ecx+56], eax

; 629  : 
; 630  : 		mv->Clip = 0;

	mov	eax, DWORD PTR _mv$[ebp]
	mov	BYTE PTR [eax+84], 0

; 631  : 		if (mv->sx < ScreenLeftClipGuard) mv->Clip |= 1;

	mov	eax, DWORD PTR _mv$[ebp]
	fld	DWORD PTR [eax+36]
	fcomp	DWORD PTR ?ScreenLeftClipGuard@@3MA	; ScreenLeftClipGuard
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L81752
	mov	eax, DWORD PTR _mv$[ebp]
	movzx	ecx, BYTE PTR [eax+84]
	or	ecx, 1
	mov	edx, DWORD PTR _mv$[ebp]
	mov	BYTE PTR [edx+84], cl

; 632  : 		else if (mv->sx > ScreenRightClipGuard) mv->Clip |= 2;

	jmp	SHORT $L81753
$L81752:
	mov	eax, DWORD PTR _mv$[ebp]
	fld	DWORD PTR [eax+36]
	fcomp	DWORD PTR ?ScreenRightClipGuard@@3MA	; ScreenRightClipGuard
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $L81753
	mov	eax, DWORD PTR _mv$[ebp]
	movzx	ecx, BYTE PTR [eax+84]
	or	ecx, 2
	mov	edx, DWORD PTR _mv$[ebp]
	mov	BYTE PTR [edx+84], cl
$L81753:

; 633  : 		if (mv->sy < ScreenTopClipGuard) mv->Clip |= 4;

	mov	eax, DWORD PTR _mv$[ebp]
	fld	DWORD PTR [eax+40]
	fcomp	DWORD PTR ?ScreenTopClipGuard@@3MA	; ScreenTopClipGuard
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L81755
	mov	eax, DWORD PTR _mv$[ebp]
	movzx	ecx, BYTE PTR [eax+84]
	or	ecx, 4
	mov	edx, DWORD PTR _mv$[ebp]
	mov	BYTE PTR [edx+84], cl

; 634  : 		else if (mv->sy > ScreenBottomClipGuard) mv->Clip |= 8;

	jmp	SHORT $L81756
$L81755:
	mov	eax, DWORD PTR _mv$[ebp]
	fld	DWORD PTR [eax+40]
	fcomp	DWORD PTR ?ScreenBottomClipGuard@@3MA	; ScreenBottomClipGuard
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $L81756
	mov	eax, DWORD PTR _mv$[ebp]
	movzx	ecx, BYTE PTR [eax+84]
	or	ecx, 8
	mov	edx, DWORD PTR _mv$[ebp]
	mov	BYTE PTR [edx+84], cl
$L81756:

; 635  : 		if (mv->sz < 0) mv->Clip |= 16;

	mov	eax, DWORD PTR _mv$[ebp]
	fld	DWORD PTR [eax+44]
	fcomp	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L81758
	mov	eax, DWORD PTR _mv$[ebp]
	movzx	ecx, BYTE PTR [eax+84]
	or	ecx, 16					; 00000010H
	mov	edx, DWORD PTR _mv$[ebp]
	mov	BYTE PTR [edx+84], cl

; 636  : 		else if (mv->sz >= 1) mv->Clip |= 32;

	jmp	SHORT $L81759
$L81758:
	mov	eax, DWORD PTR _mv$[ebp]
	fld	DWORD PTR [eax+44]
	fcomp	DWORD PTR __real@3f800000
	fnstsw	ax
	test	ah, 1
	jne	SHORT $L81759
	mov	eax, DWORD PTR _mv$[ebp]
	movzx	ecx, BYTE PTR [eax+84]
	or	ecx, 32					; 00000020H
	mov	edx, DWORD PTR _mv$[ebp]
	mov	BYTE PTR [edx+84], cl
$L81759:

; 637  : 	}

	jmp	$L81745
$L81739:

; 638  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?TransModelVertsFogClip@@YAXPAUMODEL@@PATMatrixUnion@@PAUVectorStruct@@@Z ENDP ; TransModelVertsFogClip
; Function compile flags: /Odt /ZI
_TEXT	ENDS
;	COMDAT ?TransModelVertsPlain@@YAXPAUMODEL@@PATMatrixUnion@@PAUVectorStruct@@@Z
_TEXT	SEGMENT
_mv$ = -12						; size = 4
_z$ = -8						; size = 4
_i$ = -4						; size = 2
_m$ = 8							; size = 4
_mat$ = 12						; size = 4
_trans$ = 16						; size = 4
?TransModelVertsPlain@@YAXPAUMODEL@@PATMatrixUnion@@PAUVectorStruct@@@Z PROC NEAR ; TransModelVertsPlain, COMDAT

; 645  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi

; 646  : 	short i;
; 647  : 	float z;
; 648  : 	MODEL_VERTEX *mv;
; 649  : 
; 650  : 	mv = m->VertPtr;

	mov	eax, DWORD PTR _m$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	mov	DWORD PTR _mv$[ebp], ecx

; 651  : 
; 652  : 	for (i = 0 ; i < m->VertNum ; i++, mv++)

	mov	WORD PTR _i$[ebp], 0
	jmp	SHORT $L81769
$L81770:
	mov	ax, WORD PTR _i$[ebp]
	add	ax, 1
	mov	WORD PTR _i$[ebp], ax
	mov	ecx, DWORD PTR _mv$[ebp]
	add	ecx, 88					; 00000058H
	mov	DWORD PTR _mv$[ebp], ecx
$L81769:
	movsx	eax, WORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _m$[ebp]
	movsx	edx, WORD PTR [ecx+34]
	cmp	eax, edx
	jge	$L81765

; 653  : 	{
; 654  : 		z = mv->x * mat->m[RZ] + mv->y * mat->m[UZ] + mv->z * mat->m[LZ] + trans->v[Z];

	mov	eax, DWORD PTR _mv$[ebp]
	mov	ecx, DWORD PTR _mat$[ebp]
	fld	DWORD PTR [eax]
	fmul	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _mv$[ebp]
	mov	eax, DWORD PTR _mat$[ebp]
	fld	DWORD PTR [edx+4]
	fmul	DWORD PTR [eax+20]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR _mv$[ebp]
	mov	edx, DWORD PTR _mat$[ebp]
	fld	DWORD PTR [ecx+8]
	fmul	DWORD PTR [edx+32]
	faddp	ST(1), ST(0)
	mov	eax, DWORD PTR _trans$[ebp]
	fadd	DWORD PTR [eax+8]
	fstp	DWORD PTR _z$[ebp]

; 655  : 		mv->rhw = 1 / z;

	fld	DWORD PTR __real@3f800000
	fdiv	DWORD PTR _z$[ebp]
	mov	eax, DWORD PTR _mv$[ebp]
	fstp	DWORD PTR [eax+48]

; 656  : 
; 657  : 		mv->sx = (mv->x * mat->m[RX] + mv->y * mat->m[UX] + mv->z * mat->m[LX] + trans->v[X]) / z + RenderSettings.GeomCentreX;

	mov	eax, DWORD PTR _mv$[ebp]
	mov	ecx, DWORD PTR _mat$[ebp]
	fld	DWORD PTR [eax]
	fmul	DWORD PTR [ecx]
	mov	edx, DWORD PTR _mv$[ebp]
	mov	eax, DWORD PTR _mat$[ebp]
	fld	DWORD PTR [edx+4]
	fmul	DWORD PTR [eax+12]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR _mv$[ebp]
	mov	edx, DWORD PTR _mat$[ebp]
	fld	DWORD PTR [ecx+8]
	fmul	DWORD PTR [edx+24]
	faddp	ST(1), ST(0)
	mov	eax, DWORD PTR _trans$[ebp]
	fadd	DWORD PTR [eax]
	fdiv	DWORD PTR _z$[ebp]
	fadd	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+4
	mov	ecx, DWORD PTR _mv$[ebp]
	fstp	DWORD PTR [ecx+36]

; 658  : 		mv->sy = (mv->x * mat->m[RY] + mv->y * mat->m[UY] + mv->z * mat->m[LY] + trans->v[Y]) / z + RenderSettings.GeomCentreY;

	mov	eax, DWORD PTR _mv$[ebp]
	mov	ecx, DWORD PTR _mat$[ebp]
	fld	DWORD PTR [eax]
	fmul	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _mv$[ebp]
	mov	eax, DWORD PTR _mat$[ebp]
	fld	DWORD PTR [edx+4]
	fmul	DWORD PTR [eax+16]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR _mv$[ebp]
	mov	edx, DWORD PTR _mat$[ebp]
	fld	DWORD PTR [ecx+8]
	fmul	DWORD PTR [edx+28]
	faddp	ST(1), ST(0)
	mov	eax, DWORD PTR _trans$[ebp]
	fadd	DWORD PTR [eax+4]
	fdiv	DWORD PTR _z$[ebp]
	fadd	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+8
	mov	ecx, DWORD PTR _mv$[ebp]
	fstp	DWORD PTR [ecx+40]

; 659  : 
; 660  : 		mv->sz = GET_ZBUFFER(z);

	fld	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+36
	fmul	DWORD PTR _z$[ebp]
	fdivr	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+44
	fsubr	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+40
	mov	eax, DWORD PTR _mv$[ebp]
	fstp	DWORD PTR [eax+44]

; 661  : 	} 

	jmp	$L81770
$L81765:

; 662  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?TransModelVertsPlain@@YAXPAUMODEL@@PATMatrixUnion@@PAUVectorStruct@@@Z ENDP ; TransModelVertsPlain
; Function compile flags: /Odt /ZI
_TEXT	ENDS
;	COMDAT ?TransModelVertsFog@@YAXPAUMODEL@@PATMatrixUnion@@PAUVectorStruct@@@Z
_TEXT	SEGMENT
_mv$ = -16						; size = 4
_fog$ = -12						; size = 4
_z$ = -8						; size = 4
_i$ = -4						; size = 2
_m$ = 8							; size = 4
_mat$ = 12						; size = 4
_trans$ = 16						; size = 4
?TransModelVertsFog@@YAXPAUMODEL@@PATMatrixUnion@@PAUVectorStruct@@@Z PROC NEAR ; TransModelVertsFog, COMDAT

; 669  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi

; 670  : 	short i;
; 671  : 	float z;
; 672  : 	float fog;
; 673  : 	MODEL_VERTEX *mv;
; 674  : 
; 675  : 	mv = m->VertPtr;

	mov	eax, DWORD PTR _m$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	mov	DWORD PTR _mv$[ebp], ecx

; 676  : 
; 677  : 	for (i = 0 ; i < m->VertNum ; i++, mv++)

	mov	WORD PTR _i$[ebp], 0
	jmp	SHORT $L81781
$L81782:
	mov	ax, WORD PTR _i$[ebp]
	add	ax, 1
	mov	WORD PTR _i$[ebp], ax
	mov	ecx, DWORD PTR _mv$[ebp]
	add	ecx, 88					; 00000058H
	mov	DWORD PTR _mv$[ebp], ecx
$L81781:
	movsx	eax, WORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _m$[ebp]
	movsx	edx, WORD PTR [ecx+34]
	cmp	eax, edx
	jge	$L81776

; 678  : 	{
; 679  : 		z = mv->x * mat->m[RZ] + mv->y * mat->m[UZ] + mv->z * mat->m[LZ] + trans->v[Z];

	mov	eax, DWORD PTR _mv$[ebp]
	mov	ecx, DWORD PTR _mat$[ebp]
	fld	DWORD PTR [eax]
	fmul	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _mv$[ebp]
	mov	eax, DWORD PTR _mat$[ebp]
	fld	DWORD PTR [edx+4]
	fmul	DWORD PTR [eax+20]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR _mv$[ebp]
	mov	edx, DWORD PTR _mat$[ebp]
	fld	DWORD PTR [ecx+8]
	fmul	DWORD PTR [edx+32]
	faddp	ST(1), ST(0)
	mov	eax, DWORD PTR _trans$[ebp]
	fadd	DWORD PTR [eax+8]
	fstp	DWORD PTR _z$[ebp]

; 680  : 		mv->rhw = 1 / z;

	fld	DWORD PTR __real@3f800000
	fdiv	DWORD PTR _z$[ebp]
	mov	eax, DWORD PTR _mv$[ebp]
	fstp	DWORD PTR [eax+48]

; 681  : 
; 682  : 		mv->sx = (mv->x * mat->m[RX] + mv->y * mat->m[UX] + mv->z * mat->m[LX] + trans->v[X]) / z + RenderSettings.GeomCentreX;

	mov	eax, DWORD PTR _mv$[ebp]
	mov	ecx, DWORD PTR _mat$[ebp]
	fld	DWORD PTR [eax]
	fmul	DWORD PTR [ecx]
	mov	edx, DWORD PTR _mv$[ebp]
	mov	eax, DWORD PTR _mat$[ebp]
	fld	DWORD PTR [edx+4]
	fmul	DWORD PTR [eax+12]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR _mv$[ebp]
	mov	edx, DWORD PTR _mat$[ebp]
	fld	DWORD PTR [ecx+8]
	fmul	DWORD PTR [edx+24]
	faddp	ST(1), ST(0)
	mov	eax, DWORD PTR _trans$[ebp]
	fadd	DWORD PTR [eax]
	fdiv	DWORD PTR _z$[ebp]
	fadd	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+4
	mov	ecx, DWORD PTR _mv$[ebp]
	fstp	DWORD PTR [ecx+36]

; 683  : 		mv->sy = (mv->x * mat->m[RY] + mv->y * mat->m[UY] + mv->z * mat->m[LY] + trans->v[Y]) / z + RenderSettings.GeomCentreY;

	mov	eax, DWORD PTR _mv$[ebp]
	mov	ecx, DWORD PTR _mat$[ebp]
	fld	DWORD PTR [eax]
	fmul	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _mv$[ebp]
	mov	eax, DWORD PTR _mat$[ebp]
	fld	DWORD PTR [edx+4]
	fmul	DWORD PTR [eax+16]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR _mv$[ebp]
	mov	edx, DWORD PTR _mat$[ebp]
	fld	DWORD PTR [ecx+8]
	fmul	DWORD PTR [edx+28]
	faddp	ST(1), ST(0)
	mov	eax, DWORD PTR _trans$[ebp]
	fadd	DWORD PTR [eax+4]
	fdiv	DWORD PTR _z$[ebp]
	fadd	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+8
	mov	ecx, DWORD PTR _mv$[ebp]
	fstp	DWORD PTR [ecx+40]

; 684  : 
; 685  : 		mv->sz = GET_ZBUFFER(z);

	fld	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+36
	fmul	DWORD PTR _z$[ebp]
	fdivr	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+44
	fsubr	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+40
	mov	eax, DWORD PTR _mv$[ebp]
	fstp	DWORD PTR [eax+44]

; 686  : 
; 687  : 		fog = (RenderSettings.FarClip - z) * RenderSettings.FogMul;

	fld	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+32
	fsub	DWORD PTR _z$[ebp]
	fmul	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+56
	fstp	DWORD PTR _fog$[ebp]

; 688  : 		if (fog > 255) fog = 255;

	fld	DWORD PTR _fog$[ebp]
	fcomp	DWORD PTR __real@437f0000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $L81784
	mov	DWORD PTR _fog$[ebp], 1132396544	; 437f0000H
$L81784:

; 689  : 		fog -= ModelVertFog;

	fld	DWORD PTR _fog$[ebp]
	fsub	DWORD PTR ?ModelVertFog@@3MA		; ModelVertFog
	fstp	DWORD PTR _fog$[ebp]

; 690  : 		if (fog < 0) fog = 0;

	fld	DWORD PTR _fog$[ebp]
	fcomp	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L81785
	mov	DWORD PTR _fog$[ebp], 0
$L81785:

; 691  : 		mv->specular = FTOL3(fog) << 24;

	fld	DWORD PTR _fog$[ebp]
	fadd	DWORD PTR __real@4b000000
	fstp	DWORD PTR _fog$[ebp]
	mov	eax, DWORD PTR _fog$[ebp]
	shl	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _mv$[ebp]
	mov	DWORD PTR [ecx+56], eax

; 692  : 	}

	jmp	$L81782
$L81776:

; 693  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?TransModelVertsFog@@YAXPAUMODEL@@PATMatrixUnion@@PAUVectorStruct@@@Z ENDP ; TransModelVertsFog
; Function compile flags: /Odt /ZI
_TEXT	ENDS
;	COMDAT ?TransModelVertsPlainClipNewVerts@@YAXPAUMODEL@@PATMatrixUnion@@PAUVectorStruct@@@Z
_TEXT	SEGMENT
_mv$ = -12						; size = 4
_z$ = -8						; size = 4
_i$ = -4						; size = 2
_m$ = 8							; size = 4
_mat$ = 12						; size = 4
_trans$ = 16						; size = 4
?TransModelVertsPlainClipNewVerts@@YAXPAUMODEL@@PATMatrixUnion@@PAUVectorStruct@@@Z PROC NEAR ; TransModelVertsPlainClipNewVerts, COMDAT

; 700  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi

; 701  : 	short i;
; 702  : 	float z;
; 703  : 	MODEL_VERTEX *mv;
; 704  : 
; 705  : 	mv = m->VertPtr;

	mov	eax, DWORD PTR _m$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	mov	DWORD PTR _mv$[ebp], ecx

; 706  : 
; 707  : 	for (i = 0 ; i < m->VertNum ; i++, mv++)

	mov	WORD PTR _i$[ebp], 0
	jmp	SHORT $L81796
$L81797:
	mov	ax, WORD PTR _i$[ebp]
	add	ax, 1
	mov	WORD PTR _i$[ebp], ax
	mov	ecx, DWORD PTR _mv$[ebp]
	add	ecx, 88					; 00000058H
	mov	DWORD PTR _mv$[ebp], ecx
$L81796:
	movsx	eax, WORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _m$[ebp]
	movsx	edx, WORD PTR [ecx+34]
	cmp	eax, edx
	jge	$L81792

; 708  : 	{
; 709  : 		z = mv->x2 * mat->m[RZ] + mv->y2 * mat->m[UZ] + mv->z2 * mat->m[LZ] + trans->v[Z];

	mov	eax, DWORD PTR _mv$[ebp]
	mov	ecx, DWORD PTR _mat$[ebp]
	fld	DWORD PTR [eax+12]
	fmul	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _mv$[ebp]
	mov	eax, DWORD PTR _mat$[ebp]
	fld	DWORD PTR [edx+16]
	fmul	DWORD PTR [eax+20]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR _mv$[ebp]
	mov	edx, DWORD PTR _mat$[ebp]
	fld	DWORD PTR [ecx+20]
	fmul	DWORD PTR [edx+32]
	faddp	ST(1), ST(0)
	mov	eax, DWORD PTR _trans$[ebp]
	fadd	DWORD PTR [eax+8]
	fstp	DWORD PTR _z$[ebp]

; 710  : 		if (z < 1) z = 1;

	fld	DWORD PTR _z$[ebp]
	fcomp	DWORD PTR __real@3f800000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L81799
	mov	DWORD PTR _z$[ebp], 1065353216		; 3f800000H
$L81799:

; 711  : 
; 712  : 		mv->sx = (mv->x2 * mat->m[RX] + mv->y2 * mat->m[UX] + mv->z2 * mat->m[LX] + trans->v[X]) / z + RenderSettings.GeomCentreX;

	mov	eax, DWORD PTR _mv$[ebp]
	mov	ecx, DWORD PTR _mat$[ebp]
	fld	DWORD PTR [eax+12]
	fmul	DWORD PTR [ecx]
	mov	edx, DWORD PTR _mv$[ebp]
	mov	eax, DWORD PTR _mat$[ebp]
	fld	DWORD PTR [edx+16]
	fmul	DWORD PTR [eax+12]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR _mv$[ebp]
	mov	edx, DWORD PTR _mat$[ebp]
	fld	DWORD PTR [ecx+20]
	fmul	DWORD PTR [edx+24]
	faddp	ST(1), ST(0)
	mov	eax, DWORD PTR _trans$[ebp]
	fadd	DWORD PTR [eax]
	fdiv	DWORD PTR _z$[ebp]
	fadd	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+4
	mov	ecx, DWORD PTR _mv$[ebp]
	fstp	DWORD PTR [ecx+36]

; 713  : 		mv->sy = (mv->x2 * mat->m[RY] + mv->y2 * mat->m[UY] + mv->z2 * mat->m[LY] + trans->v[Y]) / z + RenderSettings.GeomCentreY;

	mov	eax, DWORD PTR _mv$[ebp]
	mov	ecx, DWORD PTR _mat$[ebp]
	fld	DWORD PTR [eax+12]
	fmul	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _mv$[ebp]
	mov	eax, DWORD PTR _mat$[ebp]
	fld	DWORD PTR [edx+16]
	fmul	DWORD PTR [eax+16]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR _mv$[ebp]
	mov	edx, DWORD PTR _mat$[ebp]
	fld	DWORD PTR [ecx+20]
	fmul	DWORD PTR [edx+28]
	faddp	ST(1), ST(0)
	mov	eax, DWORD PTR _trans$[ebp]
	fadd	DWORD PTR [eax+4]
	fdiv	DWORD PTR _z$[ebp]
	fadd	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+8
	mov	ecx, DWORD PTR _mv$[ebp]
	fstp	DWORD PTR [ecx+40]

; 714  : 
; 715  : 		mv->rhw = 1 / z;

	fld	DWORD PTR __real@3f800000
	fdiv	DWORD PTR _z$[ebp]
	mov	eax, DWORD PTR _mv$[ebp]
	fstp	DWORD PTR [eax+48]

; 716  : 		mv->sz = GET_ZBUFFER(z);

	fld	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+36
	fmul	DWORD PTR _z$[ebp]
	fdivr	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+44
	fsubr	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+40
	mov	eax, DWORD PTR _mv$[ebp]
	fstp	DWORD PTR [eax+44]

; 717  : 
; 718  : 		mv->Clip = 0;

	mov	eax, DWORD PTR _mv$[ebp]
	mov	BYTE PTR [eax+84], 0

; 719  : 		if (mv->sx < ScreenLeftClipGuard) mv->Clip |= 1;

	mov	eax, DWORD PTR _mv$[ebp]
	fld	DWORD PTR [eax+36]
	fcomp	DWORD PTR ?ScreenLeftClipGuard@@3MA	; ScreenLeftClipGuard
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L81800
	mov	eax, DWORD PTR _mv$[ebp]
	movzx	ecx, BYTE PTR [eax+84]
	or	ecx, 1
	mov	edx, DWORD PTR _mv$[ebp]
	mov	BYTE PTR [edx+84], cl

; 720  : 		else if (mv->sx > ScreenRightClipGuard) mv->Clip |= 2;

	jmp	SHORT $L81801
$L81800:
	mov	eax, DWORD PTR _mv$[ebp]
	fld	DWORD PTR [eax+36]
	fcomp	DWORD PTR ?ScreenRightClipGuard@@3MA	; ScreenRightClipGuard
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $L81801
	mov	eax, DWORD PTR _mv$[ebp]
	movzx	ecx, BYTE PTR [eax+84]
	or	ecx, 2
	mov	edx, DWORD PTR _mv$[ebp]
	mov	BYTE PTR [edx+84], cl
$L81801:

; 721  : 		if (mv->sy < ScreenTopClipGuard) mv->Clip |= 4;

	mov	eax, DWORD PTR _mv$[ebp]
	fld	DWORD PTR [eax+40]
	fcomp	DWORD PTR ?ScreenTopClipGuard@@3MA	; ScreenTopClipGuard
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L81803
	mov	eax, DWORD PTR _mv$[ebp]
	movzx	ecx, BYTE PTR [eax+84]
	or	ecx, 4
	mov	edx, DWORD PTR _mv$[ebp]
	mov	BYTE PTR [edx+84], cl

; 722  : 		else if (mv->sy > ScreenBottomClipGuard) mv->Clip |= 8;

	jmp	SHORT $L81804
$L81803:
	mov	eax, DWORD PTR _mv$[ebp]
	fld	DWORD PTR [eax+40]
	fcomp	DWORD PTR ?ScreenBottomClipGuard@@3MA	; ScreenBottomClipGuard
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $L81804
	mov	eax, DWORD PTR _mv$[ebp]
	movzx	ecx, BYTE PTR [eax+84]
	or	ecx, 8
	mov	edx, DWORD PTR _mv$[ebp]
	mov	BYTE PTR [edx+84], cl
$L81804:

; 723  : 		if (mv->sz < 0) mv->Clip |= 16;

	mov	eax, DWORD PTR _mv$[ebp]
	fld	DWORD PTR [eax+44]
	fcomp	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L81806
	mov	eax, DWORD PTR _mv$[ebp]
	movzx	ecx, BYTE PTR [eax+84]
	or	ecx, 16					; 00000010H
	mov	edx, DWORD PTR _mv$[ebp]
	mov	BYTE PTR [edx+84], cl

; 724  : 		else if (mv->sz >= 1) mv->Clip |= 32;

	jmp	SHORT $L81807
$L81806:
	mov	eax, DWORD PTR _mv$[ebp]
	fld	DWORD PTR [eax+44]
	fcomp	DWORD PTR __real@3f800000
	fnstsw	ax
	test	ah, 1
	jne	SHORT $L81807
	mov	eax, DWORD PTR _mv$[ebp]
	movzx	ecx, BYTE PTR [eax+84]
	or	ecx, 32					; 00000020H
	mov	edx, DWORD PTR _mv$[ebp]
	mov	BYTE PTR [edx+84], cl
$L81807:

; 725  : 	} 

	jmp	$L81797
$L81792:

; 726  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?TransModelVertsPlainClipNewVerts@@YAXPAUMODEL@@PATMatrixUnion@@PAUVectorStruct@@@Z ENDP ; TransModelVertsPlainClipNewVerts
; Function compile flags: /Odt /ZI
_TEXT	ENDS
;	COMDAT ?TransModelVertsFogClipNewVerts@@YAXPAUMODEL@@PATMatrixUnion@@PAUVectorStruct@@@Z
_TEXT	SEGMENT
_mv$ = -16						; size = 4
_fog$ = -12						; size = 4
_z$ = -8						; size = 4
_i$ = -4						; size = 2
_m$ = 8							; size = 4
_mat$ = 12						; size = 4
_trans$ = 16						; size = 4
?TransModelVertsFogClipNewVerts@@YAXPAUMODEL@@PATMatrixUnion@@PAUVectorStruct@@@Z PROC NEAR ; TransModelVertsFogClipNewVerts, COMDAT

; 733  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi

; 734  : 	short i;
; 735  : 	float z;
; 736  : 	float fog;
; 737  : 	MODEL_VERTEX *mv;
; 738  : 
; 739  : 	mv = m->VertPtr;

	mov	eax, DWORD PTR _m$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	mov	DWORD PTR _mv$[ebp], ecx

; 740  : 
; 741  : 	for (i = 0 ; i < m->VertNum ; i++, mv++)

	mov	WORD PTR _i$[ebp], 0
	jmp	SHORT $L81818
$L81819:
	mov	ax, WORD PTR _i$[ebp]
	add	ax, 1
	mov	WORD PTR _i$[ebp], ax
	mov	ecx, DWORD PTR _mv$[ebp]
	add	ecx, 88					; 00000058H
	mov	DWORD PTR _mv$[ebp], ecx
$L81818:
	movsx	eax, WORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _m$[ebp]
	movsx	edx, WORD PTR [ecx+34]
	cmp	eax, edx
	jge	$L81813

; 742  : 	{
; 743  : 		z = mv->x2 * mat->m[RZ] + mv->y2 * mat->m[UZ] + mv->z2 * mat->m[LZ] + trans->v[Z];

	mov	eax, DWORD PTR _mv$[ebp]
	mov	ecx, DWORD PTR _mat$[ebp]
	fld	DWORD PTR [eax+12]
	fmul	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _mv$[ebp]
	mov	eax, DWORD PTR _mat$[ebp]
	fld	DWORD PTR [edx+16]
	fmul	DWORD PTR [eax+20]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR _mv$[ebp]
	mov	edx, DWORD PTR _mat$[ebp]
	fld	DWORD PTR [ecx+20]
	fmul	DWORD PTR [edx+32]
	faddp	ST(1), ST(0)
	mov	eax, DWORD PTR _trans$[ebp]
	fadd	DWORD PTR [eax+8]
	fstp	DWORD PTR _z$[ebp]

; 744  : 		if (z < 1) z = 1;

	fld	DWORD PTR _z$[ebp]
	fcomp	DWORD PTR __real@3f800000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L81821
	mov	DWORD PTR _z$[ebp], 1065353216		; 3f800000H
$L81821:

; 745  : 
; 746  : 		mv->sx = (mv->x2 * mat->m[RX] + mv->y2 * mat->m[UX] + mv->z2 * mat->m[LX] + trans->v[X]) / z + RenderSettings.GeomCentreX;

	mov	eax, DWORD PTR _mv$[ebp]
	mov	ecx, DWORD PTR _mat$[ebp]
	fld	DWORD PTR [eax+12]
	fmul	DWORD PTR [ecx]
	mov	edx, DWORD PTR _mv$[ebp]
	mov	eax, DWORD PTR _mat$[ebp]
	fld	DWORD PTR [edx+16]
	fmul	DWORD PTR [eax+12]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR _mv$[ebp]
	mov	edx, DWORD PTR _mat$[ebp]
	fld	DWORD PTR [ecx+20]
	fmul	DWORD PTR [edx+24]
	faddp	ST(1), ST(0)
	mov	eax, DWORD PTR _trans$[ebp]
	fadd	DWORD PTR [eax]
	fdiv	DWORD PTR _z$[ebp]
	fadd	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+4
	mov	ecx, DWORD PTR _mv$[ebp]
	fstp	DWORD PTR [ecx+36]

; 747  : 		mv->sy = (mv->x2 * mat->m[RY] + mv->y2 * mat->m[UY] + mv->z2 * mat->m[LY] + trans->v[Y]) / z + RenderSettings.GeomCentreY;

	mov	eax, DWORD PTR _mv$[ebp]
	mov	ecx, DWORD PTR _mat$[ebp]
	fld	DWORD PTR [eax+12]
	fmul	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _mv$[ebp]
	mov	eax, DWORD PTR _mat$[ebp]
	fld	DWORD PTR [edx+16]
	fmul	DWORD PTR [eax+16]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR _mv$[ebp]
	mov	edx, DWORD PTR _mat$[ebp]
	fld	DWORD PTR [ecx+20]
	fmul	DWORD PTR [edx+28]
	faddp	ST(1), ST(0)
	mov	eax, DWORD PTR _trans$[ebp]
	fadd	DWORD PTR [eax+4]
	fdiv	DWORD PTR _z$[ebp]
	fadd	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+8
	mov	ecx, DWORD PTR _mv$[ebp]
	fstp	DWORD PTR [ecx+40]

; 748  : 
; 749  : 		mv->rhw = 1 / z;

	fld	DWORD PTR __real@3f800000
	fdiv	DWORD PTR _z$[ebp]
	mov	eax, DWORD PTR _mv$[ebp]
	fstp	DWORD PTR [eax+48]

; 750  : 		mv->sz = GET_ZBUFFER(z);

	fld	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+36
	fmul	DWORD PTR _z$[ebp]
	fdivr	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+44
	fsubr	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+40
	mov	eax, DWORD PTR _mv$[ebp]
	fstp	DWORD PTR [eax+44]

; 751  : 
; 752  : 		fog = (RenderSettings.FarClip - z) * RenderSettings.FogMul;

	fld	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+32
	fsub	DWORD PTR _z$[ebp]
	fmul	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+56
	fstp	DWORD PTR _fog$[ebp]

; 753  : 		if (fog > 255) fog = 255;

	fld	DWORD PTR _fog$[ebp]
	fcomp	DWORD PTR __real@437f0000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $L81822
	mov	DWORD PTR _fog$[ebp], 1132396544	; 437f0000H
$L81822:

; 754  : 		fog -= ModelVertFog;

	fld	DWORD PTR _fog$[ebp]
	fsub	DWORD PTR ?ModelVertFog@@3MA		; ModelVertFog
	fstp	DWORD PTR _fog$[ebp]

; 755  : 		if (fog < 0) fog = 0;

	fld	DWORD PTR _fog$[ebp]
	fcomp	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L81823
	mov	DWORD PTR _fog$[ebp], 0
$L81823:

; 756  : 		mv->specular = FTOL3(fog) << 24;

	fld	DWORD PTR _fog$[ebp]
	fadd	DWORD PTR __real@4b000000
	fstp	DWORD PTR _fog$[ebp]
	mov	eax, DWORD PTR _fog$[ebp]
	shl	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _mv$[ebp]
	mov	DWORD PTR [ecx+56], eax

; 757  : 
; 758  : 		mv->Clip = 0;

	mov	eax, DWORD PTR _mv$[ebp]
	mov	BYTE PTR [eax+84], 0

; 759  : 		if (mv->sx < ScreenLeftClipGuard) mv->Clip |= 1;

	mov	eax, DWORD PTR _mv$[ebp]
	fld	DWORD PTR [eax+36]
	fcomp	DWORD PTR ?ScreenLeftClipGuard@@3MA	; ScreenLeftClipGuard
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L81826
	mov	eax, DWORD PTR _mv$[ebp]
	movzx	ecx, BYTE PTR [eax+84]
	or	ecx, 1
	mov	edx, DWORD PTR _mv$[ebp]
	mov	BYTE PTR [edx+84], cl

; 760  : 		else if (mv->sx > ScreenRightClipGuard) mv->Clip |= 2;

	jmp	SHORT $L81827
$L81826:
	mov	eax, DWORD PTR _mv$[ebp]
	fld	DWORD PTR [eax+36]
	fcomp	DWORD PTR ?ScreenRightClipGuard@@3MA	; ScreenRightClipGuard
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $L81827
	mov	eax, DWORD PTR _mv$[ebp]
	movzx	ecx, BYTE PTR [eax+84]
	or	ecx, 2
	mov	edx, DWORD PTR _mv$[ebp]
	mov	BYTE PTR [edx+84], cl
$L81827:

; 761  : 		if (mv->sy < ScreenTopClipGuard) mv->Clip |= 4;

	mov	eax, DWORD PTR _mv$[ebp]
	fld	DWORD PTR [eax+40]
	fcomp	DWORD PTR ?ScreenTopClipGuard@@3MA	; ScreenTopClipGuard
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L81829
	mov	eax, DWORD PTR _mv$[ebp]
	movzx	ecx, BYTE PTR [eax+84]
	or	ecx, 4
	mov	edx, DWORD PTR _mv$[ebp]
	mov	BYTE PTR [edx+84], cl

; 762  : 		else if (mv->sy > ScreenBottomClipGuard) mv->Clip |= 8;

	jmp	SHORT $L81830
$L81829:
	mov	eax, DWORD PTR _mv$[ebp]
	fld	DWORD PTR [eax+40]
	fcomp	DWORD PTR ?ScreenBottomClipGuard@@3MA	; ScreenBottomClipGuard
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $L81830
	mov	eax, DWORD PTR _mv$[ebp]
	movzx	ecx, BYTE PTR [eax+84]
	or	ecx, 8
	mov	edx, DWORD PTR _mv$[ebp]
	mov	BYTE PTR [edx+84], cl
$L81830:

; 763  : 		if (mv->sz < 0) mv->Clip |= 16;

	mov	eax, DWORD PTR _mv$[ebp]
	fld	DWORD PTR [eax+44]
	fcomp	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L81832
	mov	eax, DWORD PTR _mv$[ebp]
	movzx	ecx, BYTE PTR [eax+84]
	or	ecx, 16					; 00000010H
	mov	edx, DWORD PTR _mv$[ebp]
	mov	BYTE PTR [edx+84], cl

; 764  : 		else if (mv->sz >= 1) mv->Clip |= 32;

	jmp	SHORT $L81833
$L81832:
	mov	eax, DWORD PTR _mv$[ebp]
	fld	DWORD PTR [eax+44]
	fcomp	DWORD PTR __real@3f800000
	fnstsw	ax
	test	ah, 1
	jne	SHORT $L81833
	mov	eax, DWORD PTR _mv$[ebp]
	movzx	ecx, BYTE PTR [eax+84]
	or	ecx, 32					; 00000020H
	mov	edx, DWORD PTR _mv$[ebp]
	mov	BYTE PTR [edx+84], cl
$L81833:

; 765  : 	}

	jmp	$L81819
$L81813:

; 766  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?TransModelVertsFogClipNewVerts@@YAXPAUMODEL@@PATMatrixUnion@@PAUVectorStruct@@@Z ENDP ; TransModelVertsFogClipNewVerts
; Function compile flags: /Odt /ZI
_TEXT	ENDS
;	COMDAT ?TransModelVertsPlainNewVerts@@YAXPAUMODEL@@PATMatrixUnion@@PAUVectorStruct@@@Z
_TEXT	SEGMENT
_mv$ = -12						; size = 4
_z$ = -8						; size = 4
_i$ = -4						; size = 2
_m$ = 8							; size = 4
_mat$ = 12						; size = 4
_trans$ = 16						; size = 4
?TransModelVertsPlainNewVerts@@YAXPAUMODEL@@PATMatrixUnion@@PAUVectorStruct@@@Z PROC NEAR ; TransModelVertsPlainNewVerts, COMDAT

; 773  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi

; 774  : 	short i;
; 775  : 	float z;
; 776  : 	MODEL_VERTEX *mv;
; 777  : 
; 778  : 	mv = m->VertPtr;

	mov	eax, DWORD PTR _m$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	mov	DWORD PTR _mv$[ebp], ecx

; 779  : 
; 780  : 	for (i = 0 ; i < m->VertNum ; i++, mv++)

	mov	WORD PTR _i$[ebp], 0
	jmp	SHORT $L81843
$L81844:
	mov	ax, WORD PTR _i$[ebp]
	add	ax, 1
	mov	WORD PTR _i$[ebp], ax
	mov	ecx, DWORD PTR _mv$[ebp]
	add	ecx, 88					; 00000058H
	mov	DWORD PTR _mv$[ebp], ecx
$L81843:
	movsx	eax, WORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _m$[ebp]
	movsx	edx, WORD PTR [ecx+34]
	cmp	eax, edx
	jge	$L81839

; 781  : 	{
; 782  : 		z = mv->x2 * mat->m[RZ] + mv->y2 * mat->m[UZ] + mv->z2 * mat->m[LZ] + trans->v[Z];

	mov	eax, DWORD PTR _mv$[ebp]
	mov	ecx, DWORD PTR _mat$[ebp]
	fld	DWORD PTR [eax+12]
	fmul	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _mv$[ebp]
	mov	eax, DWORD PTR _mat$[ebp]
	fld	DWORD PTR [edx+16]
	fmul	DWORD PTR [eax+20]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR _mv$[ebp]
	mov	edx, DWORD PTR _mat$[ebp]
	fld	DWORD PTR [ecx+20]
	fmul	DWORD PTR [edx+32]
	faddp	ST(1), ST(0)
	mov	eax, DWORD PTR _trans$[ebp]
	fadd	DWORD PTR [eax+8]
	fstp	DWORD PTR _z$[ebp]

; 783  : 		mv->rhw = 1 / z;

	fld	DWORD PTR __real@3f800000
	fdiv	DWORD PTR _z$[ebp]
	mov	eax, DWORD PTR _mv$[ebp]
	fstp	DWORD PTR [eax+48]

; 784  : 
; 785  : 		mv->sx = (mv->x2 * mat->m[RX] + mv->y2 * mat->m[UX] + mv->z2 * mat->m[LX] + trans->v[X]) / z + RenderSettings.GeomCentreX;

	mov	eax, DWORD PTR _mv$[ebp]
	mov	ecx, DWORD PTR _mat$[ebp]
	fld	DWORD PTR [eax+12]
	fmul	DWORD PTR [ecx]
	mov	edx, DWORD PTR _mv$[ebp]
	mov	eax, DWORD PTR _mat$[ebp]
	fld	DWORD PTR [edx+16]
	fmul	DWORD PTR [eax+12]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR _mv$[ebp]
	mov	edx, DWORD PTR _mat$[ebp]
	fld	DWORD PTR [ecx+20]
	fmul	DWORD PTR [edx+24]
	faddp	ST(1), ST(0)
	mov	eax, DWORD PTR _trans$[ebp]
	fadd	DWORD PTR [eax]
	fdiv	DWORD PTR _z$[ebp]
	fadd	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+4
	mov	ecx, DWORD PTR _mv$[ebp]
	fstp	DWORD PTR [ecx+36]

; 786  : 		mv->sy = (mv->x2 * mat->m[RY] + mv->y2 * mat->m[UY] + mv->z2 * mat->m[LY] + trans->v[Y]) / z + RenderSettings.GeomCentreY;

	mov	eax, DWORD PTR _mv$[ebp]
	mov	ecx, DWORD PTR _mat$[ebp]
	fld	DWORD PTR [eax+12]
	fmul	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _mv$[ebp]
	mov	eax, DWORD PTR _mat$[ebp]
	fld	DWORD PTR [edx+16]
	fmul	DWORD PTR [eax+16]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR _mv$[ebp]
	mov	edx, DWORD PTR _mat$[ebp]
	fld	DWORD PTR [ecx+20]
	fmul	DWORD PTR [edx+28]
	faddp	ST(1), ST(0)
	mov	eax, DWORD PTR _trans$[ebp]
	fadd	DWORD PTR [eax+4]
	fdiv	DWORD PTR _z$[ebp]
	fadd	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+8
	mov	ecx, DWORD PTR _mv$[ebp]
	fstp	DWORD PTR [ecx+40]

; 787  : 
; 788  : 		mv->sz = GET_ZBUFFER(z);

	fld	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+36
	fmul	DWORD PTR _z$[ebp]
	fdivr	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+44
	fsubr	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+40
	mov	eax, DWORD PTR _mv$[ebp]
	fstp	DWORD PTR [eax+44]

; 789  : 	} 

	jmp	$L81844
$L81839:

; 790  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?TransModelVertsPlainNewVerts@@YAXPAUMODEL@@PATMatrixUnion@@PAUVectorStruct@@@Z ENDP ; TransModelVertsPlainNewVerts
; Function compile flags: /Odt /ZI
_TEXT	ENDS
;	COMDAT ?TransModelVertsFogNewVerts@@YAXPAUMODEL@@PATMatrixUnion@@PAUVectorStruct@@@Z
_TEXT	SEGMENT
_mv$ = -16						; size = 4
_fog$ = -12						; size = 4
_z$ = -8						; size = 4
_i$ = -4						; size = 2
_m$ = 8							; size = 4
_mat$ = 12						; size = 4
_trans$ = 16						; size = 4
?TransModelVertsFogNewVerts@@YAXPAUMODEL@@PATMatrixUnion@@PAUVectorStruct@@@Z PROC NEAR ; TransModelVertsFogNewVerts, COMDAT

; 797  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi

; 798  : 	short i;
; 799  : 	float z;
; 800  : 	float fog;
; 801  : 	MODEL_VERTEX *mv;
; 802  : 
; 803  : 	mv = m->VertPtr;

	mov	eax, DWORD PTR _m$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	mov	DWORD PTR _mv$[ebp], ecx

; 804  : 
; 805  : 	for (i = 0 ; i < m->VertNum ; i++, mv++)

	mov	WORD PTR _i$[ebp], 0
	jmp	SHORT $L81855
$L81856:
	mov	ax, WORD PTR _i$[ebp]
	add	ax, 1
	mov	WORD PTR _i$[ebp], ax
	mov	ecx, DWORD PTR _mv$[ebp]
	add	ecx, 88					; 00000058H
	mov	DWORD PTR _mv$[ebp], ecx
$L81855:
	movsx	eax, WORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _m$[ebp]
	movsx	edx, WORD PTR [ecx+34]
	cmp	eax, edx
	jge	$L81850

; 806  : 	{
; 807  : 		z = mv->x2 * mat->m[RZ] + mv->y2 * mat->m[UZ] + mv->z2 * mat->m[LZ] + trans->v[Z];

	mov	eax, DWORD PTR _mv$[ebp]
	mov	ecx, DWORD PTR _mat$[ebp]
	fld	DWORD PTR [eax+12]
	fmul	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _mv$[ebp]
	mov	eax, DWORD PTR _mat$[ebp]
	fld	DWORD PTR [edx+16]
	fmul	DWORD PTR [eax+20]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR _mv$[ebp]
	mov	edx, DWORD PTR _mat$[ebp]
	fld	DWORD PTR [ecx+20]
	fmul	DWORD PTR [edx+32]
	faddp	ST(1), ST(0)
	mov	eax, DWORD PTR _trans$[ebp]
	fadd	DWORD PTR [eax+8]
	fstp	DWORD PTR _z$[ebp]

; 808  : 		mv->rhw = 1 / z;

	fld	DWORD PTR __real@3f800000
	fdiv	DWORD PTR _z$[ebp]
	mov	eax, DWORD PTR _mv$[ebp]
	fstp	DWORD PTR [eax+48]

; 809  : 
; 810  : 		mv->sx = (mv->x2 * mat->m[RX] + mv->y2 * mat->m[UX] + mv->z2 * mat->m[LX] + trans->v[X]) / z + RenderSettings.GeomCentreX;

	mov	eax, DWORD PTR _mv$[ebp]
	mov	ecx, DWORD PTR _mat$[ebp]
	fld	DWORD PTR [eax+12]
	fmul	DWORD PTR [ecx]
	mov	edx, DWORD PTR _mv$[ebp]
	mov	eax, DWORD PTR _mat$[ebp]
	fld	DWORD PTR [edx+16]
	fmul	DWORD PTR [eax+12]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR _mv$[ebp]
	mov	edx, DWORD PTR _mat$[ebp]
	fld	DWORD PTR [ecx+20]
	fmul	DWORD PTR [edx+24]
	faddp	ST(1), ST(0)
	mov	eax, DWORD PTR _trans$[ebp]
	fadd	DWORD PTR [eax]
	fdiv	DWORD PTR _z$[ebp]
	fadd	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+4
	mov	ecx, DWORD PTR _mv$[ebp]
	fstp	DWORD PTR [ecx+36]

; 811  : 		mv->sy = (mv->x2 * mat->m[RY] + mv->y2 * mat->m[UY] + mv->z2 * mat->m[LY] + trans->v[Y]) / z + RenderSettings.GeomCentreY;

	mov	eax, DWORD PTR _mv$[ebp]
	mov	ecx, DWORD PTR _mat$[ebp]
	fld	DWORD PTR [eax+12]
	fmul	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _mv$[ebp]
	mov	eax, DWORD PTR _mat$[ebp]
	fld	DWORD PTR [edx+16]
	fmul	DWORD PTR [eax+16]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR _mv$[ebp]
	mov	edx, DWORD PTR _mat$[ebp]
	fld	DWORD PTR [ecx+20]
	fmul	DWORD PTR [edx+28]
	faddp	ST(1), ST(0)
	mov	eax, DWORD PTR _trans$[ebp]
	fadd	DWORD PTR [eax+4]
	fdiv	DWORD PTR _z$[ebp]
	fadd	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+8
	mov	ecx, DWORD PTR _mv$[ebp]
	fstp	DWORD PTR [ecx+40]

; 812  : 
; 813  : 		mv->sz = GET_ZBUFFER(z);

	fld	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+36
	fmul	DWORD PTR _z$[ebp]
	fdivr	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+44
	fsubr	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+40
	mov	eax, DWORD PTR _mv$[ebp]
	fstp	DWORD PTR [eax+44]

; 814  : 
; 815  : 		fog = (RenderSettings.FarClip - z) * RenderSettings.FogMul;

	fld	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+32
	fsub	DWORD PTR _z$[ebp]
	fmul	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+56
	fstp	DWORD PTR _fog$[ebp]

; 816  : 		if (fog > 255) fog = 255;

	fld	DWORD PTR _fog$[ebp]
	fcomp	DWORD PTR __real@437f0000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $L81858
	mov	DWORD PTR _fog$[ebp], 1132396544	; 437f0000H
$L81858:

; 817  : 		fog -= ModelVertFog;

	fld	DWORD PTR _fog$[ebp]
	fsub	DWORD PTR ?ModelVertFog@@3MA		; ModelVertFog
	fstp	DWORD PTR _fog$[ebp]

; 818  : 		if (fog < 0) fog = 0;

	fld	DWORD PTR _fog$[ebp]
	fcomp	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L81859
	mov	DWORD PTR _fog$[ebp], 0
$L81859:

; 819  : 		mv->specular = FTOL3(fog) << 24;

	fld	DWORD PTR _fog$[ebp]
	fadd	DWORD PTR __real@4b000000
	fstp	DWORD PTR _fog$[ebp]
	mov	eax, DWORD PTR _fog$[ebp]
	shl	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _mv$[ebp]
	mov	DWORD PTR [ecx+56], eax

; 820  : 	}

	jmp	$L81856
$L81850:

; 821  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?TransModelVertsFogNewVerts@@YAXPAUMODEL@@PATMatrixUnion@@PAUVectorStruct@@@Z ENDP ; TransModelVertsFogNewVerts
_TEXT	ENDS
EXTRN	?MirrorMul@@3MA:DWORD				; MirrorMul
EXTRN	?MirrorAdd@@3MA:DWORD				; MirrorAdd
; Function compile flags: /Odt /ZI
;	COMDAT ?TransModelVertsMirror@@YAXPAUMODEL@@PATMatrixUnion@@PAUVectorStruct@@12@Z
_TEXT	SEGMENT
_mv$ = -20						; size = 4
_mirrorfog$ = -16					; size = 4
_fog$ = -12						; size = 4
_z$ = -8						; size = 4
_i$ = -4						; size = 2
_m$ = 8							; size = 4
_mat$ = 12						; size = 4
_trans$ = 16						; size = 4
_worldmat$ = 20						; size = 4
_worldpos$ = 24						; size = 4
?TransModelVertsMirror@@YAXPAUMODEL@@PATMatrixUnion@@PAUVectorStruct@@12@Z PROC NEAR ; TransModelVertsMirror, COMDAT

; 828  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi

; 829  : 	short i;
; 830  : 	float z;
; 831  : 	float fog, mirrorfog;
; 832  : 	MODEL_VERTEX *mv;
; 833  : 
; 834  : 	mv = m->VertPtr;

	mov	eax, DWORD PTR _m$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	mov	DWORD PTR _mv$[ebp], ecx

; 835  : 
; 836  : 	for (i = 0 ; i < m->VertNum ; i++, mv++)

	mov	WORD PTR _i$[ebp], 0
	jmp	SHORT $L81874
$L81875:
	mov	ax, WORD PTR _i$[ebp]
	add	ax, 1
	mov	WORD PTR _i$[ebp], ax
	mov	ecx, DWORD PTR _mv$[ebp]
	add	ecx, 88					; 00000058H
	mov	DWORD PTR _mv$[ebp], ecx
$L81874:
	movsx	eax, WORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _m$[ebp]
	movsx	edx, WORD PTR [ecx+34]
	cmp	eax, edx
	jge	$L81868

; 837  : 	{
; 838  : 		z = mv->x * mat->m[RZ] + mv->y * mat->m[UZ] + mv->z * mat->m[LZ] + trans->v[Z];

	mov	eax, DWORD PTR _mv$[ebp]
	mov	ecx, DWORD PTR _mat$[ebp]
	fld	DWORD PTR [eax]
	fmul	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _mv$[ebp]
	mov	eax, DWORD PTR _mat$[ebp]
	fld	DWORD PTR [edx+4]
	fmul	DWORD PTR [eax+20]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR _mv$[ebp]
	mov	edx, DWORD PTR _mat$[ebp]
	fld	DWORD PTR [ecx+8]
	fmul	DWORD PTR [edx+32]
	faddp	ST(1), ST(0)
	mov	eax, DWORD PTR _trans$[ebp]
	fadd	DWORD PTR [eax+8]
	fstp	DWORD PTR _z$[ebp]

; 839  : 		if (z < 1) z = 1;

	fld	DWORD PTR _z$[ebp]
	fcomp	DWORD PTR __real@3f800000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L81877
	mov	DWORD PTR _z$[ebp], 1065353216		; 3f800000H
$L81877:

; 840  : 
; 841  : 		mv->sx = (mv->x * mat->m[RX] + mv->y * mat->m[UX] + mv->z * mat->m[LX] + trans->v[X]) / z + RenderSettings.GeomCentreX;

	mov	eax, DWORD PTR _mv$[ebp]
	mov	ecx, DWORD PTR _mat$[ebp]
	fld	DWORD PTR [eax]
	fmul	DWORD PTR [ecx]
	mov	edx, DWORD PTR _mv$[ebp]
	mov	eax, DWORD PTR _mat$[ebp]
	fld	DWORD PTR [edx+4]
	fmul	DWORD PTR [eax+12]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR _mv$[ebp]
	mov	edx, DWORD PTR _mat$[ebp]
	fld	DWORD PTR [ecx+8]
	fmul	DWORD PTR [edx+24]
	faddp	ST(1), ST(0)
	mov	eax, DWORD PTR _trans$[ebp]
	fadd	DWORD PTR [eax]
	fdiv	DWORD PTR _z$[ebp]
	fadd	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+4
	mov	ecx, DWORD PTR _mv$[ebp]
	fstp	DWORD PTR [ecx+36]

; 842  : 		mv->sy = (mv->x * mat->m[RY] + mv->y * mat->m[UY] + mv->z * mat->m[LY] + trans->v[Y]) / z + RenderSettings.GeomCentreY;

	mov	eax, DWORD PTR _mv$[ebp]
	mov	ecx, DWORD PTR _mat$[ebp]
	fld	DWORD PTR [eax]
	fmul	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _mv$[ebp]
	mov	eax, DWORD PTR _mat$[ebp]
	fld	DWORD PTR [edx+4]
	fmul	DWORD PTR [eax+16]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR _mv$[ebp]
	mov	edx, DWORD PTR _mat$[ebp]
	fld	DWORD PTR [ecx+8]
	fmul	DWORD PTR [edx+28]
	faddp	ST(1), ST(0)
	mov	eax, DWORD PTR _trans$[ebp]
	fadd	DWORD PTR [eax+4]
	fdiv	DWORD PTR _z$[ebp]
	fadd	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+8
	mov	ecx, DWORD PTR _mv$[ebp]
	fstp	DWORD PTR [ecx+40]

; 843  : 
; 844  : 		mv->rhw = 1 / z;

	fld	DWORD PTR __real@3f800000
	fdiv	DWORD PTR _z$[ebp]
	mov	eax, DWORD PTR _mv$[ebp]
	fstp	DWORD PTR [eax+48]

; 845  : 		mv->sz = GET_ZBUFFER(z);

	fld	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+36
	fmul	DWORD PTR _z$[ebp]
	fdivr	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+44
	fsubr	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+40
	mov	eax, DWORD PTR _mv$[ebp]
	fstp	DWORD PTR [eax+44]

; 846  : 
; 847  : 		mv->Clip = 0;

	mov	eax, DWORD PTR _mv$[ebp]
	mov	BYTE PTR [eax+84], 0

; 848  : 		if (mv->sx < ScreenLeftClipGuard) mv->Clip |= 1;

	mov	eax, DWORD PTR _mv$[ebp]
	fld	DWORD PTR [eax+36]
	fcomp	DWORD PTR ?ScreenLeftClipGuard@@3MA	; ScreenLeftClipGuard
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L81878
	mov	eax, DWORD PTR _mv$[ebp]
	movzx	ecx, BYTE PTR [eax+84]
	or	ecx, 1
	mov	edx, DWORD PTR _mv$[ebp]
	mov	BYTE PTR [edx+84], cl

; 849  : 		else if (mv->sx > ScreenRightClipGuard) mv->Clip |= 2;

	jmp	SHORT $L81879
$L81878:
	mov	eax, DWORD PTR _mv$[ebp]
	fld	DWORD PTR [eax+36]
	fcomp	DWORD PTR ?ScreenRightClipGuard@@3MA	; ScreenRightClipGuard
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $L81879
	mov	eax, DWORD PTR _mv$[ebp]
	movzx	ecx, BYTE PTR [eax+84]
	or	ecx, 2
	mov	edx, DWORD PTR _mv$[ebp]
	mov	BYTE PTR [edx+84], cl
$L81879:

; 850  : 		if (mv->sy < ScreenTopClipGuard) mv->Clip |= 4;

	mov	eax, DWORD PTR _mv$[ebp]
	fld	DWORD PTR [eax+40]
	fcomp	DWORD PTR ?ScreenTopClipGuard@@3MA	; ScreenTopClipGuard
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L81881
	mov	eax, DWORD PTR _mv$[ebp]
	movzx	ecx, BYTE PTR [eax+84]
	or	ecx, 4
	mov	edx, DWORD PTR _mv$[ebp]
	mov	BYTE PTR [edx+84], cl

; 851  : 		else if (mv->sy > ScreenBottomClipGuard) mv->Clip |= 8;

	jmp	SHORT $L81882
$L81881:
	mov	eax, DWORD PTR _mv$[ebp]
	fld	DWORD PTR [eax+40]
	fcomp	DWORD PTR ?ScreenBottomClipGuard@@3MA	; ScreenBottomClipGuard
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $L81882
	mov	eax, DWORD PTR _mv$[ebp]
	movzx	ecx, BYTE PTR [eax+84]
	or	ecx, 8
	mov	edx, DWORD PTR _mv$[ebp]
	mov	BYTE PTR [edx+84], cl
$L81882:

; 852  : 		if (mv->sz < 0) mv->Clip |= 16;

	mov	eax, DWORD PTR _mv$[ebp]
	fld	DWORD PTR [eax+44]
	fcomp	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L81884
	mov	eax, DWORD PTR _mv$[ebp]
	movzx	ecx, BYTE PTR [eax+84]
	or	ecx, 16					; 00000010H
	mov	edx, DWORD PTR _mv$[ebp]
	mov	BYTE PTR [edx+84], cl

; 853  : 		else if (mv->sz >= 1) mv->Clip |= 32;

	jmp	SHORT $L81885
$L81884:
	mov	eax, DWORD PTR _mv$[ebp]
	fld	DWORD PTR [eax+44]
	fcomp	DWORD PTR __real@3f800000
	fnstsw	ax
	test	ah, 1
	jne	SHORT $L81885
	mov	eax, DWORD PTR _mv$[ebp]
	movzx	ecx, BYTE PTR [eax+84]
	or	ecx, 32					; 00000020H
	mov	edx, DWORD PTR _mv$[ebp]
	mov	BYTE PTR [edx+84], cl
$L81885:

; 854  : 
; 855  : 		mirrorfog = mv->x * worldmat->m[RY] + mv->y * worldmat->m[UY] + mv->z * worldmat->m[LY] + worldpos->v[Y];

	mov	eax, DWORD PTR _mv$[ebp]
	mov	ecx, DWORD PTR _worldmat$[ebp]
	fld	DWORD PTR [eax]
	fmul	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _mv$[ebp]
	mov	eax, DWORD PTR _worldmat$[ebp]
	fld	DWORD PTR [edx+4]
	fmul	DWORD PTR [eax+16]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR _mv$[ebp]
	mov	edx, DWORD PTR _worldmat$[ebp]
	fld	DWORD PTR [ecx+8]
	fmul	DWORD PTR [edx+28]
	faddp	ST(1), ST(0)
	mov	eax, DWORD PTR _worldpos$[ebp]
	fadd	DWORD PTR [eax+4]
	fstp	DWORD PTR _mirrorfog$[ebp]

; 856  : 		mirrorfog = GET_MIRROR_FOG(MirrorHeight - mirrorfog);

	fld	DWORD PTR ?MirrorHeight@@3MA		; MirrorHeight
	fsub	DWORD PTR _mirrorfog$[ebp]
	fmul	DWORD PTR ?MirrorMul@@3MA		; MirrorMul
	fadd	DWORD PTR ?MirrorAdd@@3MA		; MirrorAdd
	fstp	DWORD PTR _mirrorfog$[ebp]

; 857  : 		if (mirrorfog < 0) mirrorfog = 0;

	fld	DWORD PTR _mirrorfog$[ebp]
	fcomp	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L81887
	mov	DWORD PTR _mirrorfog$[ebp], 0
$L81887:

; 858  : 
; 859  : 		if (mirrorfog >= 255)

	fld	DWORD PTR _mirrorfog$[ebp]
	fcomp	DWORD PTR __real@437f0000
	fnstsw	ax
	test	ah, 1
	jne	SHORT $L81888

; 860  : 		{
; 861  : 			mv->Clip |= 64;

	mov	eax, DWORD PTR _mv$[ebp]
	movzx	ecx, BYTE PTR [eax+84]
	or	ecx, 64					; 00000040H
	mov	edx, DWORD PTR _mv$[ebp]
	mov	BYTE PTR [edx+84], cl

; 862  : 			mv->specular = 0;

	mov	eax, DWORD PTR _mv$[ebp]
	mov	DWORD PTR [eax+56], 0

; 863  : 		}
; 864  : 		else

	jmp	SHORT $L81889
$L81888:

; 865  : 		{
; 866  : 			fog = (RenderSettings.FarClip - z) * RenderSettings.FogMul;

	fld	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+32
	fsub	DWORD PTR _z$[ebp]
	fmul	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+56
	fstp	DWORD PTR _fog$[ebp]

; 867  : 			if (fog > 255) fog = 255;

	fld	DWORD PTR _fog$[ebp]
	fcomp	DWORD PTR __real@437f0000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $L81890
	mov	DWORD PTR _fog$[ebp], 1132396544	; 437f0000H
$L81890:

; 868  : 			fog -= mirrorfog;

	fld	DWORD PTR _fog$[ebp]
	fsub	DWORD PTR _mirrorfog$[ebp]
	fstp	DWORD PTR _fog$[ebp]

; 869  : 			if (fog < 0) fog = 0;

	fld	DWORD PTR _fog$[ebp]
	fcomp	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L81891
	mov	DWORD PTR _fog$[ebp], 0
$L81891:

; 870  : 			mv->specular = FTOL3(fog) << 24;

	fld	DWORD PTR _fog$[ebp]
	fadd	DWORD PTR __real@4b000000
	fstp	DWORD PTR _fog$[ebp]
	mov	eax, DWORD PTR _fog$[ebp]
	shl	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _mv$[ebp]
	mov	DWORD PTR [ecx+56], eax
$L81889:

; 871  : 		}
; 872  : 	}

	jmp	$L81875
$L81868:

; 873  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?TransModelVertsMirror@@YAXPAUMODEL@@PATMatrixUnion@@PAUVectorStruct@@12@Z ENDP ; TransModelVertsMirror
; Function compile flags: /Odt /ZI
_TEXT	ENDS
;	COMDAT ?TransModelVertsMirrorNewVerts@@YAXPAUMODEL@@PATMatrixUnion@@PAUVectorStruct@@12@Z
_TEXT	SEGMENT
_mv$ = -20						; size = 4
_mirrorfog$ = -16					; size = 4
_fog$ = -12						; size = 4
_z$ = -8						; size = 4
_i$ = -4						; size = 2
_m$ = 8							; size = 4
_mat$ = 12						; size = 4
_trans$ = 16						; size = 4
_worldmat$ = 20						; size = 4
_worldpos$ = 24						; size = 4
?TransModelVertsMirrorNewVerts@@YAXPAUMODEL@@PATMatrixUnion@@PAUVectorStruct@@12@Z PROC NEAR ; TransModelVertsMirrorNewVerts, COMDAT

; 880  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi

; 881  : 	short i;
; 882  : 	float z;
; 883  : 	float fog, mirrorfog;
; 884  : 	MODEL_VERTEX *mv;
; 885  : 
; 886  : 	mv = m->VertPtr;

	mov	eax, DWORD PTR _m$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	mov	DWORD PTR _mv$[ebp], ecx

; 887  : 
; 888  : 	for (i = 0 ; i < m->VertNum ; i++, mv++)

	mov	WORD PTR _i$[ebp], 0
	jmp	SHORT $L81906
$L81907:
	mov	ax, WORD PTR _i$[ebp]
	add	ax, 1
	mov	WORD PTR _i$[ebp], ax
	mov	ecx, DWORD PTR _mv$[ebp]
	add	ecx, 88					; 00000058H
	mov	DWORD PTR _mv$[ebp], ecx
$L81906:
	movsx	eax, WORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _m$[ebp]
	movsx	edx, WORD PTR [ecx+34]
	cmp	eax, edx
	jge	$L81900

; 889  : 	{
; 890  : 		z = mv->x2 * mat->m[RZ] + mv->y2 * mat->m[UZ] + mv->z2 * mat->m[LZ] + trans->v[Z];

	mov	eax, DWORD PTR _mv$[ebp]
	mov	ecx, DWORD PTR _mat$[ebp]
	fld	DWORD PTR [eax+12]
	fmul	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _mv$[ebp]
	mov	eax, DWORD PTR _mat$[ebp]
	fld	DWORD PTR [edx+16]
	fmul	DWORD PTR [eax+20]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR _mv$[ebp]
	mov	edx, DWORD PTR _mat$[ebp]
	fld	DWORD PTR [ecx+20]
	fmul	DWORD PTR [edx+32]
	faddp	ST(1), ST(0)
	mov	eax, DWORD PTR _trans$[ebp]
	fadd	DWORD PTR [eax+8]
	fstp	DWORD PTR _z$[ebp]

; 891  : 		if (z < 1) z = 1;

	fld	DWORD PTR _z$[ebp]
	fcomp	DWORD PTR __real@3f800000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L81909
	mov	DWORD PTR _z$[ebp], 1065353216		; 3f800000H
$L81909:

; 892  : 
; 893  : 		mv->sx = (mv->x2 * mat->m[RX] + mv->y2 * mat->m[UX] + mv->z2 * mat->m[LX] + trans->v[X]) / z + RenderSettings.GeomCentreX;

	mov	eax, DWORD PTR _mv$[ebp]
	mov	ecx, DWORD PTR _mat$[ebp]
	fld	DWORD PTR [eax+12]
	fmul	DWORD PTR [ecx]
	mov	edx, DWORD PTR _mv$[ebp]
	mov	eax, DWORD PTR _mat$[ebp]
	fld	DWORD PTR [edx+16]
	fmul	DWORD PTR [eax+12]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR _mv$[ebp]
	mov	edx, DWORD PTR _mat$[ebp]
	fld	DWORD PTR [ecx+20]
	fmul	DWORD PTR [edx+24]
	faddp	ST(1), ST(0)
	mov	eax, DWORD PTR _trans$[ebp]
	fadd	DWORD PTR [eax]
	fdiv	DWORD PTR _z$[ebp]
	fadd	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+4
	mov	ecx, DWORD PTR _mv$[ebp]
	fstp	DWORD PTR [ecx+36]

; 894  : 		mv->sy = (mv->x2 * mat->m[RY] + mv->y2 * mat->m[UY] + mv->z2 * mat->m[LY] + trans->v[Y]) / z + RenderSettings.GeomCentreY;

	mov	eax, DWORD PTR _mv$[ebp]
	mov	ecx, DWORD PTR _mat$[ebp]
	fld	DWORD PTR [eax+12]
	fmul	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _mv$[ebp]
	mov	eax, DWORD PTR _mat$[ebp]
	fld	DWORD PTR [edx+16]
	fmul	DWORD PTR [eax+16]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR _mv$[ebp]
	mov	edx, DWORD PTR _mat$[ebp]
	fld	DWORD PTR [ecx+20]
	fmul	DWORD PTR [edx+28]
	faddp	ST(1), ST(0)
	mov	eax, DWORD PTR _trans$[ebp]
	fadd	DWORD PTR [eax+4]
	fdiv	DWORD PTR _z$[ebp]
	fadd	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+8
	mov	ecx, DWORD PTR _mv$[ebp]
	fstp	DWORD PTR [ecx+40]

; 895  : 
; 896  : 		mv->rhw = 1 / z;

	fld	DWORD PTR __real@3f800000
	fdiv	DWORD PTR _z$[ebp]
	mov	eax, DWORD PTR _mv$[ebp]
	fstp	DWORD PTR [eax+48]

; 897  : 		mv->sz = GET_ZBUFFER(z);

	fld	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+36
	fmul	DWORD PTR _z$[ebp]
	fdivr	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+44
	fsubr	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+40
	mov	eax, DWORD PTR _mv$[ebp]
	fstp	DWORD PTR [eax+44]

; 898  : 
; 899  : 		mv->Clip = 0;

	mov	eax, DWORD PTR _mv$[ebp]
	mov	BYTE PTR [eax+84], 0

; 900  : 		if (mv->sx < ScreenLeftClipGuard) mv->Clip |= 1;

	mov	eax, DWORD PTR _mv$[ebp]
	fld	DWORD PTR [eax+36]
	fcomp	DWORD PTR ?ScreenLeftClipGuard@@3MA	; ScreenLeftClipGuard
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L81910
	mov	eax, DWORD PTR _mv$[ebp]
	movzx	ecx, BYTE PTR [eax+84]
	or	ecx, 1
	mov	edx, DWORD PTR _mv$[ebp]
	mov	BYTE PTR [edx+84], cl

; 901  : 		else if (mv->sx > ScreenRightClipGuard) mv->Clip |= 2;

	jmp	SHORT $L81911
$L81910:
	mov	eax, DWORD PTR _mv$[ebp]
	fld	DWORD PTR [eax+36]
	fcomp	DWORD PTR ?ScreenRightClipGuard@@3MA	; ScreenRightClipGuard
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $L81911
	mov	eax, DWORD PTR _mv$[ebp]
	movzx	ecx, BYTE PTR [eax+84]
	or	ecx, 2
	mov	edx, DWORD PTR _mv$[ebp]
	mov	BYTE PTR [edx+84], cl
$L81911:

; 902  : 		if (mv->sy < ScreenTopClipGuard) mv->Clip |= 4;

	mov	eax, DWORD PTR _mv$[ebp]
	fld	DWORD PTR [eax+40]
	fcomp	DWORD PTR ?ScreenTopClipGuard@@3MA	; ScreenTopClipGuard
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L81913
	mov	eax, DWORD PTR _mv$[ebp]
	movzx	ecx, BYTE PTR [eax+84]
	or	ecx, 4
	mov	edx, DWORD PTR _mv$[ebp]
	mov	BYTE PTR [edx+84], cl

; 903  : 		else if (mv->sy > ScreenBottomClipGuard) mv->Clip |= 8;

	jmp	SHORT $L81914
$L81913:
	mov	eax, DWORD PTR _mv$[ebp]
	fld	DWORD PTR [eax+40]
	fcomp	DWORD PTR ?ScreenBottomClipGuard@@3MA	; ScreenBottomClipGuard
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $L81914
	mov	eax, DWORD PTR _mv$[ebp]
	movzx	ecx, BYTE PTR [eax+84]
	or	ecx, 8
	mov	edx, DWORD PTR _mv$[ebp]
	mov	BYTE PTR [edx+84], cl
$L81914:

; 904  : 		if (mv->sz < 0) mv->Clip |= 16;

	mov	eax, DWORD PTR _mv$[ebp]
	fld	DWORD PTR [eax+44]
	fcomp	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L81916
	mov	eax, DWORD PTR _mv$[ebp]
	movzx	ecx, BYTE PTR [eax+84]
	or	ecx, 16					; 00000010H
	mov	edx, DWORD PTR _mv$[ebp]
	mov	BYTE PTR [edx+84], cl

; 905  : 		else if (mv->sz >= 1) mv->Clip |= 32;

	jmp	SHORT $L81917
$L81916:
	mov	eax, DWORD PTR _mv$[ebp]
	fld	DWORD PTR [eax+44]
	fcomp	DWORD PTR __real@3f800000
	fnstsw	ax
	test	ah, 1
	jne	SHORT $L81917
	mov	eax, DWORD PTR _mv$[ebp]
	movzx	ecx, BYTE PTR [eax+84]
	or	ecx, 32					; 00000020H
	mov	edx, DWORD PTR _mv$[ebp]
	mov	BYTE PTR [edx+84], cl
$L81917:

; 906  : 
; 907  : 		mirrorfog = mv->x * worldmat->m[RY] + mv->y * worldmat->m[UY] + mv->z * worldmat->m[LY] + worldpos->v[Y];

	mov	eax, DWORD PTR _mv$[ebp]
	mov	ecx, DWORD PTR _worldmat$[ebp]
	fld	DWORD PTR [eax]
	fmul	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _mv$[ebp]
	mov	eax, DWORD PTR _worldmat$[ebp]
	fld	DWORD PTR [edx+4]
	fmul	DWORD PTR [eax+16]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR _mv$[ebp]
	mov	edx, DWORD PTR _worldmat$[ebp]
	fld	DWORD PTR [ecx+8]
	fmul	DWORD PTR [edx+28]
	faddp	ST(1), ST(0)
	mov	eax, DWORD PTR _worldpos$[ebp]
	fadd	DWORD PTR [eax+4]
	fstp	DWORD PTR _mirrorfog$[ebp]

; 908  : 		mirrorfog = GET_MIRROR_FOG(MirrorHeight - mirrorfog);

	fld	DWORD PTR ?MirrorHeight@@3MA		; MirrorHeight
	fsub	DWORD PTR _mirrorfog$[ebp]
	fmul	DWORD PTR ?MirrorMul@@3MA		; MirrorMul
	fadd	DWORD PTR ?MirrorAdd@@3MA		; MirrorAdd
	fstp	DWORD PTR _mirrorfog$[ebp]

; 909  : 		if (mirrorfog < 0) mirrorfog = 0;

	fld	DWORD PTR _mirrorfog$[ebp]
	fcomp	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L81919
	mov	DWORD PTR _mirrorfog$[ebp], 0
$L81919:

; 910  : 
; 911  : 		if (mirrorfog >= 255)

	fld	DWORD PTR _mirrorfog$[ebp]
	fcomp	DWORD PTR __real@437f0000
	fnstsw	ax
	test	ah, 1
	jne	SHORT $L81920

; 912  : 		{
; 913  : 			mv->Clip |= 64;

	mov	eax, DWORD PTR _mv$[ebp]
	movzx	ecx, BYTE PTR [eax+84]
	or	ecx, 64					; 00000040H
	mov	edx, DWORD PTR _mv$[ebp]
	mov	BYTE PTR [edx+84], cl

; 914  : 			mv->specular = 0;

	mov	eax, DWORD PTR _mv$[ebp]
	mov	DWORD PTR [eax+56], 0

; 915  : 		}
; 916  : 		else

	jmp	SHORT $L81921
$L81920:

; 917  : 		{
; 918  : 			fog = (RenderSettings.FarClip - z) * RenderSettings.FogMul;

	fld	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+32
	fsub	DWORD PTR _z$[ebp]
	fmul	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+56
	fstp	DWORD PTR _fog$[ebp]

; 919  : 			if (fog > 255) fog = 255;

	fld	DWORD PTR _fog$[ebp]
	fcomp	DWORD PTR __real@437f0000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $L81922
	mov	DWORD PTR _fog$[ebp], 1132396544	; 437f0000H
$L81922:

; 920  : 			fog -= mirrorfog;

	fld	DWORD PTR _fog$[ebp]
	fsub	DWORD PTR _mirrorfog$[ebp]
	fstp	DWORD PTR _fog$[ebp]

; 921  : 			if (fog < 0) fog = 0;

	fld	DWORD PTR _fog$[ebp]
	fcomp	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L81923
	mov	DWORD PTR _fog$[ebp], 0
$L81923:

; 922  : 			mv->specular = FTOL3(fog) << 24;

	fld	DWORD PTR _fog$[ebp]
	fadd	DWORD PTR __real@4b000000
	fstp	DWORD PTR _fog$[ebp]
	mov	eax, DWORD PTR _fog$[ebp]
	shl	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _mv$[ebp]
	mov	DWORD PTR [ecx+56], eax
$L81921:

; 923  : 		}
; 924  : 	}

	jmp	$L81907
$L81900:

; 925  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?TransModelVertsMirrorNewVerts@@YAXPAUMODEL@@PATMatrixUnion@@PAUVectorStruct@@12@Z ENDP ; TransModelVertsMirrorNewVerts
; Function compile flags: /Odt /ZI
_TEXT	ENDS
;	COMDAT ?SetModelVertsEnvPlain@@YAXPAUMODEL@@@Z
_TEXT	SEGMENT
_mv$ = -8						; size = 4
_i$ = -4						; size = 2
_m$ = 8							; size = 4
?SetModelVertsEnvPlain@@YAXPAUMODEL@@@Z PROC NEAR	; SetModelVertsEnvPlain, COMDAT

; 932  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi

; 933  : 	short i;
; 934  : 	MODEL_VERTEX *mv;
; 935  : 
; 936  : 	mv = m->VertPtr;

	mov	eax, DWORD PTR _m$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	mov	DWORD PTR _mv$[ebp], ecx

; 937  : 
; 938  : 	for (i = 0 ; i < m->VertNum ; i++, mv++)

	mov	WORD PTR _i$[ebp], 0
	jmp	SHORT $L81931
$L81932:
	mov	ax, WORD PTR _i$[ebp]
	add	ax, 1
	mov	WORD PTR _i$[ebp], ax
	mov	ecx, DWORD PTR _mv$[ebp]
	add	ecx, 88					; 00000058H
	mov	DWORD PTR _mv$[ebp], ecx
$L81931:
	movsx	eax, WORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _m$[ebp]
	movsx	edx, WORD PTR [ecx+34]
	cmp	eax, edx
	jge	SHORT $L81928

; 939  : 	{
; 940  : 		mv->tu = (mv->nx * EnvMatrix.m[RX] + mv->ny * EnvMatrix.m[UX] + mv->nz * EnvMatrix.m[LX]) + EnvXoffset;

	mov	eax, DWORD PTR _mv$[ebp]
	fld	DWORD PTR ?EnvMatrix@@3TMatrixUnion@@A
	fmul	DWORD PTR [eax+24]
	mov	ecx, DWORD PTR _mv$[ebp]
	fld	DWORD PTR ?EnvMatrix@@3TMatrixUnion@@A+12
	fmul	DWORD PTR [ecx+28]
	faddp	ST(1), ST(0)
	mov	edx, DWORD PTR _mv$[ebp]
	fld	DWORD PTR ?EnvMatrix@@3TMatrixUnion@@A+24
	fmul	DWORD PTR [edx+32]
	faddp	ST(1), ST(0)
	fadd	DWORD PTR ?EnvXoffset@@3MA		; EnvXoffset
	mov	eax, DWORD PTR _mv$[ebp]
	fstp	DWORD PTR [eax+60]

; 941  : 		mv->tv = (mv->nx * EnvMatrix.m[RY] + mv->ny * EnvMatrix.m[UY] + mv->nz * EnvMatrix.m[LY]) + EnvYoffset;

	mov	eax, DWORD PTR _mv$[ebp]
	fld	DWORD PTR ?EnvMatrix@@3TMatrixUnion@@A+4
	fmul	DWORD PTR [eax+24]
	mov	ecx, DWORD PTR _mv$[ebp]
	fld	DWORD PTR ?EnvMatrix@@3TMatrixUnion@@A+16
	fmul	DWORD PTR [ecx+28]
	faddp	ST(1), ST(0)
	mov	edx, DWORD PTR _mv$[ebp]
	fld	DWORD PTR ?EnvMatrix@@3TMatrixUnion@@A+28
	fmul	DWORD PTR [edx+32]
	faddp	ST(1), ST(0)
	fadd	DWORD PTR ?EnvYoffset@@3MA		; EnvYoffset
	mov	eax, DWORD PTR _mv$[ebp]
	fstp	DWORD PTR [eax+64]

; 942  : 		mv->color = *(long*)&EnvRgb;

	mov	eax, DWORD PTR _mv$[ebp]
	mov	ecx, DWORD PTR ?EnvRgb@@3UMODEL_RGB@@A	; EnvRgb
	mov	DWORD PTR [eax+52], ecx

; 943  : 	} 

	jmp	$L81932
$L81928:

; 944  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?SetModelVertsEnvPlain@@YAXPAUMODEL@@@Z ENDP		; SetModelVertsEnvPlain
; Function compile flags: /Odt /ZI
_TEXT	ENDS
;	COMDAT ?SetModelVertsEnvLit@@YAXPAUMODEL@@@Z
_TEXT	SEGMENT
__i$81943 = -12						; size = 4
_mv$ = -8						; size = 4
_i$ = -4						; size = 2
_m$ = 8							; size = 4
?SetModelVertsEnvLit@@YAXPAUMODEL@@@Z PROC NEAR		; SetModelVertsEnvLit, COMDAT

; 951  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi

; 952  : 	short i;
; 953  : 	MODEL_VERTEX *mv;
; 954  : 
; 955  : 	mv = m->VertPtr;

	mov	eax, DWORD PTR _m$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	mov	DWORD PTR _mv$[ebp], ecx

; 956  : 
; 957  : 	for (i = 0 ; i < m->VertNum ; i++, mv++)

	mov	WORD PTR _i$[ebp], 0
	jmp	SHORT $L81940
$L81941:
	mov	ax, WORD PTR _i$[ebp]
	add	ax, 1
	mov	WORD PTR _i$[ebp], ax
	mov	ecx, DWORD PTR _mv$[ebp]
	add	ecx, 88					; 00000058H
	mov	DWORD PTR _mv$[ebp], ecx
$L81940:
	movsx	eax, WORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _m$[ebp]
	movsx	edx, WORD PTR [ecx+34]
	cmp	eax, edx
	jge	$L81937

; 958  : 	{
; 959  : 		mv->tu = (mv->nx * EnvMatrix.m[RX] + mv->ny * EnvMatrix.m[UX] + mv->nz * EnvMatrix.m[LX]) + EnvXoffset;

	mov	eax, DWORD PTR _mv$[ebp]
	fld	DWORD PTR ?EnvMatrix@@3TMatrixUnion@@A
	fmul	DWORD PTR [eax+24]
	mov	ecx, DWORD PTR _mv$[ebp]
	fld	DWORD PTR ?EnvMatrix@@3TMatrixUnion@@A+12
	fmul	DWORD PTR [ecx+28]
	faddp	ST(1), ST(0)
	mov	edx, DWORD PTR _mv$[ebp]
	fld	DWORD PTR ?EnvMatrix@@3TMatrixUnion@@A+24
	fmul	DWORD PTR [edx+32]
	faddp	ST(1), ST(0)
	fadd	DWORD PTR ?EnvXoffset@@3MA		; EnvXoffset
	mov	eax, DWORD PTR _mv$[ebp]
	fstp	DWORD PTR [eax+60]

; 960  : 		mv->tv = (mv->nx * EnvMatrix.m[RY] + mv->ny * EnvMatrix.m[UY] + mv->nz * EnvMatrix.m[LY]) + EnvYoffset;

	mov	eax, DWORD PTR _mv$[ebp]
	fld	DWORD PTR ?EnvMatrix@@3TMatrixUnion@@A+4
	fmul	DWORD PTR [eax+24]
	mov	ecx, DWORD PTR _mv$[ebp]
	fld	DWORD PTR ?EnvMatrix@@3TMatrixUnion@@A+16
	fmul	DWORD PTR [ecx+28]
	faddp	ST(1), ST(0)
	mov	edx, DWORD PTR _mv$[ebp]
	fld	DWORD PTR ?EnvMatrix@@3TMatrixUnion@@A+28
	fmul	DWORD PTR [edx+32]
	faddp	ST(1), ST(0)
	fadd	DWORD PTR ?EnvYoffset@@3MA		; EnvYoffset
	mov	eax, DWORD PTR _mv$[ebp]
	fstp	DWORD PTR [eax+64]

; 961  : 		ModelAddGouraud(&EnvRgb, &mv->r, (MODEL_RGB*)&mv->color);

	movzx	eax, BYTE PTR ?EnvRgb@@3UMODEL_RGB@@A+2
	mov	ecx, DWORD PTR _mv$[ebp]
	add	eax, DWORD PTR [ecx+68]
	mov	DWORD PTR __i$81943[ebp], eax
	cmp	DWORD PTR __i$81943[ebp], 255		; 000000ffH
	jle	SHORT $L81945
	mov	eax, DWORD PTR _mv$[ebp]
	mov	BYTE PTR [eax+54], 255			; 000000ffH
	jmp	SHORT $L81947
$L81945:
	cmp	DWORD PTR __i$81943[ebp], 0
	jge	SHORT $L81948
	mov	eax, DWORD PTR _mv$[ebp]
	mov	BYTE PTR [eax+54], 0
	jmp	SHORT $L81947
$L81948:
	mov	eax, DWORD PTR _mv$[ebp]
	mov	cl, BYTE PTR __i$81943[ebp]
	mov	BYTE PTR [eax+54], cl
$L81947:
	movzx	eax, BYTE PTR ?EnvRgb@@3UMODEL_RGB@@A+1
	mov	ecx, DWORD PTR _mv$[ebp]
	add	eax, DWORD PTR [ecx+72]
	mov	DWORD PTR __i$81943[ebp], eax
	cmp	DWORD PTR __i$81943[ebp], 255		; 000000ffH
	jle	SHORT $L81954
	mov	eax, DWORD PTR _mv$[ebp]
	mov	BYTE PTR [eax+53], 255			; 000000ffH
	jmp	SHORT $L81956
$L81954:
	cmp	DWORD PTR __i$81943[ebp], 0
	jge	SHORT $L81957
	mov	eax, DWORD PTR _mv$[ebp]
	mov	BYTE PTR [eax+53], 0
	jmp	SHORT $L81956
$L81957:
	mov	eax, DWORD PTR _mv$[ebp]
	mov	cl, BYTE PTR __i$81943[ebp]
	mov	BYTE PTR [eax+53], cl
$L81956:
	movzx	eax, BYTE PTR ?EnvRgb@@3UMODEL_RGB@@A
	mov	ecx, DWORD PTR _mv$[ebp]
	add	eax, DWORD PTR [ecx+76]
	mov	DWORD PTR __i$81943[ebp], eax
	cmp	DWORD PTR __i$81943[ebp], 255		; 000000ffH
	jle	SHORT $L81963
	mov	eax, DWORD PTR _mv$[ebp]
	mov	BYTE PTR [eax+52], 255			; 000000ffH
	jmp	SHORT $L81965
$L81963:
	cmp	DWORD PTR __i$81943[ebp], 0
	jge	SHORT $L81966
	mov	eax, DWORD PTR _mv$[ebp]
	mov	BYTE PTR [eax+52], 0
	jmp	SHORT $L81965
$L81966:
	mov	eax, DWORD PTR _mv$[ebp]
	mov	cl, BYTE PTR __i$81943[ebp]
	mov	BYTE PTR [eax+52], cl
$L81965:

; 962  : 	}

	jmp	$L81941
$L81937:

; 963  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?SetModelVertsEnvLit@@YAXPAUMODEL@@@Z ENDP		; SetModelVertsEnvLit
; Function compile flags: /Odt /ZI
_TEXT	ENDS
;	COMDAT ?SetModelVertsGhost@@YAXPAUMODEL@@@Z
_TEXT	SEGMENT
tv89 = -92						; size = 4
_pos$ = -24						; size = 4
_fz$ = -20						; size = 4
_mrgb$ = -16						; size = 4
_mp$ = -12						; size = 4
_mv$ = -8						; size = 4
_i$ = -4						; size = 2
_m$ = 8							; size = 4
?SetModelVertsGhost@@YAXPAUMODEL@@@Z PROC NEAR		; SetModelVertsGhost, COMDAT

; 970  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 92					; 0000005cH
	push	ebx
	push	esi
	push	edi

; 971  : 	short i;
; 972  : 	MODEL_VERTEX *mv;
; 973  : 	MODEL_POLY *mp;
; 974  : 	POLY_RGB *mrgb;
; 975  : 	float fz, pos;
; 976  : 
; 977  : // set vert alpha
; 978  : 
; 979  : 	pos = GhostSineOffset - GhostSinePos;

	fld	DWORD PTR ?GhostSineOffset@@3MA		; GhostSineOffset
	fsub	DWORD PTR ?GhostSinePos@@3MA		; GhostSinePos
	fstp	DWORD PTR _pos$[ebp]

; 980  : 	mv = m->VertPtr;

	mov	eax, DWORD PTR _m$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	mov	DWORD PTR _mv$[ebp], ecx

; 981  : 
; 982  : 	for (i = 0 ; i < m->VertNum ; i++, mv++)

	mov	WORD PTR _i$[ebp], 0
	jmp	SHORT $L81980
$L81981:
	mov	ax, WORD PTR _i$[ebp]
	add	ax, 1
	mov	WORD PTR _i$[ebp], ax
	mov	ecx, DWORD PTR _mv$[ebp]
	add	ecx, 88					; 00000058H
	mov	DWORD PTR _mv$[ebp], ecx
$L81980:
	movsx	eax, WORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _m$[ebp]
	movsx	edx, WORD PTR [ecx+34]
	cmp	eax, edx
	jge	SHORT $L81982

; 983  : 	{
; 984  : 		fz = abs((mv->z + pos) * 2);

	mov	eax, DWORD PTR _mv$[ebp]
	fld	DWORD PTR _pos$[ebp]
	fadd	DWORD PTR [eax+8]
	fadd	ST(0), ST(0)
	fcomp	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $L84182
	mov	ecx, DWORD PTR _mv$[ebp]
	fld	DWORD PTR _pos$[ebp]
	fadd	DWORD PTR [ecx+8]
	fadd	ST(0), ST(0)
	fstp	DWORD PTR tv89[ebp]
	jmp	SHORT $L84183
$L84182:
	mov	edx, DWORD PTR _mv$[ebp]
	fld	DWORD PTR _pos$[ebp]
	fadd	DWORD PTR [edx+8]
	fadd	ST(0), ST(0)
	fchs
	fstp	DWORD PTR tv89[ebp]
$L84183:
	mov	eax, DWORD PTR tv89[ebp]
	mov	DWORD PTR _fz$[ebp], eax

; 985  : 		mv->a = -FTOL2(fz) + 255;

	fld	DWORD PTR _fz$[ebp]
	fadd	DWORD PTR __real@4b000000
	fstp	DWORD PTR _fz$[ebp]
	mov	eax, DWORD PTR _fz$[ebp]
	and	eax, 16777215				; 00ffffffH
	neg	eax
	add	eax, 255				; 000000ffH
	mov	ecx, DWORD PTR _mv$[ebp]
	mov	DWORD PTR [ecx+80], eax

; 986  : 		if (mv->a < 0) mv->a = 0;

	mov	eax, DWORD PTR _mv$[ebp]
	cmp	DWORD PTR [eax+80], 0
	jge	SHORT $L81985
	mov	eax, DWORD PTR _mv$[ebp]
	mov	DWORD PTR [eax+80], 0
$L81985:

; 987  : 	}

	jmp	$L81981
$L81982:

; 988  : 
; 989  : // copy to polys
; 990  : 
; 991  : 	mp = m->PolyPtr;

	mov	eax, DWORD PTR _m$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	mov	DWORD PTR _mp$[ebp], ecx

; 992  : 	mrgb = m->PolyRGB;

	mov	eax, DWORD PTR _m$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	mov	DWORD PTR _mrgb$[ebp], ecx

; 993  : 
; 994  : 	for (i = 0 ; i < m->PolyNum ; i++, mp++, mrgb++)

	mov	WORD PTR _i$[ebp], 0
	jmp	SHORT $L81986
$L81987:
	mov	ax, WORD PTR _i$[ebp]
	add	ax, 1
	mov	WORD PTR _i$[ebp], ax
	mov	ecx, DWORD PTR _mp$[ebp]
	add	ecx, 52					; 00000034H
	mov	DWORD PTR _mp$[ebp], ecx
	mov	edx, DWORD PTR _mrgb$[ebp]
	add	edx, 16					; 00000010H
	mov	DWORD PTR _mrgb$[ebp], edx
$L81986:
	movsx	eax, WORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _m$[ebp]
	movsx	edx, WORD PTR [ecx+32]
	cmp	eax, edx
	jge	SHORT $L81973

; 995  : 	{
; 996  : 		mrgb->rgb[0].a = (unsigned char)mp->v0->a;

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _mrgb$[ebp]
	mov	al, BYTE PTR [ecx+80]
	mov	BYTE PTR [edx+3], al

; 997  : 		mrgb->rgb[1].a = (unsigned char)mp->v1->a;

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	edx, DWORD PTR _mrgb$[ebp]
	mov	al, BYTE PTR [ecx+80]
	mov	BYTE PTR [edx+7], al

; 998  : 		mrgb->rgb[2].a = (unsigned char)mp->v2->a;

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	mov	edx, DWORD PTR _mrgb$[ebp]
	mov	al, BYTE PTR [ecx+80]
	mov	BYTE PTR [edx+11], al

; 999  : 		if(mp->Type & POLY_QUAD)

	mov	eax, DWORD PTR _mp$[ebp]
	movsx	ecx, WORD PTR [eax]
	and	ecx, 1
	je	SHORT $L81992

; 1000 : 		{
; 1001 : 			mrgb->rgb[3].a = (unsigned char)mp->v3->a;

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	mov	edx, DWORD PTR _mrgb$[ebp]
	mov	al, BYTE PTR [ecx+80]
	mov	BYTE PTR [edx+15], al
$L81992:

; 1002 : 		}
; 1003 : 	}

	jmp	SHORT $L81987
$L81973:

; 1004 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?SetModelVertsGhost@@YAXPAUMODEL@@@Z ENDP		; SetModelVertsGhost
_TEXT	ENDS
PUBLIC	__real@459c4000
PUBLIC	__real@451c4000
PUBLIC	__real@3f400000
PUBLIC	__real@3f000000
PUBLIC	__real@bf4ccccd
PUBLIC	__real@42400000
PUBLIC	__real@40a00000
EXTRN	?ViewCameraMatrix@@3TMatrixUnion@@A:BYTE	; ViewCameraMatrix
EXTRN	?RotMatrixZ@@YAXPATMatrixUnion@@M@Z:NEAR	; RotMatrixZ
EXTRN	?TransposeRotVector@@YAXPATMatrixUnion@@PAUVectorStruct@@1@Z:NEAR ; TransposeRotVector
EXTRN	?CurrentTimer@@YAKXZ:NEAR			; CurrentTimer
EXTRN	?TimerFreq@@3KA:DWORD				; TimerFreq
EXTRN	?DrawFacingPolyRot@@YAXPAUVectorStruct@@PATMatrixUnion@@PAUFACING_POLY@@JM@Z:NEAR ; DrawFacingPolyRot
;	COMDAT __real@459c4000
CONST	SEGMENT
__real@459c4000 DD 0459c4000r			; 5000
CONST	ENDS
;	COMDAT __real@451c4000
CONST	SEGMENT
__real@451c4000 DD 0451c4000r			; 2500
CONST	ENDS
;	COMDAT __real@3f400000
CONST	SEGMENT
__real@3f400000 DD 03f400000r			; 0.75
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT __real@bf4ccccd
CONST	SEGMENT
__real@bf4ccccd DD 0bf4ccccdr			; -0.8
CONST	ENDS
;	COMDAT __real@42400000
CONST	SEGMENT
__real@42400000 DD 042400000r			; 48
CONST	ENDS
;	COMDAT __real@40a00000
CONST	SEGMENT
__real@40a00000 DD 040a00000r			; 5
; Function compile flags: /Odt /ZI
CONST	ENDS
;	COMDAT ?SetModelVertsGlare@@YAXPAUMODEL@@PAUVectorStruct@@PATMatrixUnion@@F@Z
_TEXT	SEGMENT
tv385 = -268						; size = 8
tv372 = -268						; size = 8
__temp$82041 = -196					; size = 4
__mul$82035 = -192					; size = 4
__mul$82031 = -188					; size = 4
_time$ = -184						; size = 4
_vnum$ = -180						; size = 4
_j$ = -176						; size = 4
_v1$ = -172						; size = 4
_v0$ = -168						; size = 4
_mvp$ = -164						; size = 4
_mp$ = -160						; size = 4
__mul$82009 = -156					; size = 4
_col$ = -152						; size = 4
_i$ = -148						; size = 4
_vec2$ = -144						; size = 12
_vec$ = -132						; size = 12
_look$ = -120						; size = 12
_dot$ = -108						; size = 4
_spinmat2$ = -104					; size = 36
_spinmat1$ = -68					; size = 36
_poly$ = -32						; size = 32
_m$ = 8							; size = 4
_pos$ = 12						; size = 4
_mat$ = 16						; size = 4
_flag$ = 20						; size = 2
?SetModelVertsGlare@@YAXPAUMODEL@@PAUVectorStruct@@PATMatrixUnion@@F@Z PROC NEAR ; SetModelVertsGlare, COMDAT

; 1011 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 268				; 0000010cH
	push	ebx
	push	esi
	push	edi

; 1012 : 	FACING_POLY poly;
; 1013 : 	MAT spinmat1, spinmat2;
; 1014 : 	REAL dot;
; 1015 : 	VEC look, vec, vec2;
; 1016 : 	long i, col;
; 1017 : 
; 1018 : // set spin mat
; 1019 : 
; 1020 : 	RotMatrixZ(&spinmat1, TIME2MS(CurrentTimer()) / 5000.0f);

	call	?CurrentTimer@@YAKXZ			; CurrentTimer
	mov	ecx, eax
	mov	eax, DWORD PTR ?TimerFreq@@3KA		; TimerFreq
	xor	edx, edx
	mov	esi, 1000				; 000003e8H
	div	esi
	mov	esi, eax
	mov	eax, ecx
	xor	edx, edx
	div	esi
	mov	DWORD PTR tv372[ebp], eax
	mov	DWORD PTR tv372[ebp+4], 0
	fild	QWORD PTR tv372[ebp]
	fdiv	DWORD PTR __real@459c4000
	push	ecx
	fstp	DWORD PTR [esp]
	lea	edx, DWORD PTR _spinmat1$[ebp]
	push	edx
	call	?RotMatrixZ@@YAXPATMatrixUnion@@M@Z	; RotMatrixZ
	add	esp, 8

; 1021 : 	RotMatrixZ(&spinmat2, TIME2MS(CurrentTimer()) / 2500.0f);

	call	?CurrentTimer@@YAKXZ			; CurrentTimer
	mov	ecx, eax
	mov	eax, DWORD PTR ?TimerFreq@@3KA		; TimerFreq
	xor	edx, edx
	mov	esi, 1000				; 000003e8H
	div	esi
	mov	esi, eax
	mov	eax, ecx
	xor	edx, edx
	div	esi
	mov	DWORD PTR tv385[ebp], eax
	mov	DWORD PTR tv385[ebp+4], 0
	fild	QWORD PTR tv385[ebp]
	fdiv	DWORD PTR __real@451c4000
	push	ecx
	fstp	DWORD PTR [esp]
	lea	edx, DWORD PTR _spinmat2$[ebp]
	push	edx
	call	?RotMatrixZ@@YAXPATMatrixUnion@@M@Z	; RotMatrixZ
	add	esp, 8

; 1022 : 
; 1023 : // set look vector
; 1024 : 
; 1025 : 	TransposeRotVector(mat, &ViewCameraMatrix.mv[L], &look);

	lea	eax, DWORD PTR _look$[ebp]
	push	eax
	push	OFFSET FLAT:?ViewCameraMatrix@@3TMatrixUnion@@A+24
	mov	ecx, DWORD PTR _mat$[ebp]
	push	ecx
	call	?TransposeRotVector@@YAXPATMatrixUnion@@PAUVectorStruct@@1@Z ; TransposeRotVector
	add	esp, 12					; 0000000cH

; 1026 : 	NormalizeVector(&look);

	fld	DWORD PTR _look$[ebp]
	fmul	DWORD PTR _look$[ebp]
	fld	DWORD PTR _look$[ebp+4]
	fmul	DWORD PTR _look$[ebp+4]
	faddp	ST(1), ST(0)
	fld	DWORD PTR _look$[ebp+8]
	fmul	DWORD PTR _look$[ebp+8]
	faddp	ST(1), ST(0)
	push	ecx
	fstp	DWORD PTR [esp]
	call	?sqrt@@YAMM@Z				; sqrt
	add	esp, 4
	fdivr	DWORD PTR __real@3f800000
	fstp	DWORD PTR __mul$82009[ebp]
	fld	DWORD PTR _look$[ebp]
	fmul	DWORD PTR __mul$82009[ebp]
	fstp	DWORD PTR _look$[ebp]
	fld	DWORD PTR _look$[ebp+4]
	fmul	DWORD PTR __mul$82009[ebp]
	fstp	DWORD PTR _look$[ebp+4]
	fld	DWORD PTR _look$[ebp+8]
	fmul	DWORD PTR __mul$82009[ebp]
	fstp	DWORD PTR _look$[ebp+8]

; 1027 : 
; 1028 : // set facing poly
; 1029 : 
; 1030 : 	poly.U = 192.0f / 256.0f;

	mov	DWORD PTR _poly$[ebp+8], 1061158912	; 3f400000H

; 1031 : 	poly.V = 64.0f / 256.0f;

	mov	DWORD PTR _poly$[ebp+12], 1048576000	; 3e800000H

; 1032 : 	poly.Usize = 64.0f / 256.0f;

	mov	DWORD PTR _poly$[ebp+16], 1048576000	; 3e800000H

; 1033 : 	poly.Vsize = 64.0f / 256.0f;

	mov	DWORD PTR _poly$[ebp+20], 1048576000	; 3e800000H

; 1034 : 	poly.Tpage = TPAGE_FX1;

	mov	WORD PTR _poly$[ebp+24], 27		; 0000001bH

; 1035 : 
; 1036 : // loop thru verts
; 1037 : 
; 1038 : 	MODEL_POLY *mp;
; 1039 : 	MODEL_VERTEX **mvp, *v0, *v1;
; 1040 : 	long j, vnum;
; 1041 : 	REAL time;
; 1042 : 
; 1043 : 	mp = m->PolyPtr;

	mov	eax, DWORD PTR _m$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	mov	DWORD PTR _mp$[ebp], ecx

; 1044 : 	for (i = 0 ; i < m->PolyNum ; i++, mp++) if (mp->Type & POLY_ENV)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $L82018
$L82019:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	mov	ecx, DWORD PTR _mp$[ebp]
	add	ecx, 52					; 00000034H
	mov	DWORD PTR _mp$[ebp], ecx
$L82018:
	mov	eax, DWORD PTR _m$[ebp]
	movsx	ecx, WORD PTR [eax+32]
	cmp	DWORD PTR _i$[ebp], ecx
	jge	$L81999
	mov	eax, DWORD PTR _mp$[ebp]
	movsx	ecx, WORD PTR [eax]
	and	ecx, 2048				; 00000800H
	je	$L82021

; 1045 : 	{
; 1046 : 		mvp = &mp->v0;

	mov	eax, DWORD PTR _mp$[ebp]
	add	eax, 36					; 00000024H
	mov	DWORD PTR _mvp$[ebp], eax

; 1047 : 		vnum = 3 + (mp->Type & 1);

	mov	eax, DWORD PTR _mp$[ebp]
	movsx	ecx, WORD PTR [eax]
	and	ecx, 1
	add	ecx, 3
	mov	DWORD PTR _vnum$[ebp], ecx

; 1048 : 
; 1049 : 		for (j = 0 ; j < vnum ; j++)

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $L82022
$L82023:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$L82022:
	mov	eax, DWORD PTR _j$[ebp]
	cmp	eax, DWORD PTR _vnum$[ebp]
	jge	$L82021

; 1050 : 		{
; 1051 : 			v0 = mvp[j];

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _mvp$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _v0$[ebp], edx

; 1052 : 			v1 = mvp[(j + 1) % vnum];

	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	cdq
	idiv	DWORD PTR _vnum$[ebp]
	mov	eax, DWORD PTR _mvp$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4]
	mov	DWORD PTR _v1$[ebp], ecx

; 1053 : 
; 1054 : 			SubVector((VEC*)&v1->x, (VEC*)&v0->x, &vec2);

	mov	eax, DWORD PTR _v1$[ebp]
	mov	ecx, DWORD PTR _v0$[ebp]
	fld	DWORD PTR [eax]
	fsub	DWORD PTR [ecx]
	fstp	DWORD PTR _vec2$[ebp]
	mov	eax, DWORD PTR _v1$[ebp]
	mov	ecx, DWORD PTR _v0$[ebp]
	fld	DWORD PTR [eax+4]
	fsub	DWORD PTR [ecx+4]
	fstp	DWORD PTR _vec2$[ebp+4]
	mov	eax, DWORD PTR _v1$[ebp]
	mov	ecx, DWORD PTR _v0$[ebp]
	fld	DWORD PTR [eax+8]
	fsub	DWORD PTR [ecx+8]
	fstp	DWORD PTR _vec2$[ebp+8]

; 1055 : 			NormalizeVector(&vec2);

	fld	DWORD PTR _vec2$[ebp]
	fmul	DWORD PTR _vec2$[ebp]
	fld	DWORD PTR _vec2$[ebp+4]
	fmul	DWORD PTR _vec2$[ebp+4]
	faddp	ST(1), ST(0)
	fld	DWORD PTR _vec2$[ebp+8]
	fmul	DWORD PTR _vec2$[ebp+8]
	faddp	ST(1), ST(0)
	push	ecx
	fstp	DWORD PTR [esp]
	call	?sqrt@@YAMM@Z				; sqrt
	add	esp, 4
	fdivr	DWORD PTR __real@3f800000
	fstp	DWORD PTR __mul$82031[ebp]
	fld	DWORD PTR _vec2$[ebp]
	fmul	DWORD PTR __mul$82031[ebp]
	fstp	DWORD PTR _vec2$[ebp]
	fld	DWORD PTR _vec2$[ebp+4]
	fmul	DWORD PTR __mul$82031[ebp]
	fstp	DWORD PTR _vec2$[ebp+4]
	fld	DWORD PTR _vec2$[ebp+8]
	fmul	DWORD PTR __mul$82031[ebp]
	fstp	DWORD PTR _vec2$[ebp+8]

; 1056 : 			dot = DotProduct(&look, &vec2);

	fld	DWORD PTR _look$[ebp]
	fmul	DWORD PTR _vec2$[ebp]
	fld	DWORD PTR _look$[ebp+4]
	fmul	DWORD PTR _vec2$[ebp+4]
	faddp	ST(1), ST(0)
	fld	DWORD PTR _look$[ebp+8]
	fmul	DWORD PTR _vec2$[ebp+8]
	faddp	ST(1), ST(0)
	fstp	DWORD PTR _dot$[ebp]

; 1057 : 			time = dot * 0.75f + 0.5f;

	fld	DWORD PTR _dot$[ebp]
	fmul	DWORD PTR __real@3f400000
	fadd	DWORD PTR __real@3f000000
	fstp	DWORD PTR _time$[ebp]

; 1058 : 			if (time < 0.0f) continue;

	fld	DWORD PTR _time$[ebp]
	fcomp	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L82033
	jmp	$L82023
$L82033:

; 1059 : 			if (time > 1.0f) continue;

	fld	DWORD PTR _time$[ebp]
	fcomp	DWORD PTR __real@3f800000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $L82034
	jmp	$L82023
$L82034:

; 1060 : 
; 1061 : 			vec2.v[X] = v0->nx + (v1->nx - v0->nx) * time;

	mov	eax, DWORD PTR _v1$[ebp]
	mov	ecx, DWORD PTR _v0$[ebp]
	fld	DWORD PTR [eax+24]
	fsub	DWORD PTR [ecx+24]
	fmul	DWORD PTR _time$[ebp]
	mov	edx, DWORD PTR _v0$[ebp]
	fadd	DWORD PTR [edx+24]
	fstp	DWORD PTR _vec2$[ebp]

; 1062 : 			vec2.v[Y] = v0->ny + (v1->ny - v0->ny) * time;

	mov	eax, DWORD PTR _v1$[ebp]
	mov	ecx, DWORD PTR _v0$[ebp]
	fld	DWORD PTR [eax+28]
	fsub	DWORD PTR [ecx+28]
	fmul	DWORD PTR _time$[ebp]
	mov	edx, DWORD PTR _v0$[ebp]
	fadd	DWORD PTR [edx+28]
	fstp	DWORD PTR _vec2$[ebp+4]

; 1063 : 			vec2.v[Z] = v0->nz + (v1->nz - v0->nz) * time;

	mov	eax, DWORD PTR _v1$[ebp]
	mov	ecx, DWORD PTR _v0$[ebp]
	fld	DWORD PTR [eax+32]
	fsub	DWORD PTR [ecx+32]
	fmul	DWORD PTR _time$[ebp]
	mov	edx, DWORD PTR _v0$[ebp]
	fadd	DWORD PTR [edx+32]
	fstp	DWORD PTR _vec2$[ebp+8]

; 1064 : 			NormalizeVector(&vec2);

	fld	DWORD PTR _vec2$[ebp]
	fmul	DWORD PTR _vec2$[ebp]
	fld	DWORD PTR _vec2$[ebp+4]
	fmul	DWORD PTR _vec2$[ebp+4]
	faddp	ST(1), ST(0)
	fld	DWORD PTR _vec2$[ebp+8]
	fmul	DWORD PTR _vec2$[ebp+8]
	faddp	ST(1), ST(0)
	push	ecx
	fstp	DWORD PTR [esp]
	call	?sqrt@@YAMM@Z				; sqrt
	add	esp, 4
	fdivr	DWORD PTR __real@3f800000
	fstp	DWORD PTR __mul$82035[ebp]
	fld	DWORD PTR _vec2$[ebp]
	fmul	DWORD PTR __mul$82035[ebp]
	fstp	DWORD PTR _vec2$[ebp]
	fld	DWORD PTR _vec2$[ebp+4]
	fmul	DWORD PTR __mul$82035[ebp]
	fstp	DWORD PTR _vec2$[ebp+4]
	fld	DWORD PTR _vec2$[ebp+8]
	fmul	DWORD PTR __mul$82035[ebp]
	fstp	DWORD PTR _vec2$[ebp+8]

; 1065 : 
; 1066 : 			dot = DotProduct(&look, (VEC*)&vec2);

	fld	DWORD PTR _look$[ebp]
	fmul	DWORD PTR _vec2$[ebp]
	fld	DWORD PTR _look$[ebp+4]
	fmul	DWORD PTR _vec2$[ebp+4]
	faddp	ST(1), ST(0)
	fld	DWORD PTR _look$[ebp+8]
	fmul	DWORD PTR _vec2$[ebp+8]
	faddp	ST(1), ST(0)
	fstp	DWORD PTR _dot$[ebp]

; 1067 : 			if (dot < -0.8f)

	fld	DWORD PTR _dot$[ebp]
	fcomp	DWORD PTR __real@bf4ccccd
	fnstsw	ax
	test	ah, 5
	jp	$L82040

; 1068 : 			{
; 1069 : 				poly.Xsize = poly.Ysize = (-0.8f - dot) * 48.0f;

	fld	DWORD PTR __real@bf4ccccd
	fsub	DWORD PTR _dot$[ebp]
	fmul	DWORD PTR __real@42400000
	fstp	DWORD PTR _poly$[ebp+4]
	mov	eax, DWORD PTR _poly$[ebp+4]
	mov	DWORD PTR _poly$[ebp], eax

; 1070 : 
; 1071 : 				FTOL((-0.8f - dot) * 5.0f * 255, col);

	fld	DWORD PTR __real@bf4ccccd
	fsub	DWORD PTR _dot$[ebp]
	fmul	DWORD PTR __real@40a00000
	fmul	DWORD PTR __real@437f0000
	fadd	DWORD PTR __real@4b000000
	fstp	DWORD PTR __temp$82041[ebp]
	mov	eax, DWORD PTR __temp$82041[ebp]
	and	eax, 16777215				; 00ffffffH
	mov	DWORD PTR _col$[ebp], eax

; 1072 : 				poly.RGB = (col * EnvRgb.b / 255) | (col * EnvRgb.g / 255) << 8 | (col * EnvRgb.r / 255) << 16;

	movzx	eax, BYTE PTR ?EnvRgb@@3UMODEL_RGB@@A
	imul	eax, DWORD PTR _col$[ebp]
	cdq
	mov	ecx, 255				; 000000ffH
	idiv	ecx
	mov	ecx, eax
	movzx	edx, BYTE PTR ?EnvRgb@@3UMODEL_RGB@@A+1
	mov	eax, edx
	imul	eax, DWORD PTR _col$[ebp]
	cdq
	mov	esi, 255				; 000000ffH
	idiv	esi
	shl	eax, 8
	or	ecx, eax
	movzx	eax, BYTE PTR ?EnvRgb@@3UMODEL_RGB@@A+2
	imul	eax, DWORD PTR _col$[ebp]
	cdq
	mov	esi, 255				; 000000ffH
	idiv	esi
	shl	eax, 16					; 00000010H
	or	ecx, eax
	mov	DWORD PTR _poly$[ebp+28], ecx

; 1073 : 
; 1074 : 				if (flag & MODEL_USENEWVERTS)

	movsx	eax, WORD PTR _flag$[ebp]
	and	eax, 128				; 00000080H
	je	SHORT $L82044

; 1075 : 				{
; 1076 : 					vec2.v[X] = v0->x2 + (v1->x2 - v0->x2) * time;

	mov	eax, DWORD PTR _v1$[ebp]
	mov	ecx, DWORD PTR _v0$[ebp]
	fld	DWORD PTR [eax+12]
	fsub	DWORD PTR [ecx+12]
	fmul	DWORD PTR _time$[ebp]
	mov	edx, DWORD PTR _v0$[ebp]
	fadd	DWORD PTR [edx+12]
	fstp	DWORD PTR _vec2$[ebp]

; 1077 : 					vec2.v[Y] = v0->y2 + (v1->y2 - v0->y2) * time;

	mov	eax, DWORD PTR _v1$[ebp]
	mov	ecx, DWORD PTR _v0$[ebp]
	fld	DWORD PTR [eax+16]
	fsub	DWORD PTR [ecx+16]
	fmul	DWORD PTR _time$[ebp]
	mov	edx, DWORD PTR _v0$[ebp]
	fadd	DWORD PTR [edx+16]
	fstp	DWORD PTR _vec2$[ebp+4]

; 1078 : 					vec2.v[Z] = v0->z2 + (v1->z2 - v0->z2) * time;

	mov	eax, DWORD PTR _v1$[ebp]
	mov	ecx, DWORD PTR _v0$[ebp]
	fld	DWORD PTR [eax+20]
	fsub	DWORD PTR [ecx+20]
	fmul	DWORD PTR _time$[ebp]
	mov	edx, DWORD PTR _v0$[ebp]
	fadd	DWORD PTR [edx+20]
	fstp	DWORD PTR _vec2$[ebp+8]

; 1079 : 				}
; 1080 : 				else

	jmp	SHORT $L82045
$L82044:

; 1081 : 				{
; 1082 : 					vec2.v[X] = v0->x + (v1->x - v0->x) * time;

	mov	eax, DWORD PTR _v1$[ebp]
	mov	ecx, DWORD PTR _v0$[ebp]
	fld	DWORD PTR [eax]
	fsub	DWORD PTR [ecx]
	fmul	DWORD PTR _time$[ebp]
	mov	edx, DWORD PTR _v0$[ebp]
	fadd	DWORD PTR [edx]
	fstp	DWORD PTR _vec2$[ebp]

; 1083 : 					vec2.v[Y] = v0->y + (v1->y - v0->y) * time;

	mov	eax, DWORD PTR _v1$[ebp]
	mov	ecx, DWORD PTR _v0$[ebp]
	fld	DWORD PTR [eax+4]
	fsub	DWORD PTR [ecx+4]
	fmul	DWORD PTR _time$[ebp]
	mov	edx, DWORD PTR _v0$[ebp]
	fadd	DWORD PTR [edx+4]
	fstp	DWORD PTR _vec2$[ebp+4]

; 1084 : 					vec2.v[Z] = v0->z + (v1->z - v0->z) * time;

	mov	eax, DWORD PTR _v1$[ebp]
	mov	ecx, DWORD PTR _v0$[ebp]
	fld	DWORD PTR [eax+8]
	fsub	DWORD PTR [ecx+8]
	fmul	DWORD PTR _time$[ebp]
	mov	edx, DWORD PTR _v0$[ebp]
	fadd	DWORD PTR [edx+8]
	fstp	DWORD PTR _vec2$[ebp+8]
$L82045:

; 1085 : 				}
; 1086 : 				RotTransVector(mat, pos, &vec2, &vec);

	lea	eax, DWORD PTR _vec$[ebp]
	push	eax
	lea	ecx, DWORD PTR _vec2$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pos$[ebp]
	push	edx
	mov	eax, DWORD PTR _mat$[ebp]
	push	eax
	call	?RotTransVector@@YAXPATMatrixUnion@@PAUVectorStruct@@11@Z ; RotTransVector
	add	esp, 16					; 00000010H

; 1087 : 
; 1088 : 				DrawFacingPolyRot(&vec, &spinmat1, &poly, 1, -24.0f);

	push	-1044381696				; c1c00000H
	push	1
	lea	eax, DWORD PTR _poly$[ebp]
	push	eax
	lea	ecx, DWORD PTR _spinmat1$[ebp]
	push	ecx
	lea	edx, DWORD PTR _vec$[ebp]
	push	edx
	call	?DrawFacingPolyRot@@YAXPAUVectorStruct@@PATMatrixUnion@@PAUFACING_POLY@@JM@Z ; DrawFacingPolyRot
	add	esp, 20					; 00000014H

; 1089 : 				DrawFacingPolyRot(&vec, &spinmat2, &poly, 1, -24.0f);

	push	-1044381696				; c1c00000H
	push	1
	lea	eax, DWORD PTR _poly$[ebp]
	push	eax
	lea	ecx, DWORD PTR _spinmat2$[ebp]
	push	ecx
	lea	edx, DWORD PTR _vec$[ebp]
	push	edx
	call	?DrawFacingPolyRot@@YAXPAUVectorStruct@@PATMatrixUnion@@PAUFACING_POLY@@JM@Z ; DrawFacingPolyRot
	add	esp, 20					; 00000014H
$L82040:

; 1090 : 			}
; 1091 : 		}

	jmp	$L82023
$L82021:

; 1092 : 	}
; 1093 : }

	jmp	$L82019
$L81999:
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?SetModelVertsGlare@@YAXPAUMODEL@@PAUVectorStruct@@PATMatrixUnion@@F@Z ENDP ; SetModelVertsGlare
_TEXT	ENDS
EXTRN	?SemiPoly@@3PAUDRAW_SEMI_POLY@@A:BYTE		; SemiPoly
EXTRN	?SemiCount@@3JA:DWORD				; SemiCount
EXTRN	?TextureStateChange@@3JA:DWORD			; TextureStateChange
EXTRN	?RenderTP@@3FA:WORD				; RenderTP
EXTRN	?TexInfo@@3PAUTEXINFO@@A:DWORD			; TexInfo
EXTRN	?FlushOneBucketTEX0@@YAXPAUBUCKET_TEX0@@J@Z:NEAR ; FlushOneBucketTEX0
EXTRN	?FlushOneBucketTEX1@@YAXPAUBUCKET_TEX1@@J@Z:NEAR ; FlushOneBucketTEX1
; Function compile flags: /Odt /ZI
;	COMDAT ?DrawModelPolysClip@@YAXPAUMODEL@@JJ@Z
_TEXT	SEGMENT
__i$82615 = -96						; size = 4
__i$82586 = -92						; size = 4
__i$82557 = -88						; size = 4
__i$82483 = -84						; size = 4
__i$82454 = -80						; size = 4
__i$82425 = -76						; size = 4
__i$82396 = -72						; size = 4
__i$82323 = -68						; size = 4
__i$82294 = -64						; size = 4
__i$82265 = -60						; size = 4
__i$82185 = -56						; size = 4
__i$82156 = -52						; size = 4
__i$82127 = -48						; size = 4
__i$82098 = -44						; size = 4
_count$ = -40						; size = 2
_envbucket$ = -36					; size = 4
_bucketrgb$ = -32					; size = 4
_vertrgb$ = -28						; size = 4
_bucket$ = -24						; size = 4
_vert$ = -20						; size = 4
_mp$ = -16						; size = 4
_mrgb$ = -12						; size = 4
_clip$ = -8						; size = 4
_i$ = -4						; size = 4
_m$ = 8							; size = 4
_lit$ = 12						; size = 4
_env$ = 16						; size = 4
?DrawModelPolysClip@@YAXPAUMODEL@@JJ@Z PROC NEAR	; DrawModelPolysClip, COMDAT

; 1100 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 160				; 000000a0H
	push	ebx
	push	esi
	push	edi

; 1101 : 	long i, clip;
; 1102 : 	POLY_RGB *mrgb;
; 1103 : 	MODEL_POLY *mp;
; 1104 : 	VERTEX_TEX1 *vert;
; 1105 : 	BUCKET_TEX1 *bucket;
; 1106 : 	VERTEX_TEX0 *vertrgb;
; 1107 : 	BUCKET_TEX0 *bucketrgb;
; 1108 : 	BUCKET_ENV *envbucket;
; 1109 : 	short count;
; 1110 : 
; 1111 : // add to poly count
; 1112 : 
; 1113 : 	#if SCREEN_DEBUG
; 1114 : 	ModelPolyCount += (m->QuadNumTex + m->QuadNumRGB) * 2;

	mov	eax, DWORD PTR _m$[ebp]
	movsx	ecx, WORD PTR [eax+36]
	mov	edx, DWORD PTR _m$[ebp]
	movsx	eax, WORD PTR [edx+40]
	add	ecx, eax
	movsx	edx, WORD PTR ?ModelPolyCount@@3FA	; ModelPolyCount
	lea	eax, DWORD PTR [edx+ecx*2]
	mov	WORD PTR ?ModelPolyCount@@3FA, ax	; ModelPolyCount

; 1115 : 	ModelPolyCount += (m->TriNumTex + m->TriNumRGB);

	mov	eax, DWORD PTR _m$[ebp]
	movsx	ecx, WORD PTR [eax+38]
	mov	edx, DWORD PTR _m$[ebp]
	movsx	eax, WORD PTR [edx+42]
	add	ecx, eax
	movsx	edx, WORD PTR ?ModelPolyCount@@3FA	; ModelPolyCount
	add	edx, ecx
	mov	WORD PTR ?ModelPolyCount@@3FA, dx	; ModelPolyCount

; 1116 : 	if (env)

	cmp	DWORD PTR _env$[ebp], 0
	je	SHORT $L82061

; 1117 : 	{
; 1118 : 		ModelPolyCount += (m->QuadNumTex + m->QuadNumRGB) * 2;

	mov	eax, DWORD PTR _m$[ebp]
	movsx	ecx, WORD PTR [eax+36]
	mov	edx, DWORD PTR _m$[ebp]
	movsx	eax, WORD PTR [edx+40]
	add	ecx, eax
	movsx	edx, WORD PTR ?ModelPolyCount@@3FA	; ModelPolyCount
	lea	eax, DWORD PTR [edx+ecx*2]
	mov	WORD PTR ?ModelPolyCount@@3FA, ax	; ModelPolyCount

; 1119 : 		ModelPolyCount += (m->TriNumTex + m->TriNumRGB);

	mov	eax, DWORD PTR _m$[ebp]
	movsx	ecx, WORD PTR [eax+38]
	mov	edx, DWORD PTR _m$[ebp]
	movsx	eax, WORD PTR [edx+42]
	add	ecx, eax
	movsx	edx, WORD PTR ?ModelPolyCount@@3FA	; ModelPolyCount
	add	edx, ecx
	mov	WORD PTR ?ModelPolyCount@@3FA, dx	; ModelPolyCount
$L82061:

; 1120 : 	}	
; 1121 : 	#endif
; 1122 : 
; 1123 : // draw textured quads
; 1124 : 
; 1125 : 	mrgb = m->PolyRGB;

	mov	eax, DWORD PTR _m$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	mov	DWORD PTR _mrgb$[ebp], ecx

; 1126 : 	mp = m->PolyPtr;

	mov	eax, DWORD PTR _m$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	mov	DWORD PTR _mp$[ebp], ecx

; 1127 : 
; 1128 : 	for (i = m->QuadNumTex ; i ; i--, mrgb++, mp++)

	mov	eax, DWORD PTR _m$[ebp]
	movsx	ecx, WORD PTR [eax+36]
	mov	DWORD PTR _i$[ebp], ecx
	jmp	SHORT $L82062
$L82063:
	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	mov	ecx, DWORD PTR _mrgb$[ebp]
	add	ecx, 16					; 00000010H
	mov	DWORD PTR _mrgb$[ebp], ecx
	mov	edx, DWORD PTR _mp$[ebp]
	add	edx, 52					; 00000034H
	mov	DWORD PTR _mp$[ebp], edx
$L82062:
	cmp	DWORD PTR _i$[ebp], 0
	je	$L82064

; 1129 : 	{
; 1130 : 
; 1131 : // reject?
; 1132 : 
; 1133 : 		REJECT_MODEL_POLY();

	mov	eax, DWORD PTR _mp$[ebp]
	movsx	ecx, WORD PTR [eax]
	and	ecx, 2
	jne	SHORT $L82065
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	fld	DWORD PTR [ecx+36]
	mov	edx, DWORD PTR _mp$[ebp]
	mov	eax, DWORD PTR [edx+40]
	fsub	DWORD PTR [eax+36]
	mov	ecx, DWORD PTR _mp$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	fld	DWORD PTR [edx+40]
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	fsub	DWORD PTR [ecx+40]
	fmulp	ST(1), ST(0)
	mov	edx, DWORD PTR _mp$[ebp]
	mov	eax, DWORD PTR [edx+36]
	fld	DWORD PTR [eax+40]
	mov	ecx, DWORD PTR _mp$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	fsub	DWORD PTR [edx+40]
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	fld	DWORD PTR [ecx+36]
	mov	edx, DWORD PTR _mp$[ebp]
	mov	eax, DWORD PTR [edx+40]
	fsub	DWORD PTR [eax+36]
	fmulp	ST(1), ST(0)
	fsubp	ST(1), ST(0)
	fcomp	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $L82065
	jmp	$L82063
$L82065:

; 1134 : 		CLIP_QUAD();

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	movzx	edx, BYTE PTR [ecx+84]
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	movzx	eax, BYTE PTR [ecx+84]
	and	edx, eax
	mov	ecx, DWORD PTR _mp$[ebp]
	mov	eax, DWORD PTR [ecx+44]
	movzx	ecx, BYTE PTR [eax+84]
	and	edx, ecx
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	movzx	eax, BYTE PTR [ecx+84]
	and	edx, eax
	je	SHORT $L82067
	jmp	$L82063
$L82067:
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	movzx	edx, BYTE PTR [ecx+84]
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	movzx	eax, BYTE PTR [ecx+84]
	or	edx, eax
	mov	ecx, DWORD PTR _mp$[ebp]
	mov	eax, DWORD PTR [ecx+44]
	movzx	ecx, BYTE PTR [eax+84]
	or	edx, ecx
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	movzx	eax, BYTE PTR [ecx+84]
	or	edx, eax
	mov	DWORD PTR _clip$[ebp], edx

; 1135 : 		INC_POLY_COUNT(ModelDrawnCount, 2);

	movsx	eax, WORD PTR ?ModelDrawnCount@@3FA	; ModelDrawnCount
	add	eax, 2
	mov	WORD PTR ?ModelDrawnCount@@3FA, ax	; ModelDrawnCount

; 1136 : 
; 1137 : // get vert ptr
; 1138 : 
; 1139 : 		if (mp->Type & POLY_SEMITRANS)

	mov	eax, DWORD PTR _mp$[ebp]
	movsx	ecx, WORD PTR [eax]
	and	ecx, 4
	je	$L82068

; 1140 : 		{
; 1141 : 			if (!SEMI_POLY_FREE()) continue;

	cmp	DWORD PTR ?SemiCount@@3JA, 800		; SemiCount, 00000320H
	jl	SHORT $L82069
	jmp	$L82063
$L82069:

; 1142 : 			SEMI_POLY_SETUP(vert, ModelFog, 4, mp->Tpage, clip, (mp->Type & POLY_SEMITRANS_ONE) != 0);

	movsx	eax, WORD PTR _ModelFog
	mov	ecx, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	ecx, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[ecx+12], eax
	mov	eax, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	eax, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[eax+4], 4
	mov	eax, DWORD PTR _mp$[ebp]
	movsx	ecx, WORD PTR [eax+2]
	mov	edx, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	edx, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[edx+8], ecx
	cmp	DWORD PTR _clip$[ebp], 0
	je	SHORT $L82070
	mov	eax, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	eax, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[eax], 8
	jmp	SHORT $L82071
$L82070:
	mov	eax, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	eax, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[eax], 12 ; 0000000cH
$L82071:
	mov	eax, DWORD PTR _mp$[ebp]
	movsx	ecx, WORD PTR [eax]
	and	ecx, 256				; 00000100H
	neg	ecx
	sbb	ecx, ecx
	neg	ecx
	mov	edx, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	edx, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[edx+16], ecx
	mov	eax, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	eax, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[eax+20], 0
	mov	eax, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	eax, 152				; 00000098H
	add	eax, OFFSET FLAT:?SemiPoly@@3PAUDRAW_SEMI_POLY@@A+24
	mov	DWORD PTR _vert$[ebp], eax
	mov	ecx, DWORD PTR ?SemiCount@@3JA		; SemiCount
	add	ecx, 1
	mov	DWORD PTR ?SemiCount@@3JA, ecx		; SemiCount

; 1143 : 		}
; 1144 : 		else

	jmp	$L82072
$L82068:

; 1145 : 		{
; 1146 : 			if (clip) bucket = &ModelBucketHeadClip[mp->Tpage];

	cmp	DWORD PTR _clip$[ebp], 0
	je	SHORT $L82073
	mov	eax, DWORD PTR _mp$[ebp]
	movsx	ecx, WORD PTR [eax+2]
	imul	ecx, 7208				; 00001c28H
	add	ecx, DWORD PTR _ModelBucketHeadClip
	mov	DWORD PTR _bucket$[ebp], ecx

; 1147 : 			else bucket = &ModelBucketHead[mp->Tpage];

	jmp	SHORT $L82074
$L82073:
	mov	eax, DWORD PTR _mp$[ebp]
	movsx	ecx, WORD PTR [eax+2]
	imul	ecx, 7208				; 00001c28H
	add	ecx, DWORD PTR _ModelBucketHead
	mov	DWORD PTR _bucket$[ebp], ecx
$L82074:

; 1148 : 			count = (short)(bucket->CurrentVerts - bucket->Verts);

	mov	eax, DWORD PTR _bucket$[ebp]
	add	eax, 808				; 00000328H
	mov	ecx, DWORD PTR _bucket$[ebp]
	mov	edx, DWORD PTR [ecx+804]
	sub	edx, eax
	sar	edx, 5
	mov	WORD PTR _count$[ebp], dx

; 1149 : 
; 1150 : 			if (count > BUCKET_VERT_END)

	movsx	eax, WORD PTR _count$[ebp]
	cmp	eax, 196				; 000000c4H
	jle	$L82076

; 1151 : 			{
; 1152 : 				SET_TPAGE(mp->Tpage);

	movsx	eax, WORD PTR ?RenderTP@@3FA		; RenderTP
	mov	ecx, DWORD PTR _mp$[ebp]
	movsx	edx, WORD PTR [ecx+2]
	cmp	eax, edx
	je	SHORT $L82077
	mov	eax, DWORD PTR _mp$[ebp]
	mov	cx, WORD PTR [eax+2]
	mov	WORD PTR ?RenderTP@@3FA, cx		; RenderTP
	movsx	edx, WORD PTR ?RenderTP@@3FA		; RenderTP
	cmp	edx, -1
	jne	SHORT $L82078
	push	0
	push	0
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	edx
	call	DWORD PTR [ecx+152]
	mov	eax, DWORD PTR ?TextureStateChange@@3JA	; TextureStateChange
	add	eax, 1
	mov	DWORD PTR ?TextureStateChange@@3JA, eax	; TextureStateChange
	jmp	SHORT $L82077
$L82078:
	movsx	eax, WORD PTR ?RenderTP@@3FA		; RenderTP
	shl	eax, 6
	mov	ecx, DWORD PTR ?TexInfo@@3PAUTEXINFO@@A	; TexInfo
	mov	edx, DWORD PTR [ecx+eax+52]
	push	edx
	push	0
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	edx
	call	DWORD PTR [ecx+152]
	mov	eax, DWORD PTR ?TextureStateChange@@3JA	; TextureStateChange
	add	eax, 1
	mov	DWORD PTR ?TextureStateChange@@3JA, eax	; TextureStateChange
$L82077:

; 1153 : 				FlushOneBucketTEX1(bucket, clip);

	mov	eax, DWORD PTR _clip$[ebp]
	push	eax
	mov	ecx, DWORD PTR _bucket$[ebp]
	push	ecx
	call	?FlushOneBucketTEX1@@YAXPAUBUCKET_TEX1@@J@Z ; FlushOneBucketTEX1
	add	esp, 8

; 1154 : 				count = 0;

	mov	WORD PTR _count$[ebp], 0
$L82076:

; 1155 : 			}
; 1156 : 
; 1157 : 			bucket->CurrentIndex[0] = count;

	mov	eax, DWORD PTR _bucket$[ebp]
	mov	ecx, DWORD PTR [eax+800]
	mov	dx, WORD PTR _count$[ebp]
	mov	WORD PTR [ecx], dx

; 1158 : 			bucket->CurrentIndex[1] = count + 1;

	movsx	eax, WORD PTR _count$[ebp]
	add	eax, 1
	mov	ecx, DWORD PTR _bucket$[ebp]
	mov	edx, DWORD PTR [ecx+800]
	mov	WORD PTR [edx+2], ax

; 1159 : 			bucket->CurrentIndex[2] = count + 2;

	movsx	eax, WORD PTR _count$[ebp]
	add	eax, 2
	mov	ecx, DWORD PTR _bucket$[ebp]
	mov	edx, DWORD PTR [ecx+800]
	mov	WORD PTR [edx+4], ax

; 1160 : 			bucket->CurrentIndex[3] = count;

	mov	eax, DWORD PTR _bucket$[ebp]
	mov	ecx, DWORD PTR [eax+800]
	mov	dx, WORD PTR _count$[ebp]
	mov	WORD PTR [ecx+6], dx

; 1161 : 			bucket->CurrentIndex[4] = count + 2;

	movsx	eax, WORD PTR _count$[ebp]
	add	eax, 2
	mov	ecx, DWORD PTR _bucket$[ebp]
	mov	edx, DWORD PTR [ecx+800]
	mov	WORD PTR [edx+8], ax

; 1162 : 			bucket->CurrentIndex[5] = count + 3;

	movsx	eax, WORD PTR _count$[ebp]
	add	eax, 3
	mov	ecx, DWORD PTR _bucket$[ebp]
	mov	edx, DWORD PTR [ecx+800]
	mov	WORD PTR [edx+10], ax

; 1163 : 			bucket->CurrentIndex += 6;

	mov	eax, DWORD PTR _bucket$[ebp]
	mov	ecx, DWORD PTR [eax+800]
	add	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR _bucket$[ebp]
	mov	DWORD PTR [edx+800], ecx

; 1164 : 
; 1165 : 			vert = bucket->CurrentVerts;

	mov	eax, DWORD PTR _bucket$[ebp]
	mov	ecx, DWORD PTR [eax+804]
	mov	DWORD PTR _vert$[ebp], ecx

; 1166 : 			bucket->CurrentVerts += 4;

	mov	eax, DWORD PTR _bucket$[ebp]
	mov	ecx, DWORD PTR [eax+804]
	add	ecx, 128				; 00000080H
	mov	edx, DWORD PTR _bucket$[ebp]
	mov	DWORD PTR [edx+804], ecx
$L82072:

; 1167 : 		}
; 1168 : 
; 1169 : // copy vert info
; 1170 : 
; 1171 : 		COPY_QUAD_XYZRHW(vert);

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	add	ecx, 36					; 00000024H
	mov	edx, DWORD PTR _vert$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], ecx
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	add	ecx, 36					; 00000024H
	mov	edx, DWORD PTR _vert$[ebp]
	add	edx, 32					; 00000020H
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], ecx
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	add	ecx, 36					; 00000024H
	mov	edx, DWORD PTR _vert$[ebp]
	add	edx, 64					; 00000040H
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], ecx
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	add	ecx, 36					; 00000024H
	mov	edx, DWORD PTR _vert$[ebp]
	add	edx, 96					; 00000060H
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], ecx

; 1172 : 		COPY_QUAD_UV(vert);

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [eax+8]
	mov	eax, DWORD PTR _vert$[ebp]
	mov	DWORD PTR [eax+24], ecx
	mov	DWORD PTR [eax+28], edx
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [eax+16]
	mov	eax, DWORD PTR _vert$[ebp]
	mov	DWORD PTR [eax+56], ecx
	mov	DWORD PTR [eax+60], edx
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [eax+24]
	mov	eax, DWORD PTR _vert$[ebp]
	mov	DWORD PTR [eax+88], ecx
	mov	DWORD PTR [eax+92], edx
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR [eax+32]
	mov	eax, DWORD PTR _vert$[ebp]
	mov	DWORD PTR [eax+120], ecx
	mov	DWORD PTR [eax+124], edx

; 1173 : 
; 1174 : 		if (ModelFog)

	movsx	eax, WORD PTR _ModelFog
	test	eax, eax
	je	SHORT $L82096

; 1175 : 			COPY_QUAD_SPECULAR(vert);

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _vert$[ebp]
	mov	eax, DWORD PTR [ecx+56]
	mov	DWORD PTR [edx+20], eax
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	edx, DWORD PTR _vert$[ebp]
	mov	eax, DWORD PTR [ecx+56]
	mov	DWORD PTR [edx+52], eax
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	mov	edx, DWORD PTR _vert$[ebp]
	mov	eax, DWORD PTR [ecx+56]
	mov	DWORD PTR [edx+84], eax
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	mov	edx, DWORD PTR _vert$[ebp]
	mov	eax, DWORD PTR [ecx+56]
	mov	DWORD PTR [edx+116], eax
$L82096:

; 1176 : 
; 1177 : 		if (lit)

	cmp	DWORD PTR _lit$[ebp], 0
	je	$L82097

; 1178 : 		{
; 1179 : 			COPY_MODEL_QUAD_COLOR_LIT(vert);

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _mrgb$[ebp]
	movzx	eax, BYTE PTR [edx+2]
	add	eax, DWORD PTR [ecx+68]
	mov	DWORD PTR __i$82098[ebp], eax
	cmp	DWORD PTR __i$82098[ebp], 255		; 000000ffH
	jle	SHORT $L82100
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+18], 255			; 000000ffH
	jmp	SHORT $L82102
$L82100:
	cmp	DWORD PTR __i$82098[ebp], 0
	jge	SHORT $L82103
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+18], 0
	jmp	SHORT $L82102
$L82103:
	mov	eax, DWORD PTR _vert$[ebp]
	mov	cl, BYTE PTR __i$82098[ebp]
	mov	BYTE PTR [eax+18], cl
$L82102:
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _mrgb$[ebp]
	movzx	eax, BYTE PTR [edx+1]
	add	eax, DWORD PTR [ecx+72]
	mov	DWORD PTR __i$82098[ebp], eax
	cmp	DWORD PTR __i$82098[ebp], 255		; 000000ffH
	jle	SHORT $L82109
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+17], 255			; 000000ffH
	jmp	SHORT $L82111
$L82109:
	cmp	DWORD PTR __i$82098[ebp], 0
	jge	SHORT $L82112
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+17], 0
	jmp	SHORT $L82111
$L82112:
	mov	eax, DWORD PTR _vert$[ebp]
	mov	cl, BYTE PTR __i$82098[ebp]
	mov	BYTE PTR [eax+17], cl
$L82111:
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _mrgb$[ebp]
	movzx	eax, BYTE PTR [edx]
	add	eax, DWORD PTR [ecx+76]
	mov	DWORD PTR __i$82098[ebp], eax
	cmp	DWORD PTR __i$82098[ebp], 255		; 000000ffH
	jle	SHORT $L82118
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+16], 255			; 000000ffH
	jmp	SHORT $L82120
$L82118:
	cmp	DWORD PTR __i$82098[ebp], 0
	jge	SHORT $L82121
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+16], 0
	jmp	SHORT $L82120
$L82121:
	mov	eax, DWORD PTR _vert$[ebp]
	mov	cl, BYTE PTR __i$82098[ebp]
	mov	BYTE PTR [eax+16], cl
$L82120:
	mov	eax, DWORD PTR _vert$[ebp]
	mov	ecx, DWORD PTR _mrgb$[ebp]
	mov	dl, BYTE PTR [ecx+3]
	mov	BYTE PTR [eax+19], dl
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	edx, DWORD PTR _mrgb$[ebp]
	movzx	eax, BYTE PTR [edx+6]
	add	eax, DWORD PTR [ecx+68]
	mov	DWORD PTR __i$82127[ebp], eax
	cmp	DWORD PTR __i$82127[ebp], 255		; 000000ffH
	jle	SHORT $L82129
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+50], 255			; 000000ffH
	jmp	SHORT $L82131
$L82129:
	cmp	DWORD PTR __i$82127[ebp], 0
	jge	SHORT $L82132
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+50], 0
	jmp	SHORT $L82131
$L82132:
	mov	eax, DWORD PTR _vert$[ebp]
	mov	cl, BYTE PTR __i$82127[ebp]
	mov	BYTE PTR [eax+50], cl
$L82131:
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	edx, DWORD PTR _mrgb$[ebp]
	movzx	eax, BYTE PTR [edx+5]
	add	eax, DWORD PTR [ecx+72]
	mov	DWORD PTR __i$82127[ebp], eax
	cmp	DWORD PTR __i$82127[ebp], 255		; 000000ffH
	jle	SHORT $L82138
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+49], 255			; 000000ffH
	jmp	SHORT $L82140
$L82138:
	cmp	DWORD PTR __i$82127[ebp], 0
	jge	SHORT $L82141
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+49], 0
	jmp	SHORT $L82140
$L82141:
	mov	eax, DWORD PTR _vert$[ebp]
	mov	cl, BYTE PTR __i$82127[ebp]
	mov	BYTE PTR [eax+49], cl
$L82140:
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	edx, DWORD PTR _mrgb$[ebp]
	movzx	eax, BYTE PTR [edx+4]
	add	eax, DWORD PTR [ecx+76]
	mov	DWORD PTR __i$82127[ebp], eax
	cmp	DWORD PTR __i$82127[ebp], 255		; 000000ffH
	jle	SHORT $L82147
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+48], 255			; 000000ffH
	jmp	SHORT $L82149
$L82147:
	cmp	DWORD PTR __i$82127[ebp], 0
	jge	SHORT $L82150
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+48], 0
	jmp	SHORT $L82149
$L82150:
	mov	eax, DWORD PTR _vert$[ebp]
	mov	cl, BYTE PTR __i$82127[ebp]
	mov	BYTE PTR [eax+48], cl
$L82149:
	mov	eax, DWORD PTR _vert$[ebp]
	mov	ecx, DWORD PTR _mrgb$[ebp]
	mov	dl, BYTE PTR [ecx+7]
	mov	BYTE PTR [eax+51], dl
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	mov	edx, DWORD PTR _mrgb$[ebp]
	movzx	eax, BYTE PTR [edx+10]
	add	eax, DWORD PTR [ecx+68]
	mov	DWORD PTR __i$82156[ebp], eax
	cmp	DWORD PTR __i$82156[ebp], 255		; 000000ffH
	jle	SHORT $L82158
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+82], 255			; 000000ffH
	jmp	SHORT $L82160
$L82158:
	cmp	DWORD PTR __i$82156[ebp], 0
	jge	SHORT $L82161
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+82], 0
	jmp	SHORT $L82160
$L82161:
	mov	eax, DWORD PTR _vert$[ebp]
	mov	cl, BYTE PTR __i$82156[ebp]
	mov	BYTE PTR [eax+82], cl
$L82160:
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	mov	edx, DWORD PTR _mrgb$[ebp]
	movzx	eax, BYTE PTR [edx+9]
	add	eax, DWORD PTR [ecx+72]
	mov	DWORD PTR __i$82156[ebp], eax
	cmp	DWORD PTR __i$82156[ebp], 255		; 000000ffH
	jle	SHORT $L82167
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+81], 255			; 000000ffH
	jmp	SHORT $L82169
$L82167:
	cmp	DWORD PTR __i$82156[ebp], 0
	jge	SHORT $L82170
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+81], 0
	jmp	SHORT $L82169
$L82170:
	mov	eax, DWORD PTR _vert$[ebp]
	mov	cl, BYTE PTR __i$82156[ebp]
	mov	BYTE PTR [eax+81], cl
$L82169:
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	mov	edx, DWORD PTR _mrgb$[ebp]
	movzx	eax, BYTE PTR [edx+8]
	add	eax, DWORD PTR [ecx+76]
	mov	DWORD PTR __i$82156[ebp], eax
	cmp	DWORD PTR __i$82156[ebp], 255		; 000000ffH
	jle	SHORT $L82176
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+80], 255			; 000000ffH
	jmp	SHORT $L82178
$L82176:
	cmp	DWORD PTR __i$82156[ebp], 0
	jge	SHORT $L82179
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+80], 0
	jmp	SHORT $L82178
$L82179:
	mov	eax, DWORD PTR _vert$[ebp]
	mov	cl, BYTE PTR __i$82156[ebp]
	mov	BYTE PTR [eax+80], cl
$L82178:
	mov	eax, DWORD PTR _vert$[ebp]
	mov	ecx, DWORD PTR _mrgb$[ebp]
	mov	dl, BYTE PTR [ecx+11]
	mov	BYTE PTR [eax+83], dl
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	mov	edx, DWORD PTR _mrgb$[ebp]
	movzx	eax, BYTE PTR [edx+14]
	add	eax, DWORD PTR [ecx+68]
	mov	DWORD PTR __i$82185[ebp], eax
	cmp	DWORD PTR __i$82185[ebp], 255		; 000000ffH
	jle	SHORT $L82187
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+114], 255			; 000000ffH
	jmp	SHORT $L82189
$L82187:
	cmp	DWORD PTR __i$82185[ebp], 0
	jge	SHORT $L82190
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+114], 0
	jmp	SHORT $L82189
$L82190:
	mov	eax, DWORD PTR _vert$[ebp]
	mov	cl, BYTE PTR __i$82185[ebp]
	mov	BYTE PTR [eax+114], cl
$L82189:
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	mov	edx, DWORD PTR _mrgb$[ebp]
	movzx	eax, BYTE PTR [edx+13]
	add	eax, DWORD PTR [ecx+72]
	mov	DWORD PTR __i$82185[ebp], eax
	cmp	DWORD PTR __i$82185[ebp], 255		; 000000ffH
	jle	SHORT $L82196
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+113], 255			; 000000ffH
	jmp	SHORT $L82198
$L82196:
	cmp	DWORD PTR __i$82185[ebp], 0
	jge	SHORT $L82199
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+113], 0
	jmp	SHORT $L82198
$L82199:
	mov	eax, DWORD PTR _vert$[ebp]
	mov	cl, BYTE PTR __i$82185[ebp]
	mov	BYTE PTR [eax+113], cl
$L82198:
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	mov	edx, DWORD PTR _mrgb$[ebp]
	movzx	eax, BYTE PTR [edx+12]
	add	eax, DWORD PTR [ecx+76]
	mov	DWORD PTR __i$82185[ebp], eax
	cmp	DWORD PTR __i$82185[ebp], 255		; 000000ffH
	jle	SHORT $L82205
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+112], 255			; 000000ffH
	jmp	SHORT $L82207
$L82205:
	cmp	DWORD PTR __i$82185[ebp], 0
	jge	SHORT $L82208
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+112], 0
	jmp	SHORT $L82207
$L82208:
	mov	eax, DWORD PTR _vert$[ebp]
	mov	cl, BYTE PTR __i$82185[ebp]
	mov	BYTE PTR [eax+112], cl
$L82207:
	mov	eax, DWORD PTR _vert$[ebp]
	mov	ecx, DWORD PTR _mrgb$[ebp]
	mov	dl, BYTE PTR [ecx+15]
	mov	BYTE PTR [eax+115], dl

; 1180 : 		}
; 1181 : 		else

	jmp	SHORT $L82214
$L82097:

; 1182 : 		{
; 1183 : 			COPY_MODEL_QUAD_COLOR(vert);

	mov	eax, DWORD PTR _vert$[ebp]
	mov	ecx, DWORD PTR _mrgb$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+16], edx
	mov	eax, DWORD PTR _vert$[ebp]
	mov	ecx, DWORD PTR _mrgb$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+48], edx
	mov	eax, DWORD PTR _vert$[ebp]
	mov	ecx, DWORD PTR _mrgb$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+80], edx
	mov	eax, DWORD PTR _vert$[ebp]
	mov	ecx, DWORD PTR _mrgb$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+112], edx
$L82214:

; 1184 : 		}
; 1185 : 
; 1186 : // env?
; 1187 : 
; 1188 : 		if (env)

	cmp	DWORD PTR _env$[ebp], 0
	je	$L82219

; 1189 : 		{
; 1190 : 			REJECT_MODEL_ENV_POLY();

	mov	eax, DWORD PTR _mp$[ebp]
	movsx	ecx, WORD PTR [eax]
	and	ecx, 1024				; 00000400H
	je	SHORT $L82220
	jmp	$L82063
$L82220:

; 1191 : 			INC_POLY_COUNT(ModelDrawnCount, 2);

	movsx	eax, WORD PTR ?ModelDrawnCount@@3FA	; ModelDrawnCount
	add	eax, 2
	mov	WORD PTR ?ModelDrawnCount@@3FA, ax	; ModelDrawnCount

; 1192 : 
; 1193 : // get env vert ptr
; 1194 : 
; 1195 : 			if (clip) envbucket = ModelBucketHeadEnvClip;

	cmp	DWORD PTR _clip$[ebp], 0
	je	SHORT $L82221
	mov	eax, DWORD PTR _ModelBucketHeadEnvClip
	mov	DWORD PTR _envbucket$[ebp], eax

; 1196 : 			else envbucket = ModelBucketHeadEnv;

	jmp	SHORT $L82222
$L82221:
	mov	eax, DWORD PTR _ModelBucketHeadEnv
	mov	DWORD PTR _envbucket$[ebp], eax
$L82222:

; 1197 : 			count = (short)(envbucket->CurrentVerts - envbucket->Verts);

	mov	eax, DWORD PTR _envbucket$[ebp]
	add	eax, 8008				; 00001f48H
	mov	ecx, DWORD PTR _envbucket$[ebp]
	mov	edx, DWORD PTR [ecx+8004]
	sub	edx, eax
	sar	edx, 5
	mov	WORD PTR _count$[ebp], dx

; 1198 : 
; 1199 : 			if (count > ENV_VERT_END)

	movsx	eax, WORD PTR _count$[ebp]
	cmp	eax, 1996				; 000007ccH
	jle	SHORT $L82224

; 1200 : 				continue;

	jmp	$L82063
$L82224:

; 1201 : 
; 1202 : 			envbucket->CurrentIndex[0] = count;

	mov	eax, DWORD PTR _envbucket$[ebp]
	mov	ecx, DWORD PTR [eax+8000]
	mov	dx, WORD PTR _count$[ebp]
	mov	WORD PTR [ecx], dx

; 1203 : 			envbucket->CurrentIndex[1] = count + 1;

	movsx	eax, WORD PTR _count$[ebp]
	add	eax, 1
	mov	ecx, DWORD PTR _envbucket$[ebp]
	mov	edx, DWORD PTR [ecx+8000]
	mov	WORD PTR [edx+2], ax

; 1204 : 			envbucket->CurrentIndex[2] = count + 2;

	movsx	eax, WORD PTR _count$[ebp]
	add	eax, 2
	mov	ecx, DWORD PTR _envbucket$[ebp]
	mov	edx, DWORD PTR [ecx+8000]
	mov	WORD PTR [edx+4], ax

; 1205 : 			envbucket->CurrentIndex[3] = count;

	mov	eax, DWORD PTR _envbucket$[ebp]
	mov	ecx, DWORD PTR [eax+8000]
	mov	dx, WORD PTR _count$[ebp]
	mov	WORD PTR [ecx+6], dx

; 1206 : 			envbucket->CurrentIndex[4] = count + 2;

	movsx	eax, WORD PTR _count$[ebp]
	add	eax, 2
	mov	ecx, DWORD PTR _envbucket$[ebp]
	mov	edx, DWORD PTR [ecx+8000]
	mov	WORD PTR [edx+8], ax

; 1207 : 			envbucket->CurrentIndex[5] = count + 3;

	movsx	eax, WORD PTR _count$[ebp]
	add	eax, 3
	mov	ecx, DWORD PTR _envbucket$[ebp]
	mov	edx, DWORD PTR [ecx+8000]
	mov	WORD PTR [edx+10], ax

; 1208 : 			envbucket->CurrentIndex += 6;

	mov	eax, DWORD PTR _envbucket$[ebp]
	mov	ecx, DWORD PTR [eax+8000]
	add	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR _envbucket$[ebp]
	mov	DWORD PTR [edx+8000], ecx

; 1209 : 
; 1210 : 			vert = envbucket->CurrentVerts;

	mov	eax, DWORD PTR _envbucket$[ebp]
	mov	ecx, DWORD PTR [eax+8004]
	mov	DWORD PTR _vert$[ebp], ecx

; 1211 : 			envbucket->CurrentVerts += 4;

	mov	eax, DWORD PTR _envbucket$[ebp]
	mov	ecx, DWORD PTR [eax+8004]
	add	ecx, 128				; 00000080H
	mov	edx, DWORD PTR _envbucket$[ebp]
	mov	DWORD PTR [edx+8004], ecx

; 1212 : 
; 1213 : // copy env vert info
; 1214 : 
; 1215 : 			*(MEM32*)&vert[0] = *(MEM32*)&mp->v0->sx;

	mov	eax, DWORD PTR _mp$[ebp]
	mov	esi, DWORD PTR [eax+36]
	add	esi, 36					; 00000024H
	mov	ecx, 8
	mov	edi, DWORD PTR _vert$[ebp]
	rep movsd

; 1216 : 			*(MEM32*)&vert[1] = *(MEM32*)&mp->v1->sx;

	mov	eax, DWORD PTR _mp$[ebp]
	mov	esi, DWORD PTR [eax+40]
	add	esi, 36					; 00000024H
	mov	edi, DWORD PTR _vert$[ebp]
	add	edi, 32					; 00000020H
	mov	ecx, 8
	rep movsd

; 1217 : 			*(MEM32*)&vert[2] = *(MEM32*)&mp->v2->sx;

	mov	eax, DWORD PTR _mp$[ebp]
	mov	esi, DWORD PTR [eax+44]
	add	esi, 36					; 00000024H
	mov	edi, DWORD PTR _vert$[ebp]
	add	edi, 64					; 00000040H
	mov	ecx, 8
	rep movsd

; 1218 : 			*(MEM32*)&vert[3] = *(MEM32*)&mp->v3->sx;

	mov	eax, DWORD PTR _mp$[ebp]
	mov	esi, DWORD PTR [eax+48]
	add	esi, 36					; 00000024H
	mov	edi, DWORD PTR _vert$[ebp]
	add	edi, 96					; 00000060H
	mov	ecx, 8
	rep movsd
$L82219:

; 1219 : 		}
; 1220 : 	}

	jmp	$L82063
$L82064:

; 1221 : 
; 1222 : // draw textured tri's
; 1223 : 
; 1224 : 	for (i = m->TriNumTex ; i ; i--, mrgb++, mp++)

	mov	eax, DWORD PTR _m$[ebp]
	movsx	ecx, WORD PTR [eax+38]
	mov	DWORD PTR _i$[ebp], ecx
	jmp	SHORT $L82233
$L82234:
	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	mov	ecx, DWORD PTR _mrgb$[ebp]
	add	ecx, 16					; 00000010H
	mov	DWORD PTR _mrgb$[ebp], ecx
	mov	edx, DWORD PTR _mp$[ebp]
	add	edx, 52					; 00000034H
	mov	DWORD PTR _mp$[ebp], edx
$L82233:
	cmp	DWORD PTR _i$[ebp], 0
	je	$L82235

; 1225 : 	{
; 1226 : 
; 1227 : // reject?
; 1228 : 
; 1229 : 		REJECT_MODEL_POLY();

	mov	eax, DWORD PTR _mp$[ebp]
	movsx	ecx, WORD PTR [eax]
	and	ecx, 2
	jne	SHORT $L82236
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	fld	DWORD PTR [ecx+36]
	mov	edx, DWORD PTR _mp$[ebp]
	mov	eax, DWORD PTR [edx+40]
	fsub	DWORD PTR [eax+36]
	mov	ecx, DWORD PTR _mp$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	fld	DWORD PTR [edx+40]
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	fsub	DWORD PTR [ecx+40]
	fmulp	ST(1), ST(0)
	mov	edx, DWORD PTR _mp$[ebp]
	mov	eax, DWORD PTR [edx+36]
	fld	DWORD PTR [eax+40]
	mov	ecx, DWORD PTR _mp$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	fsub	DWORD PTR [edx+40]
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	fld	DWORD PTR [ecx+36]
	mov	edx, DWORD PTR _mp$[ebp]
	mov	eax, DWORD PTR [edx+40]
	fsub	DWORD PTR [eax+36]
	fmulp	ST(1), ST(0)
	fsubp	ST(1), ST(0)
	fcomp	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $L82236
	jmp	$L82234
$L82236:

; 1230 : 		CLIP_TRI();

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	movzx	edx, BYTE PTR [ecx+84]
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	movzx	eax, BYTE PTR [ecx+84]
	and	edx, eax
	mov	ecx, DWORD PTR _mp$[ebp]
	mov	eax, DWORD PTR [ecx+44]
	movzx	ecx, BYTE PTR [eax+84]
	and	edx, ecx
	je	SHORT $L82238
	jmp	$L82234
$L82238:
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	movzx	edx, BYTE PTR [ecx+84]
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	movzx	eax, BYTE PTR [ecx+84]
	or	edx, eax
	mov	ecx, DWORD PTR _mp$[ebp]
	mov	eax, DWORD PTR [ecx+44]
	movzx	ecx, BYTE PTR [eax+84]
	or	edx, ecx
	mov	DWORD PTR _clip$[ebp], edx

; 1231 : 		INC_POLY_COUNT(ModelDrawnCount, 1);

	movsx	eax, WORD PTR ?ModelDrawnCount@@3FA	; ModelDrawnCount
	add	eax, 1
	mov	WORD PTR ?ModelDrawnCount@@3FA, ax	; ModelDrawnCount

; 1232 : 
; 1233 : // get vert ptr
; 1234 : 
; 1235 : 		if (mp->Type & POLY_SEMITRANS)

	mov	eax, DWORD PTR _mp$[ebp]
	movsx	ecx, WORD PTR [eax]
	and	ecx, 4
	je	$L82239

; 1236 : 		{
; 1237 : 			if (!SEMI_POLY_FREE()) continue;

	cmp	DWORD PTR ?SemiCount@@3JA, 800		; SemiCount, 00000320H
	jl	SHORT $L82240
	jmp	$L82234
$L82240:

; 1238 : 			SEMI_POLY_SETUP(vert, ModelFog, 3, mp->Tpage, clip, (mp->Type & POLY_SEMITRANS_ONE) != 0);

	movsx	eax, WORD PTR _ModelFog
	mov	ecx, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	ecx, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[ecx+12], eax
	mov	eax, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	eax, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[eax+4], 3
	mov	eax, DWORD PTR _mp$[ebp]
	movsx	ecx, WORD PTR [eax+2]
	mov	edx, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	edx, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[edx+8], ecx
	cmp	DWORD PTR _clip$[ebp], 0
	je	SHORT $L82241
	mov	eax, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	eax, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[eax], 8
	jmp	SHORT $L82242
$L82241:
	mov	eax, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	eax, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[eax], 12 ; 0000000cH
$L82242:
	mov	eax, DWORD PTR _mp$[ebp]
	movsx	ecx, WORD PTR [eax]
	and	ecx, 256				; 00000100H
	neg	ecx
	sbb	ecx, ecx
	neg	ecx
	mov	edx, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	edx, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[edx+16], ecx
	mov	eax, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	eax, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[eax+20], 0
	mov	eax, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	eax, 152				; 00000098H
	add	eax, OFFSET FLAT:?SemiPoly@@3PAUDRAW_SEMI_POLY@@A+24
	mov	DWORD PTR _vert$[ebp], eax
	mov	ecx, DWORD PTR ?SemiCount@@3JA		; SemiCount
	add	ecx, 1
	mov	DWORD PTR ?SemiCount@@3JA, ecx		; SemiCount

; 1239 : 		}
; 1240 : 		else

	jmp	$L82243
$L82239:

; 1241 : 		{
; 1242 : 			if (clip) bucket = &ModelBucketHeadClip[mp->Tpage];

	cmp	DWORD PTR _clip$[ebp], 0
	je	SHORT $L82244
	mov	eax, DWORD PTR _mp$[ebp]
	movsx	ecx, WORD PTR [eax+2]
	imul	ecx, 7208				; 00001c28H
	add	ecx, DWORD PTR _ModelBucketHeadClip
	mov	DWORD PTR _bucket$[ebp], ecx

; 1243 : 			else bucket = &ModelBucketHead[mp->Tpage];

	jmp	SHORT $L82245
$L82244:
	mov	eax, DWORD PTR _mp$[ebp]
	movsx	ecx, WORD PTR [eax+2]
	imul	ecx, 7208				; 00001c28H
	add	ecx, DWORD PTR _ModelBucketHead
	mov	DWORD PTR _bucket$[ebp], ecx
$L82245:

; 1244 : 			count = (short)(bucket->CurrentVerts - bucket->Verts);

	mov	eax, DWORD PTR _bucket$[ebp]
	add	eax, 808				; 00000328H
	mov	ecx, DWORD PTR _bucket$[ebp]
	mov	edx, DWORD PTR [ecx+804]
	sub	edx, eax
	sar	edx, 5
	mov	WORD PTR _count$[ebp], dx

; 1245 : 
; 1246 : 			if (count > BUCKET_VERT_END)

	movsx	eax, WORD PTR _count$[ebp]
	cmp	eax, 196				; 000000c4H
	jle	$L82247

; 1247 : 			{
; 1248 : 				SET_TPAGE(mp->Tpage);

	movsx	eax, WORD PTR ?RenderTP@@3FA		; RenderTP
	mov	ecx, DWORD PTR _mp$[ebp]
	movsx	edx, WORD PTR [ecx+2]
	cmp	eax, edx
	je	SHORT $L82248
	mov	eax, DWORD PTR _mp$[ebp]
	mov	cx, WORD PTR [eax+2]
	mov	WORD PTR ?RenderTP@@3FA, cx		; RenderTP
	movsx	edx, WORD PTR ?RenderTP@@3FA		; RenderTP
	cmp	edx, -1
	jne	SHORT $L82249
	push	0
	push	0
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	edx
	call	DWORD PTR [ecx+152]
	mov	eax, DWORD PTR ?TextureStateChange@@3JA	; TextureStateChange
	add	eax, 1
	mov	DWORD PTR ?TextureStateChange@@3JA, eax	; TextureStateChange
	jmp	SHORT $L82248
$L82249:
	movsx	eax, WORD PTR ?RenderTP@@3FA		; RenderTP
	shl	eax, 6
	mov	ecx, DWORD PTR ?TexInfo@@3PAUTEXINFO@@A	; TexInfo
	mov	edx, DWORD PTR [ecx+eax+52]
	push	edx
	push	0
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	edx
	call	DWORD PTR [ecx+152]
	mov	eax, DWORD PTR ?TextureStateChange@@3JA	; TextureStateChange
	add	eax, 1
	mov	DWORD PTR ?TextureStateChange@@3JA, eax	; TextureStateChange
$L82248:

; 1249 : 				FlushOneBucketTEX1(bucket, clip);

	mov	eax, DWORD PTR _clip$[ebp]
	push	eax
	mov	ecx, DWORD PTR _bucket$[ebp]
	push	ecx
	call	?FlushOneBucketTEX1@@YAXPAUBUCKET_TEX1@@J@Z ; FlushOneBucketTEX1
	add	esp, 8

; 1250 : 				count = 0;

	mov	WORD PTR _count$[ebp], 0
$L82247:

; 1251 : 			}
; 1252 : 
; 1253 : 			bucket->CurrentIndex[0] = count;

	mov	eax, DWORD PTR _bucket$[ebp]
	mov	ecx, DWORD PTR [eax+800]
	mov	dx, WORD PTR _count$[ebp]
	mov	WORD PTR [ecx], dx

; 1254 : 			bucket->CurrentIndex[1] = count + 1;

	movsx	eax, WORD PTR _count$[ebp]
	add	eax, 1
	mov	ecx, DWORD PTR _bucket$[ebp]
	mov	edx, DWORD PTR [ecx+800]
	mov	WORD PTR [edx+2], ax

; 1255 : 			bucket->CurrentIndex[2] = count + 2;

	movsx	eax, WORD PTR _count$[ebp]
	add	eax, 2
	mov	ecx, DWORD PTR _bucket$[ebp]
	mov	edx, DWORD PTR [ecx+800]
	mov	WORD PTR [edx+4], ax

; 1256 : 			bucket->CurrentIndex += 3;

	mov	eax, DWORD PTR _bucket$[ebp]
	mov	ecx, DWORD PTR [eax+800]
	add	ecx, 6
	mov	edx, DWORD PTR _bucket$[ebp]
	mov	DWORD PTR [edx+800], ecx

; 1257 : 
; 1258 : 			vert = bucket->CurrentVerts;

	mov	eax, DWORD PTR _bucket$[ebp]
	mov	ecx, DWORD PTR [eax+804]
	mov	DWORD PTR _vert$[ebp], ecx

; 1259 : 			bucket->CurrentVerts += 3;

	mov	eax, DWORD PTR _bucket$[ebp]
	mov	ecx, DWORD PTR [eax+804]
	add	ecx, 96					; 00000060H
	mov	edx, DWORD PTR _bucket$[ebp]
	mov	DWORD PTR [edx+804], ecx
$L82243:

; 1260 : 		}
; 1261 : 
; 1262 : // copy vert info
; 1263 : 
; 1264 : 		COPY_TRI_XYZRHW(vert);

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	add	ecx, 36					; 00000024H
	mov	edx, DWORD PTR _vert$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], ecx
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	add	ecx, 36					; 00000024H
	mov	edx, DWORD PTR _vert$[ebp]
	add	edx, 32					; 00000020H
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], ecx
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	add	ecx, 36					; 00000024H
	mov	edx, DWORD PTR _vert$[ebp]
	add	edx, 64					; 00000040H
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], ecx

; 1265 : 		COPY_TRI_UV(vert);

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [eax+8]
	mov	eax, DWORD PTR _vert$[ebp]
	mov	DWORD PTR [eax+24], ecx
	mov	DWORD PTR [eax+28], edx
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [eax+16]
	mov	eax, DWORD PTR _vert$[ebp]
	mov	DWORD PTR [eax+56], ecx
	mov	DWORD PTR [eax+60], edx
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [eax+24]
	mov	eax, DWORD PTR _vert$[ebp]
	mov	DWORD PTR [eax+88], ecx
	mov	DWORD PTR [eax+92], edx

; 1266 : 
; 1267 : 		if (ModelFog)

	movsx	eax, WORD PTR _ModelFog
	test	eax, eax
	je	SHORT $L82263

; 1268 : 			COPY_TRI_SPECULAR(vert);

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _vert$[ebp]
	mov	eax, DWORD PTR [ecx+56]
	mov	DWORD PTR [edx+20], eax
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	edx, DWORD PTR _vert$[ebp]
	mov	eax, DWORD PTR [ecx+56]
	mov	DWORD PTR [edx+52], eax
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	mov	edx, DWORD PTR _vert$[ebp]
	mov	eax, DWORD PTR [ecx+56]
	mov	DWORD PTR [edx+84], eax
$L82263:

; 1269 : 
; 1270 : 		if (lit)

	cmp	DWORD PTR _lit$[ebp], 0
	je	$L82264

; 1271 : 		{
; 1272 : 			COPY_MODEL_TRI_COLOR_LIT(vert);

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _mrgb$[ebp]
	movzx	eax, BYTE PTR [edx+2]
	add	eax, DWORD PTR [ecx+68]
	mov	DWORD PTR __i$82265[ebp], eax
	cmp	DWORD PTR __i$82265[ebp], 255		; 000000ffH
	jle	SHORT $L82267
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+18], 255			; 000000ffH
	jmp	SHORT $L82269
$L82267:
	cmp	DWORD PTR __i$82265[ebp], 0
	jge	SHORT $L82270
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+18], 0
	jmp	SHORT $L82269
$L82270:
	mov	eax, DWORD PTR _vert$[ebp]
	mov	cl, BYTE PTR __i$82265[ebp]
	mov	BYTE PTR [eax+18], cl
$L82269:
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _mrgb$[ebp]
	movzx	eax, BYTE PTR [edx+1]
	add	eax, DWORD PTR [ecx+72]
	mov	DWORD PTR __i$82265[ebp], eax
	cmp	DWORD PTR __i$82265[ebp], 255		; 000000ffH
	jle	SHORT $L82276
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+17], 255			; 000000ffH
	jmp	SHORT $L82278
$L82276:
	cmp	DWORD PTR __i$82265[ebp], 0
	jge	SHORT $L82279
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+17], 0
	jmp	SHORT $L82278
$L82279:
	mov	eax, DWORD PTR _vert$[ebp]
	mov	cl, BYTE PTR __i$82265[ebp]
	mov	BYTE PTR [eax+17], cl
$L82278:
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _mrgb$[ebp]
	movzx	eax, BYTE PTR [edx]
	add	eax, DWORD PTR [ecx+76]
	mov	DWORD PTR __i$82265[ebp], eax
	cmp	DWORD PTR __i$82265[ebp], 255		; 000000ffH
	jle	SHORT $L82285
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+16], 255			; 000000ffH
	jmp	SHORT $L82287
$L82285:
	cmp	DWORD PTR __i$82265[ebp], 0
	jge	SHORT $L82288
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+16], 0
	jmp	SHORT $L82287
$L82288:
	mov	eax, DWORD PTR _vert$[ebp]
	mov	cl, BYTE PTR __i$82265[ebp]
	mov	BYTE PTR [eax+16], cl
$L82287:
	mov	eax, DWORD PTR _vert$[ebp]
	mov	ecx, DWORD PTR _mrgb$[ebp]
	mov	dl, BYTE PTR [ecx+3]
	mov	BYTE PTR [eax+19], dl
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	edx, DWORD PTR _mrgb$[ebp]
	movzx	eax, BYTE PTR [edx+6]
	add	eax, DWORD PTR [ecx+68]
	mov	DWORD PTR __i$82294[ebp], eax
	cmp	DWORD PTR __i$82294[ebp], 255		; 000000ffH
	jle	SHORT $L82296
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+50], 255			; 000000ffH
	jmp	SHORT $L82298
$L82296:
	cmp	DWORD PTR __i$82294[ebp], 0
	jge	SHORT $L82299
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+50], 0
	jmp	SHORT $L82298
$L82299:
	mov	eax, DWORD PTR _vert$[ebp]
	mov	cl, BYTE PTR __i$82294[ebp]
	mov	BYTE PTR [eax+50], cl
$L82298:
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	edx, DWORD PTR _mrgb$[ebp]
	movzx	eax, BYTE PTR [edx+5]
	add	eax, DWORD PTR [ecx+72]
	mov	DWORD PTR __i$82294[ebp], eax
	cmp	DWORD PTR __i$82294[ebp], 255		; 000000ffH
	jle	SHORT $L82305
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+49], 255			; 000000ffH
	jmp	SHORT $L82307
$L82305:
	cmp	DWORD PTR __i$82294[ebp], 0
	jge	SHORT $L82308
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+49], 0
	jmp	SHORT $L82307
$L82308:
	mov	eax, DWORD PTR _vert$[ebp]
	mov	cl, BYTE PTR __i$82294[ebp]
	mov	BYTE PTR [eax+49], cl
$L82307:
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	edx, DWORD PTR _mrgb$[ebp]
	movzx	eax, BYTE PTR [edx+4]
	add	eax, DWORD PTR [ecx+76]
	mov	DWORD PTR __i$82294[ebp], eax
	cmp	DWORD PTR __i$82294[ebp], 255		; 000000ffH
	jle	SHORT $L82314
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+48], 255			; 000000ffH
	jmp	SHORT $L82316
$L82314:
	cmp	DWORD PTR __i$82294[ebp], 0
	jge	SHORT $L82317
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+48], 0
	jmp	SHORT $L82316
$L82317:
	mov	eax, DWORD PTR _vert$[ebp]
	mov	cl, BYTE PTR __i$82294[ebp]
	mov	BYTE PTR [eax+48], cl
$L82316:
	mov	eax, DWORD PTR _vert$[ebp]
	mov	ecx, DWORD PTR _mrgb$[ebp]
	mov	dl, BYTE PTR [ecx+7]
	mov	BYTE PTR [eax+51], dl
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	mov	edx, DWORD PTR _mrgb$[ebp]
	movzx	eax, BYTE PTR [edx+10]
	add	eax, DWORD PTR [ecx+68]
	mov	DWORD PTR __i$82323[ebp], eax
	cmp	DWORD PTR __i$82323[ebp], 255		; 000000ffH
	jle	SHORT $L82325
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+82], 255			; 000000ffH
	jmp	SHORT $L82327
$L82325:
	cmp	DWORD PTR __i$82323[ebp], 0
	jge	SHORT $L82328
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+82], 0
	jmp	SHORT $L82327
$L82328:
	mov	eax, DWORD PTR _vert$[ebp]
	mov	cl, BYTE PTR __i$82323[ebp]
	mov	BYTE PTR [eax+82], cl
$L82327:
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	mov	edx, DWORD PTR _mrgb$[ebp]
	movzx	eax, BYTE PTR [edx+9]
	add	eax, DWORD PTR [ecx+72]
	mov	DWORD PTR __i$82323[ebp], eax
	cmp	DWORD PTR __i$82323[ebp], 255		; 000000ffH
	jle	SHORT $L82334
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+81], 255			; 000000ffH
	jmp	SHORT $L82336
$L82334:
	cmp	DWORD PTR __i$82323[ebp], 0
	jge	SHORT $L82337
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+81], 0
	jmp	SHORT $L82336
$L82337:
	mov	eax, DWORD PTR _vert$[ebp]
	mov	cl, BYTE PTR __i$82323[ebp]
	mov	BYTE PTR [eax+81], cl
$L82336:
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	mov	edx, DWORD PTR _mrgb$[ebp]
	movzx	eax, BYTE PTR [edx+8]
	add	eax, DWORD PTR [ecx+76]
	mov	DWORD PTR __i$82323[ebp], eax
	cmp	DWORD PTR __i$82323[ebp], 255		; 000000ffH
	jle	SHORT $L82343
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+80], 255			; 000000ffH
	jmp	SHORT $L82345
$L82343:
	cmp	DWORD PTR __i$82323[ebp], 0
	jge	SHORT $L82346
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+80], 0
	jmp	SHORT $L82345
$L82346:
	mov	eax, DWORD PTR _vert$[ebp]
	mov	cl, BYTE PTR __i$82323[ebp]
	mov	BYTE PTR [eax+80], cl
$L82345:
	mov	eax, DWORD PTR _vert$[ebp]
	mov	ecx, DWORD PTR _mrgb$[ebp]
	mov	dl, BYTE PTR [ecx+11]
	mov	BYTE PTR [eax+83], dl

; 1273 : 		}
; 1274 : 		else

	jmp	SHORT $L82352
$L82264:

; 1275 : 		{
; 1276 : 			COPY_MODEL_TRI_COLOR(vert);

	mov	eax, DWORD PTR _vert$[ebp]
	mov	ecx, DWORD PTR _mrgb$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+16], edx
	mov	eax, DWORD PTR _vert$[ebp]
	mov	ecx, DWORD PTR _mrgb$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+48], edx
	mov	eax, DWORD PTR _vert$[ebp]
	mov	ecx, DWORD PTR _mrgb$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+80], edx
$L82352:

; 1277 : 		}
; 1278 : 
; 1279 : // env?
; 1280 : 
; 1281 : 		if (env)

	cmp	DWORD PTR _env$[ebp], 0
	je	$L82356

; 1282 : 		{
; 1283 : 			REJECT_MODEL_ENV_POLY();

	mov	eax, DWORD PTR _mp$[ebp]
	movsx	ecx, WORD PTR [eax]
	and	ecx, 1024				; 00000400H
	je	SHORT $L82357
	jmp	$L82234
$L82357:

; 1284 : 			INC_POLY_COUNT(ModelDrawnCount, 1);

	movsx	eax, WORD PTR ?ModelDrawnCount@@3FA	; ModelDrawnCount
	add	eax, 1
	mov	WORD PTR ?ModelDrawnCount@@3FA, ax	; ModelDrawnCount

; 1285 : 
; 1286 : // get env vert ptr
; 1287 : 
; 1288 : 			if (clip) envbucket = ModelBucketHeadEnvClip;

	cmp	DWORD PTR _clip$[ebp], 0
	je	SHORT $L82358
	mov	eax, DWORD PTR _ModelBucketHeadEnvClip
	mov	DWORD PTR _envbucket$[ebp], eax

; 1289 : 			else envbucket = ModelBucketHeadEnv;

	jmp	SHORT $L82359
$L82358:
	mov	eax, DWORD PTR _ModelBucketHeadEnv
	mov	DWORD PTR _envbucket$[ebp], eax
$L82359:

; 1290 : 			count = (short)(envbucket->CurrentVerts - envbucket->Verts);

	mov	eax, DWORD PTR _envbucket$[ebp]
	add	eax, 8008				; 00001f48H
	mov	ecx, DWORD PTR _envbucket$[ebp]
	mov	edx, DWORD PTR [ecx+8004]
	sub	edx, eax
	sar	edx, 5
	mov	WORD PTR _count$[ebp], dx

; 1291 : 
; 1292 : 			if (count > ENV_VERT_END)

	movsx	eax, WORD PTR _count$[ebp]
	cmp	eax, 1996				; 000007ccH
	jle	SHORT $L82361

; 1293 : 				continue;

	jmp	$L82234
$L82361:

; 1294 : 
; 1295 : 			envbucket->CurrentIndex[0] = count;

	mov	eax, DWORD PTR _envbucket$[ebp]
	mov	ecx, DWORD PTR [eax+8000]
	mov	dx, WORD PTR _count$[ebp]
	mov	WORD PTR [ecx], dx

; 1296 : 			envbucket->CurrentIndex[1] = count + 1;

	movsx	eax, WORD PTR _count$[ebp]
	add	eax, 1
	mov	ecx, DWORD PTR _envbucket$[ebp]
	mov	edx, DWORD PTR [ecx+8000]
	mov	WORD PTR [edx+2], ax

; 1297 : 			envbucket->CurrentIndex[2] = count + 2;

	movsx	eax, WORD PTR _count$[ebp]
	add	eax, 2
	mov	ecx, DWORD PTR _envbucket$[ebp]
	mov	edx, DWORD PTR [ecx+8000]
	mov	WORD PTR [edx+4], ax

; 1298 : 			envbucket->CurrentIndex += 3;

	mov	eax, DWORD PTR _envbucket$[ebp]
	mov	ecx, DWORD PTR [eax+8000]
	add	ecx, 6
	mov	edx, DWORD PTR _envbucket$[ebp]
	mov	DWORD PTR [edx+8000], ecx

; 1299 : 
; 1300 : 			vert = envbucket->CurrentVerts;

	mov	eax, DWORD PTR _envbucket$[ebp]
	mov	ecx, DWORD PTR [eax+8004]
	mov	DWORD PTR _vert$[ebp], ecx

; 1301 : 			envbucket->CurrentVerts += 3;

	mov	eax, DWORD PTR _envbucket$[ebp]
	mov	ecx, DWORD PTR [eax+8004]
	add	ecx, 96					; 00000060H
	mov	edx, DWORD PTR _envbucket$[ebp]
	mov	DWORD PTR [edx+8004], ecx

; 1302 : 
; 1303 : // copy env vert info
; 1304 : 
; 1305 : 			*(MEM32*)&vert[0] = *(MEM32*)&mp->v0->sx;

	mov	eax, DWORD PTR _mp$[ebp]
	mov	esi, DWORD PTR [eax+36]
	add	esi, 36					; 00000024H
	mov	ecx, 8
	mov	edi, DWORD PTR _vert$[ebp]
	rep movsd

; 1306 : 			*(MEM32*)&vert[1] = *(MEM32*)&mp->v1->sx;

	mov	eax, DWORD PTR _mp$[ebp]
	mov	esi, DWORD PTR [eax+40]
	add	esi, 36					; 00000024H
	mov	edi, DWORD PTR _vert$[ebp]
	add	edi, 32					; 00000020H
	mov	ecx, 8
	rep movsd

; 1307 : 			*(MEM32*)&vert[2] = *(MEM32*)&mp->v2->sx;

	mov	eax, DWORD PTR _mp$[ebp]
	mov	esi, DWORD PTR [eax+44]
	add	esi, 36					; 00000024H
	mov	edi, DWORD PTR _vert$[ebp]
	add	edi, 64					; 00000040H
	mov	ecx, 8
	rep movsd
$L82356:

; 1308 : 		}
; 1309 : 	}

	jmp	$L82234
$L82235:

; 1310 : 
; 1311 : // draw rgb quads
; 1312 : 
; 1313 : 	for (i = m->QuadNumRGB ; i ; i--, mrgb++, mp++)

	mov	eax, DWORD PTR _m$[ebp]
	movsx	ecx, WORD PTR [eax+40]
	mov	DWORD PTR _i$[ebp], ecx
	jmp	SHORT $L82368
$L82369:
	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	mov	ecx, DWORD PTR _mrgb$[ebp]
	add	ecx, 16					; 00000010H
	mov	DWORD PTR _mrgb$[ebp], ecx
	mov	edx, DWORD PTR _mp$[ebp]
	add	edx, 52					; 00000034H
	mov	DWORD PTR _mp$[ebp], edx
$L82368:
	cmp	DWORD PTR _i$[ebp], 0
	je	$L82370

; 1314 : 	{
; 1315 : 
; 1316 : // reject?
; 1317 : 
; 1318 : 		REJECT_MODEL_POLY();

	mov	eax, DWORD PTR _mp$[ebp]
	movsx	ecx, WORD PTR [eax]
	and	ecx, 2
	jne	SHORT $L82371
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	fld	DWORD PTR [ecx+36]
	mov	edx, DWORD PTR _mp$[ebp]
	mov	eax, DWORD PTR [edx+40]
	fsub	DWORD PTR [eax+36]
	mov	ecx, DWORD PTR _mp$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	fld	DWORD PTR [edx+40]
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	fsub	DWORD PTR [ecx+40]
	fmulp	ST(1), ST(0)
	mov	edx, DWORD PTR _mp$[ebp]
	mov	eax, DWORD PTR [edx+36]
	fld	DWORD PTR [eax+40]
	mov	ecx, DWORD PTR _mp$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	fsub	DWORD PTR [edx+40]
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	fld	DWORD PTR [ecx+36]
	mov	edx, DWORD PTR _mp$[ebp]
	mov	eax, DWORD PTR [edx+40]
	fsub	DWORD PTR [eax+36]
	fmulp	ST(1), ST(0)
	fsubp	ST(1), ST(0)
	fcomp	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $L82371
	jmp	$L82369
$L82371:

; 1319 : 		CLIP_QUAD();

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	movzx	edx, BYTE PTR [ecx+84]
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	movzx	eax, BYTE PTR [ecx+84]
	and	edx, eax
	mov	ecx, DWORD PTR _mp$[ebp]
	mov	eax, DWORD PTR [ecx+44]
	movzx	ecx, BYTE PTR [eax+84]
	and	edx, ecx
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	movzx	eax, BYTE PTR [ecx+84]
	and	edx, eax
	je	SHORT $L82373
	jmp	$L82369
$L82373:
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	movzx	edx, BYTE PTR [ecx+84]
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	movzx	eax, BYTE PTR [ecx+84]
	or	edx, eax
	mov	ecx, DWORD PTR _mp$[ebp]
	mov	eax, DWORD PTR [ecx+44]
	movzx	ecx, BYTE PTR [eax+84]
	or	edx, ecx
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	movzx	eax, BYTE PTR [ecx+84]
	or	edx, eax
	mov	DWORD PTR _clip$[ebp], edx

; 1320 : 		INC_POLY_COUNT(ModelDrawnCount, 2);

	movsx	eax, WORD PTR ?ModelDrawnCount@@3FA	; ModelDrawnCount
	add	eax, 2
	mov	WORD PTR ?ModelDrawnCount@@3FA, ax	; ModelDrawnCount

; 1321 : 
; 1322 : // get vert ptr
; 1323 : 
; 1324 : 		if (mp->Type & POLY_SEMITRANS)

	mov	eax, DWORD PTR _mp$[ebp]
	movsx	ecx, WORD PTR [eax]
	and	ecx, 4
	je	$L82374

; 1325 : 		{
; 1326 : 			if (!SEMI_POLY_FREE()) continue;

	cmp	DWORD PTR ?SemiCount@@3JA, 800		; SemiCount, 00000320H
	jl	SHORT $L82375
	jmp	$L82369
$L82375:

; 1327 : 			SEMI_POLY_SETUP_RGB(vertrgb, ModelFog, 4, clip, (mp->Type & POLY_SEMITRANS_ONE) != 0);

	movsx	eax, WORD PTR _ModelFog
	mov	ecx, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	ecx, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[ecx+12], eax
	mov	eax, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	eax, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[eax+4], 4
	mov	eax, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	eax, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[eax+8], -1
	cmp	DWORD PTR _clip$[ebp], 0
	je	SHORT $L82376
	mov	eax, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	eax, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[eax], 8
	jmp	SHORT $L82377
$L82376:
	mov	eax, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	eax, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[eax], 12 ; 0000000cH
$L82377:
	mov	eax, DWORD PTR _mp$[ebp]
	movsx	ecx, WORD PTR [eax]
	and	ecx, 256				; 00000100H
	neg	ecx
	sbb	ecx, ecx
	neg	ecx
	mov	edx, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	edx, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[edx+16], ecx
	mov	eax, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	eax, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[eax+20], 0
	mov	eax, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	eax, 152				; 00000098H
	add	eax, OFFSET FLAT:?SemiPoly@@3PAUDRAW_SEMI_POLY@@A+24
	mov	DWORD PTR _vertrgb$[ebp], eax
	mov	ecx, DWORD PTR ?SemiCount@@3JA		; SemiCount
	add	ecx, 1
	mov	DWORD PTR ?SemiCount@@3JA, ecx		; SemiCount

; 1328 : 		}
; 1329 : 		else

	jmp	$L82378
$L82374:

; 1330 : 		{
; 1331 : 			if (clip) bucketrgb = ModelBucketHeadClipRGB;

	cmp	DWORD PTR _clip$[ebp], 0
	je	SHORT $L82379
	mov	eax, DWORD PTR _ModelBucketHeadClipRGB
	mov	DWORD PTR _bucketrgb$[ebp], eax

; 1332 : 			else bucketrgb = ModelBucketHeadRGB;

	jmp	SHORT $L82380
$L82379:
	mov	eax, DWORD PTR _ModelBucketHeadRGB
	mov	DWORD PTR _bucketrgb$[ebp], eax
$L82380:

; 1333 : 			count = (short)(bucketrgb->CurrentVerts - bucketrgb->Verts);

	mov	eax, DWORD PTR _bucketrgb$[ebp]
	add	eax, 808				; 00000328H
	mov	ecx, DWORD PTR _bucketrgb$[ebp]
	mov	edx, DWORD PTR [ecx+804]
	sub	edx, eax
	mov	eax, edx
	cdq
	mov	ecx, 24					; 00000018H
	idiv	ecx
	mov	WORD PTR _count$[ebp], ax

; 1334 : 
; 1335 : 			if (count > BUCKET_VERT_END)

	movsx	eax, WORD PTR _count$[ebp]
	cmp	eax, 196				; 000000c4H
	jle	$L82382

; 1336 : 			{
; 1337 : 				SET_TPAGE(-1);

	movsx	eax, WORD PTR ?RenderTP@@3FA		; RenderTP
	cmp	eax, -1
	je	SHORT $L82383
	mov	WORD PTR ?RenderTP@@3FA, -1		; RenderTP
	movsx	eax, WORD PTR ?RenderTP@@3FA		; RenderTP
	cmp	eax, -1
	jne	SHORT $L82384
	push	0
	push	0
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	edx
	call	DWORD PTR [ecx+152]
	mov	eax, DWORD PTR ?TextureStateChange@@3JA	; TextureStateChange
	add	eax, 1
	mov	DWORD PTR ?TextureStateChange@@3JA, eax	; TextureStateChange
	jmp	SHORT $L82383
$L82384:
	movsx	eax, WORD PTR ?RenderTP@@3FA		; RenderTP
	shl	eax, 6
	mov	ecx, DWORD PTR ?TexInfo@@3PAUTEXINFO@@A	; TexInfo
	mov	edx, DWORD PTR [ecx+eax+52]
	push	edx
	push	0
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	edx
	call	DWORD PTR [ecx+152]
	mov	eax, DWORD PTR ?TextureStateChange@@3JA	; TextureStateChange
	add	eax, 1
	mov	DWORD PTR ?TextureStateChange@@3JA, eax	; TextureStateChange
$L82383:

; 1338 : 				FlushOneBucketTEX0(bucketrgb, clip);

	mov	eax, DWORD PTR _clip$[ebp]
	push	eax
	mov	ecx, DWORD PTR _bucketrgb$[ebp]
	push	ecx
	call	?FlushOneBucketTEX0@@YAXPAUBUCKET_TEX0@@J@Z ; FlushOneBucketTEX0
	add	esp, 8

; 1339 : 				count = 0;

	mov	WORD PTR _count$[ebp], 0
$L82382:

; 1340 : 			}
; 1341 : 
; 1342 : 			bucketrgb->CurrentIndex[0] = count;

	mov	eax, DWORD PTR _bucketrgb$[ebp]
	mov	ecx, DWORD PTR [eax+800]
	mov	dx, WORD PTR _count$[ebp]
	mov	WORD PTR [ecx], dx

; 1343 : 			bucketrgb->CurrentIndex[1] = count + 1;

	movsx	eax, WORD PTR _count$[ebp]
	add	eax, 1
	mov	ecx, DWORD PTR _bucketrgb$[ebp]
	mov	edx, DWORD PTR [ecx+800]
	mov	WORD PTR [edx+2], ax

; 1344 : 			bucketrgb->CurrentIndex[2] = count + 2;

	movsx	eax, WORD PTR _count$[ebp]
	add	eax, 2
	mov	ecx, DWORD PTR _bucketrgb$[ebp]
	mov	edx, DWORD PTR [ecx+800]
	mov	WORD PTR [edx+4], ax

; 1345 : 			bucketrgb->CurrentIndex[3] = count;

	mov	eax, DWORD PTR _bucketrgb$[ebp]
	mov	ecx, DWORD PTR [eax+800]
	mov	dx, WORD PTR _count$[ebp]
	mov	WORD PTR [ecx+6], dx

; 1346 : 			bucketrgb->CurrentIndex[4] = count + 2;

	movsx	eax, WORD PTR _count$[ebp]
	add	eax, 2
	mov	ecx, DWORD PTR _bucketrgb$[ebp]
	mov	edx, DWORD PTR [ecx+800]
	mov	WORD PTR [edx+8], ax

; 1347 : 			bucketrgb->CurrentIndex[5] = count + 3;

	movsx	eax, WORD PTR _count$[ebp]
	add	eax, 3
	mov	ecx, DWORD PTR _bucketrgb$[ebp]
	mov	edx, DWORD PTR [ecx+800]
	mov	WORD PTR [edx+10], ax

; 1348 : 			bucketrgb->CurrentIndex += 6;

	mov	eax, DWORD PTR _bucketrgb$[ebp]
	mov	ecx, DWORD PTR [eax+800]
	add	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR _bucketrgb$[ebp]
	mov	DWORD PTR [edx+800], ecx

; 1349 : 
; 1350 : 			vertrgb = bucketrgb->CurrentVerts;

	mov	eax, DWORD PTR _bucketrgb$[ebp]
	mov	ecx, DWORD PTR [eax+804]
	mov	DWORD PTR _vertrgb$[ebp], ecx

; 1351 : 			bucketrgb->CurrentVerts += 4;

	mov	eax, DWORD PTR _bucketrgb$[ebp]
	mov	ecx, DWORD PTR [eax+804]
	add	ecx, 96					; 00000060H
	mov	edx, DWORD PTR _bucketrgb$[ebp]
	mov	DWORD PTR [edx+804], ecx
$L82378:

; 1352 : 		}
; 1353 : 
; 1354 : // copy vert info
; 1355 : 
; 1356 : 		COPY_QUAD_XYZRHW(vertrgb);

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	add	ecx, 36					; 00000024H
	mov	edx, DWORD PTR _vertrgb$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], ecx
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	add	ecx, 36					; 00000024H
	mov	edx, DWORD PTR _vertrgb$[ebp]
	add	edx, 24					; 00000018H
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], ecx
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	add	ecx, 36					; 00000024H
	mov	edx, DWORD PTR _vertrgb$[ebp]
	add	edx, 48					; 00000030H
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], ecx
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	add	ecx, 36					; 00000024H
	mov	edx, DWORD PTR _vertrgb$[ebp]
	add	edx, 72					; 00000048H
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], ecx

; 1357 : 
; 1358 : 		if (ModelFog)

	movsx	eax, WORD PTR _ModelFog
	test	eax, eax
	je	SHORT $L82394

; 1359 : 			COPY_QUAD_SPECULAR(vertrgb);

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _vertrgb$[ebp]
	mov	eax, DWORD PTR [ecx+56]
	mov	DWORD PTR [edx+20], eax
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	edx, DWORD PTR _vertrgb$[ebp]
	mov	eax, DWORD PTR [ecx+56]
	mov	DWORD PTR [edx+44], eax
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	mov	edx, DWORD PTR _vertrgb$[ebp]
	mov	eax, DWORD PTR [ecx+56]
	mov	DWORD PTR [edx+68], eax
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	mov	edx, DWORD PTR _vertrgb$[ebp]
	mov	eax, DWORD PTR [ecx+56]
	mov	DWORD PTR [edx+92], eax
$L82394:

; 1360 : 
; 1361 : 		if (lit)

	cmp	DWORD PTR _lit$[ebp], 0
	je	$L82395

; 1362 : 		{
; 1363 : 			COPY_MODEL_QUAD_COLOR_LIT(vertrgb);

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _mrgb$[ebp]
	movzx	eax, BYTE PTR [edx+2]
	add	eax, DWORD PTR [ecx+68]
	mov	DWORD PTR __i$82396[ebp], eax
	cmp	DWORD PTR __i$82396[ebp], 255		; 000000ffH
	jle	SHORT $L82398
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+18], 255			; 000000ffH
	jmp	SHORT $L82400
$L82398:
	cmp	DWORD PTR __i$82396[ebp], 0
	jge	SHORT $L82401
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+18], 0
	jmp	SHORT $L82400
$L82401:
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	cl, BYTE PTR __i$82396[ebp]
	mov	BYTE PTR [eax+18], cl
$L82400:
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _mrgb$[ebp]
	movzx	eax, BYTE PTR [edx+1]
	add	eax, DWORD PTR [ecx+72]
	mov	DWORD PTR __i$82396[ebp], eax
	cmp	DWORD PTR __i$82396[ebp], 255		; 000000ffH
	jle	SHORT $L82407
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+17], 255			; 000000ffH
	jmp	SHORT $L82409
$L82407:
	cmp	DWORD PTR __i$82396[ebp], 0
	jge	SHORT $L82410
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+17], 0
	jmp	SHORT $L82409
$L82410:
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	cl, BYTE PTR __i$82396[ebp]
	mov	BYTE PTR [eax+17], cl
$L82409:
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _mrgb$[ebp]
	movzx	eax, BYTE PTR [edx]
	add	eax, DWORD PTR [ecx+76]
	mov	DWORD PTR __i$82396[ebp], eax
	cmp	DWORD PTR __i$82396[ebp], 255		; 000000ffH
	jle	SHORT $L82416
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+16], 255			; 000000ffH
	jmp	SHORT $L82418
$L82416:
	cmp	DWORD PTR __i$82396[ebp], 0
	jge	SHORT $L82419
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+16], 0
	jmp	SHORT $L82418
$L82419:
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	cl, BYTE PTR __i$82396[ebp]
	mov	BYTE PTR [eax+16], cl
$L82418:
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	ecx, DWORD PTR _mrgb$[ebp]
	mov	dl, BYTE PTR [ecx+3]
	mov	BYTE PTR [eax+19], dl
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	edx, DWORD PTR _mrgb$[ebp]
	movzx	eax, BYTE PTR [edx+6]
	add	eax, DWORD PTR [ecx+68]
	mov	DWORD PTR __i$82425[ebp], eax
	cmp	DWORD PTR __i$82425[ebp], 255		; 000000ffH
	jle	SHORT $L82427
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+42], 255			; 000000ffH
	jmp	SHORT $L82429
$L82427:
	cmp	DWORD PTR __i$82425[ebp], 0
	jge	SHORT $L82430
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+42], 0
	jmp	SHORT $L82429
$L82430:
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	cl, BYTE PTR __i$82425[ebp]
	mov	BYTE PTR [eax+42], cl
$L82429:
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	edx, DWORD PTR _mrgb$[ebp]
	movzx	eax, BYTE PTR [edx+5]
	add	eax, DWORD PTR [ecx+72]
	mov	DWORD PTR __i$82425[ebp], eax
	cmp	DWORD PTR __i$82425[ebp], 255		; 000000ffH
	jle	SHORT $L82436
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+41], 255			; 000000ffH
	jmp	SHORT $L82438
$L82436:
	cmp	DWORD PTR __i$82425[ebp], 0
	jge	SHORT $L82439
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+41], 0
	jmp	SHORT $L82438
$L82439:
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	cl, BYTE PTR __i$82425[ebp]
	mov	BYTE PTR [eax+41], cl
$L82438:
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	edx, DWORD PTR _mrgb$[ebp]
	movzx	eax, BYTE PTR [edx+4]
	add	eax, DWORD PTR [ecx+76]
	mov	DWORD PTR __i$82425[ebp], eax
	cmp	DWORD PTR __i$82425[ebp], 255		; 000000ffH
	jle	SHORT $L82445
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+40], 255			; 000000ffH
	jmp	SHORT $L82447
$L82445:
	cmp	DWORD PTR __i$82425[ebp], 0
	jge	SHORT $L82448
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+40], 0
	jmp	SHORT $L82447
$L82448:
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	cl, BYTE PTR __i$82425[ebp]
	mov	BYTE PTR [eax+40], cl
$L82447:
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	ecx, DWORD PTR _mrgb$[ebp]
	mov	dl, BYTE PTR [ecx+7]
	mov	BYTE PTR [eax+43], dl
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	mov	edx, DWORD PTR _mrgb$[ebp]
	movzx	eax, BYTE PTR [edx+10]
	add	eax, DWORD PTR [ecx+68]
	mov	DWORD PTR __i$82454[ebp], eax
	cmp	DWORD PTR __i$82454[ebp], 255		; 000000ffH
	jle	SHORT $L82456
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+66], 255			; 000000ffH
	jmp	SHORT $L82458
$L82456:
	cmp	DWORD PTR __i$82454[ebp], 0
	jge	SHORT $L82459
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+66], 0
	jmp	SHORT $L82458
$L82459:
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	cl, BYTE PTR __i$82454[ebp]
	mov	BYTE PTR [eax+66], cl
$L82458:
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	mov	edx, DWORD PTR _mrgb$[ebp]
	movzx	eax, BYTE PTR [edx+9]
	add	eax, DWORD PTR [ecx+72]
	mov	DWORD PTR __i$82454[ebp], eax
	cmp	DWORD PTR __i$82454[ebp], 255		; 000000ffH
	jle	SHORT $L82465
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+65], 255			; 000000ffH
	jmp	SHORT $L82467
$L82465:
	cmp	DWORD PTR __i$82454[ebp], 0
	jge	SHORT $L82468
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+65], 0
	jmp	SHORT $L82467
$L82468:
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	cl, BYTE PTR __i$82454[ebp]
	mov	BYTE PTR [eax+65], cl
$L82467:
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	mov	edx, DWORD PTR _mrgb$[ebp]
	movzx	eax, BYTE PTR [edx+8]
	add	eax, DWORD PTR [ecx+76]
	mov	DWORD PTR __i$82454[ebp], eax
	cmp	DWORD PTR __i$82454[ebp], 255		; 000000ffH
	jle	SHORT $L82474
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+64], 255			; 000000ffH
	jmp	SHORT $L82476
$L82474:
	cmp	DWORD PTR __i$82454[ebp], 0
	jge	SHORT $L82477
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+64], 0
	jmp	SHORT $L82476
$L82477:
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	cl, BYTE PTR __i$82454[ebp]
	mov	BYTE PTR [eax+64], cl
$L82476:
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	ecx, DWORD PTR _mrgb$[ebp]
	mov	dl, BYTE PTR [ecx+11]
	mov	BYTE PTR [eax+67], dl
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	mov	edx, DWORD PTR _mrgb$[ebp]
	movzx	eax, BYTE PTR [edx+14]
	add	eax, DWORD PTR [ecx+68]
	mov	DWORD PTR __i$82483[ebp], eax
	cmp	DWORD PTR __i$82483[ebp], 255		; 000000ffH
	jle	SHORT $L82485
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+90], 255			; 000000ffH
	jmp	SHORT $L82487
$L82485:
	cmp	DWORD PTR __i$82483[ebp], 0
	jge	SHORT $L82488
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+90], 0
	jmp	SHORT $L82487
$L82488:
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	cl, BYTE PTR __i$82483[ebp]
	mov	BYTE PTR [eax+90], cl
$L82487:
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	mov	edx, DWORD PTR _mrgb$[ebp]
	movzx	eax, BYTE PTR [edx+13]
	add	eax, DWORD PTR [ecx+72]
	mov	DWORD PTR __i$82483[ebp], eax
	cmp	DWORD PTR __i$82483[ebp], 255		; 000000ffH
	jle	SHORT $L82494
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+89], 255			; 000000ffH
	jmp	SHORT $L82496
$L82494:
	cmp	DWORD PTR __i$82483[ebp], 0
	jge	SHORT $L82497
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+89], 0
	jmp	SHORT $L82496
$L82497:
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	cl, BYTE PTR __i$82483[ebp]
	mov	BYTE PTR [eax+89], cl
$L82496:
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	mov	edx, DWORD PTR _mrgb$[ebp]
	movzx	eax, BYTE PTR [edx+12]
	add	eax, DWORD PTR [ecx+76]
	mov	DWORD PTR __i$82483[ebp], eax
	cmp	DWORD PTR __i$82483[ebp], 255		; 000000ffH
	jle	SHORT $L82503
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+88], 255			; 000000ffH
	jmp	SHORT $L82505
$L82503:
	cmp	DWORD PTR __i$82483[ebp], 0
	jge	SHORT $L82506
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+88], 0
	jmp	SHORT $L82505
$L82506:
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	cl, BYTE PTR __i$82483[ebp]
	mov	BYTE PTR [eax+88], cl
$L82505:
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	ecx, DWORD PTR _mrgb$[ebp]
	mov	dl, BYTE PTR [ecx+15]
	mov	BYTE PTR [eax+91], dl

; 1364 : 		}
; 1365 : 		else

	jmp	SHORT $L82512
$L82395:

; 1366 : 		{
; 1367 : 			COPY_MODEL_QUAD_COLOR(vertrgb);

	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	ecx, DWORD PTR _mrgb$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+16], edx
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	ecx, DWORD PTR _mrgb$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+40], edx
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	ecx, DWORD PTR _mrgb$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+64], edx
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	ecx, DWORD PTR _mrgb$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+88], edx
$L82512:

; 1368 : 		}
; 1369 : 
; 1370 : // env?
; 1371 : 
; 1372 : 		if (env)

	cmp	DWORD PTR _env$[ebp], 0
	je	$L82517

; 1373 : 		{
; 1374 : 			REJECT_MODEL_ENV_POLY();

	mov	eax, DWORD PTR _mp$[ebp]
	movsx	ecx, WORD PTR [eax]
	and	ecx, 1024				; 00000400H
	je	SHORT $L82518
	jmp	$L82369
$L82518:

; 1375 : 			INC_POLY_COUNT(ModelDrawnCount, 2);

	movsx	eax, WORD PTR ?ModelDrawnCount@@3FA	; ModelDrawnCount
	add	eax, 2
	mov	WORD PTR ?ModelDrawnCount@@3FA, ax	; ModelDrawnCount

; 1376 : 
; 1377 : // get env vert ptr
; 1378 : 
; 1379 : 			if (clip) envbucket = ModelBucketHeadEnvClip;

	cmp	DWORD PTR _clip$[ebp], 0
	je	SHORT $L82519
	mov	eax, DWORD PTR _ModelBucketHeadEnvClip
	mov	DWORD PTR _envbucket$[ebp], eax

; 1380 : 			else envbucket = ModelBucketHeadEnv;

	jmp	SHORT $L82520
$L82519:
	mov	eax, DWORD PTR _ModelBucketHeadEnv
	mov	DWORD PTR _envbucket$[ebp], eax
$L82520:

; 1381 : 			count = (short)(envbucket->CurrentVerts - envbucket->Verts);

	mov	eax, DWORD PTR _envbucket$[ebp]
	add	eax, 8008				; 00001f48H
	mov	ecx, DWORD PTR _envbucket$[ebp]
	mov	edx, DWORD PTR [ecx+8004]
	sub	edx, eax
	sar	edx, 5
	mov	WORD PTR _count$[ebp], dx

; 1382 : 
; 1383 : 			if (count > ENV_VERT_END)

	movsx	eax, WORD PTR _count$[ebp]
	cmp	eax, 1996				; 000007ccH
	jle	SHORT $L82522

; 1384 : 				continue;

	jmp	$L82369
$L82522:

; 1385 : 
; 1386 : 			envbucket->CurrentIndex[0] = count;

	mov	eax, DWORD PTR _envbucket$[ebp]
	mov	ecx, DWORD PTR [eax+8000]
	mov	dx, WORD PTR _count$[ebp]
	mov	WORD PTR [ecx], dx

; 1387 : 			envbucket->CurrentIndex[1] = count + 1;

	movsx	eax, WORD PTR _count$[ebp]
	add	eax, 1
	mov	ecx, DWORD PTR _envbucket$[ebp]
	mov	edx, DWORD PTR [ecx+8000]
	mov	WORD PTR [edx+2], ax

; 1388 : 			envbucket->CurrentIndex[2] = count + 2;

	movsx	eax, WORD PTR _count$[ebp]
	add	eax, 2
	mov	ecx, DWORD PTR _envbucket$[ebp]
	mov	edx, DWORD PTR [ecx+8000]
	mov	WORD PTR [edx+4], ax

; 1389 : 			envbucket->CurrentIndex[3] = count;

	mov	eax, DWORD PTR _envbucket$[ebp]
	mov	ecx, DWORD PTR [eax+8000]
	mov	dx, WORD PTR _count$[ebp]
	mov	WORD PTR [ecx+6], dx

; 1390 : 			envbucket->CurrentIndex[4] = count + 2;

	movsx	eax, WORD PTR _count$[ebp]
	add	eax, 2
	mov	ecx, DWORD PTR _envbucket$[ebp]
	mov	edx, DWORD PTR [ecx+8000]
	mov	WORD PTR [edx+8], ax

; 1391 : 			envbucket->CurrentIndex[5] = count + 3;

	movsx	eax, WORD PTR _count$[ebp]
	add	eax, 3
	mov	ecx, DWORD PTR _envbucket$[ebp]
	mov	edx, DWORD PTR [ecx+8000]
	mov	WORD PTR [edx+10], ax

; 1392 : 			envbucket->CurrentIndex += 6;

	mov	eax, DWORD PTR _envbucket$[ebp]
	mov	ecx, DWORD PTR [eax+8000]
	add	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR _envbucket$[ebp]
	mov	DWORD PTR [edx+8000], ecx

; 1393 : 
; 1394 : 			vert = envbucket->CurrentVerts;

	mov	eax, DWORD PTR _envbucket$[ebp]
	mov	ecx, DWORD PTR [eax+8004]
	mov	DWORD PTR _vert$[ebp], ecx

; 1395 : 			envbucket->CurrentVerts += 4;

	mov	eax, DWORD PTR _envbucket$[ebp]
	mov	ecx, DWORD PTR [eax+8004]
	add	ecx, 128				; 00000080H
	mov	edx, DWORD PTR _envbucket$[ebp]
	mov	DWORD PTR [edx+8004], ecx

; 1396 : 
; 1397 : // copy env vert info
; 1398 : 
; 1399 : 			*(MEM32*)&vert[0] = *(MEM32*)&mp->v0->sx;

	mov	eax, DWORD PTR _mp$[ebp]
	mov	esi, DWORD PTR [eax+36]
	add	esi, 36					; 00000024H
	mov	ecx, 8
	mov	edi, DWORD PTR _vert$[ebp]
	rep movsd

; 1400 : 			*(MEM32*)&vert[1] = *(MEM32*)&mp->v1->sx;

	mov	eax, DWORD PTR _mp$[ebp]
	mov	esi, DWORD PTR [eax+40]
	add	esi, 36					; 00000024H
	mov	edi, DWORD PTR _vert$[ebp]
	add	edi, 32					; 00000020H
	mov	ecx, 8
	rep movsd

; 1401 : 			*(MEM32*)&vert[2] = *(MEM32*)&mp->v2->sx;

	mov	eax, DWORD PTR _mp$[ebp]
	mov	esi, DWORD PTR [eax+44]
	add	esi, 36					; 00000024H
	mov	edi, DWORD PTR _vert$[ebp]
	add	edi, 64					; 00000040H
	mov	ecx, 8
	rep movsd

; 1402 : 			*(MEM32*)&vert[3] = *(MEM32*)&mp->v3->sx;

	mov	eax, DWORD PTR _mp$[ebp]
	mov	esi, DWORD PTR [eax+48]
	add	esi, 36					; 00000024H
	mov	edi, DWORD PTR _vert$[ebp]
	add	edi, 96					; 00000060H
	mov	ecx, 8
	rep movsd
$L82517:

; 1403 : 		}
; 1404 : 	}

	jmp	$L82369
$L82370:

; 1405 : 
; 1406 : // draw rgb tri's
; 1407 : 
; 1408 : 	for (i = m->TriNumRGB ; i ; i--, mrgb++, mp++)

	mov	eax, DWORD PTR _m$[ebp]
	movsx	ecx, WORD PTR [eax+42]
	mov	DWORD PTR _i$[ebp], ecx
	jmp	SHORT $L82531
$L82532:
	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	mov	ecx, DWORD PTR _mrgb$[ebp]
	add	ecx, 16					; 00000010H
	mov	DWORD PTR _mrgb$[ebp], ecx
	mov	edx, DWORD PTR _mp$[ebp]
	add	edx, 52					; 00000034H
	mov	DWORD PTR _mp$[ebp], edx
$L82531:
	cmp	DWORD PTR _i$[ebp], 0
	je	$L82050

; 1409 : 	{
; 1410 : 
; 1411 : // reject?
; 1412 : 
; 1413 : 		REJECT_MODEL_POLY();

	mov	eax, DWORD PTR _mp$[ebp]
	movsx	ecx, WORD PTR [eax]
	and	ecx, 2
	jne	SHORT $L82534
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	fld	DWORD PTR [ecx+36]
	mov	edx, DWORD PTR _mp$[ebp]
	mov	eax, DWORD PTR [edx+40]
	fsub	DWORD PTR [eax+36]
	mov	ecx, DWORD PTR _mp$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	fld	DWORD PTR [edx+40]
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	fsub	DWORD PTR [ecx+40]
	fmulp	ST(1), ST(0)
	mov	edx, DWORD PTR _mp$[ebp]
	mov	eax, DWORD PTR [edx+36]
	fld	DWORD PTR [eax+40]
	mov	ecx, DWORD PTR _mp$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	fsub	DWORD PTR [edx+40]
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	fld	DWORD PTR [ecx+36]
	mov	edx, DWORD PTR _mp$[ebp]
	mov	eax, DWORD PTR [edx+40]
	fsub	DWORD PTR [eax+36]
	fmulp	ST(1), ST(0)
	fsubp	ST(1), ST(0)
	fcomp	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $L82534
	jmp	$L82532
$L82534:

; 1414 : 		CLIP_TRI();

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	movzx	edx, BYTE PTR [ecx+84]
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	movzx	eax, BYTE PTR [ecx+84]
	and	edx, eax
	mov	ecx, DWORD PTR _mp$[ebp]
	mov	eax, DWORD PTR [ecx+44]
	movzx	ecx, BYTE PTR [eax+84]
	and	edx, ecx
	je	SHORT $L82536
	jmp	$L82532
$L82536:
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	movzx	edx, BYTE PTR [ecx+84]
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	movzx	eax, BYTE PTR [ecx+84]
	or	edx, eax
	mov	ecx, DWORD PTR _mp$[ebp]
	mov	eax, DWORD PTR [ecx+44]
	movzx	ecx, BYTE PTR [eax+84]
	or	edx, ecx
	mov	DWORD PTR _clip$[ebp], edx

; 1415 : 		INC_POLY_COUNT(ModelDrawnCount, 1);

	movsx	eax, WORD PTR ?ModelDrawnCount@@3FA	; ModelDrawnCount
	add	eax, 1
	mov	WORD PTR ?ModelDrawnCount@@3FA, ax	; ModelDrawnCount

; 1416 : 
; 1417 : // get vert ptr
; 1418 : 
; 1419 : 		if (mp->Type & POLY_SEMITRANS)

	mov	eax, DWORD PTR _mp$[ebp]
	movsx	ecx, WORD PTR [eax]
	and	ecx, 4
	je	$L82537

; 1420 : 		{
; 1421 : 			if (!SEMI_POLY_FREE()) continue;

	cmp	DWORD PTR ?SemiCount@@3JA, 800		; SemiCount, 00000320H
	jl	SHORT $L82538
	jmp	$L82532
$L82538:

; 1422 : 			SEMI_POLY_SETUP_RGB(vertrgb, ModelFog, 3, clip, (mp->Type & POLY_SEMITRANS_ONE) != 0);

	movsx	eax, WORD PTR _ModelFog
	mov	ecx, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	ecx, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[ecx+12], eax
	mov	eax, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	eax, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[eax+4], 3
	mov	eax, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	eax, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[eax+8], -1
	cmp	DWORD PTR _clip$[ebp], 0
	je	SHORT $L82539
	mov	eax, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	eax, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[eax], 8
	jmp	SHORT $L82540
$L82539:
	mov	eax, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	eax, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[eax], 12 ; 0000000cH
$L82540:
	mov	eax, DWORD PTR _mp$[ebp]
	movsx	ecx, WORD PTR [eax]
	and	ecx, 256				; 00000100H
	neg	ecx
	sbb	ecx, ecx
	neg	ecx
	mov	edx, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	edx, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[edx+16], ecx
	mov	eax, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	eax, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[eax+20], 0
	mov	eax, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	eax, 152				; 00000098H
	add	eax, OFFSET FLAT:?SemiPoly@@3PAUDRAW_SEMI_POLY@@A+24
	mov	DWORD PTR _vertrgb$[ebp], eax
	mov	ecx, DWORD PTR ?SemiCount@@3JA		; SemiCount
	add	ecx, 1
	mov	DWORD PTR ?SemiCount@@3JA, ecx		; SemiCount

; 1423 : 		}
; 1424 : 		else

	jmp	$L82541
$L82537:

; 1425 : 		{
; 1426 : 			if (clip) bucketrgb = ModelBucketHeadClipRGB;

	cmp	DWORD PTR _clip$[ebp], 0
	je	SHORT $L82542
	mov	eax, DWORD PTR _ModelBucketHeadClipRGB
	mov	DWORD PTR _bucketrgb$[ebp], eax

; 1427 : 			else bucketrgb = ModelBucketHeadRGB;

	jmp	SHORT $L82543
$L82542:
	mov	eax, DWORD PTR _ModelBucketHeadRGB
	mov	DWORD PTR _bucketrgb$[ebp], eax
$L82543:

; 1428 : 			count = (short)(bucketrgb->CurrentVerts - bucketrgb->Verts);

	mov	eax, DWORD PTR _bucketrgb$[ebp]
	add	eax, 808				; 00000328H
	mov	ecx, DWORD PTR _bucketrgb$[ebp]
	mov	edx, DWORD PTR [ecx+804]
	sub	edx, eax
	mov	eax, edx
	cdq
	mov	ecx, 24					; 00000018H
	idiv	ecx
	mov	WORD PTR _count$[ebp], ax

; 1429 : 
; 1430 : 			if (count > BUCKET_VERT_END)

	movsx	eax, WORD PTR _count$[ebp]
	cmp	eax, 196				; 000000c4H
	jle	$L82545

; 1431 : 			{
; 1432 : 				SET_TPAGE(-1);

	movsx	eax, WORD PTR ?RenderTP@@3FA		; RenderTP
	cmp	eax, -1
	je	SHORT $L82546
	mov	WORD PTR ?RenderTP@@3FA, -1		; RenderTP
	movsx	eax, WORD PTR ?RenderTP@@3FA		; RenderTP
	cmp	eax, -1
	jne	SHORT $L82547
	push	0
	push	0
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	edx
	call	DWORD PTR [ecx+152]
	mov	eax, DWORD PTR ?TextureStateChange@@3JA	; TextureStateChange
	add	eax, 1
	mov	DWORD PTR ?TextureStateChange@@3JA, eax	; TextureStateChange
	jmp	SHORT $L82546
$L82547:
	movsx	eax, WORD PTR ?RenderTP@@3FA		; RenderTP
	shl	eax, 6
	mov	ecx, DWORD PTR ?TexInfo@@3PAUTEXINFO@@A	; TexInfo
	mov	edx, DWORD PTR [ecx+eax+52]
	push	edx
	push	0
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	edx
	call	DWORD PTR [ecx+152]
	mov	eax, DWORD PTR ?TextureStateChange@@3JA	; TextureStateChange
	add	eax, 1
	mov	DWORD PTR ?TextureStateChange@@3JA, eax	; TextureStateChange
$L82546:

; 1433 : 				FlushOneBucketTEX0(bucketrgb, clip);

	mov	eax, DWORD PTR _clip$[ebp]
	push	eax
	mov	ecx, DWORD PTR _bucketrgb$[ebp]
	push	ecx
	call	?FlushOneBucketTEX0@@YAXPAUBUCKET_TEX0@@J@Z ; FlushOneBucketTEX0
	add	esp, 8

; 1434 : 				count = 0;

	mov	WORD PTR _count$[ebp], 0
$L82545:

; 1435 : 			}
; 1436 : 
; 1437 : 			bucketrgb->CurrentIndex[0] = count;

	mov	eax, DWORD PTR _bucketrgb$[ebp]
	mov	ecx, DWORD PTR [eax+800]
	mov	dx, WORD PTR _count$[ebp]
	mov	WORD PTR [ecx], dx

; 1438 : 			bucketrgb->CurrentIndex[1] = count + 1;

	movsx	eax, WORD PTR _count$[ebp]
	add	eax, 1
	mov	ecx, DWORD PTR _bucketrgb$[ebp]
	mov	edx, DWORD PTR [ecx+800]
	mov	WORD PTR [edx+2], ax

; 1439 : 			bucketrgb->CurrentIndex[2] = count + 2;

	movsx	eax, WORD PTR _count$[ebp]
	add	eax, 2
	mov	ecx, DWORD PTR _bucketrgb$[ebp]
	mov	edx, DWORD PTR [ecx+800]
	mov	WORD PTR [edx+4], ax

; 1440 : 			bucketrgb->CurrentIndex += 3;

	mov	eax, DWORD PTR _bucketrgb$[ebp]
	mov	ecx, DWORD PTR [eax+800]
	add	ecx, 6
	mov	edx, DWORD PTR _bucketrgb$[ebp]
	mov	DWORD PTR [edx+800], ecx

; 1441 : 
; 1442 : 			vertrgb = bucketrgb->CurrentVerts;

	mov	eax, DWORD PTR _bucketrgb$[ebp]
	mov	ecx, DWORD PTR [eax+804]
	mov	DWORD PTR _vertrgb$[ebp], ecx

; 1443 : 			bucketrgb->CurrentVerts += 3;

	mov	eax, DWORD PTR _bucketrgb$[ebp]
	mov	ecx, DWORD PTR [eax+804]
	add	ecx, 72					; 00000048H
	mov	edx, DWORD PTR _bucketrgb$[ebp]
	mov	DWORD PTR [edx+804], ecx
$L82541:

; 1444 : 		}
; 1445 : 
; 1446 : // copy vert info
; 1447 : 
; 1448 : 		COPY_TRI_XYZRHW(vertrgb);

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	add	ecx, 36					; 00000024H
	mov	edx, DWORD PTR _vertrgb$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], ecx
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	add	ecx, 36					; 00000024H
	mov	edx, DWORD PTR _vertrgb$[ebp]
	add	edx, 24					; 00000018H
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], ecx
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	add	ecx, 36					; 00000024H
	mov	edx, DWORD PTR _vertrgb$[ebp]
	add	edx, 48					; 00000030H
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], ecx

; 1449 : 
; 1450 : 		if (ModelFog)

	movsx	eax, WORD PTR _ModelFog
	test	eax, eax
	je	SHORT $L82555

; 1451 : 			COPY_TRI_SPECULAR(vertrgb);

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _vertrgb$[ebp]
	mov	eax, DWORD PTR [ecx+56]
	mov	DWORD PTR [edx+20], eax
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	edx, DWORD PTR _vertrgb$[ebp]
	mov	eax, DWORD PTR [ecx+56]
	mov	DWORD PTR [edx+44], eax
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	mov	edx, DWORD PTR _vertrgb$[ebp]
	mov	eax, DWORD PTR [ecx+56]
	mov	DWORD PTR [edx+68], eax
$L82555:

; 1452 : 
; 1453 : 		if (lit)

	cmp	DWORD PTR _lit$[ebp], 0
	je	$L82556

; 1454 : 		{
; 1455 : 			COPY_MODEL_TRI_COLOR_LIT(vertrgb);

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _mrgb$[ebp]
	movzx	eax, BYTE PTR [edx+2]
	add	eax, DWORD PTR [ecx+68]
	mov	DWORD PTR __i$82557[ebp], eax
	cmp	DWORD PTR __i$82557[ebp], 255		; 000000ffH
	jle	SHORT $L82559
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+18], 255			; 000000ffH
	jmp	SHORT $L82561
$L82559:
	cmp	DWORD PTR __i$82557[ebp], 0
	jge	SHORT $L82562
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+18], 0
	jmp	SHORT $L82561
$L82562:
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	cl, BYTE PTR __i$82557[ebp]
	mov	BYTE PTR [eax+18], cl
$L82561:
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _mrgb$[ebp]
	movzx	eax, BYTE PTR [edx+1]
	add	eax, DWORD PTR [ecx+72]
	mov	DWORD PTR __i$82557[ebp], eax
	cmp	DWORD PTR __i$82557[ebp], 255		; 000000ffH
	jle	SHORT $L82568
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+17], 255			; 000000ffH
	jmp	SHORT $L82570
$L82568:
	cmp	DWORD PTR __i$82557[ebp], 0
	jge	SHORT $L82571
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+17], 0
	jmp	SHORT $L82570
$L82571:
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	cl, BYTE PTR __i$82557[ebp]
	mov	BYTE PTR [eax+17], cl
$L82570:
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _mrgb$[ebp]
	movzx	eax, BYTE PTR [edx]
	add	eax, DWORD PTR [ecx+76]
	mov	DWORD PTR __i$82557[ebp], eax
	cmp	DWORD PTR __i$82557[ebp], 255		; 000000ffH
	jle	SHORT $L82577
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+16], 255			; 000000ffH
	jmp	SHORT $L82579
$L82577:
	cmp	DWORD PTR __i$82557[ebp], 0
	jge	SHORT $L82580
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+16], 0
	jmp	SHORT $L82579
$L82580:
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	cl, BYTE PTR __i$82557[ebp]
	mov	BYTE PTR [eax+16], cl
$L82579:
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	ecx, DWORD PTR _mrgb$[ebp]
	mov	dl, BYTE PTR [ecx+3]
	mov	BYTE PTR [eax+19], dl
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	edx, DWORD PTR _mrgb$[ebp]
	movzx	eax, BYTE PTR [edx+6]
	add	eax, DWORD PTR [ecx+68]
	mov	DWORD PTR __i$82586[ebp], eax
	cmp	DWORD PTR __i$82586[ebp], 255		; 000000ffH
	jle	SHORT $L82588
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+42], 255			; 000000ffH
	jmp	SHORT $L82590
$L82588:
	cmp	DWORD PTR __i$82586[ebp], 0
	jge	SHORT $L82591
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+42], 0
	jmp	SHORT $L82590
$L82591:
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	cl, BYTE PTR __i$82586[ebp]
	mov	BYTE PTR [eax+42], cl
$L82590:
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	edx, DWORD PTR _mrgb$[ebp]
	movzx	eax, BYTE PTR [edx+5]
	add	eax, DWORD PTR [ecx+72]
	mov	DWORD PTR __i$82586[ebp], eax
	cmp	DWORD PTR __i$82586[ebp], 255		; 000000ffH
	jle	SHORT $L82597
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+41], 255			; 000000ffH
	jmp	SHORT $L82599
$L82597:
	cmp	DWORD PTR __i$82586[ebp], 0
	jge	SHORT $L82600
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+41], 0
	jmp	SHORT $L82599
$L82600:
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	cl, BYTE PTR __i$82586[ebp]
	mov	BYTE PTR [eax+41], cl
$L82599:
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	edx, DWORD PTR _mrgb$[ebp]
	movzx	eax, BYTE PTR [edx+4]
	add	eax, DWORD PTR [ecx+76]
	mov	DWORD PTR __i$82586[ebp], eax
	cmp	DWORD PTR __i$82586[ebp], 255		; 000000ffH
	jle	SHORT $L82606
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+40], 255			; 000000ffH
	jmp	SHORT $L82608
$L82606:
	cmp	DWORD PTR __i$82586[ebp], 0
	jge	SHORT $L82609
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+40], 0
	jmp	SHORT $L82608
$L82609:
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	cl, BYTE PTR __i$82586[ebp]
	mov	BYTE PTR [eax+40], cl
$L82608:
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	ecx, DWORD PTR _mrgb$[ebp]
	mov	dl, BYTE PTR [ecx+7]
	mov	BYTE PTR [eax+43], dl
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	mov	edx, DWORD PTR _mrgb$[ebp]
	movzx	eax, BYTE PTR [edx+10]
	add	eax, DWORD PTR [ecx+68]
	mov	DWORD PTR __i$82615[ebp], eax
	cmp	DWORD PTR __i$82615[ebp], 255		; 000000ffH
	jle	SHORT $L82617
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+66], 255			; 000000ffH
	jmp	SHORT $L82619
$L82617:
	cmp	DWORD PTR __i$82615[ebp], 0
	jge	SHORT $L82620
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+66], 0
	jmp	SHORT $L82619
$L82620:
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	cl, BYTE PTR __i$82615[ebp]
	mov	BYTE PTR [eax+66], cl
$L82619:
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	mov	edx, DWORD PTR _mrgb$[ebp]
	movzx	eax, BYTE PTR [edx+9]
	add	eax, DWORD PTR [ecx+72]
	mov	DWORD PTR __i$82615[ebp], eax
	cmp	DWORD PTR __i$82615[ebp], 255		; 000000ffH
	jle	SHORT $L82626
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+65], 255			; 000000ffH
	jmp	SHORT $L82628
$L82626:
	cmp	DWORD PTR __i$82615[ebp], 0
	jge	SHORT $L82629
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+65], 0
	jmp	SHORT $L82628
$L82629:
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	cl, BYTE PTR __i$82615[ebp]
	mov	BYTE PTR [eax+65], cl
$L82628:
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	mov	edx, DWORD PTR _mrgb$[ebp]
	movzx	eax, BYTE PTR [edx+8]
	add	eax, DWORD PTR [ecx+76]
	mov	DWORD PTR __i$82615[ebp], eax
	cmp	DWORD PTR __i$82615[ebp], 255		; 000000ffH
	jle	SHORT $L82635
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+64], 255			; 000000ffH
	jmp	SHORT $L82637
$L82635:
	cmp	DWORD PTR __i$82615[ebp], 0
	jge	SHORT $L82638
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+64], 0
	jmp	SHORT $L82637
$L82638:
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	cl, BYTE PTR __i$82615[ebp]
	mov	BYTE PTR [eax+64], cl
$L82637:
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	ecx, DWORD PTR _mrgb$[ebp]
	mov	dl, BYTE PTR [ecx+11]
	mov	BYTE PTR [eax+67], dl

; 1456 : 		}
; 1457 : 		else

	jmp	SHORT $L82644
$L82556:

; 1458 : 		{
; 1459 : 			COPY_MODEL_TRI_COLOR(vertrgb);

	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	ecx, DWORD PTR _mrgb$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+16], edx
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	ecx, DWORD PTR _mrgb$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+40], edx
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	ecx, DWORD PTR _mrgb$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+64], edx
$L82644:

; 1460 : 		}
; 1461 : 
; 1462 : // env?
; 1463 : 
; 1464 : 		if (env)

	cmp	DWORD PTR _env$[ebp], 0
	je	$L82648

; 1465 : 		{
; 1466 : 			REJECT_MODEL_ENV_POLY();

	mov	eax, DWORD PTR _mp$[ebp]
	movsx	ecx, WORD PTR [eax]
	and	ecx, 1024				; 00000400H
	je	SHORT $L82649
	jmp	$L82532
$L82649:

; 1467 : 			INC_POLY_COUNT(ModelDrawnCount, 1);

	movsx	eax, WORD PTR ?ModelDrawnCount@@3FA	; ModelDrawnCount
	add	eax, 1
	mov	WORD PTR ?ModelDrawnCount@@3FA, ax	; ModelDrawnCount

; 1468 : 
; 1469 : // get env vert ptr
; 1470 : 
; 1471 : 			if (clip) envbucket = ModelBucketHeadEnvClip;

	cmp	DWORD PTR _clip$[ebp], 0
	je	SHORT $L82650
	mov	eax, DWORD PTR _ModelBucketHeadEnvClip
	mov	DWORD PTR _envbucket$[ebp], eax

; 1472 : 			else envbucket = ModelBucketHeadEnv;

	jmp	SHORT $L82651
$L82650:
	mov	eax, DWORD PTR _ModelBucketHeadEnv
	mov	DWORD PTR _envbucket$[ebp], eax
$L82651:

; 1473 : 			count = (short)(envbucket->CurrentVerts - envbucket->Verts);

	mov	eax, DWORD PTR _envbucket$[ebp]
	add	eax, 8008				; 00001f48H
	mov	ecx, DWORD PTR _envbucket$[ebp]
	mov	edx, DWORD PTR [ecx+8004]
	sub	edx, eax
	sar	edx, 5
	mov	WORD PTR _count$[ebp], dx

; 1474 : 
; 1475 : 			if (count > ENV_VERT_END)

	movsx	eax, WORD PTR _count$[ebp]
	cmp	eax, 1996				; 000007ccH
	jle	SHORT $L82653

; 1476 : 				continue;

	jmp	$L82532
$L82653:

; 1477 : 
; 1478 : 			envbucket->CurrentIndex[0] = count;

	mov	eax, DWORD PTR _envbucket$[ebp]
	mov	ecx, DWORD PTR [eax+8000]
	mov	dx, WORD PTR _count$[ebp]
	mov	WORD PTR [ecx], dx

; 1479 : 			envbucket->CurrentIndex[1] = count + 1;

	movsx	eax, WORD PTR _count$[ebp]
	add	eax, 1
	mov	ecx, DWORD PTR _envbucket$[ebp]
	mov	edx, DWORD PTR [ecx+8000]
	mov	WORD PTR [edx+2], ax

; 1480 : 			envbucket->CurrentIndex[2] = count + 2;

	movsx	eax, WORD PTR _count$[ebp]
	add	eax, 2
	mov	ecx, DWORD PTR _envbucket$[ebp]
	mov	edx, DWORD PTR [ecx+8000]
	mov	WORD PTR [edx+4], ax

; 1481 : 			envbucket->CurrentIndex += 3;

	mov	eax, DWORD PTR _envbucket$[ebp]
	mov	ecx, DWORD PTR [eax+8000]
	add	ecx, 6
	mov	edx, DWORD PTR _envbucket$[ebp]
	mov	DWORD PTR [edx+8000], ecx

; 1482 : 
; 1483 : 			vert = envbucket->CurrentVerts;

	mov	eax, DWORD PTR _envbucket$[ebp]
	mov	ecx, DWORD PTR [eax+8004]
	mov	DWORD PTR _vert$[ebp], ecx

; 1484 : 			envbucket->CurrentVerts += 3;

	mov	eax, DWORD PTR _envbucket$[ebp]
	mov	ecx, DWORD PTR [eax+8004]
	add	ecx, 96					; 00000060H
	mov	edx, DWORD PTR _envbucket$[ebp]
	mov	DWORD PTR [edx+8004], ecx

; 1485 : 
; 1486 : // copy env vert info
; 1487 : 
; 1488 : 			*(MEM32*)&vert[0] = *(MEM32*)&mp->v0->sx;

	mov	eax, DWORD PTR _mp$[ebp]
	mov	esi, DWORD PTR [eax+36]
	add	esi, 36					; 00000024H
	mov	ecx, 8
	mov	edi, DWORD PTR _vert$[ebp]
	rep movsd

; 1489 : 			*(MEM32*)&vert[1] = *(MEM32*)&mp->v1->sx;

	mov	eax, DWORD PTR _mp$[ebp]
	mov	esi, DWORD PTR [eax+40]
	add	esi, 36					; 00000024H
	mov	edi, DWORD PTR _vert$[ebp]
	add	edi, 32					; 00000020H
	mov	ecx, 8
	rep movsd

; 1490 : 			*(MEM32*)&vert[2] = *(MEM32*)&mp->v2->sx;

	mov	eax, DWORD PTR _mp$[ebp]
	mov	esi, DWORD PTR [eax+44]
	add	esi, 36					; 00000024H
	mov	edi, DWORD PTR _vert$[ebp]
	add	edi, 64					; 00000040H
	mov	ecx, 8
	rep movsd
$L82648:

; 1491 : 		}
; 1492 : 	}

	jmp	$L82532
$L82050:

; 1493 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?DrawModelPolysClip@@YAXPAUMODEL@@JJ@Z ENDP		; DrawModelPolysClip
; Function compile flags: /Odt /ZI
_TEXT	ENDS
;	COMDAT ?DrawModelPolys@@YAXPAUMODEL@@JJ@Z
_TEXT	SEGMENT
__i$83210 = -92						; size = 4
__i$83181 = -88						; size = 4
__i$83152 = -84						; size = 4
__i$83083 = -80						; size = 4
__i$83054 = -76						; size = 4
__i$83025 = -72						; size = 4
__i$82996 = -68						; size = 4
__i$82928 = -64						; size = 4
__i$82899 = -60						; size = 4
__i$82870 = -56						; size = 4
__i$82795 = -52						; size = 4
__i$82766 = -48						; size = 4
__i$82737 = -44						; size = 4
__i$82708 = -40						; size = 4
_count$ = -36						; size = 2
_envbucket$ = -32					; size = 4
_bucketrgb$ = -28					; size = 4
_vertrgb$ = -24						; size = 4
_bucket$ = -20						; size = 4
_vert$ = -16						; size = 4
_mp$ = -12						; size = 4
_mrgb$ = -8						; size = 4
_i$ = -4						; size = 4
_m$ = 8							; size = 4
_lit$ = 12						; size = 4
_env$ = 16						; size = 4
?DrawModelPolys@@YAXPAUMODEL@@JJ@Z PROC NEAR		; DrawModelPolys, COMDAT

; 1500 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 156				; 0000009cH
	push	ebx
	push	esi
	push	edi

; 1501 : 	long i;
; 1502 : 	POLY_RGB *mrgb;
; 1503 : 	MODEL_POLY *mp;
; 1504 : 	VERTEX_TEX1 *vert;
; 1505 : 	BUCKET_TEX1 *bucket;
; 1506 : 	VERTEX_TEX0 *vertrgb;
; 1507 : 	BUCKET_TEX0 *bucketrgb;
; 1508 : 	BUCKET_ENV *envbucket = ModelBucketHeadEnv;

	mov	eax, DWORD PTR _ModelBucketHeadEnv
	mov	DWORD PTR _envbucket$[ebp], eax

; 1509 : 	short count;
; 1510 : 
; 1511 : // add to poly count
; 1512 : 
; 1513 : 	#if SCREEN_DEBUG
; 1514 : 	ModelPolyCount += (m->QuadNumTex + m->QuadNumRGB) * 2;

	mov	eax, DWORD PTR _m$[ebp]
	movsx	ecx, WORD PTR [eax+36]
	mov	edx, DWORD PTR _m$[ebp]
	movsx	eax, WORD PTR [edx+40]
	add	ecx, eax
	movsx	edx, WORD PTR ?ModelPolyCount@@3FA	; ModelPolyCount
	lea	eax, DWORD PTR [edx+ecx*2]
	mov	WORD PTR ?ModelPolyCount@@3FA, ax	; ModelPolyCount

; 1515 : 	ModelPolyCount += (m->TriNumTex + m->TriNumRGB);

	mov	eax, DWORD PTR _m$[ebp]
	movsx	ecx, WORD PTR [eax+38]
	mov	edx, DWORD PTR _m$[ebp]
	movsx	eax, WORD PTR [edx+42]
	add	ecx, eax
	movsx	edx, WORD PTR ?ModelPolyCount@@3FA	; ModelPolyCount
	add	edx, ecx
	mov	WORD PTR ?ModelPolyCount@@3FA, dx	; ModelPolyCount

; 1516 : 	if (env)

	cmp	DWORD PTR _env$[ebp], 0
	je	SHORT $L82674

; 1517 : 	{
; 1518 : 		ModelPolyCount += (m->QuadNumTex + m->QuadNumRGB) * 2;

	mov	eax, DWORD PTR _m$[ebp]
	movsx	ecx, WORD PTR [eax+36]
	mov	edx, DWORD PTR _m$[ebp]
	movsx	eax, WORD PTR [edx+40]
	add	ecx, eax
	movsx	edx, WORD PTR ?ModelPolyCount@@3FA	; ModelPolyCount
	lea	eax, DWORD PTR [edx+ecx*2]
	mov	WORD PTR ?ModelPolyCount@@3FA, ax	; ModelPolyCount

; 1519 : 		ModelPolyCount += (m->TriNumTex + m->TriNumRGB);

	mov	eax, DWORD PTR _m$[ebp]
	movsx	ecx, WORD PTR [eax+38]
	mov	edx, DWORD PTR _m$[ebp]
	movsx	eax, WORD PTR [edx+42]
	add	ecx, eax
	movsx	edx, WORD PTR ?ModelPolyCount@@3FA	; ModelPolyCount
	add	edx, ecx
	mov	WORD PTR ?ModelPolyCount@@3FA, dx	; ModelPolyCount
$L82674:

; 1520 : 	}	
; 1521 : 	#endif
; 1522 : 
; 1523 : // draw textured quads
; 1524 : 
; 1525 : 	mrgb = m->PolyRGB;

	mov	eax, DWORD PTR _m$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	mov	DWORD PTR _mrgb$[ebp], ecx

; 1526 : 	mp = m->PolyPtr;

	mov	eax, DWORD PTR _m$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	mov	DWORD PTR _mp$[ebp], ecx

; 1527 : 
; 1528 : 	for (i = m->QuadNumTex ; i ; i--, mrgb++, mp++)

	mov	eax, DWORD PTR _m$[ebp]
	movsx	ecx, WORD PTR [eax+36]
	mov	DWORD PTR _i$[ebp], ecx
	jmp	SHORT $L82675
$L82676:
	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	mov	ecx, DWORD PTR _mrgb$[ebp]
	add	ecx, 16					; 00000010H
	mov	DWORD PTR _mrgb$[ebp], ecx
	mov	edx, DWORD PTR _mp$[ebp]
	add	edx, 52					; 00000034H
	mov	DWORD PTR _mp$[ebp], edx
$L82675:
	cmp	DWORD PTR _i$[ebp], 0
	je	$L82677

; 1529 : 	{
; 1530 : 
; 1531 : // reject?
; 1532 : 
; 1533 : 		REJECT_MODEL_POLY();

	mov	eax, DWORD PTR _mp$[ebp]
	movsx	ecx, WORD PTR [eax]
	and	ecx, 2
	jne	SHORT $L82678
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	fld	DWORD PTR [ecx+36]
	mov	edx, DWORD PTR _mp$[ebp]
	mov	eax, DWORD PTR [edx+40]
	fsub	DWORD PTR [eax+36]
	mov	ecx, DWORD PTR _mp$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	fld	DWORD PTR [edx+40]
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	fsub	DWORD PTR [ecx+40]
	fmulp	ST(1), ST(0)
	mov	edx, DWORD PTR _mp$[ebp]
	mov	eax, DWORD PTR [edx+36]
	fld	DWORD PTR [eax+40]
	mov	ecx, DWORD PTR _mp$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	fsub	DWORD PTR [edx+40]
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	fld	DWORD PTR [ecx+36]
	mov	edx, DWORD PTR _mp$[ebp]
	mov	eax, DWORD PTR [edx+40]
	fsub	DWORD PTR [eax+36]
	fmulp	ST(1), ST(0)
	fsubp	ST(1), ST(0)
	fcomp	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $L82678
	jmp	$L82676
$L82678:

; 1534 : 		INC_POLY_COUNT(ModelDrawnCount, 2);

	movsx	eax, WORD PTR ?ModelDrawnCount@@3FA	; ModelDrawnCount
	add	eax, 2
	mov	WORD PTR ?ModelDrawnCount@@3FA, ax	; ModelDrawnCount

; 1535 : 
; 1536 : // get vert ptr
; 1537 : 
; 1538 : 		if (mp->Type & POLY_SEMITRANS)

	mov	eax, DWORD PTR _mp$[ebp]
	movsx	ecx, WORD PTR [eax]
	and	ecx, 4
	je	$L82680

; 1539 : 		{
; 1540 : 			if (!SEMI_POLY_FREE()) continue;

	cmp	DWORD PTR ?SemiCount@@3JA, 800		; SemiCount, 00000320H
	jl	SHORT $L82681
	jmp	$L82676
$L82681:

; 1541 : 			SEMI_POLY_SETUP(vert, ModelFog, 4, mp->Tpage, FALSE, (mp->Type & POLY_SEMITRANS_ONE) != 0);

	movsx	eax, WORD PTR _ModelFog
	mov	ecx, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	ecx, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[ecx+12], eax
	mov	eax, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	eax, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[eax+4], 4
	mov	eax, DWORD PTR _mp$[ebp]
	movsx	ecx, WORD PTR [eax+2]
	mov	edx, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	edx, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[edx+8], ecx
	xor	eax, eax
	je	SHORT $L82682
	mov	eax, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	eax, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[eax], 8
	jmp	SHORT $L82683
$L82682:
	mov	eax, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	eax, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[eax], 12 ; 0000000cH
$L82683:
	mov	eax, DWORD PTR _mp$[ebp]
	movsx	ecx, WORD PTR [eax]
	and	ecx, 256				; 00000100H
	neg	ecx
	sbb	ecx, ecx
	neg	ecx
	mov	edx, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	edx, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[edx+16], ecx
	mov	eax, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	eax, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[eax+20], 0
	mov	eax, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	eax, 152				; 00000098H
	add	eax, OFFSET FLAT:?SemiPoly@@3PAUDRAW_SEMI_POLY@@A+24
	mov	DWORD PTR _vert$[ebp], eax
	mov	ecx, DWORD PTR ?SemiCount@@3JA		; SemiCount
	add	ecx, 1
	mov	DWORD PTR ?SemiCount@@3JA, ecx		; SemiCount

; 1542 : 		}
; 1543 : 		else

	jmp	$L82684
$L82680:

; 1544 : 		{
; 1545 : 			bucket = &ModelBucketHead[mp->Tpage];

	mov	eax, DWORD PTR _mp$[ebp]
	movsx	ecx, WORD PTR [eax+2]
	imul	ecx, 7208				; 00001c28H
	add	ecx, DWORD PTR _ModelBucketHead
	mov	DWORD PTR _bucket$[ebp], ecx

; 1546 : 			count = (short)(bucket->CurrentVerts - bucket->Verts);

	mov	eax, DWORD PTR _bucket$[ebp]
	add	eax, 808				; 00000328H
	mov	ecx, DWORD PTR _bucket$[ebp]
	mov	edx, DWORD PTR [ecx+804]
	sub	edx, eax
	sar	edx, 5
	mov	WORD PTR _count$[ebp], dx

; 1547 : 
; 1548 : 			if (count > BUCKET_VERT_END)

	movsx	eax, WORD PTR _count$[ebp]
	cmp	eax, 196				; 000000c4H
	jle	$L82686

; 1549 : 			{
; 1550 : 				SET_TPAGE(mp->Tpage);

	movsx	eax, WORD PTR ?RenderTP@@3FA		; RenderTP
	mov	ecx, DWORD PTR _mp$[ebp]
	movsx	edx, WORD PTR [ecx+2]
	cmp	eax, edx
	je	SHORT $L82687
	mov	eax, DWORD PTR _mp$[ebp]
	mov	cx, WORD PTR [eax+2]
	mov	WORD PTR ?RenderTP@@3FA, cx		; RenderTP
	movsx	edx, WORD PTR ?RenderTP@@3FA		; RenderTP
	cmp	edx, -1
	jne	SHORT $L82688
	push	0
	push	0
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	edx
	call	DWORD PTR [ecx+152]
	mov	eax, DWORD PTR ?TextureStateChange@@3JA	; TextureStateChange
	add	eax, 1
	mov	DWORD PTR ?TextureStateChange@@3JA, eax	; TextureStateChange
	jmp	SHORT $L82687
$L82688:
	movsx	eax, WORD PTR ?RenderTP@@3FA		; RenderTP
	shl	eax, 6
	mov	ecx, DWORD PTR ?TexInfo@@3PAUTEXINFO@@A	; TexInfo
	mov	edx, DWORD PTR [ecx+eax+52]
	push	edx
	push	0
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	edx
	call	DWORD PTR [ecx+152]
	mov	eax, DWORD PTR ?TextureStateChange@@3JA	; TextureStateChange
	add	eax, 1
	mov	DWORD PTR ?TextureStateChange@@3JA, eax	; TextureStateChange
$L82687:

; 1551 : 				FlushOneBucketTEX1(bucket, FALSE);

	push	0
	mov	eax, DWORD PTR _bucket$[ebp]
	push	eax
	call	?FlushOneBucketTEX1@@YAXPAUBUCKET_TEX1@@J@Z ; FlushOneBucketTEX1
	add	esp, 8

; 1552 : 				count = 0;

	mov	WORD PTR _count$[ebp], 0
$L82686:

; 1553 : 			}
; 1554 : 
; 1555 : 			bucket->CurrentIndex[0] = count;

	mov	eax, DWORD PTR _bucket$[ebp]
	mov	ecx, DWORD PTR [eax+800]
	mov	dx, WORD PTR _count$[ebp]
	mov	WORD PTR [ecx], dx

; 1556 : 			bucket->CurrentIndex[1] = count + 1;

	movsx	eax, WORD PTR _count$[ebp]
	add	eax, 1
	mov	ecx, DWORD PTR _bucket$[ebp]
	mov	edx, DWORD PTR [ecx+800]
	mov	WORD PTR [edx+2], ax

; 1557 : 			bucket->CurrentIndex[2] = count + 2;

	movsx	eax, WORD PTR _count$[ebp]
	add	eax, 2
	mov	ecx, DWORD PTR _bucket$[ebp]
	mov	edx, DWORD PTR [ecx+800]
	mov	WORD PTR [edx+4], ax

; 1558 : 			bucket->CurrentIndex[3] = count;

	mov	eax, DWORD PTR _bucket$[ebp]
	mov	ecx, DWORD PTR [eax+800]
	mov	dx, WORD PTR _count$[ebp]
	mov	WORD PTR [ecx+6], dx

; 1559 : 			bucket->CurrentIndex[4] = count + 2;

	movsx	eax, WORD PTR _count$[ebp]
	add	eax, 2
	mov	ecx, DWORD PTR _bucket$[ebp]
	mov	edx, DWORD PTR [ecx+800]
	mov	WORD PTR [edx+8], ax

; 1560 : 			bucket->CurrentIndex[5] = count + 3;

	movsx	eax, WORD PTR _count$[ebp]
	add	eax, 3
	mov	ecx, DWORD PTR _bucket$[ebp]
	mov	edx, DWORD PTR [ecx+800]
	mov	WORD PTR [edx+10], ax

; 1561 : 			bucket->CurrentIndex += 6;

	mov	eax, DWORD PTR _bucket$[ebp]
	mov	ecx, DWORD PTR [eax+800]
	add	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR _bucket$[ebp]
	mov	DWORD PTR [edx+800], ecx

; 1562 : 
; 1563 : 			vert = bucket->CurrentVerts;

	mov	eax, DWORD PTR _bucket$[ebp]
	mov	ecx, DWORD PTR [eax+804]
	mov	DWORD PTR _vert$[ebp], ecx

; 1564 : 			bucket->CurrentVerts += 4;

	mov	eax, DWORD PTR _bucket$[ebp]
	mov	ecx, DWORD PTR [eax+804]
	add	ecx, 128				; 00000080H
	mov	edx, DWORD PTR _bucket$[ebp]
	mov	DWORD PTR [edx+804], ecx
$L82684:

; 1565 : 		}
; 1566 : 
; 1567 : // copy vert info
; 1568 : 
; 1569 : 		COPY_QUAD_XYZRHW(vert);

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	add	ecx, 36					; 00000024H
	mov	edx, DWORD PTR _vert$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], ecx
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	add	ecx, 36					; 00000024H
	mov	edx, DWORD PTR _vert$[ebp]
	add	edx, 32					; 00000020H
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], ecx
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	add	ecx, 36					; 00000024H
	mov	edx, DWORD PTR _vert$[ebp]
	add	edx, 64					; 00000040H
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], ecx
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	add	ecx, 36					; 00000024H
	mov	edx, DWORD PTR _vert$[ebp]
	add	edx, 96					; 00000060H
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], ecx

; 1570 : 		COPY_QUAD_UV(vert);

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [eax+8]
	mov	eax, DWORD PTR _vert$[ebp]
	mov	DWORD PTR [eax+24], ecx
	mov	DWORD PTR [eax+28], edx
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [eax+16]
	mov	eax, DWORD PTR _vert$[ebp]
	mov	DWORD PTR [eax+56], ecx
	mov	DWORD PTR [eax+60], edx
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [eax+24]
	mov	eax, DWORD PTR _vert$[ebp]
	mov	DWORD PTR [eax+88], ecx
	mov	DWORD PTR [eax+92], edx
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR [eax+32]
	mov	eax, DWORD PTR _vert$[ebp]
	mov	DWORD PTR [eax+120], ecx
	mov	DWORD PTR [eax+124], edx

; 1571 : 
; 1572 : 		if (ModelFog)

	movsx	eax, WORD PTR _ModelFog
	test	eax, eax
	je	SHORT $L82706

; 1573 : 			COPY_QUAD_SPECULAR(vert);

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _vert$[ebp]
	mov	eax, DWORD PTR [ecx+56]
	mov	DWORD PTR [edx+20], eax
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	edx, DWORD PTR _vert$[ebp]
	mov	eax, DWORD PTR [ecx+56]
	mov	DWORD PTR [edx+52], eax
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	mov	edx, DWORD PTR _vert$[ebp]
	mov	eax, DWORD PTR [ecx+56]
	mov	DWORD PTR [edx+84], eax
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	mov	edx, DWORD PTR _vert$[ebp]
	mov	eax, DWORD PTR [ecx+56]
	mov	DWORD PTR [edx+116], eax
$L82706:

; 1574 : 
; 1575 : 		if (lit)

	cmp	DWORD PTR _lit$[ebp], 0
	je	$L82707

; 1576 : 		{
; 1577 : 			COPY_MODEL_QUAD_COLOR_LIT(vert);

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _mrgb$[ebp]
	movzx	eax, BYTE PTR [edx+2]
	add	eax, DWORD PTR [ecx+68]
	mov	DWORD PTR __i$82708[ebp], eax
	cmp	DWORD PTR __i$82708[ebp], 255		; 000000ffH
	jle	SHORT $L82710
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+18], 255			; 000000ffH
	jmp	SHORT $L82712
$L82710:
	cmp	DWORD PTR __i$82708[ebp], 0
	jge	SHORT $L82713
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+18], 0
	jmp	SHORT $L82712
$L82713:
	mov	eax, DWORD PTR _vert$[ebp]
	mov	cl, BYTE PTR __i$82708[ebp]
	mov	BYTE PTR [eax+18], cl
$L82712:
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _mrgb$[ebp]
	movzx	eax, BYTE PTR [edx+1]
	add	eax, DWORD PTR [ecx+72]
	mov	DWORD PTR __i$82708[ebp], eax
	cmp	DWORD PTR __i$82708[ebp], 255		; 000000ffH
	jle	SHORT $L82719
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+17], 255			; 000000ffH
	jmp	SHORT $L82721
$L82719:
	cmp	DWORD PTR __i$82708[ebp], 0
	jge	SHORT $L82722
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+17], 0
	jmp	SHORT $L82721
$L82722:
	mov	eax, DWORD PTR _vert$[ebp]
	mov	cl, BYTE PTR __i$82708[ebp]
	mov	BYTE PTR [eax+17], cl
$L82721:
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _mrgb$[ebp]
	movzx	eax, BYTE PTR [edx]
	add	eax, DWORD PTR [ecx+76]
	mov	DWORD PTR __i$82708[ebp], eax
	cmp	DWORD PTR __i$82708[ebp], 255		; 000000ffH
	jle	SHORT $L82728
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+16], 255			; 000000ffH
	jmp	SHORT $L82730
$L82728:
	cmp	DWORD PTR __i$82708[ebp], 0
	jge	SHORT $L82731
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+16], 0
	jmp	SHORT $L82730
$L82731:
	mov	eax, DWORD PTR _vert$[ebp]
	mov	cl, BYTE PTR __i$82708[ebp]
	mov	BYTE PTR [eax+16], cl
$L82730:
	mov	eax, DWORD PTR _vert$[ebp]
	mov	ecx, DWORD PTR _mrgb$[ebp]
	mov	dl, BYTE PTR [ecx+3]
	mov	BYTE PTR [eax+19], dl
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	edx, DWORD PTR _mrgb$[ebp]
	movzx	eax, BYTE PTR [edx+6]
	add	eax, DWORD PTR [ecx+68]
	mov	DWORD PTR __i$82737[ebp], eax
	cmp	DWORD PTR __i$82737[ebp], 255		; 000000ffH
	jle	SHORT $L82739
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+50], 255			; 000000ffH
	jmp	SHORT $L82741
$L82739:
	cmp	DWORD PTR __i$82737[ebp], 0
	jge	SHORT $L82742
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+50], 0
	jmp	SHORT $L82741
$L82742:
	mov	eax, DWORD PTR _vert$[ebp]
	mov	cl, BYTE PTR __i$82737[ebp]
	mov	BYTE PTR [eax+50], cl
$L82741:
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	edx, DWORD PTR _mrgb$[ebp]
	movzx	eax, BYTE PTR [edx+5]
	add	eax, DWORD PTR [ecx+72]
	mov	DWORD PTR __i$82737[ebp], eax
	cmp	DWORD PTR __i$82737[ebp], 255		; 000000ffH
	jle	SHORT $L82748
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+49], 255			; 000000ffH
	jmp	SHORT $L82750
$L82748:
	cmp	DWORD PTR __i$82737[ebp], 0
	jge	SHORT $L82751
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+49], 0
	jmp	SHORT $L82750
$L82751:
	mov	eax, DWORD PTR _vert$[ebp]
	mov	cl, BYTE PTR __i$82737[ebp]
	mov	BYTE PTR [eax+49], cl
$L82750:
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	edx, DWORD PTR _mrgb$[ebp]
	movzx	eax, BYTE PTR [edx+4]
	add	eax, DWORD PTR [ecx+76]
	mov	DWORD PTR __i$82737[ebp], eax
	cmp	DWORD PTR __i$82737[ebp], 255		; 000000ffH
	jle	SHORT $L82757
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+48], 255			; 000000ffH
	jmp	SHORT $L82759
$L82757:
	cmp	DWORD PTR __i$82737[ebp], 0
	jge	SHORT $L82760
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+48], 0
	jmp	SHORT $L82759
$L82760:
	mov	eax, DWORD PTR _vert$[ebp]
	mov	cl, BYTE PTR __i$82737[ebp]
	mov	BYTE PTR [eax+48], cl
$L82759:
	mov	eax, DWORD PTR _vert$[ebp]
	mov	ecx, DWORD PTR _mrgb$[ebp]
	mov	dl, BYTE PTR [ecx+7]
	mov	BYTE PTR [eax+51], dl
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	mov	edx, DWORD PTR _mrgb$[ebp]
	movzx	eax, BYTE PTR [edx+10]
	add	eax, DWORD PTR [ecx+68]
	mov	DWORD PTR __i$82766[ebp], eax
	cmp	DWORD PTR __i$82766[ebp], 255		; 000000ffH
	jle	SHORT $L82768
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+82], 255			; 000000ffH
	jmp	SHORT $L82770
$L82768:
	cmp	DWORD PTR __i$82766[ebp], 0
	jge	SHORT $L82771
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+82], 0
	jmp	SHORT $L82770
$L82771:
	mov	eax, DWORD PTR _vert$[ebp]
	mov	cl, BYTE PTR __i$82766[ebp]
	mov	BYTE PTR [eax+82], cl
$L82770:
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	mov	edx, DWORD PTR _mrgb$[ebp]
	movzx	eax, BYTE PTR [edx+9]
	add	eax, DWORD PTR [ecx+72]
	mov	DWORD PTR __i$82766[ebp], eax
	cmp	DWORD PTR __i$82766[ebp], 255		; 000000ffH
	jle	SHORT $L82777
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+81], 255			; 000000ffH
	jmp	SHORT $L82779
$L82777:
	cmp	DWORD PTR __i$82766[ebp], 0
	jge	SHORT $L82780
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+81], 0
	jmp	SHORT $L82779
$L82780:
	mov	eax, DWORD PTR _vert$[ebp]
	mov	cl, BYTE PTR __i$82766[ebp]
	mov	BYTE PTR [eax+81], cl
$L82779:
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	mov	edx, DWORD PTR _mrgb$[ebp]
	movzx	eax, BYTE PTR [edx+8]
	add	eax, DWORD PTR [ecx+76]
	mov	DWORD PTR __i$82766[ebp], eax
	cmp	DWORD PTR __i$82766[ebp], 255		; 000000ffH
	jle	SHORT $L82786
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+80], 255			; 000000ffH
	jmp	SHORT $L82788
$L82786:
	cmp	DWORD PTR __i$82766[ebp], 0
	jge	SHORT $L82789
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+80], 0
	jmp	SHORT $L82788
$L82789:
	mov	eax, DWORD PTR _vert$[ebp]
	mov	cl, BYTE PTR __i$82766[ebp]
	mov	BYTE PTR [eax+80], cl
$L82788:
	mov	eax, DWORD PTR _vert$[ebp]
	mov	ecx, DWORD PTR _mrgb$[ebp]
	mov	dl, BYTE PTR [ecx+11]
	mov	BYTE PTR [eax+83], dl
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	mov	edx, DWORD PTR _mrgb$[ebp]
	movzx	eax, BYTE PTR [edx+14]
	add	eax, DWORD PTR [ecx+68]
	mov	DWORD PTR __i$82795[ebp], eax
	cmp	DWORD PTR __i$82795[ebp], 255		; 000000ffH
	jle	SHORT $L82797
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+114], 255			; 000000ffH
	jmp	SHORT $L82799
$L82797:
	cmp	DWORD PTR __i$82795[ebp], 0
	jge	SHORT $L82800
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+114], 0
	jmp	SHORT $L82799
$L82800:
	mov	eax, DWORD PTR _vert$[ebp]
	mov	cl, BYTE PTR __i$82795[ebp]
	mov	BYTE PTR [eax+114], cl
$L82799:
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	mov	edx, DWORD PTR _mrgb$[ebp]
	movzx	eax, BYTE PTR [edx+13]
	add	eax, DWORD PTR [ecx+72]
	mov	DWORD PTR __i$82795[ebp], eax
	cmp	DWORD PTR __i$82795[ebp], 255		; 000000ffH
	jle	SHORT $L82806
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+113], 255			; 000000ffH
	jmp	SHORT $L82808
$L82806:
	cmp	DWORD PTR __i$82795[ebp], 0
	jge	SHORT $L82809
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+113], 0
	jmp	SHORT $L82808
$L82809:
	mov	eax, DWORD PTR _vert$[ebp]
	mov	cl, BYTE PTR __i$82795[ebp]
	mov	BYTE PTR [eax+113], cl
$L82808:
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	mov	edx, DWORD PTR _mrgb$[ebp]
	movzx	eax, BYTE PTR [edx+12]
	add	eax, DWORD PTR [ecx+76]
	mov	DWORD PTR __i$82795[ebp], eax
	cmp	DWORD PTR __i$82795[ebp], 255		; 000000ffH
	jle	SHORT $L82815
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+112], 255			; 000000ffH
	jmp	SHORT $L82817
$L82815:
	cmp	DWORD PTR __i$82795[ebp], 0
	jge	SHORT $L82818
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+112], 0
	jmp	SHORT $L82817
$L82818:
	mov	eax, DWORD PTR _vert$[ebp]
	mov	cl, BYTE PTR __i$82795[ebp]
	mov	BYTE PTR [eax+112], cl
$L82817:
	mov	eax, DWORD PTR _vert$[ebp]
	mov	ecx, DWORD PTR _mrgb$[ebp]
	mov	dl, BYTE PTR [ecx+15]
	mov	BYTE PTR [eax+115], dl

; 1578 : 		}
; 1579 : 		else

	jmp	SHORT $L82824
$L82707:

; 1580 : 		{
; 1581 : 			COPY_MODEL_QUAD_COLOR(vert);

	mov	eax, DWORD PTR _vert$[ebp]
	mov	ecx, DWORD PTR _mrgb$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+16], edx
	mov	eax, DWORD PTR _vert$[ebp]
	mov	ecx, DWORD PTR _mrgb$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+48], edx
	mov	eax, DWORD PTR _vert$[ebp]
	mov	ecx, DWORD PTR _mrgb$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+80], edx
	mov	eax, DWORD PTR _vert$[ebp]
	mov	ecx, DWORD PTR _mrgb$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+112], edx
$L82824:

; 1582 : 		}
; 1583 : 
; 1584 : // env?
; 1585 : 
; 1586 : 		if (env)

	cmp	DWORD PTR _env$[ebp], 0
	je	$L82829

; 1587 : 		{
; 1588 : 			REJECT_MODEL_ENV_POLY();

	mov	eax, DWORD PTR _mp$[ebp]
	movsx	ecx, WORD PTR [eax]
	and	ecx, 1024				; 00000400H
	je	SHORT $L82830
	jmp	$L82676
$L82830:

; 1589 : 			INC_POLY_COUNT(ModelDrawnCount, 2);

	movsx	eax, WORD PTR ?ModelDrawnCount@@3FA	; ModelDrawnCount
	add	eax, 2
	mov	WORD PTR ?ModelDrawnCount@@3FA, ax	; ModelDrawnCount

; 1590 : 
; 1591 : // get env vert ptr
; 1592 : 
; 1593 : 			count = (short)(envbucket->CurrentVerts - envbucket->Verts);

	mov	eax, DWORD PTR _envbucket$[ebp]
	add	eax, 8008				; 00001f48H
	mov	ecx, DWORD PTR _envbucket$[ebp]
	mov	edx, DWORD PTR [ecx+8004]
	sub	edx, eax
	sar	edx, 5
	mov	WORD PTR _count$[ebp], dx

; 1594 : 
; 1595 : 			if (count > ENV_VERT_END)

	movsx	eax, WORD PTR _count$[ebp]
	cmp	eax, 1996				; 000007ccH
	jle	SHORT $L82832

; 1596 : 				continue;

	jmp	$L82676
$L82832:

; 1597 : 
; 1598 : 			envbucket->CurrentIndex[0] = count;

	mov	eax, DWORD PTR _envbucket$[ebp]
	mov	ecx, DWORD PTR [eax+8000]
	mov	dx, WORD PTR _count$[ebp]
	mov	WORD PTR [ecx], dx

; 1599 : 			envbucket->CurrentIndex[1] = count + 1;

	movsx	eax, WORD PTR _count$[ebp]
	add	eax, 1
	mov	ecx, DWORD PTR _envbucket$[ebp]
	mov	edx, DWORD PTR [ecx+8000]
	mov	WORD PTR [edx+2], ax

; 1600 : 			envbucket->CurrentIndex[2] = count + 2;

	movsx	eax, WORD PTR _count$[ebp]
	add	eax, 2
	mov	ecx, DWORD PTR _envbucket$[ebp]
	mov	edx, DWORD PTR [ecx+8000]
	mov	WORD PTR [edx+4], ax

; 1601 : 			envbucket->CurrentIndex[3] = count;

	mov	eax, DWORD PTR _envbucket$[ebp]
	mov	ecx, DWORD PTR [eax+8000]
	mov	dx, WORD PTR _count$[ebp]
	mov	WORD PTR [ecx+6], dx

; 1602 : 			envbucket->CurrentIndex[4] = count + 2;

	movsx	eax, WORD PTR _count$[ebp]
	add	eax, 2
	mov	ecx, DWORD PTR _envbucket$[ebp]
	mov	edx, DWORD PTR [ecx+8000]
	mov	WORD PTR [edx+8], ax

; 1603 : 			envbucket->CurrentIndex[5] = count + 3;

	movsx	eax, WORD PTR _count$[ebp]
	add	eax, 3
	mov	ecx, DWORD PTR _envbucket$[ebp]
	mov	edx, DWORD PTR [ecx+8000]
	mov	WORD PTR [edx+10], ax

; 1604 : 			envbucket->CurrentIndex += 6;

	mov	eax, DWORD PTR _envbucket$[ebp]
	mov	ecx, DWORD PTR [eax+8000]
	add	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR _envbucket$[ebp]
	mov	DWORD PTR [edx+8000], ecx

; 1605 : 
; 1606 : 			vert = envbucket->CurrentVerts;

	mov	eax, DWORD PTR _envbucket$[ebp]
	mov	ecx, DWORD PTR [eax+8004]
	mov	DWORD PTR _vert$[ebp], ecx

; 1607 : 			envbucket->CurrentVerts += 4;

	mov	eax, DWORD PTR _envbucket$[ebp]
	mov	ecx, DWORD PTR [eax+8004]
	add	ecx, 128				; 00000080H
	mov	edx, DWORD PTR _envbucket$[ebp]
	mov	DWORD PTR [edx+8004], ecx

; 1608 : 
; 1609 : // copy env vert info
; 1610 : 
; 1611 : 			*(MEM32*)&vert[0] = *(MEM32*)&mp->v0->sx;

	mov	eax, DWORD PTR _mp$[ebp]
	mov	esi, DWORD PTR [eax+36]
	add	esi, 36					; 00000024H
	mov	ecx, 8
	mov	edi, DWORD PTR _vert$[ebp]
	rep movsd

; 1612 : 			*(MEM32*)&vert[1] = *(MEM32*)&mp->v1->sx;

	mov	eax, DWORD PTR _mp$[ebp]
	mov	esi, DWORD PTR [eax+40]
	add	esi, 36					; 00000024H
	mov	edi, DWORD PTR _vert$[ebp]
	add	edi, 32					; 00000020H
	mov	ecx, 8
	rep movsd

; 1613 : 			*(MEM32*)&vert[2] = *(MEM32*)&mp->v2->sx;

	mov	eax, DWORD PTR _mp$[ebp]
	mov	esi, DWORD PTR [eax+44]
	add	esi, 36					; 00000024H
	mov	edi, DWORD PTR _vert$[ebp]
	add	edi, 64					; 00000040H
	mov	ecx, 8
	rep movsd

; 1614 : 			*(MEM32*)&vert[3] = *(MEM32*)&mp->v3->sx;

	mov	eax, DWORD PTR _mp$[ebp]
	mov	esi, DWORD PTR [eax+48]
	add	esi, 36					; 00000024H
	mov	edi, DWORD PTR _vert$[ebp]
	add	edi, 96					; 00000060H
	mov	ecx, 8
	rep movsd
$L82829:

; 1615 : 		}
; 1616 : 	}

	jmp	$L82676
$L82677:

; 1617 : 
; 1618 : // draw textured tri's
; 1619 : 
; 1620 : 	for (i = m->TriNumTex ; i ; i--, mrgb++, mp++)

	mov	eax, DWORD PTR _m$[ebp]
	movsx	ecx, WORD PTR [eax+38]
	mov	DWORD PTR _i$[ebp], ecx
	jmp	SHORT $L82841
$L82842:
	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	mov	ecx, DWORD PTR _mrgb$[ebp]
	add	ecx, 16					; 00000010H
	mov	DWORD PTR _mrgb$[ebp], ecx
	mov	edx, DWORD PTR _mp$[ebp]
	add	edx, 52					; 00000034H
	mov	DWORD PTR _mp$[ebp], edx
$L82841:
	cmp	DWORD PTR _i$[ebp], 0
	je	$L82843

; 1621 : 	{
; 1622 : 
; 1623 : // reject?
; 1624 : 
; 1625 : 		REJECT_MODEL_POLY();

	mov	eax, DWORD PTR _mp$[ebp]
	movsx	ecx, WORD PTR [eax]
	and	ecx, 2
	jne	SHORT $L82844
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	fld	DWORD PTR [ecx+36]
	mov	edx, DWORD PTR _mp$[ebp]
	mov	eax, DWORD PTR [edx+40]
	fsub	DWORD PTR [eax+36]
	mov	ecx, DWORD PTR _mp$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	fld	DWORD PTR [edx+40]
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	fsub	DWORD PTR [ecx+40]
	fmulp	ST(1), ST(0)
	mov	edx, DWORD PTR _mp$[ebp]
	mov	eax, DWORD PTR [edx+36]
	fld	DWORD PTR [eax+40]
	mov	ecx, DWORD PTR _mp$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	fsub	DWORD PTR [edx+40]
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	fld	DWORD PTR [ecx+36]
	mov	edx, DWORD PTR _mp$[ebp]
	mov	eax, DWORD PTR [edx+40]
	fsub	DWORD PTR [eax+36]
	fmulp	ST(1), ST(0)
	fsubp	ST(1), ST(0)
	fcomp	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $L82844
	jmp	$L82842
$L82844:

; 1626 : 		INC_POLY_COUNT(ModelDrawnCount, 1);

	movsx	eax, WORD PTR ?ModelDrawnCount@@3FA	; ModelDrawnCount
	add	eax, 1
	mov	WORD PTR ?ModelDrawnCount@@3FA, ax	; ModelDrawnCount

; 1627 : 
; 1628 : // get vert ptr
; 1629 : 
; 1630 : 		if (mp->Type & POLY_SEMITRANS)

	mov	eax, DWORD PTR _mp$[ebp]
	movsx	ecx, WORD PTR [eax]
	and	ecx, 4
	je	$L82846

; 1631 : 		{
; 1632 : 			if (!SEMI_POLY_FREE()) continue;

	cmp	DWORD PTR ?SemiCount@@3JA, 800		; SemiCount, 00000320H
	jl	SHORT $L82847
	jmp	$L82842
$L82847:

; 1633 : 			SEMI_POLY_SETUP(vert, ModelFog, 3, mp->Tpage, FALSE, (mp->Type & POLY_SEMITRANS_ONE) != 0);

	movsx	eax, WORD PTR _ModelFog
	mov	ecx, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	ecx, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[ecx+12], eax
	mov	eax, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	eax, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[eax+4], 3
	mov	eax, DWORD PTR _mp$[ebp]
	movsx	ecx, WORD PTR [eax+2]
	mov	edx, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	edx, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[edx+8], ecx
	xor	eax, eax
	je	SHORT $L82848
	mov	eax, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	eax, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[eax], 8
	jmp	SHORT $L82849
$L82848:
	mov	eax, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	eax, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[eax], 12 ; 0000000cH
$L82849:
	mov	eax, DWORD PTR _mp$[ebp]
	movsx	ecx, WORD PTR [eax]
	and	ecx, 256				; 00000100H
	neg	ecx
	sbb	ecx, ecx
	neg	ecx
	mov	edx, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	edx, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[edx+16], ecx
	mov	eax, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	eax, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[eax+20], 0
	mov	eax, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	eax, 152				; 00000098H
	add	eax, OFFSET FLAT:?SemiPoly@@3PAUDRAW_SEMI_POLY@@A+24
	mov	DWORD PTR _vert$[ebp], eax
	mov	ecx, DWORD PTR ?SemiCount@@3JA		; SemiCount
	add	ecx, 1
	mov	DWORD PTR ?SemiCount@@3JA, ecx		; SemiCount

; 1634 : 		}
; 1635 : 		else

	jmp	$L82850
$L82846:

; 1636 : 		{
; 1637 : 			bucket = &ModelBucketHead[mp->Tpage];

	mov	eax, DWORD PTR _mp$[ebp]
	movsx	ecx, WORD PTR [eax+2]
	imul	ecx, 7208				; 00001c28H
	add	ecx, DWORD PTR _ModelBucketHead
	mov	DWORD PTR _bucket$[ebp], ecx

; 1638 : 			count = (short)(bucket->CurrentVerts - bucket->Verts);

	mov	eax, DWORD PTR _bucket$[ebp]
	add	eax, 808				; 00000328H
	mov	ecx, DWORD PTR _bucket$[ebp]
	mov	edx, DWORD PTR [ecx+804]
	sub	edx, eax
	sar	edx, 5
	mov	WORD PTR _count$[ebp], dx

; 1639 : 
; 1640 : 			if (count > BUCKET_VERT_END)

	movsx	eax, WORD PTR _count$[ebp]
	cmp	eax, 196				; 000000c4H
	jle	$L82852

; 1641 : 			{
; 1642 : 				SET_TPAGE(mp->Tpage);

	movsx	eax, WORD PTR ?RenderTP@@3FA		; RenderTP
	mov	ecx, DWORD PTR _mp$[ebp]
	movsx	edx, WORD PTR [ecx+2]
	cmp	eax, edx
	je	SHORT $L82853
	mov	eax, DWORD PTR _mp$[ebp]
	mov	cx, WORD PTR [eax+2]
	mov	WORD PTR ?RenderTP@@3FA, cx		; RenderTP
	movsx	edx, WORD PTR ?RenderTP@@3FA		; RenderTP
	cmp	edx, -1
	jne	SHORT $L82854
	push	0
	push	0
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	edx
	call	DWORD PTR [ecx+152]
	mov	eax, DWORD PTR ?TextureStateChange@@3JA	; TextureStateChange
	add	eax, 1
	mov	DWORD PTR ?TextureStateChange@@3JA, eax	; TextureStateChange
	jmp	SHORT $L82853
$L82854:
	movsx	eax, WORD PTR ?RenderTP@@3FA		; RenderTP
	shl	eax, 6
	mov	ecx, DWORD PTR ?TexInfo@@3PAUTEXINFO@@A	; TexInfo
	mov	edx, DWORD PTR [ecx+eax+52]
	push	edx
	push	0
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	edx
	call	DWORD PTR [ecx+152]
	mov	eax, DWORD PTR ?TextureStateChange@@3JA	; TextureStateChange
	add	eax, 1
	mov	DWORD PTR ?TextureStateChange@@3JA, eax	; TextureStateChange
$L82853:

; 1643 : 				FlushOneBucketTEX1(bucket, FALSE);

	push	0
	mov	eax, DWORD PTR _bucket$[ebp]
	push	eax
	call	?FlushOneBucketTEX1@@YAXPAUBUCKET_TEX1@@J@Z ; FlushOneBucketTEX1
	add	esp, 8

; 1644 : 				count = 0;

	mov	WORD PTR _count$[ebp], 0
$L82852:

; 1645 : 			}
; 1646 : 
; 1647 : 			bucket->CurrentIndex[0] = count;

	mov	eax, DWORD PTR _bucket$[ebp]
	mov	ecx, DWORD PTR [eax+800]
	mov	dx, WORD PTR _count$[ebp]
	mov	WORD PTR [ecx], dx

; 1648 : 			bucket->CurrentIndex[1] = count + 1;

	movsx	eax, WORD PTR _count$[ebp]
	add	eax, 1
	mov	ecx, DWORD PTR _bucket$[ebp]
	mov	edx, DWORD PTR [ecx+800]
	mov	WORD PTR [edx+2], ax

; 1649 : 			bucket->CurrentIndex[2] = count + 2;

	movsx	eax, WORD PTR _count$[ebp]
	add	eax, 2
	mov	ecx, DWORD PTR _bucket$[ebp]
	mov	edx, DWORD PTR [ecx+800]
	mov	WORD PTR [edx+4], ax

; 1650 : 			bucket->CurrentIndex += 3;

	mov	eax, DWORD PTR _bucket$[ebp]
	mov	ecx, DWORD PTR [eax+800]
	add	ecx, 6
	mov	edx, DWORD PTR _bucket$[ebp]
	mov	DWORD PTR [edx+800], ecx

; 1651 : 
; 1652 : 			vert = bucket->CurrentVerts;

	mov	eax, DWORD PTR _bucket$[ebp]
	mov	ecx, DWORD PTR [eax+804]
	mov	DWORD PTR _vert$[ebp], ecx

; 1653 : 			bucket->CurrentVerts += 3;

	mov	eax, DWORD PTR _bucket$[ebp]
	mov	ecx, DWORD PTR [eax+804]
	add	ecx, 96					; 00000060H
	mov	edx, DWORD PTR _bucket$[ebp]
	mov	DWORD PTR [edx+804], ecx
$L82850:

; 1654 : 		}
; 1655 : 
; 1656 : // copy vert info
; 1657 : 
; 1658 : 		COPY_TRI_XYZRHW(vert);

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	add	ecx, 36					; 00000024H
	mov	edx, DWORD PTR _vert$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], ecx
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	add	ecx, 36					; 00000024H
	mov	edx, DWORD PTR _vert$[ebp]
	add	edx, 32					; 00000020H
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], ecx
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	add	ecx, 36					; 00000024H
	mov	edx, DWORD PTR _vert$[ebp]
	add	edx, 64					; 00000040H
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], ecx

; 1659 : 		COPY_TRI_UV(vert);

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [eax+8]
	mov	eax, DWORD PTR _vert$[ebp]
	mov	DWORD PTR [eax+24], ecx
	mov	DWORD PTR [eax+28], edx
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [eax+16]
	mov	eax, DWORD PTR _vert$[ebp]
	mov	DWORD PTR [eax+56], ecx
	mov	DWORD PTR [eax+60], edx
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [eax+24]
	mov	eax, DWORD PTR _vert$[ebp]
	mov	DWORD PTR [eax+88], ecx
	mov	DWORD PTR [eax+92], edx

; 1660 : 
; 1661 : 		if (ModelFog)

	movsx	eax, WORD PTR _ModelFog
	test	eax, eax
	je	SHORT $L82868

; 1662 : 			COPY_TRI_SPECULAR(vert);

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _vert$[ebp]
	mov	eax, DWORD PTR [ecx+56]
	mov	DWORD PTR [edx+20], eax
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	edx, DWORD PTR _vert$[ebp]
	mov	eax, DWORD PTR [ecx+56]
	mov	DWORD PTR [edx+52], eax
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	mov	edx, DWORD PTR _vert$[ebp]
	mov	eax, DWORD PTR [ecx+56]
	mov	DWORD PTR [edx+84], eax
$L82868:

; 1663 : 
; 1664 : 		if (lit)

	cmp	DWORD PTR _lit$[ebp], 0
	je	$L82869

; 1665 : 		{
; 1666 : 			COPY_MODEL_TRI_COLOR_LIT(vert);

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _mrgb$[ebp]
	movzx	eax, BYTE PTR [edx+2]
	add	eax, DWORD PTR [ecx+68]
	mov	DWORD PTR __i$82870[ebp], eax
	cmp	DWORD PTR __i$82870[ebp], 255		; 000000ffH
	jle	SHORT $L82872
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+18], 255			; 000000ffH
	jmp	SHORT $L82874
$L82872:
	cmp	DWORD PTR __i$82870[ebp], 0
	jge	SHORT $L82875
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+18], 0
	jmp	SHORT $L82874
$L82875:
	mov	eax, DWORD PTR _vert$[ebp]
	mov	cl, BYTE PTR __i$82870[ebp]
	mov	BYTE PTR [eax+18], cl
$L82874:
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _mrgb$[ebp]
	movzx	eax, BYTE PTR [edx+1]
	add	eax, DWORD PTR [ecx+72]
	mov	DWORD PTR __i$82870[ebp], eax
	cmp	DWORD PTR __i$82870[ebp], 255		; 000000ffH
	jle	SHORT $L82881
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+17], 255			; 000000ffH
	jmp	SHORT $L82883
$L82881:
	cmp	DWORD PTR __i$82870[ebp], 0
	jge	SHORT $L82884
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+17], 0
	jmp	SHORT $L82883
$L82884:
	mov	eax, DWORD PTR _vert$[ebp]
	mov	cl, BYTE PTR __i$82870[ebp]
	mov	BYTE PTR [eax+17], cl
$L82883:
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _mrgb$[ebp]
	movzx	eax, BYTE PTR [edx]
	add	eax, DWORD PTR [ecx+76]
	mov	DWORD PTR __i$82870[ebp], eax
	cmp	DWORD PTR __i$82870[ebp], 255		; 000000ffH
	jle	SHORT $L82890
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+16], 255			; 000000ffH
	jmp	SHORT $L82892
$L82890:
	cmp	DWORD PTR __i$82870[ebp], 0
	jge	SHORT $L82893
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+16], 0
	jmp	SHORT $L82892
$L82893:
	mov	eax, DWORD PTR _vert$[ebp]
	mov	cl, BYTE PTR __i$82870[ebp]
	mov	BYTE PTR [eax+16], cl
$L82892:
	mov	eax, DWORD PTR _vert$[ebp]
	mov	ecx, DWORD PTR _mrgb$[ebp]
	mov	dl, BYTE PTR [ecx+3]
	mov	BYTE PTR [eax+19], dl
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	edx, DWORD PTR _mrgb$[ebp]
	movzx	eax, BYTE PTR [edx+6]
	add	eax, DWORD PTR [ecx+68]
	mov	DWORD PTR __i$82899[ebp], eax
	cmp	DWORD PTR __i$82899[ebp], 255		; 000000ffH
	jle	SHORT $L82901
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+50], 255			; 000000ffH
	jmp	SHORT $L82903
$L82901:
	cmp	DWORD PTR __i$82899[ebp], 0
	jge	SHORT $L82904
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+50], 0
	jmp	SHORT $L82903
$L82904:
	mov	eax, DWORD PTR _vert$[ebp]
	mov	cl, BYTE PTR __i$82899[ebp]
	mov	BYTE PTR [eax+50], cl
$L82903:
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	edx, DWORD PTR _mrgb$[ebp]
	movzx	eax, BYTE PTR [edx+5]
	add	eax, DWORD PTR [ecx+72]
	mov	DWORD PTR __i$82899[ebp], eax
	cmp	DWORD PTR __i$82899[ebp], 255		; 000000ffH
	jle	SHORT $L82910
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+49], 255			; 000000ffH
	jmp	SHORT $L82912
$L82910:
	cmp	DWORD PTR __i$82899[ebp], 0
	jge	SHORT $L82913
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+49], 0
	jmp	SHORT $L82912
$L82913:
	mov	eax, DWORD PTR _vert$[ebp]
	mov	cl, BYTE PTR __i$82899[ebp]
	mov	BYTE PTR [eax+49], cl
$L82912:
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	edx, DWORD PTR _mrgb$[ebp]
	movzx	eax, BYTE PTR [edx+4]
	add	eax, DWORD PTR [ecx+76]
	mov	DWORD PTR __i$82899[ebp], eax
	cmp	DWORD PTR __i$82899[ebp], 255		; 000000ffH
	jle	SHORT $L82919
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+48], 255			; 000000ffH
	jmp	SHORT $L82921
$L82919:
	cmp	DWORD PTR __i$82899[ebp], 0
	jge	SHORT $L82922
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+48], 0
	jmp	SHORT $L82921
$L82922:
	mov	eax, DWORD PTR _vert$[ebp]
	mov	cl, BYTE PTR __i$82899[ebp]
	mov	BYTE PTR [eax+48], cl
$L82921:
	mov	eax, DWORD PTR _vert$[ebp]
	mov	ecx, DWORD PTR _mrgb$[ebp]
	mov	dl, BYTE PTR [ecx+7]
	mov	BYTE PTR [eax+51], dl
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	mov	edx, DWORD PTR _mrgb$[ebp]
	movzx	eax, BYTE PTR [edx+10]
	add	eax, DWORD PTR [ecx+68]
	mov	DWORD PTR __i$82928[ebp], eax
	cmp	DWORD PTR __i$82928[ebp], 255		; 000000ffH
	jle	SHORT $L82930
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+82], 255			; 000000ffH
	jmp	SHORT $L82932
$L82930:
	cmp	DWORD PTR __i$82928[ebp], 0
	jge	SHORT $L82933
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+82], 0
	jmp	SHORT $L82932
$L82933:
	mov	eax, DWORD PTR _vert$[ebp]
	mov	cl, BYTE PTR __i$82928[ebp]
	mov	BYTE PTR [eax+82], cl
$L82932:
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	mov	edx, DWORD PTR _mrgb$[ebp]
	movzx	eax, BYTE PTR [edx+9]
	add	eax, DWORD PTR [ecx+72]
	mov	DWORD PTR __i$82928[ebp], eax
	cmp	DWORD PTR __i$82928[ebp], 255		; 000000ffH
	jle	SHORT $L82939
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+81], 255			; 000000ffH
	jmp	SHORT $L82941
$L82939:
	cmp	DWORD PTR __i$82928[ebp], 0
	jge	SHORT $L82942
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+81], 0
	jmp	SHORT $L82941
$L82942:
	mov	eax, DWORD PTR _vert$[ebp]
	mov	cl, BYTE PTR __i$82928[ebp]
	mov	BYTE PTR [eax+81], cl
$L82941:
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	mov	edx, DWORD PTR _mrgb$[ebp]
	movzx	eax, BYTE PTR [edx+8]
	add	eax, DWORD PTR [ecx+76]
	mov	DWORD PTR __i$82928[ebp], eax
	cmp	DWORD PTR __i$82928[ebp], 255		; 000000ffH
	jle	SHORT $L82948
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+80], 255			; 000000ffH
	jmp	SHORT $L82950
$L82948:
	cmp	DWORD PTR __i$82928[ebp], 0
	jge	SHORT $L82951
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+80], 0
	jmp	SHORT $L82950
$L82951:
	mov	eax, DWORD PTR _vert$[ebp]
	mov	cl, BYTE PTR __i$82928[ebp]
	mov	BYTE PTR [eax+80], cl
$L82950:
	mov	eax, DWORD PTR _vert$[ebp]
	mov	ecx, DWORD PTR _mrgb$[ebp]
	mov	dl, BYTE PTR [ecx+11]
	mov	BYTE PTR [eax+83], dl

; 1667 : 		}
; 1668 : 		else

	jmp	SHORT $L82957
$L82869:

; 1669 : 		{
; 1670 : 			COPY_MODEL_TRI_COLOR(vert);

	mov	eax, DWORD PTR _vert$[ebp]
	mov	ecx, DWORD PTR _mrgb$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+16], edx
	mov	eax, DWORD PTR _vert$[ebp]
	mov	ecx, DWORD PTR _mrgb$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+48], edx
	mov	eax, DWORD PTR _vert$[ebp]
	mov	ecx, DWORD PTR _mrgb$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+80], edx
$L82957:

; 1671 : 		}
; 1672 : 
; 1673 : // env?
; 1674 : 
; 1675 : 		if (env)

	cmp	DWORD PTR _env$[ebp], 0
	je	$L82961

; 1676 : 		{
; 1677 : 			REJECT_MODEL_ENV_POLY();

	mov	eax, DWORD PTR _mp$[ebp]
	movsx	ecx, WORD PTR [eax]
	and	ecx, 1024				; 00000400H
	je	SHORT $L82962
	jmp	$L82842
$L82962:

; 1678 : 			INC_POLY_COUNT(ModelDrawnCount, 1);

	movsx	eax, WORD PTR ?ModelDrawnCount@@3FA	; ModelDrawnCount
	add	eax, 1
	mov	WORD PTR ?ModelDrawnCount@@3FA, ax	; ModelDrawnCount

; 1679 : 
; 1680 : // get env vert ptr
; 1681 : 
; 1682 : 			count = (short)(envbucket->CurrentVerts - envbucket->Verts);

	mov	eax, DWORD PTR _envbucket$[ebp]
	add	eax, 8008				; 00001f48H
	mov	ecx, DWORD PTR _envbucket$[ebp]
	mov	edx, DWORD PTR [ecx+8004]
	sub	edx, eax
	sar	edx, 5
	mov	WORD PTR _count$[ebp], dx

; 1683 : 
; 1684 : 			if (count > ENV_VERT_END)

	movsx	eax, WORD PTR _count$[ebp]
	cmp	eax, 1996				; 000007ccH
	jle	SHORT $L82964

; 1685 : 				continue;

	jmp	$L82842
$L82964:

; 1686 : 
; 1687 : 			envbucket->CurrentIndex[0] = count;

	mov	eax, DWORD PTR _envbucket$[ebp]
	mov	ecx, DWORD PTR [eax+8000]
	mov	dx, WORD PTR _count$[ebp]
	mov	WORD PTR [ecx], dx

; 1688 : 			envbucket->CurrentIndex[1] = count + 1;

	movsx	eax, WORD PTR _count$[ebp]
	add	eax, 1
	mov	ecx, DWORD PTR _envbucket$[ebp]
	mov	edx, DWORD PTR [ecx+8000]
	mov	WORD PTR [edx+2], ax

; 1689 : 			envbucket->CurrentIndex[2] = count + 2;

	movsx	eax, WORD PTR _count$[ebp]
	add	eax, 2
	mov	ecx, DWORD PTR _envbucket$[ebp]
	mov	edx, DWORD PTR [ecx+8000]
	mov	WORD PTR [edx+4], ax

; 1690 : 			envbucket->CurrentIndex += 3;

	mov	eax, DWORD PTR _envbucket$[ebp]
	mov	ecx, DWORD PTR [eax+8000]
	add	ecx, 6
	mov	edx, DWORD PTR _envbucket$[ebp]
	mov	DWORD PTR [edx+8000], ecx

; 1691 : 
; 1692 : 			vert = envbucket->CurrentVerts;

	mov	eax, DWORD PTR _envbucket$[ebp]
	mov	ecx, DWORD PTR [eax+8004]
	mov	DWORD PTR _vert$[ebp], ecx

; 1693 : 			envbucket->CurrentVerts += 3;

	mov	eax, DWORD PTR _envbucket$[ebp]
	mov	ecx, DWORD PTR [eax+8004]
	add	ecx, 96					; 00000060H
	mov	edx, DWORD PTR _envbucket$[ebp]
	mov	DWORD PTR [edx+8004], ecx

; 1694 : 
; 1695 : // copy env vert info
; 1696 : 
; 1697 : 			*(MEM32*)&vert[0] = *(MEM32*)&mp->v0->sx;

	mov	eax, DWORD PTR _mp$[ebp]
	mov	esi, DWORD PTR [eax+36]
	add	esi, 36					; 00000024H
	mov	ecx, 8
	mov	edi, DWORD PTR _vert$[ebp]
	rep movsd

; 1698 : 			*(MEM32*)&vert[1] = *(MEM32*)&mp->v1->sx;

	mov	eax, DWORD PTR _mp$[ebp]
	mov	esi, DWORD PTR [eax+40]
	add	esi, 36					; 00000024H
	mov	edi, DWORD PTR _vert$[ebp]
	add	edi, 32					; 00000020H
	mov	ecx, 8
	rep movsd

; 1699 : 			*(MEM32*)&vert[2] = *(MEM32*)&mp->v2->sx;

	mov	eax, DWORD PTR _mp$[ebp]
	mov	esi, DWORD PTR [eax+44]
	add	esi, 36					; 00000024H
	mov	edi, DWORD PTR _vert$[ebp]
	add	edi, 64					; 00000040H
	mov	ecx, 8
	rep movsd
$L82961:

; 1700 : 		}
; 1701 : 	}

	jmp	$L82842
$L82843:

; 1702 : 
; 1703 : // draw rgb quads
; 1704 : 
; 1705 : 	for (i = m->QuadNumRGB ; i ; i--, mrgb++, mp++)

	mov	eax, DWORD PTR _m$[ebp]
	movsx	ecx, WORD PTR [eax+40]
	mov	DWORD PTR _i$[ebp], ecx
	jmp	SHORT $L82971
$L82972:
	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	mov	ecx, DWORD PTR _mrgb$[ebp]
	add	ecx, 16					; 00000010H
	mov	DWORD PTR _mrgb$[ebp], ecx
	mov	edx, DWORD PTR _mp$[ebp]
	add	edx, 52					; 00000034H
	mov	DWORD PTR _mp$[ebp], edx
$L82971:
	cmp	DWORD PTR _i$[ebp], 0
	je	$L82973

; 1706 : 	{
; 1707 : 
; 1708 : // reject?
; 1709 : 
; 1710 : 		REJECT_MODEL_POLY();

	mov	eax, DWORD PTR _mp$[ebp]
	movsx	ecx, WORD PTR [eax]
	and	ecx, 2
	jne	SHORT $L82974
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	fld	DWORD PTR [ecx+36]
	mov	edx, DWORD PTR _mp$[ebp]
	mov	eax, DWORD PTR [edx+40]
	fsub	DWORD PTR [eax+36]
	mov	ecx, DWORD PTR _mp$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	fld	DWORD PTR [edx+40]
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	fsub	DWORD PTR [ecx+40]
	fmulp	ST(1), ST(0)
	mov	edx, DWORD PTR _mp$[ebp]
	mov	eax, DWORD PTR [edx+36]
	fld	DWORD PTR [eax+40]
	mov	ecx, DWORD PTR _mp$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	fsub	DWORD PTR [edx+40]
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	fld	DWORD PTR [ecx+36]
	mov	edx, DWORD PTR _mp$[ebp]
	mov	eax, DWORD PTR [edx+40]
	fsub	DWORD PTR [eax+36]
	fmulp	ST(1), ST(0)
	fsubp	ST(1), ST(0)
	fcomp	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $L82974
	jmp	$L82972
$L82974:

; 1711 : 		INC_POLY_COUNT(ModelDrawnCount, 2);

	movsx	eax, WORD PTR ?ModelDrawnCount@@3FA	; ModelDrawnCount
	add	eax, 2
	mov	WORD PTR ?ModelDrawnCount@@3FA, ax	; ModelDrawnCount

; 1712 : 
; 1713 : // get vert ptr
; 1714 : 
; 1715 : 		if (mp->Type & POLY_SEMITRANS)

	mov	eax, DWORD PTR _mp$[ebp]
	movsx	ecx, WORD PTR [eax]
	and	ecx, 4
	je	$L82976

; 1716 : 		{
; 1717 : 			if (!SEMI_POLY_FREE()) continue;

	cmp	DWORD PTR ?SemiCount@@3JA, 800		; SemiCount, 00000320H
	jl	SHORT $L82977
	jmp	$L82972
$L82977:

; 1718 : 			SEMI_POLY_SETUP_RGB(vertrgb, ModelFog, 4, FALSE, (mp->Type & POLY_SEMITRANS_ONE) != 0);

	movsx	eax, WORD PTR _ModelFog
	mov	ecx, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	ecx, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[ecx+12], eax
	mov	eax, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	eax, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[eax+4], 4
	mov	eax, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	eax, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[eax+8], -1
	xor	eax, eax
	je	SHORT $L82978
	mov	eax, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	eax, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[eax], 8
	jmp	SHORT $L82979
$L82978:
	mov	eax, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	eax, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[eax], 12 ; 0000000cH
$L82979:
	mov	eax, DWORD PTR _mp$[ebp]
	movsx	ecx, WORD PTR [eax]
	and	ecx, 256				; 00000100H
	neg	ecx
	sbb	ecx, ecx
	neg	ecx
	mov	edx, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	edx, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[edx+16], ecx
	mov	eax, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	eax, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[eax+20], 0
	mov	eax, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	eax, 152				; 00000098H
	add	eax, OFFSET FLAT:?SemiPoly@@3PAUDRAW_SEMI_POLY@@A+24
	mov	DWORD PTR _vertrgb$[ebp], eax
	mov	ecx, DWORD PTR ?SemiCount@@3JA		; SemiCount
	add	ecx, 1
	mov	DWORD PTR ?SemiCount@@3JA, ecx		; SemiCount

; 1719 : 		}
; 1720 : 		else

	jmp	$L82980
$L82976:

; 1721 : 		{
; 1722 : 			bucketrgb = ModelBucketHeadRGB;

	mov	eax, DWORD PTR _ModelBucketHeadRGB
	mov	DWORD PTR _bucketrgb$[ebp], eax

; 1723 : 			count = (short)(bucketrgb->CurrentVerts - bucketrgb->Verts);

	mov	eax, DWORD PTR _bucketrgb$[ebp]
	add	eax, 808				; 00000328H
	mov	ecx, DWORD PTR _bucketrgb$[ebp]
	mov	edx, DWORD PTR [ecx+804]
	sub	edx, eax
	mov	eax, edx
	cdq
	mov	ecx, 24					; 00000018H
	idiv	ecx
	mov	WORD PTR _count$[ebp], ax

; 1724 : 
; 1725 : 			if (count > BUCKET_VERT_END)

	movsx	eax, WORD PTR _count$[ebp]
	cmp	eax, 196				; 000000c4H
	jle	$L82982

; 1726 : 			{
; 1727 : 				SET_TPAGE(-1);

	movsx	eax, WORD PTR ?RenderTP@@3FA		; RenderTP
	cmp	eax, -1
	je	SHORT $L82983
	mov	WORD PTR ?RenderTP@@3FA, -1		; RenderTP
	movsx	eax, WORD PTR ?RenderTP@@3FA		; RenderTP
	cmp	eax, -1
	jne	SHORT $L82984
	push	0
	push	0
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	edx
	call	DWORD PTR [ecx+152]
	mov	eax, DWORD PTR ?TextureStateChange@@3JA	; TextureStateChange
	add	eax, 1
	mov	DWORD PTR ?TextureStateChange@@3JA, eax	; TextureStateChange
	jmp	SHORT $L82983
$L82984:
	movsx	eax, WORD PTR ?RenderTP@@3FA		; RenderTP
	shl	eax, 6
	mov	ecx, DWORD PTR ?TexInfo@@3PAUTEXINFO@@A	; TexInfo
	mov	edx, DWORD PTR [ecx+eax+52]
	push	edx
	push	0
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	edx
	call	DWORD PTR [ecx+152]
	mov	eax, DWORD PTR ?TextureStateChange@@3JA	; TextureStateChange
	add	eax, 1
	mov	DWORD PTR ?TextureStateChange@@3JA, eax	; TextureStateChange
$L82983:

; 1728 : 				FlushOneBucketTEX0(bucketrgb, FALSE);

	push	0
	mov	eax, DWORD PTR _bucketrgb$[ebp]
	push	eax
	call	?FlushOneBucketTEX0@@YAXPAUBUCKET_TEX0@@J@Z ; FlushOneBucketTEX0
	add	esp, 8

; 1729 : 				count = 0;

	mov	WORD PTR _count$[ebp], 0
$L82982:

; 1730 : 			}
; 1731 : 
; 1732 : 			bucketrgb->CurrentIndex[0] = count;

	mov	eax, DWORD PTR _bucketrgb$[ebp]
	mov	ecx, DWORD PTR [eax+800]
	mov	dx, WORD PTR _count$[ebp]
	mov	WORD PTR [ecx], dx

; 1733 : 			bucketrgb->CurrentIndex[1] = count + 1;

	movsx	eax, WORD PTR _count$[ebp]
	add	eax, 1
	mov	ecx, DWORD PTR _bucketrgb$[ebp]
	mov	edx, DWORD PTR [ecx+800]
	mov	WORD PTR [edx+2], ax

; 1734 : 			bucketrgb->CurrentIndex[2] = count + 2;

	movsx	eax, WORD PTR _count$[ebp]
	add	eax, 2
	mov	ecx, DWORD PTR _bucketrgb$[ebp]
	mov	edx, DWORD PTR [ecx+800]
	mov	WORD PTR [edx+4], ax

; 1735 : 			bucketrgb->CurrentIndex[3] = count;

	mov	eax, DWORD PTR _bucketrgb$[ebp]
	mov	ecx, DWORD PTR [eax+800]
	mov	dx, WORD PTR _count$[ebp]
	mov	WORD PTR [ecx+6], dx

; 1736 : 			bucketrgb->CurrentIndex[4] = count + 2;

	movsx	eax, WORD PTR _count$[ebp]
	add	eax, 2
	mov	ecx, DWORD PTR _bucketrgb$[ebp]
	mov	edx, DWORD PTR [ecx+800]
	mov	WORD PTR [edx+8], ax

; 1737 : 			bucketrgb->CurrentIndex[5] = count + 3;

	movsx	eax, WORD PTR _count$[ebp]
	add	eax, 3
	mov	ecx, DWORD PTR _bucketrgb$[ebp]
	mov	edx, DWORD PTR [ecx+800]
	mov	WORD PTR [edx+10], ax

; 1738 : 			bucketrgb->CurrentIndex += 6;

	mov	eax, DWORD PTR _bucketrgb$[ebp]
	mov	ecx, DWORD PTR [eax+800]
	add	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR _bucketrgb$[ebp]
	mov	DWORD PTR [edx+800], ecx

; 1739 : 
; 1740 : 			vertrgb = bucketrgb->CurrentVerts;

	mov	eax, DWORD PTR _bucketrgb$[ebp]
	mov	ecx, DWORD PTR [eax+804]
	mov	DWORD PTR _vertrgb$[ebp], ecx

; 1741 : 			bucketrgb->CurrentVerts += 4;

	mov	eax, DWORD PTR _bucketrgb$[ebp]
	mov	ecx, DWORD PTR [eax+804]
	add	ecx, 96					; 00000060H
	mov	edx, DWORD PTR _bucketrgb$[ebp]
	mov	DWORD PTR [edx+804], ecx
$L82980:

; 1742 : 		}
; 1743 : 
; 1744 : // copy vert info
; 1745 : 
; 1746 : 		COPY_QUAD_XYZRHW(vertrgb);

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	add	ecx, 36					; 00000024H
	mov	edx, DWORD PTR _vertrgb$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], ecx
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	add	ecx, 36					; 00000024H
	mov	edx, DWORD PTR _vertrgb$[ebp]
	add	edx, 24					; 00000018H
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], ecx
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	add	ecx, 36					; 00000024H
	mov	edx, DWORD PTR _vertrgb$[ebp]
	add	edx, 48					; 00000030H
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], ecx
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	add	ecx, 36					; 00000024H
	mov	edx, DWORD PTR _vertrgb$[ebp]
	add	edx, 72					; 00000048H
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], ecx

; 1747 : 
; 1748 : 		if (ModelFog)

	movsx	eax, WORD PTR _ModelFog
	test	eax, eax
	je	SHORT $L82994

; 1749 : 			COPY_QUAD_SPECULAR(vertrgb);

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _vertrgb$[ebp]
	mov	eax, DWORD PTR [ecx+56]
	mov	DWORD PTR [edx+20], eax
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	edx, DWORD PTR _vertrgb$[ebp]
	mov	eax, DWORD PTR [ecx+56]
	mov	DWORD PTR [edx+44], eax
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	mov	edx, DWORD PTR _vertrgb$[ebp]
	mov	eax, DWORD PTR [ecx+56]
	mov	DWORD PTR [edx+68], eax
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	mov	edx, DWORD PTR _vertrgb$[ebp]
	mov	eax, DWORD PTR [ecx+56]
	mov	DWORD PTR [edx+92], eax
$L82994:

; 1750 : 
; 1751 : 		if (lit)

	cmp	DWORD PTR _lit$[ebp], 0
	je	$L82995

; 1752 : 		{
; 1753 : 			COPY_MODEL_QUAD_COLOR_LIT(vertrgb);

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _mrgb$[ebp]
	movzx	eax, BYTE PTR [edx+2]
	add	eax, DWORD PTR [ecx+68]
	mov	DWORD PTR __i$82996[ebp], eax
	cmp	DWORD PTR __i$82996[ebp], 255		; 000000ffH
	jle	SHORT $L82998
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+18], 255			; 000000ffH
	jmp	SHORT $L83000
$L82998:
	cmp	DWORD PTR __i$82996[ebp], 0
	jge	SHORT $L83001
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+18], 0
	jmp	SHORT $L83000
$L83001:
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	cl, BYTE PTR __i$82996[ebp]
	mov	BYTE PTR [eax+18], cl
$L83000:
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _mrgb$[ebp]
	movzx	eax, BYTE PTR [edx+1]
	add	eax, DWORD PTR [ecx+72]
	mov	DWORD PTR __i$82996[ebp], eax
	cmp	DWORD PTR __i$82996[ebp], 255		; 000000ffH
	jle	SHORT $L83007
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+17], 255			; 000000ffH
	jmp	SHORT $L83009
$L83007:
	cmp	DWORD PTR __i$82996[ebp], 0
	jge	SHORT $L83010
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+17], 0
	jmp	SHORT $L83009
$L83010:
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	cl, BYTE PTR __i$82996[ebp]
	mov	BYTE PTR [eax+17], cl
$L83009:
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _mrgb$[ebp]
	movzx	eax, BYTE PTR [edx]
	add	eax, DWORD PTR [ecx+76]
	mov	DWORD PTR __i$82996[ebp], eax
	cmp	DWORD PTR __i$82996[ebp], 255		; 000000ffH
	jle	SHORT $L83016
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+16], 255			; 000000ffH
	jmp	SHORT $L83018
$L83016:
	cmp	DWORD PTR __i$82996[ebp], 0
	jge	SHORT $L83019
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+16], 0
	jmp	SHORT $L83018
$L83019:
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	cl, BYTE PTR __i$82996[ebp]
	mov	BYTE PTR [eax+16], cl
$L83018:
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	ecx, DWORD PTR _mrgb$[ebp]
	mov	dl, BYTE PTR [ecx+3]
	mov	BYTE PTR [eax+19], dl
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	edx, DWORD PTR _mrgb$[ebp]
	movzx	eax, BYTE PTR [edx+6]
	add	eax, DWORD PTR [ecx+68]
	mov	DWORD PTR __i$83025[ebp], eax
	cmp	DWORD PTR __i$83025[ebp], 255		; 000000ffH
	jle	SHORT $L83027
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+42], 255			; 000000ffH
	jmp	SHORT $L83029
$L83027:
	cmp	DWORD PTR __i$83025[ebp], 0
	jge	SHORT $L83030
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+42], 0
	jmp	SHORT $L83029
$L83030:
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	cl, BYTE PTR __i$83025[ebp]
	mov	BYTE PTR [eax+42], cl
$L83029:
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	edx, DWORD PTR _mrgb$[ebp]
	movzx	eax, BYTE PTR [edx+5]
	add	eax, DWORD PTR [ecx+72]
	mov	DWORD PTR __i$83025[ebp], eax
	cmp	DWORD PTR __i$83025[ebp], 255		; 000000ffH
	jle	SHORT $L83036
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+41], 255			; 000000ffH
	jmp	SHORT $L83038
$L83036:
	cmp	DWORD PTR __i$83025[ebp], 0
	jge	SHORT $L83039
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+41], 0
	jmp	SHORT $L83038
$L83039:
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	cl, BYTE PTR __i$83025[ebp]
	mov	BYTE PTR [eax+41], cl
$L83038:
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	edx, DWORD PTR _mrgb$[ebp]
	movzx	eax, BYTE PTR [edx+4]
	add	eax, DWORD PTR [ecx+76]
	mov	DWORD PTR __i$83025[ebp], eax
	cmp	DWORD PTR __i$83025[ebp], 255		; 000000ffH
	jle	SHORT $L83045
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+40], 255			; 000000ffH
	jmp	SHORT $L83047
$L83045:
	cmp	DWORD PTR __i$83025[ebp], 0
	jge	SHORT $L83048
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+40], 0
	jmp	SHORT $L83047
$L83048:
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	cl, BYTE PTR __i$83025[ebp]
	mov	BYTE PTR [eax+40], cl
$L83047:
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	ecx, DWORD PTR _mrgb$[ebp]
	mov	dl, BYTE PTR [ecx+7]
	mov	BYTE PTR [eax+43], dl
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	mov	edx, DWORD PTR _mrgb$[ebp]
	movzx	eax, BYTE PTR [edx+10]
	add	eax, DWORD PTR [ecx+68]
	mov	DWORD PTR __i$83054[ebp], eax
	cmp	DWORD PTR __i$83054[ebp], 255		; 000000ffH
	jle	SHORT $L83056
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+66], 255			; 000000ffH
	jmp	SHORT $L83058
$L83056:
	cmp	DWORD PTR __i$83054[ebp], 0
	jge	SHORT $L83059
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+66], 0
	jmp	SHORT $L83058
$L83059:
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	cl, BYTE PTR __i$83054[ebp]
	mov	BYTE PTR [eax+66], cl
$L83058:
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	mov	edx, DWORD PTR _mrgb$[ebp]
	movzx	eax, BYTE PTR [edx+9]
	add	eax, DWORD PTR [ecx+72]
	mov	DWORD PTR __i$83054[ebp], eax
	cmp	DWORD PTR __i$83054[ebp], 255		; 000000ffH
	jle	SHORT $L83065
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+65], 255			; 000000ffH
	jmp	SHORT $L83067
$L83065:
	cmp	DWORD PTR __i$83054[ebp], 0
	jge	SHORT $L83068
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+65], 0
	jmp	SHORT $L83067
$L83068:
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	cl, BYTE PTR __i$83054[ebp]
	mov	BYTE PTR [eax+65], cl
$L83067:
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	mov	edx, DWORD PTR _mrgb$[ebp]
	movzx	eax, BYTE PTR [edx+8]
	add	eax, DWORD PTR [ecx+76]
	mov	DWORD PTR __i$83054[ebp], eax
	cmp	DWORD PTR __i$83054[ebp], 255		; 000000ffH
	jle	SHORT $L83074
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+64], 255			; 000000ffH
	jmp	SHORT $L83076
$L83074:
	cmp	DWORD PTR __i$83054[ebp], 0
	jge	SHORT $L83077
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+64], 0
	jmp	SHORT $L83076
$L83077:
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	cl, BYTE PTR __i$83054[ebp]
	mov	BYTE PTR [eax+64], cl
$L83076:
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	ecx, DWORD PTR _mrgb$[ebp]
	mov	dl, BYTE PTR [ecx+11]
	mov	BYTE PTR [eax+67], dl
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	mov	edx, DWORD PTR _mrgb$[ebp]
	movzx	eax, BYTE PTR [edx+14]
	add	eax, DWORD PTR [ecx+68]
	mov	DWORD PTR __i$83083[ebp], eax
	cmp	DWORD PTR __i$83083[ebp], 255		; 000000ffH
	jle	SHORT $L83085
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+90], 255			; 000000ffH
	jmp	SHORT $L83087
$L83085:
	cmp	DWORD PTR __i$83083[ebp], 0
	jge	SHORT $L83088
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+90], 0
	jmp	SHORT $L83087
$L83088:
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	cl, BYTE PTR __i$83083[ebp]
	mov	BYTE PTR [eax+90], cl
$L83087:
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	mov	edx, DWORD PTR _mrgb$[ebp]
	movzx	eax, BYTE PTR [edx+13]
	add	eax, DWORD PTR [ecx+72]
	mov	DWORD PTR __i$83083[ebp], eax
	cmp	DWORD PTR __i$83083[ebp], 255		; 000000ffH
	jle	SHORT $L83094
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+89], 255			; 000000ffH
	jmp	SHORT $L83096
$L83094:
	cmp	DWORD PTR __i$83083[ebp], 0
	jge	SHORT $L83097
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+89], 0
	jmp	SHORT $L83096
$L83097:
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	cl, BYTE PTR __i$83083[ebp]
	mov	BYTE PTR [eax+89], cl
$L83096:
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	mov	edx, DWORD PTR _mrgb$[ebp]
	movzx	eax, BYTE PTR [edx+12]
	add	eax, DWORD PTR [ecx+76]
	mov	DWORD PTR __i$83083[ebp], eax
	cmp	DWORD PTR __i$83083[ebp], 255		; 000000ffH
	jle	SHORT $L83103
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+88], 255			; 000000ffH
	jmp	SHORT $L83105
$L83103:
	cmp	DWORD PTR __i$83083[ebp], 0
	jge	SHORT $L83106
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+88], 0
	jmp	SHORT $L83105
$L83106:
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	cl, BYTE PTR __i$83083[ebp]
	mov	BYTE PTR [eax+88], cl
$L83105:
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	ecx, DWORD PTR _mrgb$[ebp]
	mov	dl, BYTE PTR [ecx+15]
	mov	BYTE PTR [eax+91], dl

; 1754 : 		}
; 1755 : 		else

	jmp	SHORT $L83112
$L82995:

; 1756 : 		{
; 1757 : 			COPY_MODEL_QUAD_COLOR(vertrgb);

	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	ecx, DWORD PTR _mrgb$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+16], edx
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	ecx, DWORD PTR _mrgb$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+40], edx
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	ecx, DWORD PTR _mrgb$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+64], edx
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	ecx, DWORD PTR _mrgb$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+88], edx
$L83112:

; 1758 : 		}
; 1759 : 
; 1760 : // env?
; 1761 : 
; 1762 : 		if (env)

	cmp	DWORD PTR _env$[ebp], 0
	je	$L83117

; 1763 : 		{
; 1764 : 			REJECT_MODEL_ENV_POLY();

	mov	eax, DWORD PTR _mp$[ebp]
	movsx	ecx, WORD PTR [eax]
	and	ecx, 1024				; 00000400H
	je	SHORT $L83118
	jmp	$L82972
$L83118:

; 1765 : 			INC_POLY_COUNT(ModelDrawnCount, 2);

	movsx	eax, WORD PTR ?ModelDrawnCount@@3FA	; ModelDrawnCount
	add	eax, 2
	mov	WORD PTR ?ModelDrawnCount@@3FA, ax	; ModelDrawnCount

; 1766 : 
; 1767 : // get env vert ptr
; 1768 : 
; 1769 : 			count = (short)(envbucket->CurrentVerts - envbucket->Verts);

	mov	eax, DWORD PTR _envbucket$[ebp]
	add	eax, 8008				; 00001f48H
	mov	ecx, DWORD PTR _envbucket$[ebp]
	mov	edx, DWORD PTR [ecx+8004]
	sub	edx, eax
	sar	edx, 5
	mov	WORD PTR _count$[ebp], dx

; 1770 : 
; 1771 : 			if (count > ENV_VERT_END)

	movsx	eax, WORD PTR _count$[ebp]
	cmp	eax, 1996				; 000007ccH
	jle	SHORT $L83120

; 1772 : 				continue;

	jmp	$L82972
$L83120:

; 1773 : 
; 1774 : 			envbucket->CurrentIndex[0] = count;

	mov	eax, DWORD PTR _envbucket$[ebp]
	mov	ecx, DWORD PTR [eax+8000]
	mov	dx, WORD PTR _count$[ebp]
	mov	WORD PTR [ecx], dx

; 1775 : 			envbucket->CurrentIndex[1] = count + 1;

	movsx	eax, WORD PTR _count$[ebp]
	add	eax, 1
	mov	ecx, DWORD PTR _envbucket$[ebp]
	mov	edx, DWORD PTR [ecx+8000]
	mov	WORD PTR [edx+2], ax

; 1776 : 			envbucket->CurrentIndex[2] = count + 2;

	movsx	eax, WORD PTR _count$[ebp]
	add	eax, 2
	mov	ecx, DWORD PTR _envbucket$[ebp]
	mov	edx, DWORD PTR [ecx+8000]
	mov	WORD PTR [edx+4], ax

; 1777 : 			envbucket->CurrentIndex[3] = count;

	mov	eax, DWORD PTR _envbucket$[ebp]
	mov	ecx, DWORD PTR [eax+8000]
	mov	dx, WORD PTR _count$[ebp]
	mov	WORD PTR [ecx+6], dx

; 1778 : 			envbucket->CurrentIndex[4] = count + 2;

	movsx	eax, WORD PTR _count$[ebp]
	add	eax, 2
	mov	ecx, DWORD PTR _envbucket$[ebp]
	mov	edx, DWORD PTR [ecx+8000]
	mov	WORD PTR [edx+8], ax

; 1779 : 			envbucket->CurrentIndex[5] = count + 3;

	movsx	eax, WORD PTR _count$[ebp]
	add	eax, 3
	mov	ecx, DWORD PTR _envbucket$[ebp]
	mov	edx, DWORD PTR [ecx+8000]
	mov	WORD PTR [edx+10], ax

; 1780 : 			envbucket->CurrentIndex += 6;

	mov	eax, DWORD PTR _envbucket$[ebp]
	mov	ecx, DWORD PTR [eax+8000]
	add	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR _envbucket$[ebp]
	mov	DWORD PTR [edx+8000], ecx

; 1781 : 
; 1782 : 			vert = envbucket->CurrentVerts;

	mov	eax, DWORD PTR _envbucket$[ebp]
	mov	ecx, DWORD PTR [eax+8004]
	mov	DWORD PTR _vert$[ebp], ecx

; 1783 : 			envbucket->CurrentVerts += 4;

	mov	eax, DWORD PTR _envbucket$[ebp]
	mov	ecx, DWORD PTR [eax+8004]
	add	ecx, 128				; 00000080H
	mov	edx, DWORD PTR _envbucket$[ebp]
	mov	DWORD PTR [edx+8004], ecx

; 1784 : 
; 1785 : // copy env vert info
; 1786 : 
; 1787 : 			*(MEM32*)&vert[0] = *(MEM32*)&mp->v0->sx;

	mov	eax, DWORD PTR _mp$[ebp]
	mov	esi, DWORD PTR [eax+36]
	add	esi, 36					; 00000024H
	mov	ecx, 8
	mov	edi, DWORD PTR _vert$[ebp]
	rep movsd

; 1788 : 			*(MEM32*)&vert[1] = *(MEM32*)&mp->v1->sx;

	mov	eax, DWORD PTR _mp$[ebp]
	mov	esi, DWORD PTR [eax+40]
	add	esi, 36					; 00000024H
	mov	edi, DWORD PTR _vert$[ebp]
	add	edi, 32					; 00000020H
	mov	ecx, 8
	rep movsd

; 1789 : 			*(MEM32*)&vert[2] = *(MEM32*)&mp->v2->sx;

	mov	eax, DWORD PTR _mp$[ebp]
	mov	esi, DWORD PTR [eax+44]
	add	esi, 36					; 00000024H
	mov	edi, DWORD PTR _vert$[ebp]
	add	edi, 64					; 00000040H
	mov	ecx, 8
	rep movsd

; 1790 : 			*(MEM32*)&vert[3] = *(MEM32*)&mp->v3->sx;

	mov	eax, DWORD PTR _mp$[ebp]
	mov	esi, DWORD PTR [eax+48]
	add	esi, 36					; 00000024H
	mov	edi, DWORD PTR _vert$[ebp]
	add	edi, 96					; 00000060H
	mov	ecx, 8
	rep movsd
$L83117:

; 1791 : 		}
; 1792 : 	}

	jmp	$L82972
$L82973:

; 1793 : 
; 1794 : // draw rgb tri's
; 1795 : 
; 1796 : 	for (i = m->TriNumRGB ; i ; i--, mrgb++, mp++)

	mov	eax, DWORD PTR _m$[ebp]
	movsx	ecx, WORD PTR [eax+42]
	mov	DWORD PTR _i$[ebp], ecx
	jmp	SHORT $L83129
$L83130:
	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	mov	ecx, DWORD PTR _mrgb$[ebp]
	add	ecx, 16					; 00000010H
	mov	DWORD PTR _mrgb$[ebp], ecx
	mov	edx, DWORD PTR _mp$[ebp]
	add	edx, 52					; 00000034H
	mov	DWORD PTR _mp$[ebp], edx
$L83129:
	cmp	DWORD PTR _i$[ebp], 0
	je	$L82664

; 1797 : 	{
; 1798 : 
; 1799 : // reject?
; 1800 : 
; 1801 : 		REJECT_MODEL_POLY();

	mov	eax, DWORD PTR _mp$[ebp]
	movsx	ecx, WORD PTR [eax]
	and	ecx, 2
	jne	SHORT $L83132
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	fld	DWORD PTR [ecx+36]
	mov	edx, DWORD PTR _mp$[ebp]
	mov	eax, DWORD PTR [edx+40]
	fsub	DWORD PTR [eax+36]
	mov	ecx, DWORD PTR _mp$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	fld	DWORD PTR [edx+40]
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	fsub	DWORD PTR [ecx+40]
	fmulp	ST(1), ST(0)
	mov	edx, DWORD PTR _mp$[ebp]
	mov	eax, DWORD PTR [edx+36]
	fld	DWORD PTR [eax+40]
	mov	ecx, DWORD PTR _mp$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	fsub	DWORD PTR [edx+40]
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	fld	DWORD PTR [ecx+36]
	mov	edx, DWORD PTR _mp$[ebp]
	mov	eax, DWORD PTR [edx+40]
	fsub	DWORD PTR [eax+36]
	fmulp	ST(1), ST(0)
	fsubp	ST(1), ST(0)
	fcomp	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $L83132
	jmp	$L83130
$L83132:

; 1802 : 		INC_POLY_COUNT(ModelDrawnCount, 1);

	movsx	eax, WORD PTR ?ModelDrawnCount@@3FA	; ModelDrawnCount
	add	eax, 1
	mov	WORD PTR ?ModelDrawnCount@@3FA, ax	; ModelDrawnCount

; 1803 : 
; 1804 : // get vert ptr
; 1805 : 
; 1806 : 		if (mp->Type & POLY_SEMITRANS)

	mov	eax, DWORD PTR _mp$[ebp]
	movsx	ecx, WORD PTR [eax]
	and	ecx, 4
	je	$L83134

; 1807 : 		{
; 1808 : 			if (!SEMI_POLY_FREE()) continue;

	cmp	DWORD PTR ?SemiCount@@3JA, 800		; SemiCount, 00000320H
	jl	SHORT $L83135
	jmp	$L83130
$L83135:

; 1809 : 			SEMI_POLY_SETUP_RGB(vertrgb, ModelFog, 3, FALSE, (mp->Type & POLY_SEMITRANS_ONE) != 0);

	movsx	eax, WORD PTR _ModelFog
	mov	ecx, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	ecx, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[ecx+12], eax
	mov	eax, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	eax, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[eax+4], 3
	mov	eax, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	eax, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[eax+8], -1
	xor	eax, eax
	je	SHORT $L83136
	mov	eax, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	eax, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[eax], 8
	jmp	SHORT $L83137
$L83136:
	mov	eax, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	eax, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[eax], 12 ; 0000000cH
$L83137:
	mov	eax, DWORD PTR _mp$[ebp]
	movsx	ecx, WORD PTR [eax]
	and	ecx, 256				; 00000100H
	neg	ecx
	sbb	ecx, ecx
	neg	ecx
	mov	edx, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	edx, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[edx+16], ecx
	mov	eax, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	eax, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[eax+20], 0
	mov	eax, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	eax, 152				; 00000098H
	add	eax, OFFSET FLAT:?SemiPoly@@3PAUDRAW_SEMI_POLY@@A+24
	mov	DWORD PTR _vertrgb$[ebp], eax
	mov	ecx, DWORD PTR ?SemiCount@@3JA		; SemiCount
	add	ecx, 1
	mov	DWORD PTR ?SemiCount@@3JA, ecx		; SemiCount

; 1810 : 		}
; 1811 : 		else

	jmp	$L83138
$L83134:

; 1812 : 		{
; 1813 : 			bucketrgb = ModelBucketHeadRGB;

	mov	eax, DWORD PTR _ModelBucketHeadRGB
	mov	DWORD PTR _bucketrgb$[ebp], eax

; 1814 : 			count = (short)(bucketrgb->CurrentVerts - bucketrgb->Verts);

	mov	eax, DWORD PTR _bucketrgb$[ebp]
	add	eax, 808				; 00000328H
	mov	ecx, DWORD PTR _bucketrgb$[ebp]
	mov	edx, DWORD PTR [ecx+804]
	sub	edx, eax
	mov	eax, edx
	cdq
	mov	ecx, 24					; 00000018H
	idiv	ecx
	mov	WORD PTR _count$[ebp], ax

; 1815 : 
; 1816 : 			if (count > BUCKET_VERT_END)

	movsx	eax, WORD PTR _count$[ebp]
	cmp	eax, 196				; 000000c4H
	jle	$L83140

; 1817 : 			{
; 1818 : 				SET_TPAGE(-1);

	movsx	eax, WORD PTR ?RenderTP@@3FA		; RenderTP
	cmp	eax, -1
	je	SHORT $L83141
	mov	WORD PTR ?RenderTP@@3FA, -1		; RenderTP
	movsx	eax, WORD PTR ?RenderTP@@3FA		; RenderTP
	cmp	eax, -1
	jne	SHORT $L83142
	push	0
	push	0
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	edx
	call	DWORD PTR [ecx+152]
	mov	eax, DWORD PTR ?TextureStateChange@@3JA	; TextureStateChange
	add	eax, 1
	mov	DWORD PTR ?TextureStateChange@@3JA, eax	; TextureStateChange
	jmp	SHORT $L83141
$L83142:
	movsx	eax, WORD PTR ?RenderTP@@3FA		; RenderTP
	shl	eax, 6
	mov	ecx, DWORD PTR ?TexInfo@@3PAUTEXINFO@@A	; TexInfo
	mov	edx, DWORD PTR [ecx+eax+52]
	push	edx
	push	0
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	edx
	call	DWORD PTR [ecx+152]
	mov	eax, DWORD PTR ?TextureStateChange@@3JA	; TextureStateChange
	add	eax, 1
	mov	DWORD PTR ?TextureStateChange@@3JA, eax	; TextureStateChange
$L83141:

; 1819 : 				FlushOneBucketTEX0(bucketrgb, FALSE);

	push	0
	mov	eax, DWORD PTR _bucketrgb$[ebp]
	push	eax
	call	?FlushOneBucketTEX0@@YAXPAUBUCKET_TEX0@@J@Z ; FlushOneBucketTEX0
	add	esp, 8

; 1820 : 				count = 0;

	mov	WORD PTR _count$[ebp], 0
$L83140:

; 1821 : 			}
; 1822 : 
; 1823 : 			bucketrgb->CurrentIndex[0] = count;

	mov	eax, DWORD PTR _bucketrgb$[ebp]
	mov	ecx, DWORD PTR [eax+800]
	mov	dx, WORD PTR _count$[ebp]
	mov	WORD PTR [ecx], dx

; 1824 : 			bucketrgb->CurrentIndex[1] = count + 1;

	movsx	eax, WORD PTR _count$[ebp]
	add	eax, 1
	mov	ecx, DWORD PTR _bucketrgb$[ebp]
	mov	edx, DWORD PTR [ecx+800]
	mov	WORD PTR [edx+2], ax

; 1825 : 			bucketrgb->CurrentIndex[2] = count + 2;

	movsx	eax, WORD PTR _count$[ebp]
	add	eax, 2
	mov	ecx, DWORD PTR _bucketrgb$[ebp]
	mov	edx, DWORD PTR [ecx+800]
	mov	WORD PTR [edx+4], ax

; 1826 : 			bucketrgb->CurrentIndex += 3;

	mov	eax, DWORD PTR _bucketrgb$[ebp]
	mov	ecx, DWORD PTR [eax+800]
	add	ecx, 6
	mov	edx, DWORD PTR _bucketrgb$[ebp]
	mov	DWORD PTR [edx+800], ecx

; 1827 : 
; 1828 : 			vertrgb = bucketrgb->CurrentVerts;

	mov	eax, DWORD PTR _bucketrgb$[ebp]
	mov	ecx, DWORD PTR [eax+804]
	mov	DWORD PTR _vertrgb$[ebp], ecx

; 1829 : 			bucketrgb->CurrentVerts += 3;

	mov	eax, DWORD PTR _bucketrgb$[ebp]
	mov	ecx, DWORD PTR [eax+804]
	add	ecx, 72					; 00000048H
	mov	edx, DWORD PTR _bucketrgb$[ebp]
	mov	DWORD PTR [edx+804], ecx
$L83138:

; 1830 : 		}
; 1831 : 
; 1832 : // copy vert info
; 1833 : 
; 1834 : 		COPY_TRI_XYZRHW(vertrgb);

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	add	ecx, 36					; 00000024H
	mov	edx, DWORD PTR _vertrgb$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], ecx
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	add	ecx, 36					; 00000024H
	mov	edx, DWORD PTR _vertrgb$[ebp]
	add	edx, 24					; 00000018H
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], ecx
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	add	ecx, 36					; 00000024H
	mov	edx, DWORD PTR _vertrgb$[ebp]
	add	edx, 48					; 00000030H
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], ecx

; 1835 : 
; 1836 : 		if (ModelFog)

	movsx	eax, WORD PTR _ModelFog
	test	eax, eax
	je	SHORT $L83150

; 1837 : 			COPY_TRI_SPECULAR(vertrgb);

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _vertrgb$[ebp]
	mov	eax, DWORD PTR [ecx+56]
	mov	DWORD PTR [edx+20], eax
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	edx, DWORD PTR _vertrgb$[ebp]
	mov	eax, DWORD PTR [ecx+56]
	mov	DWORD PTR [edx+44], eax
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	mov	edx, DWORD PTR _vertrgb$[ebp]
	mov	eax, DWORD PTR [ecx+56]
	mov	DWORD PTR [edx+68], eax
$L83150:

; 1838 : 
; 1839 : 		if (lit)

	cmp	DWORD PTR _lit$[ebp], 0
	je	$L83151

; 1840 : 		{
; 1841 : 			COPY_MODEL_TRI_COLOR_LIT(vertrgb);

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _mrgb$[ebp]
	movzx	eax, BYTE PTR [edx+2]
	add	eax, DWORD PTR [ecx+68]
	mov	DWORD PTR __i$83152[ebp], eax
	cmp	DWORD PTR __i$83152[ebp], 255		; 000000ffH
	jle	SHORT $L83154
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+18], 255			; 000000ffH
	jmp	SHORT $L83156
$L83154:
	cmp	DWORD PTR __i$83152[ebp], 0
	jge	SHORT $L83157
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+18], 0
	jmp	SHORT $L83156
$L83157:
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	cl, BYTE PTR __i$83152[ebp]
	mov	BYTE PTR [eax+18], cl
$L83156:
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _mrgb$[ebp]
	movzx	eax, BYTE PTR [edx+1]
	add	eax, DWORD PTR [ecx+72]
	mov	DWORD PTR __i$83152[ebp], eax
	cmp	DWORD PTR __i$83152[ebp], 255		; 000000ffH
	jle	SHORT $L83163
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+17], 255			; 000000ffH
	jmp	SHORT $L83165
$L83163:
	cmp	DWORD PTR __i$83152[ebp], 0
	jge	SHORT $L83166
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+17], 0
	jmp	SHORT $L83165
$L83166:
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	cl, BYTE PTR __i$83152[ebp]
	mov	BYTE PTR [eax+17], cl
$L83165:
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _mrgb$[ebp]
	movzx	eax, BYTE PTR [edx]
	add	eax, DWORD PTR [ecx+76]
	mov	DWORD PTR __i$83152[ebp], eax
	cmp	DWORD PTR __i$83152[ebp], 255		; 000000ffH
	jle	SHORT $L83172
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+16], 255			; 000000ffH
	jmp	SHORT $L83174
$L83172:
	cmp	DWORD PTR __i$83152[ebp], 0
	jge	SHORT $L83175
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+16], 0
	jmp	SHORT $L83174
$L83175:
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	cl, BYTE PTR __i$83152[ebp]
	mov	BYTE PTR [eax+16], cl
$L83174:
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	ecx, DWORD PTR _mrgb$[ebp]
	mov	dl, BYTE PTR [ecx+3]
	mov	BYTE PTR [eax+19], dl
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	edx, DWORD PTR _mrgb$[ebp]
	movzx	eax, BYTE PTR [edx+6]
	add	eax, DWORD PTR [ecx+68]
	mov	DWORD PTR __i$83181[ebp], eax
	cmp	DWORD PTR __i$83181[ebp], 255		; 000000ffH
	jle	SHORT $L83183
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+42], 255			; 000000ffH
	jmp	SHORT $L83185
$L83183:
	cmp	DWORD PTR __i$83181[ebp], 0
	jge	SHORT $L83186
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+42], 0
	jmp	SHORT $L83185
$L83186:
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	cl, BYTE PTR __i$83181[ebp]
	mov	BYTE PTR [eax+42], cl
$L83185:
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	edx, DWORD PTR _mrgb$[ebp]
	movzx	eax, BYTE PTR [edx+5]
	add	eax, DWORD PTR [ecx+72]
	mov	DWORD PTR __i$83181[ebp], eax
	cmp	DWORD PTR __i$83181[ebp], 255		; 000000ffH
	jle	SHORT $L83192
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+41], 255			; 000000ffH
	jmp	SHORT $L83194
$L83192:
	cmp	DWORD PTR __i$83181[ebp], 0
	jge	SHORT $L83195
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+41], 0
	jmp	SHORT $L83194
$L83195:
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	cl, BYTE PTR __i$83181[ebp]
	mov	BYTE PTR [eax+41], cl
$L83194:
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	edx, DWORD PTR _mrgb$[ebp]
	movzx	eax, BYTE PTR [edx+4]
	add	eax, DWORD PTR [ecx+76]
	mov	DWORD PTR __i$83181[ebp], eax
	cmp	DWORD PTR __i$83181[ebp], 255		; 000000ffH
	jle	SHORT $L83201
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+40], 255			; 000000ffH
	jmp	SHORT $L83203
$L83201:
	cmp	DWORD PTR __i$83181[ebp], 0
	jge	SHORT $L83204
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+40], 0
	jmp	SHORT $L83203
$L83204:
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	cl, BYTE PTR __i$83181[ebp]
	mov	BYTE PTR [eax+40], cl
$L83203:
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	ecx, DWORD PTR _mrgb$[ebp]
	mov	dl, BYTE PTR [ecx+7]
	mov	BYTE PTR [eax+43], dl
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	mov	edx, DWORD PTR _mrgb$[ebp]
	movzx	eax, BYTE PTR [edx+10]
	add	eax, DWORD PTR [ecx+68]
	mov	DWORD PTR __i$83210[ebp], eax
	cmp	DWORD PTR __i$83210[ebp], 255		; 000000ffH
	jle	SHORT $L83212
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+66], 255			; 000000ffH
	jmp	SHORT $L83214
$L83212:
	cmp	DWORD PTR __i$83210[ebp], 0
	jge	SHORT $L83215
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+66], 0
	jmp	SHORT $L83214
$L83215:
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	cl, BYTE PTR __i$83210[ebp]
	mov	BYTE PTR [eax+66], cl
$L83214:
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	mov	edx, DWORD PTR _mrgb$[ebp]
	movzx	eax, BYTE PTR [edx+9]
	add	eax, DWORD PTR [ecx+72]
	mov	DWORD PTR __i$83210[ebp], eax
	cmp	DWORD PTR __i$83210[ebp], 255		; 000000ffH
	jle	SHORT $L83221
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+65], 255			; 000000ffH
	jmp	SHORT $L83223
$L83221:
	cmp	DWORD PTR __i$83210[ebp], 0
	jge	SHORT $L83224
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+65], 0
	jmp	SHORT $L83223
$L83224:
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	cl, BYTE PTR __i$83210[ebp]
	mov	BYTE PTR [eax+65], cl
$L83223:
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	mov	edx, DWORD PTR _mrgb$[ebp]
	movzx	eax, BYTE PTR [edx+8]
	add	eax, DWORD PTR [ecx+76]
	mov	DWORD PTR __i$83210[ebp], eax
	cmp	DWORD PTR __i$83210[ebp], 255		; 000000ffH
	jle	SHORT $L83230
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+64], 255			; 000000ffH
	jmp	SHORT $L83232
$L83230:
	cmp	DWORD PTR __i$83210[ebp], 0
	jge	SHORT $L83233
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+64], 0
	jmp	SHORT $L83232
$L83233:
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	cl, BYTE PTR __i$83210[ebp]
	mov	BYTE PTR [eax+64], cl
$L83232:
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	ecx, DWORD PTR _mrgb$[ebp]
	mov	dl, BYTE PTR [ecx+11]
	mov	BYTE PTR [eax+67], dl

; 1842 : 		}
; 1843 : 		else

	jmp	SHORT $L83239
$L83151:

; 1844 : 		{
; 1845 : 			COPY_MODEL_TRI_COLOR(vertrgb);

	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	ecx, DWORD PTR _mrgb$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+16], edx
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	ecx, DWORD PTR _mrgb$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+40], edx
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	ecx, DWORD PTR _mrgb$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+64], edx
$L83239:

; 1846 : 		}
; 1847 : 
; 1848 : // env?
; 1849 : 
; 1850 : 		if (env)

	cmp	DWORD PTR _env$[ebp], 0
	je	$L83243

; 1851 : 		{
; 1852 : 			REJECT_MODEL_ENV_POLY();

	mov	eax, DWORD PTR _mp$[ebp]
	movsx	ecx, WORD PTR [eax]
	and	ecx, 1024				; 00000400H
	je	SHORT $L83244
	jmp	$L83130
$L83244:

; 1853 : 			INC_POLY_COUNT(ModelDrawnCount, 1);

	movsx	eax, WORD PTR ?ModelDrawnCount@@3FA	; ModelDrawnCount
	add	eax, 1
	mov	WORD PTR ?ModelDrawnCount@@3FA, ax	; ModelDrawnCount

; 1854 : 
; 1855 : // get env vert ptr
; 1856 : 
; 1857 : 			count = (short)(envbucket->CurrentVerts - envbucket->Verts);

	mov	eax, DWORD PTR _envbucket$[ebp]
	add	eax, 8008				; 00001f48H
	mov	ecx, DWORD PTR _envbucket$[ebp]
	mov	edx, DWORD PTR [ecx+8004]
	sub	edx, eax
	sar	edx, 5
	mov	WORD PTR _count$[ebp], dx

; 1858 : 
; 1859 : 			if (count > ENV_VERT_END)

	movsx	eax, WORD PTR _count$[ebp]
	cmp	eax, 1996				; 000007ccH
	jle	SHORT $L83246

; 1860 : 				continue;

	jmp	$L83130
$L83246:

; 1861 : 
; 1862 : 			envbucket->CurrentIndex[0] = count;

	mov	eax, DWORD PTR _envbucket$[ebp]
	mov	ecx, DWORD PTR [eax+8000]
	mov	dx, WORD PTR _count$[ebp]
	mov	WORD PTR [ecx], dx

; 1863 : 			envbucket->CurrentIndex[1] = count + 1;

	movsx	eax, WORD PTR _count$[ebp]
	add	eax, 1
	mov	ecx, DWORD PTR _envbucket$[ebp]
	mov	edx, DWORD PTR [ecx+8000]
	mov	WORD PTR [edx+2], ax

; 1864 : 			envbucket->CurrentIndex[2] = count + 2;

	movsx	eax, WORD PTR _count$[ebp]
	add	eax, 2
	mov	ecx, DWORD PTR _envbucket$[ebp]
	mov	edx, DWORD PTR [ecx+8000]
	mov	WORD PTR [edx+4], ax

; 1865 : 			envbucket->CurrentIndex += 3;

	mov	eax, DWORD PTR _envbucket$[ebp]
	mov	ecx, DWORD PTR [eax+8000]
	add	ecx, 6
	mov	edx, DWORD PTR _envbucket$[ebp]
	mov	DWORD PTR [edx+8000], ecx

; 1866 : 
; 1867 : 			vert = envbucket->CurrentVerts;

	mov	eax, DWORD PTR _envbucket$[ebp]
	mov	ecx, DWORD PTR [eax+8004]
	mov	DWORD PTR _vert$[ebp], ecx

; 1868 : 			envbucket->CurrentVerts += 3;

	mov	eax, DWORD PTR _envbucket$[ebp]
	mov	ecx, DWORD PTR [eax+8004]
	add	ecx, 96					; 00000060H
	mov	edx, DWORD PTR _envbucket$[ebp]
	mov	DWORD PTR [edx+8004], ecx

; 1869 : 
; 1870 : // copy env vert info
; 1871 : 
; 1872 : 			*(MEM32*)&vert[0] = *(MEM32*)&mp->v0->sx;

	mov	eax, DWORD PTR _mp$[ebp]
	mov	esi, DWORD PTR [eax+36]
	add	esi, 36					; 00000024H
	mov	ecx, 8
	mov	edi, DWORD PTR _vert$[ebp]
	rep movsd

; 1873 : 			*(MEM32*)&vert[1] = *(MEM32*)&mp->v1->sx;

	mov	eax, DWORD PTR _mp$[ebp]
	mov	esi, DWORD PTR [eax+40]
	add	esi, 36					; 00000024H
	mov	edi, DWORD PTR _vert$[ebp]
	add	edi, 32					; 00000020H
	mov	ecx, 8
	rep movsd

; 1874 : 			*(MEM32*)&vert[2] = *(MEM32*)&mp->v2->sx;

	mov	eax, DWORD PTR _mp$[ebp]
	mov	esi, DWORD PTR [eax+44]
	add	esi, 36					; 00000024H
	mov	edi, DWORD PTR _vert$[ebp]
	add	edi, 64					; 00000040H
	mov	ecx, 8
	rep movsd
$L83243:

; 1875 : 		}
; 1876 : 	}

	jmp	$L83130
$L82664:

; 1877 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?DrawModelPolys@@YAXPAUMODEL@@JJ@Z ENDP			; DrawModelPolys
; Function compile flags: /Odt /ZI
_TEXT	ENDS
;	COMDAT ?DrawModelPolysMirror@@YAXPAUMODEL@@J@Z
_TEXT	SEGMENT
__i$83775 = -92						; size = 4
__i$83746 = -88						; size = 4
__i$83717 = -84						; size = 4
__i$83658 = -80						; size = 4
__i$83629 = -76						; size = 4
__i$83600 = -72						; size = 4
__i$83571 = -68						; size = 4
__i$83511 = -64						; size = 4
__i$83482 = -60						; size = 4
__i$83453 = -56						; size = 4
__i$83388 = -52						; size = 4
__i$83359 = -48						; size = 4
__i$83330 = -44						; size = 4
__i$83301 = -40						; size = 4
_count$ = -36						; size = 2
_bucketrgb$ = -32					; size = 4
_vertrgb$ = -28						; size = 4
_bucket$ = -24						; size = 4
_vert$ = -20						; size = 4
_mp$ = -16						; size = 4
_mrgb$ = -12						; size = 4
_clip$ = -8						; size = 4
_i$ = -4						; size = 4
_m$ = 8							; size = 4
_lit$ = 12						; size = 4
?DrawModelPolysMirror@@YAXPAUMODEL@@J@Z PROC NEAR	; DrawModelPolysMirror, COMDAT

; 1884 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 156				; 0000009cH
	push	ebx
	push	esi
	push	edi

; 1885 : 	long i, clip;
; 1886 : 	POLY_RGB *mrgb;
; 1887 : 	MODEL_POLY *mp;
; 1888 : 	VERTEX_TEX1 *vert;
; 1889 : 	BUCKET_TEX1 *bucket;
; 1890 : 	VERTEX_TEX0 *vertrgb;
; 1891 : 	BUCKET_TEX0 *bucketrgb;
; 1892 : 	short count;
; 1893 : 
; 1894 : // add to poly count
; 1895 : 
; 1896 : 	#if SCREEN_DEBUG
; 1897 : 	ModelPolyCount += (m->QuadNumTex + m->QuadNumRGB) * 2;

	mov	eax, DWORD PTR _m$[ebp]
	movsx	ecx, WORD PTR [eax+36]
	mov	edx, DWORD PTR _m$[ebp]
	movsx	eax, WORD PTR [edx+40]
	add	ecx, eax
	movsx	edx, WORD PTR ?ModelPolyCount@@3FA	; ModelPolyCount
	lea	eax, DWORD PTR [edx+ecx*2]
	mov	WORD PTR ?ModelPolyCount@@3FA, ax	; ModelPolyCount

; 1898 : 	ModelPolyCount += (m->TriNumTex + m->TriNumRGB);

	mov	eax, DWORD PTR _m$[ebp]
	movsx	ecx, WORD PTR [eax+38]
	mov	edx, DWORD PTR _m$[ebp]
	movsx	eax, WORD PTR [edx+42]
	add	ecx, eax
	movsx	edx, WORD PTR ?ModelPolyCount@@3FA	; ModelPolyCount
	add	edx, ecx
	mov	WORD PTR ?ModelPolyCount@@3FA, dx	; ModelPolyCount

; 1899 : 	#endif
; 1900 : 
; 1901 : // draw textured quads
; 1902 : 
; 1903 : 	mrgb = m->PolyRGB;

	mov	eax, DWORD PTR _m$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	mov	DWORD PTR _mrgb$[ebp], ecx

; 1904 : 	mp = m->PolyPtr;

	mov	eax, DWORD PTR _m$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	mov	DWORD PTR _mp$[ebp], ecx

; 1905 : 
; 1906 : 	for (i = m->QuadNumTex ; i ; i--, mrgb++, mp++)

	mov	eax, DWORD PTR _m$[ebp]
	movsx	ecx, WORD PTR [eax+36]
	mov	DWORD PTR _i$[ebp], ecx
	jmp	SHORT $L83266
$L83267:
	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	mov	ecx, DWORD PTR _mrgb$[ebp]
	add	ecx, 16					; 00000010H
	mov	DWORD PTR _mrgb$[ebp], ecx
	mov	edx, DWORD PTR _mp$[ebp]
	add	edx, 52					; 00000034H
	mov	DWORD PTR _mp$[ebp], edx
$L83266:
	cmp	DWORD PTR _i$[ebp], 0
	je	$L83268

; 1907 : 	{
; 1908 : 
; 1909 : // reject?
; 1910 : 
; 1911 : 		REJECT_MODEL_POLY_MIRROR();

	mov	eax, DWORD PTR _mp$[ebp]
	movsx	ecx, WORD PTR [eax]
	and	ecx, 2
	jne	SHORT $L83269
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	fld	DWORD PTR [ecx+36]
	mov	edx, DWORD PTR _mp$[ebp]
	mov	eax, DWORD PTR [edx+40]
	fsub	DWORD PTR [eax+36]
	mov	ecx, DWORD PTR _mp$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	fld	DWORD PTR [edx+40]
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	fsub	DWORD PTR [ecx+40]
	fmulp	ST(1), ST(0)
	mov	edx, DWORD PTR _mp$[ebp]
	mov	eax, DWORD PTR [edx+36]
	fld	DWORD PTR [eax+40]
	mov	ecx, DWORD PTR _mp$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	fsub	DWORD PTR [edx+40]
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	fld	DWORD PTR [ecx+36]
	mov	edx, DWORD PTR _mp$[ebp]
	mov	eax, DWORD PTR [edx+40]
	fsub	DWORD PTR [eax+36]
	fmulp	ST(1), ST(0)
	fsubp	ST(1), ST(0)
	fcomp	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L83269
	jmp	$L83267
$L83269:

; 1912 : 		CLIP_QUAD_MIRROR();

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	movzx	edx, BYTE PTR [ecx+84]
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	movzx	eax, BYTE PTR [ecx+84]
	and	edx, eax
	mov	ecx, DWORD PTR _mp$[ebp]
	mov	eax, DWORD PTR [ecx+44]
	movzx	ecx, BYTE PTR [eax+84]
	and	edx, ecx
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	movzx	eax, BYTE PTR [ecx+84]
	and	edx, eax
	je	SHORT $L83271
	jmp	$L83267
$L83271:
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	movzx	edx, BYTE PTR [ecx+84]
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	movzx	eax, BYTE PTR [ecx+84]
	or	edx, eax
	mov	ecx, DWORD PTR _mp$[ebp]
	mov	eax, DWORD PTR [ecx+44]
	movzx	ecx, BYTE PTR [eax+84]
	or	edx, ecx
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	movzx	eax, BYTE PTR [ecx+84]
	or	edx, eax
	and	edx, 63					; 0000003fH
	mov	DWORD PTR _clip$[ebp], edx

; 1913 : 		INC_POLY_COUNT(ModelDrawnCount, 2);

	movsx	eax, WORD PTR ?ModelDrawnCount@@3FA	; ModelDrawnCount
	add	eax, 2
	mov	WORD PTR ?ModelDrawnCount@@3FA, ax	; ModelDrawnCount

; 1914 : 
; 1915 : // get vert ptr
; 1916 : 
; 1917 : 		if (mp->Type & POLY_SEMITRANS)

	mov	eax, DWORD PTR _mp$[ebp]
	movsx	ecx, WORD PTR [eax]
	and	ecx, 4
	je	$L83272

; 1918 : 		{
; 1919 : 			if (!SEMI_POLY_FREE()) continue;

	cmp	DWORD PTR ?SemiCount@@3JA, 800		; SemiCount, 00000320H
	jl	SHORT $L83273
	jmp	$L83267
$L83273:

; 1920 : 			SEMI_POLY_SETUP(vert, ModelFog, 4, mp->Tpage, clip, (mp->Type & POLY_SEMITRANS_ONE) != 0);

	movsx	eax, WORD PTR _ModelFog
	mov	ecx, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	ecx, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[ecx+12], eax
	mov	eax, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	eax, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[eax+4], 4
	mov	eax, DWORD PTR _mp$[ebp]
	movsx	ecx, WORD PTR [eax+2]
	mov	edx, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	edx, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[edx+8], ecx
	cmp	DWORD PTR _clip$[ebp], 0
	je	SHORT $L83274
	mov	eax, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	eax, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[eax], 8
	jmp	SHORT $L83275
$L83274:
	mov	eax, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	eax, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[eax], 12 ; 0000000cH
$L83275:
	mov	eax, DWORD PTR _mp$[ebp]
	movsx	ecx, WORD PTR [eax]
	and	ecx, 256				; 00000100H
	neg	ecx
	sbb	ecx, ecx
	neg	ecx
	mov	edx, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	edx, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[edx+16], ecx
	mov	eax, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	eax, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[eax+20], 0
	mov	eax, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	eax, 152				; 00000098H
	add	eax, OFFSET FLAT:?SemiPoly@@3PAUDRAW_SEMI_POLY@@A+24
	mov	DWORD PTR _vert$[ebp], eax
	mov	ecx, DWORD PTR ?SemiCount@@3JA		; SemiCount
	add	ecx, 1
	mov	DWORD PTR ?SemiCount@@3JA, ecx		; SemiCount

; 1921 : 		}
; 1922 : 		else

	jmp	$L83276
$L83272:

; 1923 : 		{
; 1924 : 			if (clip) bucket = &ModelBucketHeadClip[mp->Tpage];

	cmp	DWORD PTR _clip$[ebp], 0
	je	SHORT $L83277
	mov	eax, DWORD PTR _mp$[ebp]
	movsx	ecx, WORD PTR [eax+2]
	imul	ecx, 7208				; 00001c28H
	add	ecx, DWORD PTR _ModelBucketHeadClip
	mov	DWORD PTR _bucket$[ebp], ecx

; 1925 : 			else bucket = &ModelBucketHead[mp->Tpage];

	jmp	SHORT $L83278
$L83277:
	mov	eax, DWORD PTR _mp$[ebp]
	movsx	ecx, WORD PTR [eax+2]
	imul	ecx, 7208				; 00001c28H
	add	ecx, DWORD PTR _ModelBucketHead
	mov	DWORD PTR _bucket$[ebp], ecx
$L83278:

; 1926 : 			count = (short)(bucket->CurrentVerts - bucket->Verts);

	mov	eax, DWORD PTR _bucket$[ebp]
	add	eax, 808				; 00000328H
	mov	ecx, DWORD PTR _bucket$[ebp]
	mov	edx, DWORD PTR [ecx+804]
	sub	edx, eax
	sar	edx, 5
	mov	WORD PTR _count$[ebp], dx

; 1927 : 
; 1928 : 			if (count > BUCKET_VERT_END)

	movsx	eax, WORD PTR _count$[ebp]
	cmp	eax, 196				; 000000c4H
	jle	$L83280

; 1929 : 			{
; 1930 : 				SET_TPAGE(mp->Tpage);

	movsx	eax, WORD PTR ?RenderTP@@3FA		; RenderTP
	mov	ecx, DWORD PTR _mp$[ebp]
	movsx	edx, WORD PTR [ecx+2]
	cmp	eax, edx
	je	SHORT $L83281
	mov	eax, DWORD PTR _mp$[ebp]
	mov	cx, WORD PTR [eax+2]
	mov	WORD PTR ?RenderTP@@3FA, cx		; RenderTP
	movsx	edx, WORD PTR ?RenderTP@@3FA		; RenderTP
	cmp	edx, -1
	jne	SHORT $L83282
	push	0
	push	0
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	edx
	call	DWORD PTR [ecx+152]
	mov	eax, DWORD PTR ?TextureStateChange@@3JA	; TextureStateChange
	add	eax, 1
	mov	DWORD PTR ?TextureStateChange@@3JA, eax	; TextureStateChange
	jmp	SHORT $L83281
$L83282:
	movsx	eax, WORD PTR ?RenderTP@@3FA		; RenderTP
	shl	eax, 6
	mov	ecx, DWORD PTR ?TexInfo@@3PAUTEXINFO@@A	; TexInfo
	mov	edx, DWORD PTR [ecx+eax+52]
	push	edx
	push	0
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	edx
	call	DWORD PTR [ecx+152]
	mov	eax, DWORD PTR ?TextureStateChange@@3JA	; TextureStateChange
	add	eax, 1
	mov	DWORD PTR ?TextureStateChange@@3JA, eax	; TextureStateChange
$L83281:

; 1931 : 				FlushOneBucketTEX1(bucket, clip);

	mov	eax, DWORD PTR _clip$[ebp]
	push	eax
	mov	ecx, DWORD PTR _bucket$[ebp]
	push	ecx
	call	?FlushOneBucketTEX1@@YAXPAUBUCKET_TEX1@@J@Z ; FlushOneBucketTEX1
	add	esp, 8

; 1932 : 				count = 0;

	mov	WORD PTR _count$[ebp], 0
$L83280:

; 1933 : 			}
; 1934 : 
; 1935 : 			bucket->CurrentIndex[0] = count;

	mov	eax, DWORD PTR _bucket$[ebp]
	mov	ecx, DWORD PTR [eax+800]
	mov	dx, WORD PTR _count$[ebp]
	mov	WORD PTR [ecx], dx

; 1936 : 			bucket->CurrentIndex[1] = count + 1;

	movsx	eax, WORD PTR _count$[ebp]
	add	eax, 1
	mov	ecx, DWORD PTR _bucket$[ebp]
	mov	edx, DWORD PTR [ecx+800]
	mov	WORD PTR [edx+2], ax

; 1937 : 			bucket->CurrentIndex[2] = count + 2;

	movsx	eax, WORD PTR _count$[ebp]
	add	eax, 2
	mov	ecx, DWORD PTR _bucket$[ebp]
	mov	edx, DWORD PTR [ecx+800]
	mov	WORD PTR [edx+4], ax

; 1938 : 			bucket->CurrentIndex[3] = count;

	mov	eax, DWORD PTR _bucket$[ebp]
	mov	ecx, DWORD PTR [eax+800]
	mov	dx, WORD PTR _count$[ebp]
	mov	WORD PTR [ecx+6], dx

; 1939 : 			bucket->CurrentIndex[4] = count + 2;

	movsx	eax, WORD PTR _count$[ebp]
	add	eax, 2
	mov	ecx, DWORD PTR _bucket$[ebp]
	mov	edx, DWORD PTR [ecx+800]
	mov	WORD PTR [edx+8], ax

; 1940 : 			bucket->CurrentIndex[5] = count + 3;

	movsx	eax, WORD PTR _count$[ebp]
	add	eax, 3
	mov	ecx, DWORD PTR _bucket$[ebp]
	mov	edx, DWORD PTR [ecx+800]
	mov	WORD PTR [edx+10], ax

; 1941 : 			bucket->CurrentIndex += 6;

	mov	eax, DWORD PTR _bucket$[ebp]
	mov	ecx, DWORD PTR [eax+800]
	add	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR _bucket$[ebp]
	mov	DWORD PTR [edx+800], ecx

; 1942 : 
; 1943 : 			vert = bucket->CurrentVerts;

	mov	eax, DWORD PTR _bucket$[ebp]
	mov	ecx, DWORD PTR [eax+804]
	mov	DWORD PTR _vert$[ebp], ecx

; 1944 : 			bucket->CurrentVerts += 4;

	mov	eax, DWORD PTR _bucket$[ebp]
	mov	ecx, DWORD PTR [eax+804]
	add	ecx, 128				; 00000080H
	mov	edx, DWORD PTR _bucket$[ebp]
	mov	DWORD PTR [edx+804], ecx
$L83276:

; 1945 : 		}
; 1946 : 
; 1947 : // copy vert info
; 1948 : 
; 1949 : 		COPY_QUAD_XYZRHW(vert);

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	add	ecx, 36					; 00000024H
	mov	edx, DWORD PTR _vert$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], ecx
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	add	ecx, 36					; 00000024H
	mov	edx, DWORD PTR _vert$[ebp]
	add	edx, 32					; 00000020H
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], ecx
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	add	ecx, 36					; 00000024H
	mov	edx, DWORD PTR _vert$[ebp]
	add	edx, 64					; 00000040H
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], ecx
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	add	ecx, 36					; 00000024H
	mov	edx, DWORD PTR _vert$[ebp]
	add	edx, 96					; 00000060H
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], ecx

; 1950 : 		COPY_QUAD_UV(vert);

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [eax+8]
	mov	eax, DWORD PTR _vert$[ebp]
	mov	DWORD PTR [eax+24], ecx
	mov	DWORD PTR [eax+28], edx
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [eax+16]
	mov	eax, DWORD PTR _vert$[ebp]
	mov	DWORD PTR [eax+56], ecx
	mov	DWORD PTR [eax+60], edx
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [eax+24]
	mov	eax, DWORD PTR _vert$[ebp]
	mov	DWORD PTR [eax+88], ecx
	mov	DWORD PTR [eax+92], edx
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR [eax+32]
	mov	eax, DWORD PTR _vert$[ebp]
	mov	DWORD PTR [eax+120], ecx
	mov	DWORD PTR [eax+124], edx

; 1951 : 		COPY_QUAD_SPECULAR(vert);

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _vert$[ebp]
	mov	eax, DWORD PTR [ecx+56]
	mov	DWORD PTR [edx+20], eax
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	edx, DWORD PTR _vert$[ebp]
	mov	eax, DWORD PTR [ecx+56]
	mov	DWORD PTR [edx+52], eax
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	mov	edx, DWORD PTR _vert$[ebp]
	mov	eax, DWORD PTR [ecx+56]
	mov	DWORD PTR [edx+84], eax
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	mov	edx, DWORD PTR _vert$[ebp]
	mov	eax, DWORD PTR [ecx+56]
	mov	DWORD PTR [edx+116], eax

; 1952 : 
; 1953 : 		if (lit)

	cmp	DWORD PTR _lit$[ebp], 0
	je	$L83300

; 1954 : 		{
; 1955 : 			COPY_MODEL_QUAD_COLOR_LIT(vert);

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _mrgb$[ebp]
	movzx	eax, BYTE PTR [edx+2]
	add	eax, DWORD PTR [ecx+68]
	mov	DWORD PTR __i$83301[ebp], eax
	cmp	DWORD PTR __i$83301[ebp], 255		; 000000ffH
	jle	SHORT $L83303
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+18], 255			; 000000ffH
	jmp	SHORT $L83305
$L83303:
	cmp	DWORD PTR __i$83301[ebp], 0
	jge	SHORT $L83306
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+18], 0
	jmp	SHORT $L83305
$L83306:
	mov	eax, DWORD PTR _vert$[ebp]
	mov	cl, BYTE PTR __i$83301[ebp]
	mov	BYTE PTR [eax+18], cl
$L83305:
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _mrgb$[ebp]
	movzx	eax, BYTE PTR [edx+1]
	add	eax, DWORD PTR [ecx+72]
	mov	DWORD PTR __i$83301[ebp], eax
	cmp	DWORD PTR __i$83301[ebp], 255		; 000000ffH
	jle	SHORT $L83312
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+17], 255			; 000000ffH
	jmp	SHORT $L83314
$L83312:
	cmp	DWORD PTR __i$83301[ebp], 0
	jge	SHORT $L83315
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+17], 0
	jmp	SHORT $L83314
$L83315:
	mov	eax, DWORD PTR _vert$[ebp]
	mov	cl, BYTE PTR __i$83301[ebp]
	mov	BYTE PTR [eax+17], cl
$L83314:
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _mrgb$[ebp]
	movzx	eax, BYTE PTR [edx]
	add	eax, DWORD PTR [ecx+76]
	mov	DWORD PTR __i$83301[ebp], eax
	cmp	DWORD PTR __i$83301[ebp], 255		; 000000ffH
	jle	SHORT $L83321
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+16], 255			; 000000ffH
	jmp	SHORT $L83323
$L83321:
	cmp	DWORD PTR __i$83301[ebp], 0
	jge	SHORT $L83324
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+16], 0
	jmp	SHORT $L83323
$L83324:
	mov	eax, DWORD PTR _vert$[ebp]
	mov	cl, BYTE PTR __i$83301[ebp]
	mov	BYTE PTR [eax+16], cl
$L83323:
	mov	eax, DWORD PTR _vert$[ebp]
	mov	ecx, DWORD PTR _mrgb$[ebp]
	mov	dl, BYTE PTR [ecx+3]
	mov	BYTE PTR [eax+19], dl
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	edx, DWORD PTR _mrgb$[ebp]
	movzx	eax, BYTE PTR [edx+6]
	add	eax, DWORD PTR [ecx+68]
	mov	DWORD PTR __i$83330[ebp], eax
	cmp	DWORD PTR __i$83330[ebp], 255		; 000000ffH
	jle	SHORT $L83332
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+50], 255			; 000000ffH
	jmp	SHORT $L83334
$L83332:
	cmp	DWORD PTR __i$83330[ebp], 0
	jge	SHORT $L83335
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+50], 0
	jmp	SHORT $L83334
$L83335:
	mov	eax, DWORD PTR _vert$[ebp]
	mov	cl, BYTE PTR __i$83330[ebp]
	mov	BYTE PTR [eax+50], cl
$L83334:
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	edx, DWORD PTR _mrgb$[ebp]
	movzx	eax, BYTE PTR [edx+5]
	add	eax, DWORD PTR [ecx+72]
	mov	DWORD PTR __i$83330[ebp], eax
	cmp	DWORD PTR __i$83330[ebp], 255		; 000000ffH
	jle	SHORT $L83341
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+49], 255			; 000000ffH
	jmp	SHORT $L83343
$L83341:
	cmp	DWORD PTR __i$83330[ebp], 0
	jge	SHORT $L83344
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+49], 0
	jmp	SHORT $L83343
$L83344:
	mov	eax, DWORD PTR _vert$[ebp]
	mov	cl, BYTE PTR __i$83330[ebp]
	mov	BYTE PTR [eax+49], cl
$L83343:
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	edx, DWORD PTR _mrgb$[ebp]
	movzx	eax, BYTE PTR [edx+4]
	add	eax, DWORD PTR [ecx+76]
	mov	DWORD PTR __i$83330[ebp], eax
	cmp	DWORD PTR __i$83330[ebp], 255		; 000000ffH
	jle	SHORT $L83350
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+48], 255			; 000000ffH
	jmp	SHORT $L83352
$L83350:
	cmp	DWORD PTR __i$83330[ebp], 0
	jge	SHORT $L83353
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+48], 0
	jmp	SHORT $L83352
$L83353:
	mov	eax, DWORD PTR _vert$[ebp]
	mov	cl, BYTE PTR __i$83330[ebp]
	mov	BYTE PTR [eax+48], cl
$L83352:
	mov	eax, DWORD PTR _vert$[ebp]
	mov	ecx, DWORD PTR _mrgb$[ebp]
	mov	dl, BYTE PTR [ecx+7]
	mov	BYTE PTR [eax+51], dl
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	mov	edx, DWORD PTR _mrgb$[ebp]
	movzx	eax, BYTE PTR [edx+10]
	add	eax, DWORD PTR [ecx+68]
	mov	DWORD PTR __i$83359[ebp], eax
	cmp	DWORD PTR __i$83359[ebp], 255		; 000000ffH
	jle	SHORT $L83361
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+82], 255			; 000000ffH
	jmp	SHORT $L83363
$L83361:
	cmp	DWORD PTR __i$83359[ebp], 0
	jge	SHORT $L83364
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+82], 0
	jmp	SHORT $L83363
$L83364:
	mov	eax, DWORD PTR _vert$[ebp]
	mov	cl, BYTE PTR __i$83359[ebp]
	mov	BYTE PTR [eax+82], cl
$L83363:
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	mov	edx, DWORD PTR _mrgb$[ebp]
	movzx	eax, BYTE PTR [edx+9]
	add	eax, DWORD PTR [ecx+72]
	mov	DWORD PTR __i$83359[ebp], eax
	cmp	DWORD PTR __i$83359[ebp], 255		; 000000ffH
	jle	SHORT $L83370
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+81], 255			; 000000ffH
	jmp	SHORT $L83372
$L83370:
	cmp	DWORD PTR __i$83359[ebp], 0
	jge	SHORT $L83373
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+81], 0
	jmp	SHORT $L83372
$L83373:
	mov	eax, DWORD PTR _vert$[ebp]
	mov	cl, BYTE PTR __i$83359[ebp]
	mov	BYTE PTR [eax+81], cl
$L83372:
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	mov	edx, DWORD PTR _mrgb$[ebp]
	movzx	eax, BYTE PTR [edx+8]
	add	eax, DWORD PTR [ecx+76]
	mov	DWORD PTR __i$83359[ebp], eax
	cmp	DWORD PTR __i$83359[ebp], 255		; 000000ffH
	jle	SHORT $L83379
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+80], 255			; 000000ffH
	jmp	SHORT $L83381
$L83379:
	cmp	DWORD PTR __i$83359[ebp], 0
	jge	SHORT $L83382
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+80], 0
	jmp	SHORT $L83381
$L83382:
	mov	eax, DWORD PTR _vert$[ebp]
	mov	cl, BYTE PTR __i$83359[ebp]
	mov	BYTE PTR [eax+80], cl
$L83381:
	mov	eax, DWORD PTR _vert$[ebp]
	mov	ecx, DWORD PTR _mrgb$[ebp]
	mov	dl, BYTE PTR [ecx+11]
	mov	BYTE PTR [eax+83], dl
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	mov	edx, DWORD PTR _mrgb$[ebp]
	movzx	eax, BYTE PTR [edx+14]
	add	eax, DWORD PTR [ecx+68]
	mov	DWORD PTR __i$83388[ebp], eax
	cmp	DWORD PTR __i$83388[ebp], 255		; 000000ffH
	jle	SHORT $L83390
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+114], 255			; 000000ffH
	jmp	SHORT $L83392
$L83390:
	cmp	DWORD PTR __i$83388[ebp], 0
	jge	SHORT $L83393
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+114], 0
	jmp	SHORT $L83392
$L83393:
	mov	eax, DWORD PTR _vert$[ebp]
	mov	cl, BYTE PTR __i$83388[ebp]
	mov	BYTE PTR [eax+114], cl
$L83392:
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	mov	edx, DWORD PTR _mrgb$[ebp]
	movzx	eax, BYTE PTR [edx+13]
	add	eax, DWORD PTR [ecx+72]
	mov	DWORD PTR __i$83388[ebp], eax
	cmp	DWORD PTR __i$83388[ebp], 255		; 000000ffH
	jle	SHORT $L83399
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+113], 255			; 000000ffH
	jmp	SHORT $L83401
$L83399:
	cmp	DWORD PTR __i$83388[ebp], 0
	jge	SHORT $L83402
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+113], 0
	jmp	SHORT $L83401
$L83402:
	mov	eax, DWORD PTR _vert$[ebp]
	mov	cl, BYTE PTR __i$83388[ebp]
	mov	BYTE PTR [eax+113], cl
$L83401:
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	mov	edx, DWORD PTR _mrgb$[ebp]
	movzx	eax, BYTE PTR [edx+12]
	add	eax, DWORD PTR [ecx+76]
	mov	DWORD PTR __i$83388[ebp], eax
	cmp	DWORD PTR __i$83388[ebp], 255		; 000000ffH
	jle	SHORT $L83408
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+112], 255			; 000000ffH
	jmp	SHORT $L83410
$L83408:
	cmp	DWORD PTR __i$83388[ebp], 0
	jge	SHORT $L83411
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+112], 0
	jmp	SHORT $L83410
$L83411:
	mov	eax, DWORD PTR _vert$[ebp]
	mov	cl, BYTE PTR __i$83388[ebp]
	mov	BYTE PTR [eax+112], cl
$L83410:
	mov	eax, DWORD PTR _vert$[ebp]
	mov	ecx, DWORD PTR _mrgb$[ebp]
	mov	dl, BYTE PTR [ecx+15]
	mov	BYTE PTR [eax+115], dl

; 1956 : 		}
; 1957 : 		else

	jmp	SHORT $L83417
$L83300:

; 1958 : 		{
; 1959 : 			COPY_MODEL_QUAD_COLOR(vert);

	mov	eax, DWORD PTR _vert$[ebp]
	mov	ecx, DWORD PTR _mrgb$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+16], edx
	mov	eax, DWORD PTR _vert$[ebp]
	mov	ecx, DWORD PTR _mrgb$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+48], edx
	mov	eax, DWORD PTR _vert$[ebp]
	mov	ecx, DWORD PTR _mrgb$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+80], edx
	mov	eax, DWORD PTR _vert$[ebp]
	mov	ecx, DWORD PTR _mrgb$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+112], edx
$L83417:

; 1960 : 		}
; 1961 : 	}

	jmp	$L83267
$L83268:

; 1962 : 
; 1963 : // draw textured tri's
; 1964 : 
; 1965 : 	for (i = m->TriNumTex ; i ; i--, mrgb++, mp++)

	mov	eax, DWORD PTR _m$[ebp]
	movsx	ecx, WORD PTR [eax+38]
	mov	DWORD PTR _i$[ebp], ecx
	jmp	SHORT $L83422
$L83423:
	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	mov	ecx, DWORD PTR _mrgb$[ebp]
	add	ecx, 16					; 00000010H
	mov	DWORD PTR _mrgb$[ebp], ecx
	mov	edx, DWORD PTR _mp$[ebp]
	add	edx, 52					; 00000034H
	mov	DWORD PTR _mp$[ebp], edx
$L83422:
	cmp	DWORD PTR _i$[ebp], 0
	je	$L83424

; 1966 : 	{
; 1967 : 
; 1968 : // reject?
; 1969 : 
; 1970 : 		REJECT_MODEL_POLY_MIRROR();

	mov	eax, DWORD PTR _mp$[ebp]
	movsx	ecx, WORD PTR [eax]
	and	ecx, 2
	jne	SHORT $L83425
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	fld	DWORD PTR [ecx+36]
	mov	edx, DWORD PTR _mp$[ebp]
	mov	eax, DWORD PTR [edx+40]
	fsub	DWORD PTR [eax+36]
	mov	ecx, DWORD PTR _mp$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	fld	DWORD PTR [edx+40]
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	fsub	DWORD PTR [ecx+40]
	fmulp	ST(1), ST(0)
	mov	edx, DWORD PTR _mp$[ebp]
	mov	eax, DWORD PTR [edx+36]
	fld	DWORD PTR [eax+40]
	mov	ecx, DWORD PTR _mp$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	fsub	DWORD PTR [edx+40]
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	fld	DWORD PTR [ecx+36]
	mov	edx, DWORD PTR _mp$[ebp]
	mov	eax, DWORD PTR [edx+40]
	fsub	DWORD PTR [eax+36]
	fmulp	ST(1), ST(0)
	fsubp	ST(1), ST(0)
	fcomp	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L83425
	jmp	$L83423
$L83425:

; 1971 : 		CLIP_TRI_MIRROR();

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	movzx	edx, BYTE PTR [ecx+84]
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	movzx	eax, BYTE PTR [ecx+84]
	and	edx, eax
	mov	ecx, DWORD PTR _mp$[ebp]
	mov	eax, DWORD PTR [ecx+44]
	movzx	ecx, BYTE PTR [eax+84]
	and	edx, ecx
	je	SHORT $L83427
	jmp	$L83423
$L83427:
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	movzx	edx, BYTE PTR [ecx+84]
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	movzx	eax, BYTE PTR [ecx+84]
	or	edx, eax
	mov	ecx, DWORD PTR _mp$[ebp]
	mov	eax, DWORD PTR [ecx+44]
	movzx	ecx, BYTE PTR [eax+84]
	or	edx, ecx
	and	edx, 63					; 0000003fH
	mov	DWORD PTR _clip$[ebp], edx

; 1972 : 		INC_POLY_COUNT(ModelDrawnCount, 1);

	movsx	eax, WORD PTR ?ModelDrawnCount@@3FA	; ModelDrawnCount
	add	eax, 1
	mov	WORD PTR ?ModelDrawnCount@@3FA, ax	; ModelDrawnCount

; 1973 : 
; 1974 : // get vert ptr
; 1975 : 
; 1976 : 		if (mp->Type & POLY_SEMITRANS)

	mov	eax, DWORD PTR _mp$[ebp]
	movsx	ecx, WORD PTR [eax]
	and	ecx, 4
	je	$L83428

; 1977 : 		{
; 1978 : 			if (!SEMI_POLY_FREE()) continue;

	cmp	DWORD PTR ?SemiCount@@3JA, 800		; SemiCount, 00000320H
	jl	SHORT $L83429
	jmp	$L83423
$L83429:

; 1979 : 			SEMI_POLY_SETUP(vert, ModelFog, 3, mp->Tpage, clip, (mp->Type & POLY_SEMITRANS_ONE) != 0);

	movsx	eax, WORD PTR _ModelFog
	mov	ecx, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	ecx, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[ecx+12], eax
	mov	eax, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	eax, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[eax+4], 3
	mov	eax, DWORD PTR _mp$[ebp]
	movsx	ecx, WORD PTR [eax+2]
	mov	edx, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	edx, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[edx+8], ecx
	cmp	DWORD PTR _clip$[ebp], 0
	je	SHORT $L83430
	mov	eax, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	eax, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[eax], 8
	jmp	SHORT $L83431
$L83430:
	mov	eax, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	eax, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[eax], 12 ; 0000000cH
$L83431:
	mov	eax, DWORD PTR _mp$[ebp]
	movsx	ecx, WORD PTR [eax]
	and	ecx, 256				; 00000100H
	neg	ecx
	sbb	ecx, ecx
	neg	ecx
	mov	edx, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	edx, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[edx+16], ecx
	mov	eax, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	eax, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[eax+20], 0
	mov	eax, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	eax, 152				; 00000098H
	add	eax, OFFSET FLAT:?SemiPoly@@3PAUDRAW_SEMI_POLY@@A+24
	mov	DWORD PTR _vert$[ebp], eax
	mov	ecx, DWORD PTR ?SemiCount@@3JA		; SemiCount
	add	ecx, 1
	mov	DWORD PTR ?SemiCount@@3JA, ecx		; SemiCount

; 1980 : 		}
; 1981 : 		else

	jmp	$L83432
$L83428:

; 1982 : 		{
; 1983 : 			if (clip) bucket = &ModelBucketHeadClip[mp->Tpage];

	cmp	DWORD PTR _clip$[ebp], 0
	je	SHORT $L83433
	mov	eax, DWORD PTR _mp$[ebp]
	movsx	ecx, WORD PTR [eax+2]
	imul	ecx, 7208				; 00001c28H
	add	ecx, DWORD PTR _ModelBucketHeadClip
	mov	DWORD PTR _bucket$[ebp], ecx

; 1984 : 			else bucket = &ModelBucketHead[mp->Tpage];

	jmp	SHORT $L83434
$L83433:
	mov	eax, DWORD PTR _mp$[ebp]
	movsx	ecx, WORD PTR [eax+2]
	imul	ecx, 7208				; 00001c28H
	add	ecx, DWORD PTR _ModelBucketHead
	mov	DWORD PTR _bucket$[ebp], ecx
$L83434:

; 1985 : 			count = (short)(bucket->CurrentVerts - bucket->Verts);

	mov	eax, DWORD PTR _bucket$[ebp]
	add	eax, 808				; 00000328H
	mov	ecx, DWORD PTR _bucket$[ebp]
	mov	edx, DWORD PTR [ecx+804]
	sub	edx, eax
	sar	edx, 5
	mov	WORD PTR _count$[ebp], dx

; 1986 : 
; 1987 : 			if (count > BUCKET_VERT_END)

	movsx	eax, WORD PTR _count$[ebp]
	cmp	eax, 196				; 000000c4H
	jle	$L83436

; 1988 : 			{
; 1989 : 				SET_TPAGE(mp->Tpage);

	movsx	eax, WORD PTR ?RenderTP@@3FA		; RenderTP
	mov	ecx, DWORD PTR _mp$[ebp]
	movsx	edx, WORD PTR [ecx+2]
	cmp	eax, edx
	je	SHORT $L83437
	mov	eax, DWORD PTR _mp$[ebp]
	mov	cx, WORD PTR [eax+2]
	mov	WORD PTR ?RenderTP@@3FA, cx		; RenderTP
	movsx	edx, WORD PTR ?RenderTP@@3FA		; RenderTP
	cmp	edx, -1
	jne	SHORT $L83438
	push	0
	push	0
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	edx
	call	DWORD PTR [ecx+152]
	mov	eax, DWORD PTR ?TextureStateChange@@3JA	; TextureStateChange
	add	eax, 1
	mov	DWORD PTR ?TextureStateChange@@3JA, eax	; TextureStateChange
	jmp	SHORT $L83437
$L83438:
	movsx	eax, WORD PTR ?RenderTP@@3FA		; RenderTP
	shl	eax, 6
	mov	ecx, DWORD PTR ?TexInfo@@3PAUTEXINFO@@A	; TexInfo
	mov	edx, DWORD PTR [ecx+eax+52]
	push	edx
	push	0
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	edx
	call	DWORD PTR [ecx+152]
	mov	eax, DWORD PTR ?TextureStateChange@@3JA	; TextureStateChange
	add	eax, 1
	mov	DWORD PTR ?TextureStateChange@@3JA, eax	; TextureStateChange
$L83437:

; 1990 : 				FlushOneBucketTEX1(bucket, clip);

	mov	eax, DWORD PTR _clip$[ebp]
	push	eax
	mov	ecx, DWORD PTR _bucket$[ebp]
	push	ecx
	call	?FlushOneBucketTEX1@@YAXPAUBUCKET_TEX1@@J@Z ; FlushOneBucketTEX1
	add	esp, 8

; 1991 : 				count = 0;

	mov	WORD PTR _count$[ebp], 0
$L83436:

; 1992 : 			}
; 1993 : 
; 1994 : 			bucket->CurrentIndex[0] = count;

	mov	eax, DWORD PTR _bucket$[ebp]
	mov	ecx, DWORD PTR [eax+800]
	mov	dx, WORD PTR _count$[ebp]
	mov	WORD PTR [ecx], dx

; 1995 : 			bucket->CurrentIndex[1] = count + 1;

	movsx	eax, WORD PTR _count$[ebp]
	add	eax, 1
	mov	ecx, DWORD PTR _bucket$[ebp]
	mov	edx, DWORD PTR [ecx+800]
	mov	WORD PTR [edx+2], ax

; 1996 : 			bucket->CurrentIndex[2] = count + 2;

	movsx	eax, WORD PTR _count$[ebp]
	add	eax, 2
	mov	ecx, DWORD PTR _bucket$[ebp]
	mov	edx, DWORD PTR [ecx+800]
	mov	WORD PTR [edx+4], ax

; 1997 : 			bucket->CurrentIndex += 3;

	mov	eax, DWORD PTR _bucket$[ebp]
	mov	ecx, DWORD PTR [eax+800]
	add	ecx, 6
	mov	edx, DWORD PTR _bucket$[ebp]
	mov	DWORD PTR [edx+800], ecx

; 1998 : 
; 1999 : 			vert = bucket->CurrentVerts;

	mov	eax, DWORD PTR _bucket$[ebp]
	mov	ecx, DWORD PTR [eax+804]
	mov	DWORD PTR _vert$[ebp], ecx

; 2000 : 			bucket->CurrentVerts += 3;

	mov	eax, DWORD PTR _bucket$[ebp]
	mov	ecx, DWORD PTR [eax+804]
	add	ecx, 96					; 00000060H
	mov	edx, DWORD PTR _bucket$[ebp]
	mov	DWORD PTR [edx+804], ecx
$L83432:

; 2001 : 		}
; 2002 : 
; 2003 : // copy vert info
; 2004 : 
; 2005 : 		COPY_TRI_XYZRHW(vert);

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	add	ecx, 36					; 00000024H
	mov	edx, DWORD PTR _vert$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], ecx
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	add	ecx, 36					; 00000024H
	mov	edx, DWORD PTR _vert$[ebp]
	add	edx, 32					; 00000020H
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], ecx
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	add	ecx, 36					; 00000024H
	mov	edx, DWORD PTR _vert$[ebp]
	add	edx, 64					; 00000040H
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], ecx

; 2006 : 		COPY_TRI_UV(vert);

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [eax+8]
	mov	eax, DWORD PTR _vert$[ebp]
	mov	DWORD PTR [eax+24], ecx
	mov	DWORD PTR [eax+28], edx
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [eax+16]
	mov	eax, DWORD PTR _vert$[ebp]
	mov	DWORD PTR [eax+56], ecx
	mov	DWORD PTR [eax+60], edx
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [eax+24]
	mov	eax, DWORD PTR _vert$[ebp]
	mov	DWORD PTR [eax+88], ecx
	mov	DWORD PTR [eax+92], edx

; 2007 : 		COPY_TRI_SPECULAR(vert);

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _vert$[ebp]
	mov	eax, DWORD PTR [ecx+56]
	mov	DWORD PTR [edx+20], eax
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	edx, DWORD PTR _vert$[ebp]
	mov	eax, DWORD PTR [ecx+56]
	mov	DWORD PTR [edx+52], eax
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	mov	edx, DWORD PTR _vert$[ebp]
	mov	eax, DWORD PTR [ecx+56]
	mov	DWORD PTR [edx+84], eax

; 2008 : 
; 2009 : 		if (lit)

	cmp	DWORD PTR _lit$[ebp], 0
	je	$L83452

; 2010 : 		{
; 2011 : 			COPY_MODEL_TRI_COLOR_LIT(vert);

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _mrgb$[ebp]
	movzx	eax, BYTE PTR [edx+2]
	add	eax, DWORD PTR [ecx+68]
	mov	DWORD PTR __i$83453[ebp], eax
	cmp	DWORD PTR __i$83453[ebp], 255		; 000000ffH
	jle	SHORT $L83455
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+18], 255			; 000000ffH
	jmp	SHORT $L83457
$L83455:
	cmp	DWORD PTR __i$83453[ebp], 0
	jge	SHORT $L83458
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+18], 0
	jmp	SHORT $L83457
$L83458:
	mov	eax, DWORD PTR _vert$[ebp]
	mov	cl, BYTE PTR __i$83453[ebp]
	mov	BYTE PTR [eax+18], cl
$L83457:
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _mrgb$[ebp]
	movzx	eax, BYTE PTR [edx+1]
	add	eax, DWORD PTR [ecx+72]
	mov	DWORD PTR __i$83453[ebp], eax
	cmp	DWORD PTR __i$83453[ebp], 255		; 000000ffH
	jle	SHORT $L83464
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+17], 255			; 000000ffH
	jmp	SHORT $L83466
$L83464:
	cmp	DWORD PTR __i$83453[ebp], 0
	jge	SHORT $L83467
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+17], 0
	jmp	SHORT $L83466
$L83467:
	mov	eax, DWORD PTR _vert$[ebp]
	mov	cl, BYTE PTR __i$83453[ebp]
	mov	BYTE PTR [eax+17], cl
$L83466:
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _mrgb$[ebp]
	movzx	eax, BYTE PTR [edx]
	add	eax, DWORD PTR [ecx+76]
	mov	DWORD PTR __i$83453[ebp], eax
	cmp	DWORD PTR __i$83453[ebp], 255		; 000000ffH
	jle	SHORT $L83473
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+16], 255			; 000000ffH
	jmp	SHORT $L83475
$L83473:
	cmp	DWORD PTR __i$83453[ebp], 0
	jge	SHORT $L83476
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+16], 0
	jmp	SHORT $L83475
$L83476:
	mov	eax, DWORD PTR _vert$[ebp]
	mov	cl, BYTE PTR __i$83453[ebp]
	mov	BYTE PTR [eax+16], cl
$L83475:
	mov	eax, DWORD PTR _vert$[ebp]
	mov	ecx, DWORD PTR _mrgb$[ebp]
	mov	dl, BYTE PTR [ecx+3]
	mov	BYTE PTR [eax+19], dl
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	edx, DWORD PTR _mrgb$[ebp]
	movzx	eax, BYTE PTR [edx+6]
	add	eax, DWORD PTR [ecx+68]
	mov	DWORD PTR __i$83482[ebp], eax
	cmp	DWORD PTR __i$83482[ebp], 255		; 000000ffH
	jle	SHORT $L83484
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+50], 255			; 000000ffH
	jmp	SHORT $L83486
$L83484:
	cmp	DWORD PTR __i$83482[ebp], 0
	jge	SHORT $L83487
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+50], 0
	jmp	SHORT $L83486
$L83487:
	mov	eax, DWORD PTR _vert$[ebp]
	mov	cl, BYTE PTR __i$83482[ebp]
	mov	BYTE PTR [eax+50], cl
$L83486:
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	edx, DWORD PTR _mrgb$[ebp]
	movzx	eax, BYTE PTR [edx+5]
	add	eax, DWORD PTR [ecx+72]
	mov	DWORD PTR __i$83482[ebp], eax
	cmp	DWORD PTR __i$83482[ebp], 255		; 000000ffH
	jle	SHORT $L83493
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+49], 255			; 000000ffH
	jmp	SHORT $L83495
$L83493:
	cmp	DWORD PTR __i$83482[ebp], 0
	jge	SHORT $L83496
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+49], 0
	jmp	SHORT $L83495
$L83496:
	mov	eax, DWORD PTR _vert$[ebp]
	mov	cl, BYTE PTR __i$83482[ebp]
	mov	BYTE PTR [eax+49], cl
$L83495:
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	edx, DWORD PTR _mrgb$[ebp]
	movzx	eax, BYTE PTR [edx+4]
	add	eax, DWORD PTR [ecx+76]
	mov	DWORD PTR __i$83482[ebp], eax
	cmp	DWORD PTR __i$83482[ebp], 255		; 000000ffH
	jle	SHORT $L83502
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+48], 255			; 000000ffH
	jmp	SHORT $L83504
$L83502:
	cmp	DWORD PTR __i$83482[ebp], 0
	jge	SHORT $L83505
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+48], 0
	jmp	SHORT $L83504
$L83505:
	mov	eax, DWORD PTR _vert$[ebp]
	mov	cl, BYTE PTR __i$83482[ebp]
	mov	BYTE PTR [eax+48], cl
$L83504:
	mov	eax, DWORD PTR _vert$[ebp]
	mov	ecx, DWORD PTR _mrgb$[ebp]
	mov	dl, BYTE PTR [ecx+7]
	mov	BYTE PTR [eax+51], dl
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	mov	edx, DWORD PTR _mrgb$[ebp]
	movzx	eax, BYTE PTR [edx+10]
	add	eax, DWORD PTR [ecx+68]
	mov	DWORD PTR __i$83511[ebp], eax
	cmp	DWORD PTR __i$83511[ebp], 255		; 000000ffH
	jle	SHORT $L83513
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+82], 255			; 000000ffH
	jmp	SHORT $L83515
$L83513:
	cmp	DWORD PTR __i$83511[ebp], 0
	jge	SHORT $L83516
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+82], 0
	jmp	SHORT $L83515
$L83516:
	mov	eax, DWORD PTR _vert$[ebp]
	mov	cl, BYTE PTR __i$83511[ebp]
	mov	BYTE PTR [eax+82], cl
$L83515:
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	mov	edx, DWORD PTR _mrgb$[ebp]
	movzx	eax, BYTE PTR [edx+9]
	add	eax, DWORD PTR [ecx+72]
	mov	DWORD PTR __i$83511[ebp], eax
	cmp	DWORD PTR __i$83511[ebp], 255		; 000000ffH
	jle	SHORT $L83522
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+81], 255			; 000000ffH
	jmp	SHORT $L83524
$L83522:
	cmp	DWORD PTR __i$83511[ebp], 0
	jge	SHORT $L83525
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+81], 0
	jmp	SHORT $L83524
$L83525:
	mov	eax, DWORD PTR _vert$[ebp]
	mov	cl, BYTE PTR __i$83511[ebp]
	mov	BYTE PTR [eax+81], cl
$L83524:
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	mov	edx, DWORD PTR _mrgb$[ebp]
	movzx	eax, BYTE PTR [edx+8]
	add	eax, DWORD PTR [ecx+76]
	mov	DWORD PTR __i$83511[ebp], eax
	cmp	DWORD PTR __i$83511[ebp], 255		; 000000ffH
	jle	SHORT $L83531
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+80], 255			; 000000ffH
	jmp	SHORT $L83533
$L83531:
	cmp	DWORD PTR __i$83511[ebp], 0
	jge	SHORT $L83534
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+80], 0
	jmp	SHORT $L83533
$L83534:
	mov	eax, DWORD PTR _vert$[ebp]
	mov	cl, BYTE PTR __i$83511[ebp]
	mov	BYTE PTR [eax+80], cl
$L83533:
	mov	eax, DWORD PTR _vert$[ebp]
	mov	ecx, DWORD PTR _mrgb$[ebp]
	mov	dl, BYTE PTR [ecx+11]
	mov	BYTE PTR [eax+83], dl

; 2012 : 		}
; 2013 : 		else

	jmp	SHORT $L83540
$L83452:

; 2014 : 		{
; 2015 : 			COPY_MODEL_TRI_COLOR(vert);

	mov	eax, DWORD PTR _vert$[ebp]
	mov	ecx, DWORD PTR _mrgb$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+16], edx
	mov	eax, DWORD PTR _vert$[ebp]
	mov	ecx, DWORD PTR _mrgb$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+48], edx
	mov	eax, DWORD PTR _vert$[ebp]
	mov	ecx, DWORD PTR _mrgb$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+80], edx
$L83540:

; 2016 : 		}
; 2017 : 	}

	jmp	$L83423
$L83424:

; 2018 : 
; 2019 : // draw rgb quads
; 2020 : 
; 2021 : 	for (i = m->QuadNumRGB ; i ; i--, mrgb++, mp++)

	mov	eax, DWORD PTR _m$[ebp]
	movsx	ecx, WORD PTR [eax+40]
	mov	DWORD PTR _i$[ebp], ecx
	jmp	SHORT $L83544
$L83545:
	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	mov	ecx, DWORD PTR _mrgb$[ebp]
	add	ecx, 16					; 00000010H
	mov	DWORD PTR _mrgb$[ebp], ecx
	mov	edx, DWORD PTR _mp$[ebp]
	add	edx, 52					; 00000034H
	mov	DWORD PTR _mp$[ebp], edx
$L83544:
	cmp	DWORD PTR _i$[ebp], 0
	je	$L83546

; 2022 : 	{
; 2023 : 
; 2024 : // reject?
; 2025 : 
; 2026 : 		REJECT_MODEL_POLY_MIRROR();

	mov	eax, DWORD PTR _mp$[ebp]
	movsx	ecx, WORD PTR [eax]
	and	ecx, 2
	jne	SHORT $L83547
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	fld	DWORD PTR [ecx+36]
	mov	edx, DWORD PTR _mp$[ebp]
	mov	eax, DWORD PTR [edx+40]
	fsub	DWORD PTR [eax+36]
	mov	ecx, DWORD PTR _mp$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	fld	DWORD PTR [edx+40]
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	fsub	DWORD PTR [ecx+40]
	fmulp	ST(1), ST(0)
	mov	edx, DWORD PTR _mp$[ebp]
	mov	eax, DWORD PTR [edx+36]
	fld	DWORD PTR [eax+40]
	mov	ecx, DWORD PTR _mp$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	fsub	DWORD PTR [edx+40]
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	fld	DWORD PTR [ecx+36]
	mov	edx, DWORD PTR _mp$[ebp]
	mov	eax, DWORD PTR [edx+40]
	fsub	DWORD PTR [eax+36]
	fmulp	ST(1), ST(0)
	fsubp	ST(1), ST(0)
	fcomp	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L83547
	jmp	$L83545
$L83547:

; 2027 : 		CLIP_QUAD_MIRROR();

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	movzx	edx, BYTE PTR [ecx+84]
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	movzx	eax, BYTE PTR [ecx+84]
	and	edx, eax
	mov	ecx, DWORD PTR _mp$[ebp]
	mov	eax, DWORD PTR [ecx+44]
	movzx	ecx, BYTE PTR [eax+84]
	and	edx, ecx
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	movzx	eax, BYTE PTR [ecx+84]
	and	edx, eax
	je	SHORT $L83549
	jmp	$L83545
$L83549:
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	movzx	edx, BYTE PTR [ecx+84]
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	movzx	eax, BYTE PTR [ecx+84]
	or	edx, eax
	mov	ecx, DWORD PTR _mp$[ebp]
	mov	eax, DWORD PTR [ecx+44]
	movzx	ecx, BYTE PTR [eax+84]
	or	edx, ecx
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	movzx	eax, BYTE PTR [ecx+84]
	or	edx, eax
	and	edx, 63					; 0000003fH
	mov	DWORD PTR _clip$[ebp], edx

; 2028 : 		INC_POLY_COUNT(ModelDrawnCount, 2);

	movsx	eax, WORD PTR ?ModelDrawnCount@@3FA	; ModelDrawnCount
	add	eax, 2
	mov	WORD PTR ?ModelDrawnCount@@3FA, ax	; ModelDrawnCount

; 2029 : 
; 2030 : // get vert ptr
; 2031 : 
; 2032 : 		if (mp->Type & POLY_SEMITRANS)

	mov	eax, DWORD PTR _mp$[ebp]
	movsx	ecx, WORD PTR [eax]
	and	ecx, 4
	je	$L83550

; 2033 : 		{
; 2034 : 			if (!SEMI_POLY_FREE()) continue;

	cmp	DWORD PTR ?SemiCount@@3JA, 800		; SemiCount, 00000320H
	jl	SHORT $L83551
	jmp	$L83545
$L83551:

; 2035 : 			SEMI_POLY_SETUP_RGB(vertrgb, ModelFog, 4, clip, (mp->Type & POLY_SEMITRANS_ONE) != 0);

	movsx	eax, WORD PTR _ModelFog
	mov	ecx, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	ecx, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[ecx+12], eax
	mov	eax, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	eax, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[eax+4], 4
	mov	eax, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	eax, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[eax+8], -1
	cmp	DWORD PTR _clip$[ebp], 0
	je	SHORT $L83552
	mov	eax, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	eax, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[eax], 8
	jmp	SHORT $L83553
$L83552:
	mov	eax, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	eax, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[eax], 12 ; 0000000cH
$L83553:
	mov	eax, DWORD PTR _mp$[ebp]
	movsx	ecx, WORD PTR [eax]
	and	ecx, 256				; 00000100H
	neg	ecx
	sbb	ecx, ecx
	neg	ecx
	mov	edx, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	edx, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[edx+16], ecx
	mov	eax, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	eax, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[eax+20], 0
	mov	eax, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	eax, 152				; 00000098H
	add	eax, OFFSET FLAT:?SemiPoly@@3PAUDRAW_SEMI_POLY@@A+24
	mov	DWORD PTR _vertrgb$[ebp], eax
	mov	ecx, DWORD PTR ?SemiCount@@3JA		; SemiCount
	add	ecx, 1
	mov	DWORD PTR ?SemiCount@@3JA, ecx		; SemiCount

; 2036 : 		}
; 2037 : 		else

	jmp	$L83554
$L83550:

; 2038 : 		{
; 2039 : 			if (clip) bucketrgb = ModelBucketHeadClipRGB;

	cmp	DWORD PTR _clip$[ebp], 0
	je	SHORT $L83555
	mov	eax, DWORD PTR _ModelBucketHeadClipRGB
	mov	DWORD PTR _bucketrgb$[ebp], eax

; 2040 : 			else bucketrgb = ModelBucketHeadRGB;

	jmp	SHORT $L83556
$L83555:
	mov	eax, DWORD PTR _ModelBucketHeadRGB
	mov	DWORD PTR _bucketrgb$[ebp], eax
$L83556:

; 2041 : 			count = (short)(bucketrgb->CurrentVerts - bucketrgb->Verts);

	mov	eax, DWORD PTR _bucketrgb$[ebp]
	add	eax, 808				; 00000328H
	mov	ecx, DWORD PTR _bucketrgb$[ebp]
	mov	edx, DWORD PTR [ecx+804]
	sub	edx, eax
	mov	eax, edx
	cdq
	mov	ecx, 24					; 00000018H
	idiv	ecx
	mov	WORD PTR _count$[ebp], ax

; 2042 : 
; 2043 : 			if (count > BUCKET_VERT_END)

	movsx	eax, WORD PTR _count$[ebp]
	cmp	eax, 196				; 000000c4H
	jle	$L83558

; 2044 : 			{
; 2045 : 				SET_TPAGE(-1);

	movsx	eax, WORD PTR ?RenderTP@@3FA		; RenderTP
	cmp	eax, -1
	je	SHORT $L83559
	mov	WORD PTR ?RenderTP@@3FA, -1		; RenderTP
	movsx	eax, WORD PTR ?RenderTP@@3FA		; RenderTP
	cmp	eax, -1
	jne	SHORT $L83560
	push	0
	push	0
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	edx
	call	DWORD PTR [ecx+152]
	mov	eax, DWORD PTR ?TextureStateChange@@3JA	; TextureStateChange
	add	eax, 1
	mov	DWORD PTR ?TextureStateChange@@3JA, eax	; TextureStateChange
	jmp	SHORT $L83559
$L83560:
	movsx	eax, WORD PTR ?RenderTP@@3FA		; RenderTP
	shl	eax, 6
	mov	ecx, DWORD PTR ?TexInfo@@3PAUTEXINFO@@A	; TexInfo
	mov	edx, DWORD PTR [ecx+eax+52]
	push	edx
	push	0
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	edx
	call	DWORD PTR [ecx+152]
	mov	eax, DWORD PTR ?TextureStateChange@@3JA	; TextureStateChange
	add	eax, 1
	mov	DWORD PTR ?TextureStateChange@@3JA, eax	; TextureStateChange
$L83559:

; 2046 : 				FlushOneBucketTEX0(bucketrgb, clip);

	mov	eax, DWORD PTR _clip$[ebp]
	push	eax
	mov	ecx, DWORD PTR _bucketrgb$[ebp]
	push	ecx
	call	?FlushOneBucketTEX0@@YAXPAUBUCKET_TEX0@@J@Z ; FlushOneBucketTEX0
	add	esp, 8

; 2047 : 				count = 0;

	mov	WORD PTR _count$[ebp], 0
$L83558:

; 2048 : 			}
; 2049 : 
; 2050 : 			bucketrgb->CurrentIndex[0] = count;

	mov	eax, DWORD PTR _bucketrgb$[ebp]
	mov	ecx, DWORD PTR [eax+800]
	mov	dx, WORD PTR _count$[ebp]
	mov	WORD PTR [ecx], dx

; 2051 : 			bucketrgb->CurrentIndex[1] = count + 1;

	movsx	eax, WORD PTR _count$[ebp]
	add	eax, 1
	mov	ecx, DWORD PTR _bucketrgb$[ebp]
	mov	edx, DWORD PTR [ecx+800]
	mov	WORD PTR [edx+2], ax

; 2052 : 			bucketrgb->CurrentIndex[2] = count + 2;

	movsx	eax, WORD PTR _count$[ebp]
	add	eax, 2
	mov	ecx, DWORD PTR _bucketrgb$[ebp]
	mov	edx, DWORD PTR [ecx+800]
	mov	WORD PTR [edx+4], ax

; 2053 : 			bucketrgb->CurrentIndex[3] = count;

	mov	eax, DWORD PTR _bucketrgb$[ebp]
	mov	ecx, DWORD PTR [eax+800]
	mov	dx, WORD PTR _count$[ebp]
	mov	WORD PTR [ecx+6], dx

; 2054 : 			bucketrgb->CurrentIndex[4] = count + 2;

	movsx	eax, WORD PTR _count$[ebp]
	add	eax, 2
	mov	ecx, DWORD PTR _bucketrgb$[ebp]
	mov	edx, DWORD PTR [ecx+800]
	mov	WORD PTR [edx+8], ax

; 2055 : 			bucketrgb->CurrentIndex[5] = count + 3;

	movsx	eax, WORD PTR _count$[ebp]
	add	eax, 3
	mov	ecx, DWORD PTR _bucketrgb$[ebp]
	mov	edx, DWORD PTR [ecx+800]
	mov	WORD PTR [edx+10], ax

; 2056 : 			bucketrgb->CurrentIndex += 6;

	mov	eax, DWORD PTR _bucketrgb$[ebp]
	mov	ecx, DWORD PTR [eax+800]
	add	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR _bucketrgb$[ebp]
	mov	DWORD PTR [edx+800], ecx

; 2057 : 
; 2058 : 			vertrgb = bucketrgb->CurrentVerts;

	mov	eax, DWORD PTR _bucketrgb$[ebp]
	mov	ecx, DWORD PTR [eax+804]
	mov	DWORD PTR _vertrgb$[ebp], ecx

; 2059 : 			bucketrgb->CurrentVerts += 4;

	mov	eax, DWORD PTR _bucketrgb$[ebp]
	mov	ecx, DWORD PTR [eax+804]
	add	ecx, 96					; 00000060H
	mov	edx, DWORD PTR _bucketrgb$[ebp]
	mov	DWORD PTR [edx+804], ecx
$L83554:

; 2060 : 		}
; 2061 : 
; 2062 : // copy vert info
; 2063 : 
; 2064 : 		COPY_QUAD_XYZRHW(vertrgb);

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	add	ecx, 36					; 00000024H
	mov	edx, DWORD PTR _vertrgb$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], ecx
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	add	ecx, 36					; 00000024H
	mov	edx, DWORD PTR _vertrgb$[ebp]
	add	edx, 24					; 00000018H
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], ecx
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	add	ecx, 36					; 00000024H
	mov	edx, DWORD PTR _vertrgb$[ebp]
	add	edx, 48					; 00000030H
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], ecx
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	add	ecx, 36					; 00000024H
	mov	edx, DWORD PTR _vertrgb$[ebp]
	add	edx, 72					; 00000048H
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], ecx

; 2065 : 		COPY_QUAD_SPECULAR(vertrgb);

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _vertrgb$[ebp]
	mov	eax, DWORD PTR [ecx+56]
	mov	DWORD PTR [edx+20], eax
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	edx, DWORD PTR _vertrgb$[ebp]
	mov	eax, DWORD PTR [ecx+56]
	mov	DWORD PTR [edx+44], eax
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	mov	edx, DWORD PTR _vertrgb$[ebp]
	mov	eax, DWORD PTR [ecx+56]
	mov	DWORD PTR [edx+68], eax
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	mov	edx, DWORD PTR _vertrgb$[ebp]
	mov	eax, DWORD PTR [ecx+56]
	mov	DWORD PTR [edx+92], eax

; 2066 : 
; 2067 : 		if (lit)

	cmp	DWORD PTR _lit$[ebp], 0
	je	$L83570

; 2068 : 		{
; 2069 : 			COPY_MODEL_QUAD_COLOR_LIT(vertrgb);

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _mrgb$[ebp]
	movzx	eax, BYTE PTR [edx+2]
	add	eax, DWORD PTR [ecx+68]
	mov	DWORD PTR __i$83571[ebp], eax
	cmp	DWORD PTR __i$83571[ebp], 255		; 000000ffH
	jle	SHORT $L83573
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+18], 255			; 000000ffH
	jmp	SHORT $L83575
$L83573:
	cmp	DWORD PTR __i$83571[ebp], 0
	jge	SHORT $L83576
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+18], 0
	jmp	SHORT $L83575
$L83576:
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	cl, BYTE PTR __i$83571[ebp]
	mov	BYTE PTR [eax+18], cl
$L83575:
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _mrgb$[ebp]
	movzx	eax, BYTE PTR [edx+1]
	add	eax, DWORD PTR [ecx+72]
	mov	DWORD PTR __i$83571[ebp], eax
	cmp	DWORD PTR __i$83571[ebp], 255		; 000000ffH
	jle	SHORT $L83582
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+17], 255			; 000000ffH
	jmp	SHORT $L83584
$L83582:
	cmp	DWORD PTR __i$83571[ebp], 0
	jge	SHORT $L83585
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+17], 0
	jmp	SHORT $L83584
$L83585:
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	cl, BYTE PTR __i$83571[ebp]
	mov	BYTE PTR [eax+17], cl
$L83584:
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _mrgb$[ebp]
	movzx	eax, BYTE PTR [edx]
	add	eax, DWORD PTR [ecx+76]
	mov	DWORD PTR __i$83571[ebp], eax
	cmp	DWORD PTR __i$83571[ebp], 255		; 000000ffH
	jle	SHORT $L83591
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+16], 255			; 000000ffH
	jmp	SHORT $L83593
$L83591:
	cmp	DWORD PTR __i$83571[ebp], 0
	jge	SHORT $L83594
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+16], 0
	jmp	SHORT $L83593
$L83594:
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	cl, BYTE PTR __i$83571[ebp]
	mov	BYTE PTR [eax+16], cl
$L83593:
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	ecx, DWORD PTR _mrgb$[ebp]
	mov	dl, BYTE PTR [ecx+3]
	mov	BYTE PTR [eax+19], dl
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	edx, DWORD PTR _mrgb$[ebp]
	movzx	eax, BYTE PTR [edx+6]
	add	eax, DWORD PTR [ecx+68]
	mov	DWORD PTR __i$83600[ebp], eax
	cmp	DWORD PTR __i$83600[ebp], 255		; 000000ffH
	jle	SHORT $L83602
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+42], 255			; 000000ffH
	jmp	SHORT $L83604
$L83602:
	cmp	DWORD PTR __i$83600[ebp], 0
	jge	SHORT $L83605
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+42], 0
	jmp	SHORT $L83604
$L83605:
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	cl, BYTE PTR __i$83600[ebp]
	mov	BYTE PTR [eax+42], cl
$L83604:
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	edx, DWORD PTR _mrgb$[ebp]
	movzx	eax, BYTE PTR [edx+5]
	add	eax, DWORD PTR [ecx+72]
	mov	DWORD PTR __i$83600[ebp], eax
	cmp	DWORD PTR __i$83600[ebp], 255		; 000000ffH
	jle	SHORT $L83611
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+41], 255			; 000000ffH
	jmp	SHORT $L83613
$L83611:
	cmp	DWORD PTR __i$83600[ebp], 0
	jge	SHORT $L83614
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+41], 0
	jmp	SHORT $L83613
$L83614:
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	cl, BYTE PTR __i$83600[ebp]
	mov	BYTE PTR [eax+41], cl
$L83613:
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	edx, DWORD PTR _mrgb$[ebp]
	movzx	eax, BYTE PTR [edx+4]
	add	eax, DWORD PTR [ecx+76]
	mov	DWORD PTR __i$83600[ebp], eax
	cmp	DWORD PTR __i$83600[ebp], 255		; 000000ffH
	jle	SHORT $L83620
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+40], 255			; 000000ffH
	jmp	SHORT $L83622
$L83620:
	cmp	DWORD PTR __i$83600[ebp], 0
	jge	SHORT $L83623
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+40], 0
	jmp	SHORT $L83622
$L83623:
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	cl, BYTE PTR __i$83600[ebp]
	mov	BYTE PTR [eax+40], cl
$L83622:
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	ecx, DWORD PTR _mrgb$[ebp]
	mov	dl, BYTE PTR [ecx+7]
	mov	BYTE PTR [eax+43], dl
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	mov	edx, DWORD PTR _mrgb$[ebp]
	movzx	eax, BYTE PTR [edx+10]
	add	eax, DWORD PTR [ecx+68]
	mov	DWORD PTR __i$83629[ebp], eax
	cmp	DWORD PTR __i$83629[ebp], 255		; 000000ffH
	jle	SHORT $L83631
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+66], 255			; 000000ffH
	jmp	SHORT $L83633
$L83631:
	cmp	DWORD PTR __i$83629[ebp], 0
	jge	SHORT $L83634
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+66], 0
	jmp	SHORT $L83633
$L83634:
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	cl, BYTE PTR __i$83629[ebp]
	mov	BYTE PTR [eax+66], cl
$L83633:
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	mov	edx, DWORD PTR _mrgb$[ebp]
	movzx	eax, BYTE PTR [edx+9]
	add	eax, DWORD PTR [ecx+72]
	mov	DWORD PTR __i$83629[ebp], eax
	cmp	DWORD PTR __i$83629[ebp], 255		; 000000ffH
	jle	SHORT $L83640
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+65], 255			; 000000ffH
	jmp	SHORT $L83642
$L83640:
	cmp	DWORD PTR __i$83629[ebp], 0
	jge	SHORT $L83643
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+65], 0
	jmp	SHORT $L83642
$L83643:
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	cl, BYTE PTR __i$83629[ebp]
	mov	BYTE PTR [eax+65], cl
$L83642:
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	mov	edx, DWORD PTR _mrgb$[ebp]
	movzx	eax, BYTE PTR [edx+8]
	add	eax, DWORD PTR [ecx+76]
	mov	DWORD PTR __i$83629[ebp], eax
	cmp	DWORD PTR __i$83629[ebp], 255		; 000000ffH
	jle	SHORT $L83649
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+64], 255			; 000000ffH
	jmp	SHORT $L83651
$L83649:
	cmp	DWORD PTR __i$83629[ebp], 0
	jge	SHORT $L83652
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+64], 0
	jmp	SHORT $L83651
$L83652:
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	cl, BYTE PTR __i$83629[ebp]
	mov	BYTE PTR [eax+64], cl
$L83651:
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	ecx, DWORD PTR _mrgb$[ebp]
	mov	dl, BYTE PTR [ecx+11]
	mov	BYTE PTR [eax+67], dl
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	mov	edx, DWORD PTR _mrgb$[ebp]
	movzx	eax, BYTE PTR [edx+14]
	add	eax, DWORD PTR [ecx+68]
	mov	DWORD PTR __i$83658[ebp], eax
	cmp	DWORD PTR __i$83658[ebp], 255		; 000000ffH
	jle	SHORT $L83660
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+90], 255			; 000000ffH
	jmp	SHORT $L83662
$L83660:
	cmp	DWORD PTR __i$83658[ebp], 0
	jge	SHORT $L83663
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+90], 0
	jmp	SHORT $L83662
$L83663:
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	cl, BYTE PTR __i$83658[ebp]
	mov	BYTE PTR [eax+90], cl
$L83662:
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	mov	edx, DWORD PTR _mrgb$[ebp]
	movzx	eax, BYTE PTR [edx+13]
	add	eax, DWORD PTR [ecx+72]
	mov	DWORD PTR __i$83658[ebp], eax
	cmp	DWORD PTR __i$83658[ebp], 255		; 000000ffH
	jle	SHORT $L83669
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+89], 255			; 000000ffH
	jmp	SHORT $L83671
$L83669:
	cmp	DWORD PTR __i$83658[ebp], 0
	jge	SHORT $L83672
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+89], 0
	jmp	SHORT $L83671
$L83672:
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	cl, BYTE PTR __i$83658[ebp]
	mov	BYTE PTR [eax+89], cl
$L83671:
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	mov	edx, DWORD PTR _mrgb$[ebp]
	movzx	eax, BYTE PTR [edx+12]
	add	eax, DWORD PTR [ecx+76]
	mov	DWORD PTR __i$83658[ebp], eax
	cmp	DWORD PTR __i$83658[ebp], 255		; 000000ffH
	jle	SHORT $L83678
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+88], 255			; 000000ffH
	jmp	SHORT $L83680
$L83678:
	cmp	DWORD PTR __i$83658[ebp], 0
	jge	SHORT $L83681
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+88], 0
	jmp	SHORT $L83680
$L83681:
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	cl, BYTE PTR __i$83658[ebp]
	mov	BYTE PTR [eax+88], cl
$L83680:
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	ecx, DWORD PTR _mrgb$[ebp]
	mov	dl, BYTE PTR [ecx+15]
	mov	BYTE PTR [eax+91], dl

; 2070 : 		}
; 2071 : 		else

	jmp	SHORT $L83687
$L83570:

; 2072 : 		{
; 2073 : 			COPY_MODEL_QUAD_COLOR(vertrgb);

	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	ecx, DWORD PTR _mrgb$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+16], edx
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	ecx, DWORD PTR _mrgb$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+40], edx
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	ecx, DWORD PTR _mrgb$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+64], edx
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	ecx, DWORD PTR _mrgb$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+88], edx
$L83687:

; 2074 : 		}
; 2075 : 	}

	jmp	$L83545
$L83546:

; 2076 : 
; 2077 : // draw rgb tri's
; 2078 : 
; 2079 : 	for (i = m->TriNumRGB ; i ; i--, mrgb++, mp++)

	mov	eax, DWORD PTR _m$[ebp]
	movsx	ecx, WORD PTR [eax+42]
	mov	DWORD PTR _i$[ebp], ecx
	jmp	SHORT $L83692
$L83693:
	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	mov	ecx, DWORD PTR _mrgb$[ebp]
	add	ecx, 16					; 00000010H
	mov	DWORD PTR _mrgb$[ebp], ecx
	mov	edx, DWORD PTR _mp$[ebp]
	add	edx, 52					; 00000034H
	mov	DWORD PTR _mp$[ebp], edx
$L83692:
	cmp	DWORD PTR _i$[ebp], 0
	je	$L83256

; 2080 : 	{
; 2081 : 
; 2082 : // reject?
; 2083 : 
; 2084 : 		REJECT_MODEL_POLY_MIRROR();

	mov	eax, DWORD PTR _mp$[ebp]
	movsx	ecx, WORD PTR [eax]
	and	ecx, 2
	jne	SHORT $L83695
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	fld	DWORD PTR [ecx+36]
	mov	edx, DWORD PTR _mp$[ebp]
	mov	eax, DWORD PTR [edx+40]
	fsub	DWORD PTR [eax+36]
	mov	ecx, DWORD PTR _mp$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	fld	DWORD PTR [edx+40]
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	fsub	DWORD PTR [ecx+40]
	fmulp	ST(1), ST(0)
	mov	edx, DWORD PTR _mp$[ebp]
	mov	eax, DWORD PTR [edx+36]
	fld	DWORD PTR [eax+40]
	mov	ecx, DWORD PTR _mp$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	fsub	DWORD PTR [edx+40]
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	fld	DWORD PTR [ecx+36]
	mov	edx, DWORD PTR _mp$[ebp]
	mov	eax, DWORD PTR [edx+40]
	fsub	DWORD PTR [eax+36]
	fmulp	ST(1), ST(0)
	fsubp	ST(1), ST(0)
	fcomp	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L83695
	jmp	$L83693
$L83695:

; 2085 : 		CLIP_TRI_MIRROR();

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	movzx	edx, BYTE PTR [ecx+84]
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	movzx	eax, BYTE PTR [ecx+84]
	and	edx, eax
	mov	ecx, DWORD PTR _mp$[ebp]
	mov	eax, DWORD PTR [ecx+44]
	movzx	ecx, BYTE PTR [eax+84]
	and	edx, ecx
	je	SHORT $L83697
	jmp	$L83693
$L83697:
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	movzx	edx, BYTE PTR [ecx+84]
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	movzx	eax, BYTE PTR [ecx+84]
	or	edx, eax
	mov	ecx, DWORD PTR _mp$[ebp]
	mov	eax, DWORD PTR [ecx+44]
	movzx	ecx, BYTE PTR [eax+84]
	or	edx, ecx
	and	edx, 63					; 0000003fH
	mov	DWORD PTR _clip$[ebp], edx

; 2086 : 		INC_POLY_COUNT(ModelDrawnCount, 1);

	movsx	eax, WORD PTR ?ModelDrawnCount@@3FA	; ModelDrawnCount
	add	eax, 1
	mov	WORD PTR ?ModelDrawnCount@@3FA, ax	; ModelDrawnCount

; 2087 : 
; 2088 : // get vert ptr
; 2089 : 
; 2090 : 		if (mp->Type & POLY_SEMITRANS)

	mov	eax, DWORD PTR _mp$[ebp]
	movsx	ecx, WORD PTR [eax]
	and	ecx, 4
	je	$L83698

; 2091 : 		{
; 2092 : 			if (!SEMI_POLY_FREE()) continue;

	cmp	DWORD PTR ?SemiCount@@3JA, 800		; SemiCount, 00000320H
	jl	SHORT $L83699
	jmp	$L83693
$L83699:

; 2093 : 			SEMI_POLY_SETUP_RGB(vertrgb, ModelFog, 3, clip, (mp->Type & POLY_SEMITRANS_ONE) != 0);

	movsx	eax, WORD PTR _ModelFog
	mov	ecx, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	ecx, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[ecx+12], eax
	mov	eax, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	eax, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[eax+4], 3
	mov	eax, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	eax, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[eax+8], -1
	cmp	DWORD PTR _clip$[ebp], 0
	je	SHORT $L83700
	mov	eax, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	eax, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[eax], 8
	jmp	SHORT $L83701
$L83700:
	mov	eax, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	eax, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[eax], 12 ; 0000000cH
$L83701:
	mov	eax, DWORD PTR _mp$[ebp]
	movsx	ecx, WORD PTR [eax]
	and	ecx, 256				; 00000100H
	neg	ecx
	sbb	ecx, ecx
	neg	ecx
	mov	edx, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	edx, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[edx+16], ecx
	mov	eax, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	eax, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[eax+20], 0
	mov	eax, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	eax, 152				; 00000098H
	add	eax, OFFSET FLAT:?SemiPoly@@3PAUDRAW_SEMI_POLY@@A+24
	mov	DWORD PTR _vertrgb$[ebp], eax
	mov	ecx, DWORD PTR ?SemiCount@@3JA		; SemiCount
	add	ecx, 1
	mov	DWORD PTR ?SemiCount@@3JA, ecx		; SemiCount

; 2094 : 		}
; 2095 : 		else

	jmp	$L83702
$L83698:

; 2096 : 		{
; 2097 : 			if (clip) bucketrgb = ModelBucketHeadClipRGB;

	cmp	DWORD PTR _clip$[ebp], 0
	je	SHORT $L83703
	mov	eax, DWORD PTR _ModelBucketHeadClipRGB
	mov	DWORD PTR _bucketrgb$[ebp], eax

; 2098 : 			else bucketrgb = ModelBucketHeadRGB;

	jmp	SHORT $L83704
$L83703:
	mov	eax, DWORD PTR _ModelBucketHeadRGB
	mov	DWORD PTR _bucketrgb$[ebp], eax
$L83704:

; 2099 : 			count = (short)(bucketrgb->CurrentVerts - bucketrgb->Verts);

	mov	eax, DWORD PTR _bucketrgb$[ebp]
	add	eax, 808				; 00000328H
	mov	ecx, DWORD PTR _bucketrgb$[ebp]
	mov	edx, DWORD PTR [ecx+804]
	sub	edx, eax
	mov	eax, edx
	cdq
	mov	ecx, 24					; 00000018H
	idiv	ecx
	mov	WORD PTR _count$[ebp], ax

; 2100 : 
; 2101 : 			if (count > BUCKET_VERT_END)

	movsx	eax, WORD PTR _count$[ebp]
	cmp	eax, 196				; 000000c4H
	jle	$L83706

; 2102 : 			{
; 2103 : 				SET_TPAGE(-1);

	movsx	eax, WORD PTR ?RenderTP@@3FA		; RenderTP
	cmp	eax, -1
	je	SHORT $L83707
	mov	WORD PTR ?RenderTP@@3FA, -1		; RenderTP
	movsx	eax, WORD PTR ?RenderTP@@3FA		; RenderTP
	cmp	eax, -1
	jne	SHORT $L83708
	push	0
	push	0
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	edx
	call	DWORD PTR [ecx+152]
	mov	eax, DWORD PTR ?TextureStateChange@@3JA	; TextureStateChange
	add	eax, 1
	mov	DWORD PTR ?TextureStateChange@@3JA, eax	; TextureStateChange
	jmp	SHORT $L83707
$L83708:
	movsx	eax, WORD PTR ?RenderTP@@3FA		; RenderTP
	shl	eax, 6
	mov	ecx, DWORD PTR ?TexInfo@@3PAUTEXINFO@@A	; TexInfo
	mov	edx, DWORD PTR [ecx+eax+52]
	push	edx
	push	0
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	edx
	call	DWORD PTR [ecx+152]
	mov	eax, DWORD PTR ?TextureStateChange@@3JA	; TextureStateChange
	add	eax, 1
	mov	DWORD PTR ?TextureStateChange@@3JA, eax	; TextureStateChange
$L83707:

; 2104 : 				FlushOneBucketTEX0(bucketrgb, clip);

	mov	eax, DWORD PTR _clip$[ebp]
	push	eax
	mov	ecx, DWORD PTR _bucketrgb$[ebp]
	push	ecx
	call	?FlushOneBucketTEX0@@YAXPAUBUCKET_TEX0@@J@Z ; FlushOneBucketTEX0
	add	esp, 8

; 2105 : 				count = 0;

	mov	WORD PTR _count$[ebp], 0
$L83706:

; 2106 : 			}
; 2107 : 
; 2108 : 			bucketrgb->CurrentIndex[0] = count;

	mov	eax, DWORD PTR _bucketrgb$[ebp]
	mov	ecx, DWORD PTR [eax+800]
	mov	dx, WORD PTR _count$[ebp]
	mov	WORD PTR [ecx], dx

; 2109 : 			bucketrgb->CurrentIndex[1] = count + 1;

	movsx	eax, WORD PTR _count$[ebp]
	add	eax, 1
	mov	ecx, DWORD PTR _bucketrgb$[ebp]
	mov	edx, DWORD PTR [ecx+800]
	mov	WORD PTR [edx+2], ax

; 2110 : 			bucketrgb->CurrentIndex[2] = count + 2;

	movsx	eax, WORD PTR _count$[ebp]
	add	eax, 2
	mov	ecx, DWORD PTR _bucketrgb$[ebp]
	mov	edx, DWORD PTR [ecx+800]
	mov	WORD PTR [edx+4], ax

; 2111 : 			bucketrgb->CurrentIndex += 3;

	mov	eax, DWORD PTR _bucketrgb$[ebp]
	mov	ecx, DWORD PTR [eax+800]
	add	ecx, 6
	mov	edx, DWORD PTR _bucketrgb$[ebp]
	mov	DWORD PTR [edx+800], ecx

; 2112 : 
; 2113 : 			vertrgb = bucketrgb->CurrentVerts;

	mov	eax, DWORD PTR _bucketrgb$[ebp]
	mov	ecx, DWORD PTR [eax+804]
	mov	DWORD PTR _vertrgb$[ebp], ecx

; 2114 : 			bucketrgb->CurrentVerts += 3;

	mov	eax, DWORD PTR _bucketrgb$[ebp]
	mov	ecx, DWORD PTR [eax+804]
	add	ecx, 72					; 00000048H
	mov	edx, DWORD PTR _bucketrgb$[ebp]
	mov	DWORD PTR [edx+804], ecx
$L83702:

; 2115 : 		}
; 2116 : 
; 2117 : // copy vert info
; 2118 : 
; 2119 : 		COPY_TRI_XYZRHW(vertrgb);

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	add	ecx, 36					; 00000024H
	mov	edx, DWORD PTR _vertrgb$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], ecx
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	add	ecx, 36					; 00000024H
	mov	edx, DWORD PTR _vertrgb$[ebp]
	add	edx, 24					; 00000018H
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], ecx
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	add	ecx, 36					; 00000024H
	mov	edx, DWORD PTR _vertrgb$[ebp]
	add	edx, 48					; 00000030H
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], ecx

; 2120 : 		COPY_TRI_SPECULAR(vertrgb);

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _vertrgb$[ebp]
	mov	eax, DWORD PTR [ecx+56]
	mov	DWORD PTR [edx+20], eax
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	edx, DWORD PTR _vertrgb$[ebp]
	mov	eax, DWORD PTR [ecx+56]
	mov	DWORD PTR [edx+44], eax
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	mov	edx, DWORD PTR _vertrgb$[ebp]
	mov	eax, DWORD PTR [ecx+56]
	mov	DWORD PTR [edx+68], eax

; 2121 : 
; 2122 : 		if (lit)

	cmp	DWORD PTR _lit$[ebp], 0
	je	$L83716

; 2123 : 		{
; 2124 : 			COPY_MODEL_TRI_COLOR_LIT(vertrgb);

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _mrgb$[ebp]
	movzx	eax, BYTE PTR [edx+2]
	add	eax, DWORD PTR [ecx+68]
	mov	DWORD PTR __i$83717[ebp], eax
	cmp	DWORD PTR __i$83717[ebp], 255		; 000000ffH
	jle	SHORT $L83719
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+18], 255			; 000000ffH
	jmp	SHORT $L83721
$L83719:
	cmp	DWORD PTR __i$83717[ebp], 0
	jge	SHORT $L83722
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+18], 0
	jmp	SHORT $L83721
$L83722:
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	cl, BYTE PTR __i$83717[ebp]
	mov	BYTE PTR [eax+18], cl
$L83721:
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _mrgb$[ebp]
	movzx	eax, BYTE PTR [edx+1]
	add	eax, DWORD PTR [ecx+72]
	mov	DWORD PTR __i$83717[ebp], eax
	cmp	DWORD PTR __i$83717[ebp], 255		; 000000ffH
	jle	SHORT $L83728
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+17], 255			; 000000ffH
	jmp	SHORT $L83730
$L83728:
	cmp	DWORD PTR __i$83717[ebp], 0
	jge	SHORT $L83731
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+17], 0
	jmp	SHORT $L83730
$L83731:
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	cl, BYTE PTR __i$83717[ebp]
	mov	BYTE PTR [eax+17], cl
$L83730:
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _mrgb$[ebp]
	movzx	eax, BYTE PTR [edx]
	add	eax, DWORD PTR [ecx+76]
	mov	DWORD PTR __i$83717[ebp], eax
	cmp	DWORD PTR __i$83717[ebp], 255		; 000000ffH
	jle	SHORT $L83737
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+16], 255			; 000000ffH
	jmp	SHORT $L83739
$L83737:
	cmp	DWORD PTR __i$83717[ebp], 0
	jge	SHORT $L83740
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+16], 0
	jmp	SHORT $L83739
$L83740:
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	cl, BYTE PTR __i$83717[ebp]
	mov	BYTE PTR [eax+16], cl
$L83739:
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	ecx, DWORD PTR _mrgb$[ebp]
	mov	dl, BYTE PTR [ecx+3]
	mov	BYTE PTR [eax+19], dl
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	edx, DWORD PTR _mrgb$[ebp]
	movzx	eax, BYTE PTR [edx+6]
	add	eax, DWORD PTR [ecx+68]
	mov	DWORD PTR __i$83746[ebp], eax
	cmp	DWORD PTR __i$83746[ebp], 255		; 000000ffH
	jle	SHORT $L83748
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+42], 255			; 000000ffH
	jmp	SHORT $L83750
$L83748:
	cmp	DWORD PTR __i$83746[ebp], 0
	jge	SHORT $L83751
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+42], 0
	jmp	SHORT $L83750
$L83751:
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	cl, BYTE PTR __i$83746[ebp]
	mov	BYTE PTR [eax+42], cl
$L83750:
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	edx, DWORD PTR _mrgb$[ebp]
	movzx	eax, BYTE PTR [edx+5]
	add	eax, DWORD PTR [ecx+72]
	mov	DWORD PTR __i$83746[ebp], eax
	cmp	DWORD PTR __i$83746[ebp], 255		; 000000ffH
	jle	SHORT $L83757
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+41], 255			; 000000ffH
	jmp	SHORT $L83759
$L83757:
	cmp	DWORD PTR __i$83746[ebp], 0
	jge	SHORT $L83760
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+41], 0
	jmp	SHORT $L83759
$L83760:
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	cl, BYTE PTR __i$83746[ebp]
	mov	BYTE PTR [eax+41], cl
$L83759:
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	edx, DWORD PTR _mrgb$[ebp]
	movzx	eax, BYTE PTR [edx+4]
	add	eax, DWORD PTR [ecx+76]
	mov	DWORD PTR __i$83746[ebp], eax
	cmp	DWORD PTR __i$83746[ebp], 255		; 000000ffH
	jle	SHORT $L83766
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+40], 255			; 000000ffH
	jmp	SHORT $L83768
$L83766:
	cmp	DWORD PTR __i$83746[ebp], 0
	jge	SHORT $L83769
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+40], 0
	jmp	SHORT $L83768
$L83769:
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	cl, BYTE PTR __i$83746[ebp]
	mov	BYTE PTR [eax+40], cl
$L83768:
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	ecx, DWORD PTR _mrgb$[ebp]
	mov	dl, BYTE PTR [ecx+7]
	mov	BYTE PTR [eax+43], dl
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	mov	edx, DWORD PTR _mrgb$[ebp]
	movzx	eax, BYTE PTR [edx+10]
	add	eax, DWORD PTR [ecx+68]
	mov	DWORD PTR __i$83775[ebp], eax
	cmp	DWORD PTR __i$83775[ebp], 255		; 000000ffH
	jle	SHORT $L83777
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+66], 255			; 000000ffH
	jmp	SHORT $L83779
$L83777:
	cmp	DWORD PTR __i$83775[ebp], 0
	jge	SHORT $L83780
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+66], 0
	jmp	SHORT $L83779
$L83780:
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	cl, BYTE PTR __i$83775[ebp]
	mov	BYTE PTR [eax+66], cl
$L83779:
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	mov	edx, DWORD PTR _mrgb$[ebp]
	movzx	eax, BYTE PTR [edx+9]
	add	eax, DWORD PTR [ecx+72]
	mov	DWORD PTR __i$83775[ebp], eax
	cmp	DWORD PTR __i$83775[ebp], 255		; 000000ffH
	jle	SHORT $L83786
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+65], 255			; 000000ffH
	jmp	SHORT $L83788
$L83786:
	cmp	DWORD PTR __i$83775[ebp], 0
	jge	SHORT $L83789
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+65], 0
	jmp	SHORT $L83788
$L83789:
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	cl, BYTE PTR __i$83775[ebp]
	mov	BYTE PTR [eax+65], cl
$L83788:
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	mov	edx, DWORD PTR _mrgb$[ebp]
	movzx	eax, BYTE PTR [edx+8]
	add	eax, DWORD PTR [ecx+76]
	mov	DWORD PTR __i$83775[ebp], eax
	cmp	DWORD PTR __i$83775[ebp], 255		; 000000ffH
	jle	SHORT $L83795
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+64], 255			; 000000ffH
	jmp	SHORT $L83797
$L83795:
	cmp	DWORD PTR __i$83775[ebp], 0
	jge	SHORT $L83798
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+64], 0
	jmp	SHORT $L83797
$L83798:
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	cl, BYTE PTR __i$83775[ebp]
	mov	BYTE PTR [eax+64], cl
$L83797:
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	ecx, DWORD PTR _mrgb$[ebp]
	mov	dl, BYTE PTR [ecx+11]
	mov	BYTE PTR [eax+67], dl

; 2125 : 		}
; 2126 : 		else

	jmp	SHORT $L83804
$L83716:

; 2127 : 		{
; 2128 : 			COPY_MODEL_TRI_COLOR(vertrgb);

	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	ecx, DWORD PTR _mrgb$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+16], edx
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	ecx, DWORD PTR _mrgb$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+40], edx
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	ecx, DWORD PTR _mrgb$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+64], edx
$L83804:

; 2129 : 		}
; 2130 : 	}

	jmp	$L83693
$L83256:

; 2131 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?DrawModelPolysMirror@@YAXPAUMODEL@@J@Z ENDP		; DrawModelPolysMirror
_TEXT	ENDS
PUBLIC	?SetEnvStatic@@YAXPAUVectorStruct@@PATMatrixUnion@@JMMM@Z ; SetEnvStatic
EXTRN	?ViewCameraPos@@3UVectorStruct@@A:BYTE		; ViewCameraPos
EXTRN	?TransposeMatrix@@YAXPATMatrixUnion@@0@Z:NEAR	; TransposeMatrix
; Function compile flags: /Odt /ZI
;	COMDAT ?SetEnvStatic@@YAXPAUVectorStruct@@PATMatrixUnion@@JMMM@Z
_TEXT	SEGMENT
__mul$83821 = -80					; size = 4
_mul$ = -76						; size = 4
_m2$ = -72						; size = 36
_m$ = -36						; size = 36
_pos$ = 8						; size = 4
_mat$ = 12						; size = 4
_rgb$ = 16						; size = 4
_xoff$ = 20						; size = 4
_yoff$ = 24						; size = 4
_scale$ = 28						; size = 4
?SetEnvStatic@@YAXPAUVectorStruct@@PATMatrixUnion@@JMMM@Z PROC NEAR ; SetEnvStatic, COMDAT

; 2138 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 144				; 00000090H
	push	ebx
	push	esi
	push	edi

; 2139 : 	MAT m, m2;
; 2140 : 	float mul;
; 2141 : 
; 2142 : // set rgb
; 2143 : 
; 2144 : 	*(long*)&EnvRgb = rgb;

	mov	eax, DWORD PTR _rgb$[ebp]
	mov	DWORD PTR ?EnvRgb@@3UMODEL_RGB@@A, eax	; EnvRgb

; 2145 : 
; 2146 : // quit if env mapping off
; 2147 : 
; 2148 : 	if (!RenderSettings.Env)

	cmp	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+76, 0
	jne	SHORT $L83820

; 2149 : 		return;

	jmp	$L83815
$L83820:

; 2150 : 
; 2151 : // build camera to object 'look' matrix
; 2152 : 
; 2153 : 	SubVector(pos, &ViewCameraPos, &m.mv[L]);

	mov	eax, DWORD PTR _pos$[ebp]
	fld	DWORD PTR [eax]
	fsub	DWORD PTR ?ViewCameraPos@@3UVectorStruct@@A
	fstp	DWORD PTR _m$[ebp+24]
	mov	eax, DWORD PTR _pos$[ebp]
	fld	DWORD PTR [eax+4]
	fsub	DWORD PTR ?ViewCameraPos@@3UVectorStruct@@A+4
	fstp	DWORD PTR _m$[ebp+28]
	mov	eax, DWORD PTR _pos$[ebp]
	fld	DWORD PTR [eax+8]
	fsub	DWORD PTR ?ViewCameraPos@@3UVectorStruct@@A+8
	fstp	DWORD PTR _m$[ebp+32]

; 2154 : 	NormalizeVector(&m.mv[L]);

	fld	DWORD PTR _m$[ebp+24]
	fmul	DWORD PTR _m$[ebp+24]
	fld	DWORD PTR _m$[ebp+28]
	fmul	DWORD PTR _m$[ebp+28]
	faddp	ST(1), ST(0)
	fld	DWORD PTR _m$[ebp+32]
	fmul	DWORD PTR _m$[ebp+32]
	faddp	ST(1), ST(0)
	push	ecx
	fstp	DWORD PTR [esp]
	call	?sqrt@@YAMM@Z				; sqrt
	add	esp, 4
	fdivr	DWORD PTR __real@3f800000
	fstp	DWORD PTR __mul$83821[ebp]
	fld	DWORD PTR _m$[ebp+24]
	fmul	DWORD PTR __mul$83821[ebp]
	fstp	DWORD PTR _m$[ebp+24]
	fld	DWORD PTR _m$[ebp+28]
	fmul	DWORD PTR __mul$83821[ebp]
	fstp	DWORD PTR _m$[ebp+28]
	fld	DWORD PTR _m$[ebp+32]
	fmul	DWORD PTR __mul$83821[ebp]
	fstp	DWORD PTR _m$[ebp+32]

; 2155 : 	CrossProduct(&m.mv[L], &ViewCameraMatrix.mv[R], &m.mv[U]);

	fld	DWORD PTR _m$[ebp+28]
	fmul	DWORD PTR ?ViewCameraMatrix@@3TMatrixUnion@@A+8
	fld	DWORD PTR _m$[ebp+32]
	fmul	DWORD PTR ?ViewCameraMatrix@@3TMatrixUnion@@A+4
	fsubp	ST(1), ST(0)
	fstp	DWORD PTR _m$[ebp+12]
	fld	DWORD PTR _m$[ebp+32]
	fmul	DWORD PTR ?ViewCameraMatrix@@3TMatrixUnion@@A
	fld	DWORD PTR _m$[ebp+24]
	fmul	DWORD PTR ?ViewCameraMatrix@@3TMatrixUnion@@A+8
	fsubp	ST(1), ST(0)
	fstp	DWORD PTR _m$[ebp+16]
	fld	DWORD PTR _m$[ebp+24]
	fmul	DWORD PTR ?ViewCameraMatrix@@3TMatrixUnion@@A+4
	fld	DWORD PTR _m$[ebp+28]
	fmul	DWORD PTR ?ViewCameraMatrix@@3TMatrixUnion@@A
	fsubp	ST(1), ST(0)
	fstp	DWORD PTR _m$[ebp+20]

; 2156 : 	CrossProduct(&m.mv[U], &m.mv[L], &m.mv[R]);

	fld	DWORD PTR _m$[ebp+16]
	fmul	DWORD PTR _m$[ebp+32]
	fld	DWORD PTR _m$[ebp+20]
	fmul	DWORD PTR _m$[ebp+28]
	fsubp	ST(1), ST(0)
	fstp	DWORD PTR _m$[ebp]
	fld	DWORD PTR _m$[ebp+20]
	fmul	DWORD PTR _m$[ebp+24]
	fld	DWORD PTR _m$[ebp+12]
	fmul	DWORD PTR _m$[ebp+32]
	fsubp	ST(1), ST(0)
	fstp	DWORD PTR _m$[ebp+4]
	fld	DWORD PTR _m$[ebp+12]
	fmul	DWORD PTR _m$[ebp+28]
	fld	DWORD PTR _m$[ebp+16]
	fmul	DWORD PTR _m$[ebp+24]
	fsubp	ST(1), ST(0)
	fstp	DWORD PTR _m$[ebp+8]

; 2157 : 
; 2158 : // transpose for 'view' matrix
; 2159 : 
; 2160 : 	TransposeMatrix(&m, &m2);

	lea	eax, DWORD PTR _m2$[ebp]
	push	eax
	lea	ecx, DWORD PTR _m$[ebp]
	push	ecx
	call	?TransposeMatrix@@YAXPATMatrixUnion@@0@Z ; TransposeMatrix
	add	esp, 8

; 2161 : 
; 2162 : // mul with obj matrix for 'env' matrix
; 2163 : 
; 2164 : 	MulMatrix(&m2, mat, &EnvMatrix);

	push	OFFSET FLAT:?EnvMatrix@@3TMatrixUnion@@A ; EnvMatrix
	mov	eax, DWORD PTR _mat$[ebp]
	push	eax
	lea	ecx, DWORD PTR _m2$[ebp]
	push	ecx
	call	?MulMatrix@@YAXPATMatrixUnion@@00@Z	; MulMatrix
	add	esp, 12					; 0000000cH

; 2165 : 
; 2166 : // scale 'env' matrix
; 2167 : 
; 2168 : 	mul = 0.5f * scale;

	fld	DWORD PTR __real@3f000000
	fmul	DWORD PTR _scale$[ebp]
	fstp	DWORD PTR _mul$[ebp]

; 2169 : 	EnvMatrix.m[RX] *= mul;

	fld	DWORD PTR ?EnvMatrix@@3TMatrixUnion@@A
	fmul	DWORD PTR _mul$[ebp]
	fstp	DWORD PTR ?EnvMatrix@@3TMatrixUnion@@A

; 2170 : 	EnvMatrix.m[UX] *= mul;

	fld	DWORD PTR ?EnvMatrix@@3TMatrixUnion@@A+12
	fmul	DWORD PTR _mul$[ebp]
	fstp	DWORD PTR ?EnvMatrix@@3TMatrixUnion@@A+12

; 2171 : 	EnvMatrix.m[LX] *= mul;

	fld	DWORD PTR ?EnvMatrix@@3TMatrixUnion@@A+24
	fmul	DWORD PTR _mul$[ebp]
	fstp	DWORD PTR ?EnvMatrix@@3TMatrixUnion@@A+24

; 2172 : 	EnvMatrix.m[RY] *= mul;

	fld	DWORD PTR ?EnvMatrix@@3TMatrixUnion@@A+4
	fmul	DWORD PTR _mul$[ebp]
	fstp	DWORD PTR ?EnvMatrix@@3TMatrixUnion@@A+4

; 2173 : 	EnvMatrix.m[UY] *= mul;

	fld	DWORD PTR ?EnvMatrix@@3TMatrixUnion@@A+16
	fmul	DWORD PTR _mul$[ebp]
	fstp	DWORD PTR ?EnvMatrix@@3TMatrixUnion@@A+16

; 2174 : 	EnvMatrix.m[LY] *= mul;

	fld	DWORD PTR ?EnvMatrix@@3TMatrixUnion@@A+28
	fmul	DWORD PTR _mul$[ebp]
	fstp	DWORD PTR ?EnvMatrix@@3TMatrixUnion@@A+28

; 2175 : 
; 2176 : // set tpage
; 2177 : 
; 2178 : 	EnvTpage = TPAGE_ENVSTILL;

	mov	WORD PTR ?EnvTpage@@3FA, 24		; EnvTpage, 00000018H

; 2179 : 
; 2180 : // set xy offsets
; 2181 : 
; 2182 : 	EnvXoffset = xoff + 0.5f;

	fld	DWORD PTR _xoff$[ebp]
	fadd	DWORD PTR __real@3f000000
	fstp	DWORD PTR ?EnvXoffset@@3MA		; EnvXoffset

; 2183 : 	EnvYoffset = yoff + 0.5f;

	fld	DWORD PTR _yoff$[ebp]
	fadd	DWORD PTR __real@3f000000
	fstp	DWORD PTR ?EnvYoffset@@3MA		; EnvYoffset
$L83815:

; 2184 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?SetEnvStatic@@YAXPAUVectorStruct@@PATMatrixUnion@@JMMM@Z ENDP ; SetEnvStatic
_TEXT	ENDS
PUBLIC	?SetEnvActive@@YAXPAUVectorStruct@@PATMatrixUnion@@1JMMM@Z ; SetEnvActive
EXTRN	?RotMatrixY@@YAXPATMatrixUnion@@M@Z:NEAR	; RotMatrixY
; Function compile flags: /Odt /ZI
;	COMDAT ?SetEnvActive@@YAXPAUVectorStruct@@PATMatrixUnion@@1JMMM@Z
_TEXT	SEGMENT
_m2$ = -76						; size = 36
_m1$ = -40						; size = 36
_mul$ = -4						; size = 4
_pos$ = 8						; size = 4
_mat$ = 12						; size = 4
_envmat$ = 16						; size = 4
_rgb$ = 20						; size = 4
_xoff$ = 24						; size = 4
_yoff$ = 28						; size = 4
_scale$ = 32						; size = 4
?SetEnvActive@@YAXPAUVectorStruct@@PATMatrixUnion@@1JMMM@Z PROC NEAR ; SetEnvActive, COMDAT

; 2191 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 140				; 0000008cH
	push	ebx
	push	esi
	push	edi

; 2192 : 	float mul;
; 2193 : 	MAT m1, m2;
; 2194 : 
; 2195 : // set rgb
; 2196 : 
; 2197 : 	*(long*)&EnvRgb = rgb;

	mov	eax, DWORD PTR _rgb$[ebp]
	mov	DWORD PTR ?EnvRgb@@3UMODEL_RGB@@A, eax	; EnvRgb

; 2198 : 
; 2199 : // quit if env mapping off
; 2200 : 
; 2201 : 	if (!RenderSettings.Env)

	cmp	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+76, 0
	jne	SHORT $L83836

; 2202 : 		return;

	jmp	$L83831
$L83836:

; 2203 : 
; 2204 : // rotate envmat by 90 degrees on the Y (why???)
; 2205 : 
; 2206 : 	RotMatrixY(&m1, 0.25f);

	push	1048576000				; 3e800000H
	lea	eax, DWORD PTR _m1$[ebp]
	push	eax
	call	?RotMatrixY@@YAXPATMatrixUnion@@M@Z	; RotMatrixY
	add	esp, 8

; 2207 : 	MulMatrix(envmat, &m1, &m2);

	lea	eax, DWORD PTR _m2$[ebp]
	push	eax
	lea	ecx, DWORD PTR _m1$[ebp]
	push	ecx
	mov	edx, DWORD PTR _envmat$[ebp]
	push	edx
	call	?MulMatrix@@YAXPATMatrixUnion@@00@Z	; MulMatrix
	add	esp, 12					; 0000000cH

; 2208 : 
; 2209 : // mul with object matrix for 'env' matrix
; 2210 : 
; 2211 : 	MulMatrix(&m2, mat, &EnvMatrix);

	push	OFFSET FLAT:?EnvMatrix@@3TMatrixUnion@@A ; EnvMatrix
	mov	eax, DWORD PTR _mat$[ebp]
	push	eax
	lea	ecx, DWORD PTR _m2$[ebp]
	push	ecx
	call	?MulMatrix@@YAXPATMatrixUnion@@00@Z	; MulMatrix
	add	esp, 12					; 0000000cH

; 2212 : 
; 2213 : // scale 'env' matrix
; 2214 : 
; 2215 : 	mul = 0.5f * scale;

	fld	DWORD PTR __real@3f000000
	fmul	DWORD PTR _scale$[ebp]
	fstp	DWORD PTR _mul$[ebp]

; 2216 : 	EnvMatrix.m[RX] *= mul;

	fld	DWORD PTR ?EnvMatrix@@3TMatrixUnion@@A
	fmul	DWORD PTR _mul$[ebp]
	fstp	DWORD PTR ?EnvMatrix@@3TMatrixUnion@@A

; 2217 : 	EnvMatrix.m[UX] *= mul;

	fld	DWORD PTR ?EnvMatrix@@3TMatrixUnion@@A+12
	fmul	DWORD PTR _mul$[ebp]
	fstp	DWORD PTR ?EnvMatrix@@3TMatrixUnion@@A+12

; 2218 : 	EnvMatrix.m[LX] *= mul;

	fld	DWORD PTR ?EnvMatrix@@3TMatrixUnion@@A+24
	fmul	DWORD PTR _mul$[ebp]
	fstp	DWORD PTR ?EnvMatrix@@3TMatrixUnion@@A+24

; 2219 : 	EnvMatrix.m[RY] *= mul;

	fld	DWORD PTR ?EnvMatrix@@3TMatrixUnion@@A+4
	fmul	DWORD PTR _mul$[ebp]
	fstp	DWORD PTR ?EnvMatrix@@3TMatrixUnion@@A+4

; 2220 : 	EnvMatrix.m[UY] *= mul;

	fld	DWORD PTR ?EnvMatrix@@3TMatrixUnion@@A+16
	fmul	DWORD PTR _mul$[ebp]
	fstp	DWORD PTR ?EnvMatrix@@3TMatrixUnion@@A+16

; 2221 : 	EnvMatrix.m[LY] *= mul;

	fld	DWORD PTR ?EnvMatrix@@3TMatrixUnion@@A+28
	fmul	DWORD PTR _mul$[ebp]
	fstp	DWORD PTR ?EnvMatrix@@3TMatrixUnion@@A+28

; 2222 : 
; 2223 : // set tpage
; 2224 : 
; 2225 : 	EnvTpage = TPAGE_ENVROLL;

	mov	WORD PTR ?EnvTpage@@3FA, 25		; EnvTpage, 00000019H

; 2226 : 
; 2227 : // set xy offsets
; 2228 : 
; 2229 : 	EnvXoffset = xoff + 0.5f;

	fld	DWORD PTR _xoff$[ebp]
	fadd	DWORD PTR __real@3f000000
	fstp	DWORD PTR ?EnvXoffset@@3MA		; EnvXoffset

; 2230 : 	EnvYoffset = yoff + 0.5f;

	fld	DWORD PTR _yoff$[ebp]
	fadd	DWORD PTR __real@3f000000
	fstp	DWORD PTR ?EnvYoffset@@3MA		; EnvYoffset
$L83831:

; 2231 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?SetEnvActive@@YAXPAUVectorStruct@@PATMatrixUnion@@1JMMM@Z ENDP ; SetEnvActive
_TEXT	ENDS
PUBLIC	?InitLevelModels@@YAXXZ				; InitLevelModels
; Function compile flags: /Odt /ZI
;	COMDAT ?InitLevelModels@@YAXXZ
_TEXT	SEGMENT
_i$ = -4						; size = 4
?InitLevelModels@@YAXXZ PROC NEAR			; InitLevelModels, COMDAT

; 2238 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 2239 : 	long i;
; 2240 : 
; 2241 : 	for (i = 0 ; i < MAX_LEVEL_MODELS ; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $L83841
$L83842:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$L83841:
	cmp	DWORD PTR _i$[ebp], 64			; 00000040H
	jge	SHORT $L83839

; 2242 : 	{
; 2243 : 		LevelModel[i].ID = -1;

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 168				; 000000a8H
	mov	DWORD PTR ?LevelModel@@3PAULEVEL_MODEL@@A[eax], -1

; 2244 : 	}

	jmp	SHORT $L83842
$L83839:

; 2245 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?InitLevelModels@@YAXXZ ENDP				; InitLevelModels
_TEXT	ENDS
PUBLIC	?FreeLevelModels@@YAXXZ				; FreeLevelModels
PUBLIC	?FreeOneLevelModel@@YAXJ@Z			; FreeOneLevelModel
; Function compile flags: /Odt /ZI
;	COMDAT ?FreeLevelModels@@YAXXZ
_TEXT	SEGMENT
_i$ = -4						; size = 4
?FreeLevelModels@@YAXXZ PROC NEAR			; FreeLevelModels, COMDAT

; 2252 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 2253 : 	long i;
; 2254 : 
; 2255 : 	for (i = 0 ; i < MAX_LEVEL_MODELS ; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $L83848
$L83849:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$L83848:
	cmp	DWORD PTR _i$[ebp], 64			; 00000040H
	jge	SHORT $L83846

; 2256 : 	{
; 2257 : 		if (LevelModel[i].ID != -1)

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 168				; 000000a8H
	cmp	DWORD PTR ?LevelModel@@3PAULEVEL_MODEL@@A[eax], -1
	je	SHORT $L83851

; 2258 : 		{
; 2259 : 			LevelModel[i].RefCount = 1;

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 168				; 000000a8H
	mov	DWORD PTR ?LevelModel@@3PAULEVEL_MODEL@@A[eax+4], 1

; 2260 : 			FreeOneLevelModel(i);

	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	call	?FreeOneLevelModel@@YAXJ@Z		; FreeOneLevelModel
	add	esp, 4
$L83851:

; 2261 : 		}
; 2262 : 	}

	jmp	SHORT $L83849
$L83846:

; 2263 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?FreeLevelModels@@YAXXZ ENDP				; FreeLevelModels
_TEXT	ENDS
PUBLIC	??_C@_04KLPGNJOE@?$CFs?4m?$AA@			; `string'
PUBLIC	??_C@_06GJLBIJEM@?$CFs?4hul?$AA@		; `string'
PUBLIC	??_C@_06LCAGFEAP@?$CFs?4ncp?$AA@		; `string'
PUBLIC	?LoadOneLevelModel@@YAJJJUrenderflags@@J@Z	; LoadOneLevelModel
EXTRN	?LevelInf@@3PAULEVELINFO@@A:DWORD		; LevelInf
EXTRN	?LoadNewCollPolys@@YAPAUCollPolyStruct@@PAU_iobuf@@PAF@Z:NEAR ; LoadNewCollPolys
EXTRN	?LoadConvex@@YAPAUConvexStruct@@PAU_iobuf@@PAFH@Z:NEAR ; LoadConvex
EXTRN	?LoadSpheres@@YAPAUSphereStruct@@PAU_iobuf@@PAF@Z:NEAR ; LoadSpheres
EXTRN	?MakeTightLocalBBox@@YAXPAUCollSkinStruct@@@Z:NEAR ; MakeTightLocalBBox
;	COMDAT ??_C@_04KLPGNJOE@?$CFs?4m?$AA@
CONST	SEGMENT
??_C@_04KLPGNJOE@?$CFs?4m?$AA@ DB '%s.m', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06GJLBIJEM@?$CFs?4hul?$AA@
CONST	SEGMENT
??_C@_06GJLBIJEM@?$CFs?4hul?$AA@ DB '%s.hul', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06LCAGFEAP@?$CFs?4ncp?$AA@
CONST	SEGMENT
??_C@_06LCAGFEAP@?$CFs?4ncp?$AA@ DB '%s.ncp', 00H	; `string'
; Function compile flags: /Odt /ZI
CONST	ENDS
;	COMDAT ?LoadOneLevelModel@@YAJJJUrenderflags@@J@Z
_TEXT	SEGMENT
_fp$ = -140						; size = 4
_buf$ = -136						; size = 128
_rgbper$ = -8						; size = 4
_i$ = -4						; size = 4
_id$ = 8						; size = 4
_flag$ = 12						; size = 4
_renderflag$ = 16					; size = 4
_tpage$ = 20						; size = 4
?LoadOneLevelModel@@YAJJJUrenderflags@@J@Z PROC NEAR	; LoadOneLevelModel, COMDAT

; 2270 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi

; 2271 : 	long i, rgbper;
; 2272 : 	char buf[128];
; 2273 : 	FILE *fp;
; 2274 : 
; 2275 : // look for existing model
; 2276 : 
; 2277 : 	for (i = 0 ; i < MAX_LEVEL_MODELS ; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $L83862
$L83863:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$L83862:
	cmp	DWORD PTR _i$[ebp], 64			; 00000040H
	jge	SHORT $L83864

; 2278 : 	{
; 2279 : 		if (LevelModel[i].ID == id)

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 168				; 000000a8H
	mov	ecx, DWORD PTR ?LevelModel@@3PAULEVEL_MODEL@@A[eax]
	cmp	ecx, DWORD PTR _id$[ebp]
	jne	SHORT $L83865

; 2280 : 		{
; 2281 : 			LevelModel[i].RefCount++;

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 168				; 000000a8H
	mov	ecx, DWORD PTR ?LevelModel@@3PAULEVEL_MODEL@@A[eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 168				; 000000a8H
	mov	DWORD PTR ?LevelModel@@3PAULEVEL_MODEL@@A[edx+4], ecx

; 2282 : 			return i;

	mov	eax, DWORD PTR _i$[ebp]
	jmp	$L83857
$L83865:

; 2283 : 		}
; 2284 : 	}

	jmp	SHORT $L83863
$L83864:

; 2285 : // find new slot
; 2286 : 
; 2287 : 	for (i = 0 ; i < MAX_LEVEL_MODELS ; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $L83866
$L83867:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$L83866:
	cmp	DWORD PTR _i$[ebp], 64			; 00000040H
	jge	$L83868

; 2288 : 	{
; 2289 : 		if (LevelModel[i].ID == -1)

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 168				; 000000a8H
	cmp	DWORD PTR ?LevelModel@@3PAULEVEL_MODEL@@A[eax], -1
	jne	$L83869

; 2290 : 		{
; 2291 : 
; 2292 : // load model
; 2293 : 
; 2294 : 			wsprintf(buf, "%s.m", LevelModelList[id]);

	mov	eax, DWORD PTR _id$[ebp]
	mov	ecx, DWORD PTR _LevelModelList[eax*4]
	push	ecx
	push	OFFSET FLAT:??_C@_04KLPGNJOE@?$CFs?4m?$AA@
	lea	edx, DWORD PTR _buf$[ebp]
	push	edx
	call	DWORD PTR __imp__wsprintfA
	add	esp, 12					; 0000000cH

; 2295 : 
; 2296 : 			if (flag)

	cmp	DWORD PTR _flag$[ebp], 0
	je	SHORT $L83871

; 2297 : 				rgbper = LevelInf[GameSettings.Level].ModelRGBper;

	mov	eax, DWORD PTR ?GameSettings@@3UGAME_SETTINGS@@A+4
	imul	eax, 232				; 000000e8H
	mov	ecx, DWORD PTR ?LevelInf@@3PAULEVELINFO@@A ; LevelInf
	mov	edx, DWORD PTR [ecx+eax+208]
	mov	DWORD PTR _rgbper$[ebp], edx

; 2298 : 			else

	jmp	SHORT $L83872
$L83871:

; 2299 : 				rgbper = 100;

	mov	DWORD PTR _rgbper$[ebp], 100		; 00000064H
$L83872:

; 2300 : 
; 2301 : 			if (!LoadModel(buf, &LevelModel[i].Model, (char)tpage, 1, LOADMODEL_OFFSET_TPAGE, rgbper))

	mov	eax, DWORD PTR _rgbper$[ebp]
	push	eax
	push	2
	push	1
	mov	cl, BYTE PTR _tpage$[ebp]
	push	ecx
	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 168				; 000000a8H
	add	edx, OFFSET FLAT:?LevelModel@@3PAULEVEL_MODEL@@A+8
	push	edx
	lea	eax, DWORD PTR _buf$[ebp]
	push	eax
	call	?LoadModel@@YAJPADPAUMODEL@@DDDJ@Z	; LoadModel
	add	esp, 24					; 00000018H
	test	eax, eax
	jne	SHORT $L83874

; 2302 : 				return -1;

	or	eax, -1
	jmp	$L83857
$L83874:

; 2303 : 	
; 2304 : // load coll skin
; 2305 : 
; 2306 : 			wsprintf(buf, "%s.hul", LevelModelList[id]);

	mov	eax, DWORD PTR _id$[ebp]
	mov	ecx, DWORD PTR _LevelModelList[eax*4]
	push	ecx
	push	OFFSET FLAT:??_C@_06GJLBIJEM@?$CFs?4hul?$AA@
	lea	edx, DWORD PTR _buf$[ebp]
	push	edx
	call	DWORD PTR __imp__wsprintfA
	add	esp, 12					; 0000000cH

; 2307 : 			if ((fp = fopen(buf, "rb")) != NULL) 

	push	OFFSET FLAT:??_C@_02JDPG@rb?$AA@
	lea	eax, DWORD PTR _buf$[ebp]
	push	eax
	call	_fopen
	add	esp, 8
	mov	DWORD PTR _fp$[ebp], eax
	cmp	DWORD PTR _fp$[ebp], 0
	je	$L83876

; 2308 : 			{
; 2309 : 				if ((LevelModel[i].CollSkin.Convex = LoadConvex(fp, &LevelModel[i].CollSkin.NConvex, 0)) != NULL)

	push	0
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 168				; 000000a8H
	add	eax, OFFSET FLAT:?LevelModel@@3PAULEVEL_MODEL@@A+80
	push	eax
	mov	ecx, DWORD PTR _fp$[ebp]
	push	ecx
	call	?LoadConvex@@YAPAUConvexStruct@@PAU_iobuf@@PAFH@Z ; LoadConvex
	add	esp, 12					; 0000000cH
	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 168				; 000000a8H
	mov	DWORD PTR ?LevelModel@@3PAULEVEL_MODEL@@A[edx+68], eax
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 168				; 000000a8H
	cmp	DWORD PTR ?LevelModel@@3PAULEVEL_MODEL@@A[eax+68], 0
	je	SHORT $L83877

; 2310 : 				{
; 2311 : 					if ((LevelModel[i].CollSkin.Sphere = LoadSpheres(fp, &LevelModel[i].CollSkin.NSpheres)) != NULL) 

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 168				; 000000a8H
	add	eax, OFFSET FLAT:?LevelModel@@3PAULEVEL_MODEL@@A+96
	push	eax
	mov	ecx, DWORD PTR _fp$[ebp]
	push	ecx
	call	?LoadSpheres@@YAPAUSphereStruct@@PAU_iobuf@@PAF@Z ; LoadSpheres
	add	esp, 8
	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 168				; 000000a8H
	mov	DWORD PTR ?LevelModel@@3PAULEVEL_MODEL@@A[edx+84], eax
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 168				; 000000a8H
	cmp	DWORD PTR ?LevelModel@@3PAULEVEL_MODEL@@A[eax+84], 0
	je	SHORT $L83877

; 2312 : 					{
; 2313 : 						LevelModel[i].CollSkin.CollType = BODY_COLL_CONVEX;

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 168				; 000000a8H
	mov	DWORD PTR ?LevelModel@@3PAULEVEL_MODEL@@A[eax+160], 0

; 2314 : 						MakeTightLocalBBox(&LevelModel[i].CollSkin);

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 168				; 000000a8H
	add	eax, OFFSET FLAT:?LevelModel@@3PAULEVEL_MODEL@@A+68
	push	eax
	call	?MakeTightLocalBBox@@YAXPAUCollSkinStruct@@@Z ; MakeTightLocalBBox
	add	esp, 4
$L83877:

; 2315 : 					}
; 2316 : 				}
; 2317 : 				fclose(fp);

	mov	eax, DWORD PTR _fp$[ebp]
	push	eax
	call	_fclose
	add	esp, 4

; 2318 : 			}
; 2319 : 			else 

	jmp	SHORT $L83879
$L83876:

; 2320 : 			{
; 2321 : 				wsprintf(buf, "%s.ncp", LevelModelList[id]);

	mov	eax, DWORD PTR _id$[ebp]
	mov	ecx, DWORD PTR _LevelModelList[eax*4]
	push	ecx
	push	OFFSET FLAT:??_C@_06LCAGFEAP@?$CFs?4ncp?$AA@
	lea	edx, DWORD PTR _buf$[ebp]
	push	edx
	call	DWORD PTR __imp__wsprintfA
	add	esp, 12					; 0000000cH

; 2322 : 				if ((fp = fopen(buf, "rb")) != NULL) 

	push	OFFSET FLAT:??_C@_02JDPG@rb?$AA@
	lea	eax, DWORD PTR _buf$[ebp]
	push	eax
	call	_fopen
	add	esp, 8
	mov	DWORD PTR _fp$[ebp], eax
	cmp	DWORD PTR _fp$[ebp], 0
	je	SHORT $L83879

; 2323 : 				{
; 2324 : 					LevelModel[i].CollSkin.CollPoly = LoadNewCollPolys(fp, &LevelModel[i].CollSkin.NCollPolys);

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 168				; 000000a8H
	add	eax, OFFSET FLAT:?LevelModel@@3PAULEVEL_MODEL@@A+104
	push	eax
	mov	ecx, DWORD PTR _fp$[ebp]
	push	ecx
	call	?LoadNewCollPolys@@YAPAUCollPolyStruct@@PAU_iobuf@@PAF@Z ; LoadNewCollPolys
	add	esp, 8
	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 168				; 000000a8H
	mov	DWORD PTR ?LevelModel@@3PAULEVEL_MODEL@@A[edx+100], eax

; 2325 : 					fclose(fp);

	mov	eax, DWORD PTR _fp$[ebp]
	push	eax
	call	_fclose
	add	esp, 4
$L83879:

; 2326 : 				}
; 2327 : 			}
; 2328 : 
; 2329 : 
; 2330 : 
; 2331 : // set ID / ref count
; 2332 : 
; 2333 : 			LevelModel[i].ID = id;

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 168				; 000000a8H
	mov	ecx, DWORD PTR _id$[ebp]
	mov	DWORD PTR ?LevelModel@@3PAULEVEL_MODEL@@A[eax], ecx

; 2334 : 			LevelModel[i].RefCount = 1;

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 168				; 000000a8H
	mov	DWORD PTR ?LevelModel@@3PAULEVEL_MODEL@@A[eax+4], 1

; 2335 : 			return i;

	mov	eax, DWORD PTR _i$[ebp]
	jmp	SHORT $L83857
$L83869:

; 2336 : 		}
; 2337 : 	}

	jmp	$L83867
$L83868:

; 2338 : 
; 2339 : // slots full
; 2340 : 
; 2341 : 	return -1;

	or	eax, -1
$L83857:

; 2342 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?LoadOneLevelModel@@YAJJJUrenderflags@@J@Z ENDP		; LoadOneLevelModel
_TEXT	ENDS
EXTRN	?DestroyConvex@@YAXPAUConvexStruct@@H@Z:NEAR	; DestroyConvex
EXTRN	?DestroySpheres@@YAXPAUSphereStruct@@@Z:NEAR	; DestroySpheres
; Function compile flags: /Odt /ZI
;	COMDAT ?FreeOneLevelModel@@YAXJ@Z
_TEXT	SEGMENT
_slot$ = 8						; size = 4
?FreeOneLevelModel@@YAXJ@Z PROC NEAR			; FreeOneLevelModel, COMDAT

; 2349 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 2350 : 
; 2351 : // skip if empty
; 2352 : 
; 2353 : 	if (LevelModel[slot].ID == -1)

	mov	eax, DWORD PTR _slot$[ebp]
	imul	eax, 168				; 000000a8H
	cmp	DWORD PTR ?LevelModel@@3PAULEVEL_MODEL@@A[eax], -1
	jne	SHORT $L83885

; 2354 : 		return;

	jmp	$L83884
$L83885:

; 2355 : 
; 2356 : // dec ref count
; 2357 : 
; 2358 : 	LevelModel[slot].RefCount--;

	mov	eax, DWORD PTR _slot$[ebp]
	imul	eax, 168				; 000000a8H
	mov	ecx, DWORD PTR ?LevelModel@@3PAULEVEL_MODEL@@A[eax+4]
	sub	ecx, 1
	mov	edx, DWORD PTR _slot$[ebp]
	imul	edx, 168				; 000000a8H
	mov	DWORD PTR ?LevelModel@@3PAULEVEL_MODEL@@A[edx+4], ecx

; 2359 : 
; 2360 : // free model + coll if no owners
; 2361 : 
; 2362 : 	if (LevelModel[slot].RefCount < 1)

	mov	eax, DWORD PTR _slot$[ebp]
	imul	eax, 168				; 000000a8H
	cmp	DWORD PTR ?LevelModel@@3PAULEVEL_MODEL@@A[eax+4], 1
	jge	$L83884

; 2363 : 	{
; 2364 : 		FreeModel(&LevelModel[slot].Model, 1);

	push	1
	mov	eax, DWORD PTR _slot$[ebp]
	imul	eax, 168				; 000000a8H
	add	eax, OFFSET FLAT:?LevelModel@@3PAULEVEL_MODEL@@A+8
	push	eax
	call	?FreeModel@@YAXPAUMODEL@@J@Z		; FreeModel
	add	esp, 8

; 2365 : 		DestroyConvex(LevelModel[slot].CollSkin.Convex, LevelModel[slot].CollSkin.NConvex);

	mov	eax, DWORD PTR _slot$[ebp]
	imul	eax, 168				; 000000a8H
	movsx	ecx, WORD PTR ?LevelModel@@3PAULEVEL_MODEL@@A[eax+80]
	push	ecx
	mov	edx, DWORD PTR _slot$[ebp]
	imul	edx, 168				; 000000a8H
	mov	eax, DWORD PTR ?LevelModel@@3PAULEVEL_MODEL@@A[edx+68]
	push	eax
	call	?DestroyConvex@@YAXPAUConvexStruct@@H@Z	; DestroyConvex
	add	esp, 8

; 2366 : 		LevelModel[slot].CollSkin.Convex = NULL;

	mov	eax, DWORD PTR _slot$[ebp]
	imul	eax, 168				; 000000a8H
	mov	DWORD PTR ?LevelModel@@3PAULEVEL_MODEL@@A[eax+68], 0

; 2367 : 		LevelModel[slot].CollSkin.NConvex = 0;

	mov	eax, DWORD PTR _slot$[ebp]
	imul	eax, 168				; 000000a8H
	mov	WORD PTR ?LevelModel@@3PAULEVEL_MODEL@@A[eax+80], 0

; 2368 : 		DestroySpheres(LevelModel[slot].CollSkin.Sphere);

	mov	eax, DWORD PTR _slot$[ebp]
	imul	eax, 168				; 000000a8H
	mov	ecx, DWORD PTR ?LevelModel@@3PAULEVEL_MODEL@@A[eax+84]
	push	ecx
	call	?DestroySpheres@@YAXPAUSphereStruct@@@Z	; DestroySpheres
	add	esp, 4

; 2369 : 		LevelModel[slot].CollSkin.NSpheres = 0;

	mov	eax, DWORD PTR _slot$[ebp]
	imul	eax, 168				; 000000a8H
	mov	WORD PTR ?LevelModel@@3PAULEVEL_MODEL@@A[eax+96], 0

; 2370 : 		LevelModel[slot].ID = -1;

	mov	eax, DWORD PTR _slot$[ebp]
	imul	eax, 168				; 000000a8H
	mov	DWORD PTR ?LevelModel@@3PAULEVEL_MODEL@@A[eax], -1
$L83884:

; 2371 : 	}
; 2372 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?FreeOneLevelModel@@YAXJ@Z ENDP				; FreeOneLevelModel
_TEXT	ENDS
PUBLIC	?__LINE__Var@?1??SetModelFrames@@YAXPAUMODEL@@PAPADJ@Z@4JA ; `SetModelFrames'::`2'::__LINE__Var
PUBLIC	??_C@_0BK@EBFHHFDD@Can?8t?5load?5morph?5frame?5?$CFs?$AA@ ; `string'
PUBLIC	?SetModelFrames@@YAXPAUMODEL@@PAPADJ@Z		; SetModelFrames
;	COMDAT ?__LINE__Var@?1??SetModelFrames@@YAXPAUMODEL@@PAPADJ@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??SetModelFrames@@YAXPAUMODEL@@PAPADJ@Z@4JA DD 094bH ; `SetModelFrames'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0BK@EBFHHFDD@Can?8t?5load?5morph?5frame?5?$CFs?$AA@
CONST	SEGMENT
??_C@_0BK@EBFHHFDD@Can?8t?5load?5morph?5frame?5?$CFs?$AA@ DB 'Can''t load'
	DB	' morph frame %s', 00H			; `string'
; Function compile flags: /Odt /ZI
CONST	ENDS
;	COMDAT ?SetModelFrames@@YAXPAUMODEL@@PAPADJ@Z
_TEXT	SEGMENT
_buf$ = -232						; size = 128
_mvm$ = -104						; size = 4
_mvl$ = -100						; size = 24
_mpl$ = -76						; size = 60
_mh$ = -16						; size = 4
_fp$ = -12						; size = 4
_j$ = -8						; size = 4
_i$ = -4						; size = 4
_model$ = 8						; size = 4
_files$ = 12						; size = 4
_count$ = 16						; size = 4
?SetModelFrames@@YAXPAUMODEL@@PAPADJ@Z PROC NEAR	; SetModelFrames, COMDAT

; 2379 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 296				; 00000128H
	push	ebx
	push	esi
	push	edi

; 2380 : 	long i, j;
; 2381 : 	FILE *fp;
; 2382 : 	MODEL_HEADER mh;
; 2383 : 	MODEL_POLY_LOAD mpl;
; 2384 : 	MODEL_VERTEX_LOAD mvl;
; 2385 : 	MODEL_VERTEX_MORPH *mvm;
; 2386 : 	char buf[128];
; 2387 : 
; 2388 : // alloc morph ram
; 2389 : 
; 2390 : 	model->VertPtrMorph = (MODEL_VERTEX_MORPH*)malloc(sizeof(MODEL_VERTEX_MORPH) * model->VertNum * count);

	push	OFFSET FLAT:??_C@_0IK@IAEFILOF@c?3?2documents?5and?5settings?2jarhea@
	mov	eax, DWORD PTR ?__LINE__Var@?1??SetModelFrames@@YAXPAUMODEL@@PAPADJ@Z@4JA
	add	eax, 11					; 0000000bH
	push	eax
	mov	ecx, DWORD PTR _model$[ebp]
	movsx	edx, WORD PTR [ecx+34]
	imul	edx, 24					; 00000018H
	imul	edx, DWORD PTR _count$[ebp]
	push	edx
	call	?DebugMalloc@@YAPAXIHPAD@Z		; DebugMalloc
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _model$[ebp]
	mov	DWORD PTR [ecx+56], eax

; 2391 : 	if (!model->VertPtrMorph)

	mov	eax, DWORD PTR _model$[ebp]
	cmp	DWORD PTR [eax+56], 0
	jne	SHORT $L83903

; 2392 : 		return;

	jmp	$L83891
$L83903:

; 2393 : 
; 2394 : // load in each frame
; 2395 : 
; 2396 : 	for (i = 0 ; i < count ; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $L83904
$L83905:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$L83904:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _count$[ebp]
	jge	$L83891

; 2397 : 	{
; 2398 : 		fp = fopen(files[i], "rb");

	push	OFFSET FLAT:??_C@_02JDPG@rb?$AA@
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _files$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	push	edx
	call	_fopen
	add	esp, 8
	mov	DWORD PTR _fp$[ebp], eax

; 2399 : 		if (fp == NULL)

	cmp	DWORD PTR _fp$[ebp], 0
	jne	SHORT $L83907

; 2400 : 		{
; 2401 : 			wsprintf(buf, "Can't load morph frame %s", files[i]);

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _files$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	push	edx
	push	OFFSET FLAT:??_C@_0BK@EBFHHFDD@Can?8t?5load?5morph?5frame?5?$CFs?$AA@
	lea	eax, DWORD PTR _buf$[ebp]
	push	eax
	call	DWORD PTR __imp__wsprintfA
	add	esp, 12					; 0000000cH

; 2402 : 			Box("ERROR", buf, MB_OK);

	push	0
	lea	eax, DWORD PTR _buf$[ebp]
	push	eax
	push	OFFSET FLAT:??_C@_05MBDEGLCK@ERROR?$AA@
	call	?Box@@YAJPAD0J@Z			; Box
	add	esp, 12					; 0000000cH

; 2403 : 			continue;

	jmp	SHORT $L83905
$L83907:

; 2404 : 		}
; 2405 : 
; 2406 : // read header
; 2407 : 
; 2408 : 		fread(&mh, sizeof(mh), 1, fp);

	mov	eax, DWORD PTR _fp$[ebp]
	push	eax
	push	1
	push	4
	lea	ecx, DWORD PTR _mh$[ebp]
	push	ecx
	call	_fread
	add	esp, 16					; 00000010H

; 2409 : 
; 2410 : // skip polys
; 2411 : 
; 2412 : 		for (j = 0 ; j < mh.PolyNum ; j++)

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $L83909
$L83910:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$L83909:
	movsx	eax, WORD PTR _mh$[ebp]
	cmp	DWORD PTR _j$[ebp], eax
	jge	SHORT $L83911

; 2413 : 			fread(&mpl, sizeof(mpl), 1, fp);

	mov	eax, DWORD PTR _fp$[ebp]
	push	eax
	push	1
	push	60					; 0000003cH
	lea	ecx, DWORD PTR _mpl$[ebp]
	push	ecx
	call	_fread
	add	esp, 16					; 00000010H
	jmp	SHORT $L83910
$L83911:

; 2414 : 
; 2415 : // load verts
; 2416 : 
; 2417 : 		mvm = &model->VertPtrMorph[model->VertNum * i];

	mov	eax, DWORD PTR _model$[ebp]
	movsx	ecx, WORD PTR [eax+34]
	imul	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 24					; 00000018H
	mov	edx, DWORD PTR _model$[ebp]
	add	ecx, DWORD PTR [edx+56]
	mov	DWORD PTR _mvm$[ebp], ecx

; 2418 : 
; 2419 : 		for (j = 0 ; j < model->VertNum ; j++)

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $L83912
$L83913:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$L83912:
	mov	eax, DWORD PTR _model$[ebp]
	movsx	ecx, WORD PTR [eax+34]
	cmp	DWORD PTR _j$[ebp], ecx
	jge	SHORT $L83914

; 2420 : 		{
; 2421 : 			fread(&mvl, sizeof(mvl), 1, fp);

	mov	eax, DWORD PTR _fp$[ebp]
	push	eax
	push	1
	push	24					; 00000018H
	lea	ecx, DWORD PTR _mvl$[ebp]
	push	ecx
	call	_fread
	add	esp, 16					; 00000010H

; 2422 : 
; 2423 : 			mvm[j].x = mvl.x;

	mov	eax, DWORD PTR _j$[ebp]
	imul	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _mvm$[ebp]
	mov	edx, DWORD PTR _mvl$[ebp]
	mov	DWORD PTR [ecx+eax], edx

; 2424 : 			mvm[j].y = mvl.y;

	mov	eax, DWORD PTR _j$[ebp]
	imul	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _mvm$[ebp]
	mov	edx, DWORD PTR _mvl$[ebp+4]
	mov	DWORD PTR [ecx+eax+4], edx

; 2425 : 			mvm[j].z = mvl.z;

	mov	eax, DWORD PTR _j$[ebp]
	imul	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _mvm$[ebp]
	mov	edx, DWORD PTR _mvl$[ebp+8]
	mov	DWORD PTR [ecx+eax+8], edx

; 2426 : 
; 2427 : 			mvm[j].nx = mvl.nx;

	mov	eax, DWORD PTR _j$[ebp]
	imul	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _mvm$[ebp]
	mov	edx, DWORD PTR _mvl$[ebp+12]
	mov	DWORD PTR [ecx+eax+12], edx

; 2428 : 			mvm[j].ny = mvl.ny;

	mov	eax, DWORD PTR _j$[ebp]
	imul	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _mvm$[ebp]
	mov	edx, DWORD PTR _mvl$[ebp+16]
	mov	DWORD PTR [ecx+eax+16], edx

; 2429 : 			mvm[j].nz = mvl.nz;

	mov	eax, DWORD PTR _j$[ebp]
	imul	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _mvm$[ebp]
	mov	edx, DWORD PTR _mvl$[ebp+20]
	mov	DWORD PTR [ecx+eax+20], edx

; 2430 : 		}

	jmp	$L83913
$L83914:

; 2431 : 
; 2432 : // close file
; 2433 : 
; 2434 : 		fclose(fp);

	mov	eax, DWORD PTR _fp$[ebp]
	push	eax
	call	_fclose
	add	esp, 4

; 2435 : 	}

	jmp	$L83905
$L83891:

; 2436 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?SetModelFrames@@YAXPAUMODEL@@PAPADJ@Z ENDP		; SetModelFrames
_TEXT	ENDS
PUBLIC	?SetModelMorph@@YAXPAUMODEL@@JJM@Z		; SetModelMorph
; Function compile flags: /Odt /ZI
;	COMDAT ?SetModelMorph@@YAXPAUMODEL@@JJM@Z
_TEXT	SEGMENT
__mul$83934 = -20					; size = 4
_v2$ = -16						; size = 4
_v1$ = -12						; size = 4
_mv$ = -8						; size = 4
_i$ = -4						; size = 4
_m$ = 8							; size = 4
_frame1$ = 12						; size = 4
_frame2$ = 16						; size = 4
_time$ = 20						; size = 4
?SetModelMorph@@YAXPAUMODEL@@JJM@Z PROC NEAR		; SetModelMorph, COMDAT

; 2443 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi

; 2444 : 	long i;
; 2445 : 	MODEL_VERTEX *mv;
; 2446 : 	MODEL_VERTEX_MORPH *v1, *v2;
; 2447 : 
; 2448 : // quit if no morph frames
; 2449 : 
; 2450 : 	if (!m->VertPtrMorph)

	mov	eax, DWORD PTR _m$[ebp]
	cmp	DWORD PTR [eax+56], 0
	jne	SHORT $L83925

; 2451 : 		return;

	jmp	$L83920
$L83925:

; 2452 : 
; 2453 : // loop thru each vert
; 2454 : 
; 2455 : 	v1 = &m->VertPtrMorph[m->VertNum * frame1];

	mov	eax, DWORD PTR _m$[ebp]
	movsx	ecx, WORD PTR [eax+34]
	imul	ecx, DWORD PTR _frame1$[ebp]
	imul	ecx, 24					; 00000018H
	mov	edx, DWORD PTR _m$[ebp]
	add	ecx, DWORD PTR [edx+56]
	mov	DWORD PTR _v1$[ebp], ecx

; 2456 : 	v2 = &m->VertPtrMorph[m->VertNum * frame2];

	mov	eax, DWORD PTR _m$[ebp]
	movsx	ecx, WORD PTR [eax+34]
	imul	ecx, DWORD PTR _frame2$[ebp]
	imul	ecx, 24					; 00000018H
	mov	edx, DWORD PTR _m$[ebp]
	add	ecx, DWORD PTR [edx+56]
	mov	DWORD PTR _v2$[ebp], ecx

; 2457 : 	mv= m->VertPtr;

	mov	eax, DWORD PTR _m$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	mov	DWORD PTR _mv$[ebp], ecx

; 2458 : 
; 2459 : 	if (time == 0.0f)

	fld	DWORD PTR __real@00000000
	fld	DWORD PTR _time$[ebp]
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	$L83926

; 2460 : 	{
; 2461 : 		for (i = m->VertNum ; i ; i--, v1++, v2++, mv++)

	mov	eax, DWORD PTR _m$[ebp]
	movsx	ecx, WORD PTR [eax+34]
	mov	DWORD PTR _i$[ebp], ecx
	jmp	SHORT $L83927
$L83928:
	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	mov	ecx, DWORD PTR _v1$[ebp]
	add	ecx, 24					; 00000018H
	mov	DWORD PTR _v1$[ebp], ecx
	mov	edx, DWORD PTR _v2$[ebp]
	add	edx, 24					; 00000018H
	mov	DWORD PTR _v2$[ebp], edx
	mov	eax, DWORD PTR _mv$[ebp]
	add	eax, 88					; 00000058H
	mov	DWORD PTR _mv$[ebp], eax
$L83927:
	cmp	DWORD PTR _i$[ebp], 0
	je	SHORT $L83929

; 2462 : 		{
; 2463 : 			mv->x = v1->x;

	mov	eax, DWORD PTR _mv$[ebp]
	mov	ecx, DWORD PTR _v1$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 2464 : 			mv->y = v1->y;

	mov	eax, DWORD PTR _mv$[ebp]
	mov	ecx, DWORD PTR _v1$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx

; 2465 : 			mv->z = v1->z;

	mov	eax, DWORD PTR _mv$[ebp]
	mov	ecx, DWORD PTR _v1$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx

; 2466 : 
; 2467 : 			mv->nx = v1->nx;

	mov	eax, DWORD PTR _mv$[ebp]
	mov	ecx, DWORD PTR _v1$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+24], edx

; 2468 : 			mv->ny = v1->ny;

	mov	eax, DWORD PTR _mv$[ebp]
	mov	ecx, DWORD PTR _v1$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+28], edx

; 2469 : 			mv->nz = v1->nz;

	mov	eax, DWORD PTR _mv$[ebp]
	mov	ecx, DWORD PTR _v1$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR [eax+32], edx

; 2470 : 		}

	jmp	SHORT $L83928
$L83929:

; 2471 : 	}
; 2472 : 
; 2473 : 	else

	jmp	$L83920
$L83926:

; 2474 : 	{
; 2475 : 		for (i = m->VertNum ; i ; i--, v1++, v2++, mv++)

	mov	eax, DWORD PTR _m$[ebp]
	movsx	ecx, WORD PTR [eax+34]
	mov	DWORD PTR _i$[ebp], ecx
	jmp	SHORT $L83931
$L83932:
	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	mov	ecx, DWORD PTR _v1$[ebp]
	add	ecx, 24					; 00000018H
	mov	DWORD PTR _v1$[ebp], ecx
	mov	edx, DWORD PTR _v2$[ebp]
	add	edx, 24					; 00000018H
	mov	DWORD PTR _v2$[ebp], edx
	mov	eax, DWORD PTR _mv$[ebp]
	add	eax, 88					; 00000058H
	mov	DWORD PTR _mv$[ebp], eax
$L83931:
	cmp	DWORD PTR _i$[ebp], 0
	je	$L83920

; 2476 : 		{
; 2477 : 			mv->x = v1->x + (v2->x - v1->x) * time;

	mov	eax, DWORD PTR _v2$[ebp]
	mov	ecx, DWORD PTR _v1$[ebp]
	fld	DWORD PTR [eax]
	fsub	DWORD PTR [ecx]
	fmul	DWORD PTR _time$[ebp]
	mov	edx, DWORD PTR _v1$[ebp]
	fadd	DWORD PTR [edx]
	mov	eax, DWORD PTR _mv$[ebp]
	fstp	DWORD PTR [eax]

; 2478 : 			mv->y = v1->y + (v2->y - v1->y) * time;

	mov	eax, DWORD PTR _v2$[ebp]
	mov	ecx, DWORD PTR _v1$[ebp]
	fld	DWORD PTR [eax+4]
	fsub	DWORD PTR [ecx+4]
	fmul	DWORD PTR _time$[ebp]
	mov	edx, DWORD PTR _v1$[ebp]
	fadd	DWORD PTR [edx+4]
	mov	eax, DWORD PTR _mv$[ebp]
	fstp	DWORD PTR [eax+4]

; 2479 : 			mv->z = v1->z + (v2->z - v1->z) * time;

	mov	eax, DWORD PTR _v2$[ebp]
	mov	ecx, DWORD PTR _v1$[ebp]
	fld	DWORD PTR [eax+8]
	fsub	DWORD PTR [ecx+8]
	fmul	DWORD PTR _time$[ebp]
	mov	edx, DWORD PTR _v1$[ebp]
	fadd	DWORD PTR [edx+8]
	mov	eax, DWORD PTR _mv$[ebp]
	fstp	DWORD PTR [eax+8]

; 2480 : 
; 2481 : 			mv->nx = v1->nx + (v2->nx - v1->nx) * time;

	mov	eax, DWORD PTR _v2$[ebp]
	mov	ecx, DWORD PTR _v1$[ebp]
	fld	DWORD PTR [eax+12]
	fsub	DWORD PTR [ecx+12]
	fmul	DWORD PTR _time$[ebp]
	mov	edx, DWORD PTR _v1$[ebp]
	fadd	DWORD PTR [edx+12]
	mov	eax, DWORD PTR _mv$[ebp]
	fstp	DWORD PTR [eax+24]

; 2482 : 			mv->ny = v1->ny + (v2->ny - v1->ny) * time;

	mov	eax, DWORD PTR _v2$[ebp]
	mov	ecx, DWORD PTR _v1$[ebp]
	fld	DWORD PTR [eax+16]
	fsub	DWORD PTR [ecx+16]
	fmul	DWORD PTR _time$[ebp]
	mov	edx, DWORD PTR _v1$[ebp]
	fadd	DWORD PTR [edx+16]
	mov	eax, DWORD PTR _mv$[ebp]
	fstp	DWORD PTR [eax+28]

; 2483 : 			mv->nz = v1->nz + (v2->nz - v1->nz) * time;

	mov	eax, DWORD PTR _v2$[ebp]
	mov	ecx, DWORD PTR _v1$[ebp]
	fld	DWORD PTR [eax+20]
	fsub	DWORD PTR [ecx+20]
	fmul	DWORD PTR _time$[ebp]
	mov	edx, DWORD PTR _v1$[ebp]
	fadd	DWORD PTR [edx+20]
	mov	eax, DWORD PTR _mv$[ebp]
	fstp	DWORD PTR [eax+32]

; 2484 : 
; 2485 : 			NormalizeVector((VEC*)&mv->nx);

	mov	eax, DWORD PTR _mv$[ebp]
	mov	ecx, DWORD PTR _mv$[ebp]
	fld	DWORD PTR [eax+24]
	fmul	DWORD PTR [ecx+24]
	mov	edx, DWORD PTR _mv$[ebp]
	mov	eax, DWORD PTR _mv$[ebp]
	fld	DWORD PTR [edx+28]
	fmul	DWORD PTR [eax+28]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR _mv$[ebp]
	mov	edx, DWORD PTR _mv$[ebp]
	fld	DWORD PTR [ecx+32]
	fmul	DWORD PTR [edx+32]
	faddp	ST(1), ST(0)
	push	ecx
	fstp	DWORD PTR [esp]
	call	?sqrt@@YAMM@Z				; sqrt
	add	esp, 4
	fdivr	DWORD PTR __real@3f800000
	fstp	DWORD PTR __mul$83934[ebp]
	mov	eax, DWORD PTR _mv$[ebp]
	fld	DWORD PTR __mul$83934[ebp]
	fmul	DWORD PTR [eax+24]
	mov	ecx, DWORD PTR _mv$[ebp]
	fstp	DWORD PTR [ecx+24]
	mov	eax, DWORD PTR _mv$[ebp]
	fld	DWORD PTR __mul$83934[ebp]
	fmul	DWORD PTR [eax+28]
	mov	ecx, DWORD PTR _mv$[ebp]
	fstp	DWORD PTR [ecx+28]
	mov	eax, DWORD PTR _mv$[ebp]
	fld	DWORD PTR __mul$83934[ebp]
	fmul	DWORD PTR [eax+32]
	mov	ecx, DWORD PTR _mv$[ebp]
	fstp	DWORD PTR [ecx+32]

; 2486 : 		}

	jmp	$L83932
$L83920:

; 2487 : 	}
; 2488 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?SetModelMorph@@YAXPAUMODEL@@JJM@Z ENDP			; SetModelMorph
_TEXT	ENDS
PUBLIC	?CheckModelMeshFx@@YAXPAUMODEL@@PATMatrixUnion@@PAUVectorStruct@@PAF@Z ; CheckModelMeshFx
EXTRN	?ModelMeshFx@@3PAUMODEL_MESH_FX@@A:BYTE		; ModelMeshFx
EXTRN	?ModelMeshFxCount@@3JA:DWORD			; ModelMeshFxCount
; Function compile flags: /Odt /ZI
;	COMDAT ?CheckModelMeshFx@@YAXPAUMODEL@@PATMatrixUnion@@PAUVectorStruct@@PAF@Z
_TEXT	SEGMENT
_i$ = -4						; size = 4
_model$ = 8						; size = 4
_mat$ = 12						; size = 4
_pos$ = 16						; size = 4
_flag$ = 20						; size = 4
?CheckModelMeshFx@@YAXPAUMODEL@@PATMatrixUnion@@PAUVectorStruct@@PAF@Z PROC NEAR ; CheckModelMeshFx, COMDAT

; 2495 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 2496 : 	long i;
; 2497 : 
; 2498 : // set checker params
; 2499 : 
; 2500 : 	ModelMeshModel = model;

	mov	eax, DWORD PTR _model$[ebp]
	mov	DWORD PTR ?ModelMeshModel@@3PAUMODEL@@A, eax ; ModelMeshModel

; 2501 : 	ModelMeshMat = mat;

	mov	eax, DWORD PTR _mat$[ebp]
	mov	DWORD PTR ?ModelMeshMat@@3PATMatrixUnion@@A, eax ; ModelMeshMat

; 2502 : 	ModelMeshPos = pos;

	mov	eax, DWORD PTR _pos$[ebp]
	mov	DWORD PTR ?ModelMeshPos@@3PAUVectorStruct@@A, eax ; ModelMeshPos

; 2503 : 	ModelMeshFlag = flag;

	mov	eax, DWORD PTR _flag$[ebp]
	mov	DWORD PTR ?ModelMeshFlag@@3PAFA, eax	; ModelMeshFlag

; 2504 : 
; 2505 : // loop thru all
; 2506 : 
; 2507 : 	for (i = 0 ; i < ModelMeshFxCount ; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $L83952
$L83953:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$L83952:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR ?ModelMeshFxCount@@3JA	; ModelMeshFxCount
	jge	SHORT $L83950

; 2508 : 		ModelMeshFx[i].Checker(ModelMeshFx[i].Data);

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR ?ModelMeshFx@@3PAUMODEL_MESH_FX@@A[eax*8+4]
	push	ecx
	mov	edx, DWORD PTR _i$[ebp]
	call	DWORD PTR ?ModelMeshFx@@3PAUMODEL_MESH_FX@@A[edx*8]
	add	esp, 4
	jmp	SHORT $L83953
$L83950:

; 2509 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?CheckModelMeshFx@@YAXPAUMODEL@@PATMatrixUnion@@PAUVectorStruct@@PAF@Z ENDP ; CheckModelMeshFx
_TEXT	ENDS
END
