; Listing generated by Microsoft (R) Optimizing Compiler Version 13.10.3077 

	TITLE	.\source\editcam.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT PARA USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_0P@IKKNJPOJ@edit?2camnode?4m?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BC@BODDIPCE@models?2football?4m?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_03IDDGKHFD@X?5Y?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_03KIBLPEJA@X?5Z?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_03CJDPGPNI@Z?5Y?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_01MMEEDKFM@X?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_01NFFPALBN@Y?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_01POHCFINO@Z?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_06JCBBMBIP@Camera?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_05MFLOHCHP@World?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_08JDANMAOM@Monorail?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_06KJMEDNIB@Static?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0IM@NNCDBPEN@c?3?2documents?5and?5settings?2jarhea@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CK@JNACHPAH@Can?8t?5alloc?5memory?5for?5edit?5came@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_02JDPG@rb?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_02GMLFBBN@wb?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_03JOBHIDPG@ca?9?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BI@KKIDBBPE@Saved?5camera?5node?5File?3?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_02DPKJAMEF@?$CFd?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_07PCBHLMKO@Type?5?$CFs?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_07CEOAHIHB@Zoom?5?$CFd?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0N@MOINFLNL@Axis?5?$CFs?5?9?5?$CFs?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0O@ENFFANGC@Pos?5?5?$CFd?5?$CFd?5?$CFd?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_07EFADAHJO@ID?5?5?5?$CFd?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_03GOGOMMPD@cam?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _IsEqualGUID
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _==
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _acosl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _asinl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _atanl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _atan2l
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _ceill
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _cosl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _coshl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _expl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _fabsl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _floorl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _fmodl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _frexpl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _ldexpl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _logl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _log10l
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _modfl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _powl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _sinl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _sinhl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _sqrtl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _tanl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _tanhl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _frexpf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _ldexpf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _acosf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _asinf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _atanf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _atan2f
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _ceilf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _cosf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _coshf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _expf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _fabsf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _floorf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _fmodf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _logf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _log10f
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _modff
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _powf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _sinf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _sinhf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _sqrtf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _tanf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _tanhf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?sqrt@@YAMM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?InitEditCamNodes@@YAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?KillEditCamNodes@@YAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?LoadEditCamNodeModels@@YAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?FreeEditCamNodeModels@@YAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?LoadEditCamNodes@@YAXPAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SaveEditCamNodes@@YAXPAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DrawEditCamNodes@@YAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DisplayCamNodeInfo@@YAXPAU_EDIT_CAM_NODE@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?EditCamNodes@@YAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AllocEditCamNode@@YAPAU_EDIT_CAM_NODE@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?FreeEditCamNode@@YAXPAU_EDIT_CAM_NODE@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Pow_int@N@@YANNH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Pow_int@H@@YAHHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Pow_int@M@@YAMMH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Pow_int@O@@YAOOH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?__LINE__Var@?1??KillEditCamNodes@@YAXXZ@4JA
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??InitEditCamNodes@@YAXXZ@4JA
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
sxdata	SEGMENT DWORD USE32 'SXDATA'
sxdata	ENDS
FLAT	GROUP _DATA, CONST, _BSS
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBCD
INCLUDELIB OLDNAMES

PUBLIC	??_C@_0P@IKKNJPOJ@edit?2camnode?4m?$AA@		; `string'
PUBLIC	??_C@_0BC@BODDIPCE@models?2football?4m?$AA@	; `string'
PUBLIC	??_C@_03IDDGKHFD@X?5Y?$AA@			; `string'
PUBLIC	??_C@_03KIBLPEJA@X?5Z?$AA@			; `string'
PUBLIC	??_C@_03CJDPGPNI@Z?5Y?$AA@			; `string'
PUBLIC	??_C@_01MMEEDKFM@X?$AA@				; `string'
PUBLIC	??_C@_01NFFPALBN@Y?$AA@				; `string'
PUBLIC	??_C@_01POHCFINO@Z?$AA@				; `string'
PUBLIC	??_C@_06JCBBMBIP@Camera?$AA@			; `string'
PUBLIC	??_C@_05MFLOHCHP@World?$AA@			; `string'
PUBLIC	?CamNodeTypeText@@3PAPADA			; CamNodeTypeText
PUBLIC	??_C@_08JDANMAOM@Monorail?$AA@			; `string'
PUBLIC	??_C@_06KJMEDNIB@Static?$AA@			; `string'
PUBLIC	?CurrentEditCamNode@@3PAU_EDIT_CAM_NODE@@A	; CurrentEditCamNode
_BSS	SEGMENT
_LastEditCamNode DD 01H DUP (?)
?CurrentEditCamNode@@3PAU_EDIT_CAM_NODE@@A DD 01H DUP (?) ; CurrentEditCamNode
_BSS	ENDS
_DATA	SEGMENT
_MaxEditCamNodeID DD 0ffffffffH
_DATA	ENDS
;	COMDAT ??_C@_0P@IKKNJPOJ@edit?2camnode?4m?$AA@
CONST	SEGMENT
??_C@_0P@IKKNJPOJ@edit?2camnode?4m?$AA@ DB 'edit\camnode.m', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@BODDIPCE@models?2football?4m?$AA@
CONST	SEGMENT
??_C@_0BC@BODDIPCE@models?2football?4m?$AA@ DB 'models\football.m', 00H ; `string'
CONST	ENDS
_DATA	SEGMENT
_EditCamNodeModelNames DD FLAT:??_C@_0P@IKKNJPOJ@edit?2camnode?4m?$AA@
	DD	FLAT:??_C@_0BC@BODDIPCE@models?2football?4m?$AA@
_DATA	ENDS
;	COMDAT ??_C@_03IDDGKHFD@X?5Y?$AA@
CONST	SEGMENT
??_C@_03IDDGKHFD@X?5Y?$AA@ DB 'X Y', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03KIBLPEJA@X?5Z?$AA@
CONST	SEGMENT
??_C@_03KIBLPEJA@X?5Z?$AA@ DB 'X Z', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03CJDPGPNI@Z?5Y?$AA@
CONST	SEGMENT
??_C@_03CJDPGPNI@Z?5Y?$AA@ DB 'Z Y', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01MMEEDKFM@X?$AA@
CONST	SEGMENT
??_C@_01MMEEDKFM@X?$AA@ DB 'X', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01NFFPALBN@Y?$AA@
CONST	SEGMENT
??_C@_01NFFPALBN@Y?$AA@ DB 'Y', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01POHCFINO@Z?$AA@
CONST	SEGMENT
??_C@_01POHCFINO@Z?$AA@ DB 'Z', 00H			; `string'
CONST	ENDS
_DATA	SEGMENT
_EditCamNodeAxisNames DD FLAT:??_C@_03IDDGKHFD@X?5Y?$AA@
	DD	FLAT:??_C@_03KIBLPEJA@X?5Z?$AA@
	DD	FLAT:??_C@_03CJDPGPNI@Z?5Y?$AA@
	DD	FLAT:??_C@_01MMEEDKFM@X?$AA@
	DD	FLAT:??_C@_01NFFPALBN@Y?$AA@
	DD	FLAT:??_C@_01POHCFINO@Z?$AA@
_DATA	ENDS
;	COMDAT ??_C@_06JCBBMBIP@Camera?$AA@
CONST	SEGMENT
??_C@_06JCBBMBIP@Camera?$AA@ DB 'Camera', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05MFLOHCHP@World?$AA@
CONST	SEGMENT
??_C@_05MFLOHCHP@World?$AA@ DB 'World', 00H		; `string'
CONST	ENDS
_DATA	SEGMENT
_EditCamNodeAxisTypeNames DD FLAT:??_C@_06JCBBMBIP@Camera?$AA@
	DD	FLAT:??_C@_05MFLOHCHP@World?$AA@
_DATA	ENDS
;	COMDAT ??_C@_08JDANMAOM@Monorail?$AA@
CONST	SEGMENT
??_C@_08JDANMAOM@Monorail?$AA@ DB 'Monorail', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06KJMEDNIB@Static?$AA@
CONST	SEGMENT
??_C@_06KJMEDNIB@Static?$AA@ DB 'Static', 00H		; `string'
CONST	ENDS
_DATA	SEGMENT
?CamNodeTypeText@@3PAPADA DD FLAT:??_C@_08JDANMAOM@Monorail?$AA@ ; CamNodeTypeText
	DD	FLAT:??_C@_06KJMEDNIB@Static?$AA@
_DATA	ENDS
PUBLIC	?__LINE__Var@?1??InitEditCamNodes@@YAXXZ@4JA	; `InitEditCamNodes'::`2'::__LINE__Var
PUBLIC	??_C@_0IM@NNCDBPEN@c?3?2documents?5and?5settings?2jarhea@ ; `string'
PUBLIC	??_C@_0CK@JNACHPAH@Can?8t?5alloc?5memory?5for?5edit?5came@ ; `string'
PUBLIC	?InitEditCamNodes@@YAXXZ			; InitEditCamNodes
EXTRN	?DebugMalloc@@YAPAXIHPAD@Z:NEAR			; DebugMalloc
EXTRN	?Box@@YAJPAD0J@Z:NEAR				; Box
EXTRN	?QuitGame@@3DA:BYTE				; QuitGame
_BSS	SEGMENT
_EditCamNode DD	01H DUP (?)
_BSS	ENDS
;	COMDAT ??_C@_0IM@NNCDBPEN@c?3?2documents?5and?5settings?2jarhea@
; File c:\documents and settings\jarhead\desktop\shit to display my love for xbox revolt and fuck you borman-ness\revolt source\source\editcam.cpp
CONST	SEGMENT
??_C@_0IM@NNCDBPEN@c?3?2documents?5and?5settings?2jarhea@ DB 'c:\document'
	DB	's and settings\jarhead\desktop\shit to display my love for xb'
	DB	'ox revolt and fuck you borman-ness\revolt source\source\editc'
	DB	'am.cpp', 00H				; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??InitEditCamNodes@@YAXXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?1??InitEditCamNodes@@YAXXZ@4JA DD 038H	; `InitEditCamNodes'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0CK@JNACHPAH@Can?8t?5alloc?5memory?5for?5edit?5came@
CONST	SEGMENT
??_C@_0CK@JNACHPAH@Can?8t?5alloc?5memory?5for?5edit?5came@ DB 'Can''t all'
	DB	'oc memory for edit camera nodes!', 00H	; `string'
; Function compile flags: /Odt /ZI
CONST	ENDS
;	COMDAT ?InitEditCamNodes@@YAXXZ
_TEXT	SEGMENT
?InitEditCamNodes@@YAXXZ PROC NEAR			; InitEditCamNodes, COMDAT

; 56   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 57   : 	EditCamNode = (EDIT_CAM_NODE*)malloc(sizeof(EDIT_CAM_NODE) * MAX_EDIT_CAM_NODES);

	push	OFFSET FLAT:??_C@_0IM@NNCDBPEN@c?3?2documents?5and?5settings?2jarhea@
	mov	eax, DWORD PTR ?__LINE__Var@?1??InitEditCamNodes@@YAXXZ@4JA
	add	eax, 1
	push	eax
	push	28672					; 00007000H
	call	?DebugMalloc@@YAPAXIHPAD@Z		; DebugMalloc
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _EditCamNode, eax

; 58   : 	MaxEditCamNodeID = -1;

	mov	DWORD PTR _MaxEditCamNodeID, -1

; 59   : 	if (!EditCamNode)

	cmp	DWORD PTR _EditCamNode, 0
	jne	SHORT $L81254

; 60   : 	{
; 61   : 		Box(NULL, "Can't alloc memory for edit camera nodes!", MB_OK);

	push	0
	push	OFFSET FLAT:??_C@_0CK@JNACHPAH@Can?8t?5alloc?5memory?5for?5edit?5came@
	push	0
	call	?Box@@YAJPAD0J@Z			; Box
	add	esp, 12					; 0000000cH

; 62   : 		QuitGame = TRUE;

	mov	BYTE PTR ?QuitGame@@3DA, 1		; QuitGame
$L81254:

; 63   : 	}
; 64   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?InitEditCamNodes@@YAXXZ ENDP				; InitEditCamNodes
_TEXT	ENDS
PUBLIC	?__LINE__Var@?1??KillEditCamNodes@@YAXXZ@4JA	; `KillEditCamNodes'::`2'::__LINE__Var
PUBLIC	?KillEditCamNodes@@YAXXZ			; KillEditCamNodes
EXTRN	?DebugFree@@YAXPAXHPAD@Z:NEAR			; DebugFree
;	COMDAT ?__LINE__Var@?1??KillEditCamNodes@@YAXXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?1??KillEditCamNodes@@YAXXZ@4JA DD 047H	; `KillEditCamNodes'::`2'::__LINE__Var
; Function compile flags: /Odt /ZI
_DATA	ENDS
;	COMDAT ?KillEditCamNodes@@YAXXZ
_TEXT	SEGMENT
?KillEditCamNodes@@YAXXZ PROC NEAR			; KillEditCamNodes, COMDAT

; 71   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 72   : 	free(EditCamNode);

	push	OFFSET FLAT:??_C@_0IM@NNCDBPEN@c?3?2documents?5and?5settings?2jarhea@
	mov	eax, DWORD PTR ?__LINE__Var@?1??KillEditCamNodes@@YAXXZ@4JA
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _EditCamNode
	push	ecx
	call	?DebugFree@@YAXPAXHPAD@Z		; DebugFree
	add	esp, 12					; 0000000cH

; 73   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?KillEditCamNodes@@YAXXZ ENDP				; KillEditCamNodes
_TEXT	ENDS
PUBLIC	?LoadEditCamNodeModels@@YAXXZ			; LoadEditCamNodeModels
EXTRN	?LoadModel@@YAJPADPAUMODEL@@DDDJ@Z:NEAR		; LoadModel
_BSS	SEGMENT
_EditCamNodeModel DB 078H DUP (?)
; Function compile flags: /Odt /ZI
_BSS	ENDS
;	COMDAT ?LoadEditCamNodeModels@@YAXXZ
_TEXT	SEGMENT
_iModel$ = -4						; size = 4
?LoadEditCamNodeModels@@YAXXZ PROC NEAR			; LoadEditCamNodeModels, COMDAT

; 80   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 81   : 	int iModel;
; 82   : 
; 83   : 	for (iModel = 0; iModel < CAMNODE_NTYPES; iModel++) {

	mov	DWORD PTR _iModel$[ebp], 0
	jmp	SHORT $L81269
$L81270:
	mov	eax, DWORD PTR _iModel$[ebp]
	add	eax, 1
	mov	DWORD PTR _iModel$[ebp], eax
$L81269:
	cmp	DWORD PTR _iModel$[ebp], 2
	jge	SHORT $L81267

; 84   : 		LoadModel(EditCamNodeModelNames[iModel], &EditCamNodeModel[iModel], -1, 1, LOADMODEL_FORCE_TPAGE, 100);

	push	100					; 00000064H
	push	1
	push	1
	push	-1
	mov	eax, DWORD PTR _iModel$[ebp]
	imul	eax, 60					; 0000003cH
	add	eax, OFFSET FLAT:_EditCamNodeModel
	push	eax
	mov	ecx, DWORD PTR _iModel$[ebp]
	mov	edx, DWORD PTR _EditCamNodeModelNames[ecx*4]
	push	edx
	call	?LoadModel@@YAJPADPAUMODEL@@DDDJ@Z	; LoadModel
	add	esp, 24					; 00000018H

; 85   : 	}

	jmp	SHORT $L81270
$L81267:

; 86   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?LoadEditCamNodeModels@@YAXXZ ENDP			; LoadEditCamNodeModels
_TEXT	ENDS
PUBLIC	?FreeEditCamNodeModels@@YAXXZ			; FreeEditCamNodeModels
EXTRN	?FreeModel@@YAXPAUMODEL@@J@Z:NEAR		; FreeModel
; Function compile flags: /Odt /ZI
;	COMDAT ?FreeEditCamNodeModels@@YAXXZ
_TEXT	SEGMENT
_iModel$ = -4						; size = 4
?FreeEditCamNodeModels@@YAXXZ PROC NEAR			; FreeEditCamNodeModels, COMDAT

; 93   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 94   : 	int iModel;
; 95   : 
; 96   : 	for (iModel = 0; iModel < CAMNODE_NTYPES; iModel++) {

	mov	DWORD PTR _iModel$[ebp], 0
	jmp	SHORT $L81276
$L81277:
	mov	eax, DWORD PTR _iModel$[ebp]
	add	eax, 1
	mov	DWORD PTR _iModel$[ebp], eax
$L81276:
	cmp	DWORD PTR _iModel$[ebp], 2
	jge	SHORT $L81274

; 97   : 		FreeModel(&EditCamNodeModel[iModel], 1);

	push	1
	mov	eax, DWORD PTR _iModel$[ebp]
	imul	eax, 60					; 0000003cH
	add	eax, OFFSET FLAT:_EditCamNodeModel
	push	eax
	call	?FreeModel@@YAXPAUMODEL@@J@Z		; FreeModel
	add	esp, 8

; 98   : 	}

	jmp	SHORT $L81277
$L81274:

; 99   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?FreeEditCamNodeModels@@YAXXZ ENDP			; FreeEditCamNodeModels
_TEXT	ENDS
PUBLIC	??_C@_02JDPG@rb?$AA@				; `string'
PUBLIC	??_C@_02GMLFBBN@wb?$AA@				; `string'
PUBLIC	__real@47800000
PUBLIC	?LoadEditCamNodes@@YAXPAD@Z			; LoadEditCamNodes
EXTRN	_fclose:NEAR
EXTRN	_fopen:NEAR
EXTRN	_fread:NEAR
EXTRN	_fwrite:NEAR
EXTRN	__ftol2:NEAR
EXTRN	__fltused:NEAR
EXTRN	?EditScale@@3MA:DWORD				; EditScale
_BSS	SEGMENT
_EditCamNodeNum DD 01H DUP (?)
_BSS	ENDS
;	COMDAT ??_C@_02JDPG@rb?$AA@
CONST	SEGMENT
??_C@_02JDPG@rb?$AA@ DB 'rb', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02GMLFBBN@wb?$AA@
CONST	SEGMENT
??_C@_02GMLFBBN@wb?$AA@ DB 'wb', 00H			; `string'
CONST	ENDS
;	COMDAT __real@47800000
CONST	SEGMENT
__real@47800000 DD 047800000r			; 65536
; Function compile flags: /Odt /ZI
CONST	ENDS
;	COMDAT ?LoadEditCamNodes@@YAXPAD@Z
_TEXT	SEGMENT
tv179 = -112						; size = 4
_fnode$ = -44						; size = 36
_fp$ = -8						; size = 4
_i$ = -4						; size = 4
_file$ = 8						; size = 4
?LoadEditCamNodes@@YAXPAD@Z PROC NEAR			; LoadEditCamNodes, COMDAT

; 106  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 112				; 00000070H
	push	ebx
	push	esi
	push	edi

; 107  : 	long i;
; 108  : 	FILE *fp;
; 109  : 	FILE_CAM_NODE fnode;
; 110  : 
; 111  : // open cam node file
; 112  : 
; 113  : 	fp = fopen(file, "rb");

	push	OFFSET FLAT:??_C@_02JDPG@rb?$AA@
	mov	eax, DWORD PTR _file$[ebp]
	push	eax
	call	_fopen
	add	esp, 8
	mov	DWORD PTR _fp$[ebp], eax

; 114  : 
; 115  : // if not there create empty one
; 116  : 
; 117  : 	if (!fp)

	cmp	DWORD PTR _fp$[ebp], 0
	jne	SHORT $L81286

; 118  : 	{
; 119  : 		fp = fopen(file, "wb");

	push	OFFSET FLAT:??_C@_02GMLFBBN@wb?$AA@
	mov	eax, DWORD PTR _file$[ebp]
	push	eax
	call	_fopen
	add	esp, 8
	mov	DWORD PTR _fp$[ebp], eax

; 120  : 		if (!fp) return;

	cmp	DWORD PTR _fp$[ebp], 0
	jne	SHORT $L81288
	jmp	$L81281
$L81288:

; 121  : 		i = 0;

	mov	DWORD PTR _i$[ebp], 0

; 122  : 		fwrite(&i, sizeof(i), 1, fp);

	mov	eax, DWORD PTR _fp$[ebp]
	push	eax
	push	1
	push	4
	lea	ecx, DWORD PTR _i$[ebp]
	push	ecx
	call	_fwrite
	add	esp, 16					; 00000010H

; 123  : 		fclose(fp);

	mov	eax, DWORD PTR _fp$[ebp]
	push	eax
	call	_fclose
	add	esp, 4

; 124  : 		fp = fopen(file, "rb");

	push	OFFSET FLAT:??_C@_02JDPG@rb?$AA@
	mov	eax, DWORD PTR _file$[ebp]
	push	eax
	call	_fopen
	add	esp, 8
	mov	DWORD PTR _fp$[ebp], eax

; 125  : 		if (!fp) return;

	cmp	DWORD PTR _fp$[ebp], 0
	jne	SHORT $L81286
	jmp	$L81281
$L81286:

; 126  : 	}
; 127  : 
; 128  : // loop thru all cam nodes
; 129  : 
; 130  : 	fread(&EditCamNodeNum, sizeof(EditCamNodeNum), 1, fp);

	mov	eax, DWORD PTR _fp$[ebp]
	push	eax
	push	1
	push	4
	push	OFFSET FLAT:_EditCamNodeNum
	call	_fread
	add	esp, 16					; 00000010H

; 131  : 
; 132  : 	for (i = 0 ; i < EditCamNodeNum ; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $L81290
$L81291:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$L81290:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _EditCamNodeNum
	jge	$L81292

; 133  : 	{
; 134  : 
; 135  : // load one file cam node
; 136  : 
; 137  : 		fread(&fnode, sizeof(fnode), 1, fp);

	mov	eax, DWORD PTR _fp$[ebp]
	push	eax
	push	1
	push	36					; 00000024H
	lea	ecx, DWORD PTR _fnode$[ebp]
	push	ecx
	call	_fread
	add	esp, 16					; 00000010H

; 138  : 
; 139  : 		fnode.x = (long)((float)fnode.x * EditScale);

	fild	DWORD PTR _fnode$[ebp+4]
	fmul	DWORD PTR ?EditScale@@3MA		; EditScale
	call	__ftol2
	mov	DWORD PTR _fnode$[ebp+4], eax

; 140  : 		fnode.y = (long)((float)fnode.y * EditScale);

	fild	DWORD PTR _fnode$[ebp+8]
	fmul	DWORD PTR ?EditScale@@3MA		; EditScale
	call	__ftol2
	mov	DWORD PTR _fnode$[ebp+8], eax

; 141  : 		fnode.z = (long)((float)fnode.z * EditScale);

	fild	DWORD PTR _fnode$[ebp+12]
	fmul	DWORD PTR ?EditScale@@3MA		; EditScale
	call	__ftol2
	mov	DWORD PTR _fnode$[ebp+12], eax

; 142  : 
; 143  : // setup edit cam node
; 144  : 
; 145  : 		EditCamNode[i].Type = fnode.Type;

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 28					; 0000001cH
	mov	ecx, DWORD PTR _EditCamNode
	mov	edx, DWORD PTR _fnode$[ebp]
	mov	DWORD PTR [ecx+eax], edx

; 146  : 		EditCamNode[i].ZoomFactor = fnode.ZoomFactor;

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 28					; 0000001cH
	mov	ecx, DWORD PTR _EditCamNode
	mov	edx, DWORD PTR _fnode$[ebp+16]
	mov	DWORD PTR [ecx+eax+4], edx

; 147  : 
; 148  : 		EditCamNode[i].Pos.v[X] = (float)fnode.x / 65536;

	fild	DWORD PTR _fnode$[ebp+4]
	fdiv	DWORD PTR __real@47800000
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 28					; 0000001cH
	mov	ecx, DWORD PTR _EditCamNode
	fstp	DWORD PTR [ecx+eax+8]

; 149  : 		EditCamNode[i].Pos.v[Y] = (float)fnode.y / 65536;

	fild	DWORD PTR _fnode$[ebp+8]
	fdiv	DWORD PTR __real@47800000
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 28					; 0000001cH
	mov	ecx, DWORD PTR _EditCamNode
	fstp	DWORD PTR [ecx+eax+12]

; 150  : 		EditCamNode[i].Pos.v[Z] = (float)fnode.z / 65536;

	fild	DWORD PTR _fnode$[ebp+12]
	fdiv	DWORD PTR __real@47800000
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 28					; 0000001cH
	mov	ecx, DWORD PTR _EditCamNode
	fstp	DWORD PTR [ecx+eax+16]

; 151  : 
; 152  : 		if (fnode.Link != -1)

	cmp	DWORD PTR _fnode$[ebp+20], -1
	je	SHORT $L81302

; 153  : 		{
; 154  : 			EditCamNode[i].Link = &EditCamNode[fnode.Link];

	mov	eax, DWORD PTR _fnode$[ebp+20]
	imul	eax, 28					; 0000001cH
	add	eax, DWORD PTR _EditCamNode
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 28					; 0000001cH
	mov	edx, DWORD PTR _EditCamNode
	mov	DWORD PTR [edx+ecx+20], eax

; 155  : 		}
; 156  : 		else 

	jmp	SHORT $L81303
$L81302:

; 157  : 		{
; 158  : 			EditCamNode[i].Link = NULL;

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 28					; 0000001cH
	mov	ecx, DWORD PTR _EditCamNode
	mov	DWORD PTR [ecx+eax+20], 0
$L81303:

; 159  : 		}
; 160  : 
; 161  : 		if (fnode.ID == -1) {

	cmp	DWORD PTR _fnode$[ebp+32], -1
	jne	SHORT $L81304

; 162  : 			EditCamNode[i].ID = ++MaxEditCamNodeID;

	mov	eax, DWORD PTR _MaxEditCamNodeID
	add	eax, 1
	mov	DWORD PTR _MaxEditCamNodeID, eax
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 28					; 0000001cH
	mov	edx, DWORD PTR _EditCamNode
	mov	eax, DWORD PTR _MaxEditCamNodeID
	mov	DWORD PTR [edx+ecx+24], eax

; 163  : 		} else {

	jmp	SHORT $L81305
$L81304:

; 164  : 			EditCamNode[i].ID = fnode.ID;

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 28					; 0000001cH
	mov	ecx, DWORD PTR _EditCamNode
	mov	edx, DWORD PTR _fnode$[ebp+32]
	mov	DWORD PTR [ecx+eax+24], edx

; 165  : 			MaxEditCamNodeID = Max(MaxEditCamNodeID, fnode.ID);

	mov	eax, DWORD PTR _MaxEditCamNodeID
	cmp	eax, DWORD PTR _fnode$[ebp+32]
	jle	SHORT $L81593
	mov	ecx, DWORD PTR _MaxEditCamNodeID
	mov	DWORD PTR tv179[ebp], ecx
	jmp	SHORT $L81594
$L81593:
	mov	edx, DWORD PTR _fnode$[ebp+32]
	mov	DWORD PTR tv179[ebp], edx
$L81594:
	mov	eax, DWORD PTR tv179[ebp]
	mov	DWORD PTR _MaxEditCamNodeID, eax
$L81305:

; 166  : 		}
; 167  : 	}

	jmp	$L81291
$L81292:

; 168  : 
; 169  : // close node file
; 170  : 
; 171  : 	fclose(fp);

	mov	eax, DWORD PTR _fp$[ebp]
	push	eax
	call	_fclose
	add	esp, 4
$L81281:

; 172  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?LoadEditCamNodes@@YAXPAD@Z ENDP			; LoadEditCamNodes
_TEXT	ENDS
PUBLIC	??_C@_03JOBHIDPG@ca?9?$AA@			; `string'
PUBLIC	??_C@_0BI@KKIDBBPE@Saved?5camera?5node?5File?3?$AA@ ; `string'
PUBLIC	?SaveEditCamNodes@@YAXPAD@Z			; SaveEditCamNodes
EXTRN	_remove:NEAR
EXTRN	_rename:NEAR
EXTRN	_memcpy:NEAR
EXTRN	_strlen:NEAR
EXTRN	__imp__wsprintfA:NEAR
;	COMDAT ??_C@_03JOBHIDPG@ca?9?$AA@
CONST	SEGMENT
??_C@_03JOBHIDPG@ca?9?$AA@ DB 'ca-', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@KKIDBBPE@Saved?5camera?5node?5File?3?$AA@
CONST	SEGMENT
??_C@_0BI@KKIDBBPE@Saved?5camera?5node?5File?3?$AA@ DB 'Saved camera node'
	DB	' File:', 00H				; `string'
; Function compile flags: /Odt /ZI
CONST	ENDS
;	COMDAT ?SaveEditCamNodes@@YAXPAD@Z
_TEXT	SEGMENT
_bak$ = -300						; size = 256
_fnode$ = -44						; size = 36
_fp$ = -8						; size = 4
_i$ = -4						; size = 4
_file$ = 8						; size = 4
?SaveEditCamNodes@@YAXPAD@Z PROC NEAR			; SaveEditCamNodes, COMDAT

; 179  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 364				; 0000016cH
	push	ebx
	push	esi
	push	edi

; 180  : 	long i;
; 181  : 	FILE *fp;
; 182  : 	FILE_CAM_NODE fnode;
; 183  : 	char bak[256];
; 184  : 
; 185  : // backup old file
; 186  : 
; 187  : 	memcpy(bak, file, strlen(file) - 3);

	mov	eax, DWORD PTR _file$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	sub	eax, 3
	push	eax
	mov	ecx, DWORD PTR _file$[ebp]
	push	ecx
	lea	edx, DWORD PTR _bak$[ebp]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 188  : 	wsprintf(bak + strlen(file) - 3, "ca-");

	push	OFFSET FLAT:??_C@_03JOBHIDPG@ca?9?$AA@
	mov	eax, DWORD PTR _file$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	lea	ecx, DWORD PTR _bak$[ebp+eax-3]
	push	ecx
	call	DWORD PTR __imp__wsprintfA
	add	esp, 8

; 189  : 	remove(bak);

	lea	eax, DWORD PTR _bak$[ebp]
	push	eax
	call	_remove
	add	esp, 4

; 190  : 	rename(file, bak);

	lea	eax, DWORD PTR _bak$[ebp]
	push	eax
	mov	ecx, DWORD PTR _file$[ebp]
	push	ecx
	call	_rename
	add	esp, 8

; 191  : 
; 192  : // open node file
; 193  : 
; 194  : 	fp = fopen(file, "wb");

	push	OFFSET FLAT:??_C@_02GMLFBBN@wb?$AA@
	mov	eax, DWORD PTR _file$[ebp]
	push	eax
	call	_fopen
	add	esp, 8
	mov	DWORD PTR _fp$[ebp], eax

; 195  : 	if (!fp) return;

	cmp	DWORD PTR _fp$[ebp], 0
	jne	SHORT $L81314
	jmp	$L81308
$L81314:

; 196  : 
; 197  : // write num
; 198  : 
; 199  : 	fwrite(&EditCamNodeNum, sizeof(EditCamNodeNum), 1, fp);

	mov	eax, DWORD PTR _fp$[ebp]
	push	eax
	push	1
	push	4
	push	OFFSET FLAT:_EditCamNodeNum
	call	_fwrite
	add	esp, 16					; 00000010H

; 200  : 
; 201  : // write out each cam node
; 202  : 
; 203  : 	for (i = 0 ; i < EditCamNodeNum ; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $L81315
$L81316:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$L81315:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _EditCamNodeNum
	jge	$L81317

; 204  : 	{
; 205  : 
; 206  : // set file cam node
; 207  : 
; 208  : 		fnode.Type = EditCamNode[i].Type;

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 28					; 0000001cH
	mov	ecx, DWORD PTR _EditCamNode
	mov	edx, DWORD PTR [ecx+eax]
	mov	DWORD PTR _fnode$[ebp], edx

; 209  : 		fnode.ZoomFactor = EditCamNode[i].ZoomFactor;

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 28					; 0000001cH
	mov	ecx, DWORD PTR _EditCamNode
	mov	edx, DWORD PTR [ecx+eax+4]
	mov	DWORD PTR _fnode$[ebp+16], edx

; 210  : 
; 211  : 		fnode.x = (long)(EditCamNode[i].Pos.v[X] * 65536);

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 28					; 0000001cH
	mov	ecx, DWORD PTR _EditCamNode
	fld	DWORD PTR [ecx+eax+8]
	fmul	DWORD PTR __real@47800000
	call	__ftol2
	mov	DWORD PTR _fnode$[ebp+4], eax

; 212  : 		fnode.y = (long)(EditCamNode[i].Pos.v[Y] * 65536);

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 28					; 0000001cH
	mov	ecx, DWORD PTR _EditCamNode
	fld	DWORD PTR [ecx+eax+12]
	fmul	DWORD PTR __real@47800000
	call	__ftol2
	mov	DWORD PTR _fnode$[ebp+8], eax

; 213  : 		fnode.z = (long)(EditCamNode[i].Pos.v[Z] * 65536);

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 28					; 0000001cH
	mov	ecx, DWORD PTR _EditCamNode
	fld	DWORD PTR [ecx+eax+16]
	fmul	DWORD PTR __real@47800000
	call	__ftol2
	mov	DWORD PTR _fnode$[ebp+12], eax

; 214  : 
; 215  : 		if (EditCamNode[i].Link)

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 28					; 0000001cH
	mov	ecx, DWORD PTR _EditCamNode
	cmp	DWORD PTR [ecx+eax+20], 0
	je	SHORT $L81321

; 216  : 		{
; 217  : 			fnode.Link = (long)(EditCamNode[i].Link - EditCamNode);

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 28					; 0000001cH
	mov	ecx, DWORD PTR _EditCamNode
	mov	eax, DWORD PTR [ecx+eax+20]
	sub	eax, DWORD PTR _EditCamNode
	cdq
	mov	ecx, 28					; 0000001cH
	idiv	ecx
	mov	DWORD PTR _fnode$[ebp+20], eax

; 218  : 		}
; 219  : 		else

	jmp	SHORT $L81323
$L81321:

; 220  : 		{
; 221  : 			fnode.Link = -1;

	mov	DWORD PTR _fnode$[ebp+20], -1
$L81323:

; 222  : 		}
; 223  : 
; 224  : 		fnode.ID = EditCamNode[i].ID;

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 28					; 0000001cH
	mov	ecx, DWORD PTR _EditCamNode
	mov	edx, DWORD PTR [ecx+eax+24]
	mov	DWORD PTR _fnode$[ebp+32], edx

; 225  : 
; 226  : // write it
; 227  : 
; 228  : 		fwrite(&fnode, sizeof(fnode), 1, fp);

	mov	eax, DWORD PTR _fp$[ebp]
	push	eax
	push	1
	push	36					; 00000024H
	lea	ecx, DWORD PTR _fnode$[ebp]
	push	ecx
	call	_fwrite
	add	esp, 16					; 00000010H

; 229  : 	}

	jmp	$L81316
$L81317:

; 230  : 
; 231  : // close file
; 232  : 
; 233  : 	Box("Saved camera node File:", file, MB_OK);

	push	0
	mov	eax, DWORD PTR _file$[ebp]
	push	eax
	push	OFFSET FLAT:??_C@_0BI@KKIDBBPE@Saved?5camera?5node?5File?3?$AA@
	call	?Box@@YAJPAD0J@Z			; Box
	add	esp, 12					; 0000000cH

; 234  : 	fclose(fp);

	mov	eax, DWORD PTR _fp$[ebp]
	push	eax
	call	_fclose
	add	esp, 4
$L81308:

; 235  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?SaveEditCamNodes@@YAXPAD@Z ENDP			; SaveEditCamNodes
_TEXT	ENDS
PUBLIC	??_C@_02DPKJAMEF@?$CFd?$AA@			; `string'
PUBLIC	__real@40800000
PUBLIC	__real@42400000
PUBLIC	?DrawEditCamNodes@@YAXXZ			; DrawEditCamNodes
EXTRN	?DrawAxis@@YAXPATMatrixUnion@@PAUVectorStruct@@@Z:NEAR ; DrawAxis
EXTRN	?DrawLine@@YAXPAUVectorStruct@@0JJ@Z:NEAR	; DrawLine
EXTRN	?ViewMatrix@@3TMatrixUnion@@A:BYTE		; ViewMatrix
EXTRN	?ViewTrans@@3UVectorStruct@@A:BYTE		; ViewTrans
EXTRN	?CAM_MainCamera@@3PAUCameraStruct@@A:DWORD	; CAM_MainCamera
EXTRN	?DrawModel@@YAXPAUMODEL@@PATMatrixUnion@@PAUVectorStruct@@F@Z:NEAR ; DrawModel
EXTRN	?RotTransVector@@YAXPATMatrixUnion@@PAUVectorStruct@@11@Z:NEAR ; RotTransVector
EXTRN	?FrameCount@@3KA:DWORD				; FrameCount
EXTRN	?RenderSettings@@3URENDER_SETTINGS@@A:BYTE	; RenderSettings
EXTRN	?IdentityMatrix@@3TMatrixUnion@@A:BYTE		; IdentityMatrix
EXTRN	?DumpText3D@@YAXPAUVectorStruct@@MMJPAD@Z:NEAR	; DumpText3D
_BSS	SEGMENT
_EditCamNodeAxisType DD 01H DUP (?)
_BSS	ENDS
;	COMDAT ??_C@_02DPKJAMEF@?$CFd?$AA@
CONST	SEGMENT
??_C@_02DPKJAMEF@?$CFd?$AA@ DB '%d', 00H		; `string'
CONST	ENDS
;	COMDAT __real@40800000
CONST	SEGMENT
__real@40800000 DD 040800000r			; 4
CONST	ENDS
;	COMDAT __real@42400000
CONST	SEGMENT
__real@42400000 DD 042400000r			; 48
; Function compile flags: /Odt /ZI
CONST	ENDS
;	COMDAT ?DrawEditCamNodes@@YAXXZ
_TEXT	SEGMENT
tv183 = -220						; size = 8
_node$ = -148						; size = 4
_buf$ = -144						; size = 128
_pos$ = -16						; size = 12
_i$ = -4						; size = 4
?DrawEditCamNodes@@YAXXZ PROC NEAR			; DrawEditCamNodes, COMDAT

; 242  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi

; 243  : 	long i;
; 244  : 	VEC pos;
; 245  : 	char buf[128];
; 246  : 	EDIT_CAM_NODE *node;
; 247  : 
; 248  : // loop thru all nodes
; 249  : 
; 250  : 	node = EditCamNode;

	mov	eax, DWORD PTR _EditCamNode
	mov	DWORD PTR _node$[ebp], eax

; 251  : 	for (i = 0 ; i < EditCamNodeNum ; i++, node++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $L81333
$L81334:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	mov	ecx, DWORD PTR _node$[ebp]
	add	ecx, 28					; 0000001cH
	mov	DWORD PTR _node$[ebp], ecx
$L81333:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _EditCamNodeNum
	jge	$L81328

; 252  : 	{
; 253  : 
; 254  : // draw it
; 255  : 
; 256  : 		if (LastEditCamNode != &EditCamNode[i] || (FrameCount & 4))

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 28					; 0000001cH
	add	eax, DWORD PTR _EditCamNode
	cmp	DWORD PTR _LastEditCamNode, eax
	jne	SHORT $L81337
	mov	eax, DWORD PTR ?FrameCount@@3KA		; FrameCount
	and	eax, 4
	je	SHORT $L81336
$L81337:

; 257  : 			DrawModel(&EditCamNodeModel[node->Type], &IdentityMatrix, &node->Pos, MODEL_PLAIN);

	push	0
	mov	eax, DWORD PTR _node$[ebp]
	add	eax, 8
	push	eax
	push	OFFSET FLAT:?IdentityMatrix@@3TMatrixUnion@@A ; IdentityMatrix
	mov	ecx, DWORD PTR _node$[ebp]
	mov	edx, DWORD PTR [ecx]
	imul	edx, 60					; 0000003cH
	add	edx, OFFSET FLAT:_EditCamNodeModel
	push	edx
	call	?DrawModel@@YAXPAUMODEL@@PATMatrixUnion@@PAUVectorStruct@@F@Z ; DrawModel
	add	esp, 16					; 00000010H
$L81336:

; 258  : 
; 259  : // draw links?
; 260  : 
; 261  : 		if (node->Link)

	mov	eax, DWORD PTR _node$[ebp]
	cmp	DWORD PTR [eax+20], 0
	je	SHORT $L81338

; 262  : 		{
; 263  : 			DrawLine(&node->Pos, &node->Link->Pos, 0xffff00, 0xffff00);

	push	16776960				; 00ffff00H
	push	16776960				; 00ffff00H
	mov	eax, DWORD PTR _node$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 8
	push	ecx
	mov	edx, DWORD PTR _node$[ebp]
	add	edx, 8
	push	edx
	call	?DrawLine@@YAXPAUVectorStruct@@0JJ@Z	; DrawLine
	add	esp, 16					; 00000010H
$L81338:

; 264  : 		}
; 265  : 
; 266  : // draw 'current' axis?
; 267  : 
; 268  : 		if (CurrentEditCamNode == node)

	mov	eax, DWORD PTR ?CurrentEditCamNode@@3PAU_EDIT_CAM_NODE@@A ; CurrentEditCamNode
	cmp	eax, DWORD PTR _node$[ebp]
	jne	SHORT $L81339

; 269  : 		{
; 270  : 			if (EditCamNodeAxisType)

	cmp	DWORD PTR _EditCamNodeAxisType, 0
	je	SHORT $L81340

; 271  : 				DrawAxis(&IdentityMatrix, &node->Pos);

	mov	eax, DWORD PTR _node$[ebp]
	add	eax, 8
	push	eax
	push	OFFSET FLAT:?IdentityMatrix@@3TMatrixUnion@@A ; IdentityMatrix
	call	?DrawAxis@@YAXPATMatrixUnion@@PAUVectorStruct@@@Z ; DrawAxis
	add	esp, 8

; 272  : 			else

	jmp	SHORT $L81339
$L81340:

; 273  : 				DrawAxis(&CAM_MainCamera->WMatrix, &node->Pos);

	mov	eax, DWORD PTR _node$[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	add	ecx, 16					; 00000010H
	push	ecx
	call	?DrawAxis@@YAXPATMatrixUnion@@PAUVectorStruct@@@Z ; DrawAxis
	add	esp, 8
$L81339:

; 274  : 		}
; 275  : 
; 276  : // draw ID
; 277  : 
; 278  : 		wsprintf(buf, "%d", EditCamNode[i].ID);

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 28					; 0000001cH
	mov	ecx, DWORD PTR _EditCamNode
	mov	edx, DWORD PTR [ecx+eax+24]
	push	edx
	push	OFFSET FLAT:??_C@_02DPKJAMEF@?$CFd?$AA@
	lea	eax, DWORD PTR _buf$[ebp]
	push	eax
	call	DWORD PTR __imp__wsprintfA
	add	esp, 12					; 0000000cH

; 279  : 		RotTransVector(&ViewMatrix, &ViewTrans, &EditCamNode[i].Pos, &pos);

	lea	eax, DWORD PTR _pos$[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 28					; 0000001cH
	mov	edx, DWORD PTR _EditCamNode
	lea	eax, DWORD PTR [edx+ecx+8]
	push	eax
	push	OFFSET FLAT:?ViewTrans@@3UVectorStruct@@A ; ViewTrans
	push	OFFSET FLAT:?ViewMatrix@@3TMatrixUnion@@A ; ViewMatrix
	call	?RotTransVector@@YAXPATMatrixUnion@@PAUVectorStruct@@11@Z ; RotTransVector
	add	esp, 16					; 00000010H

; 280  : 		pos.v[X] -= strlen(buf) * 4.0f;

	lea	eax, DWORD PTR _buf$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	mov	DWORD PTR tv183[ebp], eax
	mov	DWORD PTR tv183[ebp+4], 0
	fild	QWORD PTR tv183[ebp]
	fmul	DWORD PTR __real@40800000
	fsubr	DWORD PTR _pos$[ebp]
	fstp	DWORD PTR _pos$[ebp]

; 281  : 		pos.v[Y] -= 48.0f;

	fld	DWORD PTR _pos$[ebp+4]
	fsub	DWORD PTR __real@42400000
	fstp	DWORD PTR _pos$[ebp+4]

; 282  : 
; 283  : 		if (pos.v[Z] > RenderSettings.NearClip)

	fld	DWORD PTR _pos$[ebp+8]
	fcomp	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+28
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $L81343

; 284  : 			DumpText3D(&pos, 8, 16, 0xffff00, buf);

	lea	eax, DWORD PTR _buf$[ebp]
	push	eax
	push	16776960				; 00ffff00H
	push	1098907648				; 41800000H
	push	1090519040				; 41000000H
	lea	ecx, DWORD PTR _pos$[ebp]
	push	ecx
	call	?DumpText3D@@YAXPAUVectorStruct@@MMJPAD@Z ; DumpText3D
	add	esp, 20					; 00000014H
$L81343:

; 285  : 
; 286  : 	}

	jmp	$L81334
$L81328:

; 287  : 
; 288  : // draw nearest node pos
; 289  : //	DrawModel(&EditCamNodeModel[1], &IdentityMatrix, &CAM_NodeCamPos, MODEL_PLAIN);
; 290  : 
; 291  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?DrawEditCamNodes@@YAXXZ ENDP				; DrawEditCamNodes
_TEXT	ENDS
PUBLIC	??_C@_07PCBHLMKO@Type?5?$CFs?$AA@		; `string'
PUBLIC	??_C@_07CEOAHIHB@Zoom?5?$CFd?$AA@		; `string'
PUBLIC	??_C@_0N@MOINFLNL@Axis?5?$CFs?5?9?5?$CFs?$AA@	; `string'
PUBLIC	??_C@_0O@ENFFANGC@Pos?5?5?$CFd?5?$CFd?5?$CFd?$AA@ ; `string'
PUBLIC	??_C@_07EFADAHJO@ID?5?5?5?$CFd?$AA@		; `string'
PUBLIC	?DisplayCamNodeInfo@@YAXPAU_EDIT_CAM_NODE@@@Z	; DisplayCamNodeInfo
EXTRN	?DumpText@@YAXFFFFJPAD@Z:NEAR			; DumpText
_BSS	SEGMENT
_EditCamNodeAxis DD 01H DUP (?)
_BSS	ENDS
;	COMDAT ??_C@_07PCBHLMKO@Type?5?$CFs?$AA@
CONST	SEGMENT
??_C@_07PCBHLMKO@Type?5?$CFs?$AA@ DB 'Type %s', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07CEOAHIHB@Zoom?5?$CFd?$AA@
CONST	SEGMENT
??_C@_07CEOAHIHB@Zoom?5?$CFd?$AA@ DB 'Zoom %d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@MOINFLNL@Axis?5?$CFs?5?9?5?$CFs?$AA@
CONST	SEGMENT
??_C@_0N@MOINFLNL@Axis?5?$CFs?5?9?5?$CFs?$AA@ DB 'Axis %s - %s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@ENFFANGC@Pos?5?5?$CFd?5?$CFd?5?$CFd?$AA@
CONST	SEGMENT
??_C@_0O@ENFFANGC@Pos?5?5?$CFd?5?$CFd?5?$CFd?$AA@ DB 'Pos  %d %d %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07EFADAHJO@ID?5?5?5?$CFd?$AA@
CONST	SEGMENT
??_C@_07EFADAHJO@ID?5?5?5?$CFd?$AA@ DB 'ID   %d', 00H	; `string'
; Function compile flags: /Odt /ZI
CONST	ENDS
;	COMDAT ?DisplayCamNodeInfo@@YAXPAU_EDIT_CAM_NODE@@@Z
_TEXT	SEGMENT
_buf$ = -128						; size = 128
_node$ = 8						; size = 4
?DisplayCamNodeInfo@@YAXPAU_EDIT_CAM_NODE@@@Z PROC NEAR	; DisplayCamNodeInfo, COMDAT

; 298  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi

; 299  : 	char buf[128];
; 300  : 
; 301  : // type
; 302  : 
; 303  : 	wsprintf(buf, "Type %s", CamNodeTypeText[node->Type]);

	mov	eax, DWORD PTR _node$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?CamNodeTypeText@@3PAPADA[ecx*4]
	push	edx
	push	OFFSET FLAT:??_C@_07PCBHLMKO@Type?5?$CFs?$AA@
	lea	eax, DWORD PTR _buf$[ebp]
	push	eax
	call	DWORD PTR __imp__wsprintfA
	add	esp, 12					; 0000000cH

; 304  : 	DumpText(450, 0, 8, 16, 0xff0000, buf);

	lea	eax, DWORD PTR _buf$[ebp]
	push	eax
	push	16711680				; 00ff0000H
	push	16					; 00000010H
	push	8
	push	0
	push	450					; 000001c2H
	call	?DumpText@@YAXFFFFJPAD@Z		; DumpText
	add	esp, 24					; 00000018H

; 305  : 
; 306  : // flag
; 307  : 
; 308  : 	wsprintf(buf, "Zoom %d", node->ZoomFactor);

	mov	eax, DWORD PTR _node$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	push	OFFSET FLAT:??_C@_07CEOAHIHB@Zoom?5?$CFd?$AA@
	lea	edx, DWORD PTR _buf$[ebp]
	push	edx
	call	DWORD PTR __imp__wsprintfA
	add	esp, 12					; 0000000cH

; 309  : 	DumpText(450, 24, 8, 16, 0x00ff00, buf);

	lea	eax, DWORD PTR _buf$[ebp]
	push	eax
	push	65280					; 0000ff00H
	push	16					; 00000010H
	push	8
	push	24					; 00000018H
	push	450					; 000001c2H
	call	?DumpText@@YAXFFFFJPAD@Z		; DumpText
	add	esp, 24					; 00000018H

; 310  : 
; 311  : // axis
; 312  : 
; 313  : 	wsprintf(buf, "Axis %s - %s", EditCamNodeAxisNames[EditCamNodeAxis], EditCamNodeAxisTypeNames[EditCamNodeAxisType]);

	mov	eax, DWORD PTR _EditCamNodeAxisType
	mov	ecx, DWORD PTR _EditCamNodeAxisTypeNames[eax*4]
	push	ecx
	mov	edx, DWORD PTR _EditCamNodeAxis
	mov	eax, DWORD PTR _EditCamNodeAxisNames[edx*4]
	push	eax
	push	OFFSET FLAT:??_C@_0N@MOINFLNL@Axis?5?$CFs?5?9?5?$CFs?$AA@
	lea	ecx, DWORD PTR _buf$[ebp]
	push	ecx
	call	DWORD PTR __imp__wsprintfA
	add	esp, 16					; 00000010H

; 314  : 	DumpText(450, 48, 8, 16, 0x0000ff, buf);

	lea	eax, DWORD PTR _buf$[ebp]
	push	eax
	push	255					; 000000ffH
	push	16					; 00000010H
	push	8
	push	48					; 00000030H
	push	450					; 000001c2H
	call	?DumpText@@YAXFFFFJPAD@Z		; DumpText
	add	esp, 24					; 00000018H

; 315  : 
; 316  : // pos
; 317  : 
; 318  : 	wsprintf(buf, "Pos  %d %d %d", (long)node->Pos.v[X],	(long)node->Pos.v[Y], (long)node->Pos.v[Z]);

	mov	eax, DWORD PTR _node$[ebp]
	fld	DWORD PTR [eax+16]
	call	__ftol2
	push	eax
	mov	ecx, DWORD PTR _node$[ebp]
	fld	DWORD PTR [ecx+12]
	call	__ftol2
	push	eax
	mov	edx, DWORD PTR _node$[ebp]
	fld	DWORD PTR [edx+8]
	call	__ftol2
	push	eax
	push	OFFSET FLAT:??_C@_0O@ENFFANGC@Pos?5?5?$CFd?5?$CFd?5?$CFd?$AA@
	lea	eax, DWORD PTR _buf$[ebp]
	push	eax
	call	DWORD PTR __imp__wsprintfA
	add	esp, 20					; 00000014H

; 319  : 	DumpText(450, 72, 8, 16, 0xffffff, buf);

	lea	eax, DWORD PTR _buf$[ebp]
	push	eax
	push	16777215				; 00ffffffH
	push	16					; 00000010H
	push	8
	push	72					; 00000048H
	push	450					; 000001c2H
	call	?DumpText@@YAXFFFFJPAD@Z		; DumpText
	add	esp, 24					; 00000018H

; 320  : 
; 321  : // ID
; 322  : 
; 323  : 	wsprintf(buf, "ID   %d", node->ID);

	mov	eax, DWORD PTR _node$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	push	OFFSET FLAT:??_C@_07EFADAHJO@ID?5?5?5?$CFd?$AA@
	lea	edx, DWORD PTR _buf$[ebp]
	push	edx
	call	DWORD PTR __imp__wsprintfA
	add	esp, 12					; 0000000cH

; 324  : 	DumpText(450, 96, 8, 16, 0x00ff00, buf);

	lea	eax, DWORD PTR _buf$[ebp]
	push	eax
	push	65280					; 0000ff00H
	push	16					; 00000010H
	push	8
	push	96					; 00000060H
	push	450					; 000001c2H
	call	?DumpText@@YAXFFFFJPAD@Z		; DumpText
	add	esp, 24					; 00000018H

; 325  : 
; 326  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?DisplayCamNodeInfo@@YAXPAU_EDIT_CAM_NODE@@@Z ENDP	; DisplayCamNodeInfo
_TEXT	ENDS
PUBLIC	?sqrt@@YAMM@Z					; sqrt
PUBLIC	??_C@_03GOGOMMPD@cam?$AA@			; `string'
PUBLIC	__real@45400000
PUBLIC	__real@3f800000
PUBLIC	__real@43a00000
PUBLIC	__real@43700000
PUBLIC	__real@42000000
PUBLIC	?EditCamNodes@@YAXXZ				; EditCamNodes
PUBLIC	?AllocEditCamNode@@YAPAU_EDIT_CAM_NODE@@XZ	; AllocEditCamNode
PUBLIC	?FreeEditCamNode@@YAXPAU_EDIT_CAM_NODE@@@Z	; FreeEditCamNode
EXTRN	?LoadCameraNodes@@YAJPAU_iobuf@@@Z:NEAR		; LoadCameraNodes
EXTRN	?MouseXpos@@3MA:DWORD				; MouseXpos
EXTRN	?MouseYpos@@3MA:DWORD				; MouseYpos
EXTRN	?MouseXrel@@3MA:DWORD				; MouseXrel
EXTRN	?MouseYrel@@3MA:DWORD				; MouseYrel
EXTRN	?CameraEditXrel@@3MA:DWORD			; CameraEditXrel
EXTRN	?CameraEditYrel@@3MA:DWORD			; CameraEditYrel
EXTRN	?CameraEditZrel@@3MA:DWORD			; CameraEditZrel
EXTRN	?MouseLeft@@3DA:BYTE				; MouseLeft
EXTRN	?MouseRight@@3DA:BYTE				; MouseRight
EXTRN	?CAM_NCameraNodes@@3JA:DWORD			; CAM_NCameraNodes
EXTRN	?Keys@@3PADA:BYTE				; Keys
EXTRN	?LastKeys@@3PADA:BYTE				; LastKeys
EXTRN	?Mouse@@3U_DIMOUSESTATE@@A:BYTE			; Mouse
EXTRN	?GetLevelFilename@@YAPADPADJ@Z:NEAR		; GetLevelFilename
EXTRN	?RotMatrixZYX@@YAXPATMatrixUnion@@MMM@Z:NEAR	; RotMatrixZYX
EXTRN	?RotVector@@YAXPATMatrixUnion@@PAUVectorStruct@@1@Z:NEAR ; RotVector
EXTRN	?MulMatrix@@YAXPATMatrixUnion@@00@Z:NEAR	; MulMatrix
EXTRN	?CopyMatrix@@YAXPATMatrixUnion@@0@Z:NEAR	; CopyMatrix
;	COMDAT __real@45400000
CONST	SEGMENT
__real@45400000 DD 045400000r			; 3072
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT ??_C@_03GOGOMMPD@cam?$AA@
CONST	SEGMENT
??_C@_03GOGOMMPD@cam?$AA@ DB 'cam', 00H			; `string'
CONST	ENDS
;	COMDAT __real@43a00000
CONST	SEGMENT
__real@43a00000 DD 043a00000r			; 320
CONST	ENDS
;	COMDAT __real@43700000
CONST	SEGMENT
__real@43700000 DD 043700000r			; 240
CONST	ENDS
;	COMDAT __real@42000000
CONST	SEGMENT
__real@42000000 DD 042000000r			; 32
; Function compile flags: /Odt /ZI
CONST	ENDS
;	COMDAT ?EditCamNodes@@YAXXZ
_TEXT	SEGMENT
tv727 = -204						; size = 4
tv644 = -204						; size = 4
__mul$81377 = -136					; size = 4
__mul$81375 = -132					; size = 4
_fp$ = -128						; size = 4
_node$ = -124						; size = 4
_nnode$ = -120						; size = 4
_mat2$ = -116						; size = 36
_mat$ = -80						; size = 36
_rad$ = -44						; size = 4
_sy$ = -40						; size = 4
_sx$ = -36						; size = 4
_z$ = -32						; size = 4
_vec2$ = -28						; size = 12
_vec$ = -16						; size = 12
_i$ = -4						; size = 4
?EditCamNodes@@YAXXZ PROC NEAR				; EditCamNodes, COMDAT

; 333  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi

; 334  : 	long i;
; 335  : 	VEC vec, vec2;
; 336  : 	float z, sx, sy, rad;
; 337  : 	MAT mat, mat2;
; 338  : 	EDIT_CAM_NODE *nnode, *node;
; 339  : 	FILE *fp;
; 340  : 
; 341  : // quit if not in edit mode
; 342  : 
; 343  : 	if (CAM_MainCamera->Type != CAM_EDIT)

	mov	eax, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	cmp	DWORD PTR [eax], 5
	je	SHORT $L81371

; 344  : 	{
; 345  : 		CurrentEditCamNode = NULL;

	mov	DWORD PTR ?CurrentEditCamNode@@3PAU_EDIT_CAM_NODE@@A, 0 ; CurrentEditCamNode

; 346  : 		return;

	jmp	$L81358
$L81371:

; 347  : 	}
; 348  : 
; 349  : // rotate camera?
; 350  : 
; 351  : 	if (MouseRight)

	movsx	eax, BYTE PTR ?MouseRight@@3DA		; MouseRight
	test	eax, eax
	je	$L81372

; 352  : 	{
; 353  : 		RotMatrixZYX(&mat, (float)-Mouse.lY / 3072, -(float)Mouse.lX / 3072, 0);

	push	0
	fild	DWORD PTR ?Mouse@@3U_DIMOUSESTATE@@A
	fchs
	fdiv	DWORD PTR __real@45400000
	push	ecx
	fstp	DWORD PTR [esp]
	mov	eax, DWORD PTR ?Mouse@@3U_DIMOUSESTATE@@A+4
	neg	eax
	mov	DWORD PTR tv727[ebp], eax
	fild	DWORD PTR tv727[ebp]
	fdiv	DWORD PTR __real@45400000
	push	ecx
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR _mat$[ebp]
	push	ecx
	call	?RotMatrixZYX@@YAXPATMatrixUnion@@MMM@Z	; RotMatrixZYX
	add	esp, 16					; 00000010H

; 354  : 		MulMatrix(&CAM_MainCamera->WMatrix, &mat, &mat2);

	lea	eax, DWORD PTR _mat2$[ebp]
	push	eax
	lea	ecx, DWORD PTR _mat$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	add	edx, 16					; 00000010H
	push	edx
	call	?MulMatrix@@YAXPATMatrixUnion@@00@Z	; MulMatrix
	add	esp, 12					; 0000000cH

; 355  : 		CopyMatrix(&mat2, &CAM_MainCamera->WMatrix);

	mov	eax, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	add	eax, 16					; 00000010H
	push	eax
	lea	ecx, DWORD PTR _mat2$[ebp]
	push	ecx
	call	?CopyMatrix@@YAXPATMatrixUnion@@0@Z	; CopyMatrix
	add	esp, 8

; 356  : 
; 357  : 		CAM_MainCamera->WMatrix.m[RY] = 0;

	mov	eax, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	mov	DWORD PTR [eax+20], 0

; 358  : 		NormalizeVector(&CAM_MainCamera->WMatrix.mv[X]);

	mov	eax, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	mov	ecx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fld	DWORD PTR [eax+16]
	fmul	DWORD PTR [ecx+16]
	mov	edx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	mov	eax, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fld	DWORD PTR [edx+20]
	fmul	DWORD PTR [eax+20]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	mov	edx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fld	DWORD PTR [ecx+24]
	fmul	DWORD PTR [edx+24]
	faddp	ST(1), ST(0)
	push	ecx
	fstp	DWORD PTR [esp]
	call	?sqrt@@YAMM@Z				; sqrt
	add	esp, 4
	fdivr	DWORD PTR __real@3f800000
	fstp	DWORD PTR __mul$81375[ebp]
	mov	eax, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fld	DWORD PTR __mul$81375[ebp]
	fmul	DWORD PTR [eax+16]
	mov	ecx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fstp	DWORD PTR [ecx+16]
	mov	eax, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fld	DWORD PTR __mul$81375[ebp]
	fmul	DWORD PTR [eax+20]
	mov	ecx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fstp	DWORD PTR [ecx+20]
	mov	eax, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fld	DWORD PTR __mul$81375[ebp]
	fmul	DWORD PTR [eax+24]
	mov	ecx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fstp	DWORD PTR [ecx+24]

; 359  : 		CrossProduct(&CAM_MainCamera->WMatrix.mv[Z], &CAM_MainCamera->WMatrix.mv[X], &CAM_MainCamera->WMatrix.mv[Y]);

	mov	eax, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	mov	ecx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fld	DWORD PTR [eax+44]
	fmul	DWORD PTR [ecx+24]
	mov	edx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	mov	eax, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fld	DWORD PTR [edx+48]
	fmul	DWORD PTR [eax+20]
	fsubp	ST(1), ST(0)
	mov	ecx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fstp	DWORD PTR [ecx+28]
	mov	eax, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	mov	ecx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fld	DWORD PTR [eax+48]
	fmul	DWORD PTR [ecx+16]
	mov	edx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	mov	eax, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fld	DWORD PTR [edx+40]
	fmul	DWORD PTR [eax+24]
	fsubp	ST(1), ST(0)
	mov	ecx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fstp	DWORD PTR [ecx+32]
	mov	eax, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	mov	ecx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fld	DWORD PTR [eax+40]
	fmul	DWORD PTR [ecx+20]
	mov	edx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	mov	eax, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fld	DWORD PTR [edx+44]
	fmul	DWORD PTR [eax+16]
	fsubp	ST(1), ST(0)
	mov	ecx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fstp	DWORD PTR [ecx+36]

; 360  : 		NormalizeVector(&CAM_MainCamera->WMatrix.mv[Y]);

	mov	eax, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	mov	ecx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fld	DWORD PTR [eax+28]
	fmul	DWORD PTR [ecx+28]
	mov	edx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	mov	eax, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fld	DWORD PTR [edx+32]
	fmul	DWORD PTR [eax+32]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	mov	edx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fld	DWORD PTR [ecx+36]
	fmul	DWORD PTR [edx+36]
	faddp	ST(1), ST(0)
	push	ecx
	fstp	DWORD PTR [esp]
	call	?sqrt@@YAMM@Z				; sqrt
	add	esp, 4
	fdivr	DWORD PTR __real@3f800000
	fstp	DWORD PTR __mul$81377[ebp]
	mov	eax, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fld	DWORD PTR __mul$81377[ebp]
	fmul	DWORD PTR [eax+28]
	mov	ecx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fstp	DWORD PTR [ecx+28]
	mov	eax, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fld	DWORD PTR __mul$81377[ebp]
	fmul	DWORD PTR [eax+32]
	mov	ecx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fstp	DWORD PTR [ecx+32]
	mov	eax, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fld	DWORD PTR __mul$81377[ebp]
	fmul	DWORD PTR [eax+36]
	mov	ecx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fstp	DWORD PTR [ecx+36]

; 361  : 		CrossProduct(&CAM_MainCamera->WMatrix.mv[X], &CAM_MainCamera->WMatrix.mv[Y], &CAM_MainCamera->WMatrix.mv[Z]);

	mov	eax, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	mov	ecx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fld	DWORD PTR [eax+20]
	fmul	DWORD PTR [ecx+36]
	mov	edx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	mov	eax, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fld	DWORD PTR [edx+24]
	fmul	DWORD PTR [eax+32]
	fsubp	ST(1), ST(0)
	mov	ecx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fstp	DWORD PTR [ecx+40]
	mov	eax, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	mov	ecx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fld	DWORD PTR [eax+24]
	fmul	DWORD PTR [ecx+28]
	mov	edx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	mov	eax, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fld	DWORD PTR [edx+16]
	fmul	DWORD PTR [eax+36]
	fsubp	ST(1), ST(0)
	mov	ecx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fstp	DWORD PTR [ecx+44]
	mov	eax, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	mov	ecx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fld	DWORD PTR [eax+16]
	fmul	DWORD PTR [ecx+32]
	mov	edx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	mov	eax, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fld	DWORD PTR [edx+20]
	fmul	DWORD PTR [eax+28]
	fsubp	ST(1), ST(0)
	mov	ecx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fstp	DWORD PTR [ecx+48]
$L81372:

; 362  : 	}
; 363  : 
; 364  : // save nodes?
; 365  : 
; 366  : 	if (Keys[DIK_LCONTROL] && Keys[DIK_F4] && !LastKeys[DIK_F4])

	movsx	eax, BYTE PTR ?Keys@@3PADA+29
	test	eax, eax
	je	SHORT $L81379
	movsx	eax, BYTE PTR ?Keys@@3PADA+62
	test	eax, eax
	je	SHORT $L81379
	movsx	eax, BYTE PTR ?LastKeys@@3PADA+62
	test	eax, eax
	jne	SHORT $L81379

; 367  : 	{
; 368  : 		SaveEditCamNodes(GetLevelFilename("cam", FILENAME_MAKE_BODY | FILENAME_GAME_SETTINGS));

	push	3
	push	OFFSET FLAT:??_C@_03GOGOMMPD@cam?$AA@
	call	?GetLevelFilename@@YAPADPADJ@Z		; GetLevelFilename
	add	esp, 8
	push	eax
	call	?SaveEditCamNodes@@YAXPAD@Z		; SaveEditCamNodes
	add	esp, 4

; 369  : 		if ((fp = fopen(GetLevelFilename("cam", FILENAME_MAKE_BODY), "rb")) != NULL)

	push	OFFSET FLAT:??_C@_02JDPG@rb?$AA@
	push	1
	push	OFFSET FLAT:??_C@_03GOGOMMPD@cam?$AA@
	call	?GetLevelFilename@@YAPADPADJ@Z		; GetLevelFilename
	add	esp, 8
	push	eax
	call	_fopen
	add	esp, 8
	mov	DWORD PTR _fp$[ebp], eax
	cmp	DWORD PTR _fp$[ebp], 0
	je	SHORT $L81379

; 370  : 		{
; 371  : 			CAM_NCameraNodes = LoadCameraNodes(fp);

	mov	eax, DWORD PTR _fp$[ebp]
	push	eax
	call	?LoadCameraNodes@@YAJPAU_iobuf@@@Z	; LoadCameraNodes
	add	esp, 4
	mov	DWORD PTR ?CAM_NCameraNodes@@3JA, eax	; CAM_NCameraNodes

; 372  : 			fclose(fp);

	mov	eax, DWORD PTR _fp$[ebp]
	push	eax
	call	_fclose
	add	esp, 4
$L81379:

; 373  : 		}
; 374  : 	}
; 375  : 
; 376  : // get a current node?
; 377  : 
; 378  : 	if ((Keys[DIK_RETURN] && !LastKeys[DIK_RETURN]) || (Keys[DIK_BACKSPACE] && !LastKeys[DIK_BACKSPACE]))

	movsx	eax, BYTE PTR ?Keys@@3PADA+28
	test	eax, eax
	je	SHORT $L81384
	movsx	eax, BYTE PTR ?LastKeys@@3PADA+28
	test	eax, eax
	je	SHORT $L81383
$L81384:
	movsx	eax, BYTE PTR ?Keys@@3PADA+14
	test	eax, eax
	je	$L81382
	movsx	eax, BYTE PTR ?LastKeys@@3PADA+14
	test	eax, eax
	jne	$L81382
$L81383:

; 379  : 	{
; 380  : 		nnode = NULL;

	mov	DWORD PTR _nnode$[ebp], 0

; 381  : 		z = RenderSettings.FarClip;

	mov	eax, DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+32
	mov	DWORD PTR _z$[ebp], eax

; 382  : 
; 383  : 		node = EditCamNode;

	mov	eax, DWORD PTR _EditCamNode
	mov	DWORD PTR _node$[ebp], eax

; 384  : 		for (i = 0 ; i < EditCamNodeNum ; i++, node++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $L81385
$L81386:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	mov	ecx, DWORD PTR _node$[ebp]
	add	ecx, 28					; 0000001cH
	mov	DWORD PTR _node$[ebp], ecx
$L81385:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _EditCamNodeNum
	jge	$L81387

; 385  : 		{
; 386  : 			RotTransVector(&ViewMatrix, &ViewTrans, &node->Pos, &vec);

	lea	eax, DWORD PTR _vec$[ebp]
	push	eax
	mov	ecx, DWORD PTR _node$[ebp]
	add	ecx, 8
	push	ecx
	push	OFFSET FLAT:?ViewTrans@@3UVectorStruct@@A ; ViewTrans
	push	OFFSET FLAT:?ViewMatrix@@3TMatrixUnion@@A ; ViewMatrix
	call	?RotTransVector@@YAXPATMatrixUnion@@PAUVectorStruct@@11@Z ; RotTransVector
	add	esp, 16					; 00000010H

; 387  : 
; 388  : 			if (vec.v[Z] < RenderSettings.NearClip || vec.v[Z] >= RenderSettings.FarClip) continue;

	fld	DWORD PTR _vec$[ebp+8]
	fcomp	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+28
	fnstsw	ax
	test	ah, 5
	jnp	SHORT $L81389
	fld	DWORD PTR _vec$[ebp+8]
	fcomp	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+32
	fnstsw	ax
	test	ah, 1
	jne	SHORT $L81388
$L81389:
	jmp	SHORT $L81386
$L81388:

; 389  : 
; 390  : 			sx = vec.v[X] * RenderSettings.GeomPers / vec.v[Z] + REAL_SCREEN_XHALF;

	fld	DWORD PTR _vec$[ebp]
	fmul	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A
	fdiv	DWORD PTR _vec$[ebp+8]
	fadd	DWORD PTR __real@43a00000
	fstp	DWORD PTR _sx$[ebp]

; 391  : 			sy = vec.v[Y] * RenderSettings.GeomPers / vec.v[Z] + REAL_SCREEN_YHALF;

	fld	DWORD PTR _vec$[ebp+4]
	fmul	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A
	fdiv	DWORD PTR _vec$[ebp+8]
	fadd	DWORD PTR __real@43700000
	fstp	DWORD PTR _sy$[ebp]

; 392  : 
; 393  : 			rad = 32 * RenderSettings.GeomPers / vec.v[Z];

	fld	DWORD PTR __real@42000000
	fmul	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A
	fdiv	DWORD PTR _vec$[ebp+8]
	fstp	DWORD PTR _rad$[ebp]

; 394  : 
; 395  : 			if (MouseXpos > sx - rad && MouseXpos < sx + rad && MouseYpos > sy - rad && MouseYpos < sy + rad)

	fld	DWORD PTR _sx$[ebp]
	fsub	DWORD PTR _rad$[ebp]
	fcomp	DWORD PTR ?MouseXpos@@3MA		; MouseXpos
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L81390
	fld	DWORD PTR _sx$[ebp]
	fadd	DWORD PTR _rad$[ebp]
	fcomp	DWORD PTR ?MouseXpos@@3MA		; MouseXpos
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $L81390
	fld	DWORD PTR _sy$[ebp]
	fsub	DWORD PTR _rad$[ebp]
	fcomp	DWORD PTR ?MouseYpos@@3MA		; MouseYpos
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L81390
	fld	DWORD PTR _sy$[ebp]
	fadd	DWORD PTR _rad$[ebp]
	fcomp	DWORD PTR ?MouseYpos@@3MA		; MouseYpos
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $L81390

; 396  : 			{
; 397  : 				if (vec.v[Z] < z)

	fld	DWORD PTR _vec$[ebp+8]
	fcomp	DWORD PTR _z$[ebp]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L81390

; 398  : 				{
; 399  : 					nnode = node;

	mov	eax, DWORD PTR _node$[ebp]
	mov	DWORD PTR _nnode$[ebp], eax

; 400  : 					z = vec.v[Z];

	mov	eax, DWORD PTR _vec$[ebp+8]
	mov	DWORD PTR _z$[ebp], eax
$L81390:

; 401  : 				}
; 402  : 			}
; 403  : 		}

	jmp	$L81386
$L81387:

; 404  : 		if (nnode)

	cmp	DWORD PTR _nnode$[ebp], 0
	je	SHORT $L81382

; 405  : 		{
; 406  : 			if (Keys[DIK_RETURN])

	movsx	eax, BYTE PTR ?Keys@@3PADA+28
	test	eax, eax
	je	SHORT $L81393

; 407  : 				CurrentEditCamNode = nnode;

	mov	eax, DWORD PTR _nnode$[ebp]
	mov	DWORD PTR ?CurrentEditCamNode@@3PAU_EDIT_CAM_NODE@@A, eax ; CurrentEditCamNode

; 408  : 			else

	jmp	SHORT $L81394
$L81393:

; 409  : 				LastEditCamNode = nnode;

	mov	eax, DWORD PTR _nnode$[ebp]
	mov	DWORD PTR _LastEditCamNode, eax
$L81394:

; 410  : 			return;

	jmp	$L81358
$L81382:

; 411  : 		}
; 412  : 	}
; 413  : 
; 414  : // new node?
; 415  : 
; 416  : 	if (Keys[DIK_INSERT] && !LastKeys[DIK_INSERT])

	movsx	eax, BYTE PTR ?Keys@@3PADA+210
	test	eax, eax
	je	$L81395
	movsx	eax, BYTE PTR ?LastKeys@@3PADA+210
	test	eax, eax
	jne	$L81395

; 417  : 	{
; 418  : 		if ((node = AllocEditCamNode()))

	call	?AllocEditCamNode@@YAPAU_EDIT_CAM_NODE@@XZ ; AllocEditCamNode
	mov	DWORD PTR _node$[ebp], eax
	cmp	DWORD PTR _node$[ebp], 0
	je	$L81395

; 419  : 		{
; 420  : 			vec.v[X] = 0;

	mov	DWORD PTR _vec$[ebp], 0

; 421  : 			vec.v[Y] = 0;

	mov	DWORD PTR _vec$[ebp+4], 0

; 422  : 			vec.v[Z] = 512;

	mov	DWORD PTR _vec$[ebp+8], 1140850688	; 44000000H

; 423  : 			RotVector(&CAM_MainCamera->WMatrix, &vec, &vec2);

	lea	eax, DWORD PTR _vec2$[ebp]
	push	eax
	lea	ecx, DWORD PTR _vec$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	add	edx, 16					; 00000010H
	push	edx
	call	?RotVector@@YAXPATMatrixUnion@@PAUVectorStruct@@1@Z ; RotVector
	add	esp, 12					; 0000000cH

; 424  : 			AddVector(&CAM_MainCamera->WPos, &vec2, &node->Pos);

	mov	eax, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fld	DWORD PTR _vec2$[ebp]
	fadd	DWORD PTR [eax+68]
	mov	ecx, DWORD PTR _node$[ebp]
	fstp	DWORD PTR [ecx+8]
	mov	eax, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fld	DWORD PTR _vec2$[ebp+4]
	fadd	DWORD PTR [eax+72]
	mov	ecx, DWORD PTR _node$[ebp]
	fstp	DWORD PTR [ecx+12]
	mov	eax, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fld	DWORD PTR _vec2$[ebp+8]
	fadd	DWORD PTR [eax+76]
	mov	ecx, DWORD PTR _node$[ebp]
	fstp	DWORD PTR [ecx+16]

; 425  : 
; 426  : 			node->Type = 0;

	mov	eax, DWORD PTR _node$[ebp]
	mov	DWORD PTR [eax], 0

; 427  : 			node->ZoomFactor = 500;

	mov	eax, DWORD PTR _node$[ebp]
	mov	DWORD PTR [eax+4], 500			; 000001f4H

; 428  : 
; 429  : 			node->Link = NULL;

	mov	eax, DWORD PTR _node$[ebp]
	mov	DWORD PTR [eax+20], 0

; 430  : 
; 431  : 			node->ID = ++MaxEditCamNodeID;

	mov	eax, DWORD PTR _MaxEditCamNodeID
	add	eax, 1
	mov	DWORD PTR _MaxEditCamNodeID, eax
	mov	ecx, DWORD PTR _node$[ebp]
	mov	edx, DWORD PTR _MaxEditCamNodeID
	mov	DWORD PTR [ecx+24], edx

; 432  : 
; 433  : 			CurrentEditCamNode = node;

	mov	eax, DWORD PTR _node$[ebp]
	mov	DWORD PTR ?CurrentEditCamNode@@3PAU_EDIT_CAM_NODE@@A, eax ; CurrentEditCamNode
$L81395:

; 434  : 		}
; 435  : 	}
; 436  : 
; 437  : // quit now if no current edit node
; 438  : 
; 439  : 	if (!CurrentEditCamNode) return;

	cmp	DWORD PTR ?CurrentEditCamNode@@3PAU_EDIT_CAM_NODE@@A, 0 ; CurrentEditCamNode
	jne	SHORT $L81397
	jmp	$L81358
$L81397:

; 440  : 
; 441  : // exit current edit?
; 442  : 
; 443  : 	if (Keys[DIK_RETURN] && !LastKeys[DIK_RETURN])

	movsx	eax, BYTE PTR ?Keys@@3PADA+28
	test	eax, eax
	je	SHORT $L81398
	movsx	eax, BYTE PTR ?LastKeys@@3PADA+28
	test	eax, eax
	jne	SHORT $L81398

; 444  : 	{
; 445  : 		CurrentEditCamNode = NULL;

	mov	DWORD PTR ?CurrentEditCamNode@@3PAU_EDIT_CAM_NODE@@A, 0 ; CurrentEditCamNode

; 446  : 		return;

	jmp	$L81358
$L81398:

; 447  : 	}
; 448  : 
; 449  : // delete current edit node?
; 450  : 
; 451  : 	if (Keys[DIK_DELETE] && !LastKeys[DIK_DELETE])

	movsx	eax, BYTE PTR ?Keys@@3PADA+211
	test	eax, eax
	je	SHORT $L81399
	movsx	eax, BYTE PTR ?LastKeys@@3PADA+211
	test	eax, eax
	jne	SHORT $L81399

; 452  : 	{
; 453  : 		FreeEditCamNode(CurrentEditCamNode);

	mov	eax, DWORD PTR ?CurrentEditCamNode@@3PAU_EDIT_CAM_NODE@@A ; CurrentEditCamNode
	push	eax
	call	?FreeEditCamNode@@YAXPAU_EDIT_CAM_NODE@@@Z ; FreeEditCamNode
	add	esp, 4

; 454  : 		CurrentEditCamNode = NULL;

	mov	DWORD PTR ?CurrentEditCamNode@@3PAU_EDIT_CAM_NODE@@A, 0 ; CurrentEditCamNode

; 455  : 		return;

	jmp	$L81358
$L81399:

; 456  : 	}
; 457  : 
; 458  : // change axis?
; 459  : 
; 460  : 	if (Keys[DIK_TAB] && !LastKeys[DIK_TAB])

	movsx	eax, BYTE PTR ?Keys@@3PADA+15
	test	eax, eax
	je	SHORT $L81400
	movsx	eax, BYTE PTR ?LastKeys@@3PADA+15
	test	eax, eax
	jne	SHORT $L81400

; 461  : 	{
; 462  : 		if (Keys[DIK_LSHIFT]) EditCamNodeAxis--;

	movsx	eax, BYTE PTR ?Keys@@3PADA+42
	test	eax, eax
	je	SHORT $L81401
	mov	eax, DWORD PTR _EditCamNodeAxis
	sub	eax, 1
	mov	DWORD PTR _EditCamNodeAxis, eax

; 463  : 		else EditCamNodeAxis++;

	jmp	SHORT $L81402
$L81401:
	mov	eax, DWORD PTR _EditCamNodeAxis
	add	eax, 1
	mov	DWORD PTR _EditCamNodeAxis, eax
$L81402:

; 464  : 		if (EditCamNodeAxis == -1) EditCamNodeAxis = 5;

	cmp	DWORD PTR _EditCamNodeAxis, -1
	jne	SHORT $L81403
	mov	DWORD PTR _EditCamNodeAxis, 5
$L81403:

; 465  : 		if (EditCamNodeAxis == 6) EditCamNodeAxis = 0;

	cmp	DWORD PTR _EditCamNodeAxis, 6
	jne	SHORT $L81400
	mov	DWORD PTR _EditCamNodeAxis, 0
$L81400:

; 466  : 	}
; 467  : 
; 468  : // change axis type?
; 469  : 
; 470  : 	if (Keys[DIK_LALT] && !LastKeys[DIK_LALT])

	movsx	eax, BYTE PTR ?Keys@@3PADA+56
	test	eax, eax
	je	SHORT $L81405
	movsx	eax, BYTE PTR ?LastKeys@@3PADA+56
	test	eax, eax
	jne	SHORT $L81405

; 471  : 		EditCamNodeAxisType ^= 1;

	mov	eax, DWORD PTR _EditCamNodeAxisType
	xor	eax, 1
	mov	DWORD PTR _EditCamNodeAxisType, eax
$L81405:

; 472  : 
; 473  : // change type?
; 474  : 
; 475  : 	if (Keys[DIK_NUMPADENTER] && !LastKeys[DIK_NUMPADENTER])

	movsx	eax, BYTE PTR ?Keys@@3PADA+156
	test	eax, eax
	je	SHORT $L81406
	movsx	eax, BYTE PTR ?LastKeys@@3PADA+156
	test	eax, eax
	jne	SHORT $L81406

; 476  : 		CurrentEditCamNode->Type ^= 1;

	mov	eax, DWORD PTR ?CurrentEditCamNode@@3PAU_EDIT_CAM_NODE@@A ; CurrentEditCamNode
	mov	ecx, DWORD PTR [eax]
	xor	ecx, 1
	mov	edx, DWORD PTR ?CurrentEditCamNode@@3PAU_EDIT_CAM_NODE@@A ; CurrentEditCamNode
	mov	DWORD PTR [edx], ecx
$L81406:

; 477  : 
; 478  : // change flag?
; 479  : 
; 480  : 	if (Keys[DIK_NUMPADSLASH] && !LastKeys[DIK_NUMPADSLASH])

	movsx	eax, BYTE PTR ?Keys@@3PADA+181
	test	eax, eax
	je	SHORT $L81407
	movsx	eax, BYTE PTR ?LastKeys@@3PADA+181
	test	eax, eax
	jne	SHORT $L81407

; 481  : 		CurrentEditCamNode->ZoomFactor -= 50;

	mov	eax, DWORD PTR ?CurrentEditCamNode@@3PAU_EDIT_CAM_NODE@@A ; CurrentEditCamNode
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, 50					; 00000032H
	mov	edx, DWORD PTR ?CurrentEditCamNode@@3PAU_EDIT_CAM_NODE@@A ; CurrentEditCamNode
	mov	DWORD PTR [edx+4], ecx
$L81407:

; 482  : 
; 483  : 	if (Keys[DIK_NUMPADSTAR] && !LastKeys[DIK_NUMPADSTAR])

	movsx	eax, BYTE PTR ?Keys@@3PADA+55
	test	eax, eax
	je	SHORT $L81408
	movsx	eax, BYTE PTR ?LastKeys@@3PADA+55
	test	eax, eax
	jne	SHORT $L81408

; 484  : 		CurrentEditCamNode->ZoomFactor += 50;

	mov	eax, DWORD PTR ?CurrentEditCamNode@@3PAU_EDIT_CAM_NODE@@A ; CurrentEditCamNode
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 50					; 00000032H
	mov	edx, DWORD PTR ?CurrentEditCamNode@@3PAU_EDIT_CAM_NODE@@A ; CurrentEditCamNode
	mov	DWORD PTR [edx+4], ecx
$L81408:

; 485  : 
; 486  : 	if (CurrentEditCamNode->ZoomFactor < -1000) CurrentEditCamNode->ZoomFactor = -1000;

	mov	eax, DWORD PTR ?CurrentEditCamNode@@3PAU_EDIT_CAM_NODE@@A ; CurrentEditCamNode
	cmp	DWORD PTR [eax+4], -1000		; fffffc18H
	jge	SHORT $L81409
	mov	eax, DWORD PTR ?CurrentEditCamNode@@3PAU_EDIT_CAM_NODE@@A ; CurrentEditCamNode
	mov	DWORD PTR [eax+4], -1000		; fffffc18H
$L81409:

; 487  : 	if (CurrentEditCamNode->ZoomFactor > 1000) CurrentEditCamNode->ZoomFactor = 1000;

	mov	eax, DWORD PTR ?CurrentEditCamNode@@3PAU_EDIT_CAM_NODE@@A ; CurrentEditCamNode
	cmp	DWORD PTR [eax+4], 1000			; 000003e8H
	jle	SHORT $L81410
	mov	eax, DWORD PTR ?CurrentEditCamNode@@3PAU_EDIT_CAM_NODE@@A ; CurrentEditCamNode
	mov	DWORD PTR [eax+4], 1000			; 000003e8H
$L81410:

; 488  : 
; 489  : // add link?
; 490  : 
; 491  : 	if (Keys[DIK_NUMPADPLUS] && !LastKeys[DIK_NUMPADPLUS] && LastEditCamNode && LastEditCamNode != CurrentEditCamNode)

	movsx	eax, BYTE PTR ?Keys@@3PADA+78
	test	eax, eax
	je	SHORT $L81411
	movsx	eax, BYTE PTR ?LastKeys@@3PADA+78
	test	eax, eax
	jne	SHORT $L81411
	cmp	DWORD PTR _LastEditCamNode, 0
	je	SHORT $L81411
	mov	eax, DWORD PTR _LastEditCamNode
	cmp	eax, DWORD PTR ?CurrentEditCamNode@@3PAU_EDIT_CAM_NODE@@A ; CurrentEditCamNode
	je	SHORT $L81411

; 492  : 	{
; 493  : 		CurrentEditCamNode->Link = LastEditCamNode;

	mov	eax, DWORD PTR ?CurrentEditCamNode@@3PAU_EDIT_CAM_NODE@@A ; CurrentEditCamNode
	mov	ecx, DWORD PTR _LastEditCamNode
	mov	DWORD PTR [eax+20], ecx

; 494  : 		LastEditCamNode->Link = CurrentEditCamNode;

	mov	eax, DWORD PTR _LastEditCamNode
	mov	ecx, DWORD PTR ?CurrentEditCamNode@@3PAU_EDIT_CAM_NODE@@A ; CurrentEditCamNode
	mov	DWORD PTR [eax+20], ecx

; 495  : 		CurrentEditCamNode->Type = LastEditCamNode->Type = CAMNODE_MONORAIL;

	mov	eax, DWORD PTR _LastEditCamNode
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR ?CurrentEditCamNode@@3PAU_EDIT_CAM_NODE@@A ; CurrentEditCamNode
	mov	DWORD PTR [ecx], 0
$L81411:

; 496  : 	}
; 497  : 
; 498  : // delete link?
; 499  : 
; 500  : 	if (Keys[DIK_NUMPADMINUS] && !LastKeys[DIK_NUMPADMINUS] && LastEditCamNode && CurrentEditCamNode != LastEditCamNode)

	movsx	eax, BYTE PTR ?Keys@@3PADA+74
	test	eax, eax
	je	SHORT $L81412
	movsx	eax, BYTE PTR ?LastKeys@@3PADA+74
	test	eax, eax
	jne	SHORT $L81412
	cmp	DWORD PTR _LastEditCamNode, 0
	je	SHORT $L81412
	mov	eax, DWORD PTR ?CurrentEditCamNode@@3PAU_EDIT_CAM_NODE@@A ; CurrentEditCamNode
	cmp	eax, DWORD PTR _LastEditCamNode
	je	SHORT $L81412

; 501  : 	{
; 502  : 		CurrentEditCamNode->Link = NULL;

	mov	eax, DWORD PTR ?CurrentEditCamNode@@3PAU_EDIT_CAM_NODE@@A ; CurrentEditCamNode
	mov	DWORD PTR [eax+20], 0

; 503  : 		LastEditCamNode->Link = NULL;

	mov	eax, DWORD PTR _LastEditCamNode
	mov	DWORD PTR [eax+20], 0

; 504  : 		CurrentEditCamNode->Type = LastEditCamNode->Type = CAMNODE_STATIC;

	mov	eax, DWORD PTR _LastEditCamNode
	mov	DWORD PTR [eax], 1
	mov	ecx, DWORD PTR ?CurrentEditCamNode@@3PAU_EDIT_CAM_NODE@@A ; CurrentEditCamNode
	mov	DWORD PTR [ecx], 1
$L81412:

; 505  : 	}
; 506  : 
; 507  : // move?
; 508  : 
; 509  : 	if (MouseLeft)

	movsx	eax, BYTE PTR ?MouseLeft@@3DA		; MouseLeft
	test	eax, eax
	je	$L81358

; 510  : 	{
; 511  : 		RotTransVector(&ViewMatrix, &ViewTrans, &CurrentEditCamNode->Pos, &vec);

	lea	eax, DWORD PTR _vec$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?CurrentEditCamNode@@3PAU_EDIT_CAM_NODE@@A ; CurrentEditCamNode
	add	ecx, 8
	push	ecx
	push	OFFSET FLAT:?ViewTrans@@3UVectorStruct@@A ; ViewTrans
	push	OFFSET FLAT:?ViewMatrix@@3TMatrixUnion@@A ; ViewMatrix
	call	?RotTransVector@@YAXPATMatrixUnion@@PAUVectorStruct@@11@Z ; RotTransVector
	add	esp, 16					; 00000010H

; 512  : 
; 513  : 		switch (EditCamNodeAxis)

	mov	eax, DWORD PTR _EditCamNodeAxis
	mov	DWORD PTR tv644[ebp], eax
	cmp	DWORD PTR tv644[ebp], 5
	ja	$L81415
	mov	ecx, DWORD PTR tv644[ebp]
	jmp	DWORD PTR $L81621[ecx*4]
$L81418:

; 514  : 		{
; 515  : 			case EDIT_CAM_NODE_AXIS_XY:
; 516  : 				vec.v[X] = MouseXrel * vec.v[Z] / RenderSettings.GeomPers + CameraEditXrel;

	fld	DWORD PTR ?MouseXrel@@3MA		; MouseXrel
	fmul	DWORD PTR _vec$[ebp+8]
	fdiv	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A
	fadd	DWORD PTR ?CameraEditXrel@@3MA		; CameraEditXrel
	fstp	DWORD PTR _vec$[ebp]

; 517  : 				vec.v[Y] = MouseYrel * vec.v[Z] / RenderSettings.GeomPers + CameraEditYrel;

	fld	DWORD PTR ?MouseYrel@@3MA		; MouseYrel
	fmul	DWORD PTR _vec$[ebp+8]
	fdiv	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A
	fadd	DWORD PTR ?CameraEditYrel@@3MA		; CameraEditYrel
	fstp	DWORD PTR _vec$[ebp+4]

; 518  : 				vec.v[Z] = CameraEditZrel;

	mov	eax, DWORD PTR ?CameraEditZrel@@3MA
	mov	DWORD PTR _vec$[ebp+8], eax

; 519  : 				break;

	jmp	$L81415
$L81419:

; 520  : 			case EDIT_CAM_NODE_AXIS_XZ:
; 521  : 				vec.v[X] = MouseXrel * vec.v[Z] / RenderSettings.GeomPers + CameraEditXrel;

	fld	DWORD PTR ?MouseXrel@@3MA		; MouseXrel
	fmul	DWORD PTR _vec$[ebp+8]
	fdiv	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A
	fadd	DWORD PTR ?CameraEditXrel@@3MA		; CameraEditXrel
	fstp	DWORD PTR _vec$[ebp]

; 522  : 				vec.v[Y] = CameraEditYrel;

	mov	eax, DWORD PTR ?CameraEditYrel@@3MA
	mov	DWORD PTR _vec$[ebp+4], eax

; 523  : 				vec.v[Z] = -MouseYrel * vec.v[Z] / RenderSettings.GeomPers + CameraEditZrel;

	fld	DWORD PTR ?MouseYrel@@3MA		; MouseYrel
	fchs
	fmul	DWORD PTR _vec$[ebp+8]
	fdiv	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A
	fadd	DWORD PTR ?CameraEditZrel@@3MA		; CameraEditZrel
	fstp	DWORD PTR _vec$[ebp+8]

; 524  : 				break;

	jmp	$L81415
$L81420:

; 525  : 			case EDIT_CAM_NODE_AXIS_ZY:
; 526  : 				vec.v[X] = CameraEditXrel;

	mov	eax, DWORD PTR ?CameraEditXrel@@3MA
	mov	DWORD PTR _vec$[ebp], eax

; 527  : 				vec.v[Y] = MouseYrel * vec.v[Z] / RenderSettings.GeomPers + CameraEditYrel;

	fld	DWORD PTR ?MouseYrel@@3MA		; MouseYrel
	fmul	DWORD PTR _vec$[ebp+8]
	fdiv	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A
	fadd	DWORD PTR ?CameraEditYrel@@3MA		; CameraEditYrel
	fstp	DWORD PTR _vec$[ebp+4]

; 528  : 				vec.v[Z] = MouseXrel * vec.v[Z] / RenderSettings.GeomPers + CameraEditZrel;

	fld	DWORD PTR ?MouseXrel@@3MA		; MouseXrel
	fmul	DWORD PTR _vec$[ebp+8]
	fdiv	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A
	fadd	DWORD PTR ?CameraEditZrel@@3MA		; CameraEditZrel
	fstp	DWORD PTR _vec$[ebp+8]

; 529  : 				break;

	jmp	SHORT $L81415
$L81421:

; 530  : 			case EDIT_CAM_NODE_AXIS_X:
; 531  : 				vec.v[X] = MouseXrel * vec.v[Z] / RenderSettings.GeomPers + CameraEditXrel;

	fld	DWORD PTR ?MouseXrel@@3MA		; MouseXrel
	fmul	DWORD PTR _vec$[ebp+8]
	fdiv	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A
	fadd	DWORD PTR ?CameraEditXrel@@3MA		; CameraEditXrel
	fstp	DWORD PTR _vec$[ebp]

; 532  : 				vec.v[Y] = CameraEditYrel;

	mov	eax, DWORD PTR ?CameraEditYrel@@3MA
	mov	DWORD PTR _vec$[ebp+4], eax

; 533  : 				vec.v[Z] = CameraEditZrel;

	mov	eax, DWORD PTR ?CameraEditZrel@@3MA
	mov	DWORD PTR _vec$[ebp+8], eax

; 534  : 				break;

	jmp	SHORT $L81415
$L81422:

; 535  : 			case EDIT_CAM_NODE_AXIS_Y:
; 536  : 				vec.v[X] = CameraEditXrel;

	mov	eax, DWORD PTR ?CameraEditXrel@@3MA
	mov	DWORD PTR _vec$[ebp], eax

; 537  : 				vec.v[Y] = MouseYrel * vec.v[Z] / RenderSettings.GeomPers + CameraEditYrel;

	fld	DWORD PTR ?MouseYrel@@3MA		; MouseYrel
	fmul	DWORD PTR _vec$[ebp+8]
	fdiv	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A
	fadd	DWORD PTR ?CameraEditYrel@@3MA		; CameraEditYrel
	fstp	DWORD PTR _vec$[ebp+4]

; 538  : 				vec.v[Z] = CameraEditZrel;

	mov	eax, DWORD PTR ?CameraEditZrel@@3MA
	mov	DWORD PTR _vec$[ebp+8], eax

; 539  : 				break;

	jmp	SHORT $L81415
$L81423:

; 540  : 			case EDIT_CAM_NODE_AXIS_Z:
; 541  : 				vec.v[X] = CameraEditXrel;

	mov	eax, DWORD PTR ?CameraEditXrel@@3MA
	mov	DWORD PTR _vec$[ebp], eax

; 542  : 				vec.v[Y] = CameraEditYrel;

	mov	eax, DWORD PTR ?CameraEditYrel@@3MA
	mov	DWORD PTR _vec$[ebp+4], eax

; 543  : 				vec.v[Z] = -MouseYrel * vec.v[Z] / RenderSettings.GeomPers + CameraEditZrel;

	fld	DWORD PTR ?MouseYrel@@3MA		; MouseYrel
	fchs
	fmul	DWORD PTR _vec$[ebp+8]
	fdiv	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A
	fadd	DWORD PTR ?CameraEditZrel@@3MA		; CameraEditZrel
	fstp	DWORD PTR _vec$[ebp+8]
$L81415:

; 544  : 				break;
; 545  : 		}
; 546  : 
; 547  : 		if (EditCamNodeAxisType == 1) 

	cmp	DWORD PTR _EditCamNodeAxisType, 1
	jne	SHORT $L81424

; 548  : 		{
; 549  : 			SetVector(&vec2, vec.v[X], vec.v[Y], vec.v[Z]);

	mov	eax, DWORD PTR _vec$[ebp]
	mov	DWORD PTR _vec2$[ebp], eax
	mov	eax, DWORD PTR _vec$[ebp+4]
	mov	DWORD PTR _vec2$[ebp+4], eax
	mov	eax, DWORD PTR _vec$[ebp+8]
	mov	DWORD PTR _vec2$[ebp+8], eax

; 550  : 		}
; 551  : 		else

	jmp	SHORT $L81425
$L81424:

; 552  : 		{
; 553  : 			RotVector(&CAM_MainCamera->WMatrix, &vec, &vec2);

	lea	eax, DWORD PTR _vec2$[ebp]
	push	eax
	lea	ecx, DWORD PTR _vec$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	add	edx, 16					; 00000010H
	push	edx
	call	?RotVector@@YAXPATMatrixUnion@@PAUVectorStruct@@1@Z ; RotVector
	add	esp, 12					; 0000000cH
$L81425:

; 554  : 		}
; 555  : 
; 556  : 		CurrentEditCamNode->Pos.v[X] += vec2.v[X];

	mov	eax, DWORD PTR ?CurrentEditCamNode@@3PAU_EDIT_CAM_NODE@@A ; CurrentEditCamNode
	fld	DWORD PTR _vec2$[ebp]
	fadd	DWORD PTR [eax+8]
	mov	ecx, DWORD PTR ?CurrentEditCamNode@@3PAU_EDIT_CAM_NODE@@A ; CurrentEditCamNode
	fstp	DWORD PTR [ecx+8]

; 557  : 		CurrentEditCamNode->Pos.v[Y] += vec2.v[Y];

	mov	eax, DWORD PTR ?CurrentEditCamNode@@3PAU_EDIT_CAM_NODE@@A ; CurrentEditCamNode
	fld	DWORD PTR _vec2$[ebp+4]
	fadd	DWORD PTR [eax+12]
	mov	ecx, DWORD PTR ?CurrentEditCamNode@@3PAU_EDIT_CAM_NODE@@A ; CurrentEditCamNode
	fstp	DWORD PTR [ecx+12]

; 558  : 		CurrentEditCamNode->Pos.v[Z] += vec2.v[Z];

	mov	eax, DWORD PTR ?CurrentEditCamNode@@3PAU_EDIT_CAM_NODE@@A ; CurrentEditCamNode
	fld	DWORD PTR _vec2$[ebp+8]
	fadd	DWORD PTR [eax+16]
	mov	ecx, DWORD PTR ?CurrentEditCamNode@@3PAU_EDIT_CAM_NODE@@A ; CurrentEditCamNode
	fstp	DWORD PTR [ecx+16]
$L81358:

; 559  : 	}
; 560  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
$L81621:
	DD	$L81418
	DD	$L81419
	DD	$L81420
	DD	$L81421
	DD	$L81422
	DD	$L81423
?EditCamNodes@@YAXXZ ENDP				; EditCamNodes
; Function compile flags: /Odt /ZI
_TEXT	ENDS
;	COMDAT ?AllocEditCamNode@@YAPAU_EDIT_CAM_NODE@@XZ
_TEXT	SEGMENT
tv68 = -68						; size = 4
?AllocEditCamNode@@YAPAU_EDIT_CAM_NODE@@XZ PROC NEAR	; AllocEditCamNode, COMDAT

; 567  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 568  : 
; 569  : // full?
; 570  : 
; 571  : 	if (EditCamNodeNum >= MAX_EDIT_CAM_NODES)

	cmp	DWORD PTR _EditCamNodeNum, 1024		; 00000400H
	jl	SHORT $L81429

; 572  : 		return NULL;

	xor	eax, eax
	jmp	SHORT $L81428
$L81429:

; 573  : 
; 574  : // inc counter, return slot
; 575  : 
; 576  : 	return &EditCamNode[EditCamNodeNum++];

	mov	eax, DWORD PTR _EditCamNodeNum
	imul	eax, 28					; 0000001cH
	add	eax, DWORD PTR _EditCamNode
	mov	DWORD PTR tv68[ebp], eax
	mov	ecx, DWORD PTR _EditCamNodeNum
	add	ecx, 1
	mov	DWORD PTR _EditCamNodeNum, ecx
	mov	eax, DWORD PTR tv68[ebp]
$L81428:

; 577  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?AllocEditCamNode@@YAPAU_EDIT_CAM_NODE@@XZ ENDP		; AllocEditCamNode
; Function compile flags: /Odt /ZI
_TEXT	ENDS
;	COMDAT ?FreeEditCamNode@@YAXPAU_EDIT_CAM_NODE@@@Z
_TEXT	SEGMENT
_i$ = -8						; size = 4
_idx$ = -4						; size = 4
_node$ = 8						; size = 4
?FreeEditCamNode@@YAXPAU_EDIT_CAM_NODE@@@Z PROC NEAR	; FreeEditCamNode, COMDAT

; 584  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi

; 585  : 	long idx, i;
; 586  : 
; 587  : // null any links that reference to this node
; 588  : 
; 589  : 	for (i = 0 ; i < EditCamNodeNum ; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $L81435
$L81436:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$L81435:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _EditCamNodeNum
	jge	SHORT $L81437

; 590  : 	{
; 591  : 		if (EditCamNode[i].Link == node)

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 28					; 0000001cH
	mov	ecx, DWORD PTR _EditCamNode
	mov	edx, DWORD PTR [ecx+eax+20]
	cmp	edx, DWORD PTR _node$[ebp]
	jne	SHORT $L81438

; 592  : 		{
; 593  : 			EditCamNode[i].Link = NULL;

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 28					; 0000001cH
	mov	ecx, DWORD PTR _EditCamNode
	mov	DWORD PTR [ecx+eax+20], 0

; 594  : 			EditCamNode[i].Type = CAMNODE_STATIC;

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 28					; 0000001cH
	mov	ecx, DWORD PTR _EditCamNode
	mov	DWORD PTR [ecx+eax], 1
$L81438:

; 595  : 
; 596  : 		}
; 597  : 	}

	jmp	SHORT $L81436
$L81437:

; 598  : 
; 599  : // find index into list
; 600  : 
; 601  : 	idx = (long)(node - EditCamNode);

	mov	eax, DWORD PTR _node$[ebp]
	sub	eax, DWORD PTR _EditCamNode
	cdq
	mov	ecx, 28					; 0000001cH
	idiv	ecx
	mov	DWORD PTR _idx$[ebp], eax

; 602  : 
; 603  : // copy all higher nodes down one
; 604  : 
; 605  : 	for (i = idx ; i < EditCamNodeNum - 1; i++)

	mov	eax, DWORD PTR _idx$[ebp]
	mov	DWORD PTR _i$[ebp], eax
	jmp	SHORT $L81440
$L81441:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$L81440:
	mov	eax, DWORD PTR _EditCamNodeNum
	sub	eax, 1
	cmp	DWORD PTR _i$[ebp], eax
	jge	SHORT $L81442

; 606  : 	{
; 607  : 		EditCamNode[i] = EditCamNode[i + 1];

	mov	esi, DWORD PTR _i$[ebp]
	add	esi, 1
	imul	esi, 28					; 0000001cH
	add	esi, DWORD PTR _EditCamNode
	mov	edi, DWORD PTR _i$[ebp]
	imul	edi, 28					; 0000001cH
	add	edi, DWORD PTR _EditCamNode
	mov	ecx, 7
	rep movsd

; 608  : 	}

	jmp	SHORT $L81441
$L81442:

; 609  : 
; 610  : // dec num
; 611  : 
; 612  : 	EditCamNodeNum--;

	mov	eax, DWORD PTR _EditCamNodeNum
	sub	eax, 1
	mov	DWORD PTR _EditCamNodeNum, eax

; 613  : 
; 614  : // fix any links that reference higher nodes
; 615  : 
; 616  : 	for (i = 0 ; i < EditCamNodeNum ; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $L81443
$L81444:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$L81443:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _EditCamNodeNum
	jge	SHORT $L81432

; 617  : 	{
; 618  : 		if (EditCamNode[i].Link > node) EditCamNode[i].Link--;

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 28					; 0000001cH
	mov	ecx, DWORD PTR _EditCamNode
	mov	edx, DWORD PTR [ecx+eax+20]
	cmp	edx, DWORD PTR _node$[ebp]
	jbe	SHORT $L81446
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 28					; 0000001cH
	mov	ecx, DWORD PTR _EditCamNode
	mov	edx, DWORD PTR [ecx+eax+20]
	sub	edx, 28					; 0000001cH
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 28					; 0000001cH
	mov	ecx, DWORD PTR _EditCamNode
	mov	DWORD PTR [ecx+eax+20], edx
$L81446:

; 619  : 	}

	jmp	SHORT $L81444
$L81432:

; 620  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?FreeEditCamNode@@YAXPAU_EDIT_CAM_NODE@@@Z ENDP		; FreeEditCamNode
_TEXT	ENDS
PUBLIC	_sqrtf
; Function compile flags: /Odt /ZI
; File c:\program files\microsoft visual studio .net 2003\vc7\include\math.h
;	COMDAT ?sqrt@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?sqrt@@YAMM@Z PROC NEAR					; sqrt, COMDAT

; 579  :         {return (sqrtf(_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR __X$[ebp]
	push	eax
	call	_sqrtf
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?sqrt@@YAMM@Z ENDP					; sqrt
_TEXT	ENDS
EXTRN	_sqrt:NEAR
; Function compile flags: /Odt /ZI
;	COMDAT _sqrtf
_TEXT	SEGMENT
tv70 = -68						; size = 4
__X$ = 8						; size = 4
_sqrtf	PROC NEAR					; COMDAT

; 470  :         {return ((float)sqrt((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	fld	DWORD PTR __X$[ebp]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	call	_sqrt
	add	esp, 8
	fst	DWORD PTR tv70[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_sqrtf	ENDP
_TEXT	ENDS
END
