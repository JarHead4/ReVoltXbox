; Listing generated by Microsoft (R) Optimizing Compiler Version 13.10.3077 

	TITLE	.\source\editai.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT PARA USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_0IL@GNOHNJEH@c?3?2documents?5and?5settings?2jarhea@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CG@OOPHMJDL@Can?8t?5alloc?5memory?5for?5edit?5AI?5n@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_02JDPG@rb?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_02GMLFBBN@wb?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_03KJMJHDME@fa?9?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BE@MOLHMEGO@Saved?5AI?5node?5File?3?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0P@BMAFAPPD@edit?2ainode2?4m?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0P@OLAKABN@edit?2ainode1?4m?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_03HCJNGPAC@fan?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_03JALODAI@?$CFld?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_03CCLAEDDF@Yes?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_02JINPPBEP@No?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0N@GOMJDPPC@Priority?3?5?$CFs?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0P@BHNFENKG@Start?5Node?3?5?$CFs?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BA@DGJADCCO@Green?5Speed?3?5?$CFd?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0O@FCOBGDBL@Red?5Speed?3?5?$CFd?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BB@GEENKGKJ@Racing?5Speed?3?5?$CFd?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BB@MPELAHJF@Centre?5Speed?3?5?$CFd?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0P@GAGFGOMG@Track?5dist?3?5?$CFd?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _IsEqualGUID
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _==
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _acosl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _asinl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _atanl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _atan2l
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _ceill
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _cosl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _coshl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _expl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _fabsl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _floorl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _fmodl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _frexpl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _ldexpl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _logl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _log10l
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _modfl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _powl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _sinl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _sinhl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _sqrtl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _tanl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _tanhl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _frexpf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _ldexpf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _acosf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _asinf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _atanf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _atan2f
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _ceilf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _cosf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _coshf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _expf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _fabsf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _floorf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _fmodf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _logf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _log10f
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _modff
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _powf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _sinf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _sinhf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _sqrtf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _tanf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _tanhf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?sin@@YAMM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?sqrt@@YAMM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?InitEditAiNodes@@YAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?KillEditAiNodes@@YAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?LoadEditAiNodes@@YAXPAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CalcEditAiNodeDistances@@YAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CalcOneNodeDistance@@YAXPAU_AINODE@@J@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SaveEditAiNodes@@YAXPAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?LoadEditAiNodeModels@@YAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?FreeEditAiNodeModels@@YAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AllocEditAiNode@@YAPAU_AINODE@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?FreeEditAiNode@@YAXPAU_AINODE@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?EditAiNodes@@YAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DrawAiNodes@@YAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DisplayAiNodeInfo@@YAXPAU_AINODE@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetEditNodePos@@YAXPAUVectorStruct@@MM0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Pow_int@N@@YANNH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Pow_int@H@@YAHHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Pow_int@M@@YAMMH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Pow_int@O@@YAOOH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?__LINE__Var@?1??KillEditAiNodes@@YAXXZ@4JA
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??InitEditAiNodes@@YAXXZ@4JA
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
sxdata	SEGMENT DWORD USE32 'SXDATA'
sxdata	ENDS
FLAT	GROUP _DATA, CONST, _BSS
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBCD
INCLUDELIB OLDNAMES

PUBLIC	?CurrentEditAiNode@@3PAU_AINODE@@A		; CurrentEditAiNode
PUBLIC	?LastEditAiNode@@3PAU_AINODE@@A			; LastEditAiNode
PUBLIC	?EditAiNodeNum@@3JA				; EditAiNodeNum
PUBLIC	?EditAiNode@@3PAU_AINODE@@A			; EditAiNode
PUBLIC	?EditAiNodeModel@@3PAUMODEL@@A			; EditAiNodeModel
_BSS	SEGMENT
?CurrentEditAiNode@@3PAU_AINODE@@A DD 01H DUP (?)	; CurrentEditAiNode
?LastEditAiNode@@3PAU_AINODE@@A DD 01H DUP (?)		; LastEditAiNode
?EditAiNodeNum@@3JA DD 01H DUP (?)			; EditAiNodeNum
?EditAiNode@@3PAU_AINODE@@A DD 01H DUP (?)		; EditAiNode
?EditAiNodeModel@@3PAUMODEL@@A DB 078H DUP (?)		; EditAiNodeModel
_BSS	ENDS
PUBLIC	?InitEditAiNodes@@YAXXZ				; InitEditAiNodes
PUBLIC	?__LINE__Var@?1??InitEditAiNodes@@YAXXZ@4JA	; `InitEditAiNodes'::`2'::__LINE__Var
PUBLIC	??_C@_0IL@GNOHNJEH@c?3?2documents?5and?5settings?2jarhea@ ; `string'
PUBLIC	??_C@_0CG@OOPHMJDL@Can?8t?5alloc?5memory?5for?5edit?5AI?5n@ ; `string'
EXTRN	?DebugMalloc@@YAPAXIHPAD@Z:NEAR			; DebugMalloc
EXTRN	?Box@@YAJPAD0J@Z:NEAR				; Box
EXTRN	?QuitGame@@3DA:BYTE				; QuitGame
;	COMDAT ??_C@_0IL@GNOHNJEH@c?3?2documents?5and?5settings?2jarhea@
; File c:\documents and settings\jarhead\desktop\shit to display my love for xbox revolt and fuck you borman-ness\revolt source\source\editai.cpp
CONST	SEGMENT
??_C@_0IL@GNOHNJEH@c?3?2documents?5and?5settings?2jarhea@ DB 'c:\document'
	DB	's and settings\jarhead\desktop\shit to display my love for xb'
	DB	'ox revolt and fuck you borman-ness\revolt source\source\edita'
	DB	'i.cpp', 00H					; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??InitEditAiNodes@@YAXXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?1??InitEditAiNodes@@YAXXZ@4JA DD 020H	; `InitEditAiNodes'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0CG@OOPHMJDL@Can?8t?5alloc?5memory?5for?5edit?5AI?5n@
CONST	SEGMENT
??_C@_0CG@OOPHMJDL@Can?8t?5alloc?5memory?5for?5edit?5AI?5n@ DB 'Can''t al'
	DB	'loc memory for edit AI nodes!', 00H		; `string'
; Function compile flags: /Odt /ZI
CONST	ENDS
;	COMDAT ?InitEditAiNodes@@YAXXZ
_TEXT	SEGMENT
?InitEditAiNodes@@YAXXZ PROC NEAR			; InitEditAiNodes, COMDAT

; 32   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 33   : 	EditAiNode = (AINODE*)malloc(sizeof(AINODE) * MAX_AINODES);

	push	OFFSET FLAT:??_C@_0IL@GNOHNJEH@c?3?2documents?5and?5settings?2jarhea@
	mov	eax, DWORD PTR ?__LINE__Var@?1??InitEditAiNodes@@YAXXZ@4JA
	add	eax, 1
	push	eax
	push	106496					; 0001a000H
	call	?DebugMalloc@@YAPAXIHPAD@Z		; DebugMalloc
	add	esp, 12					; 0000000cH
	mov	DWORD PTR ?EditAiNode@@3PAU_AINODE@@A, eax ; EditAiNode

; 34   : 	if (!EditAiNode)

	cmp	DWORD PTR ?EditAiNode@@3PAU_AINODE@@A, 0 ; EditAiNode
	jne	SHORT $L81371

; 35   : 	{
; 36   : 		Box(NULL, "Can't alloc memory for edit AI nodes!", MB_OK);

	push	0
	push	OFFSET FLAT:??_C@_0CG@OOPHMJDL@Can?8t?5alloc?5memory?5for?5edit?5AI?5n@
	push	0
	call	?Box@@YAJPAD0J@Z			; Box
	add	esp, 12					; 0000000cH

; 37   : 		QuitGame = TRUE;

	mov	BYTE PTR ?QuitGame@@3DA, 1		; QuitGame
$L81371:

; 38   : 	}
; 39   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?InitEditAiNodes@@YAXXZ ENDP				; InitEditAiNodes
_TEXT	ENDS
PUBLIC	?KillEditAiNodes@@YAXXZ				; KillEditAiNodes
PUBLIC	?__LINE__Var@?1??KillEditAiNodes@@YAXXZ@4JA	; `KillEditAiNodes'::`2'::__LINE__Var
EXTRN	?DebugFree@@YAXPAXHPAD@Z:NEAR			; DebugFree
;	COMDAT ?__LINE__Var@?1??KillEditAiNodes@@YAXXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?1??KillEditAiNodes@@YAXXZ@4JA DD 02eH	; `KillEditAiNodes'::`2'::__LINE__Var
; Function compile flags: /Odt /ZI
_DATA	ENDS
;	COMDAT ?KillEditAiNodes@@YAXXZ
_TEXT	SEGMENT
?KillEditAiNodes@@YAXXZ PROC NEAR			; KillEditAiNodes, COMDAT

; 46   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 47   : 	free(EditAiNode);

	push	OFFSET FLAT:??_C@_0IL@GNOHNJEH@c?3?2documents?5and?5settings?2jarhea@
	mov	eax, DWORD PTR ?__LINE__Var@?1??KillEditAiNodes@@YAXXZ@4JA
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR ?EditAiNode@@3PAU_AINODE@@A ; EditAiNode
	push	ecx
	call	?DebugFree@@YAXPAXHPAD@Z		; DebugFree
	add	esp, 12					; 0000000cH

; 48   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?KillEditAiNodes@@YAXXZ ENDP				; KillEditAiNodes
_TEXT	ENDS
PUBLIC	?LoadEditAiNodes@@YAXPAD@Z			; LoadEditAiNodes
PUBLIC	??_C@_02JDPG@rb?$AA@				; `string'
PUBLIC	??_C@_02GMLFBBN@wb?$AA@				; `string'
EXTRN	_fclose:NEAR
EXTRN	_fopen:NEAR
EXTRN	_fread:NEAR
EXTRN	_fwrite:NEAR
EXTRN	?EditScale@@3MA:DWORD				; EditScale
EXTRN	__fltused:NEAR
_BSS	SEGMENT
_EditAiStartNode DD 01H DUP (?)
_EditAiNodeTotalDist DD 01H DUP (?)
_BSS	ENDS
;	COMDAT ??_C@_02JDPG@rb?$AA@
CONST	SEGMENT
??_C@_02JDPG@rb?$AA@ DB 'rb', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02GMLFBBN@wb?$AA@
CONST	SEGMENT
??_C@_02GMLFBBN@wb?$AA@ DB 'wb', 00H			; `string'
; Function compile flags: /Odt /ZI
CONST	ENDS
;	COMDAT ?LoadEditAiNodes@@YAXPAD@Z
_TEXT	SEGMENT
_fan$ = -88						; size = 76
_fp$ = -12						; size = 4
_j$ = -8						; size = 4
_i$ = -4						; size = 4
_file$ = 8						; size = 4
?LoadEditAiNodes@@YAXPAD@Z PROC NEAR			; LoadEditAiNodes, COMDAT

; 55   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 152				; 00000098H
	push	ebx
	push	esi
	push	edi

; 56   : 	long i, j;
; 57   : 	FILE *fp;
; 58   : 	FILE_AINODE fan;
; 59   : 
; 60   : // open ainode file
; 61   : 
; 62   : 	fp = fopen(file, "rb");

	push	OFFSET FLAT:??_C@_02JDPG@rb?$AA@
	mov	eax, DWORD PTR _file$[ebp]
	push	eax
	call	_fopen
	add	esp, 8
	mov	DWORD PTR _fp$[ebp], eax

; 63   : 
; 64   : // if not there create empty one
; 65   : 
; 66   : 	if (!fp)

	cmp	DWORD PTR _fp$[ebp], 0
	jne	SHORT $L81390

; 67   : 	{
; 68   : 		fp = fopen(file, "wb");

	push	OFFSET FLAT:??_C@_02GMLFBBN@wb?$AA@
	mov	eax, DWORD PTR _file$[ebp]
	push	eax
	call	_fopen
	add	esp, 8
	mov	DWORD PTR _fp$[ebp], eax

; 69   : 		if (!fp) return;

	cmp	DWORD PTR _fp$[ebp], 0
	jne	SHORT $L81392
	jmp	$L81384
$L81392:

; 70   : 		i = 0;

	mov	DWORD PTR _i$[ebp], 0

; 71   : 		fwrite(&i, sizeof(i), 1, fp);

	mov	eax, DWORD PTR _fp$[ebp]
	push	eax
	push	1
	push	4
	lea	ecx, DWORD PTR _i$[ebp]
	push	ecx
	call	_fwrite
	add	esp, 16					; 00000010H

; 72   : 		fclose(fp);

	mov	eax, DWORD PTR _fp$[ebp]
	push	eax
	call	_fclose
	add	esp, 4

; 73   : 		fp = fopen(file, "rb");

	push	OFFSET FLAT:??_C@_02JDPG@rb?$AA@
	mov	eax, DWORD PTR _file$[ebp]
	push	eax
	call	_fopen
	add	esp, 8
	mov	DWORD PTR _fp$[ebp], eax

; 74   : 		if (!fp) return;

	cmp	DWORD PTR _fp$[ebp], 0
	jne	SHORT $L81390
	jmp	$L81384
$L81390:

; 75   : 	}
; 76   : 
; 77   : // loop thru all ainodes
; 78   : 
; 79   : 	fread(&EditAiNodeNum, sizeof(EditAiNodeNum), 1, fp);

	mov	eax, DWORD PTR _fp$[ebp]
	push	eax
	push	1
	push	4
	push	OFFSET FLAT:?EditAiNodeNum@@3JA		; EditAiNodeNum
	call	_fread
	add	esp, 16					; 00000010H

; 80   : 
; 81   : 	for (i = 0 ; i < EditAiNodeNum ; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $L81394
$L81395:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$L81394:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR ?EditAiNodeNum@@3JA	; EditAiNodeNum
	jge	$L81396

; 82   : 	{
; 83   : 
; 84   : // load one file ainode
; 85   : 
; 86   : 		fread(&fan, sizeof(fan), 1, fp);

	mov	eax, DWORD PTR _fp$[ebp]
	push	eax
	push	1
	push	76					; 0000004cH
	lea	ecx, DWORD PTR _fan$[ebp]
	push	ecx
	call	_fread
	add	esp, 16					; 00000010H

; 87   : 
; 88   : 		VecMulScalar(&fan.Node[0].Pos, EditScale);

	fld	DWORD PTR _fan$[ebp+48]
	fmul	DWORD PTR ?EditScale@@3MA		; EditScale
	fstp	DWORD PTR _fan$[ebp+48]
	fld	DWORD PTR _fan$[ebp+52]
	fmul	DWORD PTR ?EditScale@@3MA		; EditScale
	fstp	DWORD PTR _fan$[ebp+52]
	fld	DWORD PTR _fan$[ebp+56]
	fmul	DWORD PTR ?EditScale@@3MA		; EditScale
	fstp	DWORD PTR _fan$[ebp+56]

; 89   : 		VecMulScalar(&fan.Node[1].Pos, EditScale);

	fld	DWORD PTR _fan$[ebp+64]
	fmul	DWORD PTR ?EditScale@@3MA		; EditScale
	fstp	DWORD PTR _fan$[ebp+64]
	fld	DWORD PTR _fan$[ebp+68]
	fmul	DWORD PTR ?EditScale@@3MA		; EditScale
	fstp	DWORD PTR _fan$[ebp+68]
	fld	DWORD PTR _fan$[ebp+72]
	fmul	DWORD PTR ?EditScale@@3MA		; EditScale
	fstp	DWORD PTR _fan$[ebp+72]

; 90   : 
; 91   : // setup edit ainode
; 92   : 
; 93   : 		EditAiNode[i].Node[0] = fan.Node[0];

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 104				; 00000068H
	mov	ecx, DWORD PTR ?EditAiNode@@3PAU_AINODE@@A ; EditAiNode
	lea	edx, DWORD PTR [ecx+eax+36]
	mov	eax, DWORD PTR _fan$[ebp+44]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR _fan$[ebp+48]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR _fan$[ebp+52]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR _fan$[ebp+56]
	mov	DWORD PTR [edx+12], ecx

; 94   : 		EditAiNode[i].Node[1] = fan.Node[1];

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 104				; 00000068H
	mov	ecx, DWORD PTR ?EditAiNode@@3PAU_AINODE@@A ; EditAiNode
	lea	edx, DWORD PTR [ecx+eax+52]
	mov	eax, DWORD PTR _fan$[ebp+60]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR _fan$[ebp+64]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR _fan$[ebp+68]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR _fan$[ebp+72]
	mov	DWORD PTR [edx+12], ecx

; 95   : 
; 96   : 		EditAiNode[i].Priority = fan.Priority;

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 104				; 00000068H
	mov	ecx, DWORD PTR ?EditAiNode@@3PAU_AINODE@@A ; EditAiNode
	mov	dl, BYTE PTR _fan$[ebp]
	mov	BYTE PTR [ecx+eax], dl

; 97   : 		EditAiNode[i].StartNode = fan.StartNode;

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 104				; 00000068H
	mov	ecx, DWORD PTR ?EditAiNode@@3PAU_AINODE@@A ; EditAiNode
	mov	dl, BYTE PTR _fan$[ebp+1]
	mov	BYTE PTR [ecx+eax+1], dl

; 98   : 		EditAiNode[i].RacingLine = fan.RacingLine;

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 104				; 00000068H
	mov	ecx, DWORD PTR ?EditAiNode@@3PAU_AINODE@@A ; EditAiNode
	mov	edx, DWORD PTR _fan$[ebp+4]
	mov	DWORD PTR [ecx+eax+4], edx

; 99   : 		EditAiNode[i].RacingLineSpeed = fan.RacingLineSpeed;

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 104				; 00000068H
	mov	ecx, DWORD PTR ?EditAiNode@@3PAU_AINODE@@A ; EditAiNode
	mov	edx, DWORD PTR _fan$[ebp+20]
	mov	DWORD PTR [ecx+eax+12], edx

; 100  : 		EditAiNode[i].CentreSpeed = fan.CentreSpeed;

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 104				; 00000068H
	mov	ecx, DWORD PTR ?EditAiNode@@3PAU_AINODE@@A ; EditAiNode
	mov	edx, DWORD PTR _fan$[ebp+24]
	mov	DWORD PTR [ecx+eax+16], edx

; 101  : 		EditAiNode[i].FinishDist = fan.FinishDist;

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 104				; 00000068H
	mov	ecx, DWORD PTR ?EditAiNode@@3PAU_AINODE@@A ; EditAiNode
	mov	edx, DWORD PTR _fan$[ebp+8]
	mov	DWORD PTR [ecx+eax+8], edx

; 102  : 
; 103  : 		for (j = 0 ; j < MAX_AINODE_LINKS ; j++)

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $L81397
$L81398:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$L81397:
	cmp	DWORD PTR _j$[ebp], 2
	jge	$L81399

; 104  : 		{
; 105  : 			if (fan.Prev[j] != -1)

	mov	eax, DWORD PTR _j$[ebp]
	cmp	DWORD PTR _fan$[ebp+eax*4+28], -1
	je	SHORT $L81400

; 106  : 				EditAiNode[i].Prev[j] = EditAiNode + fan.Prev[j];

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _fan$[ebp+eax*4+28]
	imul	ecx, 104				; 00000068H
	add	ecx, DWORD PTR ?EditAiNode@@3PAU_AINODE@@A ; EditAiNode
	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 104				; 00000068H
	add	edx, DWORD PTR ?EditAiNode@@3PAU_AINODE@@A ; EditAiNode
	mov	eax, DWORD PTR _j$[ebp]
	mov	DWORD PTR [edx+eax*4+20], ecx

; 107  : 			else

	jmp	SHORT $L81401
$L81400:

; 108  : 				EditAiNode[i].Prev[j] = NULL;

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 104				; 00000068H
	add	eax, DWORD PTR ?EditAiNode@@3PAU_AINODE@@A ; EditAiNode
	mov	ecx, DWORD PTR _j$[ebp]
	mov	DWORD PTR [eax+ecx*4+20], 0
$L81401:

; 109  : 
; 110  : 			if (fan.Next[j] != -1)

	mov	eax, DWORD PTR _j$[ebp]
	cmp	DWORD PTR _fan$[ebp+eax*4+36], -1
	je	SHORT $L81402

; 111  : 				EditAiNode[i].Next[j] = EditAiNode + fan.Next[j];

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _fan$[ebp+eax*4+36]
	imul	ecx, 104				; 00000068H
	add	ecx, DWORD PTR ?EditAiNode@@3PAU_AINODE@@A ; EditAiNode
	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 104				; 00000068H
	add	edx, DWORD PTR ?EditAiNode@@3PAU_AINODE@@A ; EditAiNode
	mov	eax, DWORD PTR _j$[ebp]
	mov	DWORD PTR [edx+eax*4+28], ecx

; 112  : 			else

	jmp	SHORT $L81403
$L81402:

; 113  : 				EditAiNode[i].Next[j] = NULL;

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 104				; 00000068H
	add	eax, DWORD PTR ?EditAiNode@@3PAU_AINODE@@A ; EditAiNode
	mov	ecx, DWORD PTR _j$[ebp]
	mov	DWORD PTR [eax+ecx*4+28], 0
$L81403:

; 114  : 		}

	jmp	$L81398
$L81399:

; 115  : 	}

	jmp	$L81395
$L81396:

; 116  : 
; 117  : // load start node
; 118  : 
; 119  : 	fread(&EditAiStartNode, sizeof(EditAiStartNode), 1, fp);

	mov	eax, DWORD PTR _fp$[ebp]
	push	eax
	push	1
	push	4
	push	OFFSET FLAT:_EditAiStartNode
	call	_fread
	add	esp, 16					; 00000010H

; 120  : 
; 121  : // load total dist
; 122  : 
; 123  : 	fread(&EditAiNodeTotalDist, sizeof(EditAiNodeTotalDist), 1, fp);

	mov	eax, DWORD PTR _fp$[ebp]
	push	eax
	push	1
	push	4
	push	OFFSET FLAT:_EditAiNodeTotalDist
	call	_fread
	add	esp, 16					; 00000010H

; 124  : 
; 125  : // close ainode file
; 126  : 
; 127  : 	fclose(fp);

	mov	eax, DWORD PTR _fp$[ebp]
	push	eax
	call	_fclose
	add	esp, 4
$L81384:

; 128  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?LoadEditAiNodes@@YAXPAD@Z ENDP				; LoadEditAiNodes
_TEXT	ENDS
PUBLIC	?sqrt@@YAMM@Z					; sqrt
PUBLIC	?CalcEditAiNodeDistances@@YAXXZ			; CalcEditAiNodeDistances
PUBLIC	?CalcOneNodeDistance@@YAXPAU_AINODE@@J@Z	; CalcOneNodeDistance
PUBLIC	__real@3f000000
EXTRN	?LEV_StartPos@@3UVectorStruct@@A:BYTE		; LEV_StartPos
EXTRN	?AiZones@@3PAUAIZONE@@A:DWORD			; AiZones
EXTRN	?AiZoneHeaders@@3PAUAIZONE_HEADER@@A:DWORD	; AiZoneHeaders
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
; Function compile flags: /Odt /ZI
CONST	ENDS
;	COMDAT ?CalcEditAiNodeDistances@@YAXXZ
_TEXT	SEGMENT
_ndist$ = -52						; size = 4
_dist$ = -48						; size = 4
_zone$ = -44						; size = 4
_vec$ = -40						; size = 12
_centre$ = -28						; size = 12
_flag$ = -16						; size = 4
_k$ = -12						; size = 4
_j$ = -8						; size = 4
_i$ = -4						; size = 4
?CalcEditAiNodeDistances@@YAXXZ PROC NEAR		; CalcEditAiNodeDistances, COMDAT

; 135  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 116				; 00000074H
	push	ebx
	push	esi
	push	edi

; 136  : 	long i, j, k, flag;
; 137  : 	VEC centre, vec;
; 138  : 	AIZONE *zone;
; 139  : 	REAL dist, ndist;
; 140  : 
; 141  : // find start node
; 142  : 
; 143  : 	if (!AiZones)

	cmp	DWORD PTR ?AiZones@@3PAUAIZONE@@A, 0	; AiZones
	jne	SHORT $L81416

; 144  : 	{
; 145  : 		EditAiStartNode = 0;

	mov	DWORD PTR _EditAiStartNode, 0

; 146  : 	}
; 147  : 	else

	jmp	$L81417
$L81416:

; 148  : 	{
; 149  : 		ndist = 1000000.0f;

	mov	DWORD PTR _ndist$[ebp], 1232348160	; 49742400H

; 150  : 		for (i = 0 ; i < EditAiNodeNum ; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $L81418
$L81419:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$L81418:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR ?EditAiNodeNum@@3JA	; EditAiNodeNum
	jge	$L81417

; 151  : 		{
; 152  : 
; 153  : // get centre point
; 154  : 
; 155  : 			AddVector(&EditAiNode[i].Node[0].Pos, &EditAiNode[i].Node[1].Pos, &centre);

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 104				; 00000068H
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 104				; 00000068H
	mov	edx, DWORD PTR ?EditAiNode@@3PAU_AINODE@@A ; EditAiNode
	mov	esi, DWORD PTR ?EditAiNode@@3PAU_AINODE@@A ; EditAiNode
	fld	DWORD PTR [edx+eax+40]
	fadd	DWORD PTR [esi+ecx+56]
	fstp	DWORD PTR _centre$[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 104				; 00000068H
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 104				; 00000068H
	mov	edx, DWORD PTR ?EditAiNode@@3PAU_AINODE@@A ; EditAiNode
	mov	esi, DWORD PTR ?EditAiNode@@3PAU_AINODE@@A ; EditAiNode
	fld	DWORD PTR [edx+eax+44]
	fadd	DWORD PTR [esi+ecx+60]
	fstp	DWORD PTR _centre$[ebp+4]
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 104				; 00000068H
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 104				; 00000068H
	mov	edx, DWORD PTR ?EditAiNode@@3PAU_AINODE@@A ; EditAiNode
	mov	esi, DWORD PTR ?EditAiNode@@3PAU_AINODE@@A ; EditAiNode
	fld	DWORD PTR [edx+eax+48]
	fadd	DWORD PTR [esi+ecx+64]
	fstp	DWORD PTR _centre$[ebp+8]

; 156  : 			VecMulScalar(&centre, 0.5f);

	fld	DWORD PTR _centre$[ebp]
	fmul	DWORD PTR __real@3f000000
	fstp	DWORD PTR _centre$[ebp]
	fld	DWORD PTR _centre$[ebp+4]
	fmul	DWORD PTR __real@3f000000
	fstp	DWORD PTR _centre$[ebp+4]
	fld	DWORD PTR _centre$[ebp+8]
	fmul	DWORD PTR __real@3f000000
	fstp	DWORD PTR _centre$[ebp+8]

; 157  : 
; 158  : // in zone id 0?
; 159  : 
; 160  : 			zone = AiZoneHeaders[0].Zones;

	mov	eax, DWORD PTR ?AiZoneHeaders@@3PAUAIZONE_HEADER@@A ; AiZoneHeaders
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _zone$[ebp], ecx

; 161  : 			for (j = 0 ; j < AiZoneHeaders[0].Count ; j++, zone++)

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $L81421
$L81422:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
	mov	ecx, DWORD PTR _zone$[ebp]
	add	ecx, 80					; 00000050H
	mov	DWORD PTR _zone$[ebp], ecx
$L81421:
	mov	eax, DWORD PTR ?AiZoneHeaders@@3PAUAIZONE_HEADER@@A ; AiZoneHeaders
	mov	ecx, DWORD PTR _j$[ebp]
	cmp	ecx, DWORD PTR [eax]
	jge	$L81423

; 162  : 			{
; 163  : 				flag = FALSE;

	mov	DWORD PTR _flag$[ebp], 0

; 164  : 				for (k = 0 ; k < 3 ; k++)

	mov	DWORD PTR _k$[ebp], 0
	jmp	SHORT $L81424
$L81425:
	mov	eax, DWORD PTR _k$[ebp]
	add	eax, 1
	mov	DWORD PTR _k$[ebp], eax
$L81424:
	cmp	DWORD PTR _k$[ebp], 3
	jge	SHORT $L81426

; 165  : 				{
; 166  : 					dist = PlaneDist(&zone->Plane[k], &centre);

	mov	eax, DWORD PTR _k$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _zone$[ebp]
	fld	DWORD PTR _centre$[ebp]
	fmul	DWORD PTR [ecx+eax+28]
	mov	edx, DWORD PTR _k$[ebp]
	shl	edx, 4
	mov	eax, DWORD PTR _zone$[ebp]
	fld	DWORD PTR _centre$[ebp+4]
	fmul	DWORD PTR [eax+edx+32]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR _k$[ebp]
	shl	ecx, 4
	mov	edx, DWORD PTR _zone$[ebp]
	fld	DWORD PTR _centre$[ebp+8]
	fmul	DWORD PTR [edx+ecx+36]
	faddp	ST(1), ST(0)
	mov	eax, DWORD PTR _k$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _zone$[ebp]
	fadd	DWORD PTR [ecx+eax+40]
	fstp	DWORD PTR _dist$[ebp]

; 167  : 					if (dist < -zone->Size[k] || dist > zone->Size[k])

	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _zone$[ebp]
	fld	DWORD PTR [ecx+eax*4+16]
	fchs
	fcomp	DWORD PTR _dist$[ebp]
	fnstsw	ax
	test	ah, 65					; 00000041H
	je	SHORT $L81428
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _zone$[ebp]
	fld	DWORD PTR _dist$[ebp]
	fcomp	DWORD PTR [ecx+eax*4+16]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $L81427
$L81428:

; 168  : 					{
; 169  : 						flag = TRUE;

	mov	DWORD PTR _flag$[ebp], 1

; 170  : 						break;

	jmp	SHORT $L81426
$L81427:

; 171  : 					}
; 172  : 				}

	jmp	$L81425
$L81426:

; 173  : 			}

	jmp	$L81422
$L81423:

; 174  : 
; 175  : // yep, nearest to last zone?
; 176  : 
; 177  : 			if (!flag)

	cmp	DWORD PTR _flag$[ebp], 0
	jne	SHORT $L81429

; 178  : 			{
; 179  : 				SubVector(&LEV_StartPos, &centre, &vec);

	fld	DWORD PTR ?LEV_StartPos@@3UVectorStruct@@A
	fsub	DWORD PTR _centre$[ebp]
	fstp	DWORD PTR _vec$[ebp]
	fld	DWORD PTR ?LEV_StartPos@@3UVectorStruct@@A+4
	fsub	DWORD PTR _centre$[ebp+4]
	fstp	DWORD PTR _vec$[ebp+4]
	fld	DWORD PTR ?LEV_StartPos@@3UVectorStruct@@A+8
	fsub	DWORD PTR _centre$[ebp+8]
	fstp	DWORD PTR _vec$[ebp+8]

; 180  : 				dist = Length(&vec);

	fld	DWORD PTR _vec$[ebp]
	fmul	DWORD PTR _vec$[ebp]
	fld	DWORD PTR _vec$[ebp+4]
	fmul	DWORD PTR _vec$[ebp+4]
	faddp	ST(1), ST(0)
	fld	DWORD PTR _vec$[ebp+8]
	fmul	DWORD PTR _vec$[ebp+8]
	faddp	ST(1), ST(0)
	push	ecx
	fstp	DWORD PTR [esp]
	call	?sqrt@@YAMM@Z				; sqrt
	add	esp, 4
	fstp	DWORD PTR _dist$[ebp]

; 181  : 				if (dist < ndist)

	fld	DWORD PTR _dist$[ebp]
	fcomp	DWORD PTR _ndist$[ebp]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L81429

; 182  : 				{
; 183  : 
; 184  : // yep, save node num
; 185  : 
; 186  : 					ndist = dist;

	mov	eax, DWORD PTR _dist$[ebp]
	mov	DWORD PTR _ndist$[ebp], eax

; 187  : 					EditAiStartNode = i;

	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR _EditAiStartNode, eax
$L81429:

; 188  : 				}
; 189  : 			}
; 190  : 		}

	jmp	$L81419
$L81417:

; 191  : 	}
; 192  : 
; 193  : // calc node distances
; 194  : 
; 195  : 
; 196  : 	EditAiNodeTotalDist = 0.0f;

	mov	DWORD PTR _EditAiNodeTotalDist, 0

; 197  : 
; 198  : 	for (i = 0 ; i < EditAiNodeNum ; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $L81432
$L81433:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$L81432:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR ?EditAiNodeNum@@3JA	; EditAiNodeNum
	jge	SHORT $L81434

; 199  : 	{
; 200  : 		EditAiNode[i].FinishDist = 0.0f;

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 104				; 00000068H
	mov	ecx, DWORD PTR ?EditAiNode@@3PAU_AINODE@@A ; EditAiNode
	mov	DWORD PTR [ecx+eax+8], 0

; 201  : 	}

	jmp	SHORT $L81433
$L81434:

; 202  : 
; 203  : 	EditAiNode[EditAiStartNode].FinishDist = 0.0f;

	mov	eax, DWORD PTR _EditAiStartNode
	imul	eax, 104				; 00000068H
	mov	ecx, DWORD PTR ?EditAiNode@@3PAU_AINODE@@A ; EditAiNode
	mov	DWORD PTR [ecx+eax+8], 0

; 204  : 	CalcOneNodeDistance(&EditAiNode[EditAiStartNode], FALSE);

	push	0
	mov	eax, DWORD PTR _EditAiStartNode
	imul	eax, 104				; 00000068H
	add	eax, DWORD PTR ?EditAiNode@@3PAU_AINODE@@A ; EditAiNode
	push	eax
	call	?CalcOneNodeDistance@@YAXPAU_AINODE@@J@Z ; CalcOneNodeDistance
	add	esp, 8

; 205  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?CalcEditAiNodeDistances@@YAXXZ ENDP			; CalcEditAiNodeDistances
_TEXT	ENDS
PUBLIC	__real@00000000
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
; Function compile flags: /Odt /ZI
CONST	ENDS
;	COMDAT ?CalcOneNodeDistance@@YAXPAU_AINODE@@J@Z
_TEXT	SEGMENT
_dist$ = -32						; size = 4
_vec$ = -28						; size = 12
_centre$ = -16						; size = 12
_i$ = -4						; size = 4
_node$ = 8						; size = 4
_flag$ = 12						; size = 4
?CalcOneNodeDistance@@YAXPAU_AINODE@@J@Z PROC NEAR	; CalcOneNodeDistance, COMDAT

; 212  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 96					; 00000060H
	push	ebx
	push	esi
	push	edi

; 213  : 	long i;
; 214  : 	VEC centre, vec;
; 215  : 	REAL dist;
; 216  : 
; 217  : // quit?
; 218  : 
; 219  : //	if (flag && node == &EditAiNode[EditAiStartNode])
; 220  : //		return;
; 221  : 
; 222  : // get my centre
; 223  : 
; 224  : 	AddVector(&node->Node[0].Pos, &node->Node[1].Pos, &centre)

	mov	eax, DWORD PTR _node$[ebp]
	mov	ecx, DWORD PTR _node$[ebp]
	fld	DWORD PTR [eax+40]
	fadd	DWORD PTR [ecx+56]
	fstp	DWORD PTR _centre$[ebp]
	mov	eax, DWORD PTR _node$[ebp]
	mov	ecx, DWORD PTR _node$[ebp]
	fld	DWORD PTR [eax+44]
	fadd	DWORD PTR [ecx+60]
	fstp	DWORD PTR _centre$[ebp+4]
	mov	eax, DWORD PTR _node$[ebp]
	mov	ecx, DWORD PTR _node$[ebp]
	fld	DWORD PTR [eax+48]
	fadd	DWORD PTR [ecx+64]
	fstp	DWORD PTR _centre$[ebp+8]

; 225  : 	VecMulScalar(&centre, 0.5f);

	fld	DWORD PTR _centre$[ebp]
	fmul	DWORD PTR __real@3f000000
	fstp	DWORD PTR _centre$[ebp]
	fld	DWORD PTR _centre$[ebp+4]
	fmul	DWORD PTR __real@3f000000
	fstp	DWORD PTR _centre$[ebp+4]
	fld	DWORD PTR _centre$[ebp+8]
	fmul	DWORD PTR __real@3f000000
	fstp	DWORD PTR _centre$[ebp+8]

; 226  : 
; 227  : // loop thru links
; 228  : 
; 229  : 	for (i = 0 ; i < MAX_AINODE_LINKS ; i++) if (node->Prev[i])

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $L81443
$L81444:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$L81443:
	cmp	DWORD PTR _i$[ebp], 2
	jge	$L81438
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _node$[ebp]
	cmp	DWORD PTR [ecx+eax*4+20], 0
	je	$L81446

; 230  : 	{
; 231  : 
; 232  : // get dist
; 233  : 
; 234  : 		AddVector(&node->Prev[i]->Node[0].Pos, &node->Prev[i]->Node[1].Pos, &vec)

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _node$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+20]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _node$[ebp]
	mov	eax, DWORD PTR [ecx+eax*4+20]
	fld	DWORD PTR [edx+40]
	fadd	DWORD PTR [eax+56]
	fstp	DWORD PTR _vec$[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _node$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+20]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _node$[ebp]
	mov	eax, DWORD PTR [ecx+eax*4+20]
	fld	DWORD PTR [edx+44]
	fadd	DWORD PTR [eax+60]
	fstp	DWORD PTR _vec$[ebp+4]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _node$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+20]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _node$[ebp]
	mov	eax, DWORD PTR [ecx+eax*4+20]
	fld	DWORD PTR [edx+48]
	fadd	DWORD PTR [eax+64]
	fstp	DWORD PTR _vec$[ebp+8]

; 235  : 		VecMulScalar(&vec, 0.5f);

	fld	DWORD PTR _vec$[ebp]
	fmul	DWORD PTR __real@3f000000
	fstp	DWORD PTR _vec$[ebp]
	fld	DWORD PTR _vec$[ebp+4]
	fmul	DWORD PTR __real@3f000000
	fstp	DWORD PTR _vec$[ebp+4]
	fld	DWORD PTR _vec$[ebp+8]
	fmul	DWORD PTR __real@3f000000
	fstp	DWORD PTR _vec$[ebp+8]

; 236  : 
; 237  : 		SubVector(&vec, &centre, &vec);

	fld	DWORD PTR _vec$[ebp]
	fsub	DWORD PTR _centre$[ebp]
	fstp	DWORD PTR _vec$[ebp]
	fld	DWORD PTR _vec$[ebp+4]
	fsub	DWORD PTR _centre$[ebp+4]
	fstp	DWORD PTR _vec$[ebp+4]
	fld	DWORD PTR _vec$[ebp+8]
	fsub	DWORD PTR _centre$[ebp+8]
	fstp	DWORD PTR _vec$[ebp+8]

; 238  : 		dist = Length(&vec) + node->FinishDist;

	fld	DWORD PTR _vec$[ebp]
	fmul	DWORD PTR _vec$[ebp]
	fld	DWORD PTR _vec$[ebp+4]
	fmul	DWORD PTR _vec$[ebp+4]
	faddp	ST(1), ST(0)
	fld	DWORD PTR _vec$[ebp+8]
	fmul	DWORD PTR _vec$[ebp+8]
	faddp	ST(1), ST(0)
	push	ecx
	fstp	DWORD PTR [esp]
	call	?sqrt@@YAMM@Z				; sqrt
	add	esp, 4
	mov	eax, DWORD PTR _node$[ebp]
	fadd	DWORD PTR [eax+8]
	fstp	DWORD PTR _dist$[ebp]

; 239  : 
; 240  : // start node?
; 241  : 
; 242  : 		if (node->Prev[i] == &EditAiNode[EditAiStartNode])

	mov	eax, DWORD PTR _EditAiStartNode
	imul	eax, 104				; 00000068H
	add	eax, DWORD PTR ?EditAiNode@@3PAU_AINODE@@A ; EditAiNode
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _node$[ebp]
	cmp	DWORD PTR [edx+ecx*4+20], eax
	jne	SHORT $L81448

; 243  : 		{
; 244  : 			EditAiNodeTotalDist = dist;

	mov	eax, DWORD PTR _dist$[ebp]
	mov	DWORD PTR _EditAiNodeTotalDist, eax

; 245  : 			continue;

	jmp	$L81444
$L81448:

; 246  : 		}
; 247  : 
; 248  : // skip if already got lower dist
; 249  : 
; 250  : 		if (dist > node->Prev[i]->FinishDist && node->Prev[i]->FinishDist)

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _node$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+20]
	fld	DWORD PTR _dist$[ebp]
	fcomp	DWORD PTR [edx+8]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $L81449
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _node$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+20]
	fld	DWORD PTR __real@00000000
	fld	DWORD PTR [edx+8]
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jnp	SHORT $L81449

; 251  : 		{
; 252  : 			continue;

	jmp	$L81444
$L81449:

; 253  : 		}
; 254  : 
; 255  : // set dist
; 256  : 
; 257  : 		node->Prev[i]->FinishDist = dist;

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _node$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+20]
	mov	eax, DWORD PTR _dist$[ebp]
	mov	DWORD PTR [edx+8], eax

; 258  : 		CalcOneNodeDistance(node->Prev[i], TRUE);

	push	1
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _node$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+20]
	push	edx
	call	?CalcOneNodeDistance@@YAXPAU_AINODE@@J@Z ; CalcOneNodeDistance
	add	esp, 8
$L81446:

; 259  : 	}
; 260  : }

	jmp	$L81444
$L81438:
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?CalcOneNodeDistance@@YAXPAU_AINODE@@J@Z ENDP		; CalcOneNodeDistance
_TEXT	ENDS
PUBLIC	?SaveEditAiNodes@@YAXPAD@Z			; SaveEditAiNodes
PUBLIC	??_C@_03KJMJHDME@fa?9?$AA@			; `string'
PUBLIC	??_C@_0BE@MOLHMEGO@Saved?5AI?5node?5File?3?$AA@	; `string'
EXTRN	_remove:NEAR
EXTRN	_rename:NEAR
EXTRN	_memcpy:NEAR
EXTRN	_strlen:NEAR
EXTRN	__imp__wsprintfA:NEAR
;	COMDAT ??_C@_03KJMJHDME@fa?9?$AA@
CONST	SEGMENT
??_C@_03KJMJHDME@fa?9?$AA@ DB 'fa-', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@MOLHMEGO@Saved?5AI?5node?5File?3?$AA@
CONST	SEGMENT
??_C@_0BE@MOLHMEGO@Saved?5AI?5node?5File?3?$AA@ DB 'Saved AI node File:', 00H ; `string'
; Function compile flags: /Odt /ZI
CONST	ENDS
;	COMDAT ?SaveEditAiNodes@@YAXPAD@Z
_TEXT	SEGMENT
_bak$ = -344						; size = 256
_fan$ = -88						; size = 76
_fp$ = -12						; size = 4
_j$ = -8						; size = 4
_i$ = -4						; size = 4
_file$ = 8						; size = 4
?SaveEditAiNodes@@YAXPAD@Z PROC NEAR			; SaveEditAiNodes, COMDAT

; 267  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 408				; 00000198H
	push	ebx
	push	esi
	push	edi

; 268  : 	long		i, j;
; 269  : 	FILE		*fp;
; 270  : 	FILE_AINODE fan;
; 271  : 	char		bak[256];
; 272  : 
; 273  : // backup old file
; 274  : 
; 275  : 	memcpy(bak, file, strlen(file) - 3);

	mov	eax, DWORD PTR _file$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	sub	eax, 3
	push	eax
	mov	ecx, DWORD PTR _file$[ebp]
	push	ecx
	lea	edx, DWORD PTR _bak$[ebp]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 276  : 	wsprintf(bak + strlen(file) - 3, "fa-");

	push	OFFSET FLAT:??_C@_03KJMJHDME@fa?9?$AA@
	mov	eax, DWORD PTR _file$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	lea	ecx, DWORD PTR _bak$[ebp+eax-3]
	push	ecx
	call	DWORD PTR __imp__wsprintfA
	add	esp, 8

; 277  : 	remove(bak);

	lea	eax, DWORD PTR _bak$[ebp]
	push	eax
	call	_remove
	add	esp, 4

; 278  : 	rename(file, bak);

	lea	eax, DWORD PTR _bak$[ebp]
	push	eax
	mov	ecx, DWORD PTR _file$[ebp]
	push	ecx
	call	_rename
	add	esp, 8

; 279  : 
; 280  : // open node file
; 281  : 
; 282  : 	fp = fopen(file, "wb");

	push	OFFSET FLAT:??_C@_02GMLFBBN@wb?$AA@
	mov	eax, DWORD PTR _file$[ebp]
	push	eax
	call	_fopen
	add	esp, 8
	mov	DWORD PTR _fp$[ebp], eax

; 283  : 	if (!fp) return;

	cmp	DWORD PTR _fp$[ebp], 0
	jne	SHORT $L81459
	jmp	$L81452
$L81459:

; 284  : 
; 285  : // write num
; 286  : 
; 287  : 	fwrite(&EditAiNodeNum, sizeof(EditAiNodeNum), 1, fp);

	mov	eax, DWORD PTR _fp$[ebp]
	push	eax
	push	1
	push	4
	push	OFFSET FLAT:?EditAiNodeNum@@3JA		; EditAiNodeNum
	call	_fwrite
	add	esp, 16					; 00000010H

; 288  : 
; 289  : // write out each ainode
; 290  : 
; 291  : 	for (i = 0 ; i < EditAiNodeNum ; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $L81460
$L81461:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$L81460:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR ?EditAiNodeNum@@3JA	; EditAiNodeNum
	jge	$L81462

; 292  : 	{
; 293  : 
; 294  : // set file ainode
; 295  : 
; 296  : 		fan.Node[0] = EditAiNode[i].Node[0];

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 104				; 00000068H
	mov	ecx, DWORD PTR ?EditAiNode@@3PAU_AINODE@@A ; EditAiNode
	lea	edx, DWORD PTR [ecx+eax+36]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _fan$[ebp+44], eax
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR _fan$[ebp+48], ecx
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _fan$[ebp+52], eax
	mov	ecx, DWORD PTR [edx+12]
	mov	DWORD PTR _fan$[ebp+56], ecx

; 297  : 		fan.Node[1] = EditAiNode[i].Node[1];

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 104				; 00000068H
	mov	ecx, DWORD PTR ?EditAiNode@@3PAU_AINODE@@A ; EditAiNode
	lea	edx, DWORD PTR [ecx+eax+52]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _fan$[ebp+60], eax
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR _fan$[ebp+64], ecx
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _fan$[ebp+68], eax
	mov	ecx, DWORD PTR [edx+12]
	mov	DWORD PTR _fan$[ebp+72], ecx

; 298  : 
; 299  : 		fan.Priority = EditAiNode[i].Priority;

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 104				; 00000068H
	mov	ecx, DWORD PTR ?EditAiNode@@3PAU_AINODE@@A ; EditAiNode
	mov	dl, BYTE PTR [ecx+eax]
	mov	BYTE PTR _fan$[ebp], dl

; 300  : 		fan.StartNode = EditAiNode[i].StartNode;

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 104				; 00000068H
	mov	ecx, DWORD PTR ?EditAiNode@@3PAU_AINODE@@A ; EditAiNode
	mov	dl, BYTE PTR [ecx+eax+1]
	mov	BYTE PTR _fan$[ebp+1], dl

; 301  : 		fan.RacingLine = EditAiNode[i].RacingLine;

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 104				; 00000068H
	mov	ecx, DWORD PTR ?EditAiNode@@3PAU_AINODE@@A ; EditAiNode
	mov	edx, DWORD PTR [ecx+eax+4]
	mov	DWORD PTR _fan$[ebp+4], edx

; 302  : 		fan.RacingLineSpeed = EditAiNode[i].RacingLineSpeed;

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 104				; 00000068H
	mov	ecx, DWORD PTR ?EditAiNode@@3PAU_AINODE@@A ; EditAiNode
	mov	edx, DWORD PTR [ecx+eax+12]
	mov	DWORD PTR _fan$[ebp+20], edx

; 303  : 		fan.CentreSpeed = EditAiNode[i].CentreSpeed;

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 104				; 00000068H
	mov	ecx, DWORD PTR ?EditAiNode@@3PAU_AINODE@@A ; EditAiNode
	mov	edx, DWORD PTR [ecx+eax+16]
	mov	DWORD PTR _fan$[ebp+24], edx

; 304  : 		fan.FinishDist = EditAiNode[i].FinishDist;

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 104				; 00000068H
	mov	ecx, DWORD PTR ?EditAiNode@@3PAU_AINODE@@A ; EditAiNode
	mov	edx, DWORD PTR [ecx+eax+8]
	mov	DWORD PTR _fan$[ebp+8], edx

; 305  : 
; 306  : 		for (j = 0 ; j < MAX_AINODE_LINKS ; j++)

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $L81463
$L81464:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$L81463:
	cmp	DWORD PTR _j$[ebp], 2
	jge	$L81465

; 307  : 		{
; 308  : 			if (EditAiNode[i].Prev[j])

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 104				; 00000068H
	add	eax, DWORD PTR ?EditAiNode@@3PAU_AINODE@@A ; EditAiNode
	mov	ecx, DWORD PTR _j$[ebp]
	cmp	DWORD PTR [eax+ecx*4+20], 0
	je	SHORT $L81466

; 309  : 				fan.Prev[j] = (long)(EditAiNode[i].Prev[j] - EditAiNode);

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 104				; 00000068H
	add	eax, DWORD PTR ?EditAiNode@@3PAU_AINODE@@A ; EditAiNode
	mov	ecx, DWORD PTR _j$[ebp]
	mov	eax, DWORD PTR [eax+ecx*4+20]
	sub	eax, DWORD PTR ?EditAiNode@@3PAU_AINODE@@A ; EditAiNode
	cdq
	mov	ecx, 104				; 00000068H
	idiv	ecx
	mov	edx, DWORD PTR _j$[ebp]
	mov	DWORD PTR _fan$[ebp+edx*4+28], eax

; 310  : 			else

	jmp	SHORT $L81468
$L81466:

; 311  : 				fan.Prev[j] = -1;

	mov	eax, DWORD PTR _j$[ebp]
	mov	DWORD PTR _fan$[ebp+eax*4+28], -1
$L81468:

; 312  : 
; 313  : 			if (EditAiNode[i].Next[j])

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 104				; 00000068H
	add	eax, DWORD PTR ?EditAiNode@@3PAU_AINODE@@A ; EditAiNode
	mov	ecx, DWORD PTR _j$[ebp]
	cmp	DWORD PTR [eax+ecx*4+28], 0
	je	SHORT $L81469

; 314  : 				fan.Next[j] = (long)(EditAiNode[i].Next[j] - EditAiNode);

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 104				; 00000068H
	add	eax, DWORD PTR ?EditAiNode@@3PAU_AINODE@@A ; EditAiNode
	mov	ecx, DWORD PTR _j$[ebp]
	mov	eax, DWORD PTR [eax+ecx*4+28]
	sub	eax, DWORD PTR ?EditAiNode@@3PAU_AINODE@@A ; EditAiNode
	cdq
	mov	ecx, 104				; 00000068H
	idiv	ecx
	mov	edx, DWORD PTR _j$[ebp]
	mov	DWORD PTR _fan$[ebp+edx*4+36], eax

; 315  : 			else

	jmp	SHORT $L81471
$L81469:

; 316  : 				fan.Next[j] = -1;

	mov	eax, DWORD PTR _j$[ebp]
	mov	DWORD PTR _fan$[ebp+eax*4+36], -1
$L81471:

; 317  : 		}

	jmp	$L81464
$L81465:

; 318  : 
; 319  : // write it
; 320  : 
; 321  : 		fwrite(&fan, sizeof(fan), 1, fp);

	mov	eax, DWORD PTR _fp$[ebp]
	push	eax
	push	1
	push	76					; 0000004cH
	lea	ecx, DWORD PTR _fan$[ebp]
	push	ecx
	call	_fwrite
	add	esp, 16					; 00000010H

; 322  : 	}

	jmp	$L81461
$L81462:

; 323  : 
; 324  : // write start node
; 325  : 
; 326  : 	fwrite(&EditAiStartNode, sizeof(EditAiStartNode), 1, fp);

	mov	eax, DWORD PTR _fp$[ebp]
	push	eax
	push	1
	push	4
	push	OFFSET FLAT:_EditAiStartNode
	call	_fwrite
	add	esp, 16					; 00000010H

; 327  : 
; 328  : // write total dist
; 329  : 
; 330  : 	fwrite(&EditAiNodeTotalDist, sizeof(EditAiNodeTotalDist), 1, fp);

	mov	eax, DWORD PTR _fp$[ebp]
	push	eax
	push	1
	push	4
	push	OFFSET FLAT:_EditAiNodeTotalDist
	call	_fwrite
	add	esp, 16					; 00000010H

; 331  : 
; 332  : // close file
; 333  : 
; 334  : 	fclose(fp);

	mov	eax, DWORD PTR _fp$[ebp]
	push	eax
	call	_fclose
	add	esp, 4

; 335  : 	Box("Saved AI node File:", file, MB_OK);

	push	0
	mov	eax, DWORD PTR _file$[ebp]
	push	eax
	push	OFFSET FLAT:??_C@_0BE@MOLHMEGO@Saved?5AI?5node?5File?3?$AA@
	call	?Box@@YAJPAD0J@Z			; Box
	add	esp, 12					; 0000000cH
$L81452:

; 336  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?SaveEditAiNodes@@YAXPAD@Z ENDP				; SaveEditAiNodes
_TEXT	ENDS
PUBLIC	?LoadEditAiNodeModels@@YAXXZ			; LoadEditAiNodeModels
PUBLIC	??_C@_0P@BMAFAPPD@edit?2ainode2?4m?$AA@		; `string'
PUBLIC	??_C@_0P@OLAKABN@edit?2ainode1?4m?$AA@		; `string'
EXTRN	?LoadModel@@YAJPADPAUMODEL@@DDDJ@Z:NEAR		; LoadModel
;	COMDAT ??_C@_0P@BMAFAPPD@edit?2ainode2?4m?$AA@
CONST	SEGMENT
??_C@_0P@BMAFAPPD@edit?2ainode2?4m?$AA@ DB 'edit\ainode2.m', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@OLAKABN@edit?2ainode1?4m?$AA@
CONST	SEGMENT
??_C@_0P@OLAKABN@edit?2ainode1?4m?$AA@ DB 'edit\ainode1.m', 00H ; `string'
; Function compile flags: /Odt /ZI
CONST	ENDS
;	COMDAT ?LoadEditAiNodeModels@@YAXXZ
_TEXT	SEGMENT
?LoadEditAiNodeModels@@YAXXZ PROC NEAR			; LoadEditAiNodeModels, COMDAT

; 343  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 344  : 	LoadModel("edit\\ainode2.m", &EditAiNodeModel[0], -1, 1, LOADMODEL_FORCE_TPAGE, 100);

	push	100					; 00000064H
	push	1
	push	1
	push	-1
	push	OFFSET FLAT:?EditAiNodeModel@@3PAUMODEL@@A
	push	OFFSET FLAT:??_C@_0P@BMAFAPPD@edit?2ainode2?4m?$AA@
	call	?LoadModel@@YAJPADPAUMODEL@@DDDJ@Z	; LoadModel
	add	esp, 24					; 00000018H

; 345  : 	LoadModel("edit\\ainode1.m", &EditAiNodeModel[1], -1, 1, LOADMODEL_FORCE_TPAGE, 100);

	push	100					; 00000064H
	push	1
	push	1
	push	-1
	push	OFFSET FLAT:?EditAiNodeModel@@3PAUMODEL@@A+60
	push	OFFSET FLAT:??_C@_0P@OLAKABN@edit?2ainode1?4m?$AA@
	call	?LoadModel@@YAJPADPAUMODEL@@DDDJ@Z	; LoadModel
	add	esp, 24					; 00000018H

; 346  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?LoadEditAiNodeModels@@YAXXZ ENDP			; LoadEditAiNodeModels
_TEXT	ENDS
PUBLIC	?FreeEditAiNodeModels@@YAXXZ			; FreeEditAiNodeModels
EXTRN	?FreeModel@@YAXPAUMODEL@@J@Z:NEAR		; FreeModel
; Function compile flags: /Odt /ZI
;	COMDAT ?FreeEditAiNodeModels@@YAXXZ
_TEXT	SEGMENT
?FreeEditAiNodeModels@@YAXXZ PROC NEAR			; FreeEditAiNodeModels, COMDAT

; 353  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 354  : 	FreeModel(&EditAiNodeModel[0], 1);

	push	1
	push	OFFSET FLAT:?EditAiNodeModel@@3PAUMODEL@@A
	call	?FreeModel@@YAXPAUMODEL@@J@Z		; FreeModel
	add	esp, 8

; 355  : 	FreeModel(&EditAiNodeModel[1], 1);

	push	1
	push	OFFSET FLAT:?EditAiNodeModel@@3PAUMODEL@@A+60
	call	?FreeModel@@YAXPAUMODEL@@J@Z		; FreeModel
	add	esp, 8

; 356  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?FreeEditAiNodeModels@@YAXXZ ENDP			; FreeEditAiNodeModels
_TEXT	ENDS
PUBLIC	?AllocEditAiNode@@YAPAU_AINODE@@XZ		; AllocEditAiNode
; Function compile flags: /Odt /ZI
;	COMDAT ?AllocEditAiNode@@YAPAU_AINODE@@XZ
_TEXT	SEGMENT
tv68 = -68						; size = 4
?AllocEditAiNode@@YAPAU_AINODE@@XZ PROC NEAR		; AllocEditAiNode, COMDAT

; 363  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 364  : 
; 365  : // full?
; 366  : 
; 367  : 	if (EditAiNodeNum >= MAX_AINODES)

	cmp	DWORD PTR ?EditAiNodeNum@@3JA, 1024	; EditAiNodeNum, 00000400H
	jl	SHORT $L81484

; 368  : 		return NULL;

	xor	eax, eax
	jmp	SHORT $L81483
$L81484:

; 369  : 
; 370  : // inc counter, return slot
; 371  : 
; 372  : 	return &EditAiNode[EditAiNodeNum++];

	mov	eax, DWORD PTR ?EditAiNodeNum@@3JA	; EditAiNodeNum
	imul	eax, 104				; 00000068H
	add	eax, DWORD PTR ?EditAiNode@@3PAU_AINODE@@A ; EditAiNode
	mov	DWORD PTR tv68[ebp], eax
	mov	ecx, DWORD PTR ?EditAiNodeNum@@3JA	; EditAiNodeNum
	add	ecx, 1
	mov	DWORD PTR ?EditAiNodeNum@@3JA, ecx	; EditAiNodeNum
	mov	eax, DWORD PTR tv68[ebp]
$L81483:

; 373  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?AllocEditAiNode@@YAPAU_AINODE@@XZ ENDP			; AllocEditAiNode
_TEXT	ENDS
PUBLIC	?FreeEditAiNode@@YAXPAU_AINODE@@@Z		; FreeEditAiNode
; Function compile flags: /Odt /ZI
;	COMDAT ?FreeEditAiNode@@YAXPAU_AINODE@@@Z
_TEXT	SEGMENT
_j$ = -12						; size = 4
_i$ = -8						; size = 4
_idx$ = -4						; size = 4
_node$ = 8						; size = 4
?FreeEditAiNode@@YAXPAU_AINODE@@@Z PROC NEAR		; FreeEditAiNode, COMDAT

; 380  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi

; 381  : 	long idx, i, j;
; 382  : 
; 383  : // null any links that reference to this node
; 384  : 
; 385  : 	for (i = 0 ; i < EditAiNodeNum ; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $L81491
$L81492:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$L81491:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR ?EditAiNodeNum@@3JA	; EditAiNodeNum
	jge	SHORT $L81493

; 386  : 	{
; 387  : 		for (j = 0 ; j < MAX_AINODE_LINKS ; j++)

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $L81494
$L81495:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$L81494:
	cmp	DWORD PTR _j$[ebp], 2
	jge	SHORT $L81496

; 388  : 		{
; 389  : 			if (EditAiNode[i].Prev[j] == node) EditAiNode[i].Prev[j] = NULL;

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 104				; 00000068H
	add	eax, DWORD PTR ?EditAiNode@@3PAU_AINODE@@A ; EditAiNode
	mov	ecx, DWORD PTR _j$[ebp]
	mov	edx, DWORD PTR [eax+ecx*4+20]
	cmp	edx, DWORD PTR _node$[ebp]
	jne	SHORT $L81497
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 104				; 00000068H
	add	eax, DWORD PTR ?EditAiNode@@3PAU_AINODE@@A ; EditAiNode
	mov	ecx, DWORD PTR _j$[ebp]
	mov	DWORD PTR [eax+ecx*4+20], 0
$L81497:

; 390  : 			if (EditAiNode[i].Next[j] == node) EditAiNode[i].Next[j] = NULL;

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 104				; 00000068H
	add	eax, DWORD PTR ?EditAiNode@@3PAU_AINODE@@A ; EditAiNode
	mov	ecx, DWORD PTR _j$[ebp]
	mov	edx, DWORD PTR [eax+ecx*4+28]
	cmp	edx, DWORD PTR _node$[ebp]
	jne	SHORT $L81498
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 104				; 00000068H
	add	eax, DWORD PTR ?EditAiNode@@3PAU_AINODE@@A ; EditAiNode
	mov	ecx, DWORD PTR _j$[ebp]
	mov	DWORD PTR [eax+ecx*4+28], 0
$L81498:

; 391  : 		}

	jmp	SHORT $L81495
$L81496:

; 392  : 	}

	jmp	$L81492
$L81493:

; 393  : 
; 394  : // find index into list
; 395  : 
; 396  : 	idx = (long)(node - EditAiNode);

	mov	eax, DWORD PTR _node$[ebp]
	sub	eax, DWORD PTR ?EditAiNode@@3PAU_AINODE@@A ; EditAiNode
	cdq
	mov	ecx, 104				; 00000068H
	idiv	ecx
	mov	DWORD PTR _idx$[ebp], eax

; 397  : 
; 398  : // copy all higher nodes down one
; 399  : 
; 400  : 	for (i = idx ; i < EditAiNodeNum - 1; i++)

	mov	eax, DWORD PTR _idx$[ebp]
	mov	DWORD PTR _i$[ebp], eax
	jmp	SHORT $L81500
$L81501:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$L81500:
	mov	eax, DWORD PTR ?EditAiNodeNum@@3JA	; EditAiNodeNum
	sub	eax, 1
	cmp	DWORD PTR _i$[ebp], eax
	jge	SHORT $L81502

; 401  : 	{
; 402  : 		EditAiNode[i] = EditAiNode[i + 1];

	mov	esi, DWORD PTR _i$[ebp]
	add	esi, 1
	imul	esi, 104				; 00000068H
	add	esi, DWORD PTR ?EditAiNode@@3PAU_AINODE@@A ; EditAiNode
	mov	edi, DWORD PTR _i$[ebp]
	imul	edi, 104				; 00000068H
	add	edi, DWORD PTR ?EditAiNode@@3PAU_AINODE@@A ; EditAiNode
	mov	ecx, 26					; 0000001aH
	rep movsd

; 403  : 	}

	jmp	SHORT $L81501
$L81502:

; 404  : 
; 405  : // dec num
; 406  : 
; 407  : 	EditAiNodeNum--;

	mov	eax, DWORD PTR ?EditAiNodeNum@@3JA	; EditAiNodeNum
	sub	eax, 1
	mov	DWORD PTR ?EditAiNodeNum@@3JA, eax	; EditAiNodeNum

; 408  : 
; 409  : // fix any links that reference higher nodes
; 410  : 
; 411  : 	for (i = 0 ; i < EditAiNodeNum ; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $L81503
$L81504:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$L81503:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR ?EditAiNodeNum@@3JA	; EditAiNodeNum
	jge	$L81487

; 412  : 	{
; 413  : 		for (j = 0 ; j < MAX_AINODE_LINKS ; j++)

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $L81506
$L81507:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$L81506:
	cmp	DWORD PTR _j$[ebp], 2
	jge	$L81508

; 414  : 		{
; 415  : 			if (EditAiNode[i].Prev[j] > node) EditAiNode[i].Prev[j]--;

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 104				; 00000068H
	add	eax, DWORD PTR ?EditAiNode@@3PAU_AINODE@@A ; EditAiNode
	mov	ecx, DWORD PTR _j$[ebp]
	mov	edx, DWORD PTR [eax+ecx*4+20]
	cmp	edx, DWORD PTR _node$[ebp]
	jbe	SHORT $L81509
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 104				; 00000068H
	add	eax, DWORD PTR ?EditAiNode@@3PAU_AINODE@@A ; EditAiNode
	mov	ecx, DWORD PTR _j$[ebp]
	mov	edx, DWORD PTR [eax+ecx*4+20]
	sub	edx, 104				; 00000068H
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 104				; 00000068H
	add	eax, DWORD PTR ?EditAiNode@@3PAU_AINODE@@A ; EditAiNode
	mov	ecx, DWORD PTR _j$[ebp]
	mov	DWORD PTR [eax+ecx*4+20], edx
$L81509:

; 416  : 			if (EditAiNode[i].Next[j] > node) EditAiNode[i].Next[j]--;

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 104				; 00000068H
	add	eax, DWORD PTR ?EditAiNode@@3PAU_AINODE@@A ; EditAiNode
	mov	ecx, DWORD PTR _j$[ebp]
	mov	edx, DWORD PTR [eax+ecx*4+28]
	cmp	edx, DWORD PTR _node$[ebp]
	jbe	SHORT $L81510
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 104				; 00000068H
	add	eax, DWORD PTR ?EditAiNode@@3PAU_AINODE@@A ; EditAiNode
	mov	ecx, DWORD PTR _j$[ebp]
	mov	edx, DWORD PTR [eax+ecx*4+28]
	sub	edx, 104				; 00000068H
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 104				; 00000068H
	add	eax, DWORD PTR ?EditAiNode@@3PAU_AINODE@@A ; EditAiNode
	mov	ecx, DWORD PTR _j$[ebp]
	mov	DWORD PTR [eax+ecx*4+28], edx
$L81510:

; 417  : 		}

	jmp	$L81507
$L81508:

; 418  : 	}

	jmp	$L81504
$L81487:

; 419  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?FreeEditAiNode@@YAXPAU_AINODE@@@Z ENDP			; FreeEditAiNode
_TEXT	ENDS
PUBLIC	?EditAiNodes@@YAXXZ				; EditAiNodes
PUBLIC	?GetEditNodePos@@YAXPAUVectorStruct@@MM0@Z	; GetEditNodePos
PUBLIC	??_C@_03HCJNGPAC@fan?$AA@			; `string'
PUBLIC	__real@45400000
PUBLIC	__real@3f800000
PUBLIC	__real@43a00000
PUBLIC	__real@43700000
PUBLIC	__real@41c00000
PUBLIC	__real@42800000
PUBLIC	__real@3b03126f
EXTRN	?ViewMatrix@@3TMatrixUnion@@A:BYTE		; ViewMatrix
EXTRN	?ViewTrans@@3UVectorStruct@@A:BYTE		; ViewTrans
EXTRN	?MouseXpos@@3MA:DWORD				; MouseXpos
EXTRN	?MouseYpos@@3MA:DWORD				; MouseYpos
EXTRN	?MouseLeft@@3DA:BYTE				; MouseLeft
EXTRN	?MouseRight@@3DA:BYTE				; MouseRight
EXTRN	?CAM_MainCamera@@3PAUCameraStruct@@A:DWORD	; CAM_MainCamera
EXTRN	?Keys@@3PADA:BYTE				; Keys
EXTRN	?LastKeys@@3PADA:BYTE				; LastKeys
EXTRN	?Mouse@@3U_DIMOUSESTATE@@A:BYTE			; Mouse
EXTRN	?GetLevelFilename@@YAPADPADJ@Z:NEAR		; GetLevelFilename
EXTRN	?RotMatrixZYX@@YAXPATMatrixUnion@@MMM@Z:NEAR	; RotMatrixZYX
EXTRN	?RotTransVector@@YAXPATMatrixUnion@@PAUVectorStruct@@11@Z:NEAR ; RotTransVector
EXTRN	?RenderSettings@@3URENDER_SETTINGS@@A:BYTE	; RenderSettings
EXTRN	?MulMatrix@@YAXPATMatrixUnion@@00@Z:NEAR	; MulMatrix
EXTRN	?CopyMatrix@@YAXPATMatrixUnion@@0@Z:NEAR	; CopyMatrix
_BSS	SEGMENT
_CurrentEditAiNodeBro DD 01H DUP (?)
_BSS	ENDS
;	COMDAT __real@45400000
CONST	SEGMENT
__real@45400000 DD 045400000r			; 3072
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT ??_C@_03HCJNGPAC@fan?$AA@
CONST	SEGMENT
??_C@_03HCJNGPAC@fan?$AA@ DB 'fan', 00H			; `string'
CONST	ENDS
;	COMDAT __real@43a00000
CONST	SEGMENT
__real@43a00000 DD 043a00000r			; 320
CONST	ENDS
;	COMDAT __real@43700000
CONST	SEGMENT
__real@43700000 DD 043700000r			; 240
CONST	ENDS
;	COMDAT __real@41c00000
CONST	SEGMENT
__real@41c00000 DD 041c00000r			; 24
CONST	ENDS
;	COMDAT __real@42800000
CONST	SEGMENT
__real@42800000 DD 042800000r			; 64
CONST	ENDS
;	COMDAT __real@3b03126f
CONST	SEGMENT
__real@3b03126f DD 03b03126fr			; 0.002
; Function compile flags: /Odt /ZI
CONST	ENDS
;	COMDAT ?EditAiNodes@@YAXXZ
_TEXT	SEGMENT
tv948 = -212						; size = 4
__mul$81533 = -144					; size = 4
__mul$81531 = -140					; size = 4
_sy$ = -136						; size = 4
_sx$ = -132						; size = 4
_z$ = -128						; size = 4
_rad$ = -124						; size = 4
_tempnode$ = -120					; size = 16
_mat2$ = -104						; size = 36
_mat$ = -68						; size = 36
_vec$ = -32						; size = 12
_nnode$ = -20						; size = 4
_node$ = -16						; size = 4
_nbro$ = -12						; size = 4
_j$ = -8						; size = 4
_i$ = -4						; size = 4
?EditAiNodes@@YAXXZ PROC NEAR				; EditAiNodes, COMDAT

; 426  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 212				; 000000d4H
	push	ebx
	push	esi
	push	edi

; 427  : 	long i, j, nbro;
; 428  : 	AINODE *node, *nnode;
; 429  : 	VEC vec;
; 430  : 	MAT mat, mat2;
; 431  : 	ONE_AINODE tempnode;
; 432  : 	float rad, z, sx, sy;
; 433  : 
; 434  : // quit if not in edit mode
; 435  : 
; 436  : 	if (CAM_MainCamera->Type != CAM_EDIT)

	mov	eax, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	cmp	DWORD PTR [eax], 5
	je	SHORT $L81527

; 437  : 	{
; 438  : 		CurrentEditAiNode = NULL;

	mov	DWORD PTR ?CurrentEditAiNode@@3PAU_AINODE@@A, 0 ; CurrentEditAiNode

; 439  : 		return;

	jmp	$L81513
$L81527:

; 440  : 	}
; 441  : 
; 442  : // rotate camera?
; 443  : 
; 444  : 	if (MouseRight)

	movsx	eax, BYTE PTR ?MouseRight@@3DA		; MouseRight
	test	eax, eax
	je	$L81528

; 445  : 	{
; 446  : 		RotMatrixZYX(&mat, (float)-Mouse.lY / 3072, -(float)Mouse.lX / 3072, 0);

	push	0
	fild	DWORD PTR ?Mouse@@3U_DIMOUSESTATE@@A
	fchs
	fdiv	DWORD PTR __real@45400000
	push	ecx
	fstp	DWORD PTR [esp]
	mov	eax, DWORD PTR ?Mouse@@3U_DIMOUSESTATE@@A+4
	neg	eax
	mov	DWORD PTR tv948[ebp], eax
	fild	DWORD PTR tv948[ebp]
	fdiv	DWORD PTR __real@45400000
	push	ecx
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR _mat$[ebp]
	push	ecx
	call	?RotMatrixZYX@@YAXPATMatrixUnion@@MMM@Z	; RotMatrixZYX
	add	esp, 16					; 00000010H

; 447  : 		MulMatrix(&CAM_MainCamera->WMatrix, &mat, &mat2);

	lea	eax, DWORD PTR _mat2$[ebp]
	push	eax
	lea	ecx, DWORD PTR _mat$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	add	edx, 16					; 00000010H
	push	edx
	call	?MulMatrix@@YAXPATMatrixUnion@@00@Z	; MulMatrix
	add	esp, 12					; 0000000cH

; 448  : 		CopyMatrix(&mat2, &CAM_MainCamera->WMatrix);

	mov	eax, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	add	eax, 16					; 00000010H
	push	eax
	lea	ecx, DWORD PTR _mat2$[ebp]
	push	ecx
	call	?CopyMatrix@@YAXPATMatrixUnion@@0@Z	; CopyMatrix
	add	esp, 8

; 449  : 
; 450  : 		CAM_MainCamera->WMatrix.m[RY] = 0;

	mov	eax, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	mov	DWORD PTR [eax+20], 0

; 451  : 		NormalizeVector(&CAM_MainCamera->WMatrix.mv[X]);

	mov	eax, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	mov	ecx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fld	DWORD PTR [eax+16]
	fmul	DWORD PTR [ecx+16]
	mov	edx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	mov	eax, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fld	DWORD PTR [edx+20]
	fmul	DWORD PTR [eax+20]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	mov	edx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fld	DWORD PTR [ecx+24]
	fmul	DWORD PTR [edx+24]
	faddp	ST(1), ST(0)
	push	ecx
	fstp	DWORD PTR [esp]
	call	?sqrt@@YAMM@Z				; sqrt
	add	esp, 4
	fdivr	DWORD PTR __real@3f800000
	fstp	DWORD PTR __mul$81531[ebp]
	mov	eax, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fld	DWORD PTR __mul$81531[ebp]
	fmul	DWORD PTR [eax+16]
	mov	ecx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fstp	DWORD PTR [ecx+16]
	mov	eax, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fld	DWORD PTR __mul$81531[ebp]
	fmul	DWORD PTR [eax+20]
	mov	ecx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fstp	DWORD PTR [ecx+20]
	mov	eax, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fld	DWORD PTR __mul$81531[ebp]
	fmul	DWORD PTR [eax+24]
	mov	ecx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fstp	DWORD PTR [ecx+24]

; 452  : 		CrossProduct(&CAM_MainCamera->WMatrix.mv[Z], &CAM_MainCamera->WMatrix.mv[X], &CAM_MainCamera->WMatrix.mv[Y]);

	mov	eax, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	mov	ecx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fld	DWORD PTR [eax+44]
	fmul	DWORD PTR [ecx+24]
	mov	edx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	mov	eax, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fld	DWORD PTR [edx+48]
	fmul	DWORD PTR [eax+20]
	fsubp	ST(1), ST(0)
	mov	ecx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fstp	DWORD PTR [ecx+28]
	mov	eax, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	mov	ecx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fld	DWORD PTR [eax+48]
	fmul	DWORD PTR [ecx+16]
	mov	edx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	mov	eax, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fld	DWORD PTR [edx+40]
	fmul	DWORD PTR [eax+24]
	fsubp	ST(1), ST(0)
	mov	ecx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fstp	DWORD PTR [ecx+32]
	mov	eax, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	mov	ecx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fld	DWORD PTR [eax+40]
	fmul	DWORD PTR [ecx+20]
	mov	edx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	mov	eax, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fld	DWORD PTR [edx+44]
	fmul	DWORD PTR [eax+16]
	fsubp	ST(1), ST(0)
	mov	ecx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fstp	DWORD PTR [ecx+36]

; 453  : 		NormalizeVector(&CAM_MainCamera->WMatrix.mv[Y]);

	mov	eax, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	mov	ecx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fld	DWORD PTR [eax+28]
	fmul	DWORD PTR [ecx+28]
	mov	edx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	mov	eax, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fld	DWORD PTR [edx+32]
	fmul	DWORD PTR [eax+32]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	mov	edx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fld	DWORD PTR [ecx+36]
	fmul	DWORD PTR [edx+36]
	faddp	ST(1), ST(0)
	push	ecx
	fstp	DWORD PTR [esp]
	call	?sqrt@@YAMM@Z				; sqrt
	add	esp, 4
	fdivr	DWORD PTR __real@3f800000
	fstp	DWORD PTR __mul$81533[ebp]
	mov	eax, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fld	DWORD PTR __mul$81533[ebp]
	fmul	DWORD PTR [eax+28]
	mov	ecx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fstp	DWORD PTR [ecx+28]
	mov	eax, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fld	DWORD PTR __mul$81533[ebp]
	fmul	DWORD PTR [eax+32]
	mov	ecx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fstp	DWORD PTR [ecx+32]
	mov	eax, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fld	DWORD PTR __mul$81533[ebp]
	fmul	DWORD PTR [eax+36]
	mov	ecx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fstp	DWORD PTR [ecx+36]

; 454  : 		CrossProduct(&CAM_MainCamera->WMatrix.mv[X], &CAM_MainCamera->WMatrix.mv[Y], &CAM_MainCamera->WMatrix.mv[Z]);

	mov	eax, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	mov	ecx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fld	DWORD PTR [eax+20]
	fmul	DWORD PTR [ecx+36]
	mov	edx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	mov	eax, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fld	DWORD PTR [edx+24]
	fmul	DWORD PTR [eax+32]
	fsubp	ST(1), ST(0)
	mov	ecx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fstp	DWORD PTR [ecx+40]
	mov	eax, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	mov	ecx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fld	DWORD PTR [eax+24]
	fmul	DWORD PTR [ecx+28]
	mov	edx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	mov	eax, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fld	DWORD PTR [edx+16]
	fmul	DWORD PTR [eax+36]
	fsubp	ST(1), ST(0)
	mov	ecx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fstp	DWORD PTR [ecx+44]
	mov	eax, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	mov	ecx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fld	DWORD PTR [eax+16]
	fmul	DWORD PTR [ecx+32]
	mov	edx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	mov	eax, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fld	DWORD PTR [edx+20]
	fmul	DWORD PTR [eax+28]
	fsubp	ST(1), ST(0)
	mov	ecx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fstp	DWORD PTR [ecx+48]
$L81528:

; 455  : 	}
; 456  : 
; 457  : // reverse left / right nodes?
; 458  : 
; 459  : 	if (Keys[DIK_T] && !LastKeys[DIK_T])

	movsx	eax, BYTE PTR ?Keys@@3PADA+20
	test	eax, eax
	je	$L81535
	movsx	eax, BYTE PTR ?LastKeys@@3PADA+20
	test	eax, eax
	jne	$L81535

; 460  : 	{
; 461  : 		if (Keys[DIK_LSHIFT])

	movsx	eax, BYTE PTR ?Keys@@3PADA+42
	test	eax, eax
	je	$L81536

; 462  : 		{
; 463  : 			for (i = 0 ; i < EditAiNodeNum ; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $L81537
$L81538:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$L81537:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR ?EditAiNodeNum@@3JA	; EditAiNodeNum
	jge	$L81539

; 464  : 			{
; 465  : 				tempnode = EditAiNode[i].Node[0];

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 104				; 00000068H
	mov	ecx, DWORD PTR ?EditAiNode@@3PAU_AINODE@@A ; EditAiNode
	lea	edx, DWORD PTR [ecx+eax+36]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _tempnode$[ebp], eax
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR _tempnode$[ebp+4], ecx
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _tempnode$[ebp+8], eax
	mov	ecx, DWORD PTR [edx+12]
	mov	DWORD PTR _tempnode$[ebp+12], ecx

; 466  : 				EditAiNode[i].Node[0] = EditAiNode[i].Node[1];

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 104				; 00000068H
	mov	ecx, DWORD PTR ?EditAiNode@@3PAU_AINODE@@A ; EditAiNode
	lea	edx, DWORD PTR [ecx+eax+52]
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 104				; 00000068H
	mov	ecx, DWORD PTR ?EditAiNode@@3PAU_AINODE@@A ; EditAiNode
	lea	eax, DWORD PTR [ecx+eax+36]
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+4], ecx
	mov	ecx, DWORD PTR [edx+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR [edx+12]
	mov	DWORD PTR [eax+12], edx

; 467  : 				EditAiNode[i].Node[1] = tempnode;

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 104				; 00000068H
	mov	ecx, DWORD PTR ?EditAiNode@@3PAU_AINODE@@A ; EditAiNode
	lea	edx, DWORD PTR [ecx+eax+52]
	mov	eax, DWORD PTR _tempnode$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR _tempnode$[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR _tempnode$[ebp+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR _tempnode$[ebp+12]
	mov	DWORD PTR [edx+12], ecx

; 468  : 
; 469  : 				EditAiNode[i].RacingLine = 1 - EditAiNode[i].RacingLine;

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 104				; 00000068H
	mov	ecx, DWORD PTR ?EditAiNode@@3PAU_AINODE@@A ; EditAiNode
	fld	DWORD PTR __real@3f800000
	fsub	DWORD PTR [ecx+eax+4]
	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 104				; 00000068H
	mov	eax, DWORD PTR ?EditAiNode@@3PAU_AINODE@@A ; EditAiNode
	fstp	DWORD PTR [eax+edx+4]

; 470  : 			}

	jmp	$L81538
$L81539:

; 471  : 		}
; 472  : 		else if (CurrentEditAiNode)

	jmp	$L81535
$L81536:
	cmp	DWORD PTR ?CurrentEditAiNode@@3PAU_AINODE@@A, 0 ; CurrentEditAiNode
	je	SHORT $L81535

; 473  : 		{
; 474  : 			tempnode = CurrentEditAiNode->Node[0];

	mov	eax, DWORD PTR ?CurrentEditAiNode@@3PAU_AINODE@@A ; CurrentEditAiNode
	add	eax, 36					; 00000024H
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _tempnode$[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _tempnode$[ebp+4], edx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _tempnode$[ebp+8], ecx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR _tempnode$[ebp+12], edx

; 475  : 			CurrentEditAiNode->Node[0] = CurrentEditAiNode->Node[1];

	mov	eax, DWORD PTR ?CurrentEditAiNode@@3PAU_AINODE@@A ; CurrentEditAiNode
	add	eax, 52					; 00000034H
	mov	ecx, DWORD PTR ?CurrentEditAiNode@@3PAU_AINODE@@A ; CurrentEditAiNode
	add	ecx, 36					; 00000024H
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax

; 476  : 			CurrentEditAiNode->Node[1] = tempnode;

	mov	eax, DWORD PTR ?CurrentEditAiNode@@3PAU_AINODE@@A ; CurrentEditAiNode
	add	eax, 52					; 00000034H
	mov	ecx, DWORD PTR _tempnode$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _tempnode$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _tempnode$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _tempnode$[ebp+12]
	mov	DWORD PTR [eax+12], edx

; 477  : 
; 478  : 			CurrentEditAiNode->RacingLine = 1 - CurrentEditAiNode->RacingLine;

	mov	eax, DWORD PTR ?CurrentEditAiNode@@3PAU_AINODE@@A ; CurrentEditAiNode
	fld	DWORD PTR __real@3f800000
	fsub	DWORD PTR [eax+4]
	mov	ecx, DWORD PTR ?CurrentEditAiNode@@3PAU_AINODE@@A ; CurrentEditAiNode
	fstp	DWORD PTR [ecx+4]
$L81535:

; 479  : 		}
; 480  : 	}
; 481  : 
; 482  : // reverse direction?
; 483  : 
; 484  : 	if (Keys[DIK_R] && !LastKeys[DIK_R] && Keys[DIK_LSHIFT])

	movsx	eax, BYTE PTR ?Keys@@3PADA+19
	test	eax, eax
	je	$L81542
	movsx	eax, BYTE PTR ?LastKeys@@3PADA+19
	test	eax, eax
	jne	$L81542
	movsx	eax, BYTE PTR ?Keys@@3PADA+42
	test	eax, eax
	je	$L81542

; 485  : 	{
; 486  : 		for (i = 0 ; i < EditAiNodeNum ; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $L81543
$L81544:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$L81543:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR ?EditAiNodeNum@@3JA	; EditAiNodeNum
	jge	SHORT $L81542

; 487  : 		{
; 488  : 			for (j = 0 ; j < MAX_AINODE_LINKS ; j++)

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $L81546
$L81547:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$L81546:
	cmp	DWORD PTR _j$[ebp], 2
	jge	SHORT $L81548

; 489  : 			{
; 490  : 				node = EditAiNode[i].Prev[j];

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 104				; 00000068H
	add	eax, DWORD PTR ?EditAiNode@@3PAU_AINODE@@A ; EditAiNode
	mov	ecx, DWORD PTR _j$[ebp]
	mov	edx, DWORD PTR [eax+ecx*4+20]
	mov	DWORD PTR _node$[ebp], edx

; 491  : 				EditAiNode[i].Prev[j] = EditAiNode[i].Next[j];

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 104				; 00000068H
	add	eax, DWORD PTR ?EditAiNode@@3PAU_AINODE@@A ; EditAiNode
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 104				; 00000068H
	add	ecx, DWORD PTR ?EditAiNode@@3PAU_AINODE@@A ; EditAiNode
	mov	edx, DWORD PTR _j$[ebp]
	mov	esi, DWORD PTR _j$[ebp]
	mov	eax, DWORD PTR [eax+esi*4+28]
	mov	DWORD PTR [ecx+edx*4+20], eax

; 492  : 				EditAiNode[i].Next[j] = node;

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 104				; 00000068H
	add	eax, DWORD PTR ?EditAiNode@@3PAU_AINODE@@A ; EditAiNode
	mov	ecx, DWORD PTR _j$[ebp]
	mov	edx, DWORD PTR _node$[ebp]
	mov	DWORD PTR [eax+ecx*4+28], edx

; 493  : 			}

	jmp	SHORT $L81547
$L81548:

; 494  : 		}

	jmp	$L81544
$L81542:

; 495  : 	}
; 496  : 
; 497  : // save ai nodes?
; 498  : 
; 499  : 	if (Keys[DIK_LCONTROL] && Keys[DIK_F4] && !LastKeys[DIK_F4])

	movsx	eax, BYTE PTR ?Keys@@3PADA+29
	test	eax, eax
	je	SHORT $L81549
	movsx	eax, BYTE PTR ?Keys@@3PADA+62
	test	eax, eax
	je	SHORT $L81549
	movsx	eax, BYTE PTR ?LastKeys@@3PADA+62
	test	eax, eax
	jne	SHORT $L81549

; 500  : 	{
; 501  : 		CalcEditAiNodeDistances();

	call	?CalcEditAiNodeDistances@@YAXXZ		; CalcEditAiNodeDistances

; 502  : 		SaveEditAiNodes(GetLevelFilename("fan", FILENAME_MAKE_BODY | FILENAME_GAME_SETTINGS));

	push	3
	push	OFFSET FLAT:??_C@_03HCJNGPAC@fan?$AA@
	call	?GetLevelFilename@@YAPADPADJ@Z		; GetLevelFilename
	add	esp, 8
	push	eax
	call	?SaveEditAiNodes@@YAXPAD@Z		; SaveEditAiNodes
	add	esp, 4
$L81549:

; 503  : 	}
; 504  : 
; 505  : // get a current or last ai node?
; 506  : 
; 507  : 	if ((Keys[DIK_RETURN] && !LastKeys[DIK_RETURN]) || (Keys[DIK_BACKSPACE] && !LastKeys[DIK_BACKSPACE]) || (Keys[DIK_SPACE] && !LastKeys[DIK_SPACE]))

	movsx	eax, BYTE PTR ?Keys@@3PADA+28
	test	eax, eax
	je	SHORT $L81553
	movsx	eax, BYTE PTR ?LastKeys@@3PADA+28
	test	eax, eax
	je	SHORT $L81552
$L81553:
	movsx	eax, BYTE PTR ?Keys@@3PADA+14
	test	eax, eax
	je	SHORT $L81554
	movsx	eax, BYTE PTR ?LastKeys@@3PADA+14
	test	eax, eax
	je	SHORT $L81552
$L81554:
	movsx	eax, BYTE PTR ?Keys@@3PADA+57
	test	eax, eax
	je	$L81551
	movsx	eax, BYTE PTR ?LastKeys@@3PADA+57
	test	eax, eax
	jne	$L81551
$L81552:

; 508  : 	{
; 509  : 		nnode = NULL;

	mov	DWORD PTR _nnode$[ebp], 0

; 510  : 		z = RenderSettings.FarClip;

	mov	eax, DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+32
	mov	DWORD PTR _z$[ebp], eax

; 511  : 
; 512  : 		node = EditAiNode;

	mov	eax, DWORD PTR ?EditAiNode@@3PAU_AINODE@@A ; EditAiNode
	mov	DWORD PTR _node$[ebp], eax

; 513  : 		for (i = 0 ; i < EditAiNodeNum ; i++, node++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $L81555
$L81556:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	mov	ecx, DWORD PTR _node$[ebp]
	add	ecx, 104				; 00000068H
	mov	DWORD PTR _node$[ebp], ecx
$L81555:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR ?EditAiNodeNum@@3JA	; EditAiNodeNum
	jge	$L81557

; 514  : 		{
; 515  : 			for (j = 0 ; j < 2 ; j++)

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $L81558
$L81559:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$L81558:
	cmp	DWORD PTR _j$[ebp], 2
	jge	$L81560

; 516  : 			{
; 517  : 				RotTransVector(&ViewMatrix, &ViewTrans, &node->Node[j].Pos, &vec);

	lea	eax, DWORD PTR _vec$[ebp]
	push	eax
	mov	ecx, DWORD PTR _j$[ebp]
	shl	ecx, 4
	mov	edx, DWORD PTR _node$[ebp]
	lea	eax, DWORD PTR [edx+ecx+40]
	push	eax
	push	OFFSET FLAT:?ViewTrans@@3UVectorStruct@@A ; ViewTrans
	push	OFFSET FLAT:?ViewMatrix@@3TMatrixUnion@@A ; ViewMatrix
	call	?RotTransVector@@YAXPATMatrixUnion@@PAUVectorStruct@@11@Z ; RotTransVector
	add	esp, 16					; 00000010H

; 518  : 
; 519  : 				if (vec.v[Z] < RenderSettings.NearClip || vec.v[Z] >= RenderSettings.FarClip) continue;

	fld	DWORD PTR _vec$[ebp+8]
	fcomp	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+28
	fnstsw	ax
	test	ah, 5
	jnp	SHORT $L81562
	fld	DWORD PTR _vec$[ebp+8]
	fcomp	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+32
	fnstsw	ax
	test	ah, 1
	jne	SHORT $L81561
$L81562:
	jmp	SHORT $L81559
$L81561:

; 520  : 
; 521  : 				sx = vec.v[X] * RenderSettings.GeomPers / vec.v[Z] + REAL_SCREEN_XHALF;

	fld	DWORD PTR _vec$[ebp]
	fmul	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A
	fdiv	DWORD PTR _vec$[ebp+8]
	fadd	DWORD PTR __real@43a00000
	fstp	DWORD PTR _sx$[ebp]

; 522  : 				sy = vec.v[Y] * RenderSettings.GeomPers / vec.v[Z] + REAL_SCREEN_YHALF;

	fld	DWORD PTR _vec$[ebp+4]
	fmul	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A
	fdiv	DWORD PTR _vec$[ebp+8]
	fadd	DWORD PTR __real@43700000
	fstp	DWORD PTR _sy$[ebp]

; 523  : 
; 524  : 				rad = 24 * RenderSettings.GeomPers / vec.v[Z];

	fld	DWORD PTR __real@41c00000
	fmul	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A
	fdiv	DWORD PTR _vec$[ebp+8]
	fstp	DWORD PTR _rad$[ebp]

; 525  : 
; 526  : 				if (MouseXpos > sx - rad && MouseXpos < sx + rad && MouseYpos > sy - rad && MouseYpos < sy + rad)

	fld	DWORD PTR _sx$[ebp]
	fsub	DWORD PTR _rad$[ebp]
	fcomp	DWORD PTR ?MouseXpos@@3MA		; MouseXpos
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L81563
	fld	DWORD PTR _sx$[ebp]
	fadd	DWORD PTR _rad$[ebp]
	fcomp	DWORD PTR ?MouseXpos@@3MA		; MouseXpos
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $L81563
	fld	DWORD PTR _sy$[ebp]
	fsub	DWORD PTR _rad$[ebp]
	fcomp	DWORD PTR ?MouseYpos@@3MA		; MouseYpos
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L81563
	fld	DWORD PTR _sy$[ebp]
	fadd	DWORD PTR _rad$[ebp]
	fcomp	DWORD PTR ?MouseYpos@@3MA		; MouseYpos
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $L81563

; 527  : 				{
; 528  : 					if (vec.v[Z] < z)

	fld	DWORD PTR _vec$[ebp+8]
	fcomp	DWORD PTR _z$[ebp]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L81563

; 529  : 					{
; 530  : 						nnode = node;

	mov	eax, DWORD PTR _node$[ebp]
	mov	DWORD PTR _nnode$[ebp], eax

; 531  : 						z = vec.v[Z];

	mov	eax, DWORD PTR _vec$[ebp+8]
	mov	DWORD PTR _z$[ebp], eax

; 532  : 						nbro = j;

	mov	eax, DWORD PTR _j$[ebp]
	mov	DWORD PTR _nbro$[ebp], eax
$L81563:

; 533  : 					}
; 534  : 				}
; 535  : 			}

	jmp	$L81559
$L81560:

; 536  : 		}

	jmp	$L81556
$L81557:

; 537  : 		if (nnode)

	cmp	DWORD PTR _nnode$[ebp], 0
	je	SHORT $L81551

; 538  : 		{
; 539  : 			if (Keys[DIK_SPACE])

	movsx	eax, BYTE PTR ?Keys@@3PADA+57
	test	eax, eax
	je	SHORT $L81566

; 540  : 			{
; 541  : 				LastEditAiNode = CurrentEditAiNode;

	mov	eax, DWORD PTR ?CurrentEditAiNode@@3PAU_AINODE@@A ; CurrentEditAiNode
	mov	DWORD PTR ?LastEditAiNode@@3PAU_AINODE@@A, eax ; LastEditAiNode

; 542  : 				CurrentEditAiNode = nnode;

	mov	eax, DWORD PTR _nnode$[ebp]
	mov	DWORD PTR ?CurrentEditAiNode@@3PAU_AINODE@@A, eax ; CurrentEditAiNode

; 543  : 				CurrentEditAiNodeBro = nbro;

	mov	eax, DWORD PTR _nbro$[ebp]
	mov	DWORD PTR _CurrentEditAiNodeBro, eax

; 544  : 
; 545  : 				Keys[DIK_NUMPADPLUS] = TRUE;

	mov	BYTE PTR ?Keys@@3PADA+78, 1

; 546  : 				LastKeys[DIK_NUMPADPLUS] = FALSE;

	mov	BYTE PTR ?LastKeys@@3PADA+78, 0

; 547  : 			}
; 548  : 			else if (Keys[DIK_BACKSPACE])

	jmp	SHORT $L81551
$L81566:
	movsx	eax, BYTE PTR ?Keys@@3PADA+14
	test	eax, eax
	je	SHORT $L81568

; 549  : 			{
; 550  : 				LastEditAiNode = nnode;

	mov	eax, DWORD PTR _nnode$[ebp]
	mov	DWORD PTR ?LastEditAiNode@@3PAU_AINODE@@A, eax ; LastEditAiNode

; 551  : 				return;

	jmp	$L81513
$L81568:

; 552  : 			}
; 553  : 			else
; 554  : 			{
; 555  : 				CurrentEditAiNode = nnode;

	mov	eax, DWORD PTR _nnode$[ebp]
	mov	DWORD PTR ?CurrentEditAiNode@@3PAU_AINODE@@A, eax ; CurrentEditAiNode

; 556  : 				CurrentEditAiNodeBro = nbro;

	mov	eax, DWORD PTR _nbro$[ebp]
	mov	DWORD PTR _CurrentEditAiNodeBro, eax

; 557  : 				return;

	jmp	$L81513
$L81551:

; 558  : 			}
; 559  : 		}
; 560  : 	}
; 561  : 
; 562  : // new ai node?
; 563  : 
; 564  : 	if (Keys[DIK_INSERT] && !LastKeys[DIK_INSERT])

	movsx	eax, BYTE PTR ?Keys@@3PADA+210
	test	eax, eax
	je	$L81570
	movsx	eax, BYTE PTR ?LastKeys@@3PADA+210
	test	eax, eax
	jne	$L81570

; 565  : 	{
; 566  : 		if ((node = AllocEditAiNode()))

	call	?AllocEditAiNode@@YAPAU_AINODE@@XZ	; AllocEditAiNode
	mov	DWORD PTR _node$[ebp], eax
	cmp	DWORD PTR _node$[ebp], 0
	je	$L81570

; 567  : 		{
; 568  : 			GetEditNodePos(&CAM_MainCamera->WPos, MouseXpos, MouseYpos, &node->Node[1].Pos);

	mov	eax, DWORD PTR _node$[ebp]
	add	eax, 56					; 00000038H
	push	eax
	mov	ecx, DWORD PTR ?MouseYpos@@3MA
	push	ecx
	mov	edx, DWORD PTR ?MouseXpos@@3MA
	push	edx
	mov	eax, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	add	eax, 68					; 00000044H
	push	eax
	call	?GetEditNodePos@@YAXPAUVectorStruct@@MM0@Z ; GetEditNodePos
	add	esp, 16					; 00000010H

; 569  : 
; 570  : 			node->Node[0].Pos.v[X] = node->Node[1].Pos.v[X];

	mov	eax, DWORD PTR _node$[ebp]
	mov	ecx, DWORD PTR _node$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	DWORD PTR [eax+40], edx

; 571  : 			node->Node[0].Pos.v[Y] = node->Node[1].Pos.v[Y] - 64;

	mov	eax, DWORD PTR _node$[ebp]
	fld	DWORD PTR [eax+60]
	fsub	DWORD PTR __real@42800000
	mov	ecx, DWORD PTR _node$[ebp]
	fstp	DWORD PTR [ecx+44]

; 572  : 			node->Node[0].Pos.v[Z] = node->Node[1].Pos.v[Z];

	mov	eax, DWORD PTR _node$[ebp]
	mov	ecx, DWORD PTR _node$[ebp]
	mov	edx, DWORD PTR [ecx+64]
	mov	DWORD PTR [eax+48], edx

; 573  : 
; 574  : 			node->Node[0].Speed = 30;

	mov	eax, DWORD PTR _node$[ebp]
	mov	DWORD PTR [eax+36], 30			; 0000001eH

; 575  : 			node->Node[1].Speed = 30;

	mov	eax, DWORD PTR _node$[ebp]
	mov	DWORD PTR [eax+52], 30			; 0000001eH

; 576  : 
; 577  : 			node->Priority = 0;

	mov	eax, DWORD PTR _node$[ebp]
	mov	BYTE PTR [eax], 0

; 578  : 			node->RacingLine = 0.5f;

	mov	eax, DWORD PTR _node$[ebp]
	mov	DWORD PTR [eax+4], 1056964608		; 3f000000H

; 579  : 			node->RacingLineSpeed = 30;

	mov	eax, DWORD PTR _node$[ebp]
	mov	DWORD PTR [eax+12], 30			; 0000001eH

; 580  : 			node->CentreSpeed = 30;

	mov	eax, DWORD PTR _node$[ebp]
	mov	DWORD PTR [eax+16], 30			; 0000001eH

; 581  : 
; 582  : 			CurrentEditAiNode = node;

	mov	eax, DWORD PTR _node$[ebp]
	mov	DWORD PTR ?CurrentEditAiNode@@3PAU_AINODE@@A, eax ; CurrentEditAiNode

; 583  : 			CurrentEditAiNodeBro = 1;

	mov	DWORD PTR _CurrentEditAiNodeBro, 1
$L81570:

; 584  : 		}
; 585  : 	}
; 586  : 
; 587  : // quit now if no current edit ai node
; 588  : 
; 589  : 	if (!CurrentEditAiNode) return;

	cmp	DWORD PTR ?CurrentEditAiNode@@3PAU_AINODE@@A, 0 ; CurrentEditAiNode
	jne	SHORT $L81572
	jmp	$L81513
$L81572:

; 590  : 
; 591  : // exit current edit?
; 592  : 
; 593  : 	if (Keys[DIK_RETURN] && !LastKeys[DIK_RETURN])

	movsx	eax, BYTE PTR ?Keys@@3PADA+28
	test	eax, eax
	je	SHORT $L81573
	movsx	eax, BYTE PTR ?LastKeys@@3PADA+28
	test	eax, eax
	jne	SHORT $L81573

; 594  : 	{
; 595  : 		CurrentEditAiNode = NULL;

	mov	DWORD PTR ?CurrentEditAiNode@@3PAU_AINODE@@A, 0 ; CurrentEditAiNode

; 596  : 		return;

	jmp	$L81513
$L81573:

; 597  : 	}
; 598  : 
; 599  : // delete current edit node?
; 600  : 
; 601  : 	if (Keys[DIK_DELETE] && !LastKeys[DIK_DELETE])

	movsx	eax, BYTE PTR ?Keys@@3PADA+211
	test	eax, eax
	je	SHORT $L81574
	movsx	eax, BYTE PTR ?LastKeys@@3PADA+211
	test	eax, eax
	jne	SHORT $L81574

; 602  : 	{
; 603  : 		FreeEditAiNode(CurrentEditAiNode);

	mov	eax, DWORD PTR ?CurrentEditAiNode@@3PAU_AINODE@@A ; CurrentEditAiNode
	push	eax
	call	?FreeEditAiNode@@YAXPAU_AINODE@@@Z	; FreeEditAiNode
	add	esp, 4

; 604  : 		CurrentEditAiNode = NULL;

	mov	DWORD PTR ?CurrentEditAiNode@@3PAU_AINODE@@A, 0 ; CurrentEditAiNode

; 605  : 		return;

	jmp	$L81513
$L81574:

; 606  : 	}
; 607  : 
; 608  : // change speeds?
; 609  : 
; 610  : 	if (Keys[DIK_LSHIFT])

	movsx	eax, BYTE PTR ?Keys@@3PADA+42
	test	eax, eax
	je	SHORT $L81575

; 611  : 		LastKeys[DIK_1] = LastKeys[DIK_2] = LastKeys[DIK_3] = LastKeys[DIK_4] = LastKeys[DIK_5] = LastKeys[DIK_6] = LastKeys[DIK_7] = LastKeys[DIK_8] = 0;

	mov	BYTE PTR ?LastKeys@@3PADA+9, 0
	mov	al, BYTE PTR ?LastKeys@@3PADA+9
	mov	BYTE PTR ?LastKeys@@3PADA+8, al
	mov	cl, BYTE PTR ?LastKeys@@3PADA+8
	mov	BYTE PTR ?LastKeys@@3PADA+7, cl
	mov	dl, BYTE PTR ?LastKeys@@3PADA+7
	mov	BYTE PTR ?LastKeys@@3PADA+6, dl
	mov	al, BYTE PTR ?LastKeys@@3PADA+6
	mov	BYTE PTR ?LastKeys@@3PADA+5, al
	mov	cl, BYTE PTR ?LastKeys@@3PADA+5
	mov	BYTE PTR ?LastKeys@@3PADA+4, cl
	mov	dl, BYTE PTR ?LastKeys@@3PADA+4
	mov	BYTE PTR ?LastKeys@@3PADA+3, dl
	mov	al, BYTE PTR ?LastKeys@@3PADA+3
	mov	BYTE PTR ?LastKeys@@3PADA+2, al
$L81575:

; 612  : 
; 613  : 	if (Keys[DIK_1] && !LastKeys[DIK_1] && CurrentEditAiNode->Node[0].Speed) CurrentEditAiNode->Node[0].Speed--;

	movsx	eax, BYTE PTR ?Keys@@3PADA+2
	test	eax, eax
	je	SHORT $L81576
	movsx	eax, BYTE PTR ?LastKeys@@3PADA+2
	test	eax, eax
	jne	SHORT $L81576
	mov	eax, DWORD PTR ?CurrentEditAiNode@@3PAU_AINODE@@A ; CurrentEditAiNode
	cmp	DWORD PTR [eax+36], 0
	je	SHORT $L81576
	mov	eax, DWORD PTR ?CurrentEditAiNode@@3PAU_AINODE@@A ; CurrentEditAiNode
	mov	ecx, DWORD PTR [eax+36]
	sub	ecx, 1
	mov	edx, DWORD PTR ?CurrentEditAiNode@@3PAU_AINODE@@A ; CurrentEditAiNode
	mov	DWORD PTR [edx+36], ecx
$L81576:

; 614  : 	if (Keys[DIK_2] && !LastKeys[DIK_2] && CurrentEditAiNode->Node[0].Speed < 100) CurrentEditAiNode->Node[0].Speed++;

	movsx	eax, BYTE PTR ?Keys@@3PADA+3
	test	eax, eax
	je	SHORT $L81577
	movsx	eax, BYTE PTR ?LastKeys@@3PADA+3
	test	eax, eax
	jne	SHORT $L81577
	mov	eax, DWORD PTR ?CurrentEditAiNode@@3PAU_AINODE@@A ; CurrentEditAiNode
	cmp	DWORD PTR [eax+36], 100			; 00000064H
	jge	SHORT $L81577
	mov	eax, DWORD PTR ?CurrentEditAiNode@@3PAU_AINODE@@A ; CurrentEditAiNode
	mov	ecx, DWORD PTR [eax+36]
	add	ecx, 1
	mov	edx, DWORD PTR ?CurrentEditAiNode@@3PAU_AINODE@@A ; CurrentEditAiNode
	mov	DWORD PTR [edx+36], ecx
$L81577:

; 615  : 
; 616  : 	if (Keys[DIK_3] && !LastKeys[DIK_3] && CurrentEditAiNode->Node[1].Speed) CurrentEditAiNode->Node[1].Speed--;

	movsx	eax, BYTE PTR ?Keys@@3PADA+4
	test	eax, eax
	je	SHORT $L81578
	movsx	eax, BYTE PTR ?LastKeys@@3PADA+4
	test	eax, eax
	jne	SHORT $L81578
	mov	eax, DWORD PTR ?CurrentEditAiNode@@3PAU_AINODE@@A ; CurrentEditAiNode
	cmp	DWORD PTR [eax+52], 0
	je	SHORT $L81578
	mov	eax, DWORD PTR ?CurrentEditAiNode@@3PAU_AINODE@@A ; CurrentEditAiNode
	mov	ecx, DWORD PTR [eax+52]
	sub	ecx, 1
	mov	edx, DWORD PTR ?CurrentEditAiNode@@3PAU_AINODE@@A ; CurrentEditAiNode
	mov	DWORD PTR [edx+52], ecx
$L81578:

; 617  : 	if (Keys[DIK_4] && !LastKeys[DIK_4] && CurrentEditAiNode->Node[1].Speed < 100) CurrentEditAiNode->Node[1].Speed++;

	movsx	eax, BYTE PTR ?Keys@@3PADA+5
	test	eax, eax
	je	SHORT $L81579
	movsx	eax, BYTE PTR ?LastKeys@@3PADA+5
	test	eax, eax
	jne	SHORT $L81579
	mov	eax, DWORD PTR ?CurrentEditAiNode@@3PAU_AINODE@@A ; CurrentEditAiNode
	cmp	DWORD PTR [eax+52], 100			; 00000064H
	jge	SHORT $L81579
	mov	eax, DWORD PTR ?CurrentEditAiNode@@3PAU_AINODE@@A ; CurrentEditAiNode
	mov	ecx, DWORD PTR [eax+52]
	add	ecx, 1
	mov	edx, DWORD PTR ?CurrentEditAiNode@@3PAU_AINODE@@A ; CurrentEditAiNode
	mov	DWORD PTR [edx+52], ecx
$L81579:

; 618  : 
; 619  : 	if (Keys[DIK_5] && !LastKeys[DIK_5] && CurrentEditAiNode->RacingLineSpeed) CurrentEditAiNode->RacingLineSpeed--;

	movsx	eax, BYTE PTR ?Keys@@3PADA+6
	test	eax, eax
	je	SHORT $L81580
	movsx	eax, BYTE PTR ?LastKeys@@3PADA+6
	test	eax, eax
	jne	SHORT $L81580
	mov	eax, DWORD PTR ?CurrentEditAiNode@@3PAU_AINODE@@A ; CurrentEditAiNode
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $L81580
	mov	eax, DWORD PTR ?CurrentEditAiNode@@3PAU_AINODE@@A ; CurrentEditAiNode
	mov	ecx, DWORD PTR [eax+12]
	sub	ecx, 1
	mov	edx, DWORD PTR ?CurrentEditAiNode@@3PAU_AINODE@@A ; CurrentEditAiNode
	mov	DWORD PTR [edx+12], ecx
$L81580:

; 620  : 	if (Keys[DIK_6] && !LastKeys[DIK_6] && CurrentEditAiNode->RacingLineSpeed < 100) CurrentEditAiNode->RacingLineSpeed++;

	movsx	eax, BYTE PTR ?Keys@@3PADA+7
	test	eax, eax
	je	SHORT $L81581
	movsx	eax, BYTE PTR ?LastKeys@@3PADA+7
	test	eax, eax
	jne	SHORT $L81581
	mov	eax, DWORD PTR ?CurrentEditAiNode@@3PAU_AINODE@@A ; CurrentEditAiNode
	cmp	DWORD PTR [eax+12], 100			; 00000064H
	jge	SHORT $L81581
	mov	eax, DWORD PTR ?CurrentEditAiNode@@3PAU_AINODE@@A ; CurrentEditAiNode
	mov	ecx, DWORD PTR [eax+12]
	add	ecx, 1
	mov	edx, DWORD PTR ?CurrentEditAiNode@@3PAU_AINODE@@A ; CurrentEditAiNode
	mov	DWORD PTR [edx+12], ecx
$L81581:

; 621  : 
; 622  : 	if (Keys[DIK_7] && !LastKeys[DIK_7] && CurrentEditAiNode->CentreSpeed) CurrentEditAiNode->CentreSpeed--;

	movsx	eax, BYTE PTR ?Keys@@3PADA+8
	test	eax, eax
	je	SHORT $L81582
	movsx	eax, BYTE PTR ?LastKeys@@3PADA+8
	test	eax, eax
	jne	SHORT $L81582
	mov	eax, DWORD PTR ?CurrentEditAiNode@@3PAU_AINODE@@A ; CurrentEditAiNode
	cmp	DWORD PTR [eax+16], 0
	je	SHORT $L81582
	mov	eax, DWORD PTR ?CurrentEditAiNode@@3PAU_AINODE@@A ; CurrentEditAiNode
	mov	ecx, DWORD PTR [eax+16]
	sub	ecx, 1
	mov	edx, DWORD PTR ?CurrentEditAiNode@@3PAU_AINODE@@A ; CurrentEditAiNode
	mov	DWORD PTR [edx+16], ecx
$L81582:

; 623  : 	if (Keys[DIK_8] && !LastKeys[DIK_8] && CurrentEditAiNode->CentreSpeed < 100) CurrentEditAiNode->CentreSpeed++;

	movsx	eax, BYTE PTR ?Keys@@3PADA+9
	test	eax, eax
	je	SHORT $L81583
	movsx	eax, BYTE PTR ?LastKeys@@3PADA+9
	test	eax, eax
	jne	SHORT $L81583
	mov	eax, DWORD PTR ?CurrentEditAiNode@@3PAU_AINODE@@A ; CurrentEditAiNode
	cmp	DWORD PTR [eax+16], 100			; 00000064H
	jge	SHORT $L81583
	mov	eax, DWORD PTR ?CurrentEditAiNode@@3PAU_AINODE@@A ; CurrentEditAiNode
	mov	ecx, DWORD PTR [eax+16]
	add	ecx, 1
	mov	edx, DWORD PTR ?CurrentEditAiNode@@3PAU_AINODE@@A ; CurrentEditAiNode
	mov	DWORD PTR [edx+16], ecx
$L81583:

; 624  : 
; 625  : // change priority
; 626  : 
; 627  : 	if (Keys[DIK_NUMPADENTER] && !LastKeys[DIK_NUMPADENTER]) CurrentEditAiNode->Priority ^= TRUE;

	movsx	eax, BYTE PTR ?Keys@@3PADA+156
	test	eax, eax
	je	SHORT $L81584
	movsx	eax, BYTE PTR ?LastKeys@@3PADA+156
	test	eax, eax
	jne	SHORT $L81584
	mov	eax, DWORD PTR ?CurrentEditAiNode@@3PAU_AINODE@@A ; CurrentEditAiNode
	movsx	ecx, BYTE PTR [eax]
	xor	ecx, 1
	mov	edx, DWORD PTR ?CurrentEditAiNode@@3PAU_AINODE@@A ; CurrentEditAiNode
	mov	BYTE PTR [edx], cl
$L81584:

; 628  : 
; 629  : // change start node
; 630  : 
; 631  : 	if (Keys[DIK_NUMPAD0] && !LastKeys[DIK_NUMPAD0])

	movsx	eax, BYTE PTR ?Keys@@3PADA+82
	test	eax, eax
	je	SHORT $L81585
	movsx	eax, BYTE PTR ?LastKeys@@3PADA+82
	test	eax, eax
	jne	SHORT $L81585

; 632  : 	{
; 633  : 		for (i = 0 ; i < EditAiNodeNum ; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $L81586
$L81587:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$L81586:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR ?EditAiNodeNum@@3JA	; EditAiNodeNum
	jge	SHORT $L81588

; 634  : 			EditAiNode[i].StartNode = FALSE;

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 104				; 00000068H
	mov	ecx, DWORD PTR ?EditAiNode@@3PAU_AINODE@@A ; EditAiNode
	mov	BYTE PTR [ecx+eax+1], 0
	jmp	SHORT $L81587
$L81588:

; 635  : 
; 636  : 		CurrentEditAiNode->StartNode = TRUE;

	mov	eax, DWORD PTR ?CurrentEditAiNode@@3PAU_AINODE@@A ; CurrentEditAiNode
	mov	BYTE PTR [eax+1], 1
$L81585:

; 637  : 	}
; 638  : 
; 639  : // change racing line?
; 640  : 
; 641  : 	if (Keys[DIK_NUMPADSLASH] && CurrentEditAiNode->RacingLine > 0.0f) CurrentEditAiNode->RacingLine -= 0.002f;

	movsx	eax, BYTE PTR ?Keys@@3PADA+181
	test	eax, eax
	je	SHORT $L81589
	mov	eax, DWORD PTR ?CurrentEditAiNode@@3PAU_AINODE@@A ; CurrentEditAiNode
	fld	DWORD PTR [eax+4]
	fcomp	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $L81589
	mov	eax, DWORD PTR ?CurrentEditAiNode@@3PAU_AINODE@@A ; CurrentEditAiNode
	fld	DWORD PTR [eax+4]
	fsub	DWORD PTR __real@3b03126f
	mov	ecx, DWORD PTR ?CurrentEditAiNode@@3PAU_AINODE@@A ; CurrentEditAiNode
	fstp	DWORD PTR [ecx+4]
$L81589:

; 642  : 	if (Keys[DIK_NUMPADSTAR] && CurrentEditAiNode->RacingLine < 1.0f) CurrentEditAiNode->RacingLine += 0.002f;

	movsx	eax, BYTE PTR ?Keys@@3PADA+55
	test	eax, eax
	je	SHORT $L81590
	mov	eax, DWORD PTR ?CurrentEditAiNode@@3PAU_AINODE@@A ; CurrentEditAiNode
	fld	DWORD PTR [eax+4]
	fcomp	DWORD PTR __real@3f800000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L81590
	mov	eax, DWORD PTR ?CurrentEditAiNode@@3PAU_AINODE@@A ; CurrentEditAiNode
	fld	DWORD PTR [eax+4]
	fadd	DWORD PTR __real@3b03126f
	mov	ecx, DWORD PTR ?CurrentEditAiNode@@3PAU_AINODE@@A ; CurrentEditAiNode
	fstp	DWORD PTR [ecx+4]
$L81590:

; 643  : 
; 644  : // create link?
; 645  : 
; 646  : 	if (Keys[DIK_NUMPADPLUS] && !LastKeys[DIK_NUMPADPLUS] && LastEditAiNode && CurrentEditAiNode != LastEditAiNode)

	movsx	eax, BYTE PTR ?Keys@@3PADA+78
	test	eax, eax
	je	$L81591
	movsx	eax, BYTE PTR ?LastKeys@@3PADA+78
	test	eax, eax
	jne	$L81591
	cmp	DWORD PTR ?LastEditAiNode@@3PAU_AINODE@@A, 0 ; LastEditAiNode
	je	$L81591
	mov	eax, DWORD PTR ?CurrentEditAiNode@@3PAU_AINODE@@A ; CurrentEditAiNode
	cmp	eax, DWORD PTR ?LastEditAiNode@@3PAU_AINODE@@A ; LastEditAiNode
	je	$L81591

; 647  : 	{
; 648  : 		for (i = j = 0 ; i < MAX_AINODE_LINKS ; i++) if (CurrentEditAiNode->Prev[i] == LastEditAiNode || CurrentEditAiNode->Next[i] == LastEditAiNode) j++;

	mov	DWORD PTR _j$[ebp], 0
	mov	eax, DWORD PTR _j$[ebp]
	mov	DWORD PTR _i$[ebp], eax
	jmp	SHORT $L81592
$L81593:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$L81592:
	cmp	DWORD PTR _i$[ebp], 2
	jge	SHORT $L81594
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR ?CurrentEditAiNode@@3PAU_AINODE@@A ; CurrentEditAiNode
	mov	edx, DWORD PTR [ecx+eax*4+20]
	cmp	edx, DWORD PTR ?LastEditAiNode@@3PAU_AINODE@@A ; LastEditAiNode
	je	SHORT $L81596
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR ?CurrentEditAiNode@@3PAU_AINODE@@A ; CurrentEditAiNode
	mov	edx, DWORD PTR [ecx+eax*4+28]
	cmp	edx, DWORD PTR ?LastEditAiNode@@3PAU_AINODE@@A ; LastEditAiNode
	jne	SHORT $L81595
$L81596:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$L81595:

; 649  : 
; 650  : 		if (!j) for (i = 0 ; i < MAX_AINODE_LINKS ; i++) if (!CurrentEditAiNode->Prev[i])

	jmp	SHORT $L81593
$L81594:
	cmp	DWORD PTR _j$[ebp], 0
	jne	SHORT $L81591
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $L81598
$L81599:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$L81598:
	cmp	DWORD PTR _i$[ebp], 2
	jge	SHORT $L81591
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR ?CurrentEditAiNode@@3PAU_AINODE@@A ; CurrentEditAiNode
	cmp	DWORD PTR [ecx+eax*4+20], 0
	jne	SHORT $L81601

; 651  : 		{
; 652  : 			for (j = 0 ; j < MAX_AINODE_LINKS ; j++) if (!LastEditAiNode->Next[j])

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $L81602
$L81603:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$L81602:
	cmp	DWORD PTR _j$[ebp], 2
	jge	SHORT $L81604
	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR ?LastEditAiNode@@3PAU_AINODE@@A ; LastEditAiNode
	cmp	DWORD PTR [ecx+eax*4+28], 0
	jne	SHORT $L81605

; 653  : 			{
; 654  : 				CurrentEditAiNode->Prev[i] = LastEditAiNode;

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR ?CurrentEditAiNode@@3PAU_AINODE@@A ; CurrentEditAiNode
	mov	edx, DWORD PTR ?LastEditAiNode@@3PAU_AINODE@@A ; LastEditAiNode
	mov	DWORD PTR [ecx+eax*4+20], edx

; 655  : 				LastEditAiNode->Next[j] = CurrentEditAiNode;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR ?LastEditAiNode@@3PAU_AINODE@@A ; LastEditAiNode
	mov	edx, DWORD PTR ?CurrentEditAiNode@@3PAU_AINODE@@A ; CurrentEditAiNode
	mov	DWORD PTR [ecx+eax*4+28], edx

; 656  : 				break;

	jmp	SHORT $L81604
$L81605:

; 657  : 			}
; 658  : 			break;

	jmp	SHORT $L81603
$L81604:
	jmp	SHORT $L81591
$L81601:

; 659  : 		}
; 660  : 	}

	jmp	SHORT $L81599
$L81591:

; 661  : 
; 662  : // delete link?
; 663  : 
; 664  : 	if (Keys[DIK_NUMPADMINUS] && !LastKeys[DIK_NUMPADMINUS] && LastEditAiNode && CurrentEditAiNode != LastEditAiNode)

	movsx	eax, BYTE PTR ?Keys@@3PADA+74
	test	eax, eax
	je	$L81606
	movsx	eax, BYTE PTR ?LastKeys@@3PADA+74
	test	eax, eax
	jne	$L81606
	cmp	DWORD PTR ?LastEditAiNode@@3PAU_AINODE@@A, 0 ; LastEditAiNode
	je	$L81606
	mov	eax, DWORD PTR ?CurrentEditAiNode@@3PAU_AINODE@@A ; CurrentEditAiNode
	cmp	eax, DWORD PTR ?LastEditAiNode@@3PAU_AINODE@@A ; LastEditAiNode
	je	$L81606

; 665  : 	{
; 666  : 		for (i = 0 ; i < MAX_AINODE_LINKS ; i++) if (CurrentEditAiNode->Prev[i] == LastEditAiNode)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $L81607
$L81608:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$L81607:
	cmp	DWORD PTR _i$[ebp], 2
	jge	SHORT $L81606
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR ?CurrentEditAiNode@@3PAU_AINODE@@A ; CurrentEditAiNode
	mov	edx, DWORD PTR [ecx+eax*4+20]
	cmp	edx, DWORD PTR ?LastEditAiNode@@3PAU_AINODE@@A ; LastEditAiNode
	jne	SHORT $L81610

; 667  : 		{
; 668  : 			for (j = 0 ; j < MAX_AINODE_LINKS ; j++) if (LastEditAiNode->Next[j] == CurrentEditAiNode)

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $L81611
$L81612:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$L81611:
	cmp	DWORD PTR _j$[ebp], 2
	jge	SHORT $L81613
	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR ?LastEditAiNode@@3PAU_AINODE@@A ; LastEditAiNode
	mov	edx, DWORD PTR [ecx+eax*4+28]
	cmp	edx, DWORD PTR ?CurrentEditAiNode@@3PAU_AINODE@@A ; CurrentEditAiNode
	jne	SHORT $L81614

; 669  : 			{
; 670  : 				CurrentEditAiNode->Prev[i] = NULL;

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR ?CurrentEditAiNode@@3PAU_AINODE@@A ; CurrentEditAiNode
	mov	DWORD PTR [ecx+eax*4+20], 0

; 671  : 				LastEditAiNode->Next[j] = NULL;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR ?LastEditAiNode@@3PAU_AINODE@@A ; LastEditAiNode
	mov	DWORD PTR [ecx+eax*4+28], 0

; 672  : 				break;

	jmp	SHORT $L81613
$L81614:

; 673  : 			}
; 674  : 			break;

	jmp	SHORT $L81612
$L81613:
	jmp	SHORT $L81606
$L81610:

; 675  : 		}
; 676  : 	}

	jmp	SHORT $L81608
$L81606:

; 677  : 
; 678  : // move?
; 679  : 
; 680  : 	if (MouseLeft)

	movsx	eax, BYTE PTR ?MouseLeft@@3DA		; MouseLeft
	test	eax, eax
	je	SHORT $L81513

; 681  : 	{
; 682  : 		GetEditNodePos(&CAM_MainCamera->WPos, MouseXpos, MouseYpos, &CurrentEditAiNode->Node[CurrentEditAiNodeBro].Pos);

	mov	eax, DWORD PTR _CurrentEditAiNodeBro
	shl	eax, 4
	mov	ecx, DWORD PTR ?CurrentEditAiNode@@3PAU_AINODE@@A ; CurrentEditAiNode
	lea	edx, DWORD PTR [ecx+eax+40]
	push	edx
	mov	eax, DWORD PTR ?MouseYpos@@3MA
	push	eax
	mov	ecx, DWORD PTR ?MouseXpos@@3MA
	push	ecx
	mov	edx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	add	edx, 68					; 00000044H
	push	edx
	call	?GetEditNodePos@@YAXPAUVectorStruct@@MM0@Z ; GetEditNodePos
	add	esp, 16					; 00000010H
$L81513:

; 683  : 	}
; 684  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?EditAiNodes@@YAXXZ ENDP				; EditAiNodes
_TEXT	ENDS
PUBLIC	_sqrtf
; Function compile flags: /Odt /ZI
; File c:\program files\microsoft visual studio .net 2003\vc7\include\math.h
;	COMDAT ?sqrt@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?sqrt@@YAMM@Z PROC NEAR					; sqrt, COMDAT

; 579  :         {return (sqrtf(_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR __X$[ebp]
	push	eax
	call	_sqrtf
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?sqrt@@YAMM@Z ENDP					; sqrt
_TEXT	ENDS
EXTRN	_sqrt:NEAR
; Function compile flags: /Odt /ZI
;	COMDAT _sqrtf
_TEXT	SEGMENT
tv70 = -68						; size = 4
__X$ = 8						; size = 4
_sqrtf	PROC NEAR					; COMDAT

; 470  :         {return ((float)sqrt((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	fld	DWORD PTR __X$[ebp]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	call	_sqrt
	add	esp, 8
	fst	DWORD PTR tv70[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_sqrtf	ENDP
_TEXT	ENDS
PUBLIC	?sin@@YAMM@Z					; sin
PUBLIC	?DrawAiNodes@@YAXXZ				; DrawAiNodes
PUBLIC	??_C@_03JALODAI@?$CFld?$AA@			; `string'
PUBLIC	__real@43960000
PUBLIC	__real@42400000
PUBLIC	__real@42000000
EXTRN	?ModelScale@@3MA:DWORD				; ModelScale
EXTRN	?DumpText3D@@YAXPAUVectorStruct@@MMJPAD@Z:NEAR	; DumpText3D
EXTRN	?CurrentTimer@@YAKXZ:NEAR			; CurrentTimer
EXTRN	?TimerFreq@@3KA:DWORD				; TimerFreq
EXTRN	?DrawAxis@@YAXPATMatrixUnion@@PAUVectorStruct@@@Z:NEAR ; DrawAxis
EXTRN	?DrawLine@@YAXPAUVectorStruct@@0JJ@Z:NEAR	; DrawLine
EXTRN	?D3Ddevice@@3PAUIDirect3DDevice3@@A:DWORD	; D3Ddevice
EXTRN	?TextureStateChange@@3JA:DWORD			; TextureStateChange
EXTRN	?RenderTP@@3FA:WORD				; RenderTP
EXTRN	?FrameCount@@3KA:DWORD				; FrameCount
EXTRN	?TexInfo@@3PAUTEXINFO@@A:DWORD			; TexInfo
EXTRN	?DrawModel@@YAXPAUMODEL@@PATMatrixUnion@@PAUVectorStruct@@F@Z:NEAR ; DrawModel
EXTRN	__ftol2:NEAR
EXTRN	?IdentityMatrix@@3TMatrixUnion@@A:BYTE		; IdentityMatrix
;	COMDAT __real@43960000
; File c:\documents and settings\jarhead\desktop\shit to display my love for xbox revolt and fuck you borman-ness\revolt source\source\editai.cpp
CONST	SEGMENT
__real@43960000 DD 043960000r			; 300
CONST	ENDS
;	COMDAT ??_C@_03JALODAI@?$CFld?$AA@
CONST	SEGMENT
??_C@_03JALODAI@?$CFld?$AA@ DB '%ld', 00H		; `string'
CONST	ENDS
;	COMDAT __real@42400000
CONST	SEGMENT
__real@42400000 DD 042400000r			; 48
CONST	ENDS
;	COMDAT __real@42000000
CONST	SEGMENT
__real@42000000 DD 042000000r			; 32
; Function compile flags: /Odt /ZI
CONST	ENDS
;	COMDAT ?DrawAiNodes@@YAXXZ
_TEXT	SEGMENT
tv515 = -252						; size = 8
tv508 = -244						; size = 8
_flag$ = -172						; size = 2
_buf$ = -168						; size = 128
_v2$ = -40						; size = 12
_v1$ = -28						; size = 12
_node$ = -16						; size = 4
_k$ = -12						; size = 4
_j$ = -8						; size = 4
_i$ = -4						; size = 4
?DrawAiNodes@@YAXXZ PROC NEAR				; DrawAiNodes, COMDAT

; 691  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 252				; 000000fcH
	push	ebx
	push	esi
	push	edi

; 692  : 	long i, j, k;
; 693  : 	ONE_AINODE *node;
; 694  : 	VEC v1, v2;
; 695  : 	char buf[128];
; 696  : 	short flag;
; 697  : 
; 698  : // loop thru all nodes
; 699  : 
; 700  : 	for (i = 0 ; i < EditAiNodeNum ; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $L81627
$L81628:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$L81627:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR ?EditAiNodeNum@@3JA	; EditAiNodeNum
	jge	$L81618

; 701  : 	{
; 702  : 		for (j = 0 ; j < 2 ; j++)

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $L81630
$L81631:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$L81630:
	cmp	DWORD PTR _j$[ebp], 2
	jge	$L81632

; 703  : 		{
; 704  : 			node = &EditAiNode[i].Node[j];

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 104				; 00000068H
	add	eax, DWORD PTR ?EditAiNode@@3PAU_AINODE@@A ; EditAiNode
	mov	ecx, DWORD PTR _j$[ebp]
	shl	ecx, 4
	lea	edx, DWORD PTR [eax+ecx+36]
	mov	DWORD PTR _node$[ebp], edx

; 705  : 
; 706  : // draw it
; 707  : 
; 708  : 			flag = MODEL_PLAIN;

	mov	WORD PTR _flag$[ebp], 0

; 709  : 			if (i == EditAiStartNode)

	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _EditAiStartNode
	jne	SHORT $L81633

; 710  : 			{
; 711  : 				flag |= MODEL_SCALE;

	movsx	eax, WORD PTR _flag$[ebp]
	or	eax, 512				; 00000200H
	mov	WORD PTR _flag$[ebp], ax

; 712  : 				ModelScale = (float)sin((float)TIME2MS(CurrentTimer()) / 300.0f) * 0.5f + 1.0f;

	call	?CurrentTimer@@YAKXZ			; CurrentTimer
	mov	DWORD PTR tv508[ebp], eax
	mov	DWORD PTR tv508[ebp+4], 0
	fild	QWORD PTR tv508[ebp]
	mov	eax, DWORD PTR ?TimerFreq@@3KA		; TimerFreq
	xor	edx, edx
	mov	ecx, 1000				; 000003e8H
	div	ecx
	mov	DWORD PTR tv515[ebp], eax
	mov	DWORD PTR tv515[ebp+4], 0
	fild	QWORD PTR tv515[ebp]
	fdivp	ST(1), ST(0)
	fdiv	DWORD PTR __real@43960000
	push	ecx
	fstp	DWORD PTR [esp]
	call	?sin@@YAMM@Z				; sin
	add	esp, 4
	fmul	DWORD PTR __real@3f000000
	fadd	DWORD PTR __real@3f800000
	fstp	DWORD PTR ?ModelScale@@3MA		; ModelScale
$L81633:

; 713  : 			}
; 714  : 
; 715  : 			if (LastEditAiNode != &EditAiNode[i] || (FrameCount & 4))

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 104				; 00000068H
	add	eax, DWORD PTR ?EditAiNode@@3PAU_AINODE@@A ; EditAiNode
	cmp	DWORD PTR ?LastEditAiNode@@3PAU_AINODE@@A, eax ; LastEditAiNode
	jne	SHORT $L81637
	mov	eax, DWORD PTR ?FrameCount@@3KA		; FrameCount
	and	eax, 4
	je	SHORT $L81636
$L81637:

; 716  : 			{
; 717  : 				DrawModel(&EditAiNodeModel[j], &IdentityMatrix, &node->Pos, flag);

	mov	ax, WORD PTR _flag$[ebp]
	push	eax
	mov	ecx, DWORD PTR _node$[ebp]
	add	ecx, 4
	push	ecx
	push	OFFSET FLAT:?IdentityMatrix@@3TMatrixUnion@@A ; IdentityMatrix
	mov	edx, DWORD PTR _j$[ebp]
	imul	edx, 60					; 0000003cH
	add	edx, OFFSET FLAT:?EditAiNodeModel@@3PAUMODEL@@A ; EditAiNodeModel
	push	edx
	call	?DrawModel@@YAXPAUMODEL@@PATMatrixUnion@@PAUVectorStruct@@F@Z ; DrawModel
	add	esp, 16					; 00000010H
$L81636:

; 718  : 			}
; 719  : 
; 720  : // draw link?
; 721  : 
; 722  : 			for (k = 0 ; k < MAX_AINODE_LINKS ; k++) if (EditAiNode[i].Next[k])

	mov	DWORD PTR _k$[ebp], 0
	jmp	SHORT $L81638
$L81639:
	mov	eax, DWORD PTR _k$[ebp]
	add	eax, 1
	mov	DWORD PTR _k$[ebp], eax
$L81638:
	cmp	DWORD PTR _k$[ebp], 2
	jge	$L81640
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 104				; 00000068H
	add	eax, DWORD PTR ?EditAiNode@@3PAU_AINODE@@A ; EditAiNode
	mov	ecx, DWORD PTR _k$[ebp]
	cmp	DWORD PTR [eax+ecx*4+28], 0
	je	$L81641

; 723  : 			{
; 724  : 				v1.v[X] = EditAiNode[i].Node[j].Pos.v[X];

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 104				; 00000068H
	add	eax, DWORD PTR ?EditAiNode@@3PAU_AINODE@@A ; EditAiNode
	mov	ecx, DWORD PTR _j$[ebp]
	shl	ecx, 4
	mov	edx, DWORD PTR [eax+ecx+40]
	mov	DWORD PTR _v1$[ebp], edx

; 725  : 				v1.v[Y] = EditAiNode[i].Node[j].Pos.v[Y];

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 104				; 00000068H
	add	eax, DWORD PTR ?EditAiNode@@3PAU_AINODE@@A ; EditAiNode
	mov	ecx, DWORD PTR _j$[ebp]
	shl	ecx, 4
	mov	edx, DWORD PTR [eax+ecx+44]
	mov	DWORD PTR _v1$[ebp+4], edx

; 726  : 				v1.v[Z] = EditAiNode[i].Node[j].Pos.v[Z];

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 104				; 00000068H
	add	eax, DWORD PTR ?EditAiNode@@3PAU_AINODE@@A ; EditAiNode
	mov	ecx, DWORD PTR _j$[ebp]
	shl	ecx, 4
	mov	edx, DWORD PTR [eax+ecx+48]
	mov	DWORD PTR _v1$[ebp+8], edx

; 727  : 
; 728  : 				v2.v[X] = EditAiNode[i].Next[k]->Node[j].Pos.v[X];

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 104				; 00000068H
	add	eax, DWORD PTR ?EditAiNode@@3PAU_AINODE@@A ; EditAiNode
	mov	ecx, DWORD PTR _k$[ebp]
	mov	edx, DWORD PTR [eax+ecx*4+28]
	mov	eax, DWORD PTR _j$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR [edx+eax+40]
	mov	DWORD PTR _v2$[ebp], ecx

; 729  : 				v2.v[Y] = EditAiNode[i].Next[k]->Node[j].Pos.v[Y];

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 104				; 00000068H
	add	eax, DWORD PTR ?EditAiNode@@3PAU_AINODE@@A ; EditAiNode
	mov	ecx, DWORD PTR _k$[ebp]
	mov	edx, DWORD PTR [eax+ecx*4+28]
	mov	eax, DWORD PTR _j$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR [edx+eax+44]
	mov	DWORD PTR _v2$[ebp+4], ecx

; 730  : 				v2.v[Z] = EditAiNode[i].Next[k]->Node[j].Pos.v[Z];

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 104				; 00000068H
	add	eax, DWORD PTR ?EditAiNode@@3PAU_AINODE@@A ; EditAiNode
	mov	ecx, DWORD PTR _k$[ebp]
	mov	edx, DWORD PTR [eax+ecx*4+28]
	mov	eax, DWORD PTR _j$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR [edx+eax+48]
	mov	DWORD PTR _v2$[ebp+8], ecx

; 731  : 
; 732  : 				if (!j)

	cmp	DWORD PTR _j$[ebp], 0
	jne	SHORT $L81642

; 733  : 				{
; 734  : 					DrawLine(&v1, &v2, 0x000000, 0xff0000);

	push	16711680				; 00ff0000H
	push	0
	lea	eax, DWORD PTR _v2$[ebp]
	push	eax
	lea	ecx, DWORD PTR _v1$[ebp]
	push	ecx
	call	?DrawLine@@YAXPAUVectorStruct@@0JJ@Z	; DrawLine
	add	esp, 16					; 00000010H

; 735  : 				}
; 736  : 				else

	jmp	SHORT $L81641
$L81642:

; 737  : 				{
; 738  : 					DrawLine(&v1, &v2, 0x000000, 0x00ff00);

	push	65280					; 0000ff00H
	push	0
	lea	eax, DWORD PTR _v2$[ebp]
	push	eax
	lea	ecx, DWORD PTR _v1$[ebp]
	push	ecx
	call	?DrawLine@@YAXPAUVectorStruct@@0JJ@Z	; DrawLine
	add	esp, 16					; 00000010H
$L81641:

; 739  : 				}
; 740  : 			}
; 741  : 
; 742  : // draw 'current' axis?
; 743  : 
; 744  : 			if (CurrentEditAiNode == &EditAiNode[i] && CurrentEditAiNodeBro == j)

	jmp	$L81639
$L81640:
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 104				; 00000068H
	add	eax, DWORD PTR ?EditAiNode@@3PAU_AINODE@@A ; EditAiNode
	cmp	DWORD PTR ?CurrentEditAiNode@@3PAU_AINODE@@A, eax ; CurrentEditAiNode
	jne	SHORT $L81644
	mov	eax, DWORD PTR _CurrentEditAiNodeBro
	cmp	eax, DWORD PTR _j$[ebp]
	jne	SHORT $L81644

; 745  : 			{
; 746  : 				DrawAxis(&IdentityMatrix, &node->Pos);

	mov	eax, DWORD PTR _node$[ebp]
	add	eax, 4
	push	eax
	push	OFFSET FLAT:?IdentityMatrix@@3TMatrixUnion@@A ; IdentityMatrix
	call	?DrawAxis@@YAXPATMatrixUnion@@PAUVectorStruct@@@Z ; DrawAxis
	add	esp, 8
$L81644:

; 747  : 			}
; 748  : 		}

	jmp	$L81631
$L81632:

; 749  : 
; 750  : // draw racing line
; 751  : 
; 752  : 		for (j = 0 ; j < MAX_AINODE_LINKS ; j++) if (EditAiNode[i].Next[j])

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $L81645
$L81646:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$L81645:
	cmp	DWORD PTR _j$[ebp], 2
	jge	$L81647
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 104				; 00000068H
	add	eax, DWORD PTR ?EditAiNode@@3PAU_AINODE@@A ; EditAiNode
	mov	ecx, DWORD PTR _j$[ebp]
	cmp	DWORD PTR [eax+ecx*4+28], 0
	je	$L81648

; 753  : 		{
; 754  : 			v1.v[X] = (EditAiNode[i].Node[0].Pos.v[X] * EditAiNode[i].RacingLine) + (EditAiNode[i].Node[1].Pos.v[X] * (1 - EditAiNode[i].RacingLine));

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 104				; 00000068H
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 104				; 00000068H
	mov	edx, DWORD PTR ?EditAiNode@@3PAU_AINODE@@A ; EditAiNode
	mov	esi, DWORD PTR ?EditAiNode@@3PAU_AINODE@@A ; EditAiNode
	fld	DWORD PTR [edx+eax+40]
	fmul	DWORD PTR [esi+ecx+4]
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 104				; 00000068H
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 104				; 00000068H
	mov	edx, DWORD PTR ?EditAiNode@@3PAU_AINODE@@A ; EditAiNode
	fld	DWORD PTR __real@3f800000
	fsub	DWORD PTR [edx+ecx+4]
	mov	ecx, DWORD PTR ?EditAiNode@@3PAU_AINODE@@A ; EditAiNode
	fmul	DWORD PTR [ecx+eax+56]
	faddp	ST(1), ST(0)
	fstp	DWORD PTR _v1$[ebp]

; 755  : 			v1.v[Y] = (EditAiNode[i].Node[0].Pos.v[Y] * EditAiNode[i].RacingLine) + (EditAiNode[i].Node[1].Pos.v[Y] * (1 - EditAiNode[i].RacingLine));

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 104				; 00000068H
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 104				; 00000068H
	mov	edx, DWORD PTR ?EditAiNode@@3PAU_AINODE@@A ; EditAiNode
	mov	esi, DWORD PTR ?EditAiNode@@3PAU_AINODE@@A ; EditAiNode
	fld	DWORD PTR [edx+eax+44]
	fmul	DWORD PTR [esi+ecx+4]
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 104				; 00000068H
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 104				; 00000068H
	mov	edx, DWORD PTR ?EditAiNode@@3PAU_AINODE@@A ; EditAiNode
	fld	DWORD PTR __real@3f800000
	fsub	DWORD PTR [edx+ecx+4]
	mov	ecx, DWORD PTR ?EditAiNode@@3PAU_AINODE@@A ; EditAiNode
	fmul	DWORD PTR [ecx+eax+60]
	faddp	ST(1), ST(0)
	fstp	DWORD PTR _v1$[ebp+4]

; 756  : 			v1.v[Z] = (EditAiNode[i].Node[0].Pos.v[Z] * EditAiNode[i].RacingLine) + (EditAiNode[i].Node[1].Pos.v[Z] * (1 - EditAiNode[i].RacingLine));

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 104				; 00000068H
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 104				; 00000068H
	mov	edx, DWORD PTR ?EditAiNode@@3PAU_AINODE@@A ; EditAiNode
	mov	esi, DWORD PTR ?EditAiNode@@3PAU_AINODE@@A ; EditAiNode
	fld	DWORD PTR [edx+eax+48]
	fmul	DWORD PTR [esi+ecx+4]
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 104				; 00000068H
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 104				; 00000068H
	mov	edx, DWORD PTR ?EditAiNode@@3PAU_AINODE@@A ; EditAiNode
	fld	DWORD PTR __real@3f800000
	fsub	DWORD PTR [edx+ecx+4]
	mov	ecx, DWORD PTR ?EditAiNode@@3PAU_AINODE@@A ; EditAiNode
	fmul	DWORD PTR [ecx+eax+64]
	faddp	ST(1), ST(0)
	fstp	DWORD PTR _v1$[ebp+8]

; 757  : 
; 758  : 			v2.v[X] = (EditAiNode[i].Next[j]->Node[0].Pos.v[X] * EditAiNode[i].Next[j]->RacingLine) + (EditAiNode[i].Next[j]->Node[1].Pos.v[X] * (1 - EditAiNode[i].Next[j]->RacingLine));

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 104				; 00000068H
	add	eax, DWORD PTR ?EditAiNode@@3PAU_AINODE@@A ; EditAiNode
	mov	ecx, DWORD PTR _j$[ebp]
	mov	edx, DWORD PTR [eax+ecx*4+28]
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 104				; 00000068H
	add	eax, DWORD PTR ?EditAiNode@@3PAU_AINODE@@A ; EditAiNode
	mov	ecx, DWORD PTR _j$[ebp]
	mov	eax, DWORD PTR [eax+ecx*4+28]
	fld	DWORD PTR [edx+40]
	fmul	DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 104				; 00000068H
	add	ecx, DWORD PTR ?EditAiNode@@3PAU_AINODE@@A ; EditAiNode
	mov	edx, DWORD PTR _j$[ebp]
	mov	eax, DWORD PTR [ecx+edx*4+28]
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 104				; 00000068H
	add	ecx, DWORD PTR ?EditAiNode@@3PAU_AINODE@@A ; EditAiNode
	mov	edx, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR [ecx+edx*4+28]
	fld	DWORD PTR __real@3f800000
	fsub	DWORD PTR [ecx+4]
	fmul	DWORD PTR [eax+56]
	faddp	ST(1), ST(0)
	fstp	DWORD PTR _v2$[ebp]

; 759  : 			v2.v[Y] = (EditAiNode[i].Next[j]->Node[0].Pos.v[Y] * EditAiNode[i].Next[j]->RacingLine) + (EditAiNode[i].Next[j]->Node[1].Pos.v[Y] * (1 - EditAiNode[i].Next[j]->RacingLine));

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 104				; 00000068H
	add	eax, DWORD PTR ?EditAiNode@@3PAU_AINODE@@A ; EditAiNode
	mov	ecx, DWORD PTR _j$[ebp]
	mov	edx, DWORD PTR [eax+ecx*4+28]
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 104				; 00000068H
	add	eax, DWORD PTR ?EditAiNode@@3PAU_AINODE@@A ; EditAiNode
	mov	ecx, DWORD PTR _j$[ebp]
	mov	eax, DWORD PTR [eax+ecx*4+28]
	fld	DWORD PTR [edx+44]
	fmul	DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 104				; 00000068H
	add	ecx, DWORD PTR ?EditAiNode@@3PAU_AINODE@@A ; EditAiNode
	mov	edx, DWORD PTR _j$[ebp]
	mov	eax, DWORD PTR [ecx+edx*4+28]
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 104				; 00000068H
	add	ecx, DWORD PTR ?EditAiNode@@3PAU_AINODE@@A ; EditAiNode
	mov	edx, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR [ecx+edx*4+28]
	fld	DWORD PTR __real@3f800000
	fsub	DWORD PTR [ecx+4]
	fmul	DWORD PTR [eax+60]
	faddp	ST(1), ST(0)
	fstp	DWORD PTR _v2$[ebp+4]

; 760  : 			v2.v[Z] = (EditAiNode[i].Next[j]->Node[0].Pos.v[Z] * EditAiNode[i].Next[j]->RacingLine) + (EditAiNode[i].Next[j]->Node[1].Pos.v[Z] * (1 - EditAiNode[i].Next[j]->RacingLine));

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 104				; 00000068H
	add	eax, DWORD PTR ?EditAiNode@@3PAU_AINODE@@A ; EditAiNode
	mov	ecx, DWORD PTR _j$[ebp]
	mov	edx, DWORD PTR [eax+ecx*4+28]
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 104				; 00000068H
	add	eax, DWORD PTR ?EditAiNode@@3PAU_AINODE@@A ; EditAiNode
	mov	ecx, DWORD PTR _j$[ebp]
	mov	eax, DWORD PTR [eax+ecx*4+28]
	fld	DWORD PTR [edx+48]
	fmul	DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 104				; 00000068H
	add	ecx, DWORD PTR ?EditAiNode@@3PAU_AINODE@@A ; EditAiNode
	mov	edx, DWORD PTR _j$[ebp]
	mov	eax, DWORD PTR [ecx+edx*4+28]
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 104				; 00000068H
	add	ecx, DWORD PTR ?EditAiNode@@3PAU_AINODE@@A ; EditAiNode
	mov	edx, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR [ecx+edx*4+28]
	fld	DWORD PTR __real@3f800000
	fsub	DWORD PTR [ecx+4]
	fmul	DWORD PTR [eax+64]
	faddp	ST(1), ST(0)
	fstp	DWORD PTR _v2$[ebp+8]

; 761  : 
; 762  : 			DrawLine(&v1, &v2, 0xffffff, 0xffffff);

	push	16777215				; 00ffffffH
	push	16777215				; 00ffffffH
	lea	eax, DWORD PTR _v2$[ebp]
	push	eax
	lea	ecx, DWORD PTR _v1$[ebp]
	push	ecx
	call	?DrawLine@@YAXPAUVectorStruct@@0JJ@Z	; DrawLine
	add	esp, 16					; 00000010H
$L81648:

; 763  : 		}
; 764  : 
; 765  : // dump finish dist
; 766  : 
; 767  : 		SET_TPAGE(TPAGE_FONT);

	jmp	$L81646
$L81647:
	movsx	eax, WORD PTR ?RenderTP@@3FA		; RenderTP
	cmp	eax, 22					; 00000016H
	je	SHORT $L81649
	mov	WORD PTR ?RenderTP@@3FA, 22		; RenderTP, 00000016H
	movsx	eax, WORD PTR ?RenderTP@@3FA		; RenderTP
	cmp	eax, -1
	jne	SHORT $L81650
	push	0
	push	0
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	edx
	call	DWORD PTR [ecx+152]
	mov	eax, DWORD PTR ?TextureStateChange@@3JA	; TextureStateChange
	add	eax, 1
	mov	DWORD PTR ?TextureStateChange@@3JA, eax	; TextureStateChange
	jmp	SHORT $L81649
$L81650:
	movsx	eax, WORD PTR ?RenderTP@@3FA		; RenderTP
	shl	eax, 6
	mov	ecx, DWORD PTR ?TexInfo@@3PAUTEXINFO@@A	; TexInfo
	mov	edx, DWORD PTR [ecx+eax+52]
	push	edx
	push	0
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	edx
	call	DWORD PTR [ecx+152]
	mov	eax, DWORD PTR ?TextureStateChange@@3JA	; TextureStateChange
	add	eax, 1
	mov	DWORD PTR ?TextureStateChange@@3JA, eax	; TextureStateChange
$L81649:

; 768  : 		wsprintf(buf, "%ld", (long)EditAiNode[i].FinishDist);

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 104				; 00000068H
	mov	ecx, DWORD PTR ?EditAiNode@@3PAU_AINODE@@A ; EditAiNode
	fld	DWORD PTR [ecx+eax+8]
	call	__ftol2
	push	eax
	push	OFFSET FLAT:??_C@_03JALODAI@?$CFld?$AA@
	lea	edx, DWORD PTR _buf$[ebp]
	push	edx
	call	DWORD PTR __imp__wsprintfA
	add	esp, 12					; 0000000cH

; 769  : 		RotTransVector(&ViewMatrix, &ViewTrans, &v1, &v2);

	lea	eax, DWORD PTR _v2$[ebp]
	push	eax
	lea	ecx, DWORD PTR _v1$[ebp]
	push	ecx
	push	OFFSET FLAT:?ViewTrans@@3UVectorStruct@@A ; ViewTrans
	push	OFFSET FLAT:?ViewMatrix@@3TMatrixUnion@@A ; ViewMatrix
	call	?RotTransVector@@YAXPATMatrixUnion@@PAUVectorStruct@@11@Z ; RotTransVector
	add	esp, 16					; 00000010H

; 770  : 		v2.v[X] -= 48.0f;

	fld	DWORD PTR _v2$[ebp]
	fsub	DWORD PTR __real@42400000
	fstp	DWORD PTR _v2$[ebp]

; 771  : 		v2.v[Y] -= 32.0f;

	fld	DWORD PTR _v2$[ebp+4]
	fsub	DWORD PTR __real@42000000
	fstp	DWORD PTR _v2$[ebp+4]

; 772  : 		DumpText3D(&v2, 16, 32, 0xffffffff, buf);

	lea	eax, DWORD PTR _buf$[ebp]
	push	eax
	push	-1
	push	1107296256				; 42000000H
	push	1098907648				; 41800000H
	lea	ecx, DWORD PTR _v2$[ebp]
	push	ecx
	call	?DumpText3D@@YAXPAUVectorStruct@@MMJPAD@Z ; DumpText3D
	add	esp, 20					; 00000014H

; 773  : 
; 774  : // draw 'brother' link
; 775  : 
; 776  : 		DrawLine(&EditAiNode[i].Node[0].Pos, &EditAiNode[i].Node[1].Pos, 0xffff00, 0xffff00);

	push	16776960				; 00ffff00H
	push	16776960				; 00ffff00H
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 104				; 00000068H
	mov	ecx, DWORD PTR ?EditAiNode@@3PAU_AINODE@@A ; EditAiNode
	lea	edx, DWORD PTR [ecx+eax+56]
	push	edx
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 104				; 00000068H
	mov	ecx, DWORD PTR ?EditAiNode@@3PAU_AINODE@@A ; EditAiNode
	lea	edx, DWORD PTR [ecx+eax+40]
	push	edx
	call	?DrawLine@@YAXPAUVectorStruct@@0JJ@Z	; DrawLine
	add	esp, 16					; 00000010H

; 777  : 	}

	jmp	$L81628
$L81618:

; 778  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?DrawAiNodes@@YAXXZ ENDP				; DrawAiNodes
_TEXT	ENDS
PUBLIC	_sinf
; Function compile flags: /Odt /ZI
; File c:\program files\microsoft visual studio .net 2003\vc7\include\math.h
;	COMDAT ?sin@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?sin@@YAMM@Z PROC NEAR					; sin, COMDAT

; 575  :         {return (sinf(_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR __X$[ebp]
	push	eax
	call	_sinf
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?sin@@YAMM@Z ENDP					; sin
_TEXT	ENDS
EXTRN	_sin:NEAR
; Function compile flags: /Odt /ZI
;	COMDAT _sinf
_TEXT	SEGMENT
tv70 = -68						; size = 4
__X$ = 8						; size = 4
_sinf	PROC NEAR					; COMDAT

; 466  :         {return ((float)sin((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	fld	DWORD PTR __X$[ebp]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	call	_sin
	add	esp, 8
	fst	DWORD PTR tv70[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_sinf	ENDP
_TEXT	ENDS
PUBLIC	?DisplayAiNodeInfo@@YAXPAU_AINODE@@@Z		; DisplayAiNodeInfo
PUBLIC	??_C@_03CCLAEDDF@Yes?$AA@			; `string'
PUBLIC	??_C@_02JINPPBEP@No?$AA@			; `string'
PUBLIC	??_C@_0N@GOMJDPPC@Priority?3?5?$CFs?$AA@	; `string'
PUBLIC	??_C@_0P@BHNFENKG@Start?5Node?3?5?$CFs?$AA@	; `string'
PUBLIC	??_C@_0BA@DGJADCCO@Green?5Speed?3?5?$CFd?$AA@	; `string'
PUBLIC	??_C@_0O@FCOBGDBL@Red?5Speed?3?5?$CFd?$AA@	; `string'
PUBLIC	??_C@_0BB@GEENKGKJ@Racing?5Speed?3?5?$CFd?$AA@	; `string'
PUBLIC	??_C@_0BB@MPELAHJF@Centre?5Speed?3?5?$CFd?$AA@	; `string'
PUBLIC	??_C@_0P@GAGFGOMG@Track?5dist?3?5?$CFd?$AA@	; `string'
EXTRN	?DumpText@@YAXFFFFJPAD@Z:NEAR			; DumpText
;	COMDAT ??_C@_03CCLAEDDF@Yes?$AA@
; File c:\documents and settings\jarhead\desktop\shit to display my love for xbox revolt and fuck you borman-ness\revolt source\source\editai.cpp
CONST	SEGMENT
??_C@_03CCLAEDDF@Yes?$AA@ DB 'Yes', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02JINPPBEP@No?$AA@
CONST	SEGMENT
??_C@_02JINPPBEP@No?$AA@ DB 'No', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@GOMJDPPC@Priority?3?5?$CFs?$AA@
CONST	SEGMENT
??_C@_0N@GOMJDPPC@Priority?3?5?$CFs?$AA@ DB 'Priority: %s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@BHNFENKG@Start?5Node?3?5?$CFs?$AA@
CONST	SEGMENT
??_C@_0P@BHNFENKG@Start?5Node?3?5?$CFs?$AA@ DB 'Start Node: %s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@DGJADCCO@Green?5Speed?3?5?$CFd?$AA@
CONST	SEGMENT
??_C@_0BA@DGJADCCO@Green?5Speed?3?5?$CFd?$AA@ DB 'Green Speed: %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@FCOBGDBL@Red?5Speed?3?5?$CFd?$AA@
CONST	SEGMENT
??_C@_0O@FCOBGDBL@Red?5Speed?3?5?$CFd?$AA@ DB 'Red Speed: %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@GEENKGKJ@Racing?5Speed?3?5?$CFd?$AA@
CONST	SEGMENT
??_C@_0BB@GEENKGKJ@Racing?5Speed?3?5?$CFd?$AA@ DB 'Racing Speed: %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@MPELAHJF@Centre?5Speed?3?5?$CFd?$AA@
CONST	SEGMENT
??_C@_0BB@MPELAHJF@Centre?5Speed?3?5?$CFd?$AA@ DB 'Centre Speed: %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@GAGFGOMG@Track?5dist?3?5?$CFd?$AA@
CONST	SEGMENT
??_C@_0P@GAGFGOMG@Track?5dist?3?5?$CFd?$AA@ DB 'Track dist: %d', 00H ; `string'
; Function compile flags: /Odt /ZI
CONST	ENDS
;	COMDAT ?DisplayAiNodeInfo@@YAXPAU_AINODE@@@Z
_TEXT	SEGMENT
tv80 = -196						; size = 4
tv67 = -196						; size = 4
_buf$ = -128						; size = 128
_node$ = 8						; size = 4
?DisplayAiNodeInfo@@YAXPAU_AINODE@@@Z PROC NEAR		; DisplayAiNodeInfo, COMDAT

; 785  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi

; 786  : 	char buf[128];
; 787  : 
; 788  : // priority
; 789  : 
; 790  : 	wsprintf(buf, "Priority: %s", node->Priority ? "Yes" : "No");

	mov	eax, DWORD PTR _node$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $L81893
	mov	DWORD PTR tv67[ebp], OFFSET FLAT:??_C@_03CCLAEDDF@Yes?$AA@
	jmp	SHORT $L81894
$L81893:
	mov	DWORD PTR tv67[ebp], OFFSET FLAT:??_C@_02JINPPBEP@No?$AA@
$L81894:
	mov	edx, DWORD PTR tv67[ebp]
	push	edx
	push	OFFSET FLAT:??_C@_0N@GOMJDPPC@Priority?3?5?$CFs?$AA@
	lea	eax, DWORD PTR _buf$[ebp]
	push	eax
	call	DWORD PTR __imp__wsprintfA
	add	esp, 12					; 0000000cH

; 791  : 	DumpText(450, 0, 8, 16, 0xffffff, buf);

	lea	eax, DWORD PTR _buf$[ebp]
	push	eax
	push	16777215				; 00ffffffH
	push	16					; 00000010H
	push	8
	push	0
	push	450					; 000001c2H
	call	?DumpText@@YAXFFFFJPAD@Z		; DumpText
	add	esp, 24					; 00000018H

; 792  : 
; 793  : // start node
; 794  : 
; 795  : 	wsprintf(buf, "Start Node: %s", node->StartNode ? "Yes" : "No");

	mov	eax, DWORD PTR _node$[ebp]
	movsx	ecx, BYTE PTR [eax+1]
	test	ecx, ecx
	je	SHORT $L81895
	mov	DWORD PTR tv80[ebp], OFFSET FLAT:??_C@_03CCLAEDDF@Yes?$AA@
	jmp	SHORT $L81896
$L81895:
	mov	DWORD PTR tv80[ebp], OFFSET FLAT:??_C@_02JINPPBEP@No?$AA@
$L81896:
	mov	edx, DWORD PTR tv80[ebp]
	push	edx
	push	OFFSET FLAT:??_C@_0P@BHNFENKG@Start?5Node?3?5?$CFs?$AA@
	lea	eax, DWORD PTR _buf$[ebp]
	push	eax
	call	DWORD PTR __imp__wsprintfA
	add	esp, 12					; 0000000cH

; 796  : 	DumpText(450, 24, 8, 16, 0x00ffff, buf);

	lea	eax, DWORD PTR _buf$[ebp]
	push	eax
	push	65535					; 0000ffffH
	push	16					; 00000010H
	push	8
	push	24					; 00000018H
	push	450					; 000001c2H
	call	?DumpText@@YAXFFFFJPAD@Z		; DumpText
	add	esp, 24					; 00000018H

; 797  : 
; 798  : // speeds
; 799  : 
; 800  : 	wsprintf(buf, "Green Speed: %d", node->Node[0].Speed);

	mov	eax, DWORD PTR _node$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	push	ecx
	push	OFFSET FLAT:??_C@_0BA@DGJADCCO@Green?5Speed?3?5?$CFd?$AA@
	lea	edx, DWORD PTR _buf$[ebp]
	push	edx
	call	DWORD PTR __imp__wsprintfA
	add	esp, 12					; 0000000cH

; 801  : 	DumpText(450, 48, 8, 16, 0x00ff00, buf);

	lea	eax, DWORD PTR _buf$[ebp]
	push	eax
	push	65280					; 0000ff00H
	push	16					; 00000010H
	push	8
	push	48					; 00000030H
	push	450					; 000001c2H
	call	?DumpText@@YAXFFFFJPAD@Z		; DumpText
	add	esp, 24					; 00000018H

; 802  : 
; 803  : 	wsprintf(buf, "Red Speed: %d", node->Node[1].Speed);

	mov	eax, DWORD PTR _node$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	push	ecx
	push	OFFSET FLAT:??_C@_0O@FCOBGDBL@Red?5Speed?3?5?$CFd?$AA@
	lea	edx, DWORD PTR _buf$[ebp]
	push	edx
	call	DWORD PTR __imp__wsprintfA
	add	esp, 12					; 0000000cH

; 804  : 	DumpText(450, 72, 8, 16, 0xff0000, buf);

	lea	eax, DWORD PTR _buf$[ebp]
	push	eax
	push	16711680				; 00ff0000H
	push	16					; 00000010H
	push	8
	push	72					; 00000048H
	push	450					; 000001c2H
	call	?DumpText@@YAXFFFFJPAD@Z		; DumpText
	add	esp, 24					; 00000018H

; 805  : 
; 806  : 	wsprintf(buf, "Racing Speed: %d", node->RacingLineSpeed);

	mov	eax, DWORD PTR _node$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	push	OFFSET FLAT:??_C@_0BB@GEENKGKJ@Racing?5Speed?3?5?$CFd?$AA@
	lea	edx, DWORD PTR _buf$[ebp]
	push	edx
	call	DWORD PTR __imp__wsprintfA
	add	esp, 12					; 0000000cH

; 807  : 	DumpText(450, 96, 8, 16, 0x0000ff, buf);

	lea	eax, DWORD PTR _buf$[ebp]
	push	eax
	push	255					; 000000ffH
	push	16					; 00000010H
	push	8
	push	96					; 00000060H
	push	450					; 000001c2H
	call	?DumpText@@YAXFFFFJPAD@Z		; DumpText
	add	esp, 24					; 00000018H

; 808  : 
; 809  : 	wsprintf(buf, "Centre Speed: %d", node->CentreSpeed);

	mov	eax, DWORD PTR _node$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	push	OFFSET FLAT:??_C@_0BB@MPELAHJF@Centre?5Speed?3?5?$CFd?$AA@
	lea	edx, DWORD PTR _buf$[ebp]
	push	edx
	call	DWORD PTR __imp__wsprintfA
	add	esp, 12					; 0000000cH

; 810  : 	DumpText(450, 120, 8, 16, 0xffff00, buf);

	lea	eax, DWORD PTR _buf$[ebp]
	push	eax
	push	16776960				; 00ffff00H
	push	16					; 00000010H
	push	8
	push	120					; 00000078H
	push	450					; 000001c2H
	call	?DumpText@@YAXFFFFJPAD@Z		; DumpText
	add	esp, 24					; 00000018H

; 811  : 
; 812  : // total dist
; 813  : 
; 814  : 	wsprintf(buf, "Track dist: %d", (long)EditAiNodeTotalDist);

	fld	DWORD PTR _EditAiNodeTotalDist
	call	__ftol2
	push	eax
	push	OFFSET FLAT:??_C@_0P@GAGFGOMG@Track?5dist?3?5?$CFd?$AA@
	lea	eax, DWORD PTR _buf$[ebp]
	push	eax
	call	DWORD PTR __imp__wsprintfA
	add	esp, 12					; 0000000cH

; 815  : 	DumpText(450, 152, 8, 16, 0xff00ff, buf);

	lea	eax, DWORD PTR _buf$[ebp]
	push	eax
	push	16711935				; 00ff00ffH
	push	16					; 00000010H
	push	8
	push	152					; 00000098H
	push	450					; 000001c2H
	call	?DumpText@@YAXFFFFJPAD@Z		; DumpText
	add	esp, 24					; 00000018H

; 816  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?DisplayAiNodeInfo@@YAXPAU_AINODE@@@Z ENDP		; DisplayAiNodeInfo
_TEXT	ENDS
EXTRN	?PointInCollPolyBounds@@YA_NPAUVectorStruct@@PAUCollPolyStruct@@@Z:NEAR ; PointInCollPolyBounds
EXTRN	?LinePlaneIntersect@@YA_NPAUVectorStruct@@0PAUPlaneStruct@@PAM2@Z:NEAR ; LinePlaneIntersect
EXTRN	?COL_WorldCollPoly@@3PAUCollPolyStruct@@A:DWORD	; COL_WorldCollPoly
EXTRN	?COL_NWorldCollPolys@@3FA:WORD			; COL_NWorldCollPolys
EXTRN	?COL_InstanceCollPoly@@3PAUCollPolyStruct@@A:DWORD ; COL_InstanceCollPoly
EXTRN	?COL_NInstanceCollPolys@@3FA:WORD		; COL_NInstanceCollPolys
EXTRN	?RotVector@@YAXPATMatrixUnion@@PAUVectorStruct@@1@Z:NEAR ; RotVector
; Function compile flags: /Odt /ZI
;	COMDAT ?GetEditNodePos@@YAXPAUVectorStruct@@MM0@Z
_TEXT	SEGMENT
__mul$81682 = -60					; size = 4
_ntime$ = -56						; size = 4
_depth$ = -52						; size = 4
_time$ = -48						; size = 4
_dest$ = -44						; size = 12
_offset$ = -32						; size = 12
_vec$ = -20						; size = 12
_poly$ = -8						; size = 4
_i$ = -4						; size = 4
_campos$ = 8						; size = 4
_xpos$ = 12						; size = 4
_ypos$ = 16						; size = 4
_nodepos$ = 20						; size = 4
?GetEditNodePos@@YAXPAUVectorStruct@@MM0@Z PROC NEAR	; GetEditNodePos, COMDAT

; 823  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 124				; 0000007cH
	push	ebx
	push	esi
	push	edi

; 824  : 	long i;
; 825  : 	NEWCOLLPOLY *poly;
; 826  : 	VEC vec, offset, dest;
; 827  : 	float time, depth, ntime;
; 828  : 
; 829  : // get dest vector
; 830  : 
; 831  : 	vec.v[X] = xpos - REAL_SCREEN_XHALF;

	fld	DWORD PTR _xpos$[ebp]
	fsub	DWORD PTR __real@43a00000
	fstp	DWORD PTR _vec$[ebp]

; 832  : 	vec.v[Y] = ypos - REAL_SCREEN_YHALF;

	fld	DWORD PTR _ypos$[ebp]
	fsub	DWORD PTR __real@43700000
	fstp	DWORD PTR _vec$[ebp+4]

; 833  : 	vec.v[Z] = RenderSettings.GeomPers;

	mov	eax, DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A
	mov	DWORD PTR _vec$[ebp+8], eax

; 834  : 
; 835  : 	RotVector(&CAM_MainCamera->WMatrix, &vec, &offset);

	lea	eax, DWORD PTR _offset$[ebp]
	push	eax
	lea	ecx, DWORD PTR _vec$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	add	edx, 16					; 00000010H
	push	edx
	call	?RotVector@@YAXPATMatrixUnion@@PAUVectorStruct@@1@Z ; RotVector
	add	esp, 12					; 0000000cH

; 836  : 	NormalizeVector(&offset);

	fld	DWORD PTR _offset$[ebp]
	fmul	DWORD PTR _offset$[ebp]
	fld	DWORD PTR _offset$[ebp+4]
	fmul	DWORD PTR _offset$[ebp+4]
	faddp	ST(1), ST(0)
	fld	DWORD PTR _offset$[ebp+8]
	fmul	DWORD PTR _offset$[ebp+8]
	faddp	ST(1), ST(0)
	push	ecx
	fstp	DWORD PTR [esp]
	call	?sqrt@@YAMM@Z				; sqrt
	add	esp, 4
	fdivr	DWORD PTR __real@3f800000
	fstp	DWORD PTR __mul$81682[ebp]
	fld	DWORD PTR _offset$[ebp]
	fmul	DWORD PTR __mul$81682[ebp]
	fstp	DWORD PTR _offset$[ebp]
	fld	DWORD PTR _offset$[ebp+4]
	fmul	DWORD PTR __mul$81682[ebp]
	fstp	DWORD PTR _offset$[ebp+4]
	fld	DWORD PTR _offset$[ebp+8]
	fmul	DWORD PTR __mul$81682[ebp]
	fstp	DWORD PTR _offset$[ebp+8]

; 837  : 	offset.v[X] *= RenderSettings.FarClip;

	fld	DWORD PTR _offset$[ebp]
	fmul	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+32
	fstp	DWORD PTR _offset$[ebp]

; 838  : 	offset.v[Y] *= RenderSettings.FarClip;

	fld	DWORD PTR _offset$[ebp+4]
	fmul	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+32
	fstp	DWORD PTR _offset$[ebp+4]

; 839  : 	offset.v[Z] *= RenderSettings.FarClip;

	fld	DWORD PTR _offset$[ebp+8]
	fmul	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+32
	fstp	DWORD PTR _offset$[ebp+8]

; 840  : 
; 841  : 	AddVector(&offset, &CAM_MainCamera->WPos, &dest);

	mov	eax, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fld	DWORD PTR _offset$[ebp]
	fadd	DWORD PTR [eax+68]
	fstp	DWORD PTR _dest$[ebp]
	mov	eax, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fld	DWORD PTR _offset$[ebp+4]
	fadd	DWORD PTR [eax+72]
	fstp	DWORD PTR _dest$[ebp+4]
	mov	eax, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fld	DWORD PTR _offset$[ebp+8]
	fadd	DWORD PTR [eax+76]
	fstp	DWORD PTR _dest$[ebp+8]

; 842  : 	DrawLine(campos, &dest, 0xffff00, 0xffff00);

	push	16776960				; 00ffff00H
	push	16776960				; 00ffff00H
	lea	eax, DWORD PTR _dest$[ebp]
	push	eax
	mov	ecx, DWORD PTR _campos$[ebp]
	push	ecx
	call	?DrawLine@@YAXPAUVectorStruct@@0JJ@Z	; DrawLine
	add	esp, 16					; 00000010H

; 843  : 
; 844  : // loop thru all coll polys
; 845  : 
; 846  : 	ntime = 1.0f;

	mov	DWORD PTR _ntime$[ebp], 1065353216	; 3f800000H

; 847  : 
; 848  : 	poly = COL_WorldCollPoly;

	mov	eax, DWORD PTR ?COL_WorldCollPoly@@3PAUCollPolyStruct@@A ; COL_WorldCollPoly
	mov	DWORD PTR _poly$[ebp], eax

; 849  : 	for (i = 0 ; i < COL_NWorldCollPolys ; i++, poly++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $L81684
$L81685:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	mov	ecx, DWORD PTR _poly$[ebp]
	add	ecx, 112				; 00000070H
	mov	DWORD PTR _poly$[ebp], ecx
$L81684:
	movsx	eax, WORD PTR ?COL_NWorldCollPolys@@3FA	; COL_NWorldCollPolys
	cmp	DWORD PTR _i$[ebp], eax
	jge	$L81686

; 850  : 	{
; 851  : 		if (LinePlaneIntersect(campos, &dest, &poly->Plane, &time, &depth))

	lea	eax, DWORD PTR _depth$[ebp]
	push	eax
	lea	ecx, DWORD PTR _time$[ebp]
	push	ecx
	mov	edx, DWORD PTR _poly$[ebp]
	add	edx, 8
	push	edx
	lea	eax, DWORD PTR _dest$[ebp]
	push	eax
	mov	ecx, DWORD PTR _campos$[ebp]
	push	ecx
	call	?LinePlaneIntersect@@YA_NPAUVectorStruct@@0PAUPlaneStruct@@PAM2@Z ; LinePlaneIntersect
	add	esp, 20					; 00000014H
	movzx	edx, al
	test	edx, edx
	je	$L81687

; 852  : 		{
; 853  : 			if (PlaneDist(&poly->Plane, &CAM_MainCamera->WPos) > 0)

	mov	eax, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	mov	ecx, DWORD PTR _poly$[ebp]
	fld	DWORD PTR [eax+68]
	fmul	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	mov	eax, DWORD PTR _poly$[ebp]
	fld	DWORD PTR [edx+72]
	fmul	DWORD PTR [eax+12]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	mov	edx, DWORD PTR _poly$[ebp]
	fld	DWORD PTR [ecx+76]
	fmul	DWORD PTR [edx+16]
	faddp	ST(1), ST(0)
	mov	eax, DWORD PTR _poly$[ebp]
	fadd	DWORD PTR [eax+20]
	fcomp	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	$L81687

; 854  : 			{
; 855  : 				if (time > 0 && time < ntime)

	fld	DWORD PTR _time$[ebp]
	fcomp	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $L81687
	fld	DWORD PTR _time$[ebp]
	fcomp	DWORD PTR _ntime$[ebp]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L81687

; 856  : 				{
; 857  : 					vec.v[X] = campos->v[X] + offset.v[X] * time;

	fld	DWORD PTR _offset$[ebp]
	fmul	DWORD PTR _time$[ebp]
	mov	eax, DWORD PTR _campos$[ebp]
	fadd	DWORD PTR [eax]
	fstp	DWORD PTR _vec$[ebp]

; 858  : 					vec.v[Y] = campos->v[Y] + offset.v[Y] * time;

	fld	DWORD PTR _offset$[ebp+4]
	fmul	DWORD PTR _time$[ebp]
	mov	eax, DWORD PTR _campos$[ebp]
	fadd	DWORD PTR [eax+4]
	fstp	DWORD PTR _vec$[ebp+4]

; 859  : 					vec.v[Z] = campos->v[Z] + offset.v[Z] * time;

	fld	DWORD PTR _offset$[ebp+8]
	fmul	DWORD PTR _time$[ebp]
	mov	eax, DWORD PTR _campos$[ebp]
	fadd	DWORD PTR [eax+8]
	fstp	DWORD PTR _vec$[ebp+8]

; 860  : 	
; 861  : 					if (PointInCollPolyBounds(&vec, poly))

	mov	eax, DWORD PTR _poly$[ebp]
	push	eax
	lea	ecx, DWORD PTR _vec$[ebp]
	push	ecx
	call	?PointInCollPolyBounds@@YA_NPAUVectorStruct@@PAUCollPolyStruct@@@Z ; PointInCollPolyBounds
	add	esp, 8
	movzx	edx, al
	test	edx, edx
	je	SHORT $L81687

; 862  : 					{
; 863  : 						CopyVec(&vec, nodepos);

	mov	eax, DWORD PTR _nodepos$[ebp]
	mov	ecx, DWORD PTR _vec$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	eax, DWORD PTR _nodepos$[ebp]
	mov	ecx, DWORD PTR _vec$[ebp+4]
	mov	DWORD PTR [eax+4], ecx
	mov	eax, DWORD PTR _nodepos$[ebp]
	mov	ecx, DWORD PTR _vec$[ebp+8]
	mov	DWORD PTR [eax+8], ecx

; 864  : 						ntime = time;

	mov	eax, DWORD PTR _time$[ebp]
	mov	DWORD PTR _ntime$[ebp], eax
$L81687:

; 865  : 					}
; 866  : 				}
; 867  : 			}
; 868  : 		}
; 869  : 	}

	jmp	$L81685
$L81686:

; 870  : 
; 871  : 	poly = COL_InstanceCollPoly;

	mov	eax, DWORD PTR ?COL_InstanceCollPoly@@3PAUCollPolyStruct@@A ; COL_InstanceCollPoly
	mov	DWORD PTR _poly$[ebp], eax

; 872  : 	for (i = 0 ; i < COL_NInstanceCollPolys ; i++, poly++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $L81691
$L81692:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	mov	ecx, DWORD PTR _poly$[ebp]
	add	ecx, 112				; 00000070H
	mov	DWORD PTR _poly$[ebp], ecx
$L81691:
	movsx	eax, WORD PTR ?COL_NInstanceCollPolys@@3FA ; COL_NInstanceCollPolys
	cmp	DWORD PTR _i$[ebp], eax
	jge	$L81693

; 873  : 	{
; 874  : 		if (LinePlaneIntersect(campos, &dest, &poly->Plane, &time, &depth))

	lea	eax, DWORD PTR _depth$[ebp]
	push	eax
	lea	ecx, DWORD PTR _time$[ebp]
	push	ecx
	mov	edx, DWORD PTR _poly$[ebp]
	add	edx, 8
	push	edx
	lea	eax, DWORD PTR _dest$[ebp]
	push	eax
	mov	ecx, DWORD PTR _campos$[ebp]
	push	ecx
	call	?LinePlaneIntersect@@YA_NPAUVectorStruct@@0PAUPlaneStruct@@PAM2@Z ; LinePlaneIntersect
	add	esp, 20					; 00000014H
	movzx	edx, al
	test	edx, edx
	je	$L81694

; 875  : 		{
; 876  : 			if (PlaneDist(&poly->Plane, &CAM_MainCamera->WPos) > 0)

	mov	eax, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	mov	ecx, DWORD PTR _poly$[ebp]
	fld	DWORD PTR [eax+68]
	fmul	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	mov	eax, DWORD PTR _poly$[ebp]
	fld	DWORD PTR [edx+72]
	fmul	DWORD PTR [eax+12]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	mov	edx, DWORD PTR _poly$[ebp]
	fld	DWORD PTR [ecx+76]
	fmul	DWORD PTR [edx+16]
	faddp	ST(1), ST(0)
	mov	eax, DWORD PTR _poly$[ebp]
	fadd	DWORD PTR [eax+20]
	fcomp	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	$L81694

; 877  : 			{
; 878  : 				if (time > 0 && time < ntime)

	fld	DWORD PTR _time$[ebp]
	fcomp	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $L81694
	fld	DWORD PTR _time$[ebp]
	fcomp	DWORD PTR _ntime$[ebp]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L81694

; 879  : 				{
; 880  : 					vec.v[X] = campos->v[X] + offset.v[X] * time;

	fld	DWORD PTR _offset$[ebp]
	fmul	DWORD PTR _time$[ebp]
	mov	eax, DWORD PTR _campos$[ebp]
	fadd	DWORD PTR [eax]
	fstp	DWORD PTR _vec$[ebp]

; 881  : 					vec.v[Y] = campos->v[Y] + offset.v[Y] * time;

	fld	DWORD PTR _offset$[ebp+4]
	fmul	DWORD PTR _time$[ebp]
	mov	eax, DWORD PTR _campos$[ebp]
	fadd	DWORD PTR [eax+4]
	fstp	DWORD PTR _vec$[ebp+4]

; 882  : 					vec.v[Z] = campos->v[Z] + offset.v[Z] * time;

	fld	DWORD PTR _offset$[ebp+8]
	fmul	DWORD PTR _time$[ebp]
	mov	eax, DWORD PTR _campos$[ebp]
	fadd	DWORD PTR [eax+8]
	fstp	DWORD PTR _vec$[ebp+8]

; 883  : 	
; 884  : 					if (PointInCollPolyBounds(&vec, poly))

	mov	eax, DWORD PTR _poly$[ebp]
	push	eax
	lea	ecx, DWORD PTR _vec$[ebp]
	push	ecx
	call	?PointInCollPolyBounds@@YA_NPAUVectorStruct@@PAUCollPolyStruct@@@Z ; PointInCollPolyBounds
	add	esp, 8
	movzx	edx, al
	test	edx, edx
	je	SHORT $L81694

; 885  : 					{
; 886  : 						CopyVec(&vec, nodepos);

	mov	eax, DWORD PTR _nodepos$[ebp]
	mov	ecx, DWORD PTR _vec$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	eax, DWORD PTR _nodepos$[ebp]
	mov	ecx, DWORD PTR _vec$[ebp+4]
	mov	DWORD PTR [eax+4], ecx
	mov	eax, DWORD PTR _nodepos$[ebp]
	mov	ecx, DWORD PTR _vec$[ebp+8]
	mov	DWORD PTR [eax+8], ecx

; 887  : 						ntime = time;

	mov	eax, DWORD PTR _time$[ebp]
	mov	DWORD PTR _ntime$[ebp], eax
$L81694:

; 888  : 					}
; 889  : 				}
; 890  : 			}
; 891  : 		}
; 892  : 	}

	jmp	$L81692
$L81693:

; 893  : 
; 894  : // set default?
; 895  : 
; 896  : 	if (ntime == 1.0f)

	cmp	DWORD PTR _ntime$[ebp], 1065353216	; 3f800000H
	jne	SHORT $L81673

; 897  : 	{
; 898  : 		SetVector(&vec, 0, 0, RenderSettings.GeomPers);

	mov	DWORD PTR _vec$[ebp], 0
	mov	DWORD PTR _vec$[ebp+4], 0
	mov	eax, DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A
	mov	DWORD PTR _vec$[ebp+8], eax

; 899  : 		RotTransVector(&CAM_MainCamera->WMatrix, &CAM_MainCamera->WPos, &vec, nodepos);

	mov	eax, DWORD PTR _nodepos$[ebp]
	push	eax
	lea	ecx, DWORD PTR _vec$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	add	edx, 68					; 00000044H
	push	edx
	mov	eax, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	add	eax, 16					; 00000010H
	push	eax
	call	?RotTransVector@@YAXPATMatrixUnion@@PAUVectorStruct@@11@Z ; RotTransVector
	add	esp, 16					; 00000010H
$L81673:

; 900  : 	}
; 901  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetEditNodePos@@YAXPAUVectorStruct@@MM0@Z ENDP		; GetEditNodePos
_TEXT	ENDS
END
