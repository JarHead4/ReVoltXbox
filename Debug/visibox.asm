; Listing generated by Microsoft (R) Optimizing Compiler Version 13.10.3077 

	TITLE	.\source\visibox.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT PARA USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_06JCBBMBIP@Camera?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_05CNOCFFFH@Cubes?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_03IDDGKHFD@X?5Y?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_03KIBLPEJA@X?5Z?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_03CJDPGPNI@Z?5Y?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_01MMEEDKFM@X?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_01NFFPALBN@Y?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_01POHCFINO@Z?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_05MFLOHCHP@World?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_02JDPG@rb?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_02GMLFBBN@wb?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_03PHMDHFOD@vi?9?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BE@IMHNLFNP@Saved?5Visibox?5File?3?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_03NDPLAFDJ@vis?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_03GOGOMMPD@cam?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_05FEDMHOOH@ID?5?$CFd?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0N@MOINFLNL@Axis?5?$CFs?5?9?5?$CFs?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0N@KLJCCIGO@Big?5Brothers?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0O@HPAHNMMP@Locked?5Camera?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_02DPKJAMEF@?$CFd?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_05DIALNFFA@?$CFs?5?$CFd?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _IsEqualGUID
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _==
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _acosl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _asinl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _atanl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _atan2l
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _ceill
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _cosl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _coshl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _expl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _fabsl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _floorl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _fmodl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _frexpl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _ldexpl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _logl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _log10l
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _modfl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _powl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _sinl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _sinhl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _sqrtl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _tanl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _tanhl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _frexpf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _ldexpf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _acosf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _asinf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _atanf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _atan2f
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _ceilf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _cosf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _coshf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _expf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _fabsf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _floorf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _fmodf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _logf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _log10f
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _modff
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _powf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _sinf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _sinhf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _sqrtf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _tanf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _tanhf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?sqrt@@YAMM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?InitVisiBoxes@@YAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AllocVisiBox@@YAPAUVISIBOX@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?FreeVisiBox@@YAXPAUVISIBOX@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?LoadVisiBoxes@@YAXPAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SaveVisiBoxes@@YAXPAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?EditVisiBoxes@@YAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DisplayVisiBoxInfo@@YAXPAUVISIBOX@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DisplayCamVisiMask@@YAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DrawVisiBoxes@@YAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetPermVisiBoxes@@YAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetObjectVisiMask@@YA_KPAUBoundingBoxStruct@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?TestObjectVisiboxes@@YADPAUBoundingBoxStruct@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetCameraVisiMask@@YAXPAUVectorStruct@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Pow_int@N@@YANNH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Pow_int@H@@YAHHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Pow_int@M@@YAMMH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Pow_int@O@@YAOOH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
sxdata	SEGMENT DWORD USE32 'SXDATA'
sxdata	ENDS
FLAT	GROUP _DATA, CONST, _BSS
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBCD
INCLUDELIB OLDNAMES

PUBLIC	?CamVisiMask@@3_KA				; CamVisiMask
PUBLIC	?CubeVisiBoxCount@@3JA				; CubeVisiBoxCount
PUBLIC	?VisiPerPoly@@3JA				; VisiPerPoly
PUBLIC	?CubeVisiBox@@3PAUPERM_VISIBOX@@A		; CubeVisiBox
PUBLIC	?CurrentVisiBox@@3PAUVISIBOX@@A			; CurrentVisiBox
PUBLIC	??_C@_06JCBBMBIP@Camera?$AA@			; `string'
PUBLIC	??_C@_05CNOCFFFH@Cubes?$AA@			; `string'
PUBLIC	??_C@_03IDDGKHFD@X?5Y?$AA@			; `string'
PUBLIC	??_C@_03KIBLPEJA@X?5Z?$AA@			; `string'
PUBLIC	??_C@_03CJDPGPNI@Z?5Y?$AA@			; `string'
PUBLIC	??_C@_01MMEEDKFM@X?$AA@				; `string'
PUBLIC	??_C@_01NFFPALBN@Y?$AA@				; `string'
PUBLIC	??_C@_01POHCFINO@Z?$AA@				; `string'
PUBLIC	??_C@_05MFLOHCHP@World?$AA@			; `string'
_BSS	SEGMENT
?CamVisiMask@@3_KA DQ 01H DUP (?)			; CamVisiMask
?CubeVisiBoxCount@@3JA DD 01H DUP (?)			; CubeVisiBoxCount
?CubeVisiBox@@3PAUPERM_VISIBOX@@A DB 03e80H DUP (?)	; CubeVisiBox
?CurrentVisiBox@@3PAUVISIBOX@@A DD 01H DUP (?)		; CurrentVisiBox
_LastVisiID DB	01H DUP (?)
	ALIGN	4

_CurrentVisiSide DB 01H DUP (?)
	ALIGN	4

_ForceID DB	01H DUP (?)
	ALIGN	4

_VisiAxis DB	01H DUP (?)
	ALIGN	4

_VisiAxisType DB 01H DUP (?)
_BSS	ENDS
_DATA	SEGMENT
?VisiPerPoly@@3JA DD 01H				; VisiPerPoly
_BigID	DB	01H
	ORG $+3
_VisiboxSemi DD	040000000H
_DATA	ENDS
;	COMDAT ??_C@_06JCBBMBIP@Camera?$AA@
CONST	SEGMENT
??_C@_06JCBBMBIP@Camera?$AA@ DB 'Camera', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05CNOCFFFH@Cubes?$AA@
CONST	SEGMENT
??_C@_05CNOCFFFH@Cubes?$AA@ DB 'Cubes', 00H		; `string'
CONST	ENDS
_DATA	SEGMENT
_VisiBoxNames DD FLAT:??_C@_06JCBBMBIP@Camera?$AA@
	DD	FLAT:??_C@_05CNOCFFFH@Cubes?$AA@
_DATA	ENDS
;	COMDAT ??_C@_03IDDGKHFD@X?5Y?$AA@
CONST	SEGMENT
??_C@_03IDDGKHFD@X?5Y?$AA@ DB 'X Y', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03KIBLPEJA@X?5Z?$AA@
CONST	SEGMENT
??_C@_03KIBLPEJA@X?5Z?$AA@ DB 'X Z', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03CJDPGPNI@Z?5Y?$AA@
CONST	SEGMENT
??_C@_03CJDPGPNI@Z?5Y?$AA@ DB 'Z Y', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01MMEEDKFM@X?$AA@
CONST	SEGMENT
??_C@_01MMEEDKFM@X?$AA@ DB 'X', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01NFFPALBN@Y?$AA@
CONST	SEGMENT
??_C@_01NFFPALBN@Y?$AA@ DB 'Y', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01POHCFINO@Z?$AA@
CONST	SEGMENT
??_C@_01POHCFINO@Z?$AA@ DB 'Z', 00H			; `string'
CONST	ENDS
_DATA	SEGMENT
_VisiAxisNames DD FLAT:??_C@_03IDDGKHFD@X?5Y?$AA@
	DD	FLAT:??_C@_03KIBLPEJA@X?5Z?$AA@
	DD	FLAT:??_C@_03CJDPGPNI@Z?5Y?$AA@
	DD	FLAT:??_C@_01MMEEDKFM@X?$AA@
	DD	FLAT:??_C@_01NFFPALBN@Y?$AA@
	DD	FLAT:??_C@_01POHCFINO@Z?$AA@
_DATA	ENDS
;	COMDAT ??_C@_05MFLOHCHP@World?$AA@
CONST	SEGMENT
??_C@_05MFLOHCHP@World?$AA@ DB 'World', 00H		; `string'
CONST	ENDS
_DATA	SEGMENT
_VisiAxisTypeNames DD FLAT:??_C@_06JCBBMBIP@Camera?$AA@
	DD	FLAT:??_C@_05MFLOHCHP@World?$AA@
_DATA	ENDS
PUBLIC	?InitVisiBoxes@@YAXXZ				; InitVisiBoxes
_BSS	SEGMENT
	ALIGN	4

_VisiBox DB	02bc0H DUP (?)
; Function compile flags: /Odt /ZI
; File c:\documents and settings\jarhead\desktop\shit to display my love for xbox revolt and fuck you borman-ness\revolt source\source\visibox.cpp
_BSS	ENDS
;	COMDAT ?InitVisiBoxes@@YAXXZ
_TEXT	SEGMENT
_i$ = -4						; size = 2
?InitVisiBoxes@@YAXXZ PROC NEAR				; InitVisiBoxes, COMDAT

; 68   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 69   : 	short i;
; 70   : 
; 71   : 	for (i = 0 ; i < VISIBOX_MAX ; i++) VisiBox[i].Flag = 0;

	mov	WORD PTR _i$[ebp], 0
	jmp	SHORT $L81413
$L81414:
	mov	ax, WORD PTR _i$[ebp]
	add	ax, 1
	mov	WORD PTR _i$[ebp], ax
$L81413:
	movsx	eax, WORD PTR _i$[ebp]
	cmp	eax, 400				; 00000190H
	jge	SHORT $L81411
	movsx	eax, WORD PTR _i$[ebp]
	imul	eax, 28					; 0000001cH
	mov	BYTE PTR _VisiBox[eax], 0
	jmp	SHORT $L81414
$L81411:

; 72   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?InitVisiBoxes@@YAXXZ ENDP				; InitVisiBoxes
_TEXT	ENDS
PUBLIC	?AllocVisiBox@@YAPAUVISIBOX@@XZ			; AllocVisiBox
; Function compile flags: /Odt /ZI
;	COMDAT ?AllocVisiBox@@YAPAUVISIBOX@@XZ
_TEXT	SEGMENT
_i$ = -4						; size = 2
?AllocVisiBox@@YAPAUVISIBOX@@XZ PROC NEAR		; AllocVisiBox, COMDAT

; 79   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 80   : 	short i;
; 81   : 
; 82   : // find free slot
; 83   : 
; 84   : 	for (i = 0 ; i < VISIBOX_MAX ; i++) if (!VisiBox[i].Flag)

	mov	WORD PTR _i$[ebp], 0
	jmp	SHORT $L81420
$L81421:
	mov	ax, WORD PTR _i$[ebp]
	add	ax, 1
	mov	WORD PTR _i$[ebp], ax
$L81420:
	movsx	eax, WORD PTR _i$[ebp]
	cmp	eax, 400				; 00000190H
	jge	SHORT $L81422
	movsx	eax, WORD PTR _i$[ebp]
	imul	eax, 28					; 0000001cH
	movsx	ecx, BYTE PTR _VisiBox[eax]
	test	ecx, ecx
	jne	SHORT $L81423

; 85   : 	{
; 86   : 		return &VisiBox[i];

	movsx	eax, WORD PTR _i$[ebp]
	imul	eax, 28					; 0000001cH
	add	eax, OFFSET FLAT:_VisiBox
	jmp	SHORT $L81418
$L81423:

; 87   : 	}
; 88   : 
; 89   : // no slots
; 90   : 
; 91   : 	return NULL;

	jmp	SHORT $L81421
$L81422:
	xor	eax, eax
$L81418:

; 92   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?AllocVisiBox@@YAPAUVISIBOX@@XZ ENDP			; AllocVisiBox
_TEXT	ENDS
PUBLIC	?FreeVisiBox@@YAXPAUVISIBOX@@@Z			; FreeVisiBox
; Function compile flags: /Odt /ZI
;	COMDAT ?FreeVisiBox@@YAXPAUVISIBOX@@@Z
_TEXT	SEGMENT
_visibox$ = 8						; size = 4
?FreeVisiBox@@YAXPAUVISIBOX@@@Z PROC NEAR		; FreeVisiBox, COMDAT

; 99   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 100  : 	visibox->Flag = 0;

	mov	eax, DWORD PTR _visibox$[ebp]
	mov	BYTE PTR [eax], 0

; 101  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?FreeVisiBox@@YAXPAUVISIBOX@@@Z ENDP			; FreeVisiBox
_TEXT	ENDS
PUBLIC	?LoadVisiBoxes@@YAXPAD@Z			; LoadVisiBoxes
PUBLIC	??_C@_02JDPG@rb?$AA@				; `string'
PUBLIC	??_C@_02GMLFBBN@wb?$AA@				; `string'
EXTRN	_fclose:NEAR
EXTRN	_fopen:NEAR
EXTRN	_fread:NEAR
EXTRN	_fwrite:NEAR
EXTRN	?EditMode@@3JA:DWORD				; EditMode
EXTRN	?EditScale@@3MA:DWORD				; EditScale
EXTRN	__fltused:NEAR
;	COMDAT ??_C@_02JDPG@rb?$AA@
CONST	SEGMENT
??_C@_02JDPG@rb?$AA@ DB 'rb', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02GMLFBBN@wb?$AA@
CONST	SEGMENT
??_C@_02GMLFBBN@wb?$AA@ DB 'wb', 00H			; `string'
; Function compile flags: /Odt /ZI
CONST	ENDS
;	COMDAT ?LoadVisiBoxes@@YAXPAD@Z
_TEXT	SEGMENT
_fvb$ = -40						; size = 28
_vb$ = -12						; size = 4
_fp$ = -8						; size = 4
_i$ = -4						; size = 4
_file$ = 8						; size = 4
?LoadVisiBoxes@@YAXPAD@Z PROC NEAR			; LoadVisiBoxes, COMDAT

; 109  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 104				; 00000068H
	push	ebx
	push	esi
	push	edi

; 110  : 	long i;
; 111  : 	FILE *fp;
; 112  : 	VISIBOX *vb, fvb;
; 113  : 
; 114  : // open visibox file
; 115  : 
; 116  : 	fp = fopen(file, "rb");

	push	OFFSET FLAT:??_C@_02JDPG@rb?$AA@
	mov	eax, DWORD PTR _file$[ebp]
	push	eax
	call	_fopen
	add	esp, 8
	mov	DWORD PTR _fp$[ebp], eax

; 117  : 
; 118  : // if not there create empty one
; 119  : 
; 120  : 	if (!fp)

	cmp	DWORD PTR _fp$[ebp], 0
	jne	SHORT $L81435

; 121  : 	{
; 122  : 		fp = fopen(file, "wb");

	push	OFFSET FLAT:??_C@_02GMLFBBN@wb?$AA@
	mov	eax, DWORD PTR _file$[ebp]
	push	eax
	call	_fopen
	add	esp, 8
	mov	DWORD PTR _fp$[ebp], eax

; 123  : 		if (!fp) return;

	cmp	DWORD PTR _fp$[ebp], 0
	jne	SHORT $L81437
	jmp	$L81429
$L81437:

; 124  : 		i = 0;

	mov	DWORD PTR _i$[ebp], 0

; 125  : 		fwrite(&i, sizeof(i), 1, fp);

	mov	eax, DWORD PTR _fp$[ebp]
	push	eax
	push	1
	push	4
	lea	ecx, DWORD PTR _i$[ebp]
	push	ecx
	call	_fwrite
	add	esp, 16					; 00000010H

; 126  : 		fclose(fp);

	mov	eax, DWORD PTR _fp$[ebp]
	push	eax
	call	_fclose
	add	esp, 4

; 127  : 		fp = fopen(file, "rb");

	push	OFFSET FLAT:??_C@_02JDPG@rb?$AA@
	mov	eax, DWORD PTR _file$[ebp]
	push	eax
	call	_fopen
	add	esp, 8
	mov	DWORD PTR _fp$[ebp], eax

; 128  : 		if (!fp) return;

	cmp	DWORD PTR _fp$[ebp], 0
	jne	SHORT $L81435
	jmp	$L81429
$L81435:

; 129  : 	}
; 130  : 
; 131  : // loop thru all visiboxes
; 132  : 
; 133  : 	fread(&i, sizeof(i), 1, fp);

	mov	eax, DWORD PTR _fp$[ebp]
	push	eax
	push	1
	push	4
	lea	ecx, DWORD PTR _i$[ebp]
	push	ecx
	call	_fread
	add	esp, 16					; 00000010H

; 134  : 
; 135  : 	for ( ; i ; i--)

	jmp	SHORT $L81439
$L81440:
	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$L81439:
	cmp	DWORD PTR _i$[ebp], 0
	je	$L81441

; 136  : 	{
; 137  : 
; 138  : // alloc visibox
; 139  : 
; 140  : 		vb = AllocVisiBox();

	call	?AllocVisiBox@@YAPAUVISIBOX@@XZ		; AllocVisiBox
	mov	DWORD PTR _vb$[ebp], eax

; 141  : 		if (!vb) break;

	cmp	DWORD PTR _vb$[ebp], 0
	jne	SHORT $L81442
	jmp	$L81441
$L81442:

; 142  : 
; 143  : // setup from file
; 144  : 
; 145  : 		fread(&fvb, sizeof(fvb), 1, fp);

	mov	eax, DWORD PTR _fp$[ebp]
	push	eax
	push	1
	push	28					; 0000001cH
	lea	ecx, DWORD PTR _fvb$[ebp]
	push	ecx
	call	_fread
	add	esp, 16					; 00000010H

; 146  : 
; 147  : 		if (EditMode == EDIT_VISIBOXES)

	cmp	DWORD PTR ?EditMode@@3JA, 2		; EditMode
	jne	SHORT $L81443

; 148  : 		{
; 149  : 			fvb.xmin *= EditScale;

	fld	DWORD PTR _fvb$[ebp+4]
	fmul	DWORD PTR ?EditScale@@3MA		; EditScale
	fstp	DWORD PTR _fvb$[ebp+4]

; 150  : 			fvb.xmax *= EditScale;

	fld	DWORD PTR _fvb$[ebp+8]
	fmul	DWORD PTR ?EditScale@@3MA		; EditScale
	fstp	DWORD PTR _fvb$[ebp+8]

; 151  : 			fvb.ymin *= EditScale;

	fld	DWORD PTR _fvb$[ebp+12]
	fmul	DWORD PTR ?EditScale@@3MA		; EditScale
	fstp	DWORD PTR _fvb$[ebp+12]

; 152  : 			fvb.ymax *= EditScale;

	fld	DWORD PTR _fvb$[ebp+16]
	fmul	DWORD PTR ?EditScale@@3MA		; EditScale
	fstp	DWORD PTR _fvb$[ebp+16]

; 153  : 			fvb.zmin *= EditScale;

	fld	DWORD PTR _fvb$[ebp+20]
	fmul	DWORD PTR ?EditScale@@3MA		; EditScale
	fstp	DWORD PTR _fvb$[ebp+20]

; 154  : 			fvb.zmax *= EditScale;

	fld	DWORD PTR _fvb$[ebp+24]
	fmul	DWORD PTR ?EditScale@@3MA		; EditScale
	fstp	DWORD PTR _fvb$[ebp+24]
$L81443:

; 155  : 		}
; 156  : 
; 157  : 		vb->Flag = fvb.Flag;

	mov	eax, DWORD PTR _vb$[ebp]
	mov	cl, BYTE PTR _fvb$[ebp]
	mov	BYTE PTR [eax], cl

; 158  : 		vb->ID = fvb.ID;

	mov	eax, DWORD PTR _vb$[ebp]
	mov	cl, BYTE PTR _fvb$[ebp+1]
	mov	BYTE PTR [eax+1], cl

; 159  : 
; 160  : 		vb->xmin = fvb.xmin;

	mov	eax, DWORD PTR _vb$[ebp]
	mov	ecx, DWORD PTR _fvb$[ebp+4]
	mov	DWORD PTR [eax+4], ecx

; 161  : 		vb->xmax = fvb.xmax;

	mov	eax, DWORD PTR _vb$[ebp]
	mov	ecx, DWORD PTR _fvb$[ebp+8]
	mov	DWORD PTR [eax+8], ecx

; 162  : 		vb->ymin = fvb.ymin;

	mov	eax, DWORD PTR _vb$[ebp]
	mov	ecx, DWORD PTR _fvb$[ebp+12]
	mov	DWORD PTR [eax+12], ecx

; 163  : 		vb->ymax = fvb.ymax;

	mov	eax, DWORD PTR _vb$[ebp]
	mov	ecx, DWORD PTR _fvb$[ebp+16]
	mov	DWORD PTR [eax+16], ecx

; 164  : 		vb->zmin = fvb.zmin;

	mov	eax, DWORD PTR _vb$[ebp]
	mov	ecx, DWORD PTR _fvb$[ebp+20]
	mov	DWORD PTR [eax+20], ecx

; 165  : 		vb->zmax = fvb.zmax;

	mov	eax, DWORD PTR _vb$[ebp]
	mov	ecx, DWORD PTR _fvb$[ebp+24]
	mov	DWORD PTR [eax+24], ecx

; 166  : 	}

	jmp	$L81440
$L81441:

; 167  : 
; 168  : // close file
; 169  : 
; 170  : 	fclose(fp);

	mov	eax, DWORD PTR _fp$[ebp]
	push	eax
	call	_fclose
	add	esp, 4
$L81429:

; 171  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?LoadVisiBoxes@@YAXPAD@Z ENDP				; LoadVisiBoxes
_TEXT	ENDS
PUBLIC	?SaveVisiBoxes@@YAXPAD@Z			; SaveVisiBoxes
PUBLIC	??_C@_03PHMDHFOD@vi?9?$AA@			; `string'
PUBLIC	??_C@_0BE@IMHNLFNP@Saved?5Visibox?5File?3?$AA@	; `string'
EXTRN	_remove:NEAR
EXTRN	_rename:NEAR
EXTRN	?Box@@YAJPAD0J@Z:NEAR				; Box
EXTRN	_memcpy:NEAR
EXTRN	_strlen:NEAR
EXTRN	__imp__wsprintfA:NEAR
;	COMDAT ??_C@_03PHMDHFOD@vi?9?$AA@
CONST	SEGMENT
??_C@_03PHMDHFOD@vi?9?$AA@ DB 'vi-', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@IMHNLFNP@Saved?5Visibox?5File?3?$AA@
CONST	SEGMENT
??_C@_0BE@IMHNLFNP@Saved?5Visibox?5File?3?$AA@ DB 'Saved Visibox File:', 00H ; `string'
; Function compile flags: /Odt /ZI
CONST	ENDS
;	COMDAT ?SaveVisiBoxes@@YAXPAD@Z
_TEXT	SEGMENT
_bak$ = -300						; size = 256
_fvb$ = -44						; size = 28
_vb$ = -16						; size = 4
_fp$ = -12						; size = 4
_i$ = -8						; size = 4
_num$ = -4						; size = 4
_file$ = 8						; size = 4
?SaveVisiBoxes@@YAXPAD@Z PROC NEAR			; SaveVisiBoxes, COMDAT

; 231  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 364				; 0000016cH
	push	ebx
	push	esi
	push	edi

; 232  : 	long num, i;
; 233  : 	FILE *fp;
; 234  : 	VISIBOX *vb, fvb;
; 235  : 	char bak[256];
; 236  : 
; 237  : // backup old file
; 238  : 
; 239  : 	memcpy(bak, file, strlen(file) - 3);

	mov	eax, DWORD PTR _file$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	sub	eax, 3
	push	eax
	mov	ecx, DWORD PTR _file$[ebp]
	push	ecx
	lea	edx, DWORD PTR _bak$[ebp]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 240  : 	wsprintf(bak + strlen(file) - 3, "vi-");

	push	OFFSET FLAT:??_C@_03PHMDHFOD@vi?9?$AA@
	mov	eax, DWORD PTR _file$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	lea	ecx, DWORD PTR _bak$[ebp+eax-3]
	push	ecx
	call	DWORD PTR __imp__wsprintfA
	add	esp, 8

; 241  : 	remove(bak);

	lea	eax, DWORD PTR _bak$[ebp]
	push	eax
	call	_remove
	add	esp, 4

; 242  : 	rename(file, bak);

	lea	eax, DWORD PTR _bak$[ebp]
	push	eax
	mov	ecx, DWORD PTR _file$[ebp]
	push	ecx
	call	_rename
	add	esp, 8

; 243  : 
; 244  : // open visibox file
; 245  : 
; 246  : 	fp = fopen(file, "wb");

	push	OFFSET FLAT:??_C@_02GMLFBBN@wb?$AA@
	mov	eax, DWORD PTR _file$[ebp]
	push	eax
	call	_fopen
	add	esp, 8
	mov	DWORD PTR _fp$[ebp], eax

; 247  : 	if (!fp) return;

	cmp	DWORD PTR _fp$[ebp], 0
	jne	SHORT $L81454
	jmp	$L81446
$L81454:

; 248  : 
; 249  : // count num
; 250  : 
; 251  : 	for (i = num = 0 ; i < VISIBOX_MAX ; i++) if (VisiBox[i].Flag) num++;

	mov	DWORD PTR _num$[ebp], 0
	mov	eax, DWORD PTR _num$[ebp]
	mov	DWORD PTR _i$[ebp], eax
	jmp	SHORT $L81455
$L81456:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$L81455:
	cmp	DWORD PTR _i$[ebp], 400			; 00000190H
	jge	SHORT $L81457
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 28					; 0000001cH
	movsx	ecx, BYTE PTR _VisiBox[eax]
	test	ecx, ecx
	je	SHORT $L81458
	mov	eax, DWORD PTR _num$[ebp]
	add	eax, 1
	mov	DWORD PTR _num$[ebp], eax
$L81458:

; 252  : 
; 253  : // write num
; 254  : 
; 255  : 	fwrite(&num, sizeof(num), 1, fp);

	jmp	SHORT $L81456
$L81457:
	mov	eax, DWORD PTR _fp$[ebp]
	push	eax
	push	1
	push	4
	lea	ecx, DWORD PTR _num$[ebp]
	push	ecx
	call	_fwrite
	add	esp, 16					; 00000010H

; 256  : 
; 257  : // write out each file light
; 258  : 
; 259  : 	vb = VisiBox;

	mov	DWORD PTR _vb$[ebp], OFFSET FLAT:_VisiBox

; 260  : 	for (i = 0 ; i < VISIBOX_MAX ; i++, vb++) if (vb->Flag)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $L81459
$L81460:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	mov	ecx, DWORD PTR _vb$[ebp]
	add	ecx, 28					; 0000001cH
	mov	DWORD PTR _vb$[ebp], ecx
$L81459:
	cmp	DWORD PTR _i$[ebp], 400			; 00000190H
	jge	SHORT $L81461
	mov	eax, DWORD PTR _vb$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $L81462

; 261  : 	{
; 262  : 		fvb.Flag = vb->Flag;

	mov	eax, DWORD PTR _vb$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _fvb$[ebp], cl

; 263  : 		fvb.ID = vb->ID;

	mov	eax, DWORD PTR _vb$[ebp]
	mov	cl, BYTE PTR [eax+1]
	mov	BYTE PTR _fvb$[ebp+1], cl

; 264  : 
; 265  : 		fvb.xmin = vb->xmin;

	mov	eax, DWORD PTR _vb$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _fvb$[ebp+4], ecx

; 266  : 		fvb.xmax = vb->xmax;

	mov	eax, DWORD PTR _vb$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _fvb$[ebp+8], ecx

; 267  : 		fvb.ymin = vb->ymin;

	mov	eax, DWORD PTR _vb$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _fvb$[ebp+12], ecx

; 268  : 		fvb.ymax = vb->ymax;

	mov	eax, DWORD PTR _vb$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _fvb$[ebp+16], ecx

; 269  : 		fvb.zmin = vb->zmin;

	mov	eax, DWORD PTR _vb$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR _fvb$[ebp+20], ecx

; 270  : 		fvb.zmax = vb->zmax;

	mov	eax, DWORD PTR _vb$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR _fvb$[ebp+24], ecx

; 271  : 
; 272  : 		fwrite(&fvb, sizeof(fvb), 1, fp);

	mov	eax, DWORD PTR _fp$[ebp]
	push	eax
	push	1
	push	28					; 0000001cH
	lea	ecx, DWORD PTR _fvb$[ebp]
	push	ecx
	call	_fwrite
	add	esp, 16					; 00000010H
$L81462:

; 273  : 	}
; 274  : 
; 275  : // close file
; 276  : 
; 277  : 	Box("Saved Visibox File:", file, MB_OK);

	jmp	$L81460
$L81461:
	push	0
	mov	eax, DWORD PTR _file$[ebp]
	push	eax
	push	OFFSET FLAT:??_C@_0BE@IMHNLFNP@Saved?5Visibox?5File?3?$AA@
	call	?Box@@YAJPAD0J@Z			; Box
	add	esp, 12					; 0000000cH

; 278  : 	fclose(fp);

	mov	eax, DWORD PTR _fp$[ebp]
	push	eax
	call	_fclose
	add	esp, 4
$L81446:

; 279  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?SaveVisiBoxes@@YAXPAD@Z ENDP				; SaveVisiBoxes
_TEXT	ENDS
PUBLIC	?sqrt@@YAMM@Z					; sqrt
PUBLIC	?EditVisiBoxes@@YAXXZ				; EditVisiBoxes
PUBLIC	?SetPermVisiBoxes@@YAXXZ			; SetPermVisiBoxes
PUBLIC	?SetObjectVisiMask@@YA_KPAUBoundingBoxStruct@@@Z ; SetObjectVisiMask
PUBLIC	??_C@_03NDPLAFDJ@vis?$AA@			; `string'
PUBLIC	??_C@_03GOGOMMPD@cam?$AA@			; `string'
PUBLIC	__real@45400000
PUBLIC	__real@3f800000
PUBLIC	__real@40000000
PUBLIC	__real@43a00000
PUBLIC	__real@43700000
PUBLIC	__real@42000000
PUBLIC	__real@42800000
PUBLIC	__real@41000000
PUBLIC	__real@c1000000
PUBLIC	__real@40800000
PUBLIC	__real@00000000
EXTRN	?InstanceNum@@3JA:DWORD				; InstanceNum
EXTRN	?Instances@@3PAUINSTANCE@@A:BYTE		; Instances
EXTRN	?GetLevelFilename@@YAPADPADJ@Z:NEAR		; GetLevelFilename
EXTRN	?FrameCount@@3KA:DWORD				; FrameCount
EXTRN	?TimeFactor@@3MA:DWORD				; TimeFactor
EXTRN	?RenderSettings@@3URENDER_SETTINGS@@A:BYTE	; RenderSettings
EXTRN	?LoadCameraNodes@@YAJPAU_iobuf@@@Z:NEAR		; LoadCameraNodes
EXTRN	?ViewMatrix@@3TMatrixUnion@@A:BYTE		; ViewMatrix
EXTRN	?ViewTrans@@3UVectorStruct@@A:BYTE		; ViewTrans
EXTRN	?MouseXpos@@3MA:DWORD				; MouseXpos
EXTRN	?MouseYpos@@3MA:DWORD				; MouseYpos
EXTRN	?MouseXrel@@3MA:DWORD				; MouseXrel
EXTRN	?MouseYrel@@3MA:DWORD				; MouseYrel
EXTRN	?CameraEditXrel@@3MA:DWORD			; CameraEditXrel
EXTRN	?CameraEditYrel@@3MA:DWORD			; CameraEditYrel
EXTRN	?CameraEditZrel@@3MA:DWORD			; CameraEditZrel
EXTRN	?MouseLeft@@3DA:BYTE				; MouseLeft
EXTRN	?MouseRight@@3DA:BYTE				; MouseRight
EXTRN	?CAM_MainCamera@@3PAUCameraStruct@@A:DWORD	; CAM_MainCamera
EXTRN	?CAM_NCameraNodes@@3JA:DWORD			; CAM_NCameraNodes
EXTRN	?Keys@@3PADA:BYTE				; Keys
EXTRN	?LastKeys@@3PADA:BYTE				; LastKeys
EXTRN	?Mouse@@3U_DIMOUSESTATE@@A:BYTE			; Mouse
EXTRN	?RotMatrixZYX@@YAXPATMatrixUnion@@MMM@Z:NEAR	; RotMatrixZYX
EXTRN	?RotVector@@YAXPATMatrixUnion@@PAUVectorStruct@@1@Z:NEAR ; RotVector
EXTRN	?RotTransVector@@YAXPATMatrixUnion@@PAUVectorStruct@@11@Z:NEAR ; RotTransVector
EXTRN	?MulMatrix@@YAXPATMatrixUnion@@00@Z:NEAR	; MulMatrix
EXTRN	?CopyMatrix@@YAXPATMatrixUnion@@0@Z:NEAR	; CopyMatrix
;	COMDAT __real@45400000
CONST	SEGMENT
__real@45400000 DD 045400000r			; 3072
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT ??_C@_03NDPLAFDJ@vis?$AA@
CONST	SEGMENT
??_C@_03NDPLAFDJ@vis?$AA@ DB 'vis', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03GOGOMMPD@cam?$AA@
CONST	SEGMENT
??_C@_03GOGOMMPD@cam?$AA@ DB 'cam', 00H			; `string'
CONST	ENDS
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
CONST	ENDS
;	COMDAT __real@43a00000
CONST	SEGMENT
__real@43a00000 DD 043a00000r			; 320
CONST	ENDS
;	COMDAT __real@43700000
CONST	SEGMENT
__real@43700000 DD 043700000r			; 240
CONST	ENDS
;	COMDAT __real@42000000
CONST	SEGMENT
__real@42000000 DD 042000000r			; 32
CONST	ENDS
;	COMDAT __real@42800000
CONST	SEGMENT
__real@42800000 DD 042800000r			; 64
CONST	ENDS
;	COMDAT __real@41000000
CONST	SEGMENT
__real@41000000 DD 041000000r			; 8
CONST	ENDS
;	COMDAT __real@c1000000
CONST	SEGMENT
__real@c1000000 DD 0c1000000r			; -8
CONST	ENDS
;	COMDAT __real@40800000
CONST	SEGMENT
__real@40800000 DD 040800000r			; 4
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
; Function compile flags: /Odt /ZI
CONST	ENDS
;	COMDAT ?EditVisiBoxes@@YAXXZ
_TEXT	SEGMENT
tv974 = -212						; size = 4
tv911 = -212						; size = 4
tv748 = -212						; size = 4
__mul$81489 = -144					; size = 4
__mul$81487 = -140					; size = 4
_fp$ = -136						; size = 4
_mat2$ = -132						; size = 36
_mat$ = -96						; size = 36
_vb$ = -60						; size = 4
_add$ = -56						; size = 4
_yrad$ = -52						; size = 4
_xrad$ = -48						; size = 4
_sy$ = -44						; size = 4
_sx$ = -40						; size = 4
_z$ = -36						; size = 4
_vec2$ = -32						; size = 12
_vec$ = -20						; size = 12
_n$ = -8						; size = 2
_i$ = -4						; size = 2
?EditVisiBoxes@@YAXXZ PROC NEAR				; EditVisiBoxes, COMDAT

; 286  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 212				; 000000d4H
	push	ebx
	push	esi
	push	edi

; 287  : 	short i, n;
; 288  : 	VEC vec, vec2;
; 289  : 	float z, sx, sy, xrad, yrad, add;
; 290  : 	VISIBOX *vb;
; 291  : 	MAT mat, mat2;
; 292  : 	FILE *fp;
; 293  : 
; 294  : // toggle show big ID's
; 295  : 
; 296  : 	if (Keys[DIK_1] && !LastKeys[DIK_1]) BigID = !BigID;

	movsx	eax, BYTE PTR ?Keys@@3PADA+2
	test	eax, eax
	je	SHORT $L81481
	movsx	eax, BYTE PTR ?LastKeys@@3PADA+2
	test	eax, eax
	jne	SHORT $L81481
	movsx	eax, BYTE PTR _BigID
	neg	eax
	sbb	al, al
	inc	al
	mov	BYTE PTR _BigID, al
$L81481:

; 297  : 	
; 298  : // toggle allow force ID
; 299  : 
; 300  : 	if (Keys[DIK_2] && !LastKeys[DIK_2]) ForceID = !ForceID;

	movsx	eax, BYTE PTR ?Keys@@3PADA+3
	test	eax, eax
	je	SHORT $L81482
	movsx	eax, BYTE PTR ?LastKeys@@3PADA+3
	test	eax, eax
	jne	SHORT $L81482
	movsx	eax, BYTE PTR _ForceID
	neg	eax
	sbb	al, al
	inc	al
	mov	BYTE PTR _ForceID, al
$L81482:

; 301  : 
; 302  : // quit if not in edit mode
; 303  : 
; 304  : 	if (CAM_MainCamera->Type != CAM_EDIT)

	mov	eax, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	cmp	DWORD PTR [eax], 5
	je	SHORT $L81483

; 305  : 	{
; 306  : 		CurrentVisiBox = NULL;

	mov	DWORD PTR ?CurrentVisiBox@@3PAUVISIBOX@@A, 0 ; CurrentVisiBox

; 307  : 		return;

	jmp	$L81466
$L81483:

; 308  : 	}
; 309  : 
; 310  : // rotate camera?
; 311  : 
; 312  : 	if (MouseRight)

	movsx	eax, BYTE PTR ?MouseRight@@3DA		; MouseRight
	test	eax, eax
	je	$L81484

; 313  : 	{
; 314  : 		RotMatrixZYX(&mat, (float)-Mouse.lY / 3072, -(float)Mouse.lX / 3072, 0);

	push	0
	fild	DWORD PTR ?Mouse@@3U_DIMOUSESTATE@@A
	fchs
	fdiv	DWORD PTR __real@45400000
	push	ecx
	fstp	DWORD PTR [esp]
	mov	eax, DWORD PTR ?Mouse@@3U_DIMOUSESTATE@@A+4
	neg	eax
	mov	DWORD PTR tv974[ebp], eax
	fild	DWORD PTR tv974[ebp]
	fdiv	DWORD PTR __real@45400000
	push	ecx
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR _mat$[ebp]
	push	ecx
	call	?RotMatrixZYX@@YAXPATMatrixUnion@@MMM@Z	; RotMatrixZYX
	add	esp, 16					; 00000010H

; 315  : 		MulMatrix(&CAM_MainCamera->WMatrix, &mat, &mat2);

	lea	eax, DWORD PTR _mat2$[ebp]
	push	eax
	lea	ecx, DWORD PTR _mat$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	add	edx, 16					; 00000010H
	push	edx
	call	?MulMatrix@@YAXPATMatrixUnion@@00@Z	; MulMatrix
	add	esp, 12					; 0000000cH

; 316  : 		CopyMatrix(&mat2, &CAM_MainCamera->WMatrix);

	mov	eax, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	add	eax, 16					; 00000010H
	push	eax
	lea	ecx, DWORD PTR _mat2$[ebp]
	push	ecx
	call	?CopyMatrix@@YAXPATMatrixUnion@@0@Z	; CopyMatrix
	add	esp, 8

; 317  : 
; 318  : 		CAM_MainCamera->WMatrix.m[RY] = 0;

	mov	eax, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	mov	DWORD PTR [eax+20], 0

; 319  : 		NormalizeVector(&CAM_MainCamera->WMatrix.mv[X]);

	mov	eax, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	mov	ecx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fld	DWORD PTR [eax+16]
	fmul	DWORD PTR [ecx+16]
	mov	edx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	mov	eax, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fld	DWORD PTR [edx+20]
	fmul	DWORD PTR [eax+20]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	mov	edx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fld	DWORD PTR [ecx+24]
	fmul	DWORD PTR [edx+24]
	faddp	ST(1), ST(0)
	push	ecx
	fstp	DWORD PTR [esp]
	call	?sqrt@@YAMM@Z				; sqrt
	add	esp, 4
	fdivr	DWORD PTR __real@3f800000
	fstp	DWORD PTR __mul$81487[ebp]
	mov	eax, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fld	DWORD PTR __mul$81487[ebp]
	fmul	DWORD PTR [eax+16]
	mov	ecx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fstp	DWORD PTR [ecx+16]
	mov	eax, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fld	DWORD PTR __mul$81487[ebp]
	fmul	DWORD PTR [eax+20]
	mov	ecx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fstp	DWORD PTR [ecx+20]
	mov	eax, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fld	DWORD PTR __mul$81487[ebp]
	fmul	DWORD PTR [eax+24]
	mov	ecx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fstp	DWORD PTR [ecx+24]

; 320  : 		CrossProduct(&CAM_MainCamera->WMatrix.mv[Z], &CAM_MainCamera->WMatrix.mv[X], &CAM_MainCamera->WMatrix.mv[Y]);

	mov	eax, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	mov	ecx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fld	DWORD PTR [eax+44]
	fmul	DWORD PTR [ecx+24]
	mov	edx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	mov	eax, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fld	DWORD PTR [edx+48]
	fmul	DWORD PTR [eax+20]
	fsubp	ST(1), ST(0)
	mov	ecx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fstp	DWORD PTR [ecx+28]
	mov	eax, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	mov	ecx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fld	DWORD PTR [eax+48]
	fmul	DWORD PTR [ecx+16]
	mov	edx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	mov	eax, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fld	DWORD PTR [edx+40]
	fmul	DWORD PTR [eax+24]
	fsubp	ST(1), ST(0)
	mov	ecx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fstp	DWORD PTR [ecx+32]
	mov	eax, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	mov	ecx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fld	DWORD PTR [eax+40]
	fmul	DWORD PTR [ecx+20]
	mov	edx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	mov	eax, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fld	DWORD PTR [edx+44]
	fmul	DWORD PTR [eax+16]
	fsubp	ST(1), ST(0)
	mov	ecx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fstp	DWORD PTR [ecx+36]

; 321  : 		NormalizeVector(&CAM_MainCamera->WMatrix.mv[Y]);

	mov	eax, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	mov	ecx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fld	DWORD PTR [eax+28]
	fmul	DWORD PTR [ecx+28]
	mov	edx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	mov	eax, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fld	DWORD PTR [edx+32]
	fmul	DWORD PTR [eax+32]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	mov	edx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fld	DWORD PTR [ecx+36]
	fmul	DWORD PTR [edx+36]
	faddp	ST(1), ST(0)
	push	ecx
	fstp	DWORD PTR [esp]
	call	?sqrt@@YAMM@Z				; sqrt
	add	esp, 4
	fdivr	DWORD PTR __real@3f800000
	fstp	DWORD PTR __mul$81489[ebp]
	mov	eax, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fld	DWORD PTR __mul$81489[ebp]
	fmul	DWORD PTR [eax+28]
	mov	ecx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fstp	DWORD PTR [ecx+28]
	mov	eax, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fld	DWORD PTR __mul$81489[ebp]
	fmul	DWORD PTR [eax+32]
	mov	ecx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fstp	DWORD PTR [ecx+32]
	mov	eax, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fld	DWORD PTR __mul$81489[ebp]
	fmul	DWORD PTR [eax+36]
	mov	ecx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fstp	DWORD PTR [ecx+36]

; 322  : 		CrossProduct(&CAM_MainCamera->WMatrix.mv[X], &CAM_MainCamera->WMatrix.mv[Y], &CAM_MainCamera->WMatrix.mv[Z]);

	mov	eax, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	mov	ecx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fld	DWORD PTR [eax+20]
	fmul	DWORD PTR [ecx+36]
	mov	edx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	mov	eax, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fld	DWORD PTR [edx+24]
	fmul	DWORD PTR [eax+32]
	fsubp	ST(1), ST(0)
	mov	ecx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fstp	DWORD PTR [ecx+40]
	mov	eax, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	mov	ecx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fld	DWORD PTR [eax+24]
	fmul	DWORD PTR [ecx+28]
	mov	edx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	mov	eax, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fld	DWORD PTR [edx+16]
	fmul	DWORD PTR [eax+36]
	fsubp	ST(1), ST(0)
	mov	ecx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fstp	DWORD PTR [ecx+44]
	mov	eax, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	mov	ecx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fld	DWORD PTR [eax+16]
	fmul	DWORD PTR [ecx+32]
	mov	edx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	mov	eax, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fld	DWORD PTR [edx+20]
	fmul	DWORD PTR [eax+28]
	fsubp	ST(1), ST(0)
	mov	ecx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fstp	DWORD PTR [ecx+48]
$L81484:

; 323  : 	}
; 324  : 
; 325  : // save visiboxes?
; 326  : 
; 327  : 	if (Keys[DIK_LCONTROL] && Keys[DIK_F4] && !LastKeys[DIK_F4])

	movsx	eax, BYTE PTR ?Keys@@3PADA+29
	test	eax, eax
	je	SHORT $L81491
	movsx	eax, BYTE PTR ?Keys@@3PADA+62
	test	eax, eax
	je	SHORT $L81491
	movsx	eax, BYTE PTR ?LastKeys@@3PADA+62
	test	eax, eax
	jne	SHORT $L81491

; 328  : 	{
; 329  : 		SaveVisiBoxes(GetLevelFilename("vis", FILENAME_MAKE_BODY | FILENAME_GAME_SETTINGS));

	push	3
	push	OFFSET FLAT:??_C@_03NDPLAFDJ@vis?$AA@
	call	?GetLevelFilename@@YAPADPADJ@Z		; GetLevelFilename
	add	esp, 8
	push	eax
	call	?SaveVisiBoxes@@YAXPAD@Z		; SaveVisiBoxes
	add	esp, 4

; 330  : 		if ((fp = fopen(GetLevelFilename("cam", FILENAME_MAKE_BODY), "rb")) != NULL)

	push	OFFSET FLAT:??_C@_02JDPG@rb?$AA@
	push	1
	push	OFFSET FLAT:??_C@_03GOGOMMPD@cam?$AA@
	call	?GetLevelFilename@@YAPADPADJ@Z		; GetLevelFilename
	add	esp, 8
	push	eax
	call	_fopen
	add	esp, 8
	mov	DWORD PTR _fp$[ebp], eax
	cmp	DWORD PTR _fp$[ebp], 0
	je	SHORT $L81491

; 331  : 		{
; 332  : 			CAM_NCameraNodes = LoadCameraNodes(fp);

	mov	eax, DWORD PTR _fp$[ebp]
	push	eax
	call	?LoadCameraNodes@@YAJPAU_iobuf@@@Z	; LoadCameraNodes
	add	esp, 4
	mov	DWORD PTR ?CAM_NCameraNodes@@3JA, eax	; CAM_NCameraNodes

; 333  : 			fclose(fp);

	mov	eax, DWORD PTR _fp$[ebp]
	push	eax
	call	_fclose
	add	esp, 4
$L81491:

; 334  : 		}
; 335  : 	}
; 336  : 
; 337  : // get a current visibox?
; 338  : 
; 339  : 	if (!CurrentVisiBox && Keys[DIK_RETURN] && !LastKeys[DIK_RETURN])

	cmp	DWORD PTR ?CurrentVisiBox@@3PAUVISIBOX@@A, 0 ; CurrentVisiBox
	jne	$L81495
	movsx	eax, BYTE PTR ?Keys@@3PADA+28
	test	eax, eax
	je	$L81495
	movsx	eax, BYTE PTR ?LastKeys@@3PADA+28
	test	eax, eax
	jne	$L81495

; 340  : 	{
; 341  : 		n = -1;

	mov	WORD PTR _n$[ebp], -1

; 342  : 		z = RenderSettings.FarClip;

	mov	eax, DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+32
	mov	DWORD PTR _z$[ebp], eax

; 343  : 
; 344  : 		for (i = 0 ; i < VISIBOX_MAX ; i++) if (VisiBox[i].Flag)

	mov	WORD PTR _i$[ebp], 0
	jmp	SHORT $L81496
$L81497:
	mov	ax, WORD PTR _i$[ebp]
	add	ax, 1
	mov	WORD PTR _i$[ebp], ax
$L81496:
	movsx	eax, WORD PTR _i$[ebp]
	cmp	eax, 400				; 00000190H
	jge	$L81498
	movsx	eax, WORD PTR _i$[ebp]
	imul	eax, 28					; 0000001cH
	movsx	ecx, BYTE PTR _VisiBox[eax]
	test	ecx, ecx
	je	$L81499

; 345  : 		{
; 346  : 			vec2.v[X] = (VisiBox[i].xmin + VisiBox[i].xmax) / 2;

	movsx	eax, WORD PTR _i$[ebp]
	imul	eax, 28					; 0000001cH
	movsx	ecx, WORD PTR _i$[ebp]
	imul	ecx, 28					; 0000001cH
	fld	DWORD PTR _VisiBox[eax+4]
	fadd	DWORD PTR _VisiBox[ecx+8]
	fdiv	DWORD PTR __real@40000000
	fstp	DWORD PTR _vec2$[ebp]

; 347  : 			vec2.v[Y] = (VisiBox[i].ymin + VisiBox[i].ymax) / 2;

	movsx	eax, WORD PTR _i$[ebp]
	imul	eax, 28					; 0000001cH
	movsx	ecx, WORD PTR _i$[ebp]
	imul	ecx, 28					; 0000001cH
	fld	DWORD PTR _VisiBox[eax+12]
	fadd	DWORD PTR _VisiBox[ecx+16]
	fdiv	DWORD PTR __real@40000000
	fstp	DWORD PTR _vec2$[ebp+4]

; 348  : 			vec2.v[Z] = (VisiBox[i].zmin + VisiBox[i].zmax) / 2;

	movsx	eax, WORD PTR _i$[ebp]
	imul	eax, 28					; 0000001cH
	movsx	ecx, WORD PTR _i$[ebp]
	imul	ecx, 28					; 0000001cH
	fld	DWORD PTR _VisiBox[eax+20]
	fadd	DWORD PTR _VisiBox[ecx+24]
	fdiv	DWORD PTR __real@40000000
	fstp	DWORD PTR _vec2$[ebp+8]

; 349  : 
; 350  : 			RotTransVector(&ViewMatrix, &ViewTrans, &vec2, &vec);

	lea	eax, DWORD PTR _vec$[ebp]
	push	eax
	lea	ecx, DWORD PTR _vec2$[ebp]
	push	ecx
	push	OFFSET FLAT:?ViewTrans@@3UVectorStruct@@A ; ViewTrans
	push	OFFSET FLAT:?ViewMatrix@@3TMatrixUnion@@A ; ViewMatrix
	call	?RotTransVector@@YAXPATMatrixUnion@@PAUVectorStruct@@11@Z ; RotTransVector
	add	esp, 16					; 00000010H

; 351  : 
; 352  : 			if (vec.v[Z] < RenderSettings.NearClip || vec.v[Z] >= RenderSettings.FarClip) continue;

	fld	DWORD PTR _vec$[ebp+8]
	fcomp	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+28
	fnstsw	ax
	test	ah, 5
	jnp	SHORT $L81501
	fld	DWORD PTR _vec$[ebp+8]
	fcomp	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+32
	fnstsw	ax
	test	ah, 1
	jne	SHORT $L81500
$L81501:
	jmp	$L81497
$L81500:

; 353  : 
; 354  : 			sx = vec.v[X] * RenderSettings.GeomPers / vec.v[Z] + REAL_SCREEN_XHALF;

	fld	DWORD PTR _vec$[ebp]
	fmul	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A
	fdiv	DWORD PTR _vec$[ebp+8]
	fadd	DWORD PTR __real@43a00000
	fstp	DWORD PTR _sx$[ebp]

; 355  : 			sy = vec.v[Y] * RenderSettings.GeomPers / vec.v[Z] + REAL_SCREEN_YHALF;

	fld	DWORD PTR _vec$[ebp+4]
	fmul	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A
	fdiv	DWORD PTR _vec$[ebp+8]
	fadd	DWORD PTR __real@43700000
	fstp	DWORD PTR _sy$[ebp]

; 356  : 
; 357  : 			xrad = (32 * RenderSettings.GeomPers) / vec.v[Z];

	fld	DWORD PTR __real@42000000
	fmul	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A
	fdiv	DWORD PTR _vec$[ebp+8]
	fstp	DWORD PTR _xrad$[ebp]

; 358  : 			yrad = (32 * RenderSettings.GeomPers) / vec.v[Z];

	fld	DWORD PTR __real@42000000
	fmul	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A
	fdiv	DWORD PTR _vec$[ebp+8]
	fstp	DWORD PTR _yrad$[ebp]

; 359  : 
; 360  : 			if (MouseXpos > sx - xrad && MouseXpos < sx + xrad && MouseYpos > sy - yrad && MouseYpos < sy + yrad)

	fld	DWORD PTR _sx$[ebp]
	fsub	DWORD PTR _xrad$[ebp]
	fcomp	DWORD PTR ?MouseXpos@@3MA		; MouseXpos
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L81499
	fld	DWORD PTR _sx$[ebp]
	fadd	DWORD PTR _xrad$[ebp]
	fcomp	DWORD PTR ?MouseXpos@@3MA		; MouseXpos
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $L81499
	fld	DWORD PTR _sy$[ebp]
	fsub	DWORD PTR _yrad$[ebp]
	fcomp	DWORD PTR ?MouseYpos@@3MA		; MouseYpos
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L81499
	fld	DWORD PTR _sy$[ebp]
	fadd	DWORD PTR _yrad$[ebp]
	fcomp	DWORD PTR ?MouseYpos@@3MA		; MouseYpos
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $L81499

; 361  : 			{
; 362  : 				if (vec.v[Z] < z)

	fld	DWORD PTR _vec$[ebp+8]
	fcomp	DWORD PTR _z$[ebp]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L81499

; 363  : 				{
; 364  : 					n = i;

	mov	ax, WORD PTR _i$[ebp]
	mov	WORD PTR _n$[ebp], ax

; 365  : 					z = vec.v[Z];

	mov	eax, DWORD PTR _vec$[ebp+8]
	mov	DWORD PTR _z$[ebp], eax
$L81499:

; 366  : 				}
; 367  : 			}
; 368  : 		}
; 369  : 		if (n != -1)

	jmp	$L81497
$L81498:
	movsx	eax, WORD PTR _n$[ebp]
	cmp	eax, -1
	je	SHORT $L81495

; 370  : 		{
; 371  : 			CurrentVisiBox = &VisiBox[n];

	movsx	eax, WORD PTR _n$[ebp]
	imul	eax, 28					; 0000001cH
	add	eax, OFFSET FLAT:_VisiBox
	mov	DWORD PTR ?CurrentVisiBox@@3PAUVISIBOX@@A, eax ; CurrentVisiBox

; 372  : 			return;

	jmp	$L81466
$L81495:

; 373  : 		}
; 374  : 	}
; 375  : 
; 376  : // new visibox?
; 377  : 
; 378  : 	if (Keys[DIK_INSERT] && !LastKeys[DIK_INSERT])

	movsx	eax, BYTE PTR ?Keys@@3PADA+210
	test	eax, eax
	je	$L81505
	movsx	eax, BYTE PTR ?LastKeys@@3PADA+210
	test	eax, eax
	jne	$L81505

; 379  : 	{
; 380  : 		if ((vb = AllocVisiBox()))

	call	?AllocVisiBox@@YAPAUVISIBOX@@XZ		; AllocVisiBox
	mov	DWORD PTR _vb$[ebp], eax
	cmp	DWORD PTR _vb$[ebp], 0
	je	$L81505

; 381  : 		{
; 382  : 			vec.v[X] = 0;

	mov	DWORD PTR _vec$[ebp], 0

; 383  : 			vec.v[Y] = 0;

	mov	DWORD PTR _vec$[ebp+4], 0

; 384  : 			vec.v[Z] = 256;

	mov	DWORD PTR _vec$[ebp+8], 1132462080	; 43800000H

; 385  : 			RotVector(&CAM_MainCamera->WMatrix, &vec, &vec2);

	lea	eax, DWORD PTR _vec2$[ebp]
	push	eax
	lea	ecx, DWORD PTR _vec$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	add	edx, 16					; 00000010H
	push	edx
	call	?RotVector@@YAXPATMatrixUnion@@PAUVectorStruct@@1@Z ; RotVector
	add	esp, 12					; 0000000cH

; 386  : 			AddVector(&vec2, &CAM_MainCamera->WPos, &vec);

	mov	eax, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fld	DWORD PTR _vec2$[ebp]
	fadd	DWORD PTR [eax+68]
	fstp	DWORD PTR _vec$[ebp]
	mov	eax, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fld	DWORD PTR _vec2$[ebp+4]
	fadd	DWORD PTR [eax+72]
	fstp	DWORD PTR _vec$[ebp+4]
	mov	eax, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fld	DWORD PTR _vec2$[ebp+8]
	fadd	DWORD PTR [eax+76]
	fstp	DWORD PTR _vec$[ebp+8]

; 387  : 
; 388  : 			vb->xmin = vec.v[X] - 64;

	fld	DWORD PTR _vec$[ebp]
	fsub	DWORD PTR __real@42800000
	mov	eax, DWORD PTR _vb$[ebp]
	fstp	DWORD PTR [eax+4]

; 389  : 			vb->xmax = vec.v[X] + 64;

	fld	DWORD PTR _vec$[ebp]
	fadd	DWORD PTR __real@42800000
	mov	eax, DWORD PTR _vb$[ebp]
	fstp	DWORD PTR [eax+8]

; 390  : 			vb->ymin = vec.v[Y] - 64;

	fld	DWORD PTR _vec$[ebp+4]
	fsub	DWORD PTR __real@42800000
	mov	eax, DWORD PTR _vb$[ebp]
	fstp	DWORD PTR [eax+12]

; 391  : 			vb->ymax = vec.v[Y] + 64;

	fld	DWORD PTR _vec$[ebp+4]
	fadd	DWORD PTR __real@42800000
	mov	eax, DWORD PTR _vb$[ebp]
	fstp	DWORD PTR [eax+16]

; 392  : 			vb->zmin = vec.v[Z] - 64;

	fld	DWORD PTR _vec$[ebp+8]
	fsub	DWORD PTR __real@42800000
	mov	eax, DWORD PTR _vb$[ebp]
	fstp	DWORD PTR [eax+20]

; 393  : 			vb->zmax = vec.v[Z] + 64;

	fld	DWORD PTR _vec$[ebp+8]
	fadd	DWORD PTR __real@42800000
	mov	eax, DWORD PTR _vb$[ebp]
	fstp	DWORD PTR [eax+24]

; 394  : 
; 395  : 			vb->Flag = VISIBOX_CAMERA;

	mov	eax, DWORD PTR _vb$[ebp]
	mov	BYTE PTR [eax], 1

; 396  : 			vb->ID = LastVisiID;

	mov	eax, DWORD PTR _vb$[ebp]
	mov	cl, BYTE PTR _LastVisiID
	mov	BYTE PTR [eax+1], cl

; 397  : 
; 398  : 			CurrentVisiBox = vb;

	mov	eax, DWORD PTR _vb$[ebp]
	mov	DWORD PTR ?CurrentVisiBox@@3PAUVISIBOX@@A, eax ; CurrentVisiBox
$L81505:

; 399  : 		}
; 400  : 	}
; 401  : 
; 402  : // quit now if no current visibox
; 403  : 
; 404  : 	if (!CurrentVisiBox) return;

	cmp	DWORD PTR ?CurrentVisiBox@@3PAUVISIBOX@@A, 0 ; CurrentVisiBox
	jne	SHORT $L81507
	jmp	$L81466
$L81507:

; 405  : 
; 406  : // update perm visiboxes
; 407  : 
; 408  : 	if (!(FrameCount & 15))

	mov	eax, DWORD PTR ?FrameCount@@3KA		; FrameCount
	and	eax, 15					; 0000000fH
	jne	SHORT $L81508

; 409  : 	{
; 410  : 		SetPermVisiBoxes();

	call	?SetPermVisiBoxes@@YAXXZ		; SetPermVisiBoxes

; 411  : 
; 412  : 		for (i = 0 ; i < InstanceNum ; i++)

	mov	WORD PTR _i$[ebp], 0
	jmp	SHORT $L81509
$L81510:
	mov	ax, WORD PTR _i$[ebp]
	add	ax, 1
	mov	WORD PTR _i$[ebp], ax
$L81509:
	movsx	eax, WORD PTR _i$[ebp]
	cmp	eax, DWORD PTR ?InstanceNum@@3JA	; InstanceNum
	jge	SHORT $L81508

; 413  : 			Instances[i].VisiMask = SetObjectVisiMask(&Instances[i].Box);

	movsx	eax, WORD PTR _i$[ebp]
	imul	eax, 136				; 00000088H
	add	eax, OFFSET FLAT:?Instances@@3PAUINSTANCE@@A+100
	push	eax
	call	?SetObjectVisiMask@@YA_KPAUBoundingBoxStruct@@@Z ; SetObjectVisiMask
	add	esp, 4
	movsx	ecx, WORD PTR _i$[ebp]
	imul	ecx, 136				; 00000088H
	mov	DWORD PTR ?Instances@@3PAUINSTANCE@@A[ecx+24], eax
	mov	DWORD PTR ?Instances@@3PAUINSTANCE@@A[ecx+28], edx
	jmp	SHORT $L81510
$L81508:

; 414  : 	}
; 415  : 
; 416  : // update LastVisiID
; 417  : 
; 418  : 	LastVisiID = CurrentVisiBox->ID;

	mov	eax, DWORD PTR ?CurrentVisiBox@@3PAUVISIBOX@@A ; CurrentVisiBox
	mov	cl, BYTE PTR [eax+1]
	mov	BYTE PTR _LastVisiID, cl

; 419  : 
; 420  : // exit current visibox edit?
; 421  : 
; 422  : 	if (Keys[DIK_RETURN] && !LastKeys[DIK_RETURN])

	movsx	eax, BYTE PTR ?Keys@@3PADA+28
	test	eax, eax
	je	SHORT $L81512
	movsx	eax, BYTE PTR ?LastKeys@@3PADA+28
	test	eax, eax
	jne	SHORT $L81512

; 423  : 	{
; 424  : 		CurrentVisiBox = NULL;

	mov	DWORD PTR ?CurrentVisiBox@@3PAUVISIBOX@@A, 0 ; CurrentVisiBox

; 425  : 		return;

	jmp	$L81466
$L81512:

; 426  : 	}
; 427  : 
; 428  : // delete visibox?
; 429  : 
; 430  : 	if (Keys[DIK_DELETE] && !LastKeys[DIK_DELETE])

	movsx	eax, BYTE PTR ?Keys@@3PADA+211
	test	eax, eax
	je	SHORT $L81513
	movsx	eax, BYTE PTR ?LastKeys@@3PADA+211
	test	eax, eax
	jne	SHORT $L81513

; 431  : 	{
; 432  : 		FreeVisiBox(CurrentVisiBox);

	mov	eax, DWORD PTR ?CurrentVisiBox@@3PAUVISIBOX@@A ; CurrentVisiBox
	push	eax
	call	?FreeVisiBox@@YAXPAUVISIBOX@@@Z		; FreeVisiBox
	add	esp, 4

; 433  : 		CurrentVisiBox = NULL;

	mov	DWORD PTR ?CurrentVisiBox@@3PAUVISIBOX@@A, 0 ; CurrentVisiBox

; 434  : 		return;

	jmp	$L81466
$L81513:

; 435  : 	}
; 436  : 
; 437  : // toggle flag?
; 438  : 
; 439  : 	if (Keys[DIK_NUMPADENTER] && !LastKeys[DIK_NUMPADENTER])

	movsx	eax, BYTE PTR ?Keys@@3PADA+156
	test	eax, eax
	je	SHORT $L81514
	movsx	eax, BYTE PTR ?LastKeys@@3PADA+156
	test	eax, eax
	jne	SHORT $L81514

; 440  : 	{
; 441  : 		CurrentVisiBox->Flag ^= 3;

	mov	eax, DWORD PTR ?CurrentVisiBox@@3PAUVISIBOX@@A ; CurrentVisiBox
	movsx	ecx, BYTE PTR [eax]
	xor	ecx, 3
	mov	edx, DWORD PTR ?CurrentVisiBox@@3PAUVISIBOX@@A ; CurrentVisiBox
	mov	BYTE PTR [edx], cl
$L81514:

; 442  : 	}
; 443  : 
; 444  : // change ID?
; 445  : 
; 446  : 	if (Keys[DIK_NUMPADMINUS] && !LastKeys[DIK_NUMPADMINUS])

	movsx	eax, BYTE PTR ?Keys@@3PADA+74
	test	eax, eax
	je	SHORT $L81515
	movsx	eax, BYTE PTR ?LastKeys@@3PADA+74
	test	eax, eax
	jne	SHORT $L81515

; 447  : 		CurrentVisiBox->ID--;

	mov	eax, DWORD PTR ?CurrentVisiBox@@3PAUVISIBOX@@A ; CurrentVisiBox
	mov	cl, BYTE PTR [eax+1]
	sub	cl, 1
	mov	edx, DWORD PTR ?CurrentVisiBox@@3PAUVISIBOX@@A ; CurrentVisiBox
	mov	BYTE PTR [edx+1], cl
$L81515:

; 448  : 	if (Keys[DIK_NUMPADPLUS] && !LastKeys[DIK_NUMPADPLUS])

	movsx	eax, BYTE PTR ?Keys@@3PADA+78
	test	eax, eax
	je	SHORT $L81516
	movsx	eax, BYTE PTR ?LastKeys@@3PADA+78
	test	eax, eax
	jne	SHORT $L81516

; 449  : 		CurrentVisiBox->ID++;

	mov	eax, DWORD PTR ?CurrentVisiBox@@3PAUVISIBOX@@A ; CurrentVisiBox
	mov	cl, BYTE PTR [eax+1]
	add	cl, 1
	mov	edx, DWORD PTR ?CurrentVisiBox@@3PAUVISIBOX@@A ; CurrentVisiBox
	mov	BYTE PTR [edx+1], cl
$L81516:

; 450  : 
; 451  : 	CurrentVisiBox->ID &= 63;

	mov	eax, DWORD PTR ?CurrentVisiBox@@3PAUVISIBOX@@A ; CurrentVisiBox
	movsx	ecx, BYTE PTR [eax+1]
	and	ecx, 63					; 0000003fH
	mov	edx, DWORD PTR ?CurrentVisiBox@@3PAUVISIBOX@@A ; CurrentVisiBox
	mov	BYTE PTR [edx+1], cl

; 452  : 
; 453  : // change side?
; 454  : 
; 455  : 	if (Keys[DIK_SPACE] && !LastKeys[DIK_SPACE])

	movsx	eax, BYTE PTR ?Keys@@3PADA+57
	test	eax, eax
	je	SHORT $L81517
	movsx	eax, BYTE PTR ?LastKeys@@3PADA+57
	test	eax, eax
	jne	SHORT $L81517

; 456  : 		CurrentVisiSide = (CurrentVisiSide + 1) % 6;

	movsx	eax, BYTE PTR _CurrentVisiSide
	add	eax, 1
	cdq
	mov	ecx, 6
	idiv	ecx
	mov	BYTE PTR _CurrentVisiSide, dl
$L81517:

; 457  : 
; 458  : // change axis?
; 459  : 
; 460  : 	if (Keys[DIK_TAB] && !LastKeys[DIK_TAB])

	movsx	eax, BYTE PTR ?Keys@@3PADA+15
	test	eax, eax
	je	SHORT $L81518
	movsx	eax, BYTE PTR ?LastKeys@@3PADA+15
	test	eax, eax
	jne	SHORT $L81518

; 461  : 		{
; 462  : 			if (Keys[DIK_LSHIFT]) VisiAxis--;

	movsx	eax, BYTE PTR ?Keys@@3PADA+42
	test	eax, eax
	je	SHORT $L81519
	mov	al, BYTE PTR _VisiAxis
	sub	al, 1
	mov	BYTE PTR _VisiAxis, al

; 463  : 			else VisiAxis++;

	jmp	SHORT $L81520
$L81519:
	mov	al, BYTE PTR _VisiAxis
	add	al, 1
	mov	BYTE PTR _VisiAxis, al
$L81520:

; 464  : 			if (VisiAxis == -1) VisiAxis = 5;

	movsx	eax, BYTE PTR _VisiAxis
	cmp	eax, -1
	jne	SHORT $L81521
	mov	BYTE PTR _VisiAxis, 5
$L81521:

; 465  : 			if (VisiAxis == 6) VisiAxis = 0;

	movsx	eax, BYTE PTR _VisiAxis
	cmp	eax, 6
	jne	SHORT $L81518
	mov	BYTE PTR _VisiAxis, 0
$L81518:

; 466  : 		}
; 467  : 
; 468  : // change axis type?
; 469  : 
; 470  : 	if (Keys[DIK_LALT] && !LastKeys[DIK_LALT])

	movsx	eax, BYTE PTR ?Keys@@3PADA+56
	test	eax, eax
	je	SHORT $L81523
	movsx	eax, BYTE PTR ?LastKeys@@3PADA+56
	test	eax, eax
	jne	SHORT $L81523

; 471  : 		VisiAxisType ^= 1;

	movsx	eax, BYTE PTR _VisiAxisType
	xor	eax, 1
	mov	BYTE PTR _VisiAxisType, al
$L81523:

; 472  : 
; 473  : // change ST rate?
; 474  : 
; 475  : 	if (Keys[DIK_EQUALS] && VisiboxSemi < 0xff000000) VisiboxSemi += 0x01000000;

	movsx	eax, BYTE PTR ?Keys@@3PADA+13
	test	eax, eax
	je	SHORT $L81524
	cmp	DWORD PTR _VisiboxSemi, -16777216	; ff000000H
	jae	SHORT $L81524
	mov	eax, DWORD PTR _VisiboxSemi
	add	eax, 16777216				; 01000000H
	mov	DWORD PTR _VisiboxSemi, eax
$L81524:

; 476  : 	if (Keys[DIK_MINUS] && VisiboxSemi) VisiboxSemi -= 0x01000000;

	movsx	eax, BYTE PTR ?Keys@@3PADA+12
	test	eax, eax
	je	SHORT $L81525
	cmp	DWORD PTR _VisiboxSemi, 0
	je	SHORT $L81525
	mov	eax, DWORD PTR _VisiboxSemi
	sub	eax, 16777216				; 01000000H
	mov	DWORD PTR _VisiboxSemi, eax
$L81525:

; 477  : 
; 478  : // move visibox?
; 479  : 
; 480  : 	if (MouseLeft)

	movsx	eax, BYTE PTR ?MouseLeft@@3DA		; MouseLeft
	test	eax, eax
	je	$L81526

; 481  : 	{
; 482  : 		vec2.v[X] = (CurrentVisiBox->xmin + CurrentVisiBox->xmax) / 2;

	mov	eax, DWORD PTR ?CurrentVisiBox@@3PAUVISIBOX@@A ; CurrentVisiBox
	mov	ecx, DWORD PTR ?CurrentVisiBox@@3PAUVISIBOX@@A ; CurrentVisiBox
	fld	DWORD PTR [eax+4]
	fadd	DWORD PTR [ecx+8]
	fdiv	DWORD PTR __real@40000000
	fstp	DWORD PTR _vec2$[ebp]

; 483  : 		vec2.v[Y] = (CurrentVisiBox->ymin + CurrentVisiBox->ymax) / 2;

	mov	eax, DWORD PTR ?CurrentVisiBox@@3PAUVISIBOX@@A ; CurrentVisiBox
	mov	ecx, DWORD PTR ?CurrentVisiBox@@3PAUVISIBOX@@A ; CurrentVisiBox
	fld	DWORD PTR [eax+12]
	fadd	DWORD PTR [ecx+16]
	fdiv	DWORD PTR __real@40000000
	fstp	DWORD PTR _vec2$[ebp+4]

; 484  : 		vec2.v[Z] = (CurrentVisiBox->zmin + CurrentVisiBox->zmax) / 2;

	mov	eax, DWORD PTR ?CurrentVisiBox@@3PAUVISIBOX@@A ; CurrentVisiBox
	mov	ecx, DWORD PTR ?CurrentVisiBox@@3PAUVISIBOX@@A ; CurrentVisiBox
	fld	DWORD PTR [eax+20]
	fadd	DWORD PTR [ecx+24]
	fdiv	DWORD PTR __real@40000000
	fstp	DWORD PTR _vec2$[ebp+8]

; 485  : 		RotTransVector(&ViewMatrix, &ViewTrans, &vec2, &vec);

	lea	eax, DWORD PTR _vec$[ebp]
	push	eax
	lea	ecx, DWORD PTR _vec2$[ebp]
	push	ecx
	push	OFFSET FLAT:?ViewTrans@@3UVectorStruct@@A ; ViewTrans
	push	OFFSET FLAT:?ViewMatrix@@3TMatrixUnion@@A ; ViewMatrix
	call	?RotTransVector@@YAXPATMatrixUnion@@PAUVectorStruct@@11@Z ; RotTransVector
	add	esp, 16					; 00000010H

; 486  : 
; 487  : 		switch (VisiAxis)

	movsx	eax, BYTE PTR _VisiAxis
	mov	DWORD PTR tv748[ebp], eax
	cmp	DWORD PTR tv748[ebp], 5
	ja	$L81528
	mov	ecx, DWORD PTR tv748[ebp]
	jmp	DWORD PTR $L81911[ecx*4]
$L81531:

; 488  : 		{
; 489  : 			case VISI_AXIS_XY:
; 490  : 				vec.v[X] = MouseXrel * vec.v[Z] / RenderSettings.GeomPers + CameraEditXrel;

	fld	DWORD PTR ?MouseXrel@@3MA		; MouseXrel
	fmul	DWORD PTR _vec$[ebp+8]
	fdiv	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A
	fadd	DWORD PTR ?CameraEditXrel@@3MA		; CameraEditXrel
	fstp	DWORD PTR _vec$[ebp]

; 491  : 				vec.v[Y] = MouseYrel * vec.v[Z] / RenderSettings.GeomPers + CameraEditYrel;

	fld	DWORD PTR ?MouseYrel@@3MA		; MouseYrel
	fmul	DWORD PTR _vec$[ebp+8]
	fdiv	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A
	fadd	DWORD PTR ?CameraEditYrel@@3MA		; CameraEditYrel
	fstp	DWORD PTR _vec$[ebp+4]

; 492  : 				vec.v[Z] = CameraEditZrel;

	mov	eax, DWORD PTR ?CameraEditZrel@@3MA
	mov	DWORD PTR _vec$[ebp+8], eax

; 493  : 				break;

	jmp	$L81528
$L81532:

; 494  : 			case VISI_AXIS_XZ:
; 495  : 				vec.v[X] = MouseXrel * vec.v[Z] / RenderSettings.GeomPers + CameraEditXrel;

	fld	DWORD PTR ?MouseXrel@@3MA		; MouseXrel
	fmul	DWORD PTR _vec$[ebp+8]
	fdiv	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A
	fadd	DWORD PTR ?CameraEditXrel@@3MA		; CameraEditXrel
	fstp	DWORD PTR _vec$[ebp]

; 496  : 				vec.v[Y] = CameraEditYrel;

	mov	eax, DWORD PTR ?CameraEditYrel@@3MA
	mov	DWORD PTR _vec$[ebp+4], eax

; 497  : 				vec.v[Z] = -MouseYrel * vec.v[Z] / RenderSettings.GeomPers + CameraEditZrel;

	fld	DWORD PTR ?MouseYrel@@3MA		; MouseYrel
	fchs
	fmul	DWORD PTR _vec$[ebp+8]
	fdiv	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A
	fadd	DWORD PTR ?CameraEditZrel@@3MA		; CameraEditZrel
	fstp	DWORD PTR _vec$[ebp+8]

; 498  : 				break;

	jmp	$L81528
$L81533:

; 499  : 			case VISI_AXIS_ZY:
; 500  : 				vec.v[X] = CameraEditXrel;

	mov	eax, DWORD PTR ?CameraEditXrel@@3MA
	mov	DWORD PTR _vec$[ebp], eax

; 501  : 				vec.v[Y] = MouseYrel * vec.v[Z] / RenderSettings.GeomPers + CameraEditYrel;

	fld	DWORD PTR ?MouseYrel@@3MA		; MouseYrel
	fmul	DWORD PTR _vec$[ebp+8]
	fdiv	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A
	fadd	DWORD PTR ?CameraEditYrel@@3MA		; CameraEditYrel
	fstp	DWORD PTR _vec$[ebp+4]

; 502  : 				vec.v[Z] = MouseXrel * vec.v[Z] / RenderSettings.GeomPers + CameraEditZrel;

	fld	DWORD PTR ?MouseXrel@@3MA		; MouseXrel
	fmul	DWORD PTR _vec$[ebp+8]
	fdiv	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A
	fadd	DWORD PTR ?CameraEditZrel@@3MA		; CameraEditZrel
	fstp	DWORD PTR _vec$[ebp+8]

; 503  : 				break;

	jmp	SHORT $L81528
$L81534:

; 504  : 			case VISI_AXIS_X:
; 505  : 				vec.v[X] = MouseXrel * vec.v[Z] / RenderSettings.GeomPers + CameraEditXrel;

	fld	DWORD PTR ?MouseXrel@@3MA		; MouseXrel
	fmul	DWORD PTR _vec$[ebp+8]
	fdiv	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A
	fadd	DWORD PTR ?CameraEditXrel@@3MA		; CameraEditXrel
	fstp	DWORD PTR _vec$[ebp]

; 506  : 				vec.v[Y] = CameraEditYrel;

	mov	eax, DWORD PTR ?CameraEditYrel@@3MA
	mov	DWORD PTR _vec$[ebp+4], eax

; 507  : 				vec.v[Z] = CameraEditZrel;

	mov	eax, DWORD PTR ?CameraEditZrel@@3MA
	mov	DWORD PTR _vec$[ebp+8], eax

; 508  : 				break;

	jmp	SHORT $L81528
$L81535:

; 509  : 			case VISI_AXIS_Y:
; 510  : 				vec.v[X] = CameraEditXrel;

	mov	eax, DWORD PTR ?CameraEditXrel@@3MA
	mov	DWORD PTR _vec$[ebp], eax

; 511  : 				vec.v[Y] = MouseYrel * vec.v[Z] / RenderSettings.GeomPers + CameraEditYrel;

	fld	DWORD PTR ?MouseYrel@@3MA		; MouseYrel
	fmul	DWORD PTR _vec$[ebp+8]
	fdiv	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A
	fadd	DWORD PTR ?CameraEditYrel@@3MA		; CameraEditYrel
	fstp	DWORD PTR _vec$[ebp+4]

; 512  : 				vec.v[Z] = CameraEditZrel;

	mov	eax, DWORD PTR ?CameraEditZrel@@3MA
	mov	DWORD PTR _vec$[ebp+8], eax

; 513  : 				break;

	jmp	SHORT $L81528
$L81536:

; 514  : 			case VISI_AXIS_Z:
; 515  : 				vec.v[X] = CameraEditXrel;

	mov	eax, DWORD PTR ?CameraEditXrel@@3MA
	mov	DWORD PTR _vec$[ebp], eax

; 516  : 				vec.v[Y] = CameraEditYrel;

	mov	eax, DWORD PTR ?CameraEditYrel@@3MA
	mov	DWORD PTR _vec$[ebp+4], eax

; 517  : 				vec.v[Z] = -MouseYrel * vec.v[Z] / RenderSettings.GeomPers + CameraEditZrel;

	fld	DWORD PTR ?MouseYrel@@3MA		; MouseYrel
	fchs
	fmul	DWORD PTR _vec$[ebp+8]
	fdiv	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A
	fadd	DWORD PTR ?CameraEditZrel@@3MA		; CameraEditZrel
	fstp	DWORD PTR _vec$[ebp+8]
$L81528:

; 518  : 				break;
; 519  : 		}
; 520  : 
; 521  : 		if (VisiAxisType == 1)

	movsx	eax, BYTE PTR _VisiAxisType
	cmp	eax, 1
	jne	SHORT $L81537

; 522  : 		{
; 523  : 			SetVector(&vec2, vec.v[X], vec.v[Y], vec.v[Z]);

	mov	eax, DWORD PTR _vec$[ebp]
	mov	DWORD PTR _vec2$[ebp], eax
	mov	eax, DWORD PTR _vec$[ebp+4]
	mov	DWORD PTR _vec2$[ebp+4], eax
	mov	eax, DWORD PTR _vec$[ebp+8]
	mov	DWORD PTR _vec2$[ebp+8], eax

; 524  : 		}
; 525  : 		else

	jmp	SHORT $L81538
$L81537:

; 526  : 		{
; 527  : 			RotVector(&CAM_MainCamera->WMatrix, &vec, &vec2);

	lea	eax, DWORD PTR _vec2$[ebp]
	push	eax
	lea	ecx, DWORD PTR _vec$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	add	edx, 16					; 00000010H
	push	edx
	call	?RotVector@@YAXPATMatrixUnion@@PAUVectorStruct@@1@Z ; RotVector
	add	esp, 12					; 0000000cH
$L81538:

; 528  : 		}
; 529  : 
; 530  : 		CurrentVisiBox->xmin += vec2.v[X];

	mov	eax, DWORD PTR ?CurrentVisiBox@@3PAUVISIBOX@@A ; CurrentVisiBox
	fld	DWORD PTR _vec2$[ebp]
	fadd	DWORD PTR [eax+4]
	mov	ecx, DWORD PTR ?CurrentVisiBox@@3PAUVISIBOX@@A ; CurrentVisiBox
	fstp	DWORD PTR [ecx+4]

; 531  : 		CurrentVisiBox->xmax += vec2.v[X];

	mov	eax, DWORD PTR ?CurrentVisiBox@@3PAUVISIBOX@@A ; CurrentVisiBox
	fld	DWORD PTR _vec2$[ebp]
	fadd	DWORD PTR [eax+8]
	mov	ecx, DWORD PTR ?CurrentVisiBox@@3PAUVISIBOX@@A ; CurrentVisiBox
	fstp	DWORD PTR [ecx+8]

; 532  : 		CurrentVisiBox->ymin += vec2.v[Y];

	mov	eax, DWORD PTR ?CurrentVisiBox@@3PAUVISIBOX@@A ; CurrentVisiBox
	fld	DWORD PTR _vec2$[ebp+4]
	fadd	DWORD PTR [eax+12]
	mov	ecx, DWORD PTR ?CurrentVisiBox@@3PAUVISIBOX@@A ; CurrentVisiBox
	fstp	DWORD PTR [ecx+12]

; 533  : 		CurrentVisiBox->ymax += vec2.v[Y];

	mov	eax, DWORD PTR ?CurrentVisiBox@@3PAUVISIBOX@@A ; CurrentVisiBox
	fld	DWORD PTR _vec2$[ebp+4]
	fadd	DWORD PTR [eax+16]
	mov	ecx, DWORD PTR ?CurrentVisiBox@@3PAUVISIBOX@@A ; CurrentVisiBox
	fstp	DWORD PTR [ecx+16]

; 534  : 		CurrentVisiBox->zmin += vec2.v[Z];

	mov	eax, DWORD PTR ?CurrentVisiBox@@3PAUVISIBOX@@A ; CurrentVisiBox
	fld	DWORD PTR _vec2$[ebp+8]
	fadd	DWORD PTR [eax+20]
	mov	ecx, DWORD PTR ?CurrentVisiBox@@3PAUVISIBOX@@A ; CurrentVisiBox
	fstp	DWORD PTR [ecx+20]

; 535  : 		CurrentVisiBox->zmax += vec2.v[Z];

	mov	eax, DWORD PTR ?CurrentVisiBox@@3PAUVISIBOX@@A ; CurrentVisiBox
	fld	DWORD PTR _vec2$[ebp+8]
	fadd	DWORD PTR [eax+24]
	mov	ecx, DWORD PTR ?CurrentVisiBox@@3PAUVISIBOX@@A ; CurrentVisiBox
	fstp	DWORD PTR [ecx+24]
$L81526:

; 536  : 	}
; 537  : 
; 538  : // move side?
; 539  : 
; 540  : 	add = 0;

	mov	DWORD PTR _add$[ebp], 0

; 541  : 	if (Keys[DIK_NUMPADSTAR])

	movsx	eax, BYTE PTR ?Keys@@3PADA+55
	test	eax, eax
	je	SHORT $L81539

; 542  : 		add = 8 * TimeFactor;

	fld	DWORD PTR __real@41000000
	fmul	DWORD PTR ?TimeFactor@@3MA		; TimeFactor
	fstp	DWORD PTR _add$[ebp]
$L81539:

; 543  : 	if (Keys[DIK_NUMPADSLASH])

	movsx	eax, BYTE PTR ?Keys@@3PADA+181
	test	eax, eax
	je	SHORT $L81540

; 544  : 		add = -8 * TimeFactor;

	fld	DWORD PTR __real@c1000000
	fmul	DWORD PTR ?TimeFactor@@3MA		; TimeFactor
	fstp	DWORD PTR _add$[ebp]
$L81540:

; 545  : 
; 546  : 	if (Keys[DIK_LCONTROL]) add *= 4;

	movsx	eax, BYTE PTR ?Keys@@3PADA+29
	test	eax, eax
	je	SHORT $L81541
	fld	DWORD PTR _add$[ebp]
	fmul	DWORD PTR __real@40800000
	fstp	DWORD PTR _add$[ebp]
$L81541:

; 547  : 	
; 548  : 	if (add)

	fld	DWORD PTR __real@00000000
	fld	DWORD PTR _add$[ebp]
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jnp	$L81466

; 549  : 	{
; 550  : 		if (Keys[DIK_LSHIFT])

	movsx	eax, BYTE PTR ?Keys@@3PADA+42
	test	eax, eax
	je	$L81543

; 551  : 		{
; 552  : 			if (CurrentVisiBox->xmin - add < CurrentVisiBox->xmax)

	mov	eax, DWORD PTR ?CurrentVisiBox@@3PAUVISIBOX@@A ; CurrentVisiBox
	fld	DWORD PTR [eax+4]
	fsub	DWORD PTR _add$[ebp]
	mov	ecx, DWORD PTR ?CurrentVisiBox@@3PAUVISIBOX@@A ; CurrentVisiBox
	fcomp	DWORD PTR [ecx+8]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L81544

; 553  : 			{
; 554  : 				CurrentVisiBox->xmin -= add;

	mov	eax, DWORD PTR ?CurrentVisiBox@@3PAUVISIBOX@@A ; CurrentVisiBox
	fld	DWORD PTR [eax+4]
	fsub	DWORD PTR _add$[ebp]
	mov	ecx, DWORD PTR ?CurrentVisiBox@@3PAUVISIBOX@@A ; CurrentVisiBox
	fstp	DWORD PTR [ecx+4]

; 555  : 				CurrentVisiBox->xmax += add;

	mov	eax, DWORD PTR ?CurrentVisiBox@@3PAUVISIBOX@@A ; CurrentVisiBox
	fld	DWORD PTR _add$[ebp]
	fadd	DWORD PTR [eax+8]
	mov	ecx, DWORD PTR ?CurrentVisiBox@@3PAUVISIBOX@@A ; CurrentVisiBox
	fstp	DWORD PTR [ecx+8]
$L81544:

; 556  : 			}
; 557  : 
; 558  : 			if (CurrentVisiBox->ymin - add < CurrentVisiBox->ymax)

	mov	eax, DWORD PTR ?CurrentVisiBox@@3PAUVISIBOX@@A ; CurrentVisiBox
	fld	DWORD PTR [eax+12]
	fsub	DWORD PTR _add$[ebp]
	mov	ecx, DWORD PTR ?CurrentVisiBox@@3PAUVISIBOX@@A ; CurrentVisiBox
	fcomp	DWORD PTR [ecx+16]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L81545

; 559  : 			{
; 560  : 				CurrentVisiBox->ymin -= add;

	mov	eax, DWORD PTR ?CurrentVisiBox@@3PAUVISIBOX@@A ; CurrentVisiBox
	fld	DWORD PTR [eax+12]
	fsub	DWORD PTR _add$[ebp]
	mov	ecx, DWORD PTR ?CurrentVisiBox@@3PAUVISIBOX@@A ; CurrentVisiBox
	fstp	DWORD PTR [ecx+12]

; 561  : 				CurrentVisiBox->ymax += add;

	mov	eax, DWORD PTR ?CurrentVisiBox@@3PAUVISIBOX@@A ; CurrentVisiBox
	fld	DWORD PTR _add$[ebp]
	fadd	DWORD PTR [eax+16]
	mov	ecx, DWORD PTR ?CurrentVisiBox@@3PAUVISIBOX@@A ; CurrentVisiBox
	fstp	DWORD PTR [ecx+16]
$L81545:

; 562  : 			}
; 563  : 
; 564  : 			if (CurrentVisiBox->zmin - add < CurrentVisiBox->zmax)

	mov	eax, DWORD PTR ?CurrentVisiBox@@3PAUVISIBOX@@A ; CurrentVisiBox
	fld	DWORD PTR [eax+20]
	fsub	DWORD PTR _add$[ebp]
	mov	ecx, DWORD PTR ?CurrentVisiBox@@3PAUVISIBOX@@A ; CurrentVisiBox
	fcomp	DWORD PTR [ecx+24]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L81546

; 565  : 			{
; 566  : 				CurrentVisiBox->zmin -= add;

	mov	eax, DWORD PTR ?CurrentVisiBox@@3PAUVISIBOX@@A ; CurrentVisiBox
	fld	DWORD PTR [eax+20]
	fsub	DWORD PTR _add$[ebp]
	mov	ecx, DWORD PTR ?CurrentVisiBox@@3PAUVISIBOX@@A ; CurrentVisiBox
	fstp	DWORD PTR [ecx+20]

; 567  : 				CurrentVisiBox->zmax += add;

	mov	eax, DWORD PTR ?CurrentVisiBox@@3PAUVISIBOX@@A ; CurrentVisiBox
	fld	DWORD PTR _add$[ebp]
	fadd	DWORD PTR [eax+24]
	mov	ecx, DWORD PTR ?CurrentVisiBox@@3PAUVISIBOX@@A ; CurrentVisiBox
	fstp	DWORD PTR [ecx+24]
$L81546:

; 568  : 			}
; 569  : 		}
; 570  : 		else

	jmp	$L81466
$L81543:

; 571  : 		{
; 572  : 			switch (CurrentVisiSide)

	movsx	eax, BYTE PTR _CurrentVisiSide
	mov	DWORD PTR tv911[ebp], eax
	cmp	DWORD PTR tv911[ebp], 5
	ja	$L81466
	mov	ecx, DWORD PTR tv911[ebp]
	jmp	DWORD PTR $L81912[ecx*4]
$L81552:

; 573  : 			{
; 574  : 				case 0:
; 575  : 					CurrentVisiBox->xmin += add;

	mov	eax, DWORD PTR ?CurrentVisiBox@@3PAUVISIBOX@@A ; CurrentVisiBox
	fld	DWORD PTR _add$[ebp]
	fadd	DWORD PTR [eax+4]
	mov	ecx, DWORD PTR ?CurrentVisiBox@@3PAUVISIBOX@@A ; CurrentVisiBox
	fstp	DWORD PTR [ecx+4]

; 576  : 					if (CurrentVisiBox->xmin >= CurrentVisiBox->xmax)

	mov	eax, DWORD PTR ?CurrentVisiBox@@3PAUVISIBOX@@A ; CurrentVisiBox
	mov	ecx, DWORD PTR ?CurrentVisiBox@@3PAUVISIBOX@@A ; CurrentVisiBox
	fld	DWORD PTR [eax+4]
	fcomp	DWORD PTR [ecx+8]
	fnstsw	ax
	test	ah, 1
	jne	SHORT $L81553

; 577  : 						CurrentVisiBox->xmin = CurrentVisiBox->xmax - 8;

	mov	eax, DWORD PTR ?CurrentVisiBox@@3PAUVISIBOX@@A ; CurrentVisiBox
	fld	DWORD PTR [eax+8]
	fsub	DWORD PTR __real@41000000
	mov	ecx, DWORD PTR ?CurrentVisiBox@@3PAUVISIBOX@@A ; CurrentVisiBox
	fstp	DWORD PTR [ecx+4]
$L81553:

; 578  : 					break;

	jmp	$L81466
$L81554:

; 579  : 				case 1:
; 580  : 					CurrentVisiBox->xmax += add;

	mov	eax, DWORD PTR ?CurrentVisiBox@@3PAUVISIBOX@@A ; CurrentVisiBox
	fld	DWORD PTR _add$[ebp]
	fadd	DWORD PTR [eax+8]
	mov	ecx, DWORD PTR ?CurrentVisiBox@@3PAUVISIBOX@@A ; CurrentVisiBox
	fstp	DWORD PTR [ecx+8]

; 581  : 					if (CurrentVisiBox->xmax <= CurrentVisiBox->xmin)

	mov	eax, DWORD PTR ?CurrentVisiBox@@3PAUVISIBOX@@A ; CurrentVisiBox
	mov	ecx, DWORD PTR ?CurrentVisiBox@@3PAUVISIBOX@@A ; CurrentVisiBox
	fld	DWORD PTR [eax+8]
	fcomp	DWORD PTR [ecx+4]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jp	SHORT $L81555

; 582  : 						CurrentVisiBox->xmax = CurrentVisiBox->xmin + 8;

	mov	eax, DWORD PTR ?CurrentVisiBox@@3PAUVISIBOX@@A ; CurrentVisiBox
	fld	DWORD PTR [eax+4]
	fadd	DWORD PTR __real@41000000
	mov	ecx, DWORD PTR ?CurrentVisiBox@@3PAUVISIBOX@@A ; CurrentVisiBox
	fstp	DWORD PTR [ecx+8]
$L81555:

; 583  : 					break;

	jmp	$L81466
$L81556:

; 584  : 				case 2:
; 585  : 					CurrentVisiBox->ymin += add;

	mov	eax, DWORD PTR ?CurrentVisiBox@@3PAUVISIBOX@@A ; CurrentVisiBox
	fld	DWORD PTR _add$[ebp]
	fadd	DWORD PTR [eax+12]
	mov	ecx, DWORD PTR ?CurrentVisiBox@@3PAUVISIBOX@@A ; CurrentVisiBox
	fstp	DWORD PTR [ecx+12]

; 586  : 					if (CurrentVisiBox->ymin >= CurrentVisiBox->ymax)

	mov	eax, DWORD PTR ?CurrentVisiBox@@3PAUVISIBOX@@A ; CurrentVisiBox
	mov	ecx, DWORD PTR ?CurrentVisiBox@@3PAUVISIBOX@@A ; CurrentVisiBox
	fld	DWORD PTR [eax+12]
	fcomp	DWORD PTR [ecx+16]
	fnstsw	ax
	test	ah, 1
	jne	SHORT $L81557

; 587  : 						CurrentVisiBox->ymin = CurrentVisiBox->ymax - 8;

	mov	eax, DWORD PTR ?CurrentVisiBox@@3PAUVISIBOX@@A ; CurrentVisiBox
	fld	DWORD PTR [eax+16]
	fsub	DWORD PTR __real@41000000
	mov	ecx, DWORD PTR ?CurrentVisiBox@@3PAUVISIBOX@@A ; CurrentVisiBox
	fstp	DWORD PTR [ecx+12]
$L81557:

; 588  : 					break;

	jmp	$L81466
$L81558:

; 589  : 				case 3:
; 590  : 					CurrentVisiBox->ymax += add;

	mov	eax, DWORD PTR ?CurrentVisiBox@@3PAUVISIBOX@@A ; CurrentVisiBox
	fld	DWORD PTR _add$[ebp]
	fadd	DWORD PTR [eax+16]
	mov	ecx, DWORD PTR ?CurrentVisiBox@@3PAUVISIBOX@@A ; CurrentVisiBox
	fstp	DWORD PTR [ecx+16]

; 591  : 					if (CurrentVisiBox->ymax <= CurrentVisiBox->ymin)

	mov	eax, DWORD PTR ?CurrentVisiBox@@3PAUVISIBOX@@A ; CurrentVisiBox
	mov	ecx, DWORD PTR ?CurrentVisiBox@@3PAUVISIBOX@@A ; CurrentVisiBox
	fld	DWORD PTR [eax+16]
	fcomp	DWORD PTR [ecx+12]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jp	SHORT $L81559

; 592  : 						CurrentVisiBox->ymax = CurrentVisiBox->ymin + 8;

	mov	eax, DWORD PTR ?CurrentVisiBox@@3PAUVISIBOX@@A ; CurrentVisiBox
	fld	DWORD PTR [eax+12]
	fadd	DWORD PTR __real@41000000
	mov	ecx, DWORD PTR ?CurrentVisiBox@@3PAUVISIBOX@@A ; CurrentVisiBox
	fstp	DWORD PTR [ecx+16]
$L81559:

; 593  : 					break;

	jmp	$L81466
$L81560:

; 594  : 				case 4:
; 595  : 					CurrentVisiBox->zmin += add;

	mov	eax, DWORD PTR ?CurrentVisiBox@@3PAUVISIBOX@@A ; CurrentVisiBox
	fld	DWORD PTR _add$[ebp]
	fadd	DWORD PTR [eax+20]
	mov	ecx, DWORD PTR ?CurrentVisiBox@@3PAUVISIBOX@@A ; CurrentVisiBox
	fstp	DWORD PTR [ecx+20]

; 596  : 					if (CurrentVisiBox->zmin >= CurrentVisiBox->zmax)

	mov	eax, DWORD PTR ?CurrentVisiBox@@3PAUVISIBOX@@A ; CurrentVisiBox
	mov	ecx, DWORD PTR ?CurrentVisiBox@@3PAUVISIBOX@@A ; CurrentVisiBox
	fld	DWORD PTR [eax+20]
	fcomp	DWORD PTR [ecx+24]
	fnstsw	ax
	test	ah, 1
	jne	SHORT $L81561

; 597  : 						CurrentVisiBox->zmin = CurrentVisiBox->zmax - 8;

	mov	eax, DWORD PTR ?CurrentVisiBox@@3PAUVISIBOX@@A ; CurrentVisiBox
	fld	DWORD PTR [eax+24]
	fsub	DWORD PTR __real@41000000
	mov	ecx, DWORD PTR ?CurrentVisiBox@@3PAUVISIBOX@@A ; CurrentVisiBox
	fstp	DWORD PTR [ecx+20]
$L81561:

; 598  : 					break;

	jmp	SHORT $L81466
$L81562:

; 599  : 				case 5:
; 600  : 					CurrentVisiBox->zmax += add;

	mov	eax, DWORD PTR ?CurrentVisiBox@@3PAUVISIBOX@@A ; CurrentVisiBox
	fld	DWORD PTR _add$[ebp]
	fadd	DWORD PTR [eax+24]
	mov	ecx, DWORD PTR ?CurrentVisiBox@@3PAUVISIBOX@@A ; CurrentVisiBox
	fstp	DWORD PTR [ecx+24]

; 601  : 					if (CurrentVisiBox->zmax <= CurrentVisiBox->zmin)

	mov	eax, DWORD PTR ?CurrentVisiBox@@3PAUVISIBOX@@A ; CurrentVisiBox
	mov	ecx, DWORD PTR ?CurrentVisiBox@@3PAUVISIBOX@@A ; CurrentVisiBox
	fld	DWORD PTR [eax+24]
	fcomp	DWORD PTR [ecx+20]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jp	SHORT $L81466

; 602  : 						CurrentVisiBox->zmax = CurrentVisiBox->zmin + 8;

	mov	eax, DWORD PTR ?CurrentVisiBox@@3PAUVISIBOX@@A ; CurrentVisiBox
	fld	DWORD PTR [eax+20]
	fadd	DWORD PTR __real@41000000
	mov	ecx, DWORD PTR ?CurrentVisiBox@@3PAUVISIBOX@@A ; CurrentVisiBox
	fstp	DWORD PTR [ecx+24]
$L81466:

; 603  : 					break;
; 604  : 			}
; 605  : 		}
; 606  : 	}
; 607  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
$L81911:
	DD	$L81531
	DD	$L81532
	DD	$L81533
	DD	$L81534
	DD	$L81535
	DD	$L81536
$L81912:
	DD	$L81552
	DD	$L81554
	DD	$L81556
	DD	$L81558
	DD	$L81560
	DD	$L81562
?EditVisiBoxes@@YAXXZ ENDP				; EditVisiBoxes
_TEXT	ENDS
PUBLIC	?DisplayVisiBoxInfo@@YAXPAUVISIBOX@@@Z		; DisplayVisiBoxInfo
PUBLIC	??_C@_05FEDMHOOH@ID?5?$CFd?$AA@			; `string'
PUBLIC	??_C@_0N@MOINFLNL@Axis?5?$CFs?5?9?5?$CFs?$AA@	; `string'
EXTRN	?DumpText@@YAXFFFFJPAD@Z:NEAR			; DumpText
;	COMDAT ??_C@_05FEDMHOOH@ID?5?$CFd?$AA@
CONST	SEGMENT
??_C@_05FEDMHOOH@ID?5?$CFd?$AA@ DB 'ID %d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@MOINFLNL@Axis?5?$CFs?5?9?5?$CFs?$AA@
CONST	SEGMENT
??_C@_0N@MOINFLNL@Axis?5?$CFs?5?9?5?$CFs?$AA@ DB 'Axis %s - %s', 00H ; `string'
; Function compile flags: /Odt /ZI
CONST	ENDS
;	COMDAT ?DisplayVisiBoxInfo@@YAXPAUVISIBOX@@@Z
_TEXT	SEGMENT
_buf$ = -128						; size = 128
_visibox$ = 8						; size = 4
?DisplayVisiBoxInfo@@YAXPAUVISIBOX@@@Z PROC NEAR	; DisplayVisiBoxInfo, COMDAT

; 614  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi

; 615  : 	char buf[128];
; 616  : 
; 617  : // flag
; 618  : 
; 619  : 	DumpText(450, 0, 8, 16, 0xffff00, VisiBoxNames[visibox->Flag - 1]);

	mov	eax, DWORD PTR _visibox$[ebp]
	movsx	ecx, BYTE PTR [eax]
	mov	edx, DWORD PTR _VisiBoxNames[ecx*4-4]
	push	edx
	push	16776960				; 00ffff00H
	push	16					; 00000010H
	push	8
	push	0
	push	450					; 000001c2H
	call	?DumpText@@YAXFFFFJPAD@Z		; DumpText
	add	esp, 24					; 00000018H

; 620  : 
; 621  : // ID
; 622  : 
; 623  : 	wsprintf(buf, "ID %d", (short)visibox->ID);

	mov	eax, DWORD PTR _visibox$[ebp]
	movsx	ecx, BYTE PTR [eax+1]
	push	ecx
	push	OFFSET FLAT:??_C@_05FEDMHOOH@ID?5?$CFd?$AA@
	lea	edx, DWORD PTR _buf$[ebp]
	push	edx
	call	DWORD PTR __imp__wsprintfA
	add	esp, 12					; 0000000cH

; 624  : 	DumpText(450, 24, 8, 16, 0x00ff00, buf);

	lea	eax, DWORD PTR _buf$[ebp]
	push	eax
	push	65280					; 0000ff00H
	push	16					; 00000010H
	push	8
	push	24					; 00000018H
	push	450					; 000001c2H
	call	?DumpText@@YAXFFFFJPAD@Z		; DumpText
	add	esp, 24					; 00000018H

; 625  : 
; 626  : // axis
; 627  : 
; 628  : 	wsprintf(buf, "Axis %s - %s", VisiAxisNames[VisiAxis], VisiAxisTypeNames[VisiAxisType]);

	movsx	eax, BYTE PTR _VisiAxisType
	mov	ecx, DWORD PTR _VisiAxisTypeNames[eax*4]
	push	ecx
	movsx	edx, BYTE PTR _VisiAxis
	mov	eax, DWORD PTR _VisiAxisNames[edx*4]
	push	eax
	push	OFFSET FLAT:??_C@_0N@MOINFLNL@Axis?5?$CFs?5?9?5?$CFs?$AA@
	lea	ecx, DWORD PTR _buf$[ebp]
	push	ecx
	call	DWORD PTR __imp__wsprintfA
	add	esp, 16					; 00000010H

; 629  : 	DumpText(450, 48, 8, 16, 0xff00ff, buf);

	lea	eax, DWORD PTR _buf$[ebp]
	push	eax
	push	16711935				; 00ff00ffH
	push	16					; 00000010H
	push	8
	push	48					; 00000030H
	push	450					; 000001c2H
	call	?DumpText@@YAXFFFFJPAD@Z		; DumpText
	add	esp, 24					; 00000018H

; 630  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?DisplayVisiBoxInfo@@YAXPAUVISIBOX@@@Z ENDP		; DisplayVisiBoxInfo
_TEXT	ENDS
PUBLIC	_sqrtf
; Function compile flags: /Odt /ZI
; File c:\program files\microsoft visual studio .net 2003\vc7\include\math.h
;	COMDAT ?sqrt@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?sqrt@@YAMM@Z PROC NEAR					; sqrt, COMDAT

; 579  :         {return (sqrtf(_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR __X$[ebp]
	push	eax
	call	_sqrtf
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?sqrt@@YAMM@Z ENDP					; sqrt
_TEXT	ENDS
EXTRN	_sqrt:NEAR
; Function compile flags: /Odt /ZI
;	COMDAT _sqrtf
_TEXT	SEGMENT
tv70 = -68						; size = 4
__X$ = 8						; size = 4
_sqrtf	PROC NEAR					; COMDAT

; 470  :         {return ((float)sqrt((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	fld	DWORD PTR __X$[ebp]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	call	_sqrt
	add	esp, 8
	fst	DWORD PTR tv70[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_sqrtf	ENDP
_TEXT	ENDS
PUBLIC	?DisplayCamVisiMask@@YAXXZ			; DisplayCamVisiMask
PUBLIC	??_C@_0N@KLJCCIGO@Big?5Brothers?$AA@		; `string'
PUBLIC	??_C@_0O@HPAHNMMP@Locked?5Camera?$AA@		; `string'
PUBLIC	??_C@_02DPKJAMEF@?$CFd?$AA@			; `string'
EXTRN	__aullshr:NEAR
;	COMDAT ??_C@_0N@KLJCCIGO@Big?5Brothers?$AA@
; File c:\documents and settings\jarhead\desktop\shit to display my love for xbox revolt and fuck you borman-ness\revolt source\source\visibox.cpp
CONST	SEGMENT
??_C@_0N@KLJCCIGO@Big?5Brothers?$AA@ DB 'Big Brothers', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@HPAHNMMP@Locked?5Camera?$AA@
CONST	SEGMENT
??_C@_0O@HPAHNMMP@Locked?5Camera?$AA@ DB 'Locked Camera', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02DPKJAMEF@?$CFd?$AA@
CONST	SEGMENT
??_C@_02DPKJAMEF@?$CFd?$AA@ DB '%d', 00H		; `string'
; Function compile flags: /Odt /ZI
CONST	ENDS
;	COMDAT ?DisplayCamVisiMask@@YAXXZ
_TEXT	SEGMENT
tv145 = -216						; size = 8
_buf$ = -144						; size = 128
_y$ = -16						; size = 2
_mask$ = -12						; size = 8
_i$ = -4						; size = 4
?DisplayCamVisiMask@@YAXXZ PROC NEAR			; DisplayCamVisiMask, COMDAT

; 637  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi

; 638  : 	unsigned long i;
; 639  : 	VISIMASK mask;
; 640  : 	short y;
; 641  : 	char buf[128];
; 642  : 
; 643  : // BigID
; 644  : 
; 645  : 	if (BigID)

	movsx	eax, BYTE PTR _BigID
	test	eax, eax
	je	SHORT $L81578

; 646  : 		DumpText(0, 32, 8, 16, 0xff00ff, "Big Brothers");

	push	OFFSET FLAT:??_C@_0N@KLJCCIGO@Big?5Brothers?$AA@
	push	16711935				; 00ff00ffH
	push	16					; 00000010H
	push	8
	push	32					; 00000020H
	push	0
	call	?DumpText@@YAXFFFFJPAD@Z		; DumpText
	add	esp, 24					; 00000018H
$L81578:

; 647  : 
; 648  : // ForceID
; 649  : 
; 650  : 	if (ForceID)

	movsx	eax, BYTE PTR _ForceID
	test	eax, eax
	je	SHORT $L81580

; 651  : 		DumpText(0, 48, 8, 16, 0xff00ff, "Locked Camera");

	push	OFFSET FLAT:??_C@_0O@HPAHNMMP@Locked?5Camera?$AA@
	push	16711935				; 00ff00ffH
	push	16					; 00000010H
	push	8
	push	48					; 00000030H
	push	0
	call	?DumpText@@YAXFFFFJPAD@Z		; DumpText
	add	esp, 24					; 00000018H
$L81580:

; 652  : 
; 653  : // 'in' ID's
; 654  : 
; 655  : 	mask = CamVisiMask;

	mov	eax, DWORD PTR ?CamVisiMask@@3_KA
	mov	DWORD PTR _mask$[ebp], eax
	mov	ecx, DWORD PTR ?CamVisiMask@@3_KA+4
	mov	DWORD PTR _mask$[ebp+4], ecx

; 656  : 	y = 64;

	mov	WORD PTR _y$[ebp], 64			; 00000040H

; 657  : 
; 658  : 	for (i = 0 ; i < VISIBOX_MAX_ID ; i++, mask >>= 1) if (mask & 1)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $L81582
$L81583:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	mov	eax, DWORD PTR _mask$[ebp]
	mov	edx, DWORD PTR _mask$[ebp+4]
	mov	cl, 1
	call	__aullshr
	mov	DWORD PTR _mask$[ebp], eax
	mov	DWORD PTR _mask$[ebp+4], edx
$L81582:
	cmp	DWORD PTR _i$[ebp], 64			; 00000040H
	jae	SHORT $L81573
	mov	eax, DWORD PTR _mask$[ebp]
	and	eax, 1
	mov	ecx, DWORD PTR _mask$[ebp+4]
	and	ecx, 0
	mov	DWORD PTR tv145[ebp], eax
	mov	DWORD PTR tv145[ebp+4], ecx
	mov	edx, DWORD PTR tv145[ebp]
	or	edx, DWORD PTR tv145[ebp+4]
	je	SHORT $L81585

; 659  : 	{
; 660  : 		wsprintf(buf, "%d", i);

	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	push	OFFSET FLAT:??_C@_02DPKJAMEF@?$CFd?$AA@
	lea	ecx, DWORD PTR _buf$[ebp]
	push	ecx
	call	DWORD PTR __imp__wsprintfA
	add	esp, 12					; 0000000cH

; 661  : 		DumpText(0, y, 8, 16, 0xffffff, buf);

	lea	eax, DWORD PTR _buf$[ebp]
	push	eax
	push	16777215				; 00ffffffH
	push	16					; 00000010H
	push	8
	mov	cx, WORD PTR _y$[ebp]
	push	ecx
	push	0
	call	?DumpText@@YAXFFFFJPAD@Z		; DumpText
	add	esp, 24					; 00000018H

; 662  : 		y += 16;

	movsx	eax, WORD PTR _y$[ebp]
	add	eax, 16					; 00000010H
	mov	WORD PTR _y$[ebp], ax
$L81585:

; 663  : 	}
; 664  : }

	jmp	$L81583
$L81573:
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?DisplayCamVisiMask@@YAXXZ ENDP				; DisplayCamVisiMask
_TEXT	ENDS
PUBLIC	?DrawVisiBoxes@@YAXXZ				; DrawVisiBoxes
PUBLIC	??_C@_05DIALNFFA@?$CFs?5?$CFd?$AA@		; `string'
EXTRN	?IdentityMatrix@@3TMatrixUnion@@A:BYTE		; IdentityMatrix
EXTRN	?DumpText3D@@YAXPAUVectorStruct@@MMJPAD@Z:NEAR	; DumpText3D
EXTRN	?DrawAxis@@YAXPATMatrixUnion@@PAUVectorStruct@@@Z:NEAR ; DrawAxis
EXTRN	?DrawBoundingBox@@YAXMMMMMMJJJJJJ@Z:NEAR	; DrawBoundingBox
EXTRN	?DxState@@3UDX_STATE@@A:BYTE			; DxState
EXTRN	?D3Ddevice@@3PAUIDirect3DDevice3@@A:DWORD	; D3Ddevice
EXTRN	?RenderStateChange@@3JA:DWORD			; RenderStateChange
EXTRN	?RenderAlpha@@3FA:WORD				; RenderAlpha
EXTRN	?RenderAlphaSrc@@3FA:WORD			; RenderAlphaSrc
EXTRN	?RenderAlphaDest@@3FA:WORD			; RenderAlphaDest
EXTRN	?RenderZwrite@@3FA:WORD				; RenderZwrite
EXTRN	?RenderZbuffer@@3FA:WORD			; RenderZbuffer
EXTRN	?EditAiNodeModel@@3PAUMODEL@@A:BYTE		; EditAiNodeModel
EXTRN	_rand:NEAR
EXTRN	?DrawModel@@YAXPAUMODEL@@PATMatrixUnion@@PAUVectorStruct@@F@Z:NEAR ; DrawModel
EXTRN	?CAM_CameraNode@@3PAUCamNodeStruct@@A:BYTE	; CAM_CameraNode
;	COMDAT ??_C@_05DIALNFFA@?$CFs?5?$CFd?$AA@
CONST	SEGMENT
??_C@_05DIALNFFA@?$CFs?5?$CFd?$AA@ DB '%s %d', 00H	; `string'
; Function compile flags: /Odt /ZI
CONST	ENDS
;	COMDAT ?DrawVisiBoxes@@YAXXZ
_TEXT	SEGMENT
_buf$ = -216						; size = 128
_col$ = -88						; size = 24
_vec2$ = -64						; size = 12
_vec$ = -52						; size = 12
_size$ = -40						; size = 4
_zmax$ = -36						; size = 4
_zmin$ = -32						; size = 4
_ymax$ = -28						; size = 4
_ymin$ = -24						; size = 4
_xmax$ = -20						; size = 4
_xmin$ = -16						; size = 4
_vb$ = -12						; size = 4
_j$ = -8						; size = 4
_i$ = -4						; size = 4
?DrawVisiBoxes@@YAXXZ PROC NEAR				; DrawVisiBoxes, COMDAT

; 671  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 280				; 00000118H
	push	ebx
	push	esi
	push	edi

; 672  : 	long i, j;
; 673  : 	VISIBOX *vb;
; 674  : 	float xmin, xmax, ymin, ymax, zmin, zmax, size;
; 675  : 	VEC vec, vec2;
; 676  : 	long col[6];
; 677  : 	char buf[128];
; 678  : 
; 679  : // draw camera nodes
; 680  : 
; 681  : 	for (i = 0 ; i < CAM_NCameraNodes ; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $L81604
$L81605:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$L81604:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR ?CAM_NCameraNodes@@3JA	; CAM_NCameraNodes
	jge	SHORT $L81606

; 682  : 	{
; 683  : 		DrawModel(&EditAiNodeModel[0], &IdentityMatrix, &CAM_CameraNode[i].Pos, MODEL_PLAIN);

	push	0
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 40					; 00000028H
	add	eax, OFFSET FLAT:?CAM_CameraNode@@3PAUCamNodeStruct@@A+8
	push	eax
	push	OFFSET FLAT:?IdentityMatrix@@3TMatrixUnion@@A ; IdentityMatrix
	push	OFFSET FLAT:?EditAiNodeModel@@3PAUMODEL@@A ; EditAiNodeModel
	call	?DrawModel@@YAXPAUMODEL@@PATMatrixUnion@@PAUVectorStruct@@F@Z ; DrawModel
	add	esp, 16					; 00000010H

; 684  : 	}

	jmp	SHORT $L81605
$L81606:

; 685  : 
; 686  : // set box render states
; 687  : 
; 688  : 	ALPHA_SRC(D3DBLEND_SRCALPHA);

	movsx	eax, WORD PTR ?RenderAlphaSrc@@3FA	; RenderAlphaSrc
	cmp	eax, 5
	je	SHORT $L81607
	mov	WORD PTR ?RenderAlphaSrc@@3FA, 5	; RenderAlphaSrc
	movsx	eax, WORD PTR ?RenderAlphaSrc@@3FA	; RenderAlphaSrc
	push	eax
	push	19					; 00000013H
	mov	ecx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	eax
	call	DWORD PTR [edx+88]
	mov	eax, DWORD PTR ?RenderStateChange@@3JA	; RenderStateChange
	add	eax, 1
	mov	DWORD PTR ?RenderStateChange@@3JA, eax	; RenderStateChange
$L81607:

; 689  : 	ALPHA_DEST(D3DBLEND_INVSRCALPHA);

	movsx	eax, WORD PTR ?RenderAlphaDest@@3FA	; RenderAlphaDest
	cmp	eax, 6
	je	SHORT $L81608
	mov	WORD PTR ?RenderAlphaDest@@3FA, 6	; RenderAlphaDest
	movsx	eax, WORD PTR ?RenderAlphaDest@@3FA	; RenderAlphaDest
	push	eax
	push	20					; 00000014H
	mov	ecx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	eax
	call	DWORD PTR [edx+88]
	mov	eax, DWORD PTR ?RenderStateChange@@3JA	; RenderStateChange
	add	eax, 1
	mov	DWORD PTR ?RenderStateChange@@3JA, eax	; RenderStateChange
$L81608:

; 690  : 	WIREFRAME_OFF();

	push	3
	push	8
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	edx
	call	DWORD PTR [ecx+88]
	mov	eax, DWORD PTR ?RenderStateChange@@3JA	; RenderStateChange
	add	eax, 1
	mov	DWORD PTR ?RenderStateChange@@3JA, eax	; RenderStateChange

; 691  : 	ZWRITE_ON();

	movsx	eax, WORD PTR ?RenderZwrite@@3FA	; RenderZwrite
	test	eax, eax
	jne	SHORT $L81609
	mov	WORD PTR ?RenderZwrite@@3FA, 1		; RenderZwrite
	movsx	eax, WORD PTR ?RenderZwrite@@3FA	; RenderZwrite
	push	eax
	push	14					; 0000000eH
	mov	ecx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	eax
	call	DWORD PTR [edx+88]
	mov	eax, DWORD PTR ?RenderStateChange@@3JA	; RenderStateChange
	add	eax, 1
	mov	DWORD PTR ?RenderStateChange@@3JA, eax	; RenderStateChange
$L81609:

; 692  : 
; 693  : // loop thru all visiboxes
; 694  : 
; 695  : 	vb = VisiBox;

	mov	DWORD PTR _vb$[ebp], OFFSET FLAT:_VisiBox

; 696  : 	for (i = 0 ; i < VISIBOX_MAX ; i++, vb++) if (vb->Flag)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $L81610
$L81611:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	mov	ecx, DWORD PTR _vb$[ebp]
	add	ecx, 28					; 0000001cH
	mov	DWORD PTR _vb$[ebp], ecx
$L81610:
	cmp	DWORD PTR _i$[ebp], 400			; 00000190H
	jge	$L81612
	mov	eax, DWORD PTR _vb$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	$L81613

; 697  : 	{
; 698  : 
; 699  : // real size?
; 700  : 
; 701  : 		if (vb == CurrentVisiBox || (CurrentVisiBox && vb->ID == CurrentVisiBox->ID && BigID))

	mov	eax, DWORD PTR _vb$[ebp]
	cmp	eax, DWORD PTR ?CurrentVisiBox@@3PAUVISIBOX@@A ; CurrentVisiBox
	je	SHORT $L81615
	cmp	DWORD PTR ?CurrentVisiBox@@3PAUVISIBOX@@A, 0 ; CurrentVisiBox
	je	$L81614
	mov	eax, DWORD PTR _vb$[ebp]
	movsx	ecx, BYTE PTR [eax+1]
	mov	edx, DWORD PTR ?CurrentVisiBox@@3PAUVISIBOX@@A ; CurrentVisiBox
	movsx	eax, BYTE PTR [edx+1]
	cmp	ecx, eax
	jne	$L81614
	movsx	eax, BYTE PTR _BigID
	test	eax, eax
	je	$L81614
$L81615:

; 702  : 		{
; 703  : 			xmin = vb->xmin;

	mov	eax, DWORD PTR _vb$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _xmin$[ebp], ecx

; 704  : 			xmax = vb->xmax;

	mov	eax, DWORD PTR _vb$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _xmax$[ebp], ecx

; 705  : 			ymin = vb->ymin;

	mov	eax, DWORD PTR _vb$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _ymin$[ebp], ecx

; 706  : 			ymax = vb->ymax;

	mov	eax, DWORD PTR _vb$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _ymax$[ebp], ecx

; 707  : 			zmin = vb->zmin;

	mov	eax, DWORD PTR _vb$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR _zmin$[ebp], ecx

; 708  : 			zmax = vb->zmax;

	mov	eax, DWORD PTR _vb$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR _zmax$[ebp], ecx

; 709  : 
; 710  : 			col[2] = 0xff0000 | VisiboxSemi;

	mov	eax, DWORD PTR _VisiboxSemi
	or	eax, 16711680				; 00ff0000H
	mov	DWORD PTR _col$[ebp+8], eax

; 711  : 			col[1] = 0x00ff00 | VisiboxSemi;

	mov	eax, DWORD PTR _VisiboxSemi
	or	eax, 65280				; 0000ff00H
	mov	DWORD PTR _col$[ebp+4], eax

; 712  : 			col[0] = 0x0000ff | VisiboxSemi;

	mov	eax, DWORD PTR _VisiboxSemi
	or	eax, 255				; 000000ffH
	mov	DWORD PTR _col$[ebp], eax

; 713  : 			col[4] = 0xffff00 | VisiboxSemi;

	mov	eax, DWORD PTR _VisiboxSemi
	or	eax, 16776960				; 00ffff00H
	mov	DWORD PTR _col$[ebp+16], eax

; 714  : 			col[3] = 0x00ffff | VisiboxSemi;

	mov	eax, DWORD PTR _VisiboxSemi
	or	eax, 65535				; 0000ffffH
	mov	DWORD PTR _col$[ebp+12], eax

; 715  : 			col[5] = 0xff00ff | VisiboxSemi;

	mov	eax, DWORD PTR _VisiboxSemi
	or	eax, 16711935				; 00ff00ffH
	mov	DWORD PTR _col$[ebp+20], eax

; 716  : 
; 717  : 			if (vb == CurrentVisiBox)

	mov	eax, DWORD PTR _vb$[ebp]
	cmp	eax, DWORD PTR ?CurrentVisiBox@@3PAUVISIBOX@@A ; CurrentVisiBox
	jne	SHORT $L81616

; 718  : 				col[CurrentVisiSide] = rand() | VisiboxSemi;

	call	_rand
	or	eax, DWORD PTR _VisiboxSemi
	movsx	ecx, BYTE PTR _CurrentVisiSide
	mov	DWORD PTR _col$[ebp+ecx*4], eax
$L81616:

; 719  : 
; 720  : 			ZBUFFER_ON();

	movsx	eax, WORD PTR ?RenderZbuffer@@3FA	; RenderZbuffer
	cmp	eax, 1
	je	SHORT $L81617
	mov	WORD PTR ?RenderZbuffer@@3FA, 1		; RenderZbuffer
	movsx	eax, WORD PTR ?RenderZbuffer@@3FA	; RenderZbuffer
	push	eax
	push	7
	mov	ecx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	eax
	call	DWORD PTR [edx+88]
	mov	eax, DWORD PTR ?RenderStateChange@@3JA	; RenderStateChange
	add	eax, 1
	mov	DWORD PTR ?RenderStateChange@@3JA, eax	; RenderStateChange
$L81617:

; 721  : 			ALPHA_ON();

	movsx	eax, WORD PTR ?RenderAlpha@@3FA		; RenderAlpha
	test	eax, eax
	jne	SHORT $L81618
	mov	WORD PTR ?RenderAlpha@@3FA, 1		; RenderAlpha
	movsx	eax, WORD PTR ?RenderAlpha@@3FA		; RenderAlpha
	push	eax
	push	27					; 0000001bH
	mov	ecx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	eax
	call	DWORD PTR [edx+88]
	mov	eax, DWORD PTR ?RenderStateChange@@3JA	; RenderStateChange
	add	eax, 1
	mov	DWORD PTR ?RenderStateChange@@3JA, eax	; RenderStateChange
$L81618:

; 722  : 			DrawBoundingBox(xmin, xmax, ymin, ymax, zmin, zmax, col[0], col[1], col[2], col[3], col[4], col[5]);

	mov	eax, DWORD PTR _col$[ebp+20]
	push	eax
	mov	ecx, DWORD PTR _col$[ebp+16]
	push	ecx
	mov	edx, DWORD PTR _col$[ebp+12]
	push	edx
	mov	eax, DWORD PTR _col$[ebp+8]
	push	eax
	mov	ecx, DWORD PTR _col$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _col$[ebp]
	push	edx
	mov	eax, DWORD PTR _zmax$[ebp]
	push	eax
	mov	ecx, DWORD PTR _zmin$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ymax$[ebp]
	push	edx
	mov	eax, DWORD PTR _ymin$[ebp]
	push	eax
	mov	ecx, DWORD PTR _xmax$[ebp]
	push	ecx
	mov	edx, DWORD PTR _xmin$[ebp]
	push	edx
	call	?DrawBoundingBox@@YAXMMMMMMJJJJJJ@Z	; DrawBoundingBox
	add	esp, 48					; 00000030H

; 723  : 		}
; 724  : 
; 725  : // no, small!
; 726  : 
; 727  : 		else

	jmp	$L81619
$L81614:

; 728  : 		{
; 729  : 			vec.v[X] = (vb->xmin + vb->xmax) / 2;

	mov	eax, DWORD PTR _vb$[ebp]
	mov	ecx, DWORD PTR _vb$[ebp]
	fld	DWORD PTR [eax+4]
	fadd	DWORD PTR [ecx+8]
	fdiv	DWORD PTR __real@40000000
	fstp	DWORD PTR _vec$[ebp]

; 730  : 			vec.v[Y] = (vb->ymin + vb->ymax) / 2;

	mov	eax, DWORD PTR _vb$[ebp]
	mov	ecx, DWORD PTR _vb$[ebp]
	fld	DWORD PTR [eax+12]
	fadd	DWORD PTR [ecx+16]
	fdiv	DWORD PTR __real@40000000
	fstp	DWORD PTR _vec$[ebp+4]

; 731  : 			vec.v[Z] = (vb->zmin + vb->zmax) / 2;

	mov	eax, DWORD PTR _vb$[ebp]
	mov	ecx, DWORD PTR _vb$[ebp]
	fld	DWORD PTR [eax+20]
	fadd	DWORD PTR [ecx+24]
	fdiv	DWORD PTR __real@40000000
	fstp	DWORD PTR _vec$[ebp+8]

; 732  : 
; 733  : 			xmin = vec.v[X] - 32;

	fld	DWORD PTR _vec$[ebp]
	fsub	DWORD PTR __real@42000000
	fstp	DWORD PTR _xmin$[ebp]

; 734  : 			xmax = vec.v[X] + 32;

	fld	DWORD PTR _vec$[ebp]
	fadd	DWORD PTR __real@42000000
	fstp	DWORD PTR _xmax$[ebp]

; 735  : 			ymin = vec.v[Y] - 32;

	fld	DWORD PTR _vec$[ebp+4]
	fsub	DWORD PTR __real@42000000
	fstp	DWORD PTR _ymin$[ebp]

; 736  : 			ymax = vec.v[Y] + 32;

	fld	DWORD PTR _vec$[ebp+4]
	fadd	DWORD PTR __real@42000000
	fstp	DWORD PTR _ymax$[ebp]

; 737  : 			zmin = vec.v[Z] - 32;

	fld	DWORD PTR _vec$[ebp+8]
	fsub	DWORD PTR __real@42000000
	fstp	DWORD PTR _zmin$[ebp]

; 738  : 			zmax = vec.v[Z] + 32;

	fld	DWORD PTR _vec$[ebp+8]
	fadd	DWORD PTR __real@42000000
	fstp	DWORD PTR _zmax$[ebp]

; 739  : 
; 740  : 			for (j = 0 ; j < 6 ; j++)

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $L81620
$L81621:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$L81620:
	cmp	DWORD PTR _j$[ebp], 6
	jge	SHORT $L81622

; 741  : 				col[j] = 0xff0000 | VisiboxSemi;

	mov	eax, DWORD PTR _VisiboxSemi
	or	eax, 16711680				; 00ff0000H
	mov	ecx, DWORD PTR _j$[ebp]
	mov	DWORD PTR _col$[ebp+ecx*4], eax
	jmp	SHORT $L81621
$L81622:

; 742  : 
; 743  : 			ZBUFFER_OFF();

	movsx	eax, WORD PTR ?RenderZbuffer@@3FA	; RenderZbuffer
	test	eax, eax
	je	SHORT $L81623
	mov	WORD PTR ?RenderZbuffer@@3FA, 0		; RenderZbuffer
	movsx	eax, WORD PTR ?RenderZbuffer@@3FA	; RenderZbuffer
	push	eax
	push	7
	mov	ecx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	eax
	call	DWORD PTR [edx+88]
	mov	eax, DWORD PTR ?RenderStateChange@@3JA	; RenderStateChange
	add	eax, 1
	mov	DWORD PTR ?RenderStateChange@@3JA, eax	; RenderStateChange
$L81623:

; 744  : 			ALPHA_ON();

	movsx	eax, WORD PTR ?RenderAlpha@@3FA		; RenderAlpha
	test	eax, eax
	jne	SHORT $L81624
	mov	WORD PTR ?RenderAlpha@@3FA, 1		; RenderAlpha
	movsx	eax, WORD PTR ?RenderAlpha@@3FA		; RenderAlpha
	push	eax
	push	27					; 0000001bH
	mov	ecx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	eax
	call	DWORD PTR [edx+88]
	mov	eax, DWORD PTR ?RenderStateChange@@3JA	; RenderStateChange
	add	eax, 1
	mov	DWORD PTR ?RenderStateChange@@3JA, eax	; RenderStateChange
$L81624:

; 745  : 			DrawBoundingBox(xmin, xmax, ymin, ymax, zmin, zmax, col[0], col[1], col[2], col[3], col[4], col[5]);

	mov	eax, DWORD PTR _col$[ebp+20]
	push	eax
	mov	ecx, DWORD PTR _col$[ebp+16]
	push	ecx
	mov	edx, DWORD PTR _col$[ebp+12]
	push	edx
	mov	eax, DWORD PTR _col$[ebp+8]
	push	eax
	mov	ecx, DWORD PTR _col$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _col$[ebp]
	push	edx
	mov	eax, DWORD PTR _zmax$[ebp]
	push	eax
	mov	ecx, DWORD PTR _zmin$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ymax$[ebp]
	push	edx
	mov	eax, DWORD PTR _ymin$[ebp]
	push	eax
	mov	ecx, DWORD PTR _xmax$[ebp]
	push	ecx
	mov	edx, DWORD PTR _xmin$[ebp]
	push	edx
	call	?DrawBoundingBox@@YAXMMMMMMJJJJJJ@Z	; DrawBoundingBox
	add	esp, 48					; 00000030H
$L81619:

; 746  : 		}
; 747  : 
; 748  : // text info
; 749  : 
; 750  : 		if (vb != CurrentVisiBox)

	mov	eax, DWORD PTR _vb$[ebp]
	cmp	eax, DWORD PTR ?CurrentVisiBox@@3PAUVISIBOX@@A ; CurrentVisiBox
	je	$L81613

; 751  : 		{
; 752  : 			ZBUFFER_OFF();

	movsx	eax, WORD PTR ?RenderZbuffer@@3FA	; RenderZbuffer
	test	eax, eax
	je	SHORT $L81626
	mov	WORD PTR ?RenderZbuffer@@3FA, 0		; RenderZbuffer
	movsx	eax, WORD PTR ?RenderZbuffer@@3FA	; RenderZbuffer
	push	eax
	push	7
	mov	ecx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	eax
	call	DWORD PTR [edx+88]
	mov	eax, DWORD PTR ?RenderStateChange@@3JA	; RenderStateChange
	add	eax, 1
	mov	DWORD PTR ?RenderStateChange@@3JA, eax	; RenderStateChange
$L81626:

; 753  : 			ALPHA_OFF();

	movsx	eax, WORD PTR ?RenderAlpha@@3FA		; RenderAlpha
	test	eax, eax
	je	SHORT $L81627
	mov	WORD PTR ?RenderAlpha@@3FA, 0		; RenderAlpha
	movsx	eax, WORD PTR ?RenderAlpha@@3FA		; RenderAlpha
	push	eax
	push	27					; 0000001bH
	mov	ecx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	eax
	call	DWORD PTR [edx+88]
	mov	eax, DWORD PTR ?RenderStateChange@@3JA	; RenderStateChange
	add	eax, 1
	mov	DWORD PTR ?RenderStateChange@@3JA, eax	; RenderStateChange
$L81627:

; 754  : 
; 755  : 			if (CurrentVisiBox && vb->ID == CurrentVisiBox->ID)

	cmp	DWORD PTR ?CurrentVisiBox@@3PAUVISIBOX@@A, 0 ; CurrentVisiBox
	je	SHORT $L81628
	mov	eax, DWORD PTR _vb$[ebp]
	movsx	ecx, BYTE PTR [eax+1]
	mov	edx, DWORD PTR ?CurrentVisiBox@@3PAUVISIBOX@@A ; CurrentVisiBox
	movsx	eax, BYTE PTR [edx+1]
	cmp	ecx, eax
	jne	SHORT $L81628

; 756  : 				size = 128;

	mov	DWORD PTR _size$[ebp], 1124073472	; 43000000H

; 757  : 			else

	jmp	SHORT $L81629
$L81628:

; 758  : 				size = 32;

	mov	DWORD PTR _size$[ebp], 1107296256	; 42000000H
$L81629:

; 759  : 
; 760  : 			vec.v[X] = (vb->xmin + vb->xmax) / 2;

	mov	eax, DWORD PTR _vb$[ebp]
	mov	ecx, DWORD PTR _vb$[ebp]
	fld	DWORD PTR [eax+4]
	fadd	DWORD PTR [ecx+8]
	fdiv	DWORD PTR __real@40000000
	fstp	DWORD PTR _vec$[ebp]

; 761  : 			vec.v[Y] = (vb->ymin + vb->ymax) / 2;

	mov	eax, DWORD PTR _vb$[ebp]
	mov	ecx, DWORD PTR _vb$[ebp]
	fld	DWORD PTR [eax+12]
	fadd	DWORD PTR [ecx+16]
	fdiv	DWORD PTR __real@40000000
	fstp	DWORD PTR _vec$[ebp+4]

; 762  : 			vec.v[Z] = (vb->zmin + vb->zmax) / 2;

	mov	eax, DWORD PTR _vb$[ebp]
	mov	ecx, DWORD PTR _vb$[ebp]
	fld	DWORD PTR [eax+20]
	fadd	DWORD PTR [ecx+24]
	fdiv	DWORD PTR __real@40000000
	fstp	DWORD PTR _vec$[ebp+8]

; 763  : 
; 764  : 			wsprintf(buf, "%s %d", VisiBoxNames[vb->Flag - 1], vb->ID);

	mov	eax, DWORD PTR _vb$[ebp]
	movsx	ecx, BYTE PTR [eax+1]
	push	ecx
	mov	edx, DWORD PTR _vb$[ebp]
	movsx	eax, BYTE PTR [edx]
	mov	ecx, DWORD PTR _VisiBoxNames[eax*4-4]
	push	ecx
	push	OFFSET FLAT:??_C@_05DIALNFFA@?$CFs?5?$CFd?$AA@
	lea	edx, DWORD PTR _buf$[ebp]
	push	edx
	call	DWORD PTR __imp__wsprintfA
	add	esp, 16					; 00000010H

; 765  : 			RotTransVector(&ViewMatrix, &ViewTrans, &vec, &vec2);

	lea	eax, DWORD PTR _vec2$[ebp]
	push	eax
	lea	ecx, DWORD PTR _vec$[ebp]
	push	ecx
	push	OFFSET FLAT:?ViewTrans@@3UVectorStruct@@A ; ViewTrans
	push	OFFSET FLAT:?ViewMatrix@@3TMatrixUnion@@A ; ViewMatrix
	call	?RotTransVector@@YAXPATMatrixUnion@@PAUVectorStruct@@11@Z ; RotTransVector
	add	esp, 16					; 00000010H

; 766  : 			vec2.v[X] -= size * 4;

	fld	DWORD PTR _size$[ebp]
	fmul	DWORD PTR __real@40800000
	fsubr	DWORD PTR _vec2$[ebp]
	fstp	DWORD PTR _vec2$[ebp]

; 767  : 			vec2.v[Y] -= size;

	fld	DWORD PTR _vec2$[ebp+4]
	fsub	DWORD PTR _size$[ebp]
	fstp	DWORD PTR _vec2$[ebp+4]

; 768  : 
; 769  : 			if (vec2.v[Z] > RenderSettings.NearClip)

	fld	DWORD PTR _vec2$[ebp+8]
	fcomp	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+28
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $L81613

; 770  : 				DumpText3D(&vec2, size, size * 2, 0xffffff, buf);

	lea	eax, DWORD PTR _buf$[ebp]
	push	eax
	push	16777215				; 00ffffffH
	fld	DWORD PTR _size$[ebp]
	fadd	ST(0), ST(0)
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	lea	edx, DWORD PTR _vec2$[ebp]
	push	edx
	call	?DumpText3D@@YAXPAUVectorStruct@@MMJPAD@Z ; DumpText3D
	add	esp, 20					; 00000014H
$L81613:

; 771  : 		}
; 772  : 	}
; 773  : 
; 774  : // draw axis
; 775  : 
; 776  : 	if (CurrentVisiBox)

	jmp	$L81611
$L81612:
	cmp	DWORD PTR ?CurrentVisiBox@@3PAUVISIBOX@@A, 0 ; CurrentVisiBox
	je	$L81632

; 777  : 	{
; 778  : 		ZBUFFER_OFF();

	movsx	eax, WORD PTR ?RenderZbuffer@@3FA	; RenderZbuffer
	test	eax, eax
	je	SHORT $L81633
	mov	WORD PTR ?RenderZbuffer@@3FA, 0		; RenderZbuffer
	movsx	eax, WORD PTR ?RenderZbuffer@@3FA	; RenderZbuffer
	push	eax
	push	7
	mov	ecx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	eax
	call	DWORD PTR [edx+88]
	mov	eax, DWORD PTR ?RenderStateChange@@3JA	; RenderStateChange
	add	eax, 1
	mov	DWORD PTR ?RenderStateChange@@3JA, eax	; RenderStateChange
$L81633:

; 779  : 		ALPHA_OFF();

	movsx	eax, WORD PTR ?RenderAlpha@@3FA		; RenderAlpha
	test	eax, eax
	je	SHORT $L81634
	mov	WORD PTR ?RenderAlpha@@3FA, 0		; RenderAlpha
	movsx	eax, WORD PTR ?RenderAlpha@@3FA		; RenderAlpha
	push	eax
	push	27					; 0000001bH
	mov	ecx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	eax
	call	DWORD PTR [edx+88]
	mov	eax, DWORD PTR ?RenderStateChange@@3JA	; RenderStateChange
	add	eax, 1
	mov	DWORD PTR ?RenderStateChange@@3JA, eax	; RenderStateChange
$L81634:

; 780  : 
; 781  : 		vec.v[X] = (CurrentVisiBox->xmin + CurrentVisiBox->xmax) / 2;

	mov	eax, DWORD PTR ?CurrentVisiBox@@3PAUVISIBOX@@A ; CurrentVisiBox
	mov	ecx, DWORD PTR ?CurrentVisiBox@@3PAUVISIBOX@@A ; CurrentVisiBox
	fld	DWORD PTR [eax+4]
	fadd	DWORD PTR [ecx+8]
	fdiv	DWORD PTR __real@40000000
	fstp	DWORD PTR _vec$[ebp]

; 782  : 		vec.v[Y] = (CurrentVisiBox->ymin + CurrentVisiBox->ymax) / 2;

	mov	eax, DWORD PTR ?CurrentVisiBox@@3PAUVISIBOX@@A ; CurrentVisiBox
	mov	ecx, DWORD PTR ?CurrentVisiBox@@3PAUVISIBOX@@A ; CurrentVisiBox
	fld	DWORD PTR [eax+12]
	fadd	DWORD PTR [ecx+16]
	fdiv	DWORD PTR __real@40000000
	fstp	DWORD PTR _vec$[ebp+4]

; 783  : 		vec.v[Z] = (CurrentVisiBox->zmin + CurrentVisiBox->zmax) / 2;

	mov	eax, DWORD PTR ?CurrentVisiBox@@3PAUVISIBOX@@A ; CurrentVisiBox
	mov	ecx, DWORD PTR ?CurrentVisiBox@@3PAUVISIBOX@@A ; CurrentVisiBox
	fld	DWORD PTR [eax+20]
	fadd	DWORD PTR [ecx+24]
	fdiv	DWORD PTR __real@40000000
	fstp	DWORD PTR _vec$[ebp+8]

; 784  : 
; 785  : 		if (VisiAxisType)

	movsx	eax, BYTE PTR _VisiAxisType
	test	eax, eax
	je	SHORT $L81635

; 786  : 			DrawAxis(&IdentityMatrix, &vec);

	lea	eax, DWORD PTR _vec$[ebp]
	push	eax
	push	OFFSET FLAT:?IdentityMatrix@@3TMatrixUnion@@A ; IdentityMatrix
	call	?DrawAxis@@YAXPATMatrixUnion@@PAUVectorStruct@@@Z ; DrawAxis
	add	esp, 8

; 787  : 		else

	jmp	SHORT $L81632
$L81635:

; 788  : 			DrawAxis(&CAM_MainCamera->WMatrix, &vec);

	lea	eax, DWORD PTR _vec$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	add	ecx, 16					; 00000010H
	push	ecx
	call	?DrawAxis@@YAXPATMatrixUnion@@PAUVectorStruct@@@Z ; DrawAxis
	add	esp, 8
$L81632:

; 789  : 	}
; 790  : 
; 791  : // reset render states
; 792  : 
; 793  : 	WIREFRAME_ON();

	mov	eax, DWORD PTR ?DxState@@3UDX_STATE@@A+4
	push	eax
	push	8
	mov	ecx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	eax
	call	DWORD PTR [edx+88]
	mov	eax, DWORD PTR ?RenderStateChange@@3JA	; RenderStateChange
	add	eax, 1
	mov	DWORD PTR ?RenderStateChange@@3JA, eax	; RenderStateChange

; 794  : 	ZBUFFER_ON();

	movsx	eax, WORD PTR ?RenderZbuffer@@3FA	; RenderZbuffer
	cmp	eax, 1
	je	SHORT $L81637
	mov	WORD PTR ?RenderZbuffer@@3FA, 1		; RenderZbuffer
	movsx	eax, WORD PTR ?RenderZbuffer@@3FA	; RenderZbuffer
	push	eax
	push	7
	mov	ecx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	eax
	call	DWORD PTR [edx+88]
	mov	eax, DWORD PTR ?RenderStateChange@@3JA	; RenderStateChange
	add	eax, 1
	mov	DWORD PTR ?RenderStateChange@@3JA, eax	; RenderStateChange
$L81637:

; 795  : 	ALPHA_OFF();

	movsx	eax, WORD PTR ?RenderAlpha@@3FA		; RenderAlpha
	test	eax, eax
	je	SHORT $L81589
	mov	WORD PTR ?RenderAlpha@@3FA, 0		; RenderAlpha
	movsx	eax, WORD PTR ?RenderAlpha@@3FA		; RenderAlpha
	push	eax
	push	27					; 0000001bH
	mov	ecx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	eax
	call	DWORD PTR [edx+88]
	mov	eax, DWORD PTR ?RenderStateChange@@3JA	; RenderStateChange
	add	eax, 1
	mov	DWORD PTR ?RenderStateChange@@3JA, eax	; RenderStateChange
$L81589:

; 796  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?DrawVisiBoxes@@YAXXZ ENDP				; DrawVisiBoxes
_TEXT	ENDS
EXTRN	__allshl:NEAR
EXTRN	?World@@3UWORLD@@A:BYTE				; World
_BSS	SEGMENT
_CamVisiBox DB	03e80H DUP (?)
	ALIGN	8

_CubeVisiBoxHeader DQ 040H DUP (?)
_CamVisiBoxCount DD 01H DUP (?)
; Function compile flags: /Odt /ZI
_BSS	ENDS
;	COMDAT ?SetPermVisiBoxes@@YAXXZ
_TEXT	SEGMENT
tv446 = -180						; size = 8
tv424 = -180						; size = 8
tv387 = -176						; size = 4
tv445 = -172						; size = 4
tv423 = -172						; size = 4
tv386 = -172						; size = 4
_vert$ = -104						; size = 4
_poly$ = -100						; size = 4
_cube$ = -96						; size = 4
_swap$ = -92						; size = 40
_cubevb$ = -52						; size = 4
_camvb$ = -48						; size = 4
_vb$ = -44						; size = 4
_zmax$ = -40						; size = 4
_zmin$ = -36						; size = 4
_ymax$ = -32						; size = 4
_ymin$ = -28						; size = 4
_xmax$ = -24						; size = 4
_xmin$ = -20						; size = 4
_l$ = -16						; size = 4
_k$ = -12						; size = 4
_j$ = -8						; size = 4
_i$ = -4						; size = 4
?SetPermVisiBoxes@@YAXXZ PROC NEAR			; SetPermVisiBoxes, COMDAT

; 804  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 180				; 000000b4H
	push	ebx
	push	esi
	push	edi

; 805  : 	long i, j, k, l;
; 806  : 	float xmin, xmax, ymin, ymax, zmin, zmax;
; 807  : 	VISIBOX *vb;
; 808  : 	PERM_VISIBOX *camvb, *cubevb, swap;
; 809  : 	CUBE_HEADER *cube;
; 810  : #ifdef _PC
; 811  : 	WORLD_POLY *poly;
; 812  : 	WORLD_VERTEX **vert;
; 813  : #endif
; 814  : // split into camera and cube lists
; 815  : 
; 816  : 	vb = VisiBox;

	mov	DWORD PTR _vb$[ebp], OFFSET FLAT:_VisiBox

; 817  : 	CamVisiBoxCount = 0;

	mov	DWORD PTR _CamVisiBoxCount, 0

; 818  : 	CubeVisiBoxCount = 0;

	mov	DWORD PTR ?CubeVisiBoxCount@@3JA, 0	; CubeVisiBoxCount

; 819  : 	camvb = CamVisiBox;

	mov	DWORD PTR _camvb$[ebp], OFFSET FLAT:_CamVisiBox

; 820  : 	cubevb = CubeVisiBox;

	mov	DWORD PTR _cubevb$[ebp], OFFSET FLAT:?CubeVisiBox@@3PAUPERM_VISIBOX@@A ; CubeVisiBox

; 821  : 
; 822  : 	for (i = 0 ; i < VISIBOX_MAX ; i++, vb++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $L81659
$L81660:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	mov	ecx, DWORD PTR _vb$[ebp]
	add	ecx, 28					; 0000001cH
	mov	DWORD PTR _vb$[ebp], ecx
$L81659:
	cmp	DWORD PTR _i$[ebp], 400			; 00000190H
	jge	$L81661

; 823  : 	{
; 824  : 		if (vb->Flag & VISIBOX_CAMERA)

	mov	eax, DWORD PTR _vb$[ebp]
	movsx	ecx, BYTE PTR [eax]
	and	ecx, 1
	je	$L81662

; 825  : 		{
; 826  : 			camvb->ID = vb->ID;

	mov	eax, DWORD PTR _vb$[ebp]
	movsx	ecx, BYTE PTR [eax+1]
	mov	edx, DWORD PTR _camvb$[ebp]
	mov	DWORD PTR [edx+8], ecx

; 827  : 			camvb->Mask = (VISIMASK)1 << camvb->ID;

	mov	ecx, DWORD PTR _camvb$[ebp]
	mov	eax, 1
	xor	edx, edx
	mov	ecx, DWORD PTR [ecx+8]
	call	__allshl
	mov	ecx, DWORD PTR _camvb$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], edx

; 828  : 			camvb->xmin = vb->xmin;

	mov	eax, DWORD PTR _camvb$[ebp]
	mov	ecx, DWORD PTR _vb$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+12], edx

; 829  : 			camvb->xmax = vb->xmax;

	mov	eax, DWORD PTR _camvb$[ebp]
	mov	ecx, DWORD PTR _vb$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+16], edx

; 830  : 			camvb->ymin = vb->ymin;

	mov	eax, DWORD PTR _camvb$[ebp]
	mov	ecx, DWORD PTR _vb$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+20], edx

; 831  : 			camvb->ymax = vb->ymax;

	mov	eax, DWORD PTR _camvb$[ebp]
	mov	ecx, DWORD PTR _vb$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+24], edx

; 832  : 			camvb->zmin = vb->zmin;

	mov	eax, DWORD PTR _camvb$[ebp]
	mov	ecx, DWORD PTR _vb$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR [eax+28], edx

; 833  : 			camvb->zmax = vb->zmax;

	mov	eax, DWORD PTR _camvb$[ebp]
	mov	ecx, DWORD PTR _vb$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR [eax+32], edx

; 834  : 
; 835  : 			CamVisiBoxCount++;

	mov	eax, DWORD PTR _CamVisiBoxCount
	add	eax, 1
	mov	DWORD PTR _CamVisiBoxCount, eax

; 836  : 			camvb++;

	mov	eax, DWORD PTR _camvb$[ebp]
	add	eax, 40					; 00000028H
	mov	DWORD PTR _camvb$[ebp], eax
$L81662:

; 837  : 		}
; 838  : 		if (vb->Flag & VISIBOX_CUBE)

	mov	eax, DWORD PTR _vb$[ebp]
	movsx	ecx, BYTE PTR [eax]
	and	ecx, 2
	je	$L81664

; 839  : 		{
; 840  : 			cubevb->ID = vb->ID;

	mov	eax, DWORD PTR _vb$[ebp]
	movsx	ecx, BYTE PTR [eax+1]
	mov	edx, DWORD PTR _cubevb$[ebp]
	mov	DWORD PTR [edx+8], ecx

; 841  : 			cubevb->Mask = (VISIMASK)1 << cubevb->ID;

	mov	ecx, DWORD PTR _cubevb$[ebp]
	mov	eax, 1
	xor	edx, edx
	mov	ecx, DWORD PTR [ecx+8]
	call	__allshl
	mov	ecx, DWORD PTR _cubevb$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], edx

; 842  : 			cubevb->xmin = vb->xmin;

	mov	eax, DWORD PTR _cubevb$[ebp]
	mov	ecx, DWORD PTR _vb$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+12], edx

; 843  : 			cubevb->xmax = vb->xmax;

	mov	eax, DWORD PTR _cubevb$[ebp]
	mov	ecx, DWORD PTR _vb$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+16], edx

; 844  : 			cubevb->ymin = vb->ymin;

	mov	eax, DWORD PTR _cubevb$[ebp]
	mov	ecx, DWORD PTR _vb$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+20], edx

; 845  : 			cubevb->ymax = vb->ymax;

	mov	eax, DWORD PTR _cubevb$[ebp]
	mov	ecx, DWORD PTR _vb$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+24], edx

; 846  : 			cubevb->zmin = vb->zmin;

	mov	eax, DWORD PTR _cubevb$[ebp]
	mov	ecx, DWORD PTR _vb$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR [eax+28], edx

; 847  : 			cubevb->zmax = vb->zmax;

	mov	eax, DWORD PTR _cubevb$[ebp]
	mov	ecx, DWORD PTR _vb$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR [eax+32], edx

; 848  : 
; 849  : 			CubeVisiBoxCount++;

	mov	eax, DWORD PTR ?CubeVisiBoxCount@@3JA	; CubeVisiBoxCount
	add	eax, 1
	mov	DWORD PTR ?CubeVisiBoxCount@@3JA, eax	; CubeVisiBoxCount

; 850  : 			cubevb++;

	mov	eax, DWORD PTR _cubevb$[ebp]
	add	eax, 40					; 00000028H
	mov	DWORD PTR _cubevb$[ebp], eax
$L81664:

; 851  : 		}
; 852  : 	}

	jmp	$L81660
$L81661:

; 853  : 
; 854  : // sort cube visibox list into mask order
; 855  : 
; 856  : 	if (CubeVisiBoxCount > 1)

	cmp	DWORD PTR ?CubeVisiBoxCount@@3JA, 1	; CubeVisiBoxCount
	jle	$L81666

; 857  : 	{
; 858  : 		for (i = CubeVisiBoxCount - 1 ; i ; i--) for (j = 0 ; j < i ; j++)

	mov	eax, DWORD PTR ?CubeVisiBoxCount@@3JA	; CubeVisiBoxCount
	sub	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	jmp	SHORT $L81667
$L81668:
	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$L81667:
	cmp	DWORD PTR _i$[ebp], 0
	je	$L81666
	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $L81670
$L81671:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$L81670:
	mov	eax, DWORD PTR _j$[ebp]
	cmp	eax, DWORD PTR _i$[ebp]
	jge	$L81672

; 859  : 		{
; 860  : 			if (CubeVisiBox[j].Mask > CubeVisiBox[j + 1].Mask)

	mov	eax, DWORD PTR _j$[ebp]
	imul	eax, 40					; 00000028H
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	imul	ecx, 40					; 00000028H
	mov	DWORD PTR tv386[ebp], eax
	mov	DWORD PTR tv387[ebp], ecx
	mov	edx, DWORD PTR tv386[ebp]
	mov	eax, DWORD PTR tv387[ebp]
	mov	ecx, DWORD PTR ?CubeVisiBox@@3PAUPERM_VISIBOX@@A[edx+4]
	cmp	ecx, DWORD PTR ?CubeVisiBox@@3PAUPERM_VISIBOX@@A[eax+4]
	jb	SHORT $L81673
	ja	SHORT $L81927
	mov	edx, DWORD PTR tv386[ebp]
	mov	eax, DWORD PTR tv387[ebp]
	mov	ecx, DWORD PTR ?CubeVisiBox@@3PAUPERM_VISIBOX@@A[edx]
	cmp	ecx, DWORD PTR ?CubeVisiBox@@3PAUPERM_VISIBOX@@A[eax]
	jbe	SHORT $L81673
$L81927:

; 861  : 			{
; 862  : 				swap = CubeVisiBox[j];

	mov	esi, DWORD PTR _j$[ebp]
	imul	esi, 40					; 00000028H
	add	esi, OFFSET FLAT:?CubeVisiBox@@3PAUPERM_VISIBOX@@A ; CubeVisiBox
	mov	ecx, 10					; 0000000aH
	lea	edi, DWORD PTR _swap$[ebp]
	rep movsd

; 863  : 				CubeVisiBox[j] = CubeVisiBox[j + 1];

	mov	esi, DWORD PTR _j$[ebp]
	add	esi, 1
	imul	esi, 40					; 00000028H
	add	esi, OFFSET FLAT:?CubeVisiBox@@3PAUPERM_VISIBOX@@A ; CubeVisiBox
	mov	edi, DWORD PTR _j$[ebp]
	imul	edi, 40					; 00000028H
	add	edi, OFFSET FLAT:?CubeVisiBox@@3PAUPERM_VISIBOX@@A ; CubeVisiBox
	mov	ecx, 10					; 0000000aH
	rep movsd

; 864  : 				CubeVisiBox[j + 1] = swap;

	mov	edi, DWORD PTR _j$[ebp]
	add	edi, 1
	imul	edi, 40					; 00000028H
	add	edi, OFFSET FLAT:?CubeVisiBox@@3PAUPERM_VISIBOX@@A ; CubeVisiBox
	mov	ecx, 10					; 0000000aH
	lea	esi, DWORD PTR _swap$[ebp]
	rep movsd
$L81673:

; 865  : 			}
; 866  : 		}

	jmp	$L81671
$L81672:
	jmp	$L81668
$L81666:

; 867  : 	}
; 868  : 
; 869  : // setup cube visibox headers
; 870  : 
; 871  : 	for (i = 0 ; i < VISIBOX_MAX_ID ; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $L81674
$L81675:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$L81674:
	cmp	DWORD PTR _i$[ebp], 64			; 00000040H
	jge	$L81676

; 872  : 	{
; 873  : 		CubeVisiBoxHeader[i].Count = 0;

	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR _CubeVisiBoxHeader[eax*8], 0

; 874  : 		for (j = 0 ; j < CubeVisiBoxCount ; j++)

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $L81677
$L81678:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$L81677:
	mov	eax, DWORD PTR _j$[ebp]
	cmp	eax, DWORD PTR ?CubeVisiBoxCount@@3JA	; CubeVisiBoxCount
	jge	$L81679

; 875  : 		{
; 876  : 			if (CubeVisiBox[j].Mask == ((VISIMASK)1 << i))

	mov	esi, DWORD PTR _j$[ebp]
	imul	esi, 40					; 00000028H
	mov	eax, 1
	xor	edx, edx
	mov	ecx, DWORD PTR _i$[ebp]
	call	__allshl
	mov	DWORD PTR tv423[ebp], esi
	mov	DWORD PTR tv424[ebp], eax
	mov	DWORD PTR tv424[ebp+4], edx
	mov	eax, DWORD PTR tv423[ebp]
	mov	ecx, DWORD PTR ?CubeVisiBox@@3PAUPERM_VISIBOX@@A[eax]
	cmp	ecx, DWORD PTR tv424[ebp]
	jne	$L81681
	mov	edx, DWORD PTR tv423[ebp]
	mov	eax, DWORD PTR ?CubeVisiBox@@3PAUPERM_VISIBOX@@A[edx+4]
	cmp	eax, DWORD PTR tv424[ebp+4]
	jne	$L81681

; 877  : 			{
; 878  : 				CubeVisiBoxHeader[i].VisiBoxes = &CubeVisiBox[j];

	mov	eax, DWORD PTR _j$[ebp]
	imul	eax, 40					; 00000028H
	add	eax, OFFSET FLAT:?CubeVisiBox@@3PAUPERM_VISIBOX@@A ; CubeVisiBox
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR _CubeVisiBoxHeader[ecx*8+4], eax
$L81683:

; 879  : 				while (j < CubeVisiBoxCount && CubeVisiBox[j].Mask == ((VISIMASK)1 << i))

	mov	eax, DWORD PTR _j$[ebp]
	cmp	eax, DWORD PTR ?CubeVisiBoxCount@@3JA	; CubeVisiBoxCount
	jge	SHORT $L81684
	mov	esi, DWORD PTR _j$[ebp]
	imul	esi, 40					; 00000028H
	mov	eax, 1
	xor	edx, edx
	mov	ecx, DWORD PTR _i$[ebp]
	call	__allshl
	mov	DWORD PTR tv445[ebp], esi
	mov	DWORD PTR tv446[ebp], eax
	mov	DWORD PTR tv446[ebp+4], edx
	mov	eax, DWORD PTR tv445[ebp]
	mov	ecx, DWORD PTR ?CubeVisiBox@@3PAUPERM_VISIBOX@@A[eax]
	cmp	ecx, DWORD PTR tv446[ebp]
	jne	SHORT $L81684
	mov	edx, DWORD PTR tv445[ebp]
	mov	eax, DWORD PTR ?CubeVisiBox@@3PAUPERM_VISIBOX@@A[edx+4]
	cmp	eax, DWORD PTR tv446[ebp+4]
	jne	SHORT $L81684

; 880  : 				{
; 881  : 					j++;

	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax

; 882  : 					CubeVisiBoxHeader[i].Count++;

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _CubeVisiBoxHeader[eax*8]
	add	ecx, 1
	mov	edx, DWORD PTR _i$[ebp]
	mov	DWORD PTR _CubeVisiBoxHeader[edx*8], ecx

; 883  : 				}

	jmp	SHORT $L81683
$L81684:

; 884  : 				break;

	jmp	SHORT $L81679
$L81681:

; 885  : 			}
; 886  : 		}

	jmp	$L81678
$L81679:

; 887  : 	}

	jmp	$L81675
$L81676:

; 888  : 
; 889  : // loop thru all world cubes setting bit masks
; 890  : 
; 891  : #ifndef _N64
; 892  : 	cube = World.Cube;

	mov	eax, DWORD PTR ?World@@3UWORLD@@A+8
	mov	DWORD PTR _cube$[ebp], eax

; 893  : 	for (i = 0 ; i < World.CubeNum ; i++, cube++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $L81686
$L81687:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	mov	ecx, DWORD PTR _cube$[ebp]
	add	ecx, 128				; 00000080H
	mov	DWORD PTR _cube$[ebp], ecx
$L81686:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR ?World@@3UWORLD@@A
	jge	$L81641

; 894  : #else
; 895  : 	cube = World->Cube;
; 896  : 	for (i = 0 ; i < World->CubeNum ; i++, cube++)
; 897  : #endif
; 898  : 	{
; 899  : 
; 900  : // clear cube and poly bit masks
; 901  : 
; 902  : 		cube->VisiMask = 0;

	mov	eax, DWORD PTR _cube$[ebp]
	mov	DWORD PTR [eax+40], 0
	mov	DWORD PTR [eax+44], 0

; 903  : 
; 904  : #ifdef _PC
; 905  : 		poly = cube->Model.PolyPtr;

	mov	eax, DWORD PTR _cube$[ebp]
	mov	ecx, DWORD PTR [eax+100]
	mov	DWORD PTR _poly$[ebp], ecx

; 906  : 		for (j = 0 ; j < cube->Model.PolyNum ; j++, poly++) poly->VisiMask = 0;

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $L81689
$L81690:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
	mov	ecx, DWORD PTR _poly$[ebp]
	add	ecx, 80					; 00000050H
	mov	DWORD PTR _poly$[ebp], ecx
$L81689:
	mov	eax, DWORD PTR _cube$[ebp]
	movsx	ecx, WORD PTR [eax+72]
	cmp	DWORD PTR _j$[ebp], ecx
	jge	SHORT $L81691
	mov	eax, DWORD PTR _poly$[ebp]
	mov	DWORD PTR [eax+8], 0
	mov	DWORD PTR [eax+12], 0
	jmp	SHORT $L81690
$L81691:

; 907  : #endif
; 908  : // loop thru all cube visiboxes
; 909  : 
; 910  : 		cubevb = CubeVisiBox;

	mov	DWORD PTR _cubevb$[ebp], OFFSET FLAT:?CubeVisiBox@@3PAUPERM_VISIBOX@@A ; CubeVisiBox

; 911  : 		for (j = 0 ; j < CubeVisiBoxCount ; j++, cubevb++)

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $L81692
$L81693:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
	mov	ecx, DWORD PTR _cubevb$[ebp]
	add	ecx, 40					; 00000028H
	mov	DWORD PTR _cubevb$[ebp], ecx
$L81692:
	mov	eax, DWORD PTR _j$[ebp]
	cmp	eax, DWORD PTR ?CubeVisiBoxCount@@3JA	; CubeVisiBoxCount
	jge	$L81694

; 912  : 		{
; 913  : 
; 914  : // set cube mask if cube fully inside visibox
; 915  : 
; 916  : 			if (cube->Xmin >= cubevb->xmin && cube->Xmax <= cubevb->xmax &&
; 917  : 				cube->Ymin >= cubevb->ymin && cube->Ymax <= cubevb->ymax &&
; 918  : 				cube->Zmin >= cubevb->zmin && cube->Zmax <= cubevb->zmax)

	mov	eax, DWORD PTR _cube$[ebp]
	mov	ecx, DWORD PTR _cubevb$[ebp]
	fld	DWORD PTR [eax+16]
	fcomp	DWORD PTR [ecx+12]
	fnstsw	ax
	test	ah, 1
	jne	SHORT $L81695
	mov	eax, DWORD PTR _cube$[ebp]
	mov	ecx, DWORD PTR _cubevb$[ebp]
	fld	DWORD PTR [eax+20]
	fcomp	DWORD PTR [ecx+16]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jp	SHORT $L81695
	mov	eax, DWORD PTR _cube$[ebp]
	mov	ecx, DWORD PTR _cubevb$[ebp]
	fld	DWORD PTR [eax+24]
	fcomp	DWORD PTR [ecx+20]
	fnstsw	ax
	test	ah, 1
	jne	SHORT $L81695
	mov	eax, DWORD PTR _cube$[ebp]
	mov	ecx, DWORD PTR _cubevb$[ebp]
	fld	DWORD PTR [eax+28]
	fcomp	DWORD PTR [ecx+24]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jp	SHORT $L81695
	mov	eax, DWORD PTR _cube$[ebp]
	mov	ecx, DWORD PTR _cubevb$[ebp]
	fld	DWORD PTR [eax+32]
	fcomp	DWORD PTR [ecx+28]
	fnstsw	ax
	test	ah, 1
	jne	SHORT $L81695
	mov	eax, DWORD PTR _cube$[ebp]
	mov	ecx, DWORD PTR _cubevb$[ebp]
	fld	DWORD PTR [eax+36]
	fcomp	DWORD PTR [ecx+32]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jp	SHORT $L81695

; 919  : 			{
; 920  : 				cube->VisiMask |= cubevb->Mask;

	mov	eax, DWORD PTR _cube$[ebp]
	mov	ecx, DWORD PTR _cubevb$[ebp]
	mov	edx, DWORD PTR [eax+40]
	or	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax+44]
	or	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _cube$[ebp]
	mov	DWORD PTR [ecx+40], edx
	mov	DWORD PTR [ecx+44], eax

; 921  : 			}
; 922  : 
; 923  : #ifdef _PC
; 924  : // else set poly masks if cube partially inside visibox
; 925  : 
; 926  : 			else if (VisiPerPoly && cube->Xmax >= cubevb->xmin && cube->Xmin <= cubevb->xmax &&

	jmp	$L81696
$L81695:

; 927  : 				cube->Ymax >= cubevb->ymin && cube->Ymin <= cubevb->ymax &&
; 928  : 				cube->Zmax >= cubevb->zmin && cube->Zmin <= cubevb->zmax)

	cmp	DWORD PTR ?VisiPerPoly@@3JA, 0		; VisiPerPoly
	je	$L81696
	mov	eax, DWORD PTR _cube$[ebp]
	mov	ecx, DWORD PTR _cubevb$[ebp]
	fld	DWORD PTR [eax+20]
	fcomp	DWORD PTR [ecx+12]
	fnstsw	ax
	test	ah, 1
	jne	$L81696
	mov	eax, DWORD PTR _cube$[ebp]
	mov	ecx, DWORD PTR _cubevb$[ebp]
	fld	DWORD PTR [eax+16]
	fcomp	DWORD PTR [ecx+16]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jp	$L81696
	mov	eax, DWORD PTR _cube$[ebp]
	mov	ecx, DWORD PTR _cubevb$[ebp]
	fld	DWORD PTR [eax+28]
	fcomp	DWORD PTR [ecx+20]
	fnstsw	ax
	test	ah, 1
	jne	$L81696
	mov	eax, DWORD PTR _cube$[ebp]
	mov	ecx, DWORD PTR _cubevb$[ebp]
	fld	DWORD PTR [eax+24]
	fcomp	DWORD PTR [ecx+24]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jp	$L81696
	mov	eax, DWORD PTR _cube$[ebp]
	mov	ecx, DWORD PTR _cubevb$[ebp]
	fld	DWORD PTR [eax+36]
	fcomp	DWORD PTR [ecx+28]
	fnstsw	ax
	test	ah, 1
	jne	$L81696
	mov	eax, DWORD PTR _cube$[ebp]
	mov	ecx, DWORD PTR _cubevb$[ebp]
	fld	DWORD PTR [eax+32]
	fcomp	DWORD PTR [ecx+32]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jp	$L81696

; 929  : 			{
; 930  : 				poly = cube->Model.PolyPtr;

	mov	eax, DWORD PTR _cube$[ebp]
	mov	ecx, DWORD PTR [eax+100]
	mov	DWORD PTR _poly$[ebp], ecx

; 931  : 				for (k = 0 ; k < cube->Model.PolyNum ; k++, poly++)

	mov	DWORD PTR _k$[ebp], 0
	jmp	SHORT $L81698
$L81699:
	mov	eax, DWORD PTR _k$[ebp]
	add	eax, 1
	mov	DWORD PTR _k$[ebp], eax
	mov	ecx, DWORD PTR _poly$[ebp]
	add	ecx, 80					; 00000050H
	mov	DWORD PTR _poly$[ebp], ecx
$L81698:
	mov	eax, DWORD PTR _cube$[ebp]
	movsx	ecx, WORD PTR [eax+72]
	cmp	DWORD PTR _k$[ebp], ecx
	jge	$L81696

; 932  : 				{
; 933  : 					xmin = ymin = zmin = 999999;

	mov	DWORD PTR _zmin$[ebp], 1232348144	; 497423f0H
	mov	eax, DWORD PTR _zmin$[ebp]
	mov	DWORD PTR _ymin$[ebp], eax
	mov	ecx, DWORD PTR _ymin$[ebp]
	mov	DWORD PTR _xmin$[ebp], ecx

; 934  : 					xmax = ymax = zmax = -999999;

	mov	DWORD PTR _zmax$[ebp], -915135504	; c97423f0H
	mov	eax, DWORD PTR _zmax$[ebp]
	mov	DWORD PTR _ymax$[ebp], eax
	mov	ecx, DWORD PTR _ymax$[ebp]
	mov	DWORD PTR _xmax$[ebp], ecx

; 935  : 					vert = &poly->v0;

	mov	eax, DWORD PTR _poly$[ebp]
	add	eax, 64					; 00000040H
	mov	DWORD PTR _vert$[ebp], eax

; 936  : 
; 937  : 					for (l = 0 ; l < 3 + (poly->Type & 1) ; l++, vert++)

	mov	DWORD PTR _l$[ebp], 0
	jmp	SHORT $L81701
$L81702:
	mov	eax, DWORD PTR _l$[ebp]
	add	eax, 1
	mov	DWORD PTR _l$[ebp], eax
	mov	ecx, DWORD PTR _vert$[ebp]
	add	ecx, 4
	mov	DWORD PTR _vert$[ebp], ecx
$L81701:
	mov	eax, DWORD PTR _poly$[ebp]
	movsx	ecx, WORD PTR [eax]
	and	ecx, 1
	add	ecx, 3
	cmp	DWORD PTR _l$[ebp], ecx
	jge	$L81703

; 938  : 					{
; 939  : 						if ((*vert)->x < xmin) xmin = (*vert)->x;

	mov	eax, DWORD PTR _vert$[ebp]
	mov	ecx, DWORD PTR [eax]
	fld	DWORD PTR [ecx]
	fcomp	DWORD PTR _xmin$[ebp]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L81704
	mov	eax, DWORD PTR _vert$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _xmin$[ebp], edx
$L81704:

; 940  : 						if ((*vert)->x > xmax) xmax = (*vert)->x;

	mov	eax, DWORD PTR _vert$[ebp]
	mov	ecx, DWORD PTR [eax]
	fld	DWORD PTR [ecx]
	fcomp	DWORD PTR _xmax$[ebp]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $L81705
	mov	eax, DWORD PTR _vert$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _xmax$[ebp], edx
$L81705:

; 941  : 						if ((*vert)->y < ymin) ymin = (*vert)->y;

	mov	eax, DWORD PTR _vert$[ebp]
	mov	ecx, DWORD PTR [eax]
	fld	DWORD PTR [ecx+4]
	fcomp	DWORD PTR _ymin$[ebp]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L81706
	mov	eax, DWORD PTR _vert$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR _ymin$[ebp], edx
$L81706:

; 942  : 						if ((*vert)->y > ymax) ymax = (*vert)->y;

	mov	eax, DWORD PTR _vert$[ebp]
	mov	ecx, DWORD PTR [eax]
	fld	DWORD PTR [ecx+4]
	fcomp	DWORD PTR _ymax$[ebp]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $L81707
	mov	eax, DWORD PTR _vert$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR _ymax$[ebp], edx
$L81707:

; 943  : 						if ((*vert)->z < zmin) zmin = (*vert)->z;

	mov	eax, DWORD PTR _vert$[ebp]
	mov	ecx, DWORD PTR [eax]
	fld	DWORD PTR [ecx+8]
	fcomp	DWORD PTR _zmin$[ebp]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L81708
	mov	eax, DWORD PTR _vert$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _zmin$[ebp], edx
$L81708:

; 944  : 						if ((*vert)->z > zmax) zmax = (*vert)->z;

	mov	eax, DWORD PTR _vert$[ebp]
	mov	ecx, DWORD PTR [eax]
	fld	DWORD PTR [ecx+8]
	fcomp	DWORD PTR _zmax$[ebp]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $L81709
	mov	eax, DWORD PTR _vert$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _zmax$[ebp], edx
$L81709:

; 945  : 					}

	jmp	$L81702
$L81703:

; 946  : 
; 947  : 					if (xmin >= cubevb->xmin && xmax <= cubevb->xmax &&
; 948  : 						ymin >= cubevb->ymin && ymax <= cubevb->ymax &&
; 949  : 						zmin >= cubevb->zmin && zmax <= cubevb->zmax)

	mov	eax, DWORD PTR _cubevb$[ebp]
	fld	DWORD PTR _xmin$[ebp]
	fcomp	DWORD PTR [eax+12]
	fnstsw	ax
	test	ah, 1
	jne	SHORT $L81710
	mov	eax, DWORD PTR _cubevb$[ebp]
	fld	DWORD PTR _xmax$[ebp]
	fcomp	DWORD PTR [eax+16]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jp	SHORT $L81710
	mov	eax, DWORD PTR _cubevb$[ebp]
	fld	DWORD PTR _ymin$[ebp]
	fcomp	DWORD PTR [eax+20]
	fnstsw	ax
	test	ah, 1
	jne	SHORT $L81710
	mov	eax, DWORD PTR _cubevb$[ebp]
	fld	DWORD PTR _ymax$[ebp]
	fcomp	DWORD PTR [eax+24]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jp	SHORT $L81710
	mov	eax, DWORD PTR _cubevb$[ebp]
	fld	DWORD PTR _zmin$[ebp]
	fcomp	DWORD PTR [eax+28]
	fnstsw	ax
	test	ah, 1
	jne	SHORT $L81710
	mov	eax, DWORD PTR _cubevb$[ebp]
	fld	DWORD PTR _zmax$[ebp]
	fcomp	DWORD PTR [eax+32]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jp	SHORT $L81710

; 950  : 					{
; 951  : 						poly->VisiMask |= cubevb->Mask;

	mov	eax, DWORD PTR _poly$[ebp]
	mov	ecx, DWORD PTR _cubevb$[ebp]
	mov	edx, DWORD PTR [eax+8]
	or	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax+12]
	or	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _poly$[ebp]
	mov	DWORD PTR [ecx+8], edx
	mov	DWORD PTR [ecx+12], eax
$L81710:

; 952  : 					}
; 953  : 				}

	jmp	$L81699
$L81696:

; 954  : 			}
; 955  : #endif
; 956  : 		}

	jmp	$L81693
$L81694:

; 957  : 	}

	jmp	$L81687
$L81641:

; 958  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?SetPermVisiBoxes@@YAXXZ ENDP				; SetPermVisiBoxes
; Function compile flags: /Odt /ZI
_TEXT	ENDS
;	COMDAT ?SetObjectVisiMask@@YA_KPAUBoundingBoxStruct@@@Z
_TEXT	SEGMENT
_mask$ = -12						; size = 8
_i$ = -4						; size = 4
_box$ = 8						; size = 4
?SetObjectVisiMask@@YA_KPAUBoundingBoxStruct@@@Z PROC NEAR ; SetObjectVisiMask, COMDAT

; 965  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi

; 966  : 	long i;
; 967  : 	VISIMASK mask = 0;

	mov	DWORD PTR _mask$[ebp], 0
	mov	DWORD PTR _mask$[ebp+4], 0

; 968  : 
; 969  : 	for (i = 0 ; i < CubeVisiBoxCount ; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $L81716
$L81717:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$L81716:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR ?CubeVisiBoxCount@@3JA	; CubeVisiBoxCount
	jge	$L81718

; 970  : 	{
; 971  : 		if (box->Xmin < CubeVisiBox[i].xmin || box->Xmax > CubeVisiBox[i].xmax ||
; 972  : 			box->Ymin < CubeVisiBox[i].ymin || box->Ymax > CubeVisiBox[i].ymax ||
; 973  : 			box->Zmin < CubeVisiBox[i].zmin || box->Zmax > CubeVisiBox[i].zmax)

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 40					; 00000028H
	mov	ecx, DWORD PTR _box$[ebp]
	fld	DWORD PTR [ecx]
	fcomp	DWORD PTR ?CubeVisiBox@@3PAUPERM_VISIBOX@@A[eax+12]
	fnstsw	ax
	test	ah, 5
	jnp	SHORT $L81720
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 40					; 00000028H
	mov	ecx, DWORD PTR _box$[ebp]
	fld	DWORD PTR [ecx+4]
	fcomp	DWORD PTR ?CubeVisiBox@@3PAUPERM_VISIBOX@@A[eax+16]
	fnstsw	ax
	test	ah, 65					; 00000041H
	je	SHORT $L81720
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 40					; 00000028H
	mov	ecx, DWORD PTR _box$[ebp]
	fld	DWORD PTR [ecx+8]
	fcomp	DWORD PTR ?CubeVisiBox@@3PAUPERM_VISIBOX@@A[eax+20]
	fnstsw	ax
	test	ah, 5
	jnp	SHORT $L81720
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 40					; 00000028H
	mov	ecx, DWORD PTR _box$[ebp]
	fld	DWORD PTR [ecx+12]
	fcomp	DWORD PTR ?CubeVisiBox@@3PAUPERM_VISIBOX@@A[eax+24]
	fnstsw	ax
	test	ah, 65					; 00000041H
	je	SHORT $L81720
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 40					; 00000028H
	mov	ecx, DWORD PTR _box$[ebp]
	fld	DWORD PTR [ecx+16]
	fcomp	DWORD PTR ?CubeVisiBox@@3PAUPERM_VISIBOX@@A[eax+28]
	fnstsw	ax
	test	ah, 5
	jnp	SHORT $L81720
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 40					; 00000028H
	mov	ecx, DWORD PTR _box$[ebp]
	fld	DWORD PTR [ecx+20]
	fcomp	DWORD PTR ?CubeVisiBox@@3PAUPERM_VISIBOX@@A[eax+32]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $L81719
$L81720:

; 974  : 				continue;

	jmp	$L81717
$L81719:

; 975  : 
; 976  : 		mask |= CubeVisiBox[i].Mask;

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 40					; 00000028H
	mov	ecx, DWORD PTR _mask$[ebp]
	or	ecx, DWORD PTR ?CubeVisiBox@@3PAUPERM_VISIBOX@@A[eax]
	mov	edx, DWORD PTR _mask$[ebp+4]
	or	edx, DWORD PTR ?CubeVisiBox@@3PAUPERM_VISIBOX@@A[eax+4]
	mov	DWORD PTR _mask$[ebp], ecx
	mov	DWORD PTR _mask$[ebp+4], edx

; 977  : 	}

	jmp	$L81717
$L81718:

; 978  : 	return mask;

	mov	eax, DWORD PTR _mask$[ebp]
	mov	edx, DWORD PTR _mask$[ebp+4]

; 979  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?SetObjectVisiMask@@YA_KPAUBoundingBoxStruct@@@Z ENDP	; SetObjectVisiMask
_TEXT	ENDS
PUBLIC	?TestObjectVisiboxes@@YADPAUBoundingBoxStruct@@@Z ; TestObjectVisiboxes
_BSS	SEGMENT
_TestVisiBox DD	0190H DUP (?)
_TestVisiBoxCount DD 01H DUP (?)
; Function compile flags: /Odt /ZI
_BSS	ENDS
;	COMDAT ?TestObjectVisiboxes@@YADPAUBoundingBoxStruct@@@Z
_TEXT	SEGMENT
_i$ = -4						; size = 4
_box$ = 8						; size = 4
?TestObjectVisiboxes@@YADPAUBoundingBoxStruct@@@Z PROC NEAR ; TestObjectVisiboxes, COMDAT

; 986  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 987  : 	long i;
; 988  : 
; 989  : // loop thru all test visiboxes
; 990  : 
; 991  : 	for (i = 0 ; i < TestVisiBoxCount ; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $L81725
$L81726:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$L81725:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _TestVisiBoxCount
	jge	$L81727

; 992  : 	{
; 993  : 		if (box->Xmin >= TestVisiBox[i]->xmin && box->Xmax <= TestVisiBox[i]->xmax &&
; 994  : 			box->Ymin >= TestVisiBox[i]->ymin && box->Ymax <= TestVisiBox[i]->ymax &&
; 995  : 			box->Zmin >= TestVisiBox[i]->zmin && box->Zmax <= TestVisiBox[i]->zmax)

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _TestVisiBox[eax*4]
	mov	edx, DWORD PTR _box$[ebp]
	fld	DWORD PTR [edx]
	fcomp	DWORD PTR [ecx+12]
	fnstsw	ax
	test	ah, 1
	jne	$L81728
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _TestVisiBox[eax*4]
	mov	edx, DWORD PTR _box$[ebp]
	fld	DWORD PTR [edx+4]
	fcomp	DWORD PTR [ecx+16]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jp	SHORT $L81728
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _TestVisiBox[eax*4]
	mov	edx, DWORD PTR _box$[ebp]
	fld	DWORD PTR [edx+8]
	fcomp	DWORD PTR [ecx+20]
	fnstsw	ax
	test	ah, 1
	jne	SHORT $L81728
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _TestVisiBox[eax*4]
	mov	edx, DWORD PTR _box$[ebp]
	fld	DWORD PTR [edx+12]
	fcomp	DWORD PTR [ecx+24]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jp	SHORT $L81728
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _TestVisiBox[eax*4]
	mov	edx, DWORD PTR _box$[ebp]
	fld	DWORD PTR [edx+16]
	fcomp	DWORD PTR [ecx+28]
	fnstsw	ax
	test	ah, 1
	jne	SHORT $L81728
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _TestVisiBox[eax*4]
	mov	edx, DWORD PTR _box$[ebp]
	fld	DWORD PTR [edx+20]
	fcomp	DWORD PTR [ecx+32]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jp	SHORT $L81728

; 996  : 				return TRUE;

	mov	al, 1
	jmp	SHORT $L81723
$L81728:

; 997  : 	}

	jmp	$L81726
$L81727:

; 998  : 
; 999  : // return OK
; 1000 : 
; 1001 : 	return FALSE;

	xor	al, al
$L81723:

; 1002 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?TestObjectVisiboxes@@YADPAUBoundingBoxStruct@@@Z ENDP	; TestObjectVisiboxes
_TEXT	ENDS
PUBLIC	?SetCameraVisiMask@@YAXPAUVectorStruct@@@Z	; SetCameraVisiMask
; Function compile flags: /Odt /ZI
;	COMDAT ?SetCameraVisiMask@@YAXPAUVectorStruct@@@Z
_TEXT	SEGMENT
_cvb$ = -12						; size = 4
_j$ = -8						; size = 4
_i$ = -4						; size = 4
_pos$ = 8						; size = 4
?SetCameraVisiMask@@YAXPAUVectorStruct@@@Z PROC NEAR	; SetCameraVisiMask, COMDAT

; 1009 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi

; 1010 : 	long i, j;
; 1011 : 	PERM_VISIBOX *cvb;
; 1012 : 
; 1013 : // quit if ForceID set
; 1014 : 
; 1015 : 	if (ForceID) return;

	movsx	eax, BYTE PTR _ForceID
	test	eax, eax
	je	SHORT $L81735
	jmp	$L81731
$L81735:

; 1016 : 
; 1017 : // loop thru camera visiboxes
; 1018 : 
; 1019 : 	TestVisiBoxCount = 0;

	mov	DWORD PTR _TestVisiBoxCount, 0

; 1020 : 	CamVisiMask = 0;

	mov	DWORD PTR ?CamVisiMask@@3_KA, 0
	mov	DWORD PTR ?CamVisiMask@@3_KA+4, 0

; 1021 : 	cvb = CamVisiBox;

	mov	DWORD PTR _cvb$[ebp], OFFSET FLAT:_CamVisiBox

; 1022 : 
; 1023 : 	for (i = 0 ; i < CamVisiBoxCount ; i++, cvb++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $L81736
$L81737:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	mov	ecx, DWORD PTR _cvb$[ebp]
	add	ecx, 40					; 00000028H
	mov	DWORD PTR _cvb$[ebp], ecx
$L81736:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _CamVisiBoxCount
	jge	$L81731

; 1024 : 	{
; 1025 : 
; 1026 : // camera inside this box?
; 1027 : 
; 1028 : 		if (pos->v[X] < cvb->xmin || pos->v[X] > cvb->xmax ||
; 1029 : 			pos->v[Y] < cvb->ymin || pos->v[Y] > cvb->ymax ||
; 1030 : 			pos->v[Z] < cvb->zmin || pos->v[Z] > cvb->zmax)

	mov	eax, DWORD PTR _pos$[ebp]
	mov	ecx, DWORD PTR _cvb$[ebp]
	fld	DWORD PTR [eax]
	fcomp	DWORD PTR [ecx+12]
	fnstsw	ax
	test	ah, 5
	jnp	SHORT $L81740
	mov	eax, DWORD PTR _pos$[ebp]
	mov	ecx, DWORD PTR _cvb$[ebp]
	fld	DWORD PTR [eax]
	fcomp	DWORD PTR [ecx+16]
	fnstsw	ax
	test	ah, 65					; 00000041H
	je	SHORT $L81740
	mov	eax, DWORD PTR _pos$[ebp]
	mov	ecx, DWORD PTR _cvb$[ebp]
	fld	DWORD PTR [eax+4]
	fcomp	DWORD PTR [ecx+20]
	fnstsw	ax
	test	ah, 5
	jnp	SHORT $L81740
	mov	eax, DWORD PTR _pos$[ebp]
	mov	ecx, DWORD PTR _cvb$[ebp]
	fld	DWORD PTR [eax+4]
	fcomp	DWORD PTR [ecx+24]
	fnstsw	ax
	test	ah, 65					; 00000041H
	je	SHORT $L81740
	mov	eax, DWORD PTR _pos$[ebp]
	mov	ecx, DWORD PTR _cvb$[ebp]
	fld	DWORD PTR [eax+8]
	fcomp	DWORD PTR [ecx+28]
	fnstsw	ax
	test	ah, 5
	jnp	SHORT $L81740
	mov	eax, DWORD PTR _pos$[ebp]
	mov	ecx, DWORD PTR _cvb$[ebp]
	fld	DWORD PTR [eax+8]
	fcomp	DWORD PTR [ecx+32]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $L81739
$L81740:

; 1031 : 				continue;

	jmp	$L81737
$L81739:

; 1032 : 
; 1033 : // yep, add mask
; 1034 : 
; 1035 : 		CamVisiMask |= cvb->Mask;

	mov	eax, DWORD PTR _cvb$[ebp]
	mov	ecx, DWORD PTR ?CamVisiMask@@3_KA
	or	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?CamVisiMask@@3_KA+4
	or	edx, DWORD PTR [eax+4]
	mov	DWORD PTR ?CamVisiMask@@3_KA, ecx
	mov	DWORD PTR ?CamVisiMask@@3_KA+4, edx

; 1036 : 
; 1037 : // add cube visiboxes to test list
; 1038 : 
; 1039 : 		for (j = 0 ; j < CubeVisiBoxHeader[cvb->ID].Count ; j++)

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $L81741
$L81742:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$L81741:
	mov	eax, DWORD PTR _cvb$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _j$[ebp]
	cmp	edx, DWORD PTR _CubeVisiBoxHeader[ecx*8]
	jge	SHORT $L81743

; 1040 : 		{
; 1041 : 			TestVisiBox[TestVisiBoxCount] = &CubeVisiBoxHeader[cvb->ID].VisiBoxes[j];

	mov	eax, DWORD PTR _cvb$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _j$[ebp]
	imul	edx, 40					; 00000028H
	add	edx, DWORD PTR _CubeVisiBoxHeader[ecx*8+4]
	mov	eax, DWORD PTR _TestVisiBoxCount
	mov	DWORD PTR _TestVisiBox[eax*4], edx

; 1042 : 			TestVisiBoxCount++;

	mov	eax, DWORD PTR _TestVisiBoxCount
	add	eax, 1
	mov	DWORD PTR _TestVisiBoxCount, eax

; 1043 : 		}

	jmp	SHORT $L81742
$L81743:

; 1044 : 	}

	jmp	$L81737
$L81731:

; 1045 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?SetCameraVisiMask@@YAXPAUVectorStruct@@@Z ENDP		; SetCameraVisiMask
_TEXT	ENDS
END
