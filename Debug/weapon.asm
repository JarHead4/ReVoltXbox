; Listing generated by Microsoft (R) Optimizing Compiler Version 13.10.3077 

	TITLE	.\source\weapon.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT PARA USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_0IL@GBHCIHE@c?3?2documents?5and?5settings?2jarhea@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _IsEqualGUID
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _==
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _acosl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _asinl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _atanl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _atan2l
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _ceill
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _cosl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _coshl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _expl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _fabsl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _floorl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _fmodl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _frexpl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _ldexpl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _logl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _log10l
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _modfl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _powl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _sinl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _sinhl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _sqrtl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _tanl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _tanhl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _frexpf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _ldexpf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _acosf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _asinf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _atanf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _atan2f
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _ceilf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _cosf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _coshf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _expf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _fabsf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _floorf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _fmodf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _logf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _log10f
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _modff
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _powf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _sinf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _sinhf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _sqrtf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _tanf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _tanhf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?cos@@YAMM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?sin@@YAMM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?sqrt@@YAMM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ResetOilSlickList@@YAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?InitShockwave@@YAJPAUobject_def@@PAJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?InitFirework@@YAJPAUobject_def@@PAJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?InitPuttyBomb@@YAJPAUobject_def@@PAJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?InitWaterBomb@@YAJPAUobject_def@@PAJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?InitElectroPulse@@YAJPAUobject_def@@PAJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?InitOilSlick@@YAJPAUobject_def@@PAJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?InitOilSlickDropper@@YAJPAUobject_def@@PAJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?InitChromeBall@@YAJPAUobject_def@@PAJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?InitClone@@YAJPAUobject_def@@PAJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?InitTurbo@@YAJPAUobject_def@@PAJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?InitTurbo2@@YAJPAUobject_def@@PAJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?InitSpring@@YAJPAUobject_def@@PAJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?InitElectroZapped@@YAJPAUobject_def@@PAJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?InitBombGlow@@YAJPAUobject_def@@PAJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ShockwaveHandler@@YAXPAUobject_def@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?FireworkHandler@@YAXPAUobject_def@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?FireWorkMove@@YAXPAUobject_def@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?FireworkExplode@@YAXPAUobject_def@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?PuttyBombHandler@@YAXPAUobject_def@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?PuttyBombBang@@YAXPAUobject_def@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?PuttyBombMove@@YAXPAUobject_def@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?WaterBombHandler@@YAXPAUobject_def@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ElectroPulseHandler@@YAXPAUobject_def@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?OilSlickHandler@@YAXPAUobject_def@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?OilSlickDropperHandler@@YAXPAUobject_def@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ChromeBallHandler@@YAXPAUobject_def@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CloneHandler@@YAXPAUobject_def@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?TurboAIHandler@@YAXPAUobject_def@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?TurboMoveHandler@@YAXPAUobject_def@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Turbo2Handler@@YAXPAUobject_def@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SpringHandler@@YAXPAUobject_def@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ElectroZappedHandler@@YAXPAUobject_def@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?BombGlowHandler@@YAXPAUobject_def@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RenderShockwave@@YAXPAUobject_def@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ShockwaveWorldMeshFxChecker@@YAXPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ShockwaveModelMeshFxChecker@@YAXPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?PuttyBombWorldMeshFxChecker@@YAXPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?PuttyBombModelMeshFxChecker@@YAXPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RenderElectroPulse@@YAXPAUobject_def@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RenderOilSlick@@YAXPAUobject_def@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RenderChromeBall@@YAXPAUobject_def@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RenderElectroZapped@@YAXPAUobject_def@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RenderBombGlow@@YAXPAUobject_def@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RenderWaterBomb@@YAXPAUobject_def@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RenderPuttyBombBang@@YAXPAUobject_def@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?WeaponTarget@@YAPAUobject_def@@PAU1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Pow_int@N@@YANNH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Pow_int@H@@YAHHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Pow_int@M@@YAMMH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Pow_int@O@@YAOOH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?__LINE__Var@?1??WeaponTarget@@YAPAUobject_def@@PAU2@@Z@4JA
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??InitBombGlow@@YAJPAUobject_def@@PAJ@Z@4JA
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??InitElectroZapped@@YAJPAUobject_def@@PAJ@Z@4JA
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??InitChromeBall@@YAJPAUobject_def@@PAJ@Z@4JA
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??InitElectroPulse@@YAJPAUobject_def@@PAJ@Z@4JA
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??InitWaterBomb@@YAJPAUobject_def@@PAJ@Z@4JA
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??InitPuttyBomb@@YAJPAUobject_def@@PAJ@Z@4JA
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??InitShockwave@@YAJPAUobject_def@@PAJ@Z@4JA
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??WeaponSetupTest@@YAXPAUobject_def@@@Z@4JA@a19d6b45
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
sxdata	SEGMENT DWORD USE32 'SXDATA'
sxdata	ENDS
FLAT	GROUP _DATA, CONST, _BSS
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBCD
INCLUDELIB OLDNAMES

PUBLIC	?OilSlickCount@@3JA				; OilSlickCount
PUBLIC	?OilSlickList@@3PAUOILSLICK_LIST@@A		; OilSlickList
_BSS	SEGMENT
?OilSlickCount@@3JA DD 01H DUP (?)			; OilSlickCount
?OilSlickList@@3PAUOILSLICK_LIST@@A DB 0600H DUP (?)	; OilSlickList
_BSS	ENDS
_DATA	SEGMENT
_WaterBombVel DD 000000000r			; 0
	DD	0c4bb8000r			; -1500
	DD	044fa0000r			; 2000
_WaterBombOff DD 000000000r			; 0
	DD	0c2000000r			; -32
	DD	000000000r			; 0
_BombSmokeVel DD 000000000r			; 0
	DD	0c2a00000r			; -80
	DD	000000000r			; 0
_DATA	ENDS
PUBLIC	?ResetOilSlickList@@YAXXZ			; ResetOilSlickList
; Function compile flags: /Odt /ZI
; File c:\documents and settings\jarhead\desktop\shit to display my love for xbox revolt and fuck you borman-ness\revolt source\source\weapon.cpp
;	COMDAT ?ResetOilSlickList@@YAXXZ
_TEXT	SEGMENT
?ResetOilSlickList@@YAXXZ PROC NEAR			; ResetOilSlickList, COMDAT

; 50   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 51   : 	OilSlickCount = 0;

	mov	DWORD PTR ?OilSlickCount@@3JA, 0	; OilSlickCount

; 52   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?ResetOilSlickList@@YAXXZ ENDP				; ResetOilSlickList
_TEXT	ENDS
PUBLIC	??_C@_0IL@GBHCIHE@c?3?2documents?5and?5settings?2jarhea@ ; `string'
PUBLIC	?__LINE__Var@?1??InitShockwave@@YAJPAUobject_def@@PAJ@Z@4JA ; `InitShockwave'::`2'::__LINE__Var
PUBLIC	?sqrt@@YAMM@Z					; sqrt
PUBLIC	__real@45bb8000
PUBLIC	__real@c5bb8000
PUBLIC	__real@40000000
PUBLIC	__real@c63b8000
PUBLIC	__real@3f800000
PUBLIC	__real@47435000
PUBLIC	?InitShockwave@@YAJPAUobject_def@@PAJ@Z		; InitShockwave
PUBLIC	?ShockwaveHandler@@YAXPAUobject_def@@@Z		; ShockwaveHandler
PUBLIC	?RenderShockwave@@YAXPAUobject_def@@@Z		; RenderShockwave
EXTRN	?CreateSfx3D@@YAPAUSAMPLE_3D@@JJJJPAUVectorStruct@@@Z:NEAR ; CreateSfx3D
EXTRN	?RotTransVector@@YAXPATMatrixUnion@@PAUVectorStruct@@11@Z:NEAR ; RotTransVector
EXTRN	?SetMat@@YAXPATMatrixUnion@@MMMMMMMMM@Z:NEAR	; SetMat
EXTRN	?UpVec@@3UVectorStruct@@A:BYTE			; UpVec
EXTRN	?MOV_MoveBody@@YAXPAUobject_def@@@Z:NEAR	; MOV_MoveBody
EXTRN	?CreateCopyCollSkin@@YA_NPAUCollSkinStruct@@@Z:NEAR ; CreateCopyCollSkin
EXTRN	?BuildWorldSkin@@YAXPAUCollSkinStruct@@PAUVectorStruct@@PATMatrixUnion@@@Z:NEAR ; BuildWorldSkin
EXTRN	?DebugMalloc@@YAPAXIHPAD@Z:NEAR			; DebugMalloc
EXTRN	?MakeTightLocalBBox@@YAXPAUCollSkinStruct@@@Z:NEAR ; MakeTightLocalBBox
EXTRN	__fltused:NEAR
EXTRN	?COL_BodyCollHandler@@YAXPAUobject_def@@@Z:NEAR	; COL_BodyCollHandler
EXTRN	?AddLinearTwistField@@YAPAUForceFieldStruct@@JJPAUVectorStruct@@PATMatrixUnion@@PAUBBOX@@00M0M@Z:NEAR ; AddLinearTwistField
EXTRN	?AllocLight@@YAPAULIGHT@@XZ:NEAR		; AllocLight
;	COMDAT __real@45bb8000
CONST	SEGMENT
__real@45bb8000 DD 045bb8000r			; 6000
CONST	ENDS
;	COMDAT __real@c5bb8000
CONST	SEGMENT
__real@c5bb8000 DD 0c5bb8000r			; -6000
CONST	ENDS
;	COMDAT ??_C@_0IL@GBHCIHE@c?3?2documents?5and?5settings?2jarhea@
CONST	SEGMENT
??_C@_0IL@GBHCIHE@c?3?2documents?5and?5settings?2jarhea@ DB 'c:\documents'
	DB	' and settings\jarhead\desktop\shit to display my love for xbo'
	DB	'x revolt and fuck you borman-ness\revolt source\source\weapon'
	DB	'.cpp', 00H					; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??InitShockwave@@YAJPAUobject_def@@PAJ@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??InitShockwave@@YAJPAUobject_def@@PAJ@Z@4JA DD 09fH ; `InitShockwave'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
CONST	ENDS
;	COMDAT __real@c63b8000
CONST	SEGMENT
__real@c63b8000 DD 0c63b8000r			; -12000
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@47435000
CONST	SEGMENT
__real@47435000 DD 047435000r			; 50000
; Function compile flags: /Odt /ZI
CONST	ENDS
;	COMDAT ?InitShockwave@@YAJPAUobject_def@@PAJ@Z
_TEXT	SEGMENT
__mul$83066 = -68					; size = 4
_shockwave$ = -64					; size = 4
_bBox$ = -60						; size = 24
_axis$ = -36						; size = 12
_dir$ = -24						; size = 12
_bVec$ = -12						; size = 12
_obj$ = 8						; size = 4
_flags$ = 12						; size = 4
?InitShockwave@@YAJPAUobject_def@@PAJ@Z PROC NEAR	; InitShockwave, COMDAT

; 159  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 132				; 00000084H
	push	ebx
	push	esi
	push	edi

; 160  : 	VEC bVec, dir, axis;
; 161  : 	BBOX bBox;
; 162  : 	SHOCKWAVE_OBJ *shockwave = (SHOCKWAVE_OBJ*)obj->Data;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+684]
	mov	DWORD PTR _shockwave$[ebp], ecx

; 163  : 
; 164  : // remember owner player
; 165  : 
; 166  : 	obj->player = (PLAYER*)flags[0];

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR _flags$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+588], edx

; 167  : 
; 168  : // setup 
; 169  : 
; 170  : 	shockwave->Alive = TRUE;

	mov	eax, DWORD PTR _shockwave$[ebp]
	mov	DWORD PTR [eax], 1

; 171  : 	shockwave->Age = 0.0f;

	mov	eax, DWORD PTR _shockwave$[ebp]
	mov	DWORD PTR [eax+4], 0

; 172  : 	shockwave->Reach = 1024.0f;

	mov	eax, DWORD PTR _shockwave$[ebp]
	mov	DWORD PTR [eax+8], 1149239296		; 44800000H

; 173  : 
; 174  : 	RotTransVector(&obj->body.Centre.WMatrix, &obj->body.Centre.Pos, &obj->player->car.WeaponOffset, &obj->body.Centre.Pos);

	mov	eax, DWORD PTR _obj$[ebp]
	add	eax, 20					; 00000014H
	push	eax
	mov	ecx, DWORD PTR _obj$[ebp]
	mov	edx, DWORD PTR [ecx+588]
	add	edx, 3444				; 00000d74H
	push	edx
	mov	eax, DWORD PTR _obj$[ebp]
	add	eax, 20					; 00000014H
	push	eax
	mov	ecx, DWORD PTR _obj$[ebp]
	add	ecx, 100				; 00000064H
	push	ecx
	call	?RotTransVector@@YAXPATMatrixUnion@@PAUVectorStruct@@11@Z ; RotTransVector
	add	esp, 16					; 00000010H

; 175  : 	VecEqScalarVec(&obj->body.Centre.Vel, SHOCKWAVE_VEL, &obj->body.Centre.WMatrix.mv[L]);

	mov	eax, DWORD PTR _obj$[ebp]
	fld	DWORD PTR __real@45bb8000
	fmul	DWORD PTR [eax+124]
	mov	ecx, DWORD PTR _obj$[ebp]
	fstp	DWORD PTR [ecx+32]
	mov	eax, DWORD PTR _obj$[ebp]
	fld	DWORD PTR __real@45bb8000
	fmul	DWORD PTR [eax+128]
	mov	ecx, DWORD PTR _obj$[ebp]
	fstp	DWORD PTR [ecx+36]
	mov	eax, DWORD PTR _obj$[ebp]
	fld	DWORD PTR __real@45bb8000
	fmul	DWORD PTR [eax+132]
	mov	ecx, DWORD PTR _obj$[ebp]
	fstp	DWORD PTR [ecx+40]

; 176  : 
; 177  : 	VecPlusScalarVec(&obj->body.Centre.Pos, -SHOCKWAVE_VEL, &obj->body.Centre.Vel, &shockwave->OldPos);

	mov	eax, DWORD PTR _obj$[ebp]
	fld	DWORD PTR __real@c5bb8000
	fmul	DWORD PTR [eax+32]
	mov	ecx, DWORD PTR _obj$[ebp]
	fadd	DWORD PTR [ecx+20]
	mov	edx, DWORD PTR _shockwave$[ebp]
	fstp	DWORD PTR [edx+12]
	mov	eax, DWORD PTR _obj$[ebp]
	fld	DWORD PTR __real@c5bb8000
	fmul	DWORD PTR [eax+36]
	mov	ecx, DWORD PTR _obj$[ebp]
	fadd	DWORD PTR [ecx+24]
	mov	edx, DWORD PTR _shockwave$[ebp]
	fstp	DWORD PTR [edx+16]
	mov	eax, DWORD PTR _obj$[ebp]
	fld	DWORD PTR __real@c5bb8000
	fmul	DWORD PTR [eax+40]
	mov	ecx, DWORD PTR _obj$[ebp]
	fadd	DWORD PTR [ecx+28]
	mov	edx, DWORD PTR _shockwave$[ebp]
	fstp	DWORD PTR [edx+20]

; 178  : 
; 179  : // setup handlers
; 180  : 
; 181  : 	obj->aihandler = (AI_HANDLER)ShockwaveHandler;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	DWORD PTR [eax+696], OFFSET FLAT:?ShockwaveHandler@@YAXPAUobject_def@@@Z ; ShockwaveHandler

; 182  : 	obj->renderhandler = (RENDER_HANDLER)RenderShockwave;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	DWORD PTR [eax+700], OFFSET FLAT:?RenderShockwave@@YAXPAUobject_def@@@Z ; RenderShockwave

; 183  : 	obj->collhandler = (COLL_HANDLER)COL_BodyCollHandler;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	DWORD PTR [eax+692], OFFSET FLAT:?COL_BodyCollHandler@@YAXPAUobject_def@@@Z ; COL_BodyCollHandler

; 184  : 	obj->movehandler = (MOVE_HANDLER)MOV_MoveBody;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	DWORD PTR [eax+688], OFFSET FLAT:?MOV_MoveBody@@YAXPAUobject_def@@@Z ; MOV_MoveBody

; 185  : 
; 186  : // Physical properties
; 187  : 
; 188  : 	obj->CollType = COLL_TYPE_BODY;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	DWORD PTR [eax+660], 1

; 189  : 
; 190  : 	obj->body.Centre.Mass = Real(1.0);

	mov	eax, DWORD PTR _obj$[ebp]
	mov	DWORD PTR [eax], 1065353216		; 3f800000H

; 191  : 	obj->body.Centre.InvMass = ONE / Real(1.0);

	mov	eax, DWORD PTR _obj$[ebp]
	mov	DWORD PTR [eax+4], 1065353216		; 3f800000H

; 192  : 	SetMat(&obj->body.BodyInertia, Real(100), ZERO, ZERO, ZERO, Real(100), ZERO, ZERO, ZERO, Real(100));

	push	1120403456				; 42c80000H
	push	0
	push	0
	push	0
	push	1120403456				; 42c80000H
	push	0
	push	0
	push	0
	push	1120403456				; 42c80000H
	mov	eax, DWORD PTR _obj$[ebp]
	add	eax, 224				; 000000e0H
	push	eax
	call	?SetMat@@YAXPATMatrixUnion@@MMMMMMMMM@Z	; SetMat
	add	esp, 40					; 00000028H

; 193  : 	SetMat(&obj->body.BodyInvInertia, ONE / Real(100), ZERO, ZERO, ZERO, ONE / Real(100), ZERO, ZERO, ZERO, ONE / Real(100));

	push	1008981770				; 3c23d70aH
	push	0
	push	0
	push	0
	push	1008981770				; 3c23d70aH
	push	0
	push	0
	push	0
	push	1008981770				; 3c23d70aH
	mov	eax, DWORD PTR _obj$[ebp]
	add	eax, 260				; 00000104H
	push	eax
	call	?SetMat@@YAXPATMatrixUnion@@MMMMMMMMM@Z	; SetMat
	add	esp, 40					; 00000028H

; 194  : 
; 195  : 	obj->body.Centre.Hardness = Real(0.1);

	mov	eax, DWORD PTR _obj$[ebp]
	mov	DWORD PTR [eax+172], 1036831949		; 3dcccccdH

; 196  : 	obj->body.Centre.Resistance = Real(0.0);

	mov	eax, DWORD PTR _obj$[ebp]
	mov	DWORD PTR [eax+176], 0

; 197  : 	obj->body.DefaultAngRes = Real(0.0);

	mov	eax, DWORD PTR _obj$[ebp]
	mov	DWORD PTR [eax+368], 0

; 198  : 	obj->body.AngResistance = Real(0.0);

	mov	eax, DWORD PTR _obj$[ebp]
	mov	DWORD PTR [eax+376], 0

; 199  : 	obj->body.AngResMod = Real(1.0);

	mov	eax, DWORD PTR _obj$[ebp]
	mov	DWORD PTR [eax+372], 1065353216		; 3f800000H

; 200  : 	obj->body.Centre.Grip = Real(0.0);

	mov	eax, DWORD PTR _obj$[ebp]
	mov	DWORD PTR [eax+180], 0

; 201  : 	obj->body.Centre.StaticFriction = Real(0.0);

	mov	eax, DWORD PTR _obj$[ebp]
	mov	DWORD PTR [eax+184], 0

; 202  : 	obj->body.Centre.KineticFriction = Real(0.0);

	mov	eax, DWORD PTR _obj$[ebp]
	mov	DWORD PTR [eax+188], 0

; 203  : 
; 204  : // Collision skin
; 205  : 
; 206  : 	SetBodySphere(&obj->body);

	mov	eax, DWORD PTR _obj$[ebp]
	mov	DWORD PTR [eax+472], 1

; 207  : 	obj->body.CollSkin.Sphere = (SPHERE *)malloc(sizeof(SPHERE));

	push	OFFSET FLAT:??_C@_0IL@GBHCIHE@c?3?2documents?5and?5settings?2jarhea@
	mov	eax, DWORD PTR ?__LINE__Var@?1??InitShockwave@@YAJPAUobject_def@@PAJ@Z@4JA
	add	eax, 48					; 00000030H
	push	eax
	push	16					; 00000010H
	call	?DebugMalloc@@YAPAXIHPAD@Z		; DebugMalloc
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _obj$[ebp]
	mov	DWORD PTR [ecx+396], eax

; 208  : 	SetVecZero(&obj->body.CollSkin.Sphere[0].Pos);

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+396]
	mov	DWORD PTR [ecx], 0
	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+396]
	mov	DWORD PTR [ecx+4], 0
	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+396]
	mov	DWORD PTR [ecx+8], 0

; 209  : 	obj->body.CollSkin.Sphere[0].Radius = SHOCKWAVE_RAD;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+396]
	mov	DWORD PTR [ecx+12], 1109393408		; 42200000H

; 210  : 	obj->body.CollSkin.NSpheres = 1;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	WORD PTR [eax+408], 1

; 211  : 	CreateCopyCollSkin(&obj->body.CollSkin);

	mov	eax, DWORD PTR _obj$[ebp]
	add	eax, 380				; 0000017cH
	push	eax
	call	?CreateCopyCollSkin@@YA_NPAUCollSkinStruct@@@Z ; CreateCopyCollSkin
	add	esp, 4

; 212  : 	MakeTightLocalBBox(&obj->body.CollSkin);

	mov	eax, DWORD PTR _obj$[ebp]
	add	eax, 380				; 0000017cH
	push	eax
	call	?MakeTightLocalBBox@@YAXPAUCollSkinStruct@@@Z ; MakeTightLocalBBox
	add	esp, 4

; 213  : 	BuildWorldSkin(&obj->body.CollSkin, &obj->body.Centre.Pos, &obj->body.Centre.WMatrix);

	mov	eax, DWORD PTR _obj$[ebp]
	add	eax, 100				; 00000064H
	push	eax
	mov	ecx, DWORD PTR _obj$[ebp]
	add	ecx, 20					; 00000014H
	push	ecx
	mov	edx, DWORD PTR _obj$[ebp]
	add	edx, 380				; 0000017cH
	push	edx
	call	?BuildWorldSkin@@YAXPAUCollSkinStruct@@PAUVectorStruct@@PATMatrixUnion@@@Z ; BuildWorldSkin
	add	esp, 12					; 0000000cH

; 214  : 
; 215  : 	obj->body.CollSkin.AllowObjColls = FALSE;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	BYTE PTR [eax+477], 0

; 216  : 
; 217  : // setup light
; 218  : 
; 219  : 	obj->Light = AllocLight();

	call	?AllocLight@@YAPAULIGHT@@XZ		; AllocLight
	mov	ecx, DWORD PTR _obj$[ebp]
	mov	DWORD PTR [ecx+672], eax

; 220  : 	if (obj->Light)

	mov	eax, DWORD PTR _obj$[ebp]
	cmp	DWORD PTR [eax+672], 0
	je	SHORT $L83062

; 221  : 	{
; 222  : 		obj->Light->Reach = 1024;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+672]
	mov	DWORD PTR [ecx+12], 1149239296		; 44800000H

; 223  : 		obj->Light->Flag = LIGHT_FIXED | LIGHT_MOVING;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+672]
	mov	BYTE PTR [ecx+100], 3

; 224  : 		obj->Light->Type = LIGHT_OMNI;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+672]
	mov	BYTE PTR [ecx+101], 0

; 225  : 		obj->Light->r = 0;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+672]
	mov	DWORD PTR [ecx+88], 0

; 226  : 		obj->Light->g = 0;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+672]
	mov	DWORD PTR [ecx+92], 0

; 227  : 		obj->Light->b = 128;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+672]
	mov	DWORD PTR [ecx+96], 128			; 00000080H
$L83062:

; 228  : 	}
; 229  : 
; 230  : // setup sfx
; 231  : 
; 232  : 	obj->Sfx3D = CreateSfx3D(SFX_SHOCKWAVE, SFX_MAX_VOL, 22050, TRUE, &obj->body.Centre.Pos);

	mov	eax, DWORD PTR _obj$[ebp]
	add	eax, 20					; 00000014H
	push	eax
	push	1
	push	22050					; 00005622H
	push	127					; 0000007fH
	push	7
	call	?CreateSfx3D@@YAPAUSAMPLE_3D@@JJJJPAUVectorStruct@@@Z ; CreateSfx3D
	add	esp, 20					; 00000014H
	mov	ecx, DWORD PTR _obj$[ebp]
	mov	DWORD PTR [ecx+680], eax

; 233  : 
; 234  : // Add a force field
; 235  : 
; 236  : 	SetBBox(&bBox, -shockwave->Reach, shockwave->Reach, -shockwave->Reach, shockwave->Reach, -shockwave->Reach, shockwave->Reach);

	mov	eax, DWORD PTR _shockwave$[ebp]
	fld	DWORD PTR [eax+8]
	fchs
	fstp	DWORD PTR _bBox$[ebp]
	mov	eax, DWORD PTR _shockwave$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _bBox$[ebp+4], ecx
	mov	eax, DWORD PTR _shockwave$[ebp]
	fld	DWORD PTR [eax+8]
	fchs
	fstp	DWORD PTR _bBox$[ebp+8]
	mov	eax, DWORD PTR _shockwave$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _bBox$[ebp+12], ecx
	mov	eax, DWORD PTR _shockwave$[ebp]
	fld	DWORD PTR [eax+8]
	fchs
	fstp	DWORD PTR _bBox$[ebp+16]
	mov	eax, DWORD PTR _shockwave$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _bBox$[ebp+20], ecx

; 237  : 	SetVec(&bVec, shockwave->Reach / 2, shockwave->Reach / 2, shockwave->Reach / 2);

	mov	eax, DWORD PTR _shockwave$[ebp]
	fld	DWORD PTR [eax+8]
	fdiv	DWORD PTR __real@40000000
	fstp	DWORD PTR _bVec$[ebp]
	mov	eax, DWORD PTR _shockwave$[ebp]
	fld	DWORD PTR [eax+8]
	fdiv	DWORD PTR __real@40000000
	fstp	DWORD PTR _bVec$[ebp+4]
	mov	eax, DWORD PTR _shockwave$[ebp]
	fld	DWORD PTR [eax+8]
	fdiv	DWORD PTR __real@40000000
	fstp	DWORD PTR _bVec$[ebp+8]

; 238  : 	VecPlusScalarVec(&obj->body.Centre.Vel, -Real(12000), &UpVec, &dir);

	fld	DWORD PTR __real@c63b8000
	fmul	DWORD PTR ?UpVec@@3UVectorStruct@@A
	mov	eax, DWORD PTR _obj$[ebp]
	fadd	DWORD PTR [eax+32]
	fstp	DWORD PTR _dir$[ebp]
	fld	DWORD PTR __real@c63b8000
	fmul	DWORD PTR ?UpVec@@3UVectorStruct@@A+4
	mov	eax, DWORD PTR _obj$[ebp]
	fadd	DWORD PTR [eax+36]
	fstp	DWORD PTR _dir$[ebp+4]
	fld	DWORD PTR __real@c63b8000
	fmul	DWORD PTR ?UpVec@@3UVectorStruct@@A+8
	mov	eax, DWORD PTR _obj$[ebp]
	fadd	DWORD PTR [eax+40]
	fstp	DWORD PTR _dir$[ebp+8]

; 239  : 	NormalizeVec(&dir);

	fld	DWORD PTR _dir$[ebp]
	fmul	DWORD PTR _dir$[ebp]
	fld	DWORD PTR _dir$[ebp+4]
	fmul	DWORD PTR _dir$[ebp+4]
	faddp	ST(1), ST(0)
	fld	DWORD PTR _dir$[ebp+8]
	fmul	DWORD PTR _dir$[ebp+8]
	faddp	ST(1), ST(0)
	push	ecx
	fstp	DWORD PTR [esp]
	call	?sqrt@@YAMM@Z				; sqrt
	add	esp, 4
	fdivr	DWORD PTR __real@3f800000
	fstp	DWORD PTR __mul$83066[ebp]
	fld	DWORD PTR _dir$[ebp]
	fmul	DWORD PTR __mul$83066[ebp]
	fstp	DWORD PTR _dir$[ebp]
	fld	DWORD PTR _dir$[ebp+4]
	fmul	DWORD PTR __mul$83066[ebp]
	fstp	DWORD PTR _dir$[ebp+4]
	fld	DWORD PTR _dir$[ebp+8]
	fmul	DWORD PTR __mul$83066[ebp]
	fstp	DWORD PTR _dir$[ebp+8]

; 240  : 	VecEqScalarVec(&axis, Real(50000), &obj->body.Centre.WMatrix.mv[R]);

	mov	eax, DWORD PTR _obj$[ebp]
	fld	DWORD PTR __real@47435000
	fmul	DWORD PTR [eax+100]
	fstp	DWORD PTR _axis$[ebp]
	mov	eax, DWORD PTR _obj$[ebp]
	fld	DWORD PTR __real@47435000
	fmul	DWORD PTR [eax+104]
	fstp	DWORD PTR _axis$[ebp+4]
	mov	eax, DWORD PTR _obj$[ebp]
	fld	DWORD PTR __real@47435000
	fmul	DWORD PTR [eax+108]
	fstp	DWORD PTR _axis$[ebp+8]

; 241  : 	obj->Field = AddLinearTwistField(
; 242  : 		obj->player->ownobj->ObjID, 
; 243  : 		FIELD_PRIORITY_MIN,
; 244  : 		&obj->body.Centre.Pos,
; 245  : 		&obj->body.Centre.WMatrix,
; 246  : 		&bBox,
; 247  : 		&bVec,
; 248  : 		&dir,
; 249  : 		-Real(6000),
; 250  : 		&axis,
; 251  : 		ZERO);

	push	0
	lea	eax, DWORD PTR _axis$[ebp]
	push	eax
	push	-977567744				; c5bb8000H
	lea	ecx, DWORD PTR _dir$[ebp]
	push	ecx
	lea	edx, DWORD PTR _bVec$[ebp]
	push	edx
	lea	eax, DWORD PTR _bBox$[ebp]
	push	eax
	mov	ecx, DWORD PTR _obj$[ebp]
	add	ecx, 100				; 00000064H
	push	ecx
	mov	edx, DWORD PTR _obj$[ebp]
	add	edx, 20					; 00000014H
	push	edx
	push	1
	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+588]
	mov	edx, DWORD PTR [ecx+40]
	mov	eax, DWORD PTR [edx+576]
	push	eax
	call	?AddLinearTwistField@@YAPAUForceFieldStruct@@JJPAUVectorStruct@@PATMatrixUnion@@PAUBBOX@@00M0M@Z ; AddLinearTwistField
	add	esp, 40					; 00000028H
	mov	ecx, DWORD PTR _obj$[ebp]
	mov	DWORD PTR [ecx+664], eax

; 252  : 
; 253  : 	obj->FieldPriority = FIELD_PRIORITY_MAX;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	DWORD PTR [eax+668], 0

; 254  : 
; 255  : // return OK
; 256  : 
; 257  : 	return TRUE;

	mov	eax, 1

; 258  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?InitShockwave@@YAJPAUobject_def@@PAJ@Z ENDP		; InitShockwave
_TEXT	ENDS
PUBLIC	__real@42c80000
PUBLIC	__real@45548000
PUBLIC	__real@41000000
PUBLIC	__real@455ac000
PUBLIC	__real@44bb8000
PUBLIC	?InitFirework@@YAJPAUobject_def@@PAJ@Z		; InitFirework
PUBLIC	?FireworkHandler@@YAXPAUobject_def@@@Z		; FireworkHandler
EXTRN	?SetBodyPos@@YAXPAUNewBodyStruct@@PAUVectorStruct@@PATMatrixUnion@@@Z:NEAR ; SetBodyPos
EXTRN	?BuildMatrixFromUp@@YAXPATMatrixUnion@@@Z:NEAR	; BuildMatrixFromUp
EXTRN	?GetFreeTrail@@YAPAUSparkTrailStruct@@J@Z:NEAR	; GetFreeTrail
EXTRN	?LoadOneLevelModel@@YAJJJUrenderflags@@J@Z:NEAR	; LoadOneLevelModel
EXTRN	?LevelModel@@3PAULEVEL_MODEL@@A:BYTE		; LevelModel
;	COMDAT __real@42c80000
CONST	SEGMENT
__real@42c80000 DD 042c80000r			; 100
CONST	ENDS
;	COMDAT __real@45548000
CONST	SEGMENT
__real@45548000 DD 045548000r			; 3400
CONST	ENDS
;	COMDAT __real@41000000
CONST	SEGMENT
__real@41000000 DD 041000000r			; 8
CONST	ENDS
;	COMDAT __real@455ac000
CONST	SEGMENT
__real@455ac000 DD 0455ac000r			; 3500
CONST	ENDS
;	COMDAT __real@44bb8000
CONST	SEGMENT
__real@44bb8000 DD 044bb8000r			; 1500
; Function compile flags: /Odt /ZI
CONST	ENDS
;	COMDAT ?InitFirework@@YAJPAUobject_def@@PAJ@Z
_TEXT	SEGMENT
__mul$83116 = -44					; size = 4
_firework$ = -40					; size = 4
_playerMat$ = -36					; size = 4
_dir$ = -32						; size = 12
_dR$ = -20						; size = 12
_speedMod$ = -8						; size = 4
_dRLen$ = -4						; size = 4
_obj$ = 8						; size = 4
_flags$ = 12						; size = 4
?InitFirework@@YAJPAUobject_def@@PAJ@Z PROC NEAR	; InitFirework, COMDAT

; 265  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 108				; 0000006cH
	push	ebx
	push	esi
	push	edi

; 266  : 	REAL dRLen, speedMod;
; 267  : 	VEC dR, dir;
; 268  : 	MAT *playerMat;
; 269  : 	FIREWORK_OBJ *firework = (FIREWORK_OBJ*)obj->Data;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+684]
	mov	DWORD PTR _firework$[ebp], ecx

; 270  : 
; 271  : // set render flags
; 272  : 
; 273  : 	obj->renderflag.envmap = FALSE;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+584]
	and	ecx, -2					; fffffffeH
	mov	edx, DWORD PTR _obj$[ebp]
	mov	DWORD PTR [edx+584], ecx

; 274  : 	obj->renderflag.light = FALSE;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+584]
	and	ecx, -5					; fffffffbH
	mov	edx, DWORD PTR _obj$[ebp]
	mov	DWORD PTR [edx+584], ecx

; 275  : 
; 276  : // setup handlers
; 277  : 
; 278  : 	obj->movehandler = (MOVE_HANDLER)FireworkHandler;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	DWORD PTR [eax+688], OFFSET FLAT:?FireworkHandler@@YAXPAUobject_def@@@Z ; FireworkHandler

; 279  : 	obj->CollType = COLL_TYPE_BODY;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	DWORD PTR [eax+660], 1

; 280  : 	obj->collhandler = (COLL_HANDLER)COL_BodyCollHandler;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	DWORD PTR [eax+692], OFFSET FLAT:?COL_BodyCollHandler@@YAXPAUobject_def@@@Z ; COL_BodyCollHandler

; 281  : 
; 282  : // load default model
; 283  : 
; 284  : 	obj->DefaultModel = LoadOneLevelModel(LEVEL_MODEL_FIREWORK, FALSE, obj->renderflag, TPAGE_FX1);

	push	27					; 0000001bH
	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+584]
	push	ecx
	push	0
	push	37					; 00000025H
	call	?LoadOneLevelModel@@YAJJJUrenderflags@@J@Z ; LoadOneLevelModel
	add	esp, 16					; 00000010H
	mov	edx, DWORD PTR _obj$[ebp]
	mov	DWORD PTR [edx+656], eax

; 285  : 	if (obj->DefaultModel == -1) return FALSE;

	mov	eax, DWORD PTR _obj$[ebp]
	cmp	DWORD PTR [eax+656], -1
	jne	SHORT $L83085
	xor	eax, eax
	jmp	$L83075
$L83085:

; 286  : 
; 287  : // remember owner player
; 288  : 
; 289  : 	obj->player = (PLAYER*)flags[0];

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR _flags$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+588], edx

; 290  : 	playerMat = &obj->player->car.Body->Centre.WMatrix;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+588]
	mov	edx, DWORD PTR [ecx+900]
	add	edx, 100				; 00000064H
	mov	DWORD PTR _playerMat$[ebp], edx

; 291  : 
; 292  : 	// misc
; 293  : 	firework->Exploded = FALSE;

	mov	eax, DWORD PTR _firework$[ebp]
	mov	BYTE PTR [eax+4], 0

; 294  : 	firework->Age = ZERO;

	mov	eax, DWORD PTR _firework$[ebp]
	mov	DWORD PTR [eax+8], 0

; 295  : 	firework->Target = obj->player->PickupTarget;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+588]
	mov	edx, DWORD PTR _firework$[ebp]
	mov	eax, DWORD PTR [ecx+10236]
	mov	DWORD PTR [edx], eax

; 296  : 
; 297  : 	// offset pos
; 298  : 	RotTransVector(&obj->body.Centre.WMatrix, &obj->body.Centre.Pos, &obj->player->car.WeaponOffset, &obj->body.Centre.Pos);

	mov	eax, DWORD PTR _obj$[ebp]
	add	eax, 20					; 00000014H
	push	eax
	mov	ecx, DWORD PTR _obj$[ebp]
	mov	edx, DWORD PTR [ecx+588]
	add	edx, 3444				; 00000d74H
	push	edx
	mov	eax, DWORD PTR _obj$[ebp]
	add	eax, 20					; 00000014H
	push	eax
	mov	ecx, DWORD PTR _obj$[ebp]
	add	ecx, 100				; 00000064H
	push	ecx
	call	?RotTransVector@@YAXPATMatrixUnion@@PAUVectorStruct@@11@Z ; RotTransVector
	add	esp, 16					; 00000010H

; 299  : 
; 300  : 	// Physical properties
; 301  : 	obj->body.Centre.Mass = Real(0.1f);

	mov	eax, DWORD PTR _obj$[ebp]
	mov	DWORD PTR [eax], 1036831949		; 3dcccccdH

; 302  : 	obj->body.Centre.InvMass = ONE / Real(0.1f);

	mov	eax, DWORD PTR _obj$[ebp]
	mov	DWORD PTR [eax+4], 1092616192		; 41200000H

; 303  : 	SetMat(&obj->body.BodyInertia, Real(100), ZERO, ZERO, ZERO, Real(100), ZERO, ZERO, ZERO, Real(100));

	push	1120403456				; 42c80000H
	push	0
	push	0
	push	0
	push	1120403456				; 42c80000H
	push	0
	push	0
	push	0
	push	1120403456				; 42c80000H
	mov	eax, DWORD PTR _obj$[ebp]
	add	eax, 224				; 000000e0H
	push	eax
	call	?SetMat@@YAXPATMatrixUnion@@MMMMMMMMM@Z	; SetMat
	add	esp, 40					; 00000028H

; 304  : 	SetMat(&obj->body.BodyInvInertia, ONE / Real(100), ZERO, ZERO, ZERO, ONE / Real(100), ZERO, ZERO, ZERO, ONE / Real(100));

	push	1008981770				; 3c23d70aH
	push	0
	push	0
	push	0
	push	1008981770				; 3c23d70aH
	push	0
	push	0
	push	0
	push	1008981770				; 3c23d70aH
	mov	eax, DWORD PTR _obj$[ebp]
	add	eax, 260				; 00000104H
	push	eax
	call	?SetMat@@YAXPATMatrixUnion@@MMMMMMMMM@Z	; SetMat
	add	esp, 40					; 00000028H

; 305  : 
; 306  : 	obj->body.Centre.Hardness = Real(0.7);

	mov	eax, DWORD PTR _obj$[ebp]
	mov	DWORD PTR [eax+172], 1060320051		; 3f333333H

; 307  : 	obj->body.Centre.Resistance = Real(0.003);

	mov	eax, DWORD PTR _obj$[ebp]
	mov	DWORD PTR [eax+176], 994352038		; 3b449ba6H

; 308  : 	obj->body.DefaultAngRes = Real(0.01);

	mov	eax, DWORD PTR _obj$[ebp]
	mov	DWORD PTR [eax+368], 1008981770		; 3c23d70aH

; 309  : 	obj->body.AngResistance = Real(0.01);

	mov	eax, DWORD PTR _obj$[ebp]
	mov	DWORD PTR [eax+376], 1008981770		; 3c23d70aH

; 310  : 	obj->body.AngResMod = Real(1.0);

	mov	eax, DWORD PTR _obj$[ebp]
	mov	DWORD PTR [eax+372], 1065353216		; 3f800000H

; 311  : 	obj->body.Centre.Grip = Real(0.015);

	mov	eax, DWORD PTR _obj$[ebp]
	mov	DWORD PTR [eax+180], 1014350479		; 3c75c28fH

; 312  : 	obj->body.Centre.StaticFriction = Real(1.5);

	mov	eax, DWORD PTR _obj$[ebp]
	mov	DWORD PTR [eax+184], 1069547520		; 3fc00000H

; 313  : 	obj->body.Centre.KineticFriction = Real(1.1);

	mov	eax, DWORD PTR _obj$[ebp]
	mov	DWORD PTR [eax+188], 1066192077		; 3f8ccccdH

; 314  : 
; 315  : 	// Collision skin
; 316  : 	SetBodyConvex(&obj->body);

	mov	eax, DWORD PTR _obj$[ebp]
	mov	DWORD PTR [eax+472], 0

; 317  : 	obj->body.CollSkin.AllowObjColls = FALSE;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	BYTE PTR [eax+477], 0

; 318  : 	obj->body.CollSkin.NConvex = LevelModel[obj->DefaultModel].CollSkin.NConvex;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+656]
	imul	ecx, 168				; 000000a8H
	mov	edx, DWORD PTR _obj$[ebp]
	mov	ax, WORD PTR ?LevelModel@@3PAULEVEL_MODEL@@A[ecx+80]
	mov	WORD PTR [edx+392], ax

; 319  : 	obj->body.CollSkin.NSpheres = LevelModel[obj->DefaultModel].CollSkin.NSpheres;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+656]
	imul	ecx, 168				; 000000a8H
	mov	edx, DWORD PTR _obj$[ebp]
	mov	ax, WORD PTR ?LevelModel@@3PAULEVEL_MODEL@@A[ecx+96]
	mov	WORD PTR [edx+408], ax

; 320  : 	obj->body.CollSkin.Convex = LevelModel[obj->DefaultModel].CollSkin.Convex;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+656]
	imul	ecx, 168				; 000000a8H
	mov	edx, DWORD PTR _obj$[ebp]
	mov	eax, DWORD PTR ?LevelModel@@3PAULEVEL_MODEL@@A[ecx+68]
	mov	DWORD PTR [edx+380], eax

; 321  : 	obj->body.CollSkin.Sphere = LevelModel[obj->DefaultModel].CollSkin.Sphere;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+656]
	imul	ecx, 168				; 000000a8H
	mov	edx, DWORD PTR _obj$[ebp]
	mov	eax, DWORD PTR ?LevelModel@@3PAULEVEL_MODEL@@A[ecx+84]
	mov	DWORD PTR [edx+396], eax

; 322  : 	CopyBBox(&LevelModel[obj->DefaultModel].CollSkin.TightBBox, &obj->body.CollSkin.TightBBox);

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+656]
	imul	ecx, 168				; 000000a8H
	mov	edx, DWORD PTR _obj$[ebp]
	mov	eax, DWORD PTR ?LevelModel@@3PAULEVEL_MODEL@@A[ecx+108]
	mov	DWORD PTR [edx+420], eax
	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+656]
	imul	ecx, 168				; 000000a8H
	mov	edx, DWORD PTR _obj$[ebp]
	mov	eax, DWORD PTR ?LevelModel@@3PAULEVEL_MODEL@@A[ecx+112]
	mov	DWORD PTR [edx+424], eax
	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+656]
	imul	ecx, 168				; 000000a8H
	mov	edx, DWORD PTR _obj$[ebp]
	mov	eax, DWORD PTR ?LevelModel@@3PAULEVEL_MODEL@@A[ecx+116]
	mov	DWORD PTR [edx+428], eax
	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+656]
	imul	ecx, 168				; 000000a8H
	mov	edx, DWORD PTR _obj$[ebp]
	mov	eax, DWORD PTR ?LevelModel@@3PAULEVEL_MODEL@@A[ecx+120]
	mov	DWORD PTR [edx+432], eax
	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+656]
	imul	ecx, 168				; 000000a8H
	mov	edx, DWORD PTR _obj$[ebp]
	mov	eax, DWORD PTR ?LevelModel@@3PAULEVEL_MODEL@@A[ecx+124]
	mov	DWORD PTR [edx+436], eax
	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+656]
	imul	ecx, 168				; 000000a8H
	mov	edx, DWORD PTR _obj$[ebp]
	mov	eax, DWORD PTR ?LevelModel@@3PAULEVEL_MODEL@@A[ecx+128]
	mov	DWORD PTR [edx+440], eax

; 323  : 	CreateCopyCollSkin(&obj->body.CollSkin);

	mov	eax, DWORD PTR _obj$[ebp]
	add	eax, 380				; 0000017cH
	push	eax
	call	?CreateCopyCollSkin@@YA_NPAUCollSkinStruct@@@Z ; CreateCopyCollSkin
	add	esp, 4

; 324  : 	BuildWorldSkin(&obj->body.CollSkin, &obj->body.Centre.Pos, &obj->body.Centre.WMatrix);

	mov	eax, DWORD PTR _obj$[ebp]
	add	eax, 100				; 00000064H
	push	eax
	mov	ecx, DWORD PTR _obj$[ebp]
	add	ecx, 20					; 00000014H
	push	ecx
	mov	edx, DWORD PTR _obj$[ebp]
	add	edx, 380				; 0000017cH
	push	edx
	call	?BuildWorldSkin@@YAXPAUCollSkinStruct@@PAUVectorStruct@@PATMatrixUnion@@@Z ; BuildWorldSkin
	add	esp, 12					; 0000000cH

; 325  : 
; 326  : 	// vel and matrix
; 327  : 	if (firework->Target != NULL) {

	mov	eax, DWORD PTR _firework$[ebp]
	cmp	DWORD PTR [eax], 0
	je	$L83103

; 328  : 		VecMinusVec(&firework->Target->body.Centre.Pos, &obj->body.Centre.Pos, &dR);

	mov	eax, DWORD PTR _firework$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _obj$[ebp]
	fld	DWORD PTR [ecx+20]
	fsub	DWORD PTR [edx+20]
	fstp	DWORD PTR _dR$[ebp]
	mov	eax, DWORD PTR _firework$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _obj$[ebp]
	fld	DWORD PTR [ecx+24]
	fsub	DWORD PTR [edx+24]
	fstp	DWORD PTR _dR$[ebp+4]
	mov	eax, DWORD PTR _firework$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _obj$[ebp]
	fld	DWORD PTR [ecx+28]
	fsub	DWORD PTR [edx+28]
	fstp	DWORD PTR _dR$[ebp+8]

; 329  : 		dRLen = VecLen(&dR) / 2;

	fld	DWORD PTR _dR$[ebp]
	fmul	DWORD PTR _dR$[ebp]
	fld	DWORD PTR _dR$[ebp+4]
	fmul	DWORD PTR _dR$[ebp+4]
	faddp	ST(1), ST(0)
	fld	DWORD PTR _dR$[ebp+8]
	fmul	DWORD PTR _dR$[ebp+8]
	faddp	ST(1), ST(0)
	push	ecx
	fstp	DWORD PTR [esp]
	call	?sqrt@@YAMM@Z				; sqrt
	add	esp, 4
	fdiv	DWORD PTR __real@40000000
	fstp	DWORD PTR _dRLen$[ebp]

; 330  : 		speedMod = (dRLen - WEAPON_RANGE_MIN) / (WEAPON_RANGE_MAX - WEAPON_RANGE_MIN);

	fld	DWORD PTR _dRLen$[ebp]
	fsub	DWORD PTR __real@42c80000
	fdiv	DWORD PTR __real@45548000
	fstp	DWORD PTR _speedMod$[ebp]

; 331  : 		speedMod = (speedMod * speedMod * speedMod * speedMod) / 8;

	fld	DWORD PTR _speedMod$[ebp]
	fmul	DWORD PTR _speedMod$[ebp]
	fmul	DWORD PTR _speedMod$[ebp]
	fmul	DWORD PTR _speedMod$[ebp]
	fdiv	DWORD PTR __real@41000000
	fstp	DWORD PTR _speedMod$[ebp]

; 332  : 	} else {

	jmp	SHORT $L83108
$L83103:

; 333  : 		dRLen = WEAPON_RANGE_MAX / 3;

	mov	DWORD PTR _dRLen$[ebp], 1150408021	; 4491d555H

; 334  : 		speedMod = ONE / 4;

	mov	DWORD PTR _speedMod$[ebp], 1048576000	; 3e800000H
$L83108:

; 335  : 	}
; 336  : 	VecEqScalarVec(&dir, dRLen / WEAPON_RANGE_MAX, &playerMat->mv[U]);

	fld	DWORD PTR _dRLen$[ebp]
	fdiv	DWORD PTR __real@455ac000
	mov	eax, DWORD PTR _playerMat$[ebp]
	fmul	DWORD PTR [eax+12]
	fstp	DWORD PTR _dir$[ebp]
	fld	DWORD PTR _dRLen$[ebp]
	fdiv	DWORD PTR __real@455ac000
	mov	eax, DWORD PTR _playerMat$[ebp]
	fmul	DWORD PTR [eax+16]
	fstp	DWORD PTR _dir$[ebp+4]
	fld	DWORD PTR _dRLen$[ebp]
	fdiv	DWORD PTR __real@455ac000
	mov	eax, DWORD PTR _playerMat$[ebp]
	fmul	DWORD PTR [eax+20]
	fstp	DWORD PTR _dir$[ebp+8]

; 337  : 	VecPlusEqScalarVec(&dir, dRLen / WEAPON_RANGE_MAX - ONE, &playerMat->mv[L]);

	fld	DWORD PTR _dRLen$[ebp]
	fdiv	DWORD PTR __real@455ac000
	fsub	DWORD PTR __real@3f800000
	mov	eax, DWORD PTR _playerMat$[ebp]
	fmul	DWORD PTR [eax+24]
	fadd	DWORD PTR _dir$[ebp]
	fstp	DWORD PTR _dir$[ebp]
	fld	DWORD PTR _dRLen$[ebp]
	fdiv	DWORD PTR __real@455ac000
	fsub	DWORD PTR __real@3f800000
	mov	eax, DWORD PTR _playerMat$[ebp]
	fmul	DWORD PTR [eax+28]
	fadd	DWORD PTR _dir$[ebp+4]
	fstp	DWORD PTR _dir$[ebp+4]
	fld	DWORD PTR _dRLen$[ebp]
	fdiv	DWORD PTR __real@455ac000
	fsub	DWORD PTR __real@3f800000
	mov	eax, DWORD PTR _playerMat$[ebp]
	fmul	DWORD PTR [eax+32]
	fadd	DWORD PTR _dir$[ebp+8]
	fstp	DWORD PTR _dir$[ebp+8]

; 338  : 	NormalizeVec(&dir);

	fld	DWORD PTR _dir$[ebp]
	fmul	DWORD PTR _dir$[ebp]
	fld	DWORD PTR _dir$[ebp+4]
	fmul	DWORD PTR _dir$[ebp+4]
	faddp	ST(1), ST(0)
	fld	DWORD PTR _dir$[ebp+8]
	fmul	DWORD PTR _dir$[ebp+8]
	faddp	ST(1), ST(0)
	push	ecx
	fstp	DWORD PTR [esp]
	call	?sqrt@@YAMM@Z				; sqrt
	add	esp, 4
	fdivr	DWORD PTR __real@3f800000
	fstp	DWORD PTR __mul$83116[ebp]
	fld	DWORD PTR _dir$[ebp]
	fmul	DWORD PTR __mul$83116[ebp]
	fstp	DWORD PTR _dir$[ebp]
	fld	DWORD PTR _dir$[ebp+4]
	fmul	DWORD PTR __mul$83116[ebp]
	fstp	DWORD PTR _dir$[ebp+4]
	fld	DWORD PTR _dir$[ebp+8]
	fmul	DWORD PTR __mul$83116[ebp]
	fstp	DWORD PTR _dir$[ebp+8]

; 339  : 	CopyVec(&dir, &obj->body.Centre.WMatrix.mv[U]);

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR _dir$[ebp]
	mov	DWORD PTR [eax+112], ecx
	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR _dir$[ebp+4]
	mov	DWORD PTR [eax+116], ecx
	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR _dir$[ebp+8]
	mov	DWORD PTR [eax+120], ecx

; 340  : 	BuildMatrixFromUp(&obj->body.Centre.WMatrix);

	mov	eax, DWORD PTR _obj$[ebp]
	add	eax, 100				; 00000064H
	push	eax
	call	?BuildMatrixFromUp@@YAXPATMatrixUnion@@@Z ; BuildMatrixFromUp
	add	esp, 4

; 341  : 	SetBodyPos(&obj->body, &obj->body.Centre.Pos, &obj->body.Centre.WMatrix);

	mov	eax, DWORD PTR _obj$[ebp]
	add	eax, 100				; 00000064H
	push	eax
	mov	ecx, DWORD PTR _obj$[ebp]
	add	ecx, 20					; 00000014H
	push	ecx
	mov	edx, DWORD PTR _obj$[ebp]
	push	edx
	call	?SetBodyPos@@YAXPAUNewBodyStruct@@PAUVectorStruct@@PATMatrixUnion@@@Z ; SetBodyPos
	add	esp, 12					; 0000000cH

; 342  : 	VecPlusScalarVec(&obj->player->car.Body->Centre.Vel, 1500 * speedMod, &dir, &obj->body.Centre.Vel);

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+588]
	mov	edx, DWORD PTR [ecx+900]
	fld	DWORD PTR __real@44bb8000
	fmul	DWORD PTR _speedMod$[ebp]
	fmul	DWORD PTR _dir$[ebp]
	fadd	DWORD PTR [edx+32]
	mov	eax, DWORD PTR _obj$[ebp]
	fstp	DWORD PTR [eax+32]
	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+588]
	mov	edx, DWORD PTR [ecx+900]
	fld	DWORD PTR __real@44bb8000
	fmul	DWORD PTR _speedMod$[ebp]
	fmul	DWORD PTR _dir$[ebp+4]
	fadd	DWORD PTR [edx+36]
	mov	eax, DWORD PTR _obj$[ebp]
	fstp	DWORD PTR [eax+36]
	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+588]
	mov	edx, DWORD PTR [ecx+900]
	fld	DWORD PTR __real@44bb8000
	fmul	DWORD PTR _speedMod$[ebp]
	fmul	DWORD PTR _dir$[ebp+8]
	fadd	DWORD PTR [edx+40]
	mov	eax, DWORD PTR _obj$[ebp]
	fstp	DWORD PTR [eax+40]

; 343  : 
; 344  : 	// setup sfx
; 345  : 	obj->Sfx3D = CreateSfx3D(SFX_FIREWORK, SFX_MAX_VOL, 22050, TRUE, &obj->body.Centre.Pos);

	mov	eax, DWORD PTR _obj$[ebp]
	add	eax, 20					; 00000014H
	push	eax
	push	1
	push	22050					; 00005622H
	push	127					; 0000007fH
	push	9
	call	?CreateSfx3D@@YAPAUSAMPLE_3D@@JJJJPAUVectorStruct@@@Z ; CreateSfx3D
	add	esp, 20					; 00000014H
	mov	ecx, DWORD PTR _obj$[ebp]
	mov	DWORD PTR [ecx+680], eax

; 346  : 
; 347  : 	// Set up the trail
; 348  : 	firework->Trail = GetFreeTrail(TRAIL_SMOKE);

	push	2
	call	?GetFreeTrail@@YAPAUSparkTrailStruct@@J@Z ; GetFreeTrail
	add	esp, 4
	mov	ecx, DWORD PTR _firework$[ebp]
	mov	DWORD PTR [ecx+20], eax

; 349  : 	if (firework->Trail != NULL) {

	mov	eax, DWORD PTR _firework$[ebp]
	cmp	DWORD PTR [eax+20], 0
	je	SHORT $L83118

; 350  : 		CopyVec(&obj->body.Centre.Pos, &firework->Trail->Pos[0]);

	mov	eax, DWORD PTR _firework$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _obj$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR _firework$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _obj$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR _firework$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _obj$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	DWORD PTR [ecx+12], eax

; 351  : 		firework->TrailTime = ZERO;

	mov	eax, DWORD PTR _firework$[ebp]
	mov	DWORD PTR [eax+24], 0
$L83118:

; 352  : 	}
; 353  : 
; 354  : 	// return OK
; 355  : 	return TRUE;

	mov	eax, 1
$L83075:

; 356  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?InitFirework@@YAJPAUobject_def@@PAJ@Z ENDP		; InitFirework
_TEXT	ENDS
PUBLIC	_sqrtf
; Function compile flags: /Odt /ZI
; File c:\program files\microsoft visual studio .net 2003\vc7\include\math.h
;	COMDAT ?sqrt@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?sqrt@@YAMM@Z PROC NEAR					; sqrt, COMDAT

; 579  :         {return (sqrtf(_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR __X$[ebp]
	push	eax
	call	_sqrtf
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?sqrt@@YAMM@Z ENDP					; sqrt
_TEXT	ENDS
EXTRN	_sqrt:NEAR
; Function compile flags: /Odt /ZI
;	COMDAT _sqrtf
_TEXT	SEGMENT
tv70 = -68						; size = 4
__X$ = 8						; size = 4
_sqrtf	PROC NEAR					; COMDAT

; 470  :         {return ((float)sqrt((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	fld	DWORD PTR __X$[ebp]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	call	_sqrt
	add	esp, 8
	fst	DWORD PTR tv70[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_sqrtf	ENDP
_TEXT	ENDS
PUBLIC	?__LINE__Var@?1??InitPuttyBomb@@YAJPAUobject_def@@PAJ@Z@4JA ; `InitPuttyBomb'::`2'::__LINE__Var
PUBLIC	__real@46fffe00
PUBLIC	__real@40c90fdb
PUBLIC	__real@40a00000
PUBLIC	?InitPuttyBomb@@YAJPAUobject_def@@PAJ@Z		; InitPuttyBomb
PUBLIC	?PuttyBombHandler@@YAXPAUobject_def@@@Z		; PuttyBombHandler
PUBLIC	?PuttyBombMove@@YAXPAUobject_def@@@Z		; PuttyBombMove
EXTRN	_rand:NEAR
;	COMDAT ?__LINE__Var@?1??InitPuttyBomb@@YAJPAUobject_def@@PAJ@Z@4JA
; File c:\documents and settings\jarhead\desktop\shit to display my love for xbox revolt and fuck you borman-ness\revolt source\source\weapon.cpp
_DATA	SEGMENT
?__LINE__Var@?1??InitPuttyBomb@@YAJPAUobject_def@@PAJ@Z@4JA DD 016bH ; `InitPuttyBomb'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT __real@46fffe00
CONST	SEGMENT
__real@46fffe00 DD 046fffe00r			; 32767
CONST	ENDS
;	COMDAT __real@40c90fdb
CONST	SEGMENT
__real@40c90fdb DD 040c90fdbr			; 6.28319
CONST	ENDS
;	COMDAT __real@40a00000
CONST	SEGMENT
__real@40a00000 DD 040a00000r			; 5
; Function compile flags: /Odt /ZI
CONST	ENDS
;	COMDAT ?InitPuttyBomb@@YAJPAUobject_def@@PAJ@Z
_TEXT	SEGMENT
tv336 = -84						; size = 4
tv332 = -84						; size = 4
_i$ = -16						; size = 4
_model$ = -12						; size = 4
_vert$ = -8						; size = 4
_bomb$ = -4						; size = 4
_obj$ = 8						; size = 4
_flags$ = 12						; size = 4
?InitPuttyBomb@@YAJPAUobject_def@@PAJ@Z PROC NEAR	; InitPuttyBomb, COMDAT

; 363  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi

; 364  : 	PUTTYBOMB_OBJ *bomb;
; 365  : 	PUTTYBOMB_VERT *vert;
; 366  : 	MODEL *model;
; 367  : 	long i;
; 368  : 
; 369  : // set render flags
; 370  : 
; 371  : 	obj->renderflag.envmap = FALSE;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+584]
	and	ecx, -2					; fffffffeH
	mov	edx, DWORD PTR _obj$[ebp]
	mov	DWORD PTR [edx+584], ecx

; 372  : 	obj->renderflag.light = FALSE;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+584]
	and	ecx, -5					; fffffffbH
	mov	edx, DWORD PTR _obj$[ebp]
	mov	DWORD PTR [edx+584], ecx

; 373  : 	obj->renderflag.reflect = FALSE;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+584]
	and	ecx, -17				; ffffffefH
	mov	edx, DWORD PTR _obj$[ebp]
	mov	DWORD PTR [edx+584], ecx

; 374  : 	obj->renderflag.meshfx = FALSE;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+584]
	and	ecx, -257				; fffffeffH
	mov	edx, DWORD PTR _obj$[ebp]
	mov	DWORD PTR [edx+584], ecx

; 375  : 
; 376  : // setup handlers
; 377  : 
; 378  : 	obj->aihandler = (AI_HANDLER)PuttyBombHandler;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	DWORD PTR [eax+696], OFFSET FLAT:?PuttyBombHandler@@YAXPAUobject_def@@@Z ; PuttyBombHandler

; 379  : 	obj->movehandler = (MOVE_HANDLER)PuttyBombMove;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	DWORD PTR [eax+688], OFFSET FLAT:?PuttyBombMove@@YAXPAUobject_def@@@Z ; PuttyBombMove

; 380  : 	obj->renderhandler = NULL;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	DWORD PTR [eax+700], 0

; 381  : 
; 382  : // load bang model
; 383  : 
; 384  : 	obj->DefaultModel = LoadOneLevelModel(LEVEL_MODEL_BOMBBALL, FALSE, obj->renderflag, 0);

	push	0
	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+584]
	push	ecx
	push	0
	push	40					; 00000028H
	call	?LoadOneLevelModel@@YAJJJUrenderflags@@J@Z ; LoadOneLevelModel
	add	esp, 16					; 00000010H
	mov	edx, DWORD PTR _obj$[ebp]
	mov	DWORD PTR [edx+656], eax

; 385  : 	if (obj->DefaultModel == -1)

	mov	eax, DWORD PTR _obj$[ebp]
	cmp	DWORD PTR [eax+656], -1
	jne	SHORT $L83129

; 386  : 		return FALSE;

	xor	eax, eax
	jmp	$L83122
$L83129:

; 387  : 
; 388  : // remember owner player
; 389  : 
; 390  : 	obj->player = (PLAYER*)flags[0];

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR _flags$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+588], edx

; 391  : 
; 392  : // alloc + setup bomb
; 393  : 
; 394  : 	obj->Data = malloc(sizeof(PUTTYBOMB_OBJ) + sizeof (PUTTYBOMB_VERT) * LevelModel[obj->DefaultModel].Model.VertNum);

	push	OFFSET FLAT:??_C@_0IL@GBHCIHE@c?3?2documents?5and?5settings?2jarhea@
	mov	eax, DWORD PTR ?__LINE__Var@?1??InitPuttyBomb@@YAJPAUobject_def@@PAJ@Z@4JA
	add	eax, 31					; 0000001fH
	push	eax
	mov	ecx, DWORD PTR _obj$[ebp]
	mov	edx, DWORD PTR [ecx+656]
	imul	edx, 168				; 000000a8H
	movsx	eax, WORD PTR ?LevelModel@@3PAULEVEL_MODEL@@A[edx+42]
	lea	ecx, DWORD PTR [eax*8+2388]
	push	ecx
	call	?DebugMalloc@@YAPAXIHPAD@Z		; DebugMalloc
	add	esp, 12					; 0000000cH
	mov	edx, DWORD PTR _obj$[ebp]
	mov	DWORD PTR [edx+684], eax

; 395  : 	if (!obj->Data) return FALSE;

	mov	eax, DWORD PTR _obj$[ebp]
	cmp	DWORD PTR [eax+684], 0
	jne	SHORT $L83134
	xor	eax, eax
	jmp	$L83122
$L83134:

; 396  : 	bomb = (PUTTYBOMB_OBJ*)obj->Data;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+684]
	mov	DWORD PTR _bomb$[ebp], ecx

; 397  : 
; 398  : 	bomb->Timer = PUTTYBOMB_COUNTDOWN;

	mov	eax, DWORD PTR _bomb$[ebp]
	mov	DWORD PTR [eax], 1092616192		; 41200000H

; 399  : 	obj->player->car.IsBomb = TRUE;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+588]
	mov	DWORD PTR [ecx+3568], 1

; 400  : 	obj->player->car.WillDetonate = FALSE;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+588]
	mov	DWORD PTR [ecx+3572], 0

; 401  : 	obj->player->car.NoReturnTimer = PUTTYBOMB_NORETURN_TIME;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+588]
	mov	DWORD PTR [ecx+3576], 1065353216	; 3f800000H

; 402  : 	bomb->OrigAerialLen = obj->player->car.Aerial.Length;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+588]
	mov	edx, DWORD PTR _bomb$[ebp]
	mov	eax, DWORD PTR [ecx+916]
	mov	DWORD PTR [edx+8], eax

; 403  : 
; 404  : // init bang model + verts
; 405  : 
; 406  : 	model = &LevelModel[obj->DefaultModel].Model;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+656]
	imul	ecx, 168				; 000000a8H
	add	ecx, OFFSET FLAT:?LevelModel@@3PAULEVEL_MODEL@@A+8
	mov	DWORD PTR _model$[ebp], ecx

; 407  : 
; 408  : 	if (model->QuadNumRGB)

	mov	eax, DWORD PTR _model$[ebp]
	movsx	ecx, WORD PTR [eax+40]
	test	ecx, ecx
	je	$L83136

; 409  : 	{
; 410  : 		model->QuadNumTex = model->QuadNumRGB;

	mov	eax, DWORD PTR _model$[ebp]
	mov	ecx, DWORD PTR _model$[ebp]
	mov	dx, WORD PTR [ecx+40]
	mov	WORD PTR [eax+36], dx

; 411  : 		model->TriNumTex = model->TriNumRGB;

	mov	eax, DWORD PTR _model$[ebp]
	mov	ecx, DWORD PTR _model$[ebp]
	mov	dx, WORD PTR [ecx+42]
	mov	WORD PTR [eax+38], dx

; 412  : 		model->QuadNumRGB = 0;

	mov	eax, DWORD PTR _model$[ebp]
	mov	WORD PTR [eax+40], 0

; 413  : 		model->TriNumRGB = 0;

	mov	eax, DWORD PTR _model$[ebp]
	mov	WORD PTR [eax+42], 0

; 414  : 
; 415  : 		for (i = 0 ; i < model->PolyNum ; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $L83137
$L83138:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$L83137:
	mov	eax, DWORD PTR _model$[ebp]
	movsx	ecx, WORD PTR [eax+32]
	cmp	DWORD PTR _i$[ebp], ecx
	jge	$L83136

; 416  : 		{
; 417  : 			model->PolyPtr[i].Tpage = TPAGE_FX3;

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 52					; 00000034H
	mov	ecx, DWORD PTR _model$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	mov	WORD PTR [edx+eax+2], 29		; 0000001dH

; 418  : 			model->PolyPtr[i].Type |= POLY_DOUBLE | POLY_SEMITRANS | POLY_SEMITRANS_ONE;

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 52					; 00000034H
	mov	ecx, DWORD PTR _model$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	movsx	eax, WORD PTR [edx+eax]
	or	eax, 262				; 00000106H
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 52					; 00000034H
	mov	edx, DWORD PTR _model$[ebp]
	mov	edx, DWORD PTR [edx+48]
	mov	WORD PTR [ecx+edx], ax

; 419  : 
; 420  : 			*(long*)&model->PolyRGB[i].rgb[0] = 0xffffff;

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _model$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	mov	DWORD PTR [eax+edx], 16777215		; 00ffffffH

; 421  : 			*(long*)&model->PolyRGB[i].rgb[1] = 0xffffff;

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _model$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	mov	DWORD PTR [edx+eax+4], 16777215		; 00ffffffH

; 422  : 			*(long*)&model->PolyRGB[i].rgb[2] = 0xffffff;

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _model$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	mov	DWORD PTR [edx+eax+8], 16777215		; 00ffffffH

; 423  : 			*(long*)&model->PolyRGB[i].rgb[3] = 0xffffff;

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _model$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	mov	DWORD PTR [edx+eax+12], 16777215	; 00ffffffH

; 424  : 		}

	jmp	$L83138
$L83136:

; 425  : 	}
; 426  : 
; 427  : 	vert = (PUTTYBOMB_VERT*)(bomb + 1);

	mov	eax, DWORD PTR _bomb$[ebp]
	add	eax, 2388				; 00000954H
	mov	DWORD PTR _vert$[ebp], eax

; 428  : 	for (i = 0 ; i < LevelModel[obj->DefaultModel].Model.VertNum ; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $L83145
$L83146:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$L83145:
	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+656]
	imul	ecx, 168				; 000000a8H
	movsx	edx, WORD PTR ?LevelModel@@3PAULEVEL_MODEL@@A[ecx+42]
	cmp	DWORD PTR _i$[ebp], edx
	jge	SHORT $L83147

; 429  : 	{
; 430  : 		vert[i].Time = frand(RAD);

	call	_rand
	mov	DWORD PTR tv332[ebp], eax
	fild	DWORD PTR tv332[ebp]
	fdiv	DWORD PTR __real@46fffe00
	fmul	DWORD PTR __real@40c90fdb
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _vert$[ebp]
	fstp	DWORD PTR [ecx+eax*8]

; 431  : 		vert[i].TimeAdd = frand(5.0f) + 5.0f;

	call	_rand
	mov	DWORD PTR tv336[ebp], eax
	fild	DWORD PTR tv336[ebp]
	fdiv	DWORD PTR __real@46fffe00
	fmul	DWORD PTR __real@40a00000
	fadd	DWORD PTR __real@40a00000
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _vert$[ebp]
	fstp	DWORD PTR [ecx+eax*8+4]

; 432  : 		if (rand() & 1) vert[i].TimeAdd = -vert[i].TimeAdd;

	call	_rand
	and	eax, 1
	je	SHORT $L83150
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _vert$[ebp]
	fld	DWORD PTR [ecx+eax*8+4]
	fchs
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _vert$[ebp]
	fstp	DWORD PTR [eax+edx*8+4]
$L83150:

; 433  : 	}

	jmp	$L83146
$L83147:

; 434  : 
; 435  : // init sfx
; 436  : 
; 437  : 	obj->Sfx3D = CreateSfx3D(SFX_FUSE, SFX_MAX_VOL, 22050, TRUE, &obj->player->car.Body->Centre.Pos);

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+588]
	mov	edx, DWORD PTR [ecx+900]
	add	edx, 20					; 00000014H
	push	edx
	push	1
	push	22050					; 00005622H
	push	127					; 0000007fH
	push	16					; 00000010H
	call	?CreateSfx3D@@YAPAUSAMPLE_3D@@JJJJPAUVectorStruct@@@Z ; CreateSfx3D
	add	esp, 20					; 00000014H
	mov	ecx, DWORD PTR _obj$[ebp]
	mov	DWORD PTR [ecx+680], eax

; 438  : 
; 439  : // return OK
; 440  : 
; 441  : 	return TRUE;

	mov	eax, 1
$L83122:

; 442  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?InitPuttyBomb@@YAJPAUobject_def@@PAJ@Z ENDP		; InitPuttyBomb
_TEXT	ENDS
PUBLIC	?__LINE__Var@?1??InitWaterBomb@@YAJPAUobject_def@@PAJ@Z@4JA ; `InitWaterBomb'::`2'::__LINE__Var
PUBLIC	__real@44fa0000
PUBLIC	__real@43fa0000
PUBLIC	__real@c1700000
PUBLIC	?InitWaterBomb@@YAJPAUobject_def@@PAJ@Z		; InitWaterBomb
PUBLIC	?WaterBombHandler@@YAXPAUobject_def@@@Z		; WaterBombHandler
PUBLIC	?RenderWaterBomb@@YAXPAUobject_def@@@Z		; RenderWaterBomb
EXTRN	?RotVector@@YAXPATMatrixUnion@@PAUVectorStruct@@1@Z:NEAR ; RotVector
;	COMDAT __real@44fa0000
CONST	SEGMENT
__real@44fa0000 DD 044fa0000r			; 2000
CONST	ENDS
;	COMDAT __real@43fa0000
CONST	SEGMENT
__real@43fa0000 DD 043fa0000r			; 500
CONST	ENDS
;	COMDAT __real@c1700000
CONST	SEGMENT
__real@c1700000 DD 0c1700000r			; -15
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??InitWaterBomb@@YAJPAUobject_def@@PAJ@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??InitWaterBomb@@YAJPAUobject_def@@PAJ@Z@4JA DD 01c1H ; `InitWaterBomb'::`2'::__LINE__Var
; Function compile flags: /Odt /ZI
_DATA	ENDS
;	COMDAT ?InitWaterBomb@@YAJPAUobject_def@@PAJ@Z
_TEXT	SEGMENT
tv291 = -84						; size = 4
_vec$ = -16						; size = 12
_bomb$ = -4						; size = 4
_obj$ = 8						; size = 4
_flags$ = 12						; size = 4
?InitWaterBomb@@YAJPAUobject_def@@PAJ@Z PROC NEAR	; InitWaterBomb, COMDAT

; 449  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi

; 450  : 	WATERBOMB_OBJ *bomb = (WATERBOMB_OBJ*)obj->Data;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+684]
	mov	DWORD PTR _bomb$[ebp], ecx

; 451  : 	VEC vec;
; 452  : 
; 453  : // render flags
; 454  : 
; 455  : 	obj->renderflag.light = FALSE;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+584]
	and	ecx, -5					; fffffffbH
	mov	edx, DWORD PTR _obj$[ebp]
	mov	DWORD PTR [edx+584], ecx

; 456  : 
; 457  : // setup handlers
; 458  : 
; 459  : 	obj->aihandler = (AI_HANDLER)WaterBombHandler;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	DWORD PTR [eax+696], OFFSET FLAT:?WaterBombHandler@@YAXPAUobject_def@@@Z ; WaterBombHandler

; 460  : 	obj->collhandler = (COLL_HANDLER)COL_BodyCollHandler;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	DWORD PTR [eax+692], OFFSET FLAT:?COL_BodyCollHandler@@YAXPAUobject_def@@@Z ; COL_BodyCollHandler

; 461  : 	obj->movehandler = (MOVE_HANDLER)MOV_MoveBody;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	DWORD PTR [eax+688], OFFSET FLAT:?MOV_MoveBody@@YAXPAUobject_def@@@Z ; MOV_MoveBody

; 462  : 	obj->renderhandler = (RENDER_HANDLER)RenderWaterBomb;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	DWORD PTR [eax+700], OFFSET FLAT:?RenderWaterBomb@@YAXPAUobject_def@@@Z ; RenderWaterBomb

; 463  : 
; 464  : // load default model
; 465  : 
; 466  : 	obj->DefaultModel = LoadOneLevelModel(LEVEL_MODEL_WATERBOMB, FALSE, obj->renderflag, 0);

	push	0
	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+584]
	push	ecx
	push	0
	push	39					; 00000027H
	call	?LoadOneLevelModel@@YAJJJUrenderflags@@J@Z ; LoadOneLevelModel
	add	esp, 16					; 00000010H
	mov	edx, DWORD PTR _obj$[ebp]
	mov	DWORD PTR [edx+656], eax

; 467  : 	if (obj->DefaultModel == -1) return FALSE;

	mov	eax, DWORD PTR _obj$[ebp]
	cmp	DWORD PTR [eax+656], -1
	jne	SHORT $L83162
	xor	eax, eax
	jmp	$L83154
$L83162:

; 468  : 
; 469  : // remember owner player
; 470  : 
; 471  : 	obj->player = (PLAYER*)flags[0];

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR _flags$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+588], edx

; 472  : 
; 473  : // setup waterbomb
; 474  : 
; 475  : 	bomb->Age = 0.0f;

	mov	eax, DWORD PTR _bomb$[ebp]
	mov	DWORD PTR [eax], 0

; 476  : 	bomb->BangTol = frand(WATERBOMB_BANG_VAR) + WATERBOMB_BANG_MIN;

	call	_rand
	mov	DWORD PTR tv291[ebp], eax
	fild	DWORD PTR tv291[ebp]
	fdiv	DWORD PTR __real@46fffe00
	fmul	DWORD PTR __real@44fa0000
	fadd	DWORD PTR __real@43fa0000
	mov	eax, DWORD PTR _bomb$[ebp]
	fstp	DWORD PTR [eax+4]

; 477  : 
; 478  : // pos / vel
; 479  : 
; 480  : 	RotTransVector(&obj->body.Centre.WMatrix, &obj->body.Centre.Pos, &obj->player->car.WeaponOffset, &obj->body.Centre.Pos);

	mov	eax, DWORD PTR _obj$[ebp]
	add	eax, 20					; 00000014H
	push	eax
	mov	ecx, DWORD PTR _obj$[ebp]
	mov	edx, DWORD PTR [ecx+588]
	add	edx, 3444				; 00000d74H
	push	edx
	mov	eax, DWORD PTR _obj$[ebp]
	add	eax, 20					; 00000014H
	push	eax
	mov	ecx, DWORD PTR _obj$[ebp]
	add	ecx, 100				; 00000064H
	push	ecx
	call	?RotTransVector@@YAXPATMatrixUnion@@PAUVectorStruct@@11@Z ; RotTransVector
	add	esp, 16					; 00000010H

; 481  : 	RotVector(&obj->body.Centre.WMatrix, &WaterBombVel, &vec);

	lea	eax, DWORD PTR _vec$[ebp]
	push	eax
	push	OFFSET FLAT:_WaterBombVel
	mov	ecx, DWORD PTR _obj$[ebp]
	add	ecx, 100				; 00000064H
	push	ecx
	call	?RotVector@@YAXPATMatrixUnion@@PAUVectorStruct@@1@Z ; RotVector
	add	esp, 12					; 0000000cH

; 482  : //	AddVector(&obj->player->car.Body->Centre.Vel, &vec, &obj->body.Centre.Vel);
; 483  : 	SetVector(&obj->body.Centre.Vel, vec.v[X] + obj->player->car.Body->Centre.Vel.v[X], vec.v[Y], vec.v[Z] + obj->player->car.Body->Centre.Vel.v[Z]);

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+588]
	mov	edx, DWORD PTR [ecx+900]
	fld	DWORD PTR _vec$[ebp]
	fadd	DWORD PTR [edx+32]
	mov	eax, DWORD PTR _obj$[ebp]
	fstp	DWORD PTR [eax+32]
	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR _vec$[ebp+4]
	mov	DWORD PTR [eax+36], ecx
	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+588]
	mov	edx, DWORD PTR [ecx+900]
	fld	DWORD PTR _vec$[ebp+8]
	fadd	DWORD PTR [edx+40]
	mov	eax, DWORD PTR _obj$[ebp]
	fstp	DWORD PTR [eax+40]

; 484  : 
; 485  : 	VecEqScalarVec(&obj->body.AngVel, -15.0f, &obj->body.Centre.WMatrix.mv[R]);

	mov	eax, DWORD PTR _obj$[ebp]
	fld	DWORD PTR __real@c1700000
	fmul	DWORD PTR [eax+100]
	mov	ecx, DWORD PTR _obj$[ebp]
	fstp	DWORD PTR [ecx+332]
	mov	eax, DWORD PTR _obj$[ebp]
	fld	DWORD PTR __real@c1700000
	fmul	DWORD PTR [eax+104]
	mov	ecx, DWORD PTR _obj$[ebp]
	fstp	DWORD PTR [ecx+336]
	mov	eax, DWORD PTR _obj$[ebp]
	fld	DWORD PTR __real@c1700000
	fmul	DWORD PTR [eax+108]
	mov	ecx, DWORD PTR _obj$[ebp]
	fstp	DWORD PTR [ecx+340]

; 486  : 
; 487  : // setup sfx
; 488  : 
; 489  : 	obj->Sfx3D = CreateSfx3D(SFX_WATERBOMB, SFX_MAX_VOL, 22050, TRUE, &obj->body.Centre.Pos);

	mov	eax, DWORD PTR _obj$[ebp]
	add	eax, 20					; 00000014H
	push	eax
	push	1
	push	22050					; 00005622H
	push	127					; 0000007fH
	push	13					; 0000000dH
	call	?CreateSfx3D@@YAPAUSAMPLE_3D@@JJJJPAUVectorStruct@@@Z ; CreateSfx3D
	add	esp, 20					; 00000014H
	mov	ecx, DWORD PTR _obj$[ebp]
	mov	DWORD PTR [ecx+680], eax

; 490  : 
; 491  : // Physical properties
; 492  : 
; 493  : 	obj->body.Centre.Mass = Real(0.6f);

	mov	eax, DWORD PTR _obj$[ebp]
	mov	DWORD PTR [eax], 1058642330		; 3f19999aH

; 494  : 	obj->body.Centre.InvMass = ONE / Real(0.6f);

	mov	eax, DWORD PTR _obj$[ebp]
	mov	DWORD PTR [eax+4], 1070945621		; 3fd55555H

; 495  : 	SetMat(&obj->body.BodyInertia, Real(100), ZERO, ZERO, ZERO, Real(100), ZERO, ZERO, ZERO, Real(100));

	push	1120403456				; 42c80000H
	push	0
	push	0
	push	0
	push	1120403456				; 42c80000H
	push	0
	push	0
	push	0
	push	1120403456				; 42c80000H
	mov	eax, DWORD PTR _obj$[ebp]
	add	eax, 224				; 000000e0H
	push	eax
	call	?SetMat@@YAXPATMatrixUnion@@MMMMMMMMM@Z	; SetMat
	add	esp, 40					; 00000028H

; 496  : 	SetMat(&obj->body.BodyInvInertia, ONE / Real(100), ZERO, ZERO, ZERO, ONE / Real(100), ZERO, ZERO, ZERO, ONE / Real(100));

	push	1008981770				; 3c23d70aH
	push	0
	push	0
	push	0
	push	1008981770				; 3c23d70aH
	push	0
	push	0
	push	0
	push	1008981770				; 3c23d70aH
	mov	eax, DWORD PTR _obj$[ebp]
	add	eax, 260				; 00000104H
	push	eax
	call	?SetMat@@YAXPATMatrixUnion@@MMMMMMMMM@Z	; SetMat
	add	esp, 40					; 00000028H

; 497  : 
; 498  : 	obj->body.Centre.Hardness = Real(0.2);

	mov	eax, DWORD PTR _obj$[ebp]
	mov	DWORD PTR [eax+172], 1045220557		; 3e4ccccdH

; 499  : 	obj->body.Centre.Resistance = Real(0.001);

	mov	eax, DWORD PTR _obj$[ebp]
	mov	DWORD PTR [eax+176], 981668463		; 3a83126fH

; 500  : 	obj->body.DefaultAngRes = Real(0.005);

	mov	eax, DWORD PTR _obj$[ebp]
	mov	DWORD PTR [eax+368], 1000593162		; 3ba3d70aH

; 501  : 	obj->body.AngResistance = Real(0.005);

	mov	eax, DWORD PTR _obj$[ebp]
	mov	DWORD PTR [eax+376], 1000593162		; 3ba3d70aH

; 502  : 	obj->body.AngResMod = Real(1.0);

	mov	eax, DWORD PTR _obj$[ebp]
	mov	DWORD PTR [eax+372], 1065353216		; 3f800000H

; 503  : 	obj->body.Centre.Grip = Real(0.02);

	mov	eax, DWORD PTR _obj$[ebp]
	mov	DWORD PTR [eax+180], 1017370378		; 3ca3d70aH

; 504  : 	obj->body.Centre.StaticFriction = Real(2.0);

	mov	eax, DWORD PTR _obj$[ebp]
	mov	DWORD PTR [eax+184], 1073741824		; 40000000H

; 505  : 	obj->body.Centre.KineticFriction = Real(1.5);

	mov	eax, DWORD PTR _obj$[ebp]
	mov	DWORD PTR [eax+188], 1069547520		; 3fc00000H

; 506  : 
; 507  : // Collision skin
; 508  : 
; 509  : 	obj->CollType = COLL_TYPE_BODY;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	DWORD PTR [eax+660], 1

; 510  : 	SetBodySphere(&obj->body);

	mov	eax, DWORD PTR _obj$[ebp]
	mov	DWORD PTR [eax+472], 1

; 511  : 	obj->body.CollSkin.Sphere = (SPHERE *)malloc(sizeof(SPHERE));

	push	OFFSET FLAT:??_C@_0IL@GBHCIHE@c?3?2documents?5and?5settings?2jarhea@
	mov	eax, DWORD PTR ?__LINE__Var@?1??InitWaterBomb@@YAJPAUobject_def@@PAJ@Z@4JA
	add	eax, 62					; 0000003eH
	push	eax
	push	16					; 00000010H
	call	?DebugMalloc@@YAPAXIHPAD@Z		; DebugMalloc
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _obj$[ebp]
	mov	DWORD PTR [ecx+396], eax

; 512  : 	CopyVec(&WaterBombOff, &obj->body.CollSkin.Sphere[0].Pos);

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+396]
	mov	edx, DWORD PTR _WaterBombOff
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+396]
	mov	edx, DWORD PTR _WaterBombOff+4
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+396]
	mov	edx, DWORD PTR _WaterBombOff+8
	mov	DWORD PTR [ecx+8], edx

; 513  : 	obj->body.CollSkin.Sphere[0].Radius = WATERBOMB_RADIUS;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+396]
	mov	DWORD PTR [ecx+12], 1106247680		; 41f00000H

; 514  : 	obj->body.CollSkin.NSpheres = 1;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	WORD PTR [eax+408], 1

; 515  : 	CreateCopyCollSkin(&obj->body.CollSkin);

	mov	eax, DWORD PTR _obj$[ebp]
	add	eax, 380				; 0000017cH
	push	eax
	call	?CreateCopyCollSkin@@YA_NPAUCollSkinStruct@@@Z ; CreateCopyCollSkin
	add	esp, 4

; 516  : 	MakeTightLocalBBox(&obj->body.CollSkin);

	mov	eax, DWORD PTR _obj$[ebp]
	add	eax, 380				; 0000017cH
	push	eax
	call	?MakeTightLocalBBox@@YAXPAUCollSkinStruct@@@Z ; MakeTightLocalBBox
	add	esp, 4

; 517  : 	BuildWorldSkin(&obj->body.CollSkin, &obj->body.Centre.Pos, &obj->body.Centre.WMatrix);

	mov	eax, DWORD PTR _obj$[ebp]
	add	eax, 100				; 00000064H
	push	eax
	mov	ecx, DWORD PTR _obj$[ebp]
	add	ecx, 20					; 00000014H
	push	ecx
	mov	edx, DWORD PTR _obj$[ebp]
	add	edx, 380				; 0000017cH
	push	edx
	call	?BuildWorldSkin@@YAXPAUCollSkinStruct@@PAUVectorStruct@@PATMatrixUnion@@@Z ; BuildWorldSkin
	add	esp, 12					; 0000000cH

; 518  : 
; 519  : // return OK
; 520  : 
; 521  : 	return TRUE;

	mov	eax, 1
$L83154:

; 522  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?InitWaterBomb@@YAJPAUobject_def@@PAJ@Z ENDP		; InitWaterBomb
_TEXT	ENDS
PUBLIC	?__LINE__Var@?1??InitElectroPulse@@YAJPAUobject_def@@PAJ@Z@4JA ; `InitElectroPulse'::`2'::__LINE__Var
PUBLIC	?InitElectroPulse@@YAJPAUobject_def@@PAJ@Z	; InitElectroPulse
PUBLIC	?ElectroPulseHandler@@YAXPAUobject_def@@@Z	; ElectroPulseHandler
PUBLIC	?RenderElectroPulse@@YAXPAUobject_def@@@Z	; RenderElectroPulse
EXTRN	_memcpy:NEAR
;	COMDAT ?__LINE__Var@?1??InitElectroPulse@@YAJPAUobject_def@@PAJ@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??InitElectroPulse@@YAJPAUobject_def@@PAJ@Z@4JA DD 0211H ; `InitElectroPulse'::`2'::__LINE__Var
; Function compile flags: /Odt /ZI
_DATA	ENDS
;	COMDAT ?InitElectroPulse@@YAJPAUobject_def@@PAJ@Z
_TEXT	SEGMENT
tv550 = -100						; size = 4
tv546 = -100						; size = 4
_evert$ = -32						; size = 4
_dmodel$ = -28						; size = 4
_smodel$ = -24						; size = 4
_electro$ = -20						; size = 4
_mul$ = -16						; size = 4
_off$ = -12						; size = 4
_ram$ = -8						; size = 4
_i$ = -4						; size = 4
_obj$ = 8						; size = 4
_flags$ = 12						; size = 4
?InitElectroPulse@@YAJPAUobject_def@@PAJ@Z PROC NEAR	; InitElectroPulse, COMDAT

; 529  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 100				; 00000064H
	push	ebx
	push	esi
	push	edi

; 530  : 	long i, ram, off;
; 531  : 	REAL mul;
; 532  : 	ELECTROPULSE_OBJ *electro;
; 533  : 	MODEL *smodel, *dmodel;
; 534  : 	ELECTROPULSE_VERT *evert;
; 535  : 
; 536  : // set render flags
; 537  : 
; 538  : 	obj->renderflag.envmap = FALSE;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+584]
	and	ecx, -2					; fffffffeH
	mov	edx, DWORD PTR _obj$[ebp]
	mov	DWORD PTR [edx+584], ecx

; 539  : 	obj->renderflag.light = FALSE;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+584]
	and	ecx, -5					; fffffffbH
	mov	edx, DWORD PTR _obj$[ebp]
	mov	DWORD PTR [edx+584], ecx

; 540  : 	obj->renderflag.reflect = FALSE;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+584]
	and	ecx, -17				; ffffffefH
	mov	edx, DWORD PTR _obj$[ebp]
	mov	DWORD PTR [edx+584], ecx

; 541  : 	obj->renderflag.meshfx = FALSE;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+584]
	and	ecx, -257				; fffffeffH
	mov	edx, DWORD PTR _obj$[ebp]
	mov	DWORD PTR [edx+584], ecx

; 542  : 
; 543  : // setup handlers
; 544  : 
; 545  : 	obj->aihandler = (AI_HANDLER)ElectroPulseHandler;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	DWORD PTR [eax+696], OFFSET FLAT:?ElectroPulseHandler@@YAXPAUobject_def@@@Z ; ElectroPulseHandler

; 546  : 	obj->renderhandler = (RENDER_HANDLER)RenderElectroPulse;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	DWORD PTR [eax+700], OFFSET FLAT:?RenderElectroPulse@@YAXPAUobject_def@@@Z ; RenderElectroPulse

; 547  : 
; 548  : // remember owner player
; 549  : 
; 550  : 	obj->player = (PLAYER*)flags[0];

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR _flags$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+588], edx

; 551  : 
; 552  : // calc + alloc ram
; 553  : 
; 554  : 	smodel = &obj->player->car.Models->Body[0];

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+588]
	mov	edx, DWORD PTR [ecx+864]
	mov	eax, DWORD PTR [edx+6064]
	mov	DWORD PTR _smodel$[ebp], eax

; 555  : 
; 556  : 	ram = sizeof(ELECTROPULSE_OBJ);

	mov	DWORD PTR _ram$[ebp], 404		; 00000194H

; 557  : 	ram += sizeof(MODEL_POLY) * smodel->PolyNum;

	mov	eax, DWORD PTR _smodel$[ebp]
	movsx	ecx, WORD PTR [eax+32]
	imul	ecx, 52					; 00000034H
	add	ecx, DWORD PTR _ram$[ebp]
	mov	DWORD PTR _ram$[ebp], ecx

; 558  : 	ram += sizeof(POLY_RGB) * smodel->PolyNum;

	mov	eax, DWORD PTR _smodel$[ebp]
	movsx	ecx, WORD PTR [eax+32]
	shl	ecx, 4
	add	ecx, DWORD PTR _ram$[ebp]
	mov	DWORD PTR _ram$[ebp], ecx

; 559  : 	ram += sizeof(MODEL_VERTEX) * smodel->VertNum;

	mov	eax, DWORD PTR _smodel$[ebp]
	movsx	ecx, WORD PTR [eax+34]
	imul	ecx, 88					; 00000058H
	add	ecx, DWORD PTR _ram$[ebp]
	mov	DWORD PTR _ram$[ebp], ecx

; 560  : 	ram += sizeof(ELECTROPULSE_VERT) * smodel->VertNum;

	mov	eax, DWORD PTR _smodel$[ebp]
	movsx	ecx, WORD PTR [eax+34]
	mov	edx, DWORD PTR _ram$[ebp]
	lea	eax, DWORD PTR [edx+ecx*8]
	mov	DWORD PTR _ram$[ebp], eax

; 561  : 
; 562  : 	obj->Data = malloc(ram);

	push	OFFSET FLAT:??_C@_0IL@GBHCIHE@c?3?2documents?5and?5settings?2jarhea@
	mov	eax, DWORD PTR ?__LINE__Var@?1??InitElectroPulse@@YAJPAUobject_def@@PAJ@Z@4JA
	add	eax, 33					; 00000021H
	push	eax
	mov	ecx, DWORD PTR _ram$[ebp]
	push	ecx
	call	?DebugMalloc@@YAPAXIHPAD@Z		; DebugMalloc
	add	esp, 12					; 0000000cH
	mov	edx, DWORD PTR _obj$[ebp]
	mov	DWORD PTR [edx+684], eax

; 563  : 	if (!obj->Data)

	mov	eax, DWORD PTR _obj$[ebp]
	cmp	DWORD PTR [eax+684], 0
	jne	SHORT $L83205

; 564  : 		return FALSE;

	xor	eax, eax
	jmp	$L83187
$L83205:

; 565  : 
; 566  : // setup electro pulse
; 567  : 
; 568  : 	electro = (ELECTROPULSE_OBJ*)obj->Data;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+684]
	mov	DWORD PTR _electro$[ebp], ecx

; 569  : 	electro->Age = 0.0f;

	mov	eax, DWORD PTR _electro$[ebp]
	mov	DWORD PTR [eax], 0

; 570  : 	electro->JumpFlag = 0;

	mov	eax, DWORD PTR _electro$[ebp]
	mov	DWORD PTR [eax+64], 0

; 571  : 
; 572  : // setup model
; 573  : 
; 574  : 	dmodel = &electro->Model;

	mov	eax, DWORD PTR _electro$[ebp]
	add	eax, 4
	mov	DWORD PTR _dmodel$[ebp], eax

; 575  : 
; 576  : 	memcpy(dmodel, smodel, sizeof(MODEL));

	push	60					; 0000003cH
	mov	eax, DWORD PTR _smodel$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dmodel$[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 577  : 	dmodel->PolyPtr = (MODEL_POLY*)(electro + 1);

	mov	eax, DWORD PTR _electro$[ebp]
	add	eax, 404				; 00000194H
	mov	ecx, DWORD PTR _dmodel$[ebp]
	mov	DWORD PTR [ecx+48], eax

; 578  : 	dmodel->PolyRGB = (POLY_RGB*)(dmodel->PolyPtr + dmodel->PolyNum);

	mov	eax, DWORD PTR _dmodel$[ebp]
	movsx	ecx, WORD PTR [eax+32]
	imul	ecx, 52					; 00000034H
	mov	edx, DWORD PTR _dmodel$[ebp]
	add	ecx, DWORD PTR [edx+48]
	mov	eax, DWORD PTR _dmodel$[ebp]
	mov	DWORD PTR [eax+44], ecx

; 579  : 	dmodel->VertPtr = (MODEL_VERTEX*)(dmodel->PolyRGB + dmodel->PolyNum);

	mov	eax, DWORD PTR _dmodel$[ebp]
	movsx	ecx, WORD PTR [eax+32]
	shl	ecx, 4
	mov	edx, DWORD PTR _dmodel$[ebp]
	add	ecx, DWORD PTR [edx+44]
	mov	eax, DWORD PTR _dmodel$[ebp]
	mov	DWORD PTR [eax+52], ecx

; 580  : 
; 581  : 	off = (long)dmodel->VertPtr - (long)smodel->VertPtr;

	mov	eax, DWORD PTR _dmodel$[ebp]
	mov	ecx, DWORD PTR _smodel$[ebp]
	mov	edx, DWORD PTR [eax+52]
	sub	edx, DWORD PTR [ecx+52]
	mov	DWORD PTR _off$[ebp], edx

; 582  : 
; 583  : 	for (i = 0 ; i < dmodel->PolyNum ; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $L83213
$L83214:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$L83213:
	mov	eax, DWORD PTR _dmodel$[ebp]
	movsx	ecx, WORD PTR [eax+32]
	cmp	DWORD PTR _i$[ebp], ecx
	jge	$L83215

; 584  : 	{
; 585  : 		dmodel->PolyPtr[i] = smodel->PolyPtr[i];

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 52					; 00000034H
	mov	ecx, DWORD PTR _smodel$[ebp]
	mov	esi, DWORD PTR [ecx+48]
	add	esi, eax
	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 52					; 00000034H
	mov	eax, DWORD PTR _dmodel$[ebp]
	mov	edi, DWORD PTR [eax+48]
	add	edi, edx
	mov	ecx, 13					; 0000000dH
	rep movsd

; 586  : 
; 587  : 		dmodel->PolyPtr[i].Type |= POLY_SEMITRANS | POLY_SEMITRANS_ONE;

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 52					; 00000034H
	mov	ecx, DWORD PTR _dmodel$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	movsx	eax, WORD PTR [edx+eax]
	or	eax, 260				; 00000104H
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 52					; 00000034H
	mov	edx, DWORD PTR _dmodel$[ebp]
	mov	edx, DWORD PTR [edx+48]
	mov	WORD PTR [ecx+edx], ax

; 588  : 		dmodel->PolyPtr[i].Tpage = TPAGE_FX1;

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 52					; 00000034H
	mov	ecx, DWORD PTR _dmodel$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	mov	WORD PTR [edx+eax+2], 27		; 0000001bH

; 589  : 
; 590  : 		dmodel->PolyPtr[i].v0 = (MODEL_VERTEX*)((long)dmodel->PolyPtr[i].v0 + off);

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 52					; 00000034H
	mov	ecx, DWORD PTR _dmodel$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	mov	eax, DWORD PTR [edx+eax+36]
	add	eax, DWORD PTR _off$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 52					; 00000034H
	mov	edx, DWORD PTR _dmodel$[ebp]
	mov	edx, DWORD PTR [edx+48]
	mov	DWORD PTR [edx+ecx+36], eax

; 591  : 		dmodel->PolyPtr[i].v1 = (MODEL_VERTEX*)((long)dmodel->PolyPtr[i].v1 + off);

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 52					; 00000034H
	mov	ecx, DWORD PTR _dmodel$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	mov	eax, DWORD PTR [edx+eax+40]
	add	eax, DWORD PTR _off$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 52					; 00000034H
	mov	edx, DWORD PTR _dmodel$[ebp]
	mov	edx, DWORD PTR [edx+48]
	mov	DWORD PTR [edx+ecx+40], eax

; 592  : 		dmodel->PolyPtr[i].v2 = (MODEL_VERTEX*)((long)dmodel->PolyPtr[i].v2 + off);

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 52					; 00000034H
	mov	ecx, DWORD PTR _dmodel$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	mov	eax, DWORD PTR [edx+eax+44]
	add	eax, DWORD PTR _off$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 52					; 00000034H
	mov	edx, DWORD PTR _dmodel$[ebp]
	mov	edx, DWORD PTR [edx+48]
	mov	DWORD PTR [edx+ecx+44], eax

; 593  : 		dmodel->PolyPtr[i].v3 = (MODEL_VERTEX*)((long)dmodel->PolyPtr[i].v3 + off);

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 52					; 00000034H
	mov	ecx, DWORD PTR _dmodel$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	mov	eax, DWORD PTR [edx+eax+48]
	add	eax, DWORD PTR _off$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 52					; 00000034H
	mov	edx, DWORD PTR _dmodel$[ebp]
	mov	edx, DWORD PTR [edx+48]
	mov	DWORD PTR [edx+ecx+48], eax

; 594  : 
; 595  : 		*(long*)&dmodel->PolyRGB[i].rgb[0] = 0;

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _dmodel$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	mov	DWORD PTR [eax+edx], 0

; 596  : 		*(long*)&dmodel->PolyRGB[i].rgb[1] = 0;

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _dmodel$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	mov	DWORD PTR [edx+eax+4], 0

; 597  : 		*(long*)&dmodel->PolyRGB[i].rgb[2] = 0;

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _dmodel$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	mov	DWORD PTR [edx+eax+8], 0

; 598  : 		*(long*)&dmodel->PolyRGB[i].rgb[3] = 0;

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _dmodel$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	mov	DWORD PTR [edx+eax+12], 0

; 599  : 	}

	jmp	$L83214
$L83215:

; 600  : 
; 601  : 	for (i = 0 ; i < dmodel->VertNum ; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $L83228
$L83229:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$L83228:
	mov	eax, DWORD PTR _dmodel$[ebp]
	movsx	ecx, WORD PTR [eax+34]
	cmp	DWORD PTR _i$[ebp], ecx
	jge	$L83230

; 602  : 	{
; 603  : 		dmodel->VertPtr[i] = smodel->VertPtr[i];

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 88					; 00000058H
	mov	ecx, DWORD PTR _smodel$[ebp]
	mov	esi, DWORD PTR [ecx+52]
	add	esi, eax
	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 88					; 00000058H
	mov	eax, DWORD PTR _dmodel$[ebp]
	mov	edi, DWORD PTR [eax+52]
	add	edi, edx
	mov	ecx, 22					; 00000016H
	rep movsd

; 604  : 
; 605  : 		mul = 2.0f / Length((VEC*)&dmodel->VertPtr[i].x) + 1.0f;

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 88					; 00000058H
	mov	ecx, DWORD PTR _dmodel$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 88					; 00000058H
	mov	esi, DWORD PTR _dmodel$[ebp]
	mov	esi, DWORD PTR [esi+52]
	fld	DWORD PTR [edx+eax]
	fmul	DWORD PTR [esi+ecx]
	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 88					; 00000058H
	mov	eax, DWORD PTR _dmodel$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 88					; 00000058H
	mov	esi, DWORD PTR _dmodel$[ebp]
	mov	esi, DWORD PTR [esi+52]
	fld	DWORD PTR [ecx+edx+4]
	fmul	DWORD PTR [esi+eax+4]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 88					; 00000058H
	mov	edx, DWORD PTR _dmodel$[ebp]
	mov	eax, DWORD PTR [edx+52]
	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 88					; 00000058H
	mov	esi, DWORD PTR _dmodel$[ebp]
	mov	esi, DWORD PTR [esi+52]
	fld	DWORD PTR [eax+ecx+8]
	fmul	DWORD PTR [esi+edx+8]
	faddp	ST(1), ST(0)
	push	ecx
	fstp	DWORD PTR [esp]
	call	?sqrt@@YAMM@Z				; sqrt
	add	esp, 4
	fdivr	DWORD PTR __real@40000000
	fadd	DWORD PTR __real@3f800000
	fstp	DWORD PTR _mul$[ebp]

; 606  : 		dmodel->VertPtr[i].x *= mul;

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 88					; 00000058H
	mov	ecx, DWORD PTR _dmodel$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	fld	DWORD PTR _mul$[ebp]
	fmul	DWORD PTR [edx+eax]
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 88					; 00000058H
	mov	ecx, DWORD PTR _dmodel$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	fstp	DWORD PTR [eax+edx]

; 607  : 		dmodel->VertPtr[i].y *= mul;

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 88					; 00000058H
	mov	ecx, DWORD PTR _dmodel$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	fld	DWORD PTR _mul$[ebp]
	fmul	DWORD PTR [edx+eax+4]
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 88					; 00000058H
	mov	ecx, DWORD PTR _dmodel$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	fstp	DWORD PTR [edx+eax+4]

; 608  : 		dmodel->VertPtr[i].z *= mul;

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 88					; 00000058H
	mov	ecx, DWORD PTR _dmodel$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	fld	DWORD PTR _mul$[ebp]
	fmul	DWORD PTR [edx+eax+8]
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 88					; 00000058H
	mov	ecx, DWORD PTR _dmodel$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	fstp	DWORD PTR [edx+eax+8]

; 609  : 	}

	jmp	$L83229
$L83230:

; 610  : 
; 611  : // setup electro verts
; 612  : 
; 613  : 	evert = (ELECTROPULSE_VERT*)(dmodel->VertPtr + dmodel->VertNum);

	mov	eax, DWORD PTR _dmodel$[ebp]
	movsx	ecx, WORD PTR [eax+34]
	imul	ecx, 88					; 00000058H
	mov	edx, DWORD PTR _dmodel$[ebp]
	add	ecx, DWORD PTR [edx+52]
	mov	DWORD PTR _evert$[ebp], ecx

; 614  : 	for (i = 0 ; i < dmodel->VertNum ; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $L83239
$L83240:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$L83239:
	mov	eax, DWORD PTR _dmodel$[ebp]
	movsx	ecx, WORD PTR [eax+34]
	cmp	DWORD PTR _i$[ebp], ecx
	jge	SHORT $L83241

; 615  : 	{
; 616  : 		evert[i].Time = frand(RAD);

	call	_rand
	mov	DWORD PTR tv546[ebp], eax
	fild	DWORD PTR tv546[ebp]
	fdiv	DWORD PTR __real@46fffe00
	fmul	DWORD PTR __real@40c90fdb
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _evert$[ebp]
	fstp	DWORD PTR [ecx+eax*8]

; 617  : 		evert[i].TimeAdd = frand(5.0f) + 1.0f;

	call	_rand
	mov	DWORD PTR tv550[ebp], eax
	fild	DWORD PTR tv550[ebp]
	fdiv	DWORD PTR __real@46fffe00
	fmul	DWORD PTR __real@40a00000
	fadd	DWORD PTR __real@3f800000
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _evert$[ebp]
	fstp	DWORD PTR [ecx+eax*8+4]

; 618  : 		if (rand() & 1) evert[i].TimeAdd = -evert[i].TimeAdd;

	call	_rand
	and	eax, 1
	je	SHORT $L83244
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _evert$[ebp]
	fld	DWORD PTR [ecx+eax*8+4]
	fchs
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _evert$[ebp]
	fstp	DWORD PTR [eax+edx*8+4]
$L83244:

; 619  : 	}

	jmp	SHORT $L83240
$L83241:

; 620  : 
; 621  : // setup light
; 622  : 
; 623  : 	obj->Light = AllocLight();

	call	?AllocLight@@YAPAULIGHT@@XZ		; AllocLight
	mov	ecx, DWORD PTR _obj$[ebp]
	mov	DWORD PTR [ecx+672], eax

; 624  : 	if (obj->Light)

	mov	eax, DWORD PTR _obj$[ebp]
	cmp	DWORD PTR [eax+672], 0
	je	SHORT $L83245

; 625  : 	{
; 626  : 		obj->Light->Reach = 768;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+672]
	mov	DWORD PTR [ecx+12], 1145044992		; 44400000H

; 627  : 		obj->Light->Flag = LIGHT_FIXED | LIGHT_MOVING;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+672]
	mov	BYTE PTR [ecx+100], 3

; 628  : 		obj->Light->Type = LIGHT_OMNI;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+672]
	mov	BYTE PTR [ecx+101], 0

; 629  : 		obj->Light->r = 0;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+672]
	mov	DWORD PTR [ecx+88], 0

; 630  : 		obj->Light->g = 0;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+672]
	mov	DWORD PTR [ecx+92], 0

; 631  : 		obj->Light->b = 0;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+672]
	mov	DWORD PTR [ecx+96], 0
$L83245:

; 632  : 	}
; 633  : 
; 634  : // setup sfx
; 635  : 
; 636  : 	obj->Sfx3D = CreateSfx3D(SFX_ELECTROPULSE, SFX_MAX_VOL, 22050, TRUE, &obj->body.Centre.Pos);

	mov	eax, DWORD PTR _obj$[ebp]
	add	eax, 20					; 00000014H
	push	eax
	push	1
	push	22050					; 00005622H
	push	127					; 0000007fH
	push	8
	call	?CreateSfx3D@@YAPAUSAMPLE_3D@@JJJJPAUVectorStruct@@@Z ; CreateSfx3D
	add	esp, 20					; 00000014H
	mov	ecx, DWORD PTR _obj$[ebp]
	mov	DWORD PTR [ecx+680], eax

; 637  : 
; 638  : // return OK
; 639  : 
; 640  : 	return TRUE;

	mov	eax, 1
$L83187:

; 641  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?InitElectroPulse@@YAJPAUobject_def@@PAJ@Z ENDP		; InitElectroPulse
_TEXT	ENDS
PUBLIC	__real@447a0000
PUBLIC	__real@00000000
PUBLIC	?InitOilSlick@@YAJPAUobject_def@@PAJ@Z		; InitOilSlick
PUBLIC	?OilSlickHandler@@YAXPAUobject_def@@@Z		; OilSlickHandler
PUBLIC	?RenderOilSlick@@YAXPAUobject_def@@@Z		; RenderOilSlick
EXTRN	?LineOfSightDist@@YA_NPAUVectorStruct@@0PAMPAPAUPlaneStruct@@@Z:NEAR ; LineOfSightDist
;	COMDAT __real@447a0000
CONST	SEGMENT
__real@447a0000 DD 0447a0000r			; 1000
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
; Function compile flags: /Odt /ZI
CONST	ENDS
;	COMDAT ?InitOilSlick@@YAJPAUobject_def@@PAJ@Z
_TEXT	SEGMENT
_vec$ = -24						; size = 12
_time$ = -12						; size = 4
_car$ = -8						; size = 4
_oil$ = -4						; size = 4
_obj$ = 8						; size = 4
_flags$ = 12						; size = 4
?InitOilSlick@@YAJPAUobject_def@@PAJ@Z PROC NEAR	; InitOilSlick, COMDAT

; 649  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	ebx
	push	esi
	push	edi

; 650  : 	OILSLICK_OBJ *oil = (OILSLICK_OBJ*)obj->Data;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+684]
	mov	DWORD PTR _oil$[ebp], ecx

; 651  : 	CAR *car;
; 652  : 	REAL time;
; 653  : 	VEC vec;
; 654  : 
; 655  : // setup handlers
; 656  : 
; 657  : 	obj->aihandler = (AI_HANDLER)OilSlickHandler;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	DWORD PTR [eax+696], OFFSET FLAT:?OilSlickHandler@@YAXPAUobject_def@@@Z ; OilSlickHandler

; 658  : #ifdef _PC
; 659  : 	obj->renderhandler = (RENDER_HANDLER)RenderOilSlick;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	DWORD PTR [eax+700], OFFSET FLAT:?RenderOilSlick@@YAXPAUobject_def@@@Z ; RenderOilSlick

; 660  : #endif
; 661  : #ifdef _N64
; 662  : 	obj->renderhandler = NULL;
; 663  : #endif
; 664  : 
; 665  : // remember owner player
; 666  : 
; 667  : 	obj->player = (PLAYER*)flags[0];

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR _flags$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+588], edx

; 668  : 
; 669  : // setup
; 670  : 
; 671  : 	car = &obj->player->car;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+588]
	add	ecx, 44					; 0000002cH
	mov	DWORD PTR _car$[ebp], ecx

; 672  : 
; 673  : 	oil->Mode = 0;

	mov	eax, DWORD PTR _oil$[ebp]
	mov	DWORD PTR [eax], 0

; 674  : 	oil->Age = 0.0f;

	mov	eax, DWORD PTR _oil$[ebp]
	mov	DWORD PTR [eax+4], 0

; 675  : 
; 676  : 	CopyVec(&car->Body->Centre.Pos, &obj->body.Centre.Pos);

	mov	eax, DWORD PTR _car$[ebp]
	mov	ecx, DWORD PTR [eax+856]
	mov	edx, DWORD PTR _obj$[ebp]
	mov	eax, DWORD PTR [ecx+20]
	mov	DWORD PTR [edx+20], eax
	mov	eax, DWORD PTR _car$[ebp]
	mov	ecx, DWORD PTR [eax+856]
	mov	edx, DWORD PTR _obj$[ebp]
	mov	eax, DWORD PTR [ecx+24]
	mov	DWORD PTR [edx+24], eax
	mov	eax, DWORD PTR _car$[ebp]
	mov	ecx, DWORD PTR [eax+856]
	mov	edx, DWORD PTR _obj$[ebp]
	mov	eax, DWORD PTR [ecx+28]
	mov	DWORD PTR [edx+28], eax

; 677  : 
; 678  : 	SetVector(&obj->body.Centre.Vel, 0, 0, 0);

	mov	eax, DWORD PTR _obj$[ebp]
	mov	DWORD PTR [eax+32], 0
	mov	eax, DWORD PTR _obj$[ebp]
	mov	DWORD PTR [eax+36], 0
	mov	eax, DWORD PTR _obj$[ebp]
	mov	DWORD PTR [eax+40], 0

; 679  : 
; 680  : 	SetVector(&vec, obj->body.Centre.Pos.v[X], obj->body.Centre.Pos.v[Y] + 1000.0f, obj->body.Centre.Pos.v[Z]);

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR _vec$[ebp], ecx
	mov	eax, DWORD PTR _obj$[ebp]
	fld	DWORD PTR [eax+24]
	fadd	DWORD PTR __real@447a0000
	fstp	DWORD PTR _vec$[ebp+4]
	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR _vec$[ebp+8], ecx

; 681  : 	LineOfSightDist(&obj->body.Centre.Pos, &vec, &time, NULL);

	push	0
	lea	eax, DWORD PTR _time$[ebp]
	push	eax
	lea	ecx, DWORD PTR _vec$[ebp]
	push	ecx
	mov	edx, DWORD PTR _obj$[ebp]
	add	edx, 20					; 00000014H
	push	edx
	call	?LineOfSightDist@@YA_NPAUVectorStruct@@0PAMPAPAUPlaneStruct@@@Z ; LineOfSightDist
	add	esp, 16					; 00000010H

; 682  : 	if (time > 0.0f && time < 1.0f)

	fld	DWORD PTR _time$[ebp]
	fcomp	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $L83258
	fld	DWORD PTR _time$[ebp]
	fcomp	DWORD PTR __real@3f800000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L83258

; 683  : 		oil->LandHeight = obj->body.Centre.Pos.v[Y] + time * 1000.0f;

	fld	DWORD PTR _time$[ebp]
	fmul	DWORD PTR __real@447a0000
	mov	eax, DWORD PTR _obj$[ebp]
	fadd	DWORD PTR [eax+24]
	mov	ecx, DWORD PTR _oil$[ebp]
	fstp	DWORD PTR [ecx+8]

; 684  : 	else

	jmp	SHORT $L83259
$L83258:

; 685  : 		oil->LandHeight = vec.v[Y];

	mov	eax, DWORD PTR _oil$[ebp]
	mov	ecx, DWORD PTR _vec$[ebp+4]
	mov	DWORD PTR [eax+8], ecx
$L83259:

; 686  : 
; 687  : 	oil->MaxSize = (REAL)flags[1];

	mov	eax, DWORD PTR _flags$[ebp]
	fild	DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _oil$[ebp]
	fstp	DWORD PTR [ecx+16]

; 688  : 
; 689  : // return OK
; 690  : 
; 691  : 	return TRUE;

	mov	eax, 1

; 692  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?InitOilSlick@@YAJPAUobject_def@@PAJ@Z ENDP		; InitOilSlick
_TEXT	ENDS
PUBLIC	?InitOilSlickDropper@@YAJPAUobject_def@@PAJ@Z	; InitOilSlickDropper
PUBLIC	?OilSlickDropperHandler@@YAXPAUobject_def@@@Z	; OilSlickDropperHandler
; Function compile flags: /Odt /ZI
;	COMDAT ?InitOilSlickDropper@@YAJPAUobject_def@@PAJ@Z
_TEXT	SEGMENT
_dropper$ = -4						; size = 4
_obj$ = 8						; size = 4
_flags$ = 12						; size = 4
?InitOilSlickDropper@@YAJPAUobject_def@@PAJ@Z PROC NEAR	; InitOilSlickDropper, COMDAT

; 699  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 700  : 	OILSLICK_DROPPER_OBJ *dropper = (OILSLICK_DROPPER_OBJ*)obj->Data;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+684]
	mov	DWORD PTR _dropper$[ebp], ecx

; 701  : 
; 702  : // setup handlers
; 703  : 
; 704  : 	obj->aihandler = (AI_HANDLER)OilSlickDropperHandler;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	DWORD PTR [eax+696], OFFSET FLAT:?OilSlickDropperHandler@@YAXPAUobject_def@@@Z ; OilSlickDropperHandler

; 705  : 
; 706  : // remember owner player
; 707  : 
; 708  : 	obj->player = (PLAYER*)flags[0];

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR _flags$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+588], edx

; 709  : 
; 710  : // setup
; 711  : 
; 712  : 	dropper->Count = 0;

	mov	eax, DWORD PTR _dropper$[ebp]
	mov	DWORD PTR [eax], 0

; 713  : 	dropper->Age = 0;

	mov	eax, DWORD PTR _dropper$[ebp]
	mov	DWORD PTR [eax+4], 0

; 714  : 
; 715  : 	CopyVec(&obj->body.Centre.Pos, &dropper->LastPos);

	mov	eax, DWORD PTR _dropper$[ebp]
	mov	ecx, DWORD PTR _obj$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR [eax+8], edx
	mov	eax, DWORD PTR _dropper$[ebp]
	mov	ecx, DWORD PTR _obj$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _dropper$[ebp]
	mov	ecx, DWORD PTR _obj$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR [eax+16], edx

; 716  : 
; 717  : // return OK
; 718  : 
; 719  : 	return TRUE;

	mov	eax, 1

; 720  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?InitOilSlickDropper@@YAJPAUobject_def@@PAJ@Z ENDP	; InitOilSlickDropper
_TEXT	ENDS
PUBLIC	?__LINE__Var@?1??InitChromeBall@@YAJPAUobject_def@@PAJ@Z@4JA ; `InitChromeBall'::`2'::__LINE__Var
PUBLIC	__real@c28c0000
PUBLIC	__real@c4000000
PUBLIC	?InitChromeBall@@YAJPAUobject_def@@PAJ@Z	; InitChromeBall
PUBLIC	?ChromeBallHandler@@YAXPAUobject_def@@@Z	; ChromeBallHandler
PUBLIC	?RenderChromeBall@@YAXPAUobject_def@@@Z		; RenderChromeBall
;	COMDAT __real@c28c0000
CONST	SEGMENT
__real@c28c0000 DD 0c28c0000r			; -70
CONST	ENDS
;	COMDAT __real@c4000000
CONST	SEGMENT
__real@c4000000 DD 0c4000000r			; -512
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??InitChromeBall@@YAJPAUobject_def@@PAJ@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??InitChromeBall@@YAJPAUobject_def@@PAJ@Z@4JA DD 02d8H ; `InitChromeBall'::`2'::__LINE__Var
; Function compile flags: /Odt /ZI
_DATA	ENDS
;	COMDAT ?InitChromeBall@@YAJPAUobject_def@@PAJ@Z
_TEXT	SEGMENT
_col$ = -16						; size = 4
_i$ = -12						; size = 4
_model$ = -8						; size = 4
_ball$ = -4						; size = 4
_obj$ = 8						; size = 4
_flags$ = 12						; size = 4
?InitChromeBall@@YAJPAUobject_def@@PAJ@Z PROC NEAR	; InitChromeBall, COMDAT

; 728  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi

; 729  : 	CHROMEBALL_OBJ *ball = (CHROMEBALL_OBJ*)obj->Data;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+684]
	mov	DWORD PTR _ball$[ebp], ecx

; 730  : 	MODEL *model;
; 731  : 	long i, col;
; 732  : 
; 733  : // setup ai / move handlers
; 734  : 
; 735  : 	obj->aihandler = (AI_HANDLER)ChromeBallHandler;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	DWORD PTR [eax+696], OFFSET FLAT:?ChromeBallHandler@@YAXPAUobject_def@@@Z ; ChromeBallHandler

; 736  : 	obj->movehandler = (MOVE_HANDLER)MOV_MoveBody;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	DWORD PTR [eax+688], OFFSET FLAT:?MOV_MoveBody@@YAXPAUobject_def@@@Z ; MOV_MoveBody

; 737  : 	obj->collhandler = (COLL_HANDLER)COL_BodyCollHandler;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	DWORD PTR [eax+692], OFFSET FLAT:?COL_BodyCollHandler@@YAXPAUobject_def@@@Z ; COL_BodyCollHandler

; 738  : 	obj->renderhandler = (RENDER_HANDLER)RenderChromeBall;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	DWORD PTR [eax+700], OFFSET FLAT:?RenderChromeBall@@YAXPAUobject_def@@@Z ; RenderChromeBall

; 739  : 
; 740  : // load default model
; 741  : 
; 742  : 	obj->DefaultModel = LoadOneLevelModel(LEVEL_MODEL_CHROMEBALL, FALSE, obj->renderflag, 0);

	push	0
	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+584]
	push	ecx
	push	0
	push	38					; 00000026H
	call	?LoadOneLevelModel@@YAJJJUrenderflags@@J@Z ; LoadOneLevelModel
	add	esp, 16					; 00000010H
	mov	edx, DWORD PTR _obj$[ebp]
	mov	DWORD PTR [edx+656], eax

; 743  : 	if (obj->DefaultModel == -1) return FALSE;

	mov	eax, DWORD PTR _obj$[ebp]
	cmp	DWORD PTR [eax+656], -1
	jne	SHORT $L83282
	xor	eax, eax
	jmp	$L83272
$L83282:

; 744  : 
; 745  : // remember owner player
; 746  : 
; 747  : 	obj->player = (PLAYER*)flags[0];

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR _flags$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+588], edx

; 748  : 
; 749  : // setup ball
; 750  : 
; 751  : 	ball->Age = 0.0f;

	mov	eax, DWORD PTR _ball$[ebp]
	mov	DWORD PTR [eax], 0

; 752  : 	ball->Radius = CHROMEBALL_MIN_RAD;

	mov	eax, DWORD PTR _ball$[ebp]
	mov	DWORD PTR [eax+4], 1082130432		; 40800000H

; 753  : 
; 754  : // pos / vel
; 755  : 
; 756  : 	VecPlusScalarVec(&obj->player->car.BodyWorldPos, -70.0f, &obj->player->car.Body->Centre.WMatrix.mv[L], &obj->body.Centre.Pos);

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+588]
	mov	edx, DWORD PTR _obj$[ebp]
	mov	eax, DWORD PTR [edx+588]
	mov	edx, DWORD PTR [eax+900]
	fld	DWORD PTR __real@c28c0000
	fmul	DWORD PTR [edx+124]
	fadd	DWORD PTR [ecx+816]
	mov	eax, DWORD PTR _obj$[ebp]
	fstp	DWORD PTR [eax+20]
	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+588]
	mov	edx, DWORD PTR _obj$[ebp]
	mov	eax, DWORD PTR [edx+588]
	mov	edx, DWORD PTR [eax+900]
	fld	DWORD PTR __real@c28c0000
	fmul	DWORD PTR [edx+128]
	fadd	DWORD PTR [ecx+820]
	mov	eax, DWORD PTR _obj$[ebp]
	fstp	DWORD PTR [eax+24]
	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+588]
	mov	edx, DWORD PTR _obj$[ebp]
	mov	eax, DWORD PTR [edx+588]
	mov	edx, DWORD PTR [eax+900]
	fld	DWORD PTR __real@c28c0000
	fmul	DWORD PTR [edx+132]
	fadd	DWORD PTR [ecx+824]
	mov	eax, DWORD PTR _obj$[ebp]
	fstp	DWORD PTR [eax+28]

; 757  : 	VecPlusScalarVec(&obj->player->car.Body->Centre.Vel, -512.0f, &obj->player->car.Body->Centre.WMatrix.mv[L], &obj->body.Centre.Vel);

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+588]
	mov	edx, DWORD PTR [ecx+900]
	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+588]
	mov	eax, DWORD PTR [ecx+900]
	fld	DWORD PTR __real@c4000000
	fmul	DWORD PTR [eax+124]
	fadd	DWORD PTR [edx+32]
	mov	ecx, DWORD PTR _obj$[ebp]
	fstp	DWORD PTR [ecx+32]
	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+588]
	mov	edx, DWORD PTR [ecx+900]
	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+588]
	mov	eax, DWORD PTR [ecx+900]
	fld	DWORD PTR __real@c4000000
	fmul	DWORD PTR [eax+128]
	fadd	DWORD PTR [edx+36]
	mov	ecx, DWORD PTR _obj$[ebp]
	fstp	DWORD PTR [ecx+36]
	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+588]
	mov	edx, DWORD PTR [ecx+900]
	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+588]
	mov	eax, DWORD PTR [ecx+900]
	fld	DWORD PTR __real@c4000000
	fmul	DWORD PTR [eax+132]
	fadd	DWORD PTR [edx+40]
	mov	ecx, DWORD PTR _obj$[ebp]
	fstp	DWORD PTR [ecx+40]

; 758  : 
; 759  : // setup sfx
; 760  : 
; 761  : 	obj->Sfx3D = CreateSfx3D(SFX_CHROMEBALL, SFX_MIN_VOL, 22050, TRUE, &obj->body.Centre.Pos);

	mov	eax, DWORD PTR _obj$[ebp]
	add	eax, 20					; 00000014H
	push	eax
	push	1
	push	22050					; 00005622H
	push	0
	push	11					; 0000000bH
	call	?CreateSfx3D@@YAPAUSAMPLE_3D@@JJJJPAUVectorStruct@@@Z ; CreateSfx3D
	add	esp, 20					; 00000014H
	mov	ecx, DWORD PTR _obj$[ebp]
	mov	DWORD PTR [ecx+680], eax

; 762  : 
; 763  : // Physical properties
; 764  : 
; 765  : 	obj->body.Centre.Mass = Real(3.0f);

	mov	eax, DWORD PTR _obj$[ebp]
	mov	DWORD PTR [eax], 1077936128		; 40400000H

; 766  : 	obj->body.Centre.InvMass = ONE / Real(3.0f);

	mov	eax, DWORD PTR _obj$[ebp]
	mov	DWORD PTR [eax+4], 1051372203		; 3eaaaaabH

; 767  : 	SetMat(&obj->body.BodyInertia, Real(100), ZERO, ZERO, ZERO, Real(100), ZERO, ZERO, ZERO, Real(100));

	push	1120403456				; 42c80000H
	push	0
	push	0
	push	0
	push	1120403456				; 42c80000H
	push	0
	push	0
	push	0
	push	1120403456				; 42c80000H
	mov	eax, DWORD PTR _obj$[ebp]
	add	eax, 224				; 000000e0H
	push	eax
	call	?SetMat@@YAXPATMatrixUnion@@MMMMMMMMM@Z	; SetMat
	add	esp, 40					; 00000028H

; 768  : 	SetMat(&obj->body.BodyInvInertia, ONE / Real(100), ZERO, ZERO, ZERO, ONE / Real(100), ZERO, ZERO, ZERO, ONE / Real(100));

	push	1008981770				; 3c23d70aH
	push	0
	push	0
	push	0
	push	1008981770				; 3c23d70aH
	push	0
	push	0
	push	0
	push	1008981770				; 3c23d70aH
	mov	eax, DWORD PTR _obj$[ebp]
	add	eax, 260				; 00000104H
	push	eax
	call	?SetMat@@YAXPATMatrixUnion@@MMMMMMMMM@Z	; SetMat
	add	esp, 40					; 00000028H

; 769  : 
; 770  : 	obj->body.Centre.Hardness = Real(0.2);

	mov	eax, DWORD PTR _obj$[ebp]
	mov	DWORD PTR [eax+172], 1045220557		; 3e4ccccdH

; 771  : 	obj->body.Centre.Resistance = Real(0.001);

	mov	eax, DWORD PTR _obj$[ebp]
	mov	DWORD PTR [eax+176], 981668463		; 3a83126fH

; 772  : 	obj->body.DefaultAngRes = Real(0.005);

	mov	eax, DWORD PTR _obj$[ebp]
	mov	DWORD PTR [eax+368], 1000593162		; 3ba3d70aH

; 773  : 	obj->body.AngResistance = Real(0.005);

	mov	eax, DWORD PTR _obj$[ebp]
	mov	DWORD PTR [eax+376], 1000593162		; 3ba3d70aH

; 774  : 	obj->body.AngResMod = Real(1.0);

	mov	eax, DWORD PTR _obj$[ebp]
	mov	DWORD PTR [eax+372], 1065353216		; 3f800000H

; 775  : 	obj->body.Centre.Grip = Real(0.1);

	mov	eax, DWORD PTR _obj$[ebp]
	mov	DWORD PTR [eax+180], 1036831949		; 3dcccccdH

; 776  : 	obj->body.Centre.StaticFriction = Real(2.0);

	mov	eax, DWORD PTR _obj$[ebp]
	mov	DWORD PTR [eax+184], 1073741824		; 40000000H

; 777  : 	obj->body.Centre.KineticFriction = Real(1.0);

	mov	eax, DWORD PTR _obj$[ebp]
	mov	DWORD PTR [eax+188], 1065353216		; 3f800000H

; 778  : 
; 779  : // Collision skin
; 780  : 
; 781  : 	obj->CollType = COLL_TYPE_BODY;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	DWORD PTR [eax+660], 1

; 782  : 	SetBodySphere(&obj->body);

	mov	eax, DWORD PTR _obj$[ebp]
	mov	DWORD PTR [eax+472], 1

; 783  : 	obj->body.CollSkin.Sphere = (SPHERE *)malloc(sizeof(SPHERE));

	push	OFFSET FLAT:??_C@_0IL@GBHCIHE@c?3?2documents?5and?5settings?2jarhea@
	mov	eax, DWORD PTR ?__LINE__Var@?1??InitChromeBall@@YAJPAUobject_def@@PAJ@Z@4JA
	add	eax, 55					; 00000037H
	push	eax
	push	16					; 00000010H
	call	?DebugMalloc@@YAPAXIHPAD@Z		; DebugMalloc
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _obj$[ebp]
	mov	DWORD PTR [ecx+396], eax

; 784  : 	SetVecZero(&obj->body.CollSkin.Sphere[0].Pos);

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+396]
	mov	DWORD PTR [ecx], 0
	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+396]
	mov	DWORD PTR [ecx+4], 0
	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+396]
	mov	DWORD PTR [ecx+8], 0

; 785  : 	obj->body.CollSkin.Sphere[0].Radius = CHROMEBALL_MAX_RAD;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+396]
	mov	DWORD PTR [ecx+12], 1115684864		; 42800000H

; 786  : 	obj->body.CollSkin.NSpheres = 1;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	WORD PTR [eax+408], 1

; 787  : 	CreateCopyCollSkin(&obj->body.CollSkin);

	mov	eax, DWORD PTR _obj$[ebp]
	add	eax, 380				; 0000017cH
	push	eax
	call	?CreateCopyCollSkin@@YA_NPAUCollSkinStruct@@@Z ; CreateCopyCollSkin
	add	esp, 4

; 788  : 	MakeTightLocalBBox(&obj->body.CollSkin);

	mov	eax, DWORD PTR _obj$[ebp]
	add	eax, 380				; 0000017cH
	push	eax
	call	?MakeTightLocalBBox@@YAXPAUCollSkinStruct@@@Z ; MakeTightLocalBBox
	add	esp, 4

; 789  : 	BuildWorldSkin(&obj->body.CollSkin, &obj->body.Centre.Pos, &obj->body.Centre.WMatrix);

	mov	eax, DWORD PTR _obj$[ebp]
	add	eax, 100				; 00000064H
	push	eax
	mov	ecx, DWORD PTR _obj$[ebp]
	add	ecx, 20					; 00000014H
	push	ecx
	mov	edx, DWORD PTR _obj$[ebp]
	add	edx, 380				; 0000017cH
	push	edx
	call	?BuildWorldSkin@@YAXPAUCollSkinStruct@@PAUVectorStruct@@PATMatrixUnion@@@Z ; BuildWorldSkin
	add	esp, 12					; 0000000cH

; 790  : 	obj->body.CollSkin.WorldSphere[0].Radius = CHROMEBALL_MIN_RAD;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+400]
	mov	DWORD PTR [ecx+12], 1082130432		; 40800000H

; 791  : 
; 792  : // force model textures
; 793  : 
; 794  : 	model = &LevelModel[obj->DefaultModel].Model;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+656]
	imul	ecx, 168				; 000000a8H
	add	ecx, OFFSET FLAT:?LevelModel@@3PAULEVEL_MODEL@@A+8
	mov	DWORD PTR _model$[ebp], ecx

; 795  : 	if (model->QuadNumRGB)

	mov	eax, DWORD PTR _model$[ebp]
	movsx	ecx, WORD PTR [eax+40]
	test	ecx, ecx
	je	$L83303

; 796  : 	{
; 797  : 		model->QuadNumTex = model->QuadNumRGB;

	mov	eax, DWORD PTR _model$[ebp]
	mov	ecx, DWORD PTR _model$[ebp]
	mov	dx, WORD PTR [ecx+40]
	mov	WORD PTR [eax+36], dx

; 798  : 		model->TriNumTex = model->TriNumRGB;

	mov	eax, DWORD PTR _model$[ebp]
	mov	ecx, DWORD PTR _model$[ebp]
	mov	dx, WORD PTR [ecx+42]
	mov	WORD PTR [eax+38], dx

; 799  : 		model->QuadNumRGB = 0;

	mov	eax, DWORD PTR _model$[ebp]
	mov	WORD PTR [eax+40], 0

; 800  : 		model->TriNumRGB = 0;

	mov	eax, DWORD PTR _model$[ebp]
	mov	WORD PTR [eax+42], 0

; 801  : 
; 802  : 		for (i = 0 ; i < model->VertNum ; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $L83304
$L83305:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$L83304:
	mov	eax, DWORD PTR _model$[ebp]
	movsx	ecx, WORD PTR [eax+34]
	cmp	DWORD PTR _i$[ebp], ecx
	jge	SHORT $L83306

; 803  : 		{
; 804  : 			col = (rand() & 63) + 32;

	call	_rand
	and	eax, 63					; 0000003fH
	add	eax, 32					; 00000020H
	mov	DWORD PTR _col$[ebp], eax

; 805  : 			model->VertPtr[i].color = col | col << 8 | col << 16;

	mov	eax, DWORD PTR _col$[ebp]
	shl	eax, 8
	or	eax, DWORD PTR _col$[ebp]
	mov	ecx, DWORD PTR _col$[ebp]
	shl	ecx, 16					; 00000010H
	or	eax, ecx
	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 88					; 00000058H
	mov	ecx, DWORD PTR _model$[ebp]
	mov	ecx, DWORD PTR [ecx+52]
	mov	DWORD PTR [ecx+edx+52], eax

; 806  : 		}

	jmp	SHORT $L83305
$L83306:

; 807  : 
; 808  : 		for (i = 0 ; i < model->PolyNum ; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $L83307
$L83308:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$L83307:
	mov	eax, DWORD PTR _model$[ebp]
	movsx	ecx, WORD PTR [eax+32]
	cmp	DWORD PTR _i$[ebp], ecx
	jge	$L83303

; 809  : 		{
; 810  : 			model->PolyPtr[i].Tpage = TPAGE_FX1;

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 52					; 00000034H
	mov	ecx, DWORD PTR _model$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	mov	WORD PTR [edx+eax+2], 27		; 0000001bH

; 811  : 			model->PolyPtr[i].tu0 = model->PolyPtr[i].tu3 = 242.0f / 256.0f;

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 52					; 00000034H
	mov	ecx, DWORD PTR _model$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	mov	DWORD PTR [edx+eax+28], 1064435712	; 3f720000H
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 52					; 00000034H
	mov	ecx, DWORD PTR _model$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	mov	DWORD PTR [edx+eax+4], 1064435712	; 3f720000H

; 812  : 			model->PolyPtr[i].tu1 = model->PolyPtr[i].tu2 = 254.0f / 256.0f;

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 52					; 00000034H
	mov	ecx, DWORD PTR _model$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	mov	DWORD PTR [edx+eax+20], 1065222144	; 3f7e0000H
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 52					; 00000034H
	mov	ecx, DWORD PTR _model$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	mov	DWORD PTR [edx+eax+12], 1065222144	; 3f7e0000H

; 813  : 			model->PolyPtr[i].tv0 = model->PolyPtr[i].tv1 = 242.0f / 256.0f;

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 52					; 00000034H
	mov	ecx, DWORD PTR _model$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	mov	DWORD PTR [edx+eax+16], 1064435712	; 3f720000H
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 52					; 00000034H
	mov	ecx, DWORD PTR _model$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	mov	DWORD PTR [edx+eax+8], 1064435712	; 3f720000H

; 814  : 			model->PolyPtr[i].tv2 = model->PolyPtr[i].tv3 = 254.0f / 256.0f;

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 52					; 00000034H
	mov	ecx, DWORD PTR _model$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	mov	DWORD PTR [edx+eax+32], 1065222144	; 3f7e0000H
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 52					; 00000034H
	mov	ecx, DWORD PTR _model$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	mov	DWORD PTR [edx+eax+24], 1065222144	; 3f7e0000H

; 815  : 
; 816  : 			*(long*)&model->PolyRGB[i].rgb[0] = model->PolyPtr[i].v0->color;

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 52					; 00000034H
	mov	ecx, DWORD PTR _model$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	mov	eax, DWORD PTR [edx+eax+36]
	mov	ecx, DWORD PTR _i$[ebp]
	shl	ecx, 4
	mov	edx, DWORD PTR _model$[ebp]
	mov	edx, DWORD PTR [edx+44]
	mov	eax, DWORD PTR [eax+52]
	mov	DWORD PTR [ecx+edx], eax

; 817  : 			*(long*)&model->PolyRGB[i].rgb[1] = model->PolyPtr[i].v1->color;

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 52					; 00000034H
	mov	ecx, DWORD PTR _model$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	mov	eax, DWORD PTR [edx+eax+40]
	mov	ecx, DWORD PTR _i$[ebp]
	shl	ecx, 4
	mov	edx, DWORD PTR _model$[ebp]
	mov	edx, DWORD PTR [edx+44]
	mov	eax, DWORD PTR [eax+52]
	mov	DWORD PTR [edx+ecx+4], eax

; 818  : 			*(long*)&model->PolyRGB[i].rgb[2] = model->PolyPtr[i].v2->color;

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 52					; 00000034H
	mov	ecx, DWORD PTR _model$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	mov	eax, DWORD PTR [edx+eax+44]
	mov	ecx, DWORD PTR _i$[ebp]
	shl	ecx, 4
	mov	edx, DWORD PTR _model$[ebp]
	mov	edx, DWORD PTR [edx+44]
	mov	eax, DWORD PTR [eax+52]
	mov	DWORD PTR [edx+ecx+8], eax

; 819  : 	
; 820  : 			if (model->PolyPtr[i].Type & POLY_QUAD)

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 52					; 00000034H
	mov	ecx, DWORD PTR _model$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	movsx	eax, WORD PTR [edx+eax]
	and	eax, 1
	je	SHORT $L83313

; 821  : 				*(long*)&model->PolyRGB[i].rgb[3] = model->PolyPtr[i].v3->color;

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 52					; 00000034H
	mov	ecx, DWORD PTR _model$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	mov	eax, DWORD PTR [edx+eax+48]
	mov	ecx, DWORD PTR _i$[ebp]
	shl	ecx, 4
	mov	edx, DWORD PTR _model$[ebp]
	mov	edx, DWORD PTR [edx+44]
	mov	eax, DWORD PTR [eax+52]
	mov	DWORD PTR [edx+ecx+12], eax
$L83313:

; 822  : 		}

	jmp	$L83308
$L83303:

; 823  : 	}
; 824  : 
; 825  : // return OK
; 826  : 
; 827  : 	return TRUE;

	mov	eax, 1
$L83272:

; 828  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?InitChromeBall@@YAJPAUobject_def@@PAJ@Z ENDP		; InitChromeBall
_TEXT	ENDS
PUBLIC	?InitClone@@YAJPAUobject_def@@PAJ@Z		; InitClone
; Function compile flags: /Odt /ZI
;	COMDAT ?InitClone@@YAJPAUobject_def@@PAJ@Z
_TEXT	SEGMENT
_clone$ = -4						; size = 4
_obj$ = 8						; size = 4
_flags$ = 12						; size = 4
?InitClone@@YAJPAUobject_def@@PAJ@Z PROC NEAR		; InitClone, COMDAT

; 835  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 836  : 	CLONE_OBJ *clone = (CLONE_OBJ*)obj->Data;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+684]
	mov	DWORD PTR _clone$[ebp], ecx

; 837  : 
; 838  : // return OK
; 839  : 
; 840  : 	return TRUE;

	mov	eax, 1

; 841  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?InitClone@@YAJPAUobject_def@@PAJ@Z ENDP		; InitClone
_TEXT	ENDS
PUBLIC	?TurboMoveHandler@@YAXPAUobject_def@@@Z		; TurboMoveHandler
PUBLIC	?InitTurbo@@YAJPAUobject_def@@PAJ@Z		; InitTurbo
PUBLIC	?Turbo2Handler@@YAXPAUobject_def@@@Z		; Turbo2Handler
; Function compile flags: /Odt /ZI
;	COMDAT ?InitTurbo@@YAJPAUobject_def@@PAJ@Z
_TEXT	SEGMENT
_turbo$ = -4						; size = 4
_obj$ = 8						; size = 4
_flags$ = 12						; size = 4
?InitTurbo@@YAJPAUobject_def@@PAJ@Z PROC NEAR		; InitTurbo, COMDAT

; 848  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 849  : 	//int iTrail;
; 850  : 	TURBO_OBJ *turbo = (TURBO_OBJ*)obj->Data;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+684]
	mov	DWORD PTR _turbo$[ebp], ecx

; 851  : 
; 852  : // setup handlers
; 853  : 
; 854  : 	obj->aihandler = (AI_HANDLER)Turbo2Handler;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	DWORD PTR [eax+696], OFFSET FLAT:?Turbo2Handler@@YAXPAUobject_def@@@Z ; Turbo2Handler

; 855  : 	obj->movehandler = (MOVE_HANDLER)TurboMoveHandler;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	DWORD PTR [eax+688], OFFSET FLAT:?TurboMoveHandler@@YAXPAUobject_def@@@Z ; TurboMoveHandler

; 856  : 
; 857  : // remember owner player
; 858  : 
; 859  : 	obj->player = (PLAYER*)flags[0];

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR _flags$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+588], edx

; 860  : 
; 861  : // setup
; 862  : 
; 863  : 	turbo->Age = turbo->SparkTime = ZERO;

	mov	eax, DWORD PTR _turbo$[ebp]
	mov	DWORD PTR [eax+8], 0
	mov	ecx, DWORD PTR _turbo$[ebp]
	mov	DWORD PTR [ecx], 0

; 864  : 	turbo->LifeTime = TO_TIME(Real(3));

	mov	eax, DWORD PTR _turbo$[ebp]
	mov	DWORD PTR [eax+4], 1077936128		; 40400000H

; 865  : 	turbo->Force = TO_FORCE(Real(3500));

	mov	eax, DWORD PTR _turbo$[ebp]
	mov	DWORD PTR [eax+16], 1163575296		; 455ac000H

; 866  : 	/*for (iTrail = 0; iTrail < TURBO_NTRAILS; iTrail++) {
; 867  : 		turbo->TurboTrail[iTrail] = GetFreeTrail(TRAIL_SMOKE);
; 868  : 		if (turbo->TurboTrail[iTrail] != NULL) {
; 869  : 			CopyVec(&obj->player->car.Wheel[iTrail].WPos, &turbo->TurboTrail[iTrail]->Pos[0]);
; 870  : 			turbo->TrailTime = ZERO;
; 871  : 		}
; 872  : 	}*/
; 873  : 
; 874  : 
; 875  : // return OK
; 876  : 
; 877  : 	return TRUE;

	mov	eax, 1

; 878  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?InitTurbo@@YAJPAUobject_def@@PAJ@Z ENDP		; InitTurbo
_TEXT	ENDS
PUBLIC	?InitTurbo2@@YAJPAUobject_def@@PAJ@Z		; InitTurbo2
; Function compile flags: /Odt /ZI
;	COMDAT ?InitTurbo2@@YAJPAUobject_def@@PAJ@Z
_TEXT	SEGMENT
_turbo$ = -4						; size = 4
_obj$ = 8						; size = 4
_flags$ = 12						; size = 4
?InitTurbo2@@YAJPAUobject_def@@PAJ@Z PROC NEAR		; InitTurbo2, COMDAT

; 885  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 886  : 	TURBO2_OBJ *turbo = (TURBO2_OBJ*)obj->Data;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+684]
	mov	DWORD PTR _turbo$[ebp], ecx

; 887  : 
; 888  : // setup handlers
; 889  : 
; 890  : 	obj->aihandler = (AI_HANDLER)Turbo2Handler;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	DWORD PTR [eax+696], OFFSET FLAT:?Turbo2Handler@@YAXPAUobject_def@@@Z ; Turbo2Handler

; 891  : 
; 892  : // remember owner player
; 893  : 
; 894  : 	obj->player = (PLAYER*)flags[0];

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR _flags$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+588], edx

; 895  : 
; 896  : // setup
; 897  : 
; 898  : 	turbo->Age = 0.0f;

	mov	eax, DWORD PTR _turbo$[ebp]
	mov	DWORD PTR [eax], 0

; 899  : 	turbo->LifeTime = 3.0f;

	mov	eax, DWORD PTR _turbo$[ebp]
	mov	DWORD PTR [eax+4], 1077936128		; 40400000H

; 900  : 
; 901  : // return OK
; 902  : 
; 903  : 	return TRUE;

	mov	eax, 1

; 904  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?InitTurbo2@@YAJPAUobject_def@@PAJ@Z ENDP		; InitTurbo2
_TEXT	ENDS
PUBLIC	?InitSpring@@YAJPAUobject_def@@PAJ@Z		; InitSpring
PUBLIC	?SpringHandler@@YAXPAUobject_def@@@Z		; SpringHandler
; Function compile flags: /Odt /ZI
;	COMDAT ?InitSpring@@YAJPAUobject_def@@PAJ@Z
_TEXT	SEGMENT
_spring$ = -4						; size = 4
_obj$ = 8						; size = 4
_flags$ = 12						; size = 4
?InitSpring@@YAJPAUobject_def@@PAJ@Z PROC NEAR		; InitSpring, COMDAT

; 911  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 912  : 	SPRING_OBJ *spring = (SPRING_OBJ*)obj->Data;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+684]
	mov	DWORD PTR _spring$[ebp], ecx

; 913  : 
; 914  : // remember owner player
; 915  : 
; 916  : 	obj->player = (PLAYER*)flags[0];

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR _flags$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+588], edx

; 917  : 
; 918  : // set up handlers
; 919  : 
; 920  : 	obj->aihandler = (AI_HANDLER)SpringHandler;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	DWORD PTR [eax+696], OFFSET FLAT:?SpringHandler@@YAXPAUobject_def@@@Z ; SpringHandler

; 921  : 
; 922  : // return OK
; 923  : 
; 924  : 	return TRUE;

	mov	eax, 1

; 925  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?InitSpring@@YAJPAUobject_def@@PAJ@Z ENDP		; InitSpring
_TEXT	ENDS
PUBLIC	?__LINE__Var@?1??InitElectroZapped@@YAJPAUobject_def@@PAJ@Z@4JA ; `InitElectroZapped'::`2'::__LINE__Var
PUBLIC	?InitElectroZapped@@YAJPAUobject_def@@PAJ@Z	; InitElectroZapped
PUBLIC	?ElectroZappedHandler@@YAXPAUobject_def@@@Z	; ElectroZappedHandler
PUBLIC	?RenderElectroZapped@@YAXPAUobject_def@@@Z	; RenderElectroZapped
;	COMDAT ?__LINE__Var@?1??InitElectroZapped@@YAJPAUobject_def@@PAJ@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??InitElectroZapped@@YAJPAUobject_def@@PAJ@Z@4JA DD 03a4H ; `InitElectroZapped'::`2'::__LINE__Var
; Function compile flags: /Odt /ZI
_DATA	ENDS
;	COMDAT ?InitElectroZapped@@YAJPAUobject_def@@PAJ@Z
_TEXT	SEGMENT
tv516 = -100						; size = 4
tv512 = -100						; size = 4
_evert$ = -32						; size = 4
_dmodel$ = -28						; size = 4
_smodel$ = -24						; size = 4
_electro$ = -20						; size = 4
_mul$ = -16						; size = 4
_off$ = -12						; size = 4
_ram$ = -8						; size = 4
_i$ = -4						; size = 4
_obj$ = 8						; size = 4
_flags$ = 12						; size = 4
?InitElectroZapped@@YAJPAUobject_def@@PAJ@Z PROC NEAR	; InitElectroZapped, COMDAT

; 932  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 100				; 00000064H
	push	ebx
	push	esi
	push	edi

; 933  : 	long i, ram, off;
; 934  : 	REAL mul;
; 935  : 	ELECTROZAPPED_OBJ *electro;
; 936  : 	MODEL *smodel, *dmodel;
; 937  : 	ELECTROZAPPED_VERT *evert;
; 938  : 
; 939  : // set render flags
; 940  : 
; 941  : 	obj->renderflag.envmap = FALSE;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+584]
	and	ecx, -2					; fffffffeH
	mov	edx, DWORD PTR _obj$[ebp]
	mov	DWORD PTR [edx+584], ecx

; 942  : 	obj->renderflag.light = FALSE;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+584]
	and	ecx, -5					; fffffffbH
	mov	edx, DWORD PTR _obj$[ebp]
	mov	DWORD PTR [edx+584], ecx

; 943  : 	obj->renderflag.reflect = FALSE;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+584]
	and	ecx, -17				; ffffffefH
	mov	edx, DWORD PTR _obj$[ebp]
	mov	DWORD PTR [edx+584], ecx

; 944  : 	obj->renderflag.meshfx = FALSE;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+584]
	and	ecx, -257				; fffffeffH
	mov	edx, DWORD PTR _obj$[ebp]
	mov	DWORD PTR [edx+584], ecx

; 945  : 
; 946  : // setup handlers
; 947  : 
; 948  : 	obj->aihandler = (AI_HANDLER)ElectroZappedHandler;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	DWORD PTR [eax+696], OFFSET FLAT:?ElectroZappedHandler@@YAXPAUobject_def@@@Z ; ElectroZappedHandler

; 949  : 	obj->renderhandler = (RENDER_HANDLER)RenderElectroZapped;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	DWORD PTR [eax+700], OFFSET FLAT:?RenderElectroZapped@@YAXPAUobject_def@@@Z ; RenderElectroZapped

; 950  : 
; 951  : // remember owner player
; 952  : 
; 953  : 	obj->player = (PLAYER*)flags[0];

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR _flags$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+588], edx

; 954  : 
; 955  : // calc + alloc ram
; 956  : 
; 957  : 	smodel = &obj->player->car.Models->Body[0];

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+588]
	mov	edx, DWORD PTR [ecx+864]
	mov	eax, DWORD PTR [edx+6064]
	mov	DWORD PTR _smodel$[ebp], eax

; 958  : 
; 959  : 	ram = sizeof(ELECTROZAPPED_OBJ);

	mov	DWORD PTR _ram$[ebp], 60		; 0000003cH

; 960  : 	ram += sizeof(MODEL_POLY) * smodel->PolyNum;

	mov	eax, DWORD PTR _smodel$[ebp]
	movsx	ecx, WORD PTR [eax+32]
	imul	ecx, 52					; 00000034H
	add	ecx, DWORD PTR _ram$[ebp]
	mov	DWORD PTR _ram$[ebp], ecx

; 961  : 	ram += sizeof(POLY_RGB) * smodel->PolyNum;

	mov	eax, DWORD PTR _smodel$[ebp]
	movsx	ecx, WORD PTR [eax+32]
	shl	ecx, 4
	add	ecx, DWORD PTR _ram$[ebp]
	mov	DWORD PTR _ram$[ebp], ecx

; 962  : 	ram += sizeof(MODEL_VERTEX) * smodel->VertNum;

	mov	eax, DWORD PTR _smodel$[ebp]
	movsx	ecx, WORD PTR [eax+34]
	imul	ecx, 88					; 00000058H
	add	ecx, DWORD PTR _ram$[ebp]
	mov	DWORD PTR _ram$[ebp], ecx

; 963  : 	ram += sizeof(ELECTROZAPPED_VERT) * smodel->VertNum;

	mov	eax, DWORD PTR _smodel$[ebp]
	movsx	ecx, WORD PTR [eax+34]
	mov	edx, DWORD PTR _ram$[ebp]
	lea	eax, DWORD PTR [edx+ecx*8]
	mov	DWORD PTR _ram$[ebp], eax

; 964  : 
; 965  : 	obj->Data = malloc(ram);

	push	OFFSET FLAT:??_C@_0IL@GBHCIHE@c?3?2documents?5and?5settings?2jarhea@
	mov	eax, DWORD PTR ?__LINE__Var@?1??InitElectroZapped@@YAJPAUobject_def@@PAJ@Z@4JA
	add	eax, 33					; 00000021H
	push	eax
	mov	ecx, DWORD PTR _ram$[ebp]
	push	ecx
	call	?DebugMalloc@@YAPAXIHPAD@Z		; DebugMalloc
	add	esp, 12					; 0000000cH
	mov	edx, DWORD PTR _obj$[ebp]
	mov	DWORD PTR [edx+684], eax

; 966  : 	if (!obj->Data)

	mov	eax, DWORD PTR _obj$[ebp]
	cmp	DWORD PTR [eax+684], 0
	jne	SHORT $L83369

; 967  : 		return FALSE;

	xor	eax, eax
	jmp	$L83351
$L83369:

; 968  : 
; 969  : // setup electro zapped
; 970  : 
; 971  : 	electro = (ELECTROZAPPED_OBJ*)obj->Data;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+684]
	mov	DWORD PTR _electro$[ebp], ecx

; 972  : 
; 973  : // setup model
; 974  : 
; 975  : 	dmodel = &electro->Model;

	mov	eax, DWORD PTR _electro$[ebp]
	mov	DWORD PTR _dmodel$[ebp], eax

; 976  : 
; 977  : 	memcpy(dmodel, smodel, sizeof(MODEL));

	push	60					; 0000003cH
	mov	eax, DWORD PTR _smodel$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dmodel$[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 978  : 	dmodel->PolyPtr = (MODEL_POLY*)(electro + 1);

	mov	eax, DWORD PTR _electro$[ebp]
	add	eax, 60					; 0000003cH
	mov	ecx, DWORD PTR _dmodel$[ebp]
	mov	DWORD PTR [ecx+48], eax

; 979  : 	dmodel->PolyRGB = (POLY_RGB*)(dmodel->PolyPtr + dmodel->PolyNum);

	mov	eax, DWORD PTR _dmodel$[ebp]
	movsx	ecx, WORD PTR [eax+32]
	imul	ecx, 52					; 00000034H
	mov	edx, DWORD PTR _dmodel$[ebp]
	add	ecx, DWORD PTR [edx+48]
	mov	eax, DWORD PTR _dmodel$[ebp]
	mov	DWORD PTR [eax+44], ecx

; 980  : 	dmodel->VertPtr = (MODEL_VERTEX*)(dmodel->PolyRGB + dmodel->PolyNum);

	mov	eax, DWORD PTR _dmodel$[ebp]
	movsx	ecx, WORD PTR [eax+32]
	shl	ecx, 4
	mov	edx, DWORD PTR _dmodel$[ebp]
	add	ecx, DWORD PTR [edx+44]
	mov	eax, DWORD PTR _dmodel$[ebp]
	mov	DWORD PTR [eax+52], ecx

; 981  : 
; 982  : 	off = (long)dmodel->VertPtr - (long)smodel->VertPtr;

	mov	eax, DWORD PTR _dmodel$[ebp]
	mov	ecx, DWORD PTR _smodel$[ebp]
	mov	edx, DWORD PTR [eax+52]
	sub	edx, DWORD PTR [ecx+52]
	mov	DWORD PTR _off$[ebp], edx

; 983  : 
; 984  : 	for (i = 0 ; i < dmodel->PolyNum ; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $L83377
$L83378:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$L83377:
	mov	eax, DWORD PTR _dmodel$[ebp]
	movsx	ecx, WORD PTR [eax+32]
	cmp	DWORD PTR _i$[ebp], ecx
	jge	$L83379

; 985  : 	{
; 986  : 		dmodel->PolyPtr[i] = smodel->PolyPtr[i];

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 52					; 00000034H
	mov	ecx, DWORD PTR _smodel$[ebp]
	mov	esi, DWORD PTR [ecx+48]
	add	esi, eax
	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 52					; 00000034H
	mov	eax, DWORD PTR _dmodel$[ebp]
	mov	edi, DWORD PTR [eax+48]
	add	edi, edx
	mov	ecx, 13					; 0000000dH
	rep movsd

; 987  : 
; 988  : 		dmodel->PolyPtr[i].Type |= POLY_SEMITRANS | POLY_SEMITRANS_ONE;

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 52					; 00000034H
	mov	ecx, DWORD PTR _dmodel$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	movsx	eax, WORD PTR [edx+eax]
	or	eax, 260				; 00000104H
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 52					; 00000034H
	mov	edx, DWORD PTR _dmodel$[ebp]
	mov	edx, DWORD PTR [edx+48]
	mov	WORD PTR [ecx+edx], ax

; 989  : 		dmodel->PolyPtr[i].Tpage = TPAGE_FX1;

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 52					; 00000034H
	mov	ecx, DWORD PTR _dmodel$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	mov	WORD PTR [edx+eax+2], 27		; 0000001bH

; 990  : 
; 991  : 		dmodel->PolyPtr[i].v0 = (MODEL_VERTEX*)((long)dmodel->PolyPtr[i].v0 + off);

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 52					; 00000034H
	mov	ecx, DWORD PTR _dmodel$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	mov	eax, DWORD PTR [edx+eax+36]
	add	eax, DWORD PTR _off$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 52					; 00000034H
	mov	edx, DWORD PTR _dmodel$[ebp]
	mov	edx, DWORD PTR [edx+48]
	mov	DWORD PTR [edx+ecx+36], eax

; 992  : 		dmodel->PolyPtr[i].v1 = (MODEL_VERTEX*)((long)dmodel->PolyPtr[i].v1 + off);

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 52					; 00000034H
	mov	ecx, DWORD PTR _dmodel$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	mov	eax, DWORD PTR [edx+eax+40]
	add	eax, DWORD PTR _off$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 52					; 00000034H
	mov	edx, DWORD PTR _dmodel$[ebp]
	mov	edx, DWORD PTR [edx+48]
	mov	DWORD PTR [edx+ecx+40], eax

; 993  : 		dmodel->PolyPtr[i].v2 = (MODEL_VERTEX*)((long)dmodel->PolyPtr[i].v2 + off);

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 52					; 00000034H
	mov	ecx, DWORD PTR _dmodel$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	mov	eax, DWORD PTR [edx+eax+44]
	add	eax, DWORD PTR _off$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 52					; 00000034H
	mov	edx, DWORD PTR _dmodel$[ebp]
	mov	edx, DWORD PTR [edx+48]
	mov	DWORD PTR [edx+ecx+44], eax

; 994  : 		dmodel->PolyPtr[i].v3 = (MODEL_VERTEX*)((long)dmodel->PolyPtr[i].v3 + off);

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 52					; 00000034H
	mov	ecx, DWORD PTR _dmodel$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	mov	eax, DWORD PTR [edx+eax+48]
	add	eax, DWORD PTR _off$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 52					; 00000034H
	mov	edx, DWORD PTR _dmodel$[ebp]
	mov	edx, DWORD PTR [edx+48]
	mov	DWORD PTR [edx+ecx+48], eax

; 995  : 
; 996  : 		*(long*)&dmodel->PolyRGB[i].rgb[0] = 0;

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _dmodel$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	mov	DWORD PTR [eax+edx], 0

; 997  : 		*(long*)&dmodel->PolyRGB[i].rgb[1] = 0;

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _dmodel$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	mov	DWORD PTR [edx+eax+4], 0

; 998  : 		*(long*)&dmodel->PolyRGB[i].rgb[2] = 0;

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _dmodel$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	mov	DWORD PTR [edx+eax+8], 0

; 999  : 		*(long*)&dmodel->PolyRGB[i].rgb[3] = 0;

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _dmodel$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	mov	DWORD PTR [edx+eax+12], 0

; 1000 : 	}

	jmp	$L83378
$L83379:

; 1001 : 
; 1002 : 	for (i = 0 ; i < dmodel->VertNum ; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $L83392
$L83393:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$L83392:
	mov	eax, DWORD PTR _dmodel$[ebp]
	movsx	ecx, WORD PTR [eax+34]
	cmp	DWORD PTR _i$[ebp], ecx
	jge	$L83394

; 1003 : 	{
; 1004 : 		dmodel->VertPtr[i] = smodel->VertPtr[i];

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 88					; 00000058H
	mov	ecx, DWORD PTR _smodel$[ebp]
	mov	esi, DWORD PTR [ecx+52]
	add	esi, eax
	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 88					; 00000058H
	mov	eax, DWORD PTR _dmodel$[ebp]
	mov	edi, DWORD PTR [eax+52]
	add	edi, edx
	mov	ecx, 22					; 00000016H
	rep movsd

; 1005 : 
; 1006 : 		mul = 2.0f / Length((VEC*)&dmodel->VertPtr[i].x) + 1.0f;

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 88					; 00000058H
	mov	ecx, DWORD PTR _dmodel$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 88					; 00000058H
	mov	esi, DWORD PTR _dmodel$[ebp]
	mov	esi, DWORD PTR [esi+52]
	fld	DWORD PTR [edx+eax]
	fmul	DWORD PTR [esi+ecx]
	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 88					; 00000058H
	mov	eax, DWORD PTR _dmodel$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 88					; 00000058H
	mov	esi, DWORD PTR _dmodel$[ebp]
	mov	esi, DWORD PTR [esi+52]
	fld	DWORD PTR [ecx+edx+4]
	fmul	DWORD PTR [esi+eax+4]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 88					; 00000058H
	mov	edx, DWORD PTR _dmodel$[ebp]
	mov	eax, DWORD PTR [edx+52]
	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 88					; 00000058H
	mov	esi, DWORD PTR _dmodel$[ebp]
	mov	esi, DWORD PTR [esi+52]
	fld	DWORD PTR [eax+ecx+8]
	fmul	DWORD PTR [esi+edx+8]
	faddp	ST(1), ST(0)
	push	ecx
	fstp	DWORD PTR [esp]
	call	?sqrt@@YAMM@Z				; sqrt
	add	esp, 4
	fdivr	DWORD PTR __real@40000000
	fadd	DWORD PTR __real@3f800000
	fstp	DWORD PTR _mul$[ebp]

; 1007 : 		dmodel->VertPtr[i].x *= mul;

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 88					; 00000058H
	mov	ecx, DWORD PTR _dmodel$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	fld	DWORD PTR _mul$[ebp]
	fmul	DWORD PTR [edx+eax]
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 88					; 00000058H
	mov	ecx, DWORD PTR _dmodel$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	fstp	DWORD PTR [eax+edx]

; 1008 : 		dmodel->VertPtr[i].y *= mul;

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 88					; 00000058H
	mov	ecx, DWORD PTR _dmodel$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	fld	DWORD PTR _mul$[ebp]
	fmul	DWORD PTR [edx+eax+4]
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 88					; 00000058H
	mov	ecx, DWORD PTR _dmodel$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	fstp	DWORD PTR [edx+eax+4]

; 1009 : 		dmodel->VertPtr[i].z *= mul;

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 88					; 00000058H
	mov	ecx, DWORD PTR _dmodel$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	fld	DWORD PTR _mul$[ebp]
	fmul	DWORD PTR [edx+eax+8]
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 88					; 00000058H
	mov	ecx, DWORD PTR _dmodel$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	fstp	DWORD PTR [edx+eax+8]

; 1010 : 	}

	jmp	$L83393
$L83394:

; 1011 : 
; 1012 : // setup electro verts
; 1013 : 
; 1014 : 	evert = (ELECTROZAPPED_VERT*)(dmodel->VertPtr + dmodel->VertNum);

	mov	eax, DWORD PTR _dmodel$[ebp]
	movsx	ecx, WORD PTR [eax+34]
	imul	ecx, 88					; 00000058H
	mov	edx, DWORD PTR _dmodel$[ebp]
	add	ecx, DWORD PTR [edx+52]
	mov	DWORD PTR _evert$[ebp], ecx

; 1015 : 	for (i = 0 ; i < dmodel->VertNum ; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $L83403
$L83404:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$L83403:
	mov	eax, DWORD PTR _dmodel$[ebp]
	movsx	ecx, WORD PTR [eax+34]
	cmp	DWORD PTR _i$[ebp], ecx
	jge	SHORT $L83405

; 1016 : 	{
; 1017 : 		evert[i].Time = frand(RAD);

	call	_rand
	mov	DWORD PTR tv512[ebp], eax
	fild	DWORD PTR tv512[ebp]
	fdiv	DWORD PTR __real@46fffe00
	fmul	DWORD PTR __real@40c90fdb
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _evert$[ebp]
	fstp	DWORD PTR [ecx+eax*8]

; 1018 : 		evert[i].TimeAdd = frand(5.0f) + 1.0f;

	call	_rand
	mov	DWORD PTR tv516[ebp], eax
	fild	DWORD PTR tv516[ebp]
	fdiv	DWORD PTR __real@46fffe00
	fmul	DWORD PTR __real@40a00000
	fadd	DWORD PTR __real@3f800000
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _evert$[ebp]
	fstp	DWORD PTR [ecx+eax*8+4]

; 1019 : 		if (rand() & 1) evert[i].TimeAdd = -evert[i].TimeAdd;

	call	_rand
	and	eax, 1
	je	SHORT $L83408
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _evert$[ebp]
	fld	DWORD PTR [ecx+eax*8+4]
	fchs
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _evert$[ebp]
	fstp	DWORD PTR [eax+edx*8+4]
$L83408:

; 1020 : 	}

	jmp	SHORT $L83404
$L83405:

; 1021 : 
; 1022 : // return OK
; 1023 : 
; 1024 : 	return TRUE;

	mov	eax, 1
$L83351:

; 1025 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?InitElectroZapped@@YAJPAUobject_def@@PAJ@Z ENDP	; InitElectroZapped
_TEXT	ENDS
PUBLIC	?__LINE__Var@?1??InitBombGlow@@YAJPAUobject_def@@PAJ@Z@4JA ; `InitBombGlow'::`2'::__LINE__Var
PUBLIC	?InitBombGlow@@YAJPAUobject_def@@PAJ@Z		; InitBombGlow
PUBLIC	?BombGlowHandler@@YAXPAUobject_def@@@Z		; BombGlowHandler
PUBLIC	?RenderBombGlow@@YAXPAUobject_def@@@Z		; RenderBombGlow
;	COMDAT ?__LINE__Var@?1??InitBombGlow@@YAJPAUobject_def@@PAJ@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??InitBombGlow@@YAJPAUobject_def@@PAJ@Z@4JA DD 0408H ; `InitBombGlow'::`2'::__LINE__Var
; Function compile flags: /Odt /ZI
_DATA	ENDS
;	COMDAT ?InitBombGlow@@YAJPAUobject_def@@PAJ@Z
_TEXT	SEGMENT
tv518 = -100						; size = 4
tv514 = -100						; size = 4
_gvert$ = -32						; size = 4
_dmodel$ = -28						; size = 4
_smodel$ = -24						; size = 4
_glow$ = -20						; size = 4
_mul$ = -16						; size = 4
_off$ = -12						; size = 4
_ram$ = -8						; size = 4
_i$ = -4						; size = 4
_obj$ = 8						; size = 4
_flags$ = 12						; size = 4
?InitBombGlow@@YAJPAUobject_def@@PAJ@Z PROC NEAR	; InitBombGlow, COMDAT

; 1032 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 100				; 00000064H
	push	ebx
	push	esi
	push	edi

; 1033 : 	long i, ram, off;
; 1034 : 	REAL mul;
; 1035 : 	BOMBGLOW_OBJ *glow;
; 1036 : 	MODEL *smodel, *dmodel;
; 1037 : 	BOMBGLOW_VERT *gvert;
; 1038 : 
; 1039 : // set render flags
; 1040 : 
; 1041 : 	obj->renderflag.envmap = FALSE;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+584]
	and	ecx, -2					; fffffffeH
	mov	edx, DWORD PTR _obj$[ebp]
	mov	DWORD PTR [edx+584], ecx

; 1042 : 	obj->renderflag.light = FALSE;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+584]
	and	ecx, -5					; fffffffbH
	mov	edx, DWORD PTR _obj$[ebp]
	mov	DWORD PTR [edx+584], ecx

; 1043 : 	obj->renderflag.reflect = FALSE;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+584]
	and	ecx, -17				; ffffffefH
	mov	edx, DWORD PTR _obj$[ebp]
	mov	DWORD PTR [edx+584], ecx

; 1044 : 	obj->renderflag.meshfx = FALSE;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+584]
	and	ecx, -257				; fffffeffH
	mov	edx, DWORD PTR _obj$[ebp]
	mov	DWORD PTR [edx+584], ecx

; 1045 : 
; 1046 : // setup handlers
; 1047 : 
; 1048 : 	obj->aihandler = (AI_HANDLER)BombGlowHandler;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	DWORD PTR [eax+696], OFFSET FLAT:?BombGlowHandler@@YAXPAUobject_def@@@Z ; BombGlowHandler

; 1049 : 	obj->renderhandler = (RENDER_HANDLER)RenderBombGlow;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	DWORD PTR [eax+700], OFFSET FLAT:?RenderBombGlow@@YAXPAUobject_def@@@Z ; RenderBombGlow

; 1050 : 
; 1051 : // remember owner player
; 1052 : 
; 1053 : 	obj->player = (PLAYER*)flags[0];

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR _flags$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+588], edx

; 1054 : 
; 1055 : // calc + alloc ram
; 1056 : 
; 1057 : 	smodel = &obj->player->car.Models->Body[0];

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+588]
	mov	edx, DWORD PTR [ecx+864]
	mov	eax, DWORD PTR [edx+6064]
	mov	DWORD PTR _smodel$[ebp], eax

; 1058 : 
; 1059 : 	ram = sizeof(BOMBGLOW_OBJ);

	mov	DWORD PTR _ram$[ebp], 64		; 00000040H

; 1060 : 	ram += sizeof(MODEL_POLY) * smodel->PolyNum;

	mov	eax, DWORD PTR _smodel$[ebp]
	movsx	ecx, WORD PTR [eax+32]
	imul	ecx, 52					; 00000034H
	add	ecx, DWORD PTR _ram$[ebp]
	mov	DWORD PTR _ram$[ebp], ecx

; 1061 : 	ram += sizeof(POLY_RGB) * smodel->PolyNum;

	mov	eax, DWORD PTR _smodel$[ebp]
	movsx	ecx, WORD PTR [eax+32]
	shl	ecx, 4
	add	ecx, DWORD PTR _ram$[ebp]
	mov	DWORD PTR _ram$[ebp], ecx

; 1062 : 	ram += sizeof(MODEL_VERTEX) * smodel->VertNum;

	mov	eax, DWORD PTR _smodel$[ebp]
	movsx	ecx, WORD PTR [eax+34]
	imul	ecx, 88					; 00000058H
	add	ecx, DWORD PTR _ram$[ebp]
	mov	DWORD PTR _ram$[ebp], ecx

; 1063 : 	ram += sizeof(BOMBGLOW_VERT) * smodel->VertNum;

	mov	eax, DWORD PTR _smodel$[ebp]
	movsx	ecx, WORD PTR [eax+34]
	mov	edx, DWORD PTR _ram$[ebp]
	lea	eax, DWORD PTR [edx+ecx*8]
	mov	DWORD PTR _ram$[ebp], eax

; 1064 : 
; 1065 : 	obj->Data = malloc(ram);

	push	OFFSET FLAT:??_C@_0IL@GBHCIHE@c?3?2documents?5and?5settings?2jarhea@
	mov	eax, DWORD PTR ?__LINE__Var@?1??InitBombGlow@@YAJPAUobject_def@@PAJ@Z@4JA
	add	eax, 33					; 00000021H
	push	eax
	mov	ecx, DWORD PTR _ram$[ebp]
	push	ecx
	call	?DebugMalloc@@YAPAXIHPAD@Z		; DebugMalloc
	add	esp, 12					; 0000000cH
	mov	edx, DWORD PTR _obj$[ebp]
	mov	DWORD PTR [edx+684], eax

; 1066 : 	if (!obj->Data)

	mov	eax, DWORD PTR _obj$[ebp]
	cmp	DWORD PTR [eax+684], 0
	jne	SHORT $L83430

; 1067 : 		return FALSE;

	xor	eax, eax
	jmp	$L83412
$L83430:

; 1068 : 
; 1069 : // setup bomb glow
; 1070 : 
; 1071 : 	glow = (BOMBGLOW_OBJ*)obj->Data;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+684]
	mov	DWORD PTR _glow$[ebp], ecx

; 1072 : 	glow->Timer = 0.0f;

	mov	eax, DWORD PTR _glow$[ebp]
	mov	DWORD PTR [eax], 0

; 1073 : 
; 1074 : // setup model
; 1075 : 
; 1076 : 	dmodel = &glow->Model;

	mov	eax, DWORD PTR _glow$[ebp]
	add	eax, 4
	mov	DWORD PTR _dmodel$[ebp], eax

; 1077 : 
; 1078 : 	memcpy(dmodel, smodel, sizeof(MODEL));

	push	60					; 0000003cH
	mov	eax, DWORD PTR _smodel$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dmodel$[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 1079 : 	dmodel->PolyPtr = (MODEL_POLY*)(glow + 1);

	mov	eax, DWORD PTR _glow$[ebp]
	add	eax, 64					; 00000040H
	mov	ecx, DWORD PTR _dmodel$[ebp]
	mov	DWORD PTR [ecx+48], eax

; 1080 : 	dmodel->PolyRGB = (POLY_RGB*)(dmodel->PolyPtr + dmodel->PolyNum);

	mov	eax, DWORD PTR _dmodel$[ebp]
	movsx	ecx, WORD PTR [eax+32]
	imul	ecx, 52					; 00000034H
	mov	edx, DWORD PTR _dmodel$[ebp]
	add	ecx, DWORD PTR [edx+48]
	mov	eax, DWORD PTR _dmodel$[ebp]
	mov	DWORD PTR [eax+44], ecx

; 1081 : 	dmodel->VertPtr = (MODEL_VERTEX*)(dmodel->PolyRGB + dmodel->PolyNum);

	mov	eax, DWORD PTR _dmodel$[ebp]
	movsx	ecx, WORD PTR [eax+32]
	shl	ecx, 4
	mov	edx, DWORD PTR _dmodel$[ebp]
	add	ecx, DWORD PTR [edx+44]
	mov	eax, DWORD PTR _dmodel$[ebp]
	mov	DWORD PTR [eax+52], ecx

; 1082 : 
; 1083 : 	off = (long)dmodel->VertPtr - (long)smodel->VertPtr;

	mov	eax, DWORD PTR _dmodel$[ebp]
	mov	ecx, DWORD PTR _smodel$[ebp]
	mov	edx, DWORD PTR [eax+52]
	sub	edx, DWORD PTR [ecx+52]
	mov	DWORD PTR _off$[ebp], edx

; 1084 : 
; 1085 : 	for (i = 0 ; i < dmodel->PolyNum ; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $L83438
$L83439:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$L83438:
	mov	eax, DWORD PTR _dmodel$[ebp]
	movsx	ecx, WORD PTR [eax+32]
	cmp	DWORD PTR _i$[ebp], ecx
	jge	$L83440

; 1086 : 	{
; 1087 : 		dmodel->PolyPtr[i] = smodel->PolyPtr[i];

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 52					; 00000034H
	mov	ecx, DWORD PTR _smodel$[ebp]
	mov	esi, DWORD PTR [ecx+48]
	add	esi, eax
	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 52					; 00000034H
	mov	eax, DWORD PTR _dmodel$[ebp]
	mov	edi, DWORD PTR [eax+48]
	add	edi, edx
	mov	ecx, 13					; 0000000dH
	rep movsd

; 1088 : 
; 1089 : 		dmodel->PolyPtr[i].Type |= POLY_SEMITRANS | POLY_SEMITRANS_ONE;

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 52					; 00000034H
	mov	ecx, DWORD PTR _dmodel$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	movsx	eax, WORD PTR [edx+eax]
	or	eax, 260				; 00000104H
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 52					; 00000034H
	mov	edx, DWORD PTR _dmodel$[ebp]
	mov	edx, DWORD PTR [edx+48]
	mov	WORD PTR [ecx+edx], ax

; 1090 : 		dmodel->PolyPtr[i].Tpage = TPAGE_FX3;

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 52					; 00000034H
	mov	ecx, DWORD PTR _dmodel$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	mov	WORD PTR [edx+eax+2], 29		; 0000001dH

; 1091 : 
; 1092 : 		dmodel->PolyPtr[i].v0 = (MODEL_VERTEX*)((long)dmodel->PolyPtr[i].v0 + off);

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 52					; 00000034H
	mov	ecx, DWORD PTR _dmodel$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	mov	eax, DWORD PTR [edx+eax+36]
	add	eax, DWORD PTR _off$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 52					; 00000034H
	mov	edx, DWORD PTR _dmodel$[ebp]
	mov	edx, DWORD PTR [edx+48]
	mov	DWORD PTR [edx+ecx+36], eax

; 1093 : 		dmodel->PolyPtr[i].v1 = (MODEL_VERTEX*)((long)dmodel->PolyPtr[i].v1 + off);

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 52					; 00000034H
	mov	ecx, DWORD PTR _dmodel$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	mov	eax, DWORD PTR [edx+eax+40]
	add	eax, DWORD PTR _off$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 52					; 00000034H
	mov	edx, DWORD PTR _dmodel$[ebp]
	mov	edx, DWORD PTR [edx+48]
	mov	DWORD PTR [edx+ecx+40], eax

; 1094 : 		dmodel->PolyPtr[i].v2 = (MODEL_VERTEX*)((long)dmodel->PolyPtr[i].v2 + off);

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 52					; 00000034H
	mov	ecx, DWORD PTR _dmodel$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	mov	eax, DWORD PTR [edx+eax+44]
	add	eax, DWORD PTR _off$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 52					; 00000034H
	mov	edx, DWORD PTR _dmodel$[ebp]
	mov	edx, DWORD PTR [edx+48]
	mov	DWORD PTR [edx+ecx+44], eax

; 1095 : 		dmodel->PolyPtr[i].v3 = (MODEL_VERTEX*)((long)dmodel->PolyPtr[i].v3 + off);

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 52					; 00000034H
	mov	ecx, DWORD PTR _dmodel$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	mov	eax, DWORD PTR [edx+eax+48]
	add	eax, DWORD PTR _off$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 52					; 00000034H
	mov	edx, DWORD PTR _dmodel$[ebp]
	mov	edx, DWORD PTR [edx+48]
	mov	DWORD PTR [edx+ecx+48], eax

; 1096 : 
; 1097 : 		*(long*)&dmodel->PolyRGB[i].rgb[0] = 0;

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _dmodel$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	mov	DWORD PTR [eax+edx], 0

; 1098 : 		*(long*)&dmodel->PolyRGB[i].rgb[1] = 0;

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _dmodel$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	mov	DWORD PTR [edx+eax+4], 0

; 1099 : 		*(long*)&dmodel->PolyRGB[i].rgb[2] = 0;

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _dmodel$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	mov	DWORD PTR [edx+eax+8], 0

; 1100 : 		*(long*)&dmodel->PolyRGB[i].rgb[3] = 0;

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _dmodel$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	mov	DWORD PTR [edx+eax+12], 0

; 1101 : 	}

	jmp	$L83439
$L83440:

; 1102 : 
; 1103 : 	for (i = 0 ; i < dmodel->VertNum ; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $L83453
$L83454:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$L83453:
	mov	eax, DWORD PTR _dmodel$[ebp]
	movsx	ecx, WORD PTR [eax+34]
	cmp	DWORD PTR _i$[ebp], ecx
	jge	$L83455

; 1104 : 	{
; 1105 : 		dmodel->VertPtr[i] = smodel->VertPtr[i];

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 88					; 00000058H
	mov	ecx, DWORD PTR _smodel$[ebp]
	mov	esi, DWORD PTR [ecx+52]
	add	esi, eax
	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 88					; 00000058H
	mov	eax, DWORD PTR _dmodel$[ebp]
	mov	edi, DWORD PTR [eax+52]
	add	edi, edx
	mov	ecx, 22					; 00000016H
	rep movsd

; 1106 : 
; 1107 : 		mul = 2.0f / Length((VEC*)&dmodel->VertPtr[i].x) + 1.0f;

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 88					; 00000058H
	mov	ecx, DWORD PTR _dmodel$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 88					; 00000058H
	mov	esi, DWORD PTR _dmodel$[ebp]
	mov	esi, DWORD PTR [esi+52]
	fld	DWORD PTR [edx+eax]
	fmul	DWORD PTR [esi+ecx]
	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 88					; 00000058H
	mov	eax, DWORD PTR _dmodel$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 88					; 00000058H
	mov	esi, DWORD PTR _dmodel$[ebp]
	mov	esi, DWORD PTR [esi+52]
	fld	DWORD PTR [ecx+edx+4]
	fmul	DWORD PTR [esi+eax+4]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 88					; 00000058H
	mov	edx, DWORD PTR _dmodel$[ebp]
	mov	eax, DWORD PTR [edx+52]
	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 88					; 00000058H
	mov	esi, DWORD PTR _dmodel$[ebp]
	mov	esi, DWORD PTR [esi+52]
	fld	DWORD PTR [eax+ecx+8]
	fmul	DWORD PTR [esi+edx+8]
	faddp	ST(1), ST(0)
	push	ecx
	fstp	DWORD PTR [esp]
	call	?sqrt@@YAMM@Z				; sqrt
	add	esp, 4
	fdivr	DWORD PTR __real@40000000
	fadd	DWORD PTR __real@3f800000
	fstp	DWORD PTR _mul$[ebp]

; 1108 : 		dmodel->VertPtr[i].x *= mul;

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 88					; 00000058H
	mov	ecx, DWORD PTR _dmodel$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	fld	DWORD PTR _mul$[ebp]
	fmul	DWORD PTR [edx+eax]
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 88					; 00000058H
	mov	ecx, DWORD PTR _dmodel$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	fstp	DWORD PTR [eax+edx]

; 1109 : 		dmodel->VertPtr[i].y *= mul;

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 88					; 00000058H
	mov	ecx, DWORD PTR _dmodel$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	fld	DWORD PTR _mul$[ebp]
	fmul	DWORD PTR [edx+eax+4]
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 88					; 00000058H
	mov	ecx, DWORD PTR _dmodel$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	fstp	DWORD PTR [edx+eax+4]

; 1110 : 		dmodel->VertPtr[i].z *= mul;

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 88					; 00000058H
	mov	ecx, DWORD PTR _dmodel$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	fld	DWORD PTR _mul$[ebp]
	fmul	DWORD PTR [edx+eax+8]
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 88					; 00000058H
	mov	ecx, DWORD PTR _dmodel$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	fstp	DWORD PTR [edx+eax+8]

; 1111 : 	}

	jmp	$L83454
$L83455:

; 1112 : 
; 1113 : // setup glow verts
; 1114 : 
; 1115 : 	gvert = (BOMBGLOW_VERT*)(dmodel->VertPtr + dmodel->VertNum);

	mov	eax, DWORD PTR _dmodel$[ebp]
	movsx	ecx, WORD PTR [eax+34]
	imul	ecx, 88					; 00000058H
	mov	edx, DWORD PTR _dmodel$[ebp]
	add	ecx, DWORD PTR [edx+52]
	mov	DWORD PTR _gvert$[ebp], ecx

; 1116 : 	for (i = 0 ; i < dmodel->VertNum ; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $L83464
$L83465:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$L83464:
	mov	eax, DWORD PTR _dmodel$[ebp]
	movsx	ecx, WORD PTR [eax+34]
	cmp	DWORD PTR _i$[ebp], ecx
	jge	SHORT $L83466

; 1117 : 	{
; 1118 : 		gvert[i].Time = frand(RAD);

	call	_rand
	mov	DWORD PTR tv514[ebp], eax
	fild	DWORD PTR tv514[ebp]
	fdiv	DWORD PTR __real@46fffe00
	fmul	DWORD PTR __real@40c90fdb
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _gvert$[ebp]
	fstp	DWORD PTR [ecx+eax*8]

; 1119 : 		gvert[i].TimeAdd = frand(5.0f) + 1.0f;

	call	_rand
	mov	DWORD PTR tv518[ebp], eax
	fild	DWORD PTR tv518[ebp]
	fdiv	DWORD PTR __real@46fffe00
	fmul	DWORD PTR __real@40a00000
	fadd	DWORD PTR __real@3f800000
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _gvert$[ebp]
	fstp	DWORD PTR [ecx+eax*8+4]

; 1120 : 		if (rand() & 1) gvert[i].TimeAdd = -gvert[i].TimeAdd;

	call	_rand
	and	eax, 1
	je	SHORT $L83469
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _gvert$[ebp]
	fld	DWORD PTR [ecx+eax*8+4]
	fchs
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _gvert$[ebp]
	fstp	DWORD PTR [eax+edx*8+4]
$L83469:

; 1121 : 	}

	jmp	SHORT $L83465
$L83466:

; 1122 : 
; 1123 : // return OK
; 1124 : 
; 1125 : 	return TRUE;

	mov	eax, 1
$L83412:

; 1126 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?InitBombGlow@@YAJPAUobject_def@@PAJ@Z ENDP		; InitBombGlow
_TEXT	ENDS
PUBLIC	__real@43480000
PUBLIC	__real@4b000000
PUBLIC	__real@3ba3d70a
PUBLIC	__real@3f000000
PUBLIC	__real@42800000
PUBLIC	__real@3dcccccd
PUBLIC	__real@3e800000
PUBLIC	__real@453b8000
PUBLIC	__real@40400000
PUBLIC	__real@44000000
PUBLIC	__real@45800000
PUBLIC	?ShockwaveWorldMeshFxChecker@@YAXPAX@Z		; ShockwaveWorldMeshFxChecker
PUBLIC	?ShockwaveModelMeshFxChecker@@YAXPAX@Z		; ShockwaveModelMeshFxChecker
EXTRN	?AddWorldMeshFx@@YAXP6AXPAX@Z0@Z:NEAR		; AddWorldMeshFx
EXTRN	?AddModelMeshFx@@YAXP6AXPAX@Z0@Z:NEAR		; AddModelMeshFx
EXTRN	?FreeSfx3D@@YAXPAUSAMPLE_3D@@@Z:NEAR		; FreeSfx3D
EXTRN	?OBJ_FreeObject@@YAJPAUobject_def@@@Z:NEAR	; OBJ_FreeObject
EXTRN	?CreateSpark@@YA_NW4SparkTypeEnum@@PAUVectorStruct@@1M_K@Z:NEAR ; CreateSpark
EXTRN	?RemoveField@@YAXPAUForceFieldStruct@@@Z:NEAR	; RemoveField
EXTRN	?TimeStep@@3MA:DWORD				; TimeStep
;	COMDAT __real@43480000
CONST	SEGMENT
__real@43480000 DD 043480000r			; 200
CONST	ENDS
;	COMDAT __real@4b000000
CONST	SEGMENT
__real@4b000000 DD 04b000000r			; 8.38861e+006
CONST	ENDS
;	COMDAT __real@3ba3d70a
CONST	SEGMENT
__real@3ba3d70a DD 03ba3d70ar			; 0.005
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT __real@42800000
CONST	SEGMENT
__real@42800000 DD 042800000r			; 64
CONST	ENDS
;	COMDAT __real@3dcccccd
CONST	SEGMENT
__real@3dcccccd DD 03dcccccdr			; 0.1
CONST	ENDS
;	COMDAT __real@3e800000
CONST	SEGMENT
__real@3e800000 DD 03e800000r			; 0.25
CONST	ENDS
;	COMDAT __real@453b8000
CONST	SEGMENT
__real@453b8000 DD 0453b8000r			; 3000
CONST	ENDS
;	COMDAT __real@40400000
CONST	SEGMENT
__real@40400000 DD 040400000r			; 3
CONST	ENDS
;	COMDAT __real@44000000
CONST	SEGMENT
__real@44000000 DD 044000000r			; 512
CONST	ENDS
;	COMDAT __real@45800000
CONST	SEGMENT
__real@45800000 DD 045800000r			; 4096
; Function compile flags: /Odt /ZI
CONST	ENDS
;	COMDAT ?ShockwaveHandler@@YAXPAUobject_def@@@Z
_TEXT	SEGMENT
tv552 = -144						; size = 4
tv547 = -140						; size = 4
tv545 = -140						; size = 4
tv543 = -140						; size = 4
tv541 = -140						; size = 4
tv453 = -140						; size = 4
tv451 = -140						; size = 4
__temp$83511 = -72					; size = 4
__temp$83483 = -68					; size = 4
_count$ = -64						; size = 4
_i$ = -60						; size = 4
_mul$ = -56						; size = 4
_vec4$ = -52						; size = 12
_vec3$ = -40						; size = 12
_vec2$ = -28						; size = 12
_vec$ = -16						; size = 12
_shockwave$ = -4					; size = 4
_obj$ = 8						; size = 4
?ShockwaveHandler@@YAXPAUobject_def@@@Z PROC NEAR	; ShockwaveHandler, COMDAT

; 1133 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 144				; 00000090H
	push	ebx
	push	esi
	push	edi

; 1134 : 	SHOCKWAVE_OBJ *shockwave = (SHOCKWAVE_OBJ*)obj->Data;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+684]
	mov	DWORD PTR _shockwave$[ebp], ecx

; 1135 : 	VEC vec, vec2, vec3, vec4;
; 1136 : 	REAL mul;
; 1137 : 	long i, count;
; 1138 : 
; 1139 : // alive?
; 1140 : 
; 1141 : 	if (shockwave->Alive)

	mov	eax, DWORD PTR _shockwave$[ebp]
	cmp	DWORD PTR [eax], 0
	je	$L83482

; 1142 : 	{
; 1143 : 
; 1144 : // inc age
; 1145 : 
; 1146 : 		shockwave->Age += TimeStep;

	mov	eax, DWORD PTR _shockwave$[ebp]
	fld	DWORD PTR ?TimeStep@@3MA		; TimeStep
	fadd	DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _shockwave$[ebp]
	fstp	DWORD PTR [ecx+4]

; 1147 : 
; 1148 : // create particles
; 1149 : 
; 1150 : 		FTOL(TimeStep * 200.0f, count);

	fld	DWORD PTR ?TimeStep@@3MA		; TimeStep
	fmul	DWORD PTR __real@43480000
	fadd	DWORD PTR __real@4b000000
	fstp	DWORD PTR __temp$83483[ebp]
	mov	eax, DWORD PTR __temp$83483[ebp]
	and	eax, 16777215				; 00ffffffH
	mov	DWORD PTR _count$[ebp], eax

; 1151 : 		CopyVec(&obj->body.Centre.Pos, &vec3);

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR _vec3$[ebp], ecx
	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR _vec3$[ebp+4], ecx
	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR _vec3$[ebp+8], ecx

; 1152 : 		VecEqScalarVec(&vec4, 1.0f / 200.0f, &obj->body.Centre.Vel);

	mov	eax, DWORD PTR _obj$[ebp]
	fld	DWORD PTR __real@3ba3d70a
	fmul	DWORD PTR [eax+32]
	fstp	DWORD PTR _vec4$[ebp]
	mov	eax, DWORD PTR _obj$[ebp]
	fld	DWORD PTR __real@3ba3d70a
	fmul	DWORD PTR [eax+36]
	fstp	DWORD PTR _vec4$[ebp+4]
	mov	eax, DWORD PTR _obj$[ebp]
	fld	DWORD PTR __real@3ba3d70a
	fmul	DWORD PTR [eax+40]
	fstp	DWORD PTR _vec4$[ebp+8]

; 1153 : 
; 1154 : 		for (i = 0 ; i < count ; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $L83486
$L83487:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$L83486:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _count$[ebp]
	jge	$L83488

; 1155 : 		{
; 1156 : 			SetVector(&vec, frand(1.0f) - 0.5f, frand(1.0f) - 0.5f, 0.0f);

	call	_rand
	mov	DWORD PTR tv451[ebp], eax
	fild	DWORD PTR tv451[ebp]
	fdiv	DWORD PTR __real@46fffe00
	fmul	DWORD PTR __real@3f800000
	fsub	DWORD PTR __real@3f000000
	fstp	DWORD PTR _vec$[ebp]
	call	_rand
	mov	DWORD PTR tv453[ebp], eax
	fild	DWORD PTR tv453[ebp]
	fdiv	DWORD PTR __real@46fffe00
	fmul	DWORD PTR __real@3f800000
	fsub	DWORD PTR __real@3f000000
	fstp	DWORD PTR _vec$[ebp+4]
	mov	DWORD PTR _vec$[ebp+8], 0

; 1157 : 			mul = 64.0f / Length(&vec);

	fld	DWORD PTR _vec$[ebp]
	fmul	DWORD PTR _vec$[ebp]
	fld	DWORD PTR _vec$[ebp+4]
	fmul	DWORD PTR _vec$[ebp+4]
	faddp	ST(1), ST(0)
	fld	DWORD PTR _vec$[ebp+8]
	fmul	DWORD PTR _vec$[ebp+8]
	faddp	ST(1), ST(0)
	push	ecx
	fstp	DWORD PTR [esp]
	call	?sqrt@@YAMM@Z				; sqrt
	add	esp, 4
	fdivr	DWORD PTR __real@42800000
	fstp	DWORD PTR _mul$[ebp]

; 1158 : 			VecMulScalar(&vec, mul);

	fld	DWORD PTR _vec$[ebp]
	fmul	DWORD PTR _mul$[ebp]
	fstp	DWORD PTR _vec$[ebp]
	fld	DWORD PTR _vec$[ebp+4]
	fmul	DWORD PTR _mul$[ebp]
	fstp	DWORD PTR _vec$[ebp+4]
	fld	DWORD PTR _vec$[ebp+8]
	fmul	DWORD PTR _mul$[ebp]
	fstp	DWORD PTR _vec$[ebp+8]

; 1159 : 			RotVector(&obj->body.Centre.WMatrix, &vec, &vec2);

	lea	eax, DWORD PTR _vec2$[ebp]
	push	eax
	lea	ecx, DWORD PTR _vec$[ebp]
	push	ecx
	mov	edx, DWORD PTR _obj$[ebp]
	add	edx, 100				; 00000064H
	push	edx
	call	?RotVector@@YAXPATMatrixUnion@@PAUVectorStruct@@1@Z ; RotVector
	add	esp, 12					; 0000000cH

; 1160 : 			VecPlusScalarVec(&vec3, 0.1f, &vec2, &vec);

	fld	DWORD PTR __real@3dcccccd
	fmul	DWORD PTR _vec2$[ebp]
	fadd	DWORD PTR _vec3$[ebp]
	fstp	DWORD PTR _vec$[ebp]
	fld	DWORD PTR __real@3dcccccd
	fmul	DWORD PTR _vec2$[ebp+4]
	fadd	DWORD PTR _vec3$[ebp+4]
	fstp	DWORD PTR _vec$[ebp+4]
	fld	DWORD PTR __real@3dcccccd
	fmul	DWORD PTR _vec2$[ebp+8]
	fadd	DWORD PTR _vec3$[ebp+8]
	fstp	DWORD PTR _vec$[ebp+8]

; 1161 : 			CreateSpark(SPARK_BLUE, &vec, &vec2, 0.0f, 0);

	push	0
	push	0
	push	0
	lea	eax, DWORD PTR _vec2$[ebp]
	push	eax
	lea	ecx, DWORD PTR _vec$[ebp]
	push	ecx
	push	13					; 0000000dH
	call	?CreateSpark@@YA_NW4SparkTypeEnum@@PAUVectorStruct@@1M_K@Z ; CreateSpark
	add	esp, 24					; 00000018H

; 1162 : 
; 1163 : 			AddVector(&vec3, &vec4, &vec3);

	fld	DWORD PTR _vec3$[ebp]
	fadd	DWORD PTR _vec4$[ebp]
	fstp	DWORD PTR _vec3$[ebp]
	fld	DWORD PTR _vec3$[ebp+4]
	fadd	DWORD PTR _vec4$[ebp+4]
	fstp	DWORD PTR _vec3$[ebp+4]
	fld	DWORD PTR _vec3$[ebp+8]
	fadd	DWORD PTR _vec4$[ebp+8]
	fstp	DWORD PTR _vec3$[ebp+8]

; 1164 : 		}

	jmp	$L83487
$L83488:

; 1165 : 
; 1166 : // maintain light
; 1167 : 
; 1168 : 		if (obj->Light)

	mov	eax, DWORD PTR _obj$[ebp]
	cmp	DWORD PTR [eax+672], 0
	je	SHORT $L83492

; 1169 : 		{
; 1170 : 			obj->Light->x = obj->body.Centre.Pos.v[X];

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+672]
	mov	edx, DWORD PTR _obj$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	DWORD PTR [ecx], eax

; 1171 : 			obj->Light->y = obj->body.Centre.Pos.v[Y];

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+672]
	mov	edx, DWORD PTR _obj$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	DWORD PTR [ecx+4], eax

; 1172 : 			obj->Light->z = obj->body.Centre.Pos.v[Z];

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+672]
	mov	edx, DWORD PTR _obj$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	DWORD PTR [ecx+8], eax
$L83492:

; 1173 : 		}
; 1174 : 
; 1175 : // maintain sfx
; 1176 : 
; 1177 : 		if (obj->Sfx3D)

	mov	eax, DWORD PTR _obj$[ebp]
	cmp	DWORD PTR [eax+680], 0
	je	SHORT $L83493

; 1178 : 		{
; 1179 : 			CopyVec(&obj->body.Centre.Pos, &obj->Sfx3D->Pos);

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+680]
	mov	edx, DWORD PTR _obj$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	DWORD PTR [ecx+28], eax
	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+680]
	mov	edx, DWORD PTR _obj$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	DWORD PTR [ecx+32], eax
	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+680]
	mov	edx, DWORD PTR _obj$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	DWORD PTR [ecx+36], eax
$L83493:

; 1180 : 		}
; 1181 : 
; 1182 : // stuck?
; 1183 : 
; 1184 : 		if (shockwave->Age > 0.25f)

	mov	eax, DWORD PTR _shockwave$[ebp]
	fld	DWORD PTR [eax+4]
	fcomp	DWORD PTR __real@3e800000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $L83494

; 1185 : 		{
; 1186 : 			SubVector(&obj->body.Centre.Pos, &shockwave->OldPos, &vec);

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR _shockwave$[ebp]
	fld	DWORD PTR [eax+20]
	fsub	DWORD PTR [ecx+12]
	fstp	DWORD PTR _vec$[ebp]
	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR _shockwave$[ebp]
	fld	DWORD PTR [eax+24]
	fsub	DWORD PTR [ecx+16]
	fstp	DWORD PTR _vec$[ebp+4]
	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR _shockwave$[ebp]
	fld	DWORD PTR [eax+28]
	fsub	DWORD PTR [ecx+20]
	fstp	DWORD PTR _vec$[ebp+8]

; 1187 : 			if (Length(&vec) / TimeStep < SHOCKWAVE_MIN_VEL)

	fld	DWORD PTR _vec$[ebp]
	fmul	DWORD PTR _vec$[ebp]
	fld	DWORD PTR _vec$[ebp+4]
	fmul	DWORD PTR _vec$[ebp+4]
	faddp	ST(1), ST(0)
	fld	DWORD PTR _vec$[ebp+8]
	fmul	DWORD PTR _vec$[ebp+8]
	faddp	ST(1), ST(0)
	push	ecx
	fstp	DWORD PTR [esp]
	call	?sqrt@@YAMM@Z				; sqrt
	add	esp, 4
	fdiv	DWORD PTR ?TimeStep@@3MA		; TimeStep
	fcomp	DWORD PTR __real@453b8000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L83494

; 1188 : 				shockwave->Age = SHOCKWAVE_MAX_AGE;

	mov	eax, DWORD PTR _shockwave$[ebp]
	mov	DWORD PTR [eax+4], 1073741824		; 40000000H
$L83494:

; 1189 : 		}
; 1190 : 
; 1191 : 		CopyVec(&obj->body.Centre.Pos, &shockwave->OldPos);

	mov	eax, DWORD PTR _shockwave$[ebp]
	mov	ecx, DWORD PTR _obj$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _shockwave$[ebp]
	mov	ecx, DWORD PTR _obj$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR [eax+16], edx
	mov	eax, DWORD PTR _shockwave$[ebp]
	mov	ecx, DWORD PTR _obj$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR [eax+20], edx

; 1192 : 
; 1193 : // kill?
; 1194 : 
; 1195 : 		if (shockwave->Age >= SHOCKWAVE_MAX_AGE)

	mov	eax, DWORD PTR _shockwave$[ebp]
	fld	DWORD PTR [eax+4]
	fcomp	DWORD PTR __real@40000000
	fnstsw	ax
	test	ah, 1
	jne	$L83497

; 1196 : 		{
; 1197 : 			shockwave->Alive = FALSE;

	mov	eax, DWORD PTR _shockwave$[ebp]
	mov	DWORD PTR [eax], 0

; 1198 : 
; 1199 : 			if (obj->Sfx3D)

	mov	eax, DWORD PTR _obj$[ebp]
	cmp	DWORD PTR [eax+680], 0
	je	SHORT $L83498

; 1200 : 				FreeSfx3D(obj->Sfx3D);

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+680]
	push	ecx
	call	?FreeSfx3D@@YAXPAUSAMPLE_3D@@@Z		; FreeSfx3D
	add	esp, 4
$L83498:

; 1201 : 
; 1202 : 			if (obj->Field)

	mov	eax, DWORD PTR _obj$[ebp]
	cmp	DWORD PTR [eax+664], 0
	je	SHORT $L83499

; 1203 : 			{
; 1204 : 				RemoveField(obj->Field);

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+664]
	push	ecx
	call	?RemoveField@@YAXPAUForceFieldStruct@@@Z ; RemoveField
	add	esp, 4

; 1205 : 				obj->Field = NULL;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	DWORD PTR [eax+664], 0
$L83499:

; 1206 : 			}
; 1207 : 
; 1208 : 			for (i = 0 ; i < 128 ; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $L83500
$L83501:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$L83500:
	cmp	DWORD PTR _i$[ebp], 128			; 00000080H
	jge	$L83497

; 1209 : 			{
; 1210 : 				SetVector(&vec, frand(2.0f) - 1.0f, -frand(3.0f), frand(2.0f) - 1.0f);

	call	_rand
	mov	DWORD PTR tv541[ebp], eax
	fild	DWORD PTR tv541[ebp]
	fdiv	DWORD PTR __real@46fffe00
	fadd	ST(0), ST(0)
	fsub	DWORD PTR __real@3f800000
	fstp	DWORD PTR _vec$[ebp]
	call	_rand
	mov	DWORD PTR tv543[ebp], eax
	fild	DWORD PTR tv543[ebp]
	fdiv	DWORD PTR __real@46fffe00
	fmul	DWORD PTR __real@40400000
	fchs
	fstp	DWORD PTR _vec$[ebp+4]
	call	_rand
	mov	DWORD PTR tv545[ebp], eax
	fild	DWORD PTR tv545[ebp]
	fdiv	DWORD PTR __real@46fffe00
	fadd	ST(0), ST(0)
	fsub	DWORD PTR __real@3f800000
	fstp	DWORD PTR _vec$[ebp+8]

; 1211 : 				mul = (frand(512.0f) + 512.0f) / Length(&vec);

	call	_rand
	mov	DWORD PTR tv547[ebp], eax
	fild	DWORD PTR tv547[ebp]
	fdiv	DWORD PTR __real@46fffe00
	fmul	DWORD PTR __real@44000000
	fadd	DWORD PTR __real@44000000
	fstp	DWORD PTR tv552[ebp]
	fld	DWORD PTR _vec$[ebp]
	fmul	DWORD PTR _vec$[ebp]
	fld	DWORD PTR _vec$[ebp+4]
	fmul	DWORD PTR _vec$[ebp+4]
	faddp	ST(1), ST(0)
	fld	DWORD PTR _vec$[ebp+8]
	fmul	DWORD PTR _vec$[ebp+8]
	faddp	ST(1), ST(0)
	push	ecx
	fstp	DWORD PTR [esp]
	call	?sqrt@@YAMM@Z				; sqrt
	add	esp, 4
	fdivr	DWORD PTR tv552[ebp]
	fstp	DWORD PTR _mul$[ebp]

; 1212 : 				VecMulScalar(&vec, mul);

	fld	DWORD PTR _vec$[ebp]
	fmul	DWORD PTR _mul$[ebp]
	fstp	DWORD PTR _vec$[ebp]
	fld	DWORD PTR _vec$[ebp+4]
	fmul	DWORD PTR _mul$[ebp]
	fstp	DWORD PTR _vec$[ebp+4]
	fld	DWORD PTR _vec$[ebp+8]
	fmul	DWORD PTR _mul$[ebp]
	fstp	DWORD PTR _vec$[ebp+8]

; 1213 : 				CreateSpark(SPARK_BIGBLUE, &obj->body.Centre.Pos, &vec, 0.0f, 0);

	push	0
	push	0
	push	0
	lea	eax, DWORD PTR _vec$[ebp]
	push	eax
	mov	ecx, DWORD PTR _obj$[ebp]
	add	ecx, 20					; 00000014H
	push	ecx
	push	14					; 0000000eH
	call	?CreateSpark@@YA_NW4SparkTypeEnum@@PAUVectorStruct@@1M_K@Z ; CreateSpark
	add	esp, 24					; 00000018H

; 1214 : 			}

	jmp	$L83501
$L83497:

; 1215 : 		}
; 1216 : 	}
; 1217 : 
; 1218 : // dying
; 1219 : 
; 1220 : 	else

	jmp	SHORT $L83508
$L83482:

; 1221 : 	{
; 1222 : 		shockwave->Reach -= TimeStep * 4096;

	fld	DWORD PTR ?TimeStep@@3MA		; TimeStep
	fmul	DWORD PTR __real@45800000
	mov	eax, DWORD PTR _shockwave$[ebp]
	fsubr	DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _shockwave$[ebp]
	fstp	DWORD PTR [ecx+8]

; 1223 : 		if (shockwave->Reach < 0)

	mov	eax, DWORD PTR _shockwave$[ebp]
	fld	DWORD PTR [eax+8]
	fcomp	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L83509

; 1224 : 		{
; 1225 : 			OBJ_FreeObject(obj);

	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	call	?OBJ_FreeObject@@YAJPAUobject_def@@@Z	; OBJ_FreeObject
	add	esp, 4

; 1226 : 			return;

	jmp	$L83472
$L83509:

; 1227 : 		}
; 1228 : 
; 1229 : 		if (obj->Light)

	mov	eax, DWORD PTR _obj$[ebp]
	cmp	DWORD PTR [eax+672], 0
	je	SHORT $L83508

; 1230 : 		{
; 1231 : 			FTOL(shockwave->Reach / 8.0f, obj->Light->b);

	mov	eax, DWORD PTR _shockwave$[ebp]
	fld	DWORD PTR [eax+8]
	fdiv	DWORD PTR __real@41000000
	fadd	DWORD PTR __real@4b000000
	fstp	DWORD PTR __temp$83511[ebp]
	mov	eax, DWORD PTR __temp$83511[ebp]
	and	eax, 16777215				; 00ffffffH
	mov	ecx, DWORD PTR _obj$[ebp]
	mov	edx, DWORD PTR [ecx+672]
	mov	DWORD PTR [edx+96], eax
$L83508:

; 1232 : 		}
; 1233 : 	}	
; 1234 : 
; 1235 : // set bounding box + add to mesh fx lists
; 1236 : 
; 1237 : 	SetBBox(&shockwave->Box,
; 1238 : 		obj->body.Centre.Pos.v[X] - shockwave->Reach,
; 1239 : 		obj->body.Centre.Pos.v[X] + shockwave->Reach,
; 1240 : 		obj->body.Centre.Pos.v[Y] - shockwave->Reach,
; 1241 : 		obj->body.Centre.Pos.v[Y] + shockwave->Reach,
; 1242 : 		obj->body.Centre.Pos.v[Z] - shockwave->Reach,
; 1243 : 		obj->body.Centre.Pos.v[Z] + shockwave->Reach);

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR _shockwave$[ebp]
	fld	DWORD PTR [eax+20]
	fsub	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _shockwave$[ebp]
	fstp	DWORD PTR [edx+24]
	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR _shockwave$[ebp]
	fld	DWORD PTR [eax+20]
	fadd	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _shockwave$[ebp]
	fstp	DWORD PTR [edx+28]
	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR _shockwave$[ebp]
	fld	DWORD PTR [eax+24]
	fsub	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _shockwave$[ebp]
	fstp	DWORD PTR [edx+32]
	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR _shockwave$[ebp]
	fld	DWORD PTR [eax+24]
	fadd	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _shockwave$[ebp]
	fstp	DWORD PTR [edx+36]
	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR _shockwave$[ebp]
	fld	DWORD PTR [eax+28]
	fsub	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _shockwave$[ebp]
	fstp	DWORD PTR [edx+40]
	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR _shockwave$[ebp]
	fld	DWORD PTR [eax+28]
	fadd	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _shockwave$[ebp]
	fstp	DWORD PTR [edx+44]

; 1244 : 
; 1245 : 	AddWorldMeshFx(ShockwaveWorldMeshFxChecker, obj);

	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	push	OFFSET FLAT:?ShockwaveWorldMeshFxChecker@@YAXPAX@Z ; ShockwaveWorldMeshFxChecker
	call	?AddWorldMeshFx@@YAXP6AXPAX@Z0@Z	; AddWorldMeshFx
	add	esp, 8

; 1246 : 	AddModelMeshFx(ShockwaveModelMeshFxChecker, obj);

	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	push	OFFSET FLAT:?ShockwaveModelMeshFxChecker@@YAXPAX@Z ; ShockwaveModelMeshFxChecker
	call	?AddModelMeshFx@@YAXP6AXPAX@Z0@Z	; AddModelMeshFx
	add	esp, 8
$L83472:

; 1247 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?ShockwaveHandler@@YAXPAUobject_def@@@Z ENDP		; ShockwaveHandler
_TEXT	ENDS
PUBLIC	?FireWorkMove@@YAXPAUobject_def@@@Z		; FireWorkMove
PUBLIC	?FireworkExplode@@YAXPAUobject_def@@@Z		; FireworkExplode
PUBLIC	__real@3f99999a
PUBLIC	__real@4000000000000000
PUBLIC	__real@42000000
PUBLIC	__real@43000000
PUBLIC	__real@3fe999999999999a
EXTRN	__ftol2:NEAR
;	COMDAT __real@3f99999a
CONST	SEGMENT
__real@3f99999a DD 03f99999ar			; 1.2
CONST	ENDS
;	COMDAT __real@4000000000000000
CONST	SEGMENT
__real@4000000000000000 DQ 04000000000000000r	; 2
CONST	ENDS
;	COMDAT __real@42000000
CONST	SEGMENT
__real@42000000 DD 042000000r			; 32
CONST	ENDS
;	COMDAT __real@43000000
CONST	SEGMENT
__real@43000000 DD 043000000r			; 128
CONST	ENDS
;	COMDAT __real@3fe999999999999a
CONST	SEGMENT
__real@3fe999999999999a DQ 03fe999999999999ar	; 0.8
; Function compile flags: /Odt /ZI
CONST	ENDS
;	COMDAT ?FireworkHandler@@YAXPAUobject_def@@@Z
_TEXT	SEGMENT
tv215 = -72						; size = 4
_firework$ = -4						; size = 4
_obj$ = 8						; size = 4
?FireworkHandler@@YAXPAUobject_def@@@Z PROC NEAR	; FireworkHandler, COMDAT

; 1254 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi

; 1255 : 	FIREWORK_OBJ *firework = (FIREWORK_OBJ *)obj->Data;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+684]
	mov	DWORD PTR _firework$[ebp], ecx

; 1256 : 
; 1257 : 	// maintain sfx
; 1258 : 	if (obj->Sfx3D)

	mov	eax, DWORD PTR _obj$[ebp]
	cmp	DWORD PTR [eax+680], 0
	je	SHORT $L83519

; 1259 : 	{
; 1260 : 		CopyVec(&obj->body.Centre.Pos, &obj->Sfx3D->Pos);

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+680]
	mov	edx, DWORD PTR _obj$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	DWORD PTR [ecx+28], eax
	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+680]
	mov	edx, DWORD PTR _obj$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	DWORD PTR [ecx+32], eax
	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+680]
	mov	edx, DWORD PTR _obj$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	DWORD PTR [ecx+36], eax
$L83519:

; 1261 : 	}
; 1262 : 
; 1263 : 	// check age of firework
; 1264 : 	firework->Age += TimeStep;

	mov	eax, DWORD PTR _firework$[ebp]
	fld	DWORD PTR ?TimeStep@@3MA		; TimeStep
	fadd	DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _firework$[ebp]
	fstp	DWORD PTR [ecx+8]

; 1265 : 
; 1266 : 	// Move or set up explosion
; 1267 : 	if (firework->Age < MAX_FIREWORK_AGE) {

	mov	eax, DWORD PTR _firework$[ebp]
	fld	DWORD PTR [eax+8]
	fcomp	DWORD PTR __real@3f99999a
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L83521

; 1268 : 		// Move firework
; 1269 : 		FireWorkMove(obj);

	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	call	?FireWorkMove@@YAXPAUobject_def@@@Z	; FireWorkMove
	add	esp, 4

; 1270 : 	} else {

	jmp	$L83516
$L83521:

; 1271 : 		if (!firework->Exploded) {

	mov	eax, DWORD PTR _firework$[ebp]
	movzx	ecx, BYTE PTR [eax+4]
	test	ecx, ecx
	jne	SHORT $L83523

; 1272 : 			// Set up explosions
; 1273 : 			FireworkExplode(obj);

	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	call	?FireworkExplode@@YAXPAUobject_def@@@Z	; FireworkExplode
	add	esp, 4

; 1274 : 		} else {

	jmp	$L83516
$L83523:

; 1275 : 			// update the lightsource
; 1276 : 			if ((obj->Light != NULL) && (firework->Age < MAX_FIREWORK_AGE + 0.8)) {

	mov	eax, DWORD PTR _obj$[ebp]
	cmp	DWORD PTR [eax+672], 0
	je	$L83526
	mov	eax, DWORD PTR _firework$[ebp]
	fld	DWORD PTR [eax+8]
	fcomp	QWORD PTR __real@4000000000000000
	fnstsw	ax
	test	ah, 5
	jp	$L83526

; 1277 : 				obj->Light->r = 128 + (long)(frand(32)) - (long)((128 * (firework->Age - MAX_FIREWORK_AGE)) / 0.8);

	call	_rand
	mov	DWORD PTR tv215[ebp], eax
	fild	DWORD PTR tv215[ebp]
	fdiv	DWORD PTR __real@46fffe00
	fmul	DWORD PTR __real@42000000
	call	__ftol2
	mov	esi, eax
	add	esi, 128				; 00000080H
	mov	eax, DWORD PTR _firework$[ebp]
	fld	DWORD PTR [eax+8]
	fsub	DWORD PTR __real@3f99999a
	fmul	DWORD PTR __real@43000000
	fdiv	QWORD PTR __real@3fe999999999999a
	call	__ftol2
	sub	esi, eax
	mov	ecx, DWORD PTR _obj$[ebp]
	mov	edx, DWORD PTR [ecx+672]
	mov	DWORD PTR [edx+88], esi

; 1278 : 				obj->Light->g = 32 - (long)((32 * (firework->Age - MAX_FIREWORK_AGE)) / 0.8);

	mov	eax, DWORD PTR _firework$[ebp]
	fld	DWORD PTR [eax+8]
	fsub	DWORD PTR __real@3f99999a
	fmul	DWORD PTR __real@42000000
	fdiv	QWORD PTR __real@3fe999999999999a
	call	__ftol2
	mov	ecx, 32					; 00000020H
	sub	ecx, eax
	mov	edx, DWORD PTR _obj$[ebp]
	mov	eax, DWORD PTR [edx+672]
	mov	DWORD PTR [eax+92], ecx

; 1279 : 				obj->Light->b = 64 - (long)((64 * (firework->Age - MAX_FIREWORK_AGE)) / 0.8);

	mov	eax, DWORD PTR _firework$[ebp]
	fld	DWORD PTR [eax+8]
	fsub	DWORD PTR __real@3f99999a
	fmul	DWORD PTR __real@42800000
	fdiv	QWORD PTR __real@3fe999999999999a
	call	__ftol2
	mov	ecx, 64					; 00000040H
	sub	ecx, eax
	mov	edx, DWORD PTR _obj$[ebp]
	mov	eax, DWORD PTR [edx+672]
	mov	DWORD PTR [eax+96], ecx

; 1280 : 			} else {

	jmp	SHORT $L83516
$L83526:

; 1281 : 				// Kill the firework
; 1282 : 				OBJ_FreeObject(obj);

	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	call	?OBJ_FreeObject@@YAJPAUobject_def@@@Z	; OBJ_FreeObject
	add	esp, 4
$L83516:

; 1283 : 			}
; 1284 : 		}
; 1285 : 	}
; 1286 : 
; 1287 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?FireworkHandler@@YAXPAUobject_def@@@Z ENDP		; FireworkHandler
_TEXT	ENDS
PUBLIC	__real@3727c5ac
PUBLIC	__real@40200000
PUBLIC	__real@bf000000
PUBLIC	__real@bba3d70a
PUBLIC	__real@42480000
PUBLIC	__real@3f747ae147ae147b
EXTRN	?ApplyParticleImpulse@@YAXPAUParticleStruct@@PAUVectorStruct@@@Z:NEAR ; ApplyParticleImpulse
EXTRN	?ApplyBodyImpulse@@YAXPAUNewBodyStruct@@PAUVectorStruct@@1@Z:NEAR ; ApplyBodyImpulse
EXTRN	?UpdateBody@@YAXPAUNewBodyStruct@@M@Z:NEAR	; UpdateBody
EXTRN	?ZeroVector@@3UVectorStruct@@A:BYTE		; ZeroVector
EXTRN	?DownVec@@3UVectorStruct@@A:BYTE		; DownVec
EXTRN	?UpdateTrail@@YAXPAUSparkTrailStruct@@PAUVectorStruct@@@Z:NEAR ; UpdateTrail
EXTRN	?ModifyFirstTrail@@YAXPAUSparkTrailStruct@@PAUVectorStruct@@@Z:NEAR ; ModifyFirstTrail
EXTRN	?FLD_Gravity@@3MA:DWORD				; FLD_Gravity
;	COMDAT __real@3727c5ac
CONST	SEGMENT
__real@3727c5ac DD 03727c5acr			; 1e-005
CONST	ENDS
;	COMDAT __real@40200000
CONST	SEGMENT
__real@40200000 DD 040200000r			; 2.5
CONST	ENDS
;	COMDAT __real@bf000000
CONST	SEGMENT
__real@bf000000 DD 0bf000000r			; -0.5
CONST	ENDS
;	COMDAT __real@bba3d70a
CONST	SEGMENT
__real@bba3d70a DD 0bba3d70ar			; -0.005
CONST	ENDS
;	COMDAT __real@42480000
CONST	SEGMENT
__real@42480000 DD 042480000r			; 50
CONST	ENDS
;	COMDAT __real@3f747ae147ae147b
CONST	SEGMENT
__real@3f747ae147ae147b DQ 03f747ae147ae147br	; 0.005
; Function compile flags: /Odt /ZI
CONST	ENDS
;	COMDAT ?FireWorkMove@@YAXPAUobject_def@@@Z
_TEXT	SEGMENT
tv333 = -116						; size = 4
_firework$ = -48					; size = 4
_offset$ = -44						; size = 12
_imp$ = -32						; size = 12
_dR$ = -20						; size = 12
_impMod$ = -8						; size = 4
_dRLen$ = -4						; size = 4
_obj$ = 8						; size = 4
?FireWorkMove@@YAXPAUobject_def@@@Z PROC NEAR		; FireWorkMove, COMDAT

; 1290 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 116				; 00000074H
	push	ebx
	push	esi
	push	edi

; 1291 : 	REAL dRLen, impMod;
; 1292 : 	VEC dR, imp, offset;
; 1293 : 	// VEC angImp;
; 1294 : 	FIREWORK_OBJ *firework = (FIREWORK_OBJ *)obj->Data;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+684]
	mov	DWORD PTR _firework$[ebp], ecx

; 1295 : 
; 1296 : 	// Get the target relative position
; 1297 : 	if (firework->Target != NULL) {

	mov	eax, DWORD PTR _firework$[ebp]
	cmp	DWORD PTR [eax], 0
	je	$L83546

; 1298 : 		VecMinusVec(&firework->Target->body.Centre.Pos, &obj->body.Centre.Pos, &dR);

	mov	eax, DWORD PTR _firework$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _obj$[ebp]
	fld	DWORD PTR [ecx+20]
	fsub	DWORD PTR [edx+20]
	fstp	DWORD PTR _dR$[ebp]
	mov	eax, DWORD PTR _firework$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _obj$[ebp]
	fld	DWORD PTR [ecx+24]
	fsub	DWORD PTR [edx+24]
	fstp	DWORD PTR _dR$[ebp+4]
	mov	eax, DWORD PTR _firework$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _obj$[ebp]
	fld	DWORD PTR [ecx+28]
	fsub	DWORD PTR [edx+28]
	fstp	DWORD PTR _dR$[ebp+8]

; 1299 : 		dRLen = VecLen(&dR);

	fld	DWORD PTR _dR$[ebp]
	fmul	DWORD PTR _dR$[ebp]
	fld	DWORD PTR _dR$[ebp+4]
	fmul	DWORD PTR _dR$[ebp+4]
	faddp	ST(1), ST(0)
	fld	DWORD PTR _dR$[ebp+8]
	fmul	DWORD PTR _dR$[ebp+8]
	faddp	ST(1), ST(0)
	push	ecx
	fstp	DWORD PTR [esp]
	call	?sqrt@@YAMM@Z				; sqrt
	add	esp, 4
	fstp	DWORD PTR _dRLen$[ebp]

; 1300 : 		if (dRLen > SMALL_REAL) {

	fld	DWORD PTR _dRLen$[ebp]
	fcomp	DWORD PTR __real@3727c5ac
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $L83548

; 1301 : 			VecDivScalar(&dR, dRLen / 2.5f);

	fld	DWORD PTR _dRLen$[ebp]
	fdiv	DWORD PTR __real@40200000
	fdivr	DWORD PTR _dR$[ebp]
	fstp	DWORD PTR _dR$[ebp]
	fld	DWORD PTR _dRLen$[ebp]
	fdiv	DWORD PTR __real@40200000
	fdivr	DWORD PTR _dR$[ebp+4]
	fstp	DWORD PTR _dR$[ebp+4]
	fld	DWORD PTR _dRLen$[ebp]
	fdiv	DWORD PTR __real@40200000
	fdivr	DWORD PTR _dR$[ebp+8]
	fstp	DWORD PTR _dR$[ebp+8]

; 1302 : 		} else {

	jmp	SHORT $L83549
$L83548:

; 1303 : 			firework->Age = MAX_FIREWORK_AGE;

	mov	eax, DWORD PTR _firework$[ebp]
	mov	DWORD PTR [eax+8], 1067030938		; 3f99999aH

; 1304 : 			return;

	jmp	$L83538
$L83549:

; 1305 : 		}
; 1306 : 	} else {

	jmp	SHORT $L83551
$L83546:

; 1307 : 		CopyVec(&DownVec, &dR);

	mov	eax, DWORD PTR ?DownVec@@3UVectorStruct@@A
	mov	DWORD PTR _dR$[ebp], eax
	mov	eax, DWORD PTR ?DownVec@@3UVectorStruct@@A+4
	mov	DWORD PTR _dR$[ebp+4], eax
	mov	eax, DWORD PTR ?DownVec@@3UVectorStruct@@A+8
	mov	DWORD PTR _dR$[ebp+8], eax

; 1308 : 		dRLen = WEAPON_RANGE_MAX;

	mov	DWORD PTR _dRLen$[ebp], 1163575296	; 455ac000H
$L83551:

; 1309 : 	}
; 1310 : 
; 1311 : 	// Accelerate firework towards target, or forwards if no target
; 1312 : 	impMod = ONE;//0.2f + dRLen / WEAPON_RANGE_MAX;

	mov	DWORD PTR _impMod$[ebp], 1065353216	; 3f800000H

; 1313 : 	VecEqScalarVec(&imp, -0.5f * impMod * FLD_Gravity * TimeStep, &obj->body.Centre.WMatrix.mv[U]);

	fld	DWORD PTR __real@bf000000
	fmul	DWORD PTR _impMod$[ebp]
	fmul	DWORD PTR ?FLD_Gravity@@3MA		; FLD_Gravity
	fmul	DWORD PTR ?TimeStep@@3MA		; TimeStep
	mov	eax, DWORD PTR _obj$[ebp]
	fmul	DWORD PTR [eax+112]
	fstp	DWORD PTR _imp$[ebp]
	fld	DWORD PTR __real@bf000000
	fmul	DWORD PTR _impMod$[ebp]
	fmul	DWORD PTR ?FLD_Gravity@@3MA		; FLD_Gravity
	fmul	DWORD PTR ?TimeStep@@3MA		; TimeStep
	mov	eax, DWORD PTR _obj$[ebp]
	fmul	DWORD PTR [eax+116]
	fstp	DWORD PTR _imp$[ebp+4]
	fld	DWORD PTR __real@bf000000
	fmul	DWORD PTR _impMod$[ebp]
	fmul	DWORD PTR ?FLD_Gravity@@3MA		; FLD_Gravity
	fmul	DWORD PTR ?TimeStep@@3MA		; TimeStep
	mov	eax, DWORD PTR _obj$[ebp]
	fmul	DWORD PTR [eax+120]
	fstp	DWORD PTR _imp$[ebp+8]

; 1314 : 	ApplyParticleImpulse(&obj->body.Centre, &imp);

	lea	eax, DWORD PTR _imp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _obj$[ebp]
	push	ecx
	call	?ApplyParticleImpulse@@YAXPAUParticleStruct@@PAUVectorStruct@@@Z ; ApplyParticleImpulse
	add	esp, 8

; 1315 : 
; 1316 : 	VecEqScalarVec(&imp, -0.005f * FLD_Gravity * TimeStep, &dR);

	fld	DWORD PTR __real@bba3d70a
	fmul	DWORD PTR ?FLD_Gravity@@3MA		; FLD_Gravity
	fmul	DWORD PTR ?TimeStep@@3MA		; TimeStep
	fmul	DWORD PTR _dR$[ebp]
	fstp	DWORD PTR _imp$[ebp]
	fld	DWORD PTR __real@bba3d70a
	fmul	DWORD PTR ?FLD_Gravity@@3MA		; FLD_Gravity
	fmul	DWORD PTR ?TimeStep@@3MA		; TimeStep
	fmul	DWORD PTR _dR$[ebp+4]
	fstp	DWORD PTR _imp$[ebp+4]
	fld	DWORD PTR __real@bba3d70a
	fmul	DWORD PTR ?FLD_Gravity@@3MA		; FLD_Gravity
	fmul	DWORD PTR ?TimeStep@@3MA		; TimeStep
	fmul	DWORD PTR _dR$[ebp+8]
	fstp	DWORD PTR _imp$[ebp+8]

; 1317 : 	VecEqScalarVec(&offset, 50, &obj->body.Centre.WMatrix.mv[U]);

	mov	eax, DWORD PTR _obj$[ebp]
	fld	DWORD PTR __real@42480000
	fmul	DWORD PTR [eax+112]
	fstp	DWORD PTR _offset$[ebp]
	mov	eax, DWORD PTR _obj$[ebp]
	fld	DWORD PTR __real@42480000
	fmul	DWORD PTR [eax+116]
	fstp	DWORD PTR _offset$[ebp+4]
	mov	eax, DWORD PTR _obj$[ebp]
	fld	DWORD PTR __real@42480000
	fmul	DWORD PTR [eax+120]
	fstp	DWORD PTR _offset$[ebp+8]

; 1318 : 	ApplyBodyImpulse(&obj->body, &imp, &offset);

	lea	eax, DWORD PTR _offset$[ebp]
	push	eax
	lea	ecx, DWORD PTR _imp$[ebp]
	push	ecx
	mov	edx, DWORD PTR _obj$[ebp]
	push	edx
	call	?ApplyBodyImpulse@@YAXPAUNewBodyStruct@@PAUVectorStruct@@1@Z ; ApplyBodyImpulse
	add	esp, 12					; 0000000cH

; 1319 : 
; 1320 : 	//VecPlusEqScalarVec(&offset, 500, &obj->body.Centre.WMatrix.mv[R]);
; 1321 : 	//VecEqScalarVec(&imp, -30 * TimeStep, &obj->body.Centre.WMatrix.mv[L]);
; 1322 : 	//ApplyBodyImpulse(&obj->body, &imp, &offset);
; 1323 : 
; 1324 : 
; 1325 : 
; 1326 : 	// Move the particle
; 1327 : 	UpdateBody(&obj->body, TimeStep);

	mov	eax, DWORD PTR ?TimeStep@@3MA
	push	eax
	mov	ecx, DWORD PTR _obj$[ebp]
	push	ecx
	call	?UpdateBody@@YAXPAUNewBodyStruct@@M@Z	; UpdateBody
	add	esp, 8

; 1328 : 
; 1329 : 	/*firework->SmokeTime += TimeStep;
; 1330 : 	if (firework->SmokeTime > 0.03) {
; 1331 : 		CreateSpark(SPARK_SMOKE1, &obj->body.Centre.Pos, &ZeroVector, ZERO, 0);
; 1332 : 		firework->SmokeTime = ZERO;
; 1333 : 	}*/
; 1334 : 	firework->SparkTime += TimeStep;

	mov	eax, DWORD PTR _firework$[ebp]
	fld	DWORD PTR ?TimeStep@@3MA		; TimeStep
	fadd	DWORD PTR [eax+16]
	mov	ecx, DWORD PTR _firework$[ebp]
	fstp	DWORD PTR [ecx+16]

; 1335 : 	if (firework->SparkTime > 0.005 && frand(ONE) < HALF) {

	mov	eax, DWORD PTR _firework$[ebp]
	fld	DWORD PTR [eax+16]
	fcomp	QWORD PTR __real@3f747ae147ae147b
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $L83554
	call	_rand
	mov	DWORD PTR tv333[ebp], eax
	fild	DWORD PTR tv333[ebp]
	fdiv	DWORD PTR __real@46fffe00
	fmul	DWORD PTR __real@3f800000
	fcomp	DWORD PTR __real@3f000000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L83554

; 1336 : 		CreateSpark(SPARK_SPARK, &obj->body.Centre.Pos, &ZeroVector, 80, 0);

	push	0
	push	0
	push	1117782016				; 42a00000H
	push	OFFSET FLAT:?ZeroVector@@3UVectorStruct@@A ; ZeroVector
	mov	eax, DWORD PTR _obj$[ebp]
	add	eax, 20					; 00000014H
	push	eax
	push	0
	call	?CreateSpark@@YA_NW4SparkTypeEnum@@PAUVectorStruct@@1M_K@Z ; CreateSpark
	add	esp, 24					; 00000018H

; 1337 : 		firework->SparkTime = ZERO;

	mov	eax, DWORD PTR _firework$[ebp]
	mov	DWORD PTR [eax+16], 0
$L83554:

; 1338 : 	}
; 1339 : 
; 1340 : 	// Update the trail
; 1341 : 	if (firework->Trail != NULL) {

	mov	eax, DWORD PTR _firework$[ebp]
	cmp	DWORD PTR [eax+20], 0
	je	SHORT $L83538

; 1342 : 		firework->TrailTime += TimeStep;

	mov	eax, DWORD PTR _firework$[ebp]
	fld	DWORD PTR ?TimeStep@@3MA		; TimeStep
	fadd	DWORD PTR [eax+24]
	mov	ecx, DWORD PTR _firework$[ebp]
	fstp	DWORD PTR [ecx+24]

; 1343 : 		if (firework->TrailTime > firework->Trail->Data->LifeTime / firework->Trail->MaxTrails) {

	mov	eax, DWORD PTR _firework$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [ecx+148]
	mov	eax, DWORD PTR _firework$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	fild	DWORD PTR [ecx+156]
	fdivr	DWORD PTR [edx+44]
	mov	edx, DWORD PTR _firework$[ebp]
	fcomp	DWORD PTR [edx+24]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L83556

; 1344 : 			UpdateTrail(firework->Trail, &obj->body.Centre.Pos);

	mov	eax, DWORD PTR _obj$[ebp]
	add	eax, 20					; 00000014H
	push	eax
	mov	ecx, DWORD PTR _firework$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	push	edx
	call	?UpdateTrail@@YAXPAUSparkTrailStruct@@PAUVectorStruct@@@Z ; UpdateTrail
	add	esp, 8

; 1345 : 			firework->TrailTime = ZERO;

	mov	eax, DWORD PTR _firework$[ebp]
	mov	DWORD PTR [eax+24], 0

; 1346 : 		} else {

	jmp	SHORT $L83538
$L83556:

; 1347 : 			ModifyFirstTrail(firework->Trail, &obj->body.Centre.Pos);

	mov	eax, DWORD PTR _obj$[ebp]
	add	eax, 20					; 00000014H
	push	eax
	mov	ecx, DWORD PTR _firework$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	push	edx
	call	?ModifyFirstTrail@@YAXPAUSparkTrailStruct@@PAUVectorStruct@@@Z ; ModifyFirstTrail
	add	esp, 8
$L83538:

; 1348 : 		}
; 1349 : 
; 1350 : 	}
; 1351 : 
; 1352 : 
; 1353 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?FireWorkMove@@YAXPAUobject_def@@@Z ENDP		; FireWorkMove
_TEXT	ENDS
PUBLIC	__real@42700000
PUBLIC	__real@43960000
EXTRN	?PlaySfx3D@@YAXJJJPAUVectorStruct@@@Z:NEAR	; PlaySfx3D
EXTRN	?FreeTrail@@YAXPAUSparkTrailStruct@@@Z:NEAR	; FreeTrail
;	COMDAT __real@42700000
CONST	SEGMENT
__real@42700000 DD 042700000r			; 60
CONST	ENDS
;	COMDAT __real@43960000
CONST	SEGMENT
__real@43960000 DD 043960000r			; 300
; Function compile flags: /Odt /ZI
CONST	ENDS
;	COMDAT ?FireworkExplode@@YAXPAUobject_def@@@Z
_TEXT	SEGMENT
_firework$ = -20					; size = 4
_vel$ = -16						; size = 12
_iFlash$ = -4						; size = 4
_obj$ = 8						; size = 4
?FireworkExplode@@YAXPAUobject_def@@@Z PROC NEAR	; FireworkExplode, COMDAT

; 1356 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi

; 1357 : 	int iFlash;
; 1358 : 	VEC vel;
; 1359 : 	FIREWORK_OBJ *firework = (FIREWORK_OBJ *)obj->Data;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+684]
	mov	DWORD PTR _firework$[ebp], ecx

; 1360 : 
; 1361 : 	// Free up the models and sound effects
; 1362 : #ifdef _PC
; 1363 : 	if (obj->Sfx3D)

	mov	eax, DWORD PTR _obj$[ebp]
	cmp	DWORD PTR [eax+680], 0
	je	SHORT $L83565

; 1364 : 	{
; 1365 : 		FreeSfx3D(obj->Sfx3D);

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+680]
	push	ecx
	call	?FreeSfx3D@@YAXPAUSAMPLE_3D@@@Z		; FreeSfx3D
	add	esp, 4
$L83565:

; 1366 : 	}
; 1367 : #endif
; 1368 : 	obj->DefaultModel = -1;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	DWORD PTR [eax+656], -1

; 1369 : 	obj->renderhandler = NULL;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	DWORD PTR [eax+700], 0

; 1370 : 
; 1371 : 	// Get rid of the trail
; 1372 : 	if (firework->Trail != NULL) {

	mov	eax, DWORD PTR _firework$[ebp]
	cmp	DWORD PTR [eax+20], 0
	je	SHORT $L83566

; 1373 : 		FreeTrail(firework->Trail);

	mov	eax, DWORD PTR _firework$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	call	?FreeTrail@@YAXPAUSparkTrailStruct@@@Z	; FreeTrail
	add	esp, 4
$L83566:

; 1374 : 	}
; 1375 : 
; 1376 : 	// Oooaaahhhhh
; 1377 : 	PlaySfx3D(SFX_FIREWORK_BANG, SFX_MAX_VOL, 22050, &obj->body.Centre.Pos);

	mov	eax, DWORD PTR _obj$[ebp]
	add	eax, 20					; 00000014H
	push	eax
	push	22050					; 00005622H
	push	127					; 0000007fH
	push	10					; 0000000aH
	call	?PlaySfx3D@@YAXJJJPAUVectorStruct@@@Z	; PlaySfx3D
	add	esp, 16					; 00000010H

; 1378 : 
; 1379 : 	// Create Explosion
; 1380 : 	CreateSpark(SPARK_EXPLOSION1, &obj->body.Centre.Pos, &ZeroVector, 0, 0);

	push	0
	push	0
	push	0
	push	OFFSET FLAT:?ZeroVector@@3UVectorStruct@@A ; ZeroVector
	mov	eax, DWORD PTR _obj$[ebp]
	add	eax, 20					; 00000014H
	push	eax
	push	17					; 00000011H
	call	?CreateSpark@@YA_NW4SparkTypeEnum@@PAUVectorStruct@@1M_K@Z ; CreateSpark
	add	esp, 24					; 00000018H

; 1381 : 
; 1382 : 	// Create smoke
; 1383 : 	VecEqScalarVec(&vel, 60, &UpVec);

	fld	DWORD PTR __real@42700000
	fmul	DWORD PTR ?UpVec@@3UVectorStruct@@A
	fstp	DWORD PTR _vel$[ebp]
	fld	DWORD PTR __real@42700000
	fmul	DWORD PTR ?UpVec@@3UVectorStruct@@A+4
	fstp	DWORD PTR _vel$[ebp+4]
	fld	DWORD PTR __real@42700000
	fmul	DWORD PTR ?UpVec@@3UVectorStruct@@A+8
	fstp	DWORD PTR _vel$[ebp+8]

; 1384 : 	for (iFlash = 0; iFlash < 3; iFlash++) {

	mov	DWORD PTR _iFlash$[ebp], 0
	jmp	SHORT $L83567
$L83568:
	mov	eax, DWORD PTR _iFlash$[ebp]
	add	eax, 1
	mov	DWORD PTR _iFlash$[ebp], eax
$L83567:
	cmp	DWORD PTR _iFlash$[ebp], 3
	jge	SHORT $L83569

; 1385 : 		CreateSpark(SPARK_SMOKE2, &obj->body.Centre.Pos, &vel, 60, 0);

	push	0
	push	0
	push	1114636288				; 42700000H
	lea	eax, DWORD PTR _vel$[ebp]
	push	eax
	mov	ecx, DWORD PTR _obj$[ebp]
	add	ecx, 20					; 00000014H
	push	ecx
	push	11					; 0000000bH
	call	?CreateSpark@@YA_NW4SparkTypeEnum@@PAUVectorStruct@@1M_K@Z ; CreateSpark
	add	esp, 24					; 00000018H

; 1386 : 	}

	jmp	SHORT $L83568
$L83569:

; 1387 : 
; 1388 : 	//Create flashy bits
; 1389 : 	//VecPlusScalarVec(&obj->body.Centre.Vel, 300, &UpVec, &vel);
; 1390 : 	VecEqScalarVec(&vel, 300, &UpVec);

	fld	DWORD PTR __real@43960000
	fmul	DWORD PTR ?UpVec@@3UVectorStruct@@A
	fstp	DWORD PTR _vel$[ebp]
	fld	DWORD PTR __real@43960000
	fmul	DWORD PTR ?UpVec@@3UVectorStruct@@A+4
	fstp	DWORD PTR _vel$[ebp+4]
	fld	DWORD PTR __real@43960000
	fmul	DWORD PTR ?UpVec@@3UVectorStruct@@A+8
	fstp	DWORD PTR _vel$[ebp+8]

; 1391 : 	for (iFlash = 0; iFlash < 30; iFlash++) {

	mov	DWORD PTR _iFlash$[ebp], 0
	jmp	SHORT $L83570
$L83571:
	mov	eax, DWORD PTR _iFlash$[ebp]
	add	eax, 1
	mov	DWORD PTR _iFlash$[ebp], eax
$L83570:
	cmp	DWORD PTR _iFlash$[ebp], 30		; 0000001eH
	jge	SHORT $L83572

; 1392 : 		CreateSpark(SPARK_SMALLORANGE, &obj->body.Centre.Pos, &vel, 600, 0);

	push	0
	push	0
	push	1142292480				; 44160000H
	lea	eax, DWORD PTR _vel$[ebp]
	push	eax
	mov	ecx, DWORD PTR _obj$[ebp]
	add	ecx, 20					; 00000014H
	push	ecx
	push	15					; 0000000fH
	call	?CreateSpark@@YA_NW4SparkTypeEnum@@PAUVectorStruct@@1M_K@Z ; CreateSpark
	add	esp, 24					; 00000018H

; 1393 : 		CreateSpark(SPARK_SMALLRED, &obj->body.Centre.Pos, &vel, 800, 0);

	push	0
	push	0
	push	1145569280				; 44480000H
	lea	eax, DWORD PTR _vel$[ebp]
	push	eax
	mov	ecx, DWORD PTR _obj$[ebp]
	add	ecx, 20					; 00000014H
	push	ecx
	push	16					; 00000010H
	call	?CreateSpark@@YA_NW4SparkTypeEnum@@PAUVectorStruct@@1M_K@Z ; CreateSpark
	add	esp, 24					; 00000018H

; 1394 : 	}

	jmp	SHORT $L83571
$L83572:

; 1395 : 
; 1396 : 	// setup light
; 1397 : 	obj->Light = AllocLight();

	call	?AllocLight@@YAPAULIGHT@@XZ		; AllocLight
	mov	ecx, DWORD PTR _obj$[ebp]
	mov	DWORD PTR [ecx+672], eax

; 1398 : 	if (obj->Light)

	mov	eax, DWORD PTR _obj$[ebp]
	cmp	DWORD PTR [eax+672], 0
	je	$L83573

; 1399 : 	{
; 1400 : 		obj->Light->Reach = 1024;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+672]
	mov	DWORD PTR [ecx+12], 1149239296		; 44800000H

; 1401 : 		obj->Light->Flag = LIGHT_FIXED;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+672]
	mov	BYTE PTR [ecx+100], 1

; 1402 : 		obj->Light->Type = LIGHT_OMNI;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+672]
	mov	BYTE PTR [ecx+101], 0

; 1403 : 		obj->Light->r = 128;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+672]
	mov	DWORD PTR [ecx+88], 128			; 00000080H

; 1404 : 		obj->Light->g = 32;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+672]
	mov	DWORD PTR [ecx+92], 32			; 00000020H

; 1405 : 		obj->Light->b = 64;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+672]
	mov	DWORD PTR [ecx+96], 64			; 00000040H

; 1406 : 		obj->Light->x = obj->body.Centre.Pos.v[X];

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+672]
	mov	edx, DWORD PTR _obj$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	DWORD PTR [ecx], eax

; 1407 : 		obj->Light->y = obj->body.Centre.Pos.v[Y];

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+672]
	mov	edx, DWORD PTR _obj$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	DWORD PTR [ecx+4], eax

; 1408 : 		obj->Light->z = obj->body.Centre.Pos.v[Z];

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+672]
	mov	edx, DWORD PTR _obj$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	DWORD PTR [ecx+8], eax
$L83573:

; 1409 : 	}
; 1410 : 
; 1411 : 	firework->Exploded = TRUE;

	mov	eax, DWORD PTR _firework$[ebp]
	mov	BYTE PTR [eax+4], 1

; 1412 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?FireworkExplode@@YAXPAUobject_def@@@Z ENDP		; FireworkExplode
_TEXT	ENDS
PUBLIC	?cos@@YAMM@Z					; cos
PUBLIC	?sin@@YAMM@Z					; sin
PUBLIC	__real@41200000
PUBLIC	__real@45000000
PUBLIC	__real@3fc00000
PUBLIC	__real@43800000
PUBLIC	__real@3e4ccccd
PUBLIC	__real@3ecccccd
PUBLIC	__real@41a00000
PUBLIC	?PuttyBombBang@@YAXPAUobject_def@@@Z		; PuttyBombBang
PUBLIC	?RenderPuttyBombBang@@YAXPAUobject_def@@@Z	; RenderPuttyBombBang
EXTRN	?CAM_MainCamera@@3PAUCameraStruct@@A:DWORD	; CAM_MainCamera
EXTRN	?World@@3UWORLD@@A:BYTE				; World
EXTRN	?RotMatrixZYX@@YAXPATMatrixUnion@@MMM@Z:NEAR	; RotMatrixZYX
EXTRN	?PosToCollGrid@@YAPAUCOLLGRID@@PAUVectorStruct@@@Z:NEAR ; PosToCollGrid
EXTRN	?CreateObject@@YAPAUobject_def@@PAUVectorStruct@@PATMatrixUnion@@JPAJ@Z:NEAR ; CreateObject
;	COMDAT __real@41200000
CONST	SEGMENT
__real@41200000 DD 041200000r			; 10
CONST	ENDS
;	COMDAT __real@45000000
CONST	SEGMENT
__real@45000000 DD 045000000r			; 2048
CONST	ENDS
;	COMDAT __real@3fc00000
CONST	SEGMENT
__real@3fc00000 DD 03fc00000r			; 1.5
CONST	ENDS
;	COMDAT __real@43800000
CONST	SEGMENT
__real@43800000 DD 043800000r			; 256
CONST	ENDS
;	COMDAT __real@3e4ccccd
CONST	SEGMENT
__real@3e4ccccd DD 03e4ccccdr			; 0.2
CONST	ENDS
;	COMDAT __real@3ecccccd
CONST	SEGMENT
__real@3ecccccd DD 03ecccccdr			; 0.4
CONST	ENDS
;	COMDAT __real@41a00000
CONST	SEGMENT
__real@41a00000 DD 041a00000r			; 20
; Function compile flags: /Odt /ZI
CONST	ENDS
;	COMDAT ?PuttyBombHandler@@YAXPAUobject_def@@@Z
_TEXT	SEGMENT
tv940 = -268						; size = 4
tv1137 = -264						; size = 4
tv1135 = -264						; size = 4
tv938 = -264						; size = 4
tv928 = -264						; size = 4
tv912 = -264						; size = 4
__temp$83653 = -196					; size = 4
_header$ = -192						; size = 4
_p$ = -188						; size = 4
_mrgb$ = -184						; size = 4
_wrgb$ = -180						; size = 4
_wv$ = -176						; size = 4
_wp$ = -172						; size = 4
_cube$ = -168						; size = 4
_box$ = -164						; size = 24
_mass$ = -140						; size = 4
_mul$ = -136						; size = 4
_rot$ = -132						; size = 4
_len$ = -128						; size = 4
_dist$ = -124						; size = 4
_dz$ = -120						; size = 4
_dy$ = -116						; size = 4
_dx$ = -112						; size = 4
_mat$ = -108						; size = 36
_pos$ = -72						; size = 4
_imp$ = -68						; size = 12
_off$ = -56						; size = 12
_vec$ = -44						; size = 12
_flag$ = -32						; size = 4
_sides$ = -28						; size = 4
_per$ = -24						; size = 4
_vcount$ = -20						; size = 4
_k$ = -16						; size = 4
_j$ = -12						; size = 4
_i$ = -8						; size = 4
_bomb$ = -4						; size = 4
_obj$ = 8						; size = 4
?PuttyBombHandler@@YAXPAUobject_def@@@Z PROC NEAR	; PuttyBombHandler, COMDAT

; 1419 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 268				; 0000010cH
	push	ebx
	push	esi
	push	edi

; 1420 : 	PUTTYBOMB_OBJ *bomb = (PUTTYBOMB_OBJ*)obj->Data;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+684]
	mov	DWORD PTR _bomb$[ebp], ecx

; 1421 : 	long i, j, k, vcount, per, sides, flag;
; 1422 : 	VEC vec, off, imp, *pos;
; 1423 : 	MAT mat;
; 1424 : 	REAL dx, dy, dz, dist, len, rot, mul, mass;
; 1425 : 	BBOX box;
; 1426 : 	CUBE_HEADER *cube;
; 1427 : 	WORLD_POLY *wp;
; 1428 : 	WORLD_VERTEX **wv;
; 1429 : 	long *wrgb;
; 1430 : 	MODEL_RGB *mrgb;
; 1431 : 	NEWCOLLPOLY *p;
; 1432 : 	COLLGRID *header;
; 1433 : 
; 1434 : // darken car
; 1435 : 
; 1436 : 	obj->player->car.AddLit -= (long)(TimeStep * 2000);

	mov	eax, DWORD PTR _obj$[ebp]
	mov	esi, DWORD PTR [eax+588]
	fld	DWORD PTR ?TimeStep@@3MA		; TimeStep
	fmul	DWORD PTR __real@44fa0000
	call	__ftol2
	mov	ecx, DWORD PTR [esi+3560]
	sub	ecx, eax
	mov	edx, DWORD PTR _obj$[ebp]
	mov	eax, DWORD PTR [edx+588]
	mov	DWORD PTR [eax+3560], ecx

; 1437 : 	if (obj->player->car.AddLit < -1000) obj->player->car.AddLit = -1000;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+588]
	cmp	DWORD PTR [ecx+3560], -1000		; fffffc18H
	jge	SHORT $L83608
	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+588]
	mov	DWORD PTR [ecx+3560], -1000		; fffffc18H
$L83608:

; 1438 : 
; 1439 : // maintain sfx
; 1440 : 
; 1441 : 	if (obj->Sfx3D)

	mov	eax, DWORD PTR _obj$[ebp]
	cmp	DWORD PTR [eax+680], 0
	je	SHORT $L83609

; 1442 : 	{
; 1443 : 		CopyVec(&obj->player->car.Body->Centre.Pos, &obj->Sfx3D->Pos);

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+588]
	mov	edx, DWORD PTR [ecx+900]
	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+680]
	mov	edx, DWORD PTR [edx+20]
	mov	DWORD PTR [ecx+28], edx
	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+588]
	mov	edx, DWORD PTR [ecx+900]
	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+680]
	mov	edx, DWORD PTR [edx+24]
	mov	DWORD PTR [ecx+32], edx
	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+588]
	mov	edx, DWORD PTR [ecx+900]
	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+680]
	mov	edx, DWORD PTR [edx+28]
	mov	DWORD PTR [ecx+36], edx
$L83609:

; 1444 : 	}
; 1445 : 
; 1446 : // dec countdown, bang?
; 1447 : 
; 1448 : 	bomb->Timer -= TimeStep;

	mov	eax, DWORD PTR _bomb$[ebp]
	fld	DWORD PTR [eax]
	fsub	DWORD PTR ?TimeStep@@3MA		; TimeStep
	mov	ecx, DWORD PTR _bomb$[ebp]
	fstp	DWORD PTR [ecx]

; 1449 : 	if (obj->player->car.WillDetonate == FALSE){

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+588]
	cmp	DWORD PTR [ecx+3572], 0
	jne	$L83610

; 1450 : 
; 1451 : 		if (bomb->Timer < ZERO) 

	mov	eax, DWORD PTR _bomb$[ebp]
	fld	DWORD PTR [eax]
	fcomp	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 5
	jp	$L83611

; 1452 : 		{
; 1453 : 			// Set bomb to explode
; 1454 : 			obj->player->car.WillDetonate = TRUE;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+588]
	mov	DWORD PTR [ecx+3572], 1

; 1455 : 			bomb->Timer = PUTTYBOMB_COUNTDOWN2;

	mov	eax, DWORD PTR _bomb$[ebp]
	mov	DWORD PTR [eax], 1065353216		; 3f800000H

; 1456 : 			if (obj->Sfx3D)

	mov	eax, DWORD PTR _obj$[ebp]
	cmp	DWORD PTR [eax+680], 0
	je	SHORT $L83612

; 1457 : 			{
; 1458 : 				FreeSfx3D(obj->Sfx3D);

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+680]
	push	ecx
	call	?FreeSfx3D@@YAXPAUSAMPLE_3D@@@Z		; FreeSfx3D
	add	esp, 4

; 1459 : 				obj->Sfx3D = NULL;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	DWORD PTR [eax+680], 0
$L83612:

; 1460 : 			}
; 1461 : 			flag = (long)obj->player;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+588]
	mov	DWORD PTR _flag$[ebp], ecx

; 1462 : 	 		CreateObject(&obj->player->car.Body->Centre.Pos, &obj->player->car.Body->Centre.WMatrix, OBJECT_TYPE_BOMBGLOW, &flag);

	lea	eax, DWORD PTR _flag$[ebp]
	push	eax
	push	35					; 00000023H
	mov	ecx, DWORD PTR _obj$[ebp]
	mov	edx, DWORD PTR [ecx+588]
	mov	eax, DWORD PTR [edx+900]
	add	eax, 100				; 00000064H
	push	eax
	mov	ecx, DWORD PTR _obj$[ebp]
	mov	edx, DWORD PTR [ecx+588]
	mov	eax, DWORD PTR [edx+900]
	add	eax, 20					; 00000014H
	push	eax
	call	?CreateObject@@YAPAUobject_def@@PAUVectorStruct@@PATMatrixUnion@@JPAJ@Z ; CreateObject
	add	esp, 16					; 00000010H

; 1463 : 		} 
; 1464 : 		else 

	jmp	$L83614
$L83611:

; 1465 : 		{
; 1466 : 			// shrink the fuse
; 1467 : 			obj->player->car.Aerial.Length = bomb->OrigAerialLen * bomb->Timer / PUTTYBOMB_COUNTDOWN;

	mov	eax, DWORD PTR _bomb$[ebp]
	mov	ecx, DWORD PTR _bomb$[ebp]
	fld	DWORD PTR [eax+8]
	fmul	DWORD PTR [ecx]
	fdiv	DWORD PTR __real@41200000
	mov	edx, DWORD PTR _obj$[ebp]
	mov	eax, DWORD PTR [edx+588]
	fstp	DWORD PTR [eax+916]

; 1468 : 
; 1469 : 			// create sparks at the end of fuse
; 1470 : 			CreateSpark(SPARK_SPARK2, &obj->player->car.Aerial.Section[AERIAL_LASTSECTION].Pos, &obj->player->car.Body->Centre.Vel, 50, 0);

	push	0
	push	0
	push	1112014848				; 42480000H
	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+588]
	mov	edx, DWORD PTR [ecx+900]
	add	edx, 32					; 00000020H
	push	edx
	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+588]
	add	ecx, 1400				; 00000578H
	push	ecx
	push	1
	call	?CreateSpark@@YA_NW4SparkTypeEnum@@PAUVectorStruct@@1M_K@Z ; CreateSpark
	add	esp, 24					; 00000018H

; 1471 : 			CreateSpark(SPARK_SPARK2, &obj->player->car.Aerial.Section[AERIAL_LASTSECTION].Pos, &obj->player->car.Body->Centre.Vel, 50, 0);

	push	0
	push	0
	push	1112014848				; 42480000H
	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+588]
	mov	edx, DWORD PTR [ecx+900]
	add	edx, 32					; 00000020H
	push	edx
	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+588]
	add	ecx, 1400				; 00000578H
	push	ecx
	push	1
	call	?CreateSpark@@YA_NW4SparkTypeEnum@@PAUVectorStruct@@1M_K@Z ; CreateSpark
	add	esp, 24					; 00000018H
$L83614:

; 1472 : 		}
; 1473 : 	} 
; 1474 : 	else if (bomb->Timer <= 0.0f)

	jmp	$L83576
$L83610:
	mov	eax, DWORD PTR _bomb$[ebp]
	fld	DWORD PTR [eax]
	fcomp	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jp	$L83576

; 1475 : 	{
; 1476 : 
; 1477 : // yep!
; 1478 : 
; 1479 : 		CopyVec(&obj->player->car.Body->Centre.Pos, &bomb->Pos);

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+588]
	mov	edx, DWORD PTR [ecx+900]
	mov	eax, DWORD PTR _bomb$[ebp]
	mov	ecx, DWORD PTR [edx+20]
	mov	DWORD PTR [eax+12], ecx
	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+588]
	mov	edx, DWORD PTR [ecx+900]
	mov	eax, DWORD PTR _bomb$[ebp]
	mov	ecx, DWORD PTR [edx+24]
	mov	DWORD PTR [eax+16], ecx
	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+588]
	mov	edx, DWORD PTR [ecx+900]
	mov	eax, DWORD PTR _bomb$[ebp]
	mov	ecx, DWORD PTR [edx+28]
	mov	DWORD PTR [eax+20], ecx

; 1480 : 
; 1481 : 		bomb->Timer = 0.0f;

	mov	eax, DWORD PTR _bomb$[ebp]
	mov	DWORD PTR [eax], 0

; 1482 : 		bomb->SphereRadius = 80.0f;

	mov	eax, DWORD PTR _bomb$[ebp]
	mov	DWORD PTR [eax+4], 1117782016		; 42a00000H

; 1483 : 
; 1484 : 		SubVector(&bomb->Pos, &CAM_MainCamera->WPos, &vec);

	mov	eax, DWORD PTR _bomb$[ebp]
	mov	ecx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fld	DWORD PTR [eax+12]
	fsub	DWORD PTR [ecx+68]
	fstp	DWORD PTR _vec$[ebp]
	mov	eax, DWORD PTR _bomb$[ebp]
	mov	ecx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fld	DWORD PTR [eax+16]
	fsub	DWORD PTR [ecx+72]
	fstp	DWORD PTR _vec$[ebp+4]
	mov	eax, DWORD PTR _bomb$[ebp]
	mov	ecx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fld	DWORD PTR [eax+20]
	fsub	DWORD PTR [ecx+76]
	fstp	DWORD PTR _vec$[ebp+8]

; 1485 : 		CAM_MainCamera->Shake = 1.0f - (Length(&vec) / 2048.0f);

	fld	DWORD PTR _vec$[ebp]
	fmul	DWORD PTR _vec$[ebp]
	fld	DWORD PTR _vec$[ebp+4]
	fmul	DWORD PTR _vec$[ebp+4]
	faddp	ST(1), ST(0)
	fld	DWORD PTR _vec$[ebp+8]
	fmul	DWORD PTR _vec$[ebp+8]
	faddp	ST(1), ST(0)
	push	ecx
	fstp	DWORD PTR [esp]
	call	?sqrt@@YAMM@Z				; sqrt
	add	esp, 4
	fdiv	DWORD PTR __real@45000000
	fsubr	DWORD PTR __real@3f800000
	mov	eax, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fstp	DWORD PTR [eax+188]

; 1486 : 		if (CAM_MainCamera->Shake < 0.0f) CAM_MainCamera->Shake = 0.0f;

	mov	eax, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fld	DWORD PTR [eax+188]
	fcomp	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L83618
	mov	eax, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	mov	DWORD PTR [eax+188], 0
$L83618:

; 1487 : 
; 1488 : 		obj->aihandler = (AI_HANDLER)PuttyBombBang;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	DWORD PTR [eax+696], OFFSET FLAT:?PuttyBombBang@@YAXPAUobject_def@@@Z ; PuttyBombBang

; 1489 : 		obj->renderhandler = (RENDER_HANDLER)RenderPuttyBombBang;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	DWORD PTR [eax+700], OFFSET FLAT:?RenderPuttyBombBang@@YAXPAUobject_def@@@Z ; RenderPuttyBombBang

; 1490 : 
; 1491 : // play bang sfx
; 1492 : 
; 1493 : 		PlaySfx3D(SFX_PUTTYBOMB_BANG, SFX_MAX_VOL, 22050, &bomb->Pos);

	mov	eax, DWORD PTR _bomb$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	push	22050					; 00005622H
	push	127					; 0000007fH
	push	15					; 0000000fH
	call	?PlaySfx3D@@YAXJJJPAUVectorStruct@@@Z	; PlaySfx3D
	add	esp, 16					; 00000010H

; 1494 : 
; 1495 : // light
; 1496 : 
; 1497 : 		obj->Light = AllocLight();

	call	?AllocLight@@YAPAULIGHT@@XZ		; AllocLight
	mov	ecx, DWORD PTR _obj$[ebp]
	mov	DWORD PTR [ecx+672], eax

; 1498 : 		if (obj->Light)

	mov	eax, DWORD PTR _obj$[ebp]
	cmp	DWORD PTR [eax+672], 0
	je	$L83621

; 1499 : 		{
; 1500 : 			CopyVec(&bomb->Pos, (VEC*)&obj->Light->x);

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+672]
	mov	edx, DWORD PTR _bomb$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+672]
	mov	edx, DWORD PTR _bomb$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+672]
	mov	edx, DWORD PTR _bomb$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	DWORD PTR [ecx+8], eax

; 1501 : 			obj->Light->Reach = 1024;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+672]
	mov	DWORD PTR [ecx+12], 1149239296		; 44800000H

; 1502 : 			obj->Light->Flag = LIGHT_FIXED | LIGHT_MOVING;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+672]
	mov	BYTE PTR [ecx+100], 3

; 1503 : 			obj->Light->Type = LIGHT_OMNI;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+672]
	mov	BYTE PTR [ecx+101], 0

; 1504 : 			obj->Light->r = 0;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+672]
	mov	DWORD PTR [ecx+88], 0

; 1505 : 			obj->Light->g = 0;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+672]
	mov	DWORD PTR [ecx+92], 0

; 1506 : 			obj->Light->b = 0;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+672]
	mov	DWORD PTR [ecx+96], 0
$L83621:

; 1507 : 		}
; 1508 : 
; 1509 : // setup bang pieces
; 1510 : 
; 1511 : 		for (i = 0 ; i < PUTTYBOMB_BANG_NUM ; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $L83625
$L83626:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$L83625:
	cmp	DWORD PTR _i$[ebp], 64			; 00000040H
	jge	$L83627

; 1512 : 		{
; 1513 : 			bomb->Bang[i].Age = -frand(PUTTYBOMB_BANG_STAGGER);

	call	_rand
	mov	DWORD PTR tv912[ebp], eax
	fild	DWORD PTR tv912[ebp]
	fdiv	DWORD PTR __real@46fffe00
	fmul	DWORD PTR __real@3f000000
	fchs
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 36					; 00000024H
	mov	ecx, DWORD PTR _bomb$[ebp]
	fstp	DWORD PTR [ecx+eax+72]

; 1514 : 			bomb->Bang[i].Size = 64.0f - bomb->Bang[i].Age * 64.0f;

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 36					; 00000024H
	mov	ecx, DWORD PTR _bomb$[ebp]
	fld	DWORD PTR [ecx+eax+72]
	fmul	DWORD PTR __real@42800000
	fsubr	DWORD PTR __real@42800000
	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 36					; 00000024H
	mov	eax, DWORD PTR _bomb$[ebp]
	fstp	DWORD PTR [eax+edx+76]

; 1515 : 			bomb->Bang[i].Life = PUTTYBOMB_ONE_BANG_TIME - PUTTYBOMB_BANG_STAGGER - bomb->Bang[i].Age;

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 36					; 00000024H
	mov	ecx, DWORD PTR _bomb$[ebp]
	fld	DWORD PTR __real@3fc00000
	fsub	DWORD PTR [ecx+eax+72]
	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 36					; 00000024H
	mov	eax, DWORD PTR _bomb$[ebp]
	fstp	DWORD PTR [eax+edx+80]

; 1516 : 			SetVector(&bomb->Bang[i].Vel, 0.0f, -frand(64.0f) - 64.0f, 0.0f);

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 36					; 00000024H
	mov	ecx, DWORD PTR _bomb$[ebp]
	mov	DWORD PTR [ecx+eax+60], 0
	call	_rand
	mov	DWORD PTR tv928[ebp], eax
	fild	DWORD PTR tv928[ebp]
	fdiv	DWORD PTR __real@46fffe00
	fmul	DWORD PTR __real@42800000
	fchs
	fsub	DWORD PTR __real@42800000
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 36					; 00000024H
	mov	ecx, DWORD PTR _bomb$[ebp]
	fstp	DWORD PTR [ecx+eax+64]
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 36					; 00000024H
	mov	ecx, DWORD PTR _bomb$[ebp]
	mov	DWORD PTR [ecx+eax+68], 0

; 1517 : 
; 1518 : 			SetVector(&vec, 0, 0, PUTTYBOMB_BANG_RADIUS * (-bomb->Bang[i].Age / PUTTYBOMB_BANG_STAGGER));

	mov	DWORD PTR _vec$[ebp], 0
	mov	DWORD PTR _vec$[ebp+4], 0
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 36					; 00000024H
	mov	ecx, DWORD PTR _bomb$[ebp]
	fld	DWORD PTR [ecx+eax+72]
	fchs
	fdiv	DWORD PTR __real@3f000000
	fmul	DWORD PTR __real@43000000
	fstp	DWORD PTR _vec$[ebp+8]

; 1519 : 			RotMatrixZYX(&mat, frand(0.25f) - 0.25f, frand(1.0f), 0.0f);

	push	0
	call	_rand
	mov	DWORD PTR tv938[ebp], eax
	fild	DWORD PTR tv938[ebp]
	fdiv	DWORD PTR __real@46fffe00
	fmul	DWORD PTR __real@3f800000
	push	ecx
	fstp	DWORD PTR [esp]
	call	_rand
	mov	DWORD PTR tv940[ebp], eax
	fild	DWORD PTR tv940[ebp]
	fdiv	DWORD PTR __real@46fffe00
	fmul	DWORD PTR __real@3e800000
	fsub	DWORD PTR __real@3e800000
	push	ecx
	fstp	DWORD PTR [esp]
	lea	eax, DWORD PTR _mat$[ebp]
	push	eax
	call	?RotMatrixZYX@@YAXPATMatrixUnion@@MMM@Z	; RotMatrixZYX
	add	esp, 16					; 00000010H

; 1520 : 			RotTransVector(&mat, &bomb->Pos, &vec, &bomb->Bang[i].Pos);

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 36					; 00000024H
	mov	ecx, DWORD PTR _bomb$[ebp]
	lea	edx, DWORD PTR [ecx+eax+48]
	push	edx
	lea	eax, DWORD PTR _vec$[ebp]
	push	eax
	mov	ecx, DWORD PTR _bomb$[ebp]
	add	ecx, 12					; 0000000cH
	push	ecx
	lea	edx, DWORD PTR _mat$[ebp]
	push	edx
	call	?RotTransVector@@YAXPATMatrixUnion@@PAUVectorStruct@@11@Z ; RotTransVector
	add	esp, 16					; 00000010H

; 1521 : 		}

	jmp	$L83626
$L83627:

; 1522 : 
; 1523 : // setup smoke verts
; 1524 : 
; 1525 : 		bomb->SmokeTime = 0.0f;

	mov	eax, DWORD PTR _bomb$[ebp]
	mov	DWORD PTR [eax+2384], 0

; 1526 : 
; 1527 : 		for (i = 0 ; i < PUTTYBOMB_SMOKE_NUM ; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $L83632
$L83633:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$L83632:
	cmp	DWORD PTR _i$[ebp], 8
	jge	SHORT $L83634

; 1528 : 		{
; 1529 : 			bomb->SmokeVert[i] = rand() % obj->player->car.Models->Body->VertNum;

	call	_rand
	mov	ecx, DWORD PTR _obj$[ebp]
	mov	edx, DWORD PTR [ecx+588]
	mov	ecx, DWORD PTR [edx+864]
	mov	edx, DWORD PTR [ecx+6064]
	movsx	ecx, WORD PTR [edx+34]
	cdq
	idiv	ecx
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _bomb$[ebp]
	mov	DWORD PTR [ecx+eax*4+2352], edx

; 1530 : 		}

	jmp	SHORT $L83633
$L83634:

; 1531 : 
; 1532 : // scorch
; 1533 : 
; 1534 : 		SetBBox(&box,
; 1535 : 			bomb->Pos.v[X] - PUTTYBOMB_SCORCH_RADIUS,
; 1536 : 			bomb->Pos.v[X] + PUTTYBOMB_SCORCH_RADIUS,
; 1537 : 			bomb->Pos.v[Y] - PUTTYBOMB_SCORCH_RADIUS,
; 1538 : 			bomb->Pos.v[Y] + PUTTYBOMB_SCORCH_RADIUS,
; 1539 : 			bomb->Pos.v[Z] - PUTTYBOMB_SCORCH_RADIUS,
; 1540 : 			bomb->Pos.v[Z] + PUTTYBOMB_SCORCH_RADIUS);

	mov	eax, DWORD PTR _bomb$[ebp]
	fld	DWORD PTR [eax+12]
	fsub	DWORD PTR __real@43800000
	fstp	DWORD PTR _box$[ebp]
	mov	eax, DWORD PTR _bomb$[ebp]
	fld	DWORD PTR [eax+12]
	fadd	DWORD PTR __real@43800000
	fstp	DWORD PTR _box$[ebp+4]
	mov	eax, DWORD PTR _bomb$[ebp]
	fld	DWORD PTR [eax+16]
	fsub	DWORD PTR __real@43800000
	fstp	DWORD PTR _box$[ebp+8]
	mov	eax, DWORD PTR _bomb$[ebp]
	fld	DWORD PTR [eax+16]
	fadd	DWORD PTR __real@43800000
	fstp	DWORD PTR _box$[ebp+12]
	mov	eax, DWORD PTR _bomb$[ebp]
	fld	DWORD PTR [eax+20]
	fsub	DWORD PTR __real@43800000
	fstp	DWORD PTR _box$[ebp+16]
	mov	eax, DWORD PTR _bomb$[ebp]
	fld	DWORD PTR [eax+20]
	fadd	DWORD PTR __real@43800000
	fstp	DWORD PTR _box$[ebp+20]

; 1541 : 
; 1542 : 		cube = World.Cube;

	mov	eax, DWORD PTR ?World@@3UWORLD@@A+8
	mov	DWORD PTR _cube$[ebp], eax

; 1543 : 		for (i = 0 ; i < World.CubeNum ; i++, cube++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $L83635
$L83636:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	mov	ecx, DWORD PTR _cube$[ebp]
	add	ecx, 128				; 00000080H
	mov	DWORD PTR _cube$[ebp], ecx
$L83635:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR ?World@@3UWORLD@@A
	jge	$L83637

; 1544 : 		{
; 1545 : 			if (cube->Xmin > box.XMax || cube->Xmax < box.XMin || cube->Ymin > box.YMax || cube->Ymax < box.YMin || cube->Zmin > box.ZMax || cube->Zmax < box.ZMin) continue;

	mov	eax, DWORD PTR _cube$[ebp]
	fld	DWORD PTR [eax+16]
	fcomp	DWORD PTR _box$[ebp+4]
	fnstsw	ax
	test	ah, 65					; 00000041H
	je	SHORT $L83639
	mov	eax, DWORD PTR _cube$[ebp]
	fld	DWORD PTR [eax+20]
	fcomp	DWORD PTR _box$[ebp]
	fnstsw	ax
	test	ah, 5
	jnp	SHORT $L83639
	mov	eax, DWORD PTR _cube$[ebp]
	fld	DWORD PTR [eax+24]
	fcomp	DWORD PTR _box$[ebp+12]
	fnstsw	ax
	test	ah, 65					; 00000041H
	je	SHORT $L83639
	mov	eax, DWORD PTR _cube$[ebp]
	fld	DWORD PTR [eax+28]
	fcomp	DWORD PTR _box$[ebp+8]
	fnstsw	ax
	test	ah, 5
	jnp	SHORT $L83639
	mov	eax, DWORD PTR _cube$[ebp]
	fld	DWORD PTR [eax+32]
	fcomp	DWORD PTR _box$[ebp+20]
	fnstsw	ax
	test	ah, 65					; 00000041H
	je	SHORT $L83639
	mov	eax, DWORD PTR _cube$[ebp]
	fld	DWORD PTR [eax+36]
	fcomp	DWORD PTR _box$[ebp+16]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L83638
$L83639:
	jmp	$L83636
$L83638:

; 1546 : 
; 1547 : 			dx = cube->CentreX - bomb->Pos.v[X];

	mov	eax, DWORD PTR _cube$[ebp]
	mov	ecx, DWORD PTR _bomb$[ebp]
	fld	DWORD PTR [eax]
	fsub	DWORD PTR [ecx+12]
	fstp	DWORD PTR _dx$[ebp]

; 1548 : 			dy = cube->CentreY - bomb->Pos.v[Y];

	mov	eax, DWORD PTR _cube$[ebp]
	mov	ecx, DWORD PTR _bomb$[ebp]
	fld	DWORD PTR [eax+4]
	fsub	DWORD PTR [ecx+16]
	fstp	DWORD PTR _dy$[ebp]

; 1549 : 			dz = cube->CentreZ - bomb->Pos.v[Z];

	mov	eax, DWORD PTR _cube$[ebp]
	mov	ecx, DWORD PTR _bomb$[ebp]
	fld	DWORD PTR [eax+8]
	fsub	DWORD PTR [ecx+20]
	fstp	DWORD PTR _dz$[ebp]

; 1550 : 			if ((float)sqrt(dx * dx + dy * dy + dz * dz) > PUTTYBOMB_SCORCH_RADIUS + cube->Radius) continue;

	fld	DWORD PTR _dx$[ebp]
	fmul	DWORD PTR _dx$[ebp]
	fld	DWORD PTR _dy$[ebp]
	fmul	DWORD PTR _dy$[ebp]
	faddp	ST(1), ST(0)
	fld	DWORD PTR _dz$[ebp]
	fmul	DWORD PTR _dz$[ebp]
	faddp	ST(1), ST(0)
	push	ecx
	fstp	DWORD PTR [esp]
	call	?sqrt@@YAMM@Z				; sqrt
	add	esp, 4
	mov	eax, DWORD PTR _cube$[ebp]
	fld	DWORD PTR __real@43800000
	fadd	DWORD PTR [eax+12]
	fcompp
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L83641
	jmp	$L83636
$L83641:

; 1551 : 
; 1552 : 			wp = cube->Model.PolyPtr;

	mov	eax, DWORD PTR _cube$[ebp]
	mov	ecx, DWORD PTR [eax+100]
	mov	DWORD PTR _wp$[ebp], ecx

; 1553 : 			for (j = cube->Model.PolyNum ; j ; j--, wp++)

	mov	eax, DWORD PTR _cube$[ebp]
	movsx	ecx, WORD PTR [eax+72]
	mov	DWORD PTR _j$[ebp], ecx
	jmp	SHORT $L83642
$L83643:
	mov	eax, DWORD PTR _j$[ebp]
	sub	eax, 1
	mov	DWORD PTR _j$[ebp], eax
	mov	ecx, DWORD PTR _wp$[ebp]
	add	ecx, 80					; 00000050H
	mov	DWORD PTR _wp$[ebp], ecx
$L83642:
	cmp	DWORD PTR _j$[ebp], 0
	je	$L83644

; 1554 : 			{
; 1555 : 				wv = &wp->v0;

	mov	eax, DWORD PTR _wp$[ebp]
	add	eax, 64					; 00000040H
	mov	DWORD PTR _wv$[ebp], eax

; 1556 : 				wrgb = &wp->rgb0;

	mov	eax, DWORD PTR _wp$[ebp]
	add	eax, 16					; 00000010H
	mov	DWORD PTR _wrgb$[ebp], eax

; 1557 : 				vcount = 3 + (wp->Type & 1);

	mov	eax, DWORD PTR _wp$[ebp]
	movsx	ecx, WORD PTR [eax]
	and	ecx, 1
	add	ecx, 3
	mov	DWORD PTR _vcount$[ebp], ecx

; 1558 : 				for (k = 0 ; k < vcount ; k++)

	mov	DWORD PTR _k$[ebp], 0
	jmp	SHORT $L83645
$L83646:
	mov	eax, DWORD PTR _k$[ebp]
	add	eax, 1
	mov	DWORD PTR _k$[ebp], eax
$L83645:
	mov	eax, DWORD PTR _k$[ebp]
	cmp	eax, DWORD PTR _vcount$[ebp]
	jge	$L83647

; 1559 : 				{
; 1560 : 					SubVector(&bomb->Pos, (VEC*)&wv[k]->x, &vec);

	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _wv$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _bomb$[ebp]
	fld	DWORD PTR [eax+12]
	fsub	DWORD PTR [edx]
	fstp	DWORD PTR _vec$[ebp]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _wv$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _bomb$[ebp]
	fld	DWORD PTR [eax+16]
	fsub	DWORD PTR [edx+4]
	fstp	DWORD PTR _vec$[ebp+4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _wv$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _bomb$[ebp]
	fld	DWORD PTR [eax+20]
	fsub	DWORD PTR [edx+8]
	fstp	DWORD PTR _vec$[ebp+8]

; 1561 : 					len = Length(&vec);

	fld	DWORD PTR _vec$[ebp]
	fmul	DWORD PTR _vec$[ebp]
	fld	DWORD PTR _vec$[ebp+4]
	fmul	DWORD PTR _vec$[ebp+4]
	faddp	ST(1), ST(0)
	fld	DWORD PTR _vec$[ebp+8]
	fmul	DWORD PTR _vec$[ebp+8]
	faddp	ST(1), ST(0)
	push	ecx
	fstp	DWORD PTR [esp]
	call	?sqrt@@YAMM@Z				; sqrt
	add	esp, 4
	fstp	DWORD PTR _len$[ebp]

; 1562 : 					if (len < PUTTYBOMB_SCORCH_RADIUS)

	fld	DWORD PTR _len$[ebp]
	fcomp	DWORD PTR __real@43800000
	fnstsw	ax
	test	ah, 5
	jp	$L83652

; 1563 : 					{
; 1564 : 						FTOL((1.0f - len / PUTTYBOMB_SCORCH_RADIUS) * 512.0f, per);

	fld	DWORD PTR _len$[ebp]
	fdiv	DWORD PTR __real@43800000
	fsubr	DWORD PTR __real@3f800000
	fmul	DWORD PTR __real@44000000
	fadd	DWORD PTR __real@4b000000
	fstp	DWORD PTR __temp$83653[ebp]
	mov	eax, DWORD PTR __temp$83653[ebp]
	and	eax, 16777215				; 00ffffffH
	mov	DWORD PTR _per$[ebp], eax

; 1565 : 						if (per > 256) per = 256;

	cmp	DWORD PTR _per$[ebp], 256		; 00000100H
	jle	SHORT $L83656
	mov	DWORD PTR _per$[ebp], 256		; 00000100H
$L83656:

; 1566 : 
; 1567 : 						mrgb = (MODEL_RGB*)&wrgb[k];

	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _wrgb$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _mrgb$[ebp], edx

; 1568 : 						mrgb->r += (unsigned char)(((48 - mrgb->r) * per) >> 8);

	mov	eax, DWORD PTR _mrgb$[ebp]
	movzx	ecx, BYTE PTR [eax+2]
	mov	edx, 48					; 00000030H
	sub	edx, ecx
	imul	edx, DWORD PTR _per$[ebp]
	sar	edx, 8
	movzx	eax, dl
	mov	ecx, DWORD PTR _mrgb$[ebp]
	movzx	edx, BYTE PTR [ecx+2]
	add	edx, eax
	mov	eax, DWORD PTR _mrgb$[ebp]
	mov	BYTE PTR [eax+2], dl

; 1569 : 						mrgb->g += (unsigned char)(((24 - mrgb->g) * per) >> 8);

	mov	eax, DWORD PTR _mrgb$[ebp]
	movzx	ecx, BYTE PTR [eax+1]
	mov	edx, 24					; 00000018H
	sub	edx, ecx
	imul	edx, DWORD PTR _per$[ebp]
	sar	edx, 8
	movzx	eax, dl
	mov	ecx, DWORD PTR _mrgb$[ebp]
	movzx	edx, BYTE PTR [ecx+1]
	add	edx, eax
	mov	eax, DWORD PTR _mrgb$[ebp]
	mov	BYTE PTR [eax+1], dl

; 1570 : 						mrgb->b += (unsigned char)(((0 - mrgb->b) * per) >> 8);

	mov	eax, DWORD PTR _mrgb$[ebp]
	movzx	ecx, BYTE PTR [eax]
	xor	edx, edx
	sub	edx, ecx
	imul	edx, DWORD PTR _per$[ebp]
	sar	edx, 8
	movzx	eax, dl
	mov	ecx, DWORD PTR _mrgb$[ebp]
	movzx	edx, BYTE PTR [ecx]
	add	edx, eax
	mov	eax, DWORD PTR _mrgb$[ebp]
	mov	BYTE PTR [eax], dl

; 1571 : 						mrgb->a += (unsigned char)(((255 - mrgb->a) * per) >> 8);

	mov	eax, DWORD PTR _mrgb$[ebp]
	movzx	ecx, BYTE PTR [eax+3]
	mov	edx, 255				; 000000ffH
	sub	edx, ecx
	imul	edx, DWORD PTR _per$[ebp]
	sar	edx, 8
	movzx	eax, dl
	mov	ecx, DWORD PTR _mrgb$[ebp]
	movzx	edx, BYTE PTR [ecx+3]
	add	edx, eax
	mov	eax, DWORD PTR _mrgb$[ebp]
	mov	BYTE PTR [eax+3], dl
$L83652:

; 1572 : 					}
; 1573 : 				}

	jmp	$L83646
$L83647:

; 1574 : 			}

	jmp	$L83643
$L83644:

; 1575 : 		}

	jmp	$L83636
$L83637:

; 1576 : 
; 1577 : // calc bang impulse
; 1578 : 
; 1579 : 		SetVector(&imp, 0.0f, 0.0f, 0.0f);

	mov	DWORD PTR _imp$[ebp], 0
	mov	DWORD PTR _imp$[ebp+4], 0
	mov	DWORD PTR _imp$[ebp+8], 0

; 1580 : 		pos = &obj->player->car.Body->Centre.Pos;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+588]
	mov	edx, DWORD PTR [ecx+900]
	add	edx, 20					; 00000014H
	mov	DWORD PTR _pos$[ebp], edx

; 1581 : 		mass = obj->player->car.Body->Centre.Mass * 0.2f + 0.4f;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+588]
	mov	edx, DWORD PTR [ecx+900]
	fld	DWORD PTR [edx]
	fmul	DWORD PTR __real@3e4ccccd
	fadd	DWORD PTR __real@3ecccccd
	fstp	DWORD PTR _mass$[ebp]

; 1582 : 
; 1583 : 		header = PosToCollGrid(pos);

	mov	eax, DWORD PTR _pos$[ebp]
	push	eax
	call	?PosToCollGrid@@YAPAUCOLLGRID@@PAUVectorStruct@@@Z ; PosToCollGrid
	add	esp, 4
	mov	DWORD PTR _header$[ebp], eax

; 1584 : 		if (header)

	cmp	DWORD PTR _header$[ebp], 0
	je	$L83662

; 1585 : 		{
; 1586 : 			for (i = 0 ; i < header->NCollPolys ; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $L83663
$L83664:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$L83663:
	mov	eax, DWORD PTR _header$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR [eax]
	jge	$L83662

; 1587 : 			{
; 1588 : 				p = header->CollPolyPtr[i];

	mov	eax, DWORD PTR _header$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR _p$[ebp], eax

; 1589 : 				sides = IsPolyQuad(p) ? 4 : 3;

	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	and	ecx, 1
	neg	ecx
	sbb	ecx, ecx
	neg	ecx
	add	ecx, 3
	mov	DWORD PTR _sides$[ebp], ecx

; 1590 : 
; 1591 : 				for (j = 0 ; j < sides ; j++)

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $L83666
$L83667:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$L83666:
	mov	eax, DWORD PTR _j$[ebp]
	cmp	eax, DWORD PTR _sides$[ebp]
	jge	SHORT $L83668

; 1592 : 				{
; 1593 : 					if (PlaneDist(&p->EdgePlane[j], pos) > 0.0f)

	mov	eax, DWORD PTR _j$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _pos$[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	fld	DWORD PTR [ecx]
	fmul	DWORD PTR [edx+eax+24]
	mov	eax, DWORD PTR _j$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _pos$[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	fld	DWORD PTR [ecx+4]
	fmul	DWORD PTR [edx+eax+28]
	faddp	ST(1), ST(0)
	mov	eax, DWORD PTR _j$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _pos$[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	fld	DWORD PTR [ecx+8]
	fmul	DWORD PTR [edx+eax+32]
	faddp	ST(1), ST(0)
	mov	eax, DWORD PTR _j$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _p$[ebp]
	fadd	DWORD PTR [ecx+eax+36]
	fcomp	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $L83669

; 1594 : 						break;

	jmp	SHORT $L83668
$L83669:

; 1595 : 				}

	jmp	SHORT $L83667
$L83668:

; 1596 : 
; 1597 : 				if (j == sides)

	mov	eax, DWORD PTR _j$[ebp]
	cmp	eax, DWORD PTR _sides$[ebp]
	jne	$L83670

; 1598 : 				{
; 1599 : 					dist = PlaneDist(&p->Plane, pos);

	mov	eax, DWORD PTR _pos$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	fld	DWORD PTR [eax]
	fmul	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _pos$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	fld	DWORD PTR [edx+4]
	fmul	DWORD PTR [eax+12]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR _pos$[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	fld	DWORD PTR [ecx+8]
	fmul	DWORD PTR [edx+16]
	faddp	ST(1), ST(0)
	mov	eax, DWORD PTR _p$[ebp]
	fadd	DWORD PTR [eax+20]
	fstp	DWORD PTR _dist$[ebp]

; 1600 : 					if (dist > 0.0f && dist < PUTTYBOMB_BANG_IMPULSE_RANGE)

	fld	DWORD PTR _dist$[ebp]
	fcomp	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $L83670
	fld	DWORD PTR _dist$[ebp]
	fcomp	DWORD PTR __real@43000000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L83670

; 1601 : 					{
; 1602 : 						mul = (PUTTYBOMB_BANG_IMPULSE_RANGE - dist) * 20.0f * mass;

	fld	DWORD PTR __real@43000000
	fsub	DWORD PTR _dist$[ebp]
	fmul	DWORD PTR __real@41a00000
	fmul	DWORD PTR _mass$[ebp]
	fstp	DWORD PTR _mul$[ebp]

; 1603 : 						VecPlusEqScalarVec(&imp, mul, (VEC*)&p->Plane);

	mov	eax, DWORD PTR _p$[ebp]
	fld	DWORD PTR _mul$[ebp]
	fmul	DWORD PTR [eax+8]
	fadd	DWORD PTR _imp$[ebp]
	fstp	DWORD PTR _imp$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	fld	DWORD PTR _mul$[ebp]
	fmul	DWORD PTR [eax+12]
	fadd	DWORD PTR _imp$[ebp+4]
	fstp	DWORD PTR _imp$[ebp+4]
	mov	eax, DWORD PTR _p$[ebp]
	fld	DWORD PTR _mul$[ebp]
	fmul	DWORD PTR [eax+16]
	fadd	DWORD PTR _imp$[ebp+8]
	fstp	DWORD PTR _imp$[ebp+8]
$L83670:

; 1604 : 					}
; 1605 : 				}
; 1606 : 			}

	jmp	$L83664
$L83662:

; 1607 : 		}
; 1608 : 	
; 1609 : 		rot = frand(RAD);

	call	_rand
	mov	DWORD PTR tv1135[ebp], eax
	fild	DWORD PTR tv1135[ebp]
	fdiv	DWORD PTR __real@46fffe00
	fmul	DWORD PTR __real@40c90fdb
	fstp	DWORD PTR _rot$[ebp]

; 1610 : 		mul = frand(20.0f);

	call	_rand
	mov	DWORD PTR tv1137[ebp], eax
	fild	DWORD PTR tv1137[ebp]
	fdiv	DWORD PTR __real@46fffe00
	fmul	DWORD PTR __real@41a00000
	fstp	DWORD PTR _mul$[ebp]

; 1611 : 		SetVector(&off, (float)sin(rot) * mul, 0.0f, (float)cos(rot) * mul);

	mov	eax, DWORD PTR _rot$[ebp]
	push	eax
	call	?sin@@YAMM@Z				; sin
	add	esp, 4
	fmul	DWORD PTR _mul$[ebp]
	fstp	DWORD PTR _off$[ebp]
	mov	DWORD PTR _off$[ebp+4], 0
	mov	eax, DWORD PTR _rot$[ebp]
	push	eax
	call	?cos@@YAMM@Z				; cos
	add	esp, 4
	fmul	DWORD PTR _mul$[ebp]
	fstp	DWORD PTR _off$[ebp+8]

; 1612 : 		ApplyBodyImpulse(obj->player->car.Body, &imp, &off);

	lea	eax, DWORD PTR _off$[ebp]
	push	eax
	lea	ecx, DWORD PTR _imp$[ebp]
	push	ecx
	mov	edx, DWORD PTR _obj$[ebp]
	mov	eax, DWORD PTR [edx+588]
	mov	ecx, DWORD PTR [eax+900]
	push	ecx
	call	?ApplyBodyImpulse@@YAXPAUNewBodyStruct@@PAUVectorStruct@@1@Z ; ApplyBodyImpulse
	add	esp, 12					; 0000000cH

; 1613 : 
; 1614 : // give its aerial back
; 1615 : 
; 1616 : 		obj->player->car.Aerial.Length = bomb->OrigAerialLen;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+588]
	mov	edx, DWORD PTR _bomb$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+916], eax
$L83576:

; 1617 : 	}
; 1618 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?PuttyBombHandler@@YAXPAUobject_def@@@Z ENDP		; PuttyBombHandler
_TEXT	ENDS
PUBLIC	_cosf
; Function compile flags: /Odt /ZI
; File c:\program files\microsoft visual studio .net 2003\vc7\include\math.h
;	COMDAT ?cos@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?cos@@YAMM@Z PROC NEAR					; cos, COMDAT

; 549  :         {return (cosf(_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR __X$[ebp]
	push	eax
	call	_cosf
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?cos@@YAMM@Z ENDP					; cos
_TEXT	ENDS
EXTRN	_cos:NEAR
; Function compile flags: /Odt /ZI
;	COMDAT _cosf
_TEXT	SEGMENT
tv70 = -68						; size = 4
__X$ = 8						; size = 4
_cosf	PROC NEAR					; COMDAT

; 444  :         {return ((float)cos((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	fld	DWORD PTR __X$[ebp]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	call	_cos
	add	esp, 8
	fst	DWORD PTR tv70[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_cosf	ENDP
_TEXT	ENDS
PUBLIC	_sinf
; Function compile flags: /Odt /ZI
;	COMDAT ?sin@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?sin@@YAMM@Z PROC NEAR					; sin, COMDAT

; 575  :         {return (sinf(_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR __X$[ebp]
	push	eax
	call	_sinf
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?sin@@YAMM@Z ENDP					; sin
_TEXT	ENDS
EXTRN	_sin:NEAR
; Function compile flags: /Odt /ZI
;	COMDAT _sinf
_TEXT	SEGMENT
tv70 = -68						; size = 4
__X$ = 8						; size = 4
_sinf	PROC NEAR					; COMDAT

; 466  :         {return ((float)sin((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	fld	DWORD PTR __X$[ebp]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	call	_sin
	add	esp, 8
	fst	DWORD PTR tv70[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_sinf	ENDP
_TEXT	ENDS
PUBLIC	__real@40490fdb
PUBLIC	__real@43700000
PUBLIC	__real@41700000
PUBLIC	__real@3d400000
PUBLIC	__real@3e100000
PUBLIC	__real@3e880000
PUBLIC	__real@3d8f5c29
PUBLIC	?PuttyBombWorldMeshFxChecker@@YAXPAX@Z		; PuttyBombWorldMeshFxChecker
PUBLIC	?PuttyBombModelMeshFxChecker@@YAXPAX@Z		; PuttyBombModelMeshFxChecker
EXTRN	?TimeFactor@@3MA:DWORD				; TimeFactor
;	COMDAT __real@40490fdb
; File c:\documents and settings\jarhead\desktop\shit to display my love for xbox revolt and fuck you borman-ness\revolt source\source\weapon.cpp
CONST	SEGMENT
__real@40490fdb DD 040490fdbr			; 3.14159
CONST	ENDS
;	COMDAT __real@43700000
CONST	SEGMENT
__real@43700000 DD 043700000r			; 240
CONST	ENDS
;	COMDAT __real@41700000
CONST	SEGMENT
__real@41700000 DD 041700000r			; 15
CONST	ENDS
;	COMDAT __real@3d400000
CONST	SEGMENT
__real@3d400000 DD 03d400000r			; 0.046875
CONST	ENDS
;	COMDAT __real@3e100000
CONST	SEGMENT
__real@3e100000 DD 03e100000r			; 0.140625
CONST	ENDS
;	COMDAT __real@3e880000
CONST	SEGMENT
__real@3e880000 DD 03e880000r			; 0.265625
CONST	ENDS
;	COMDAT __real@3d8f5c29
CONST	SEGMENT
__real@3d8f5c29 DD 03d8f5c29r			; 0.07
; Function compile flags: /Odt /ZI
CONST	ENDS
;	COMDAT ?PuttyBombBang@@YAXPAUobject_def@@@Z
_TEXT	SEGMENT
tv476 = -108						; size = 4
tv475 = -104						; size = 4
__temp$83693 = -36					; size = 4
_i$ = -32						; size = 4
_vec$ = -28						; size = 12
_mv$ = -16						; size = 4
_model$ = -12						; size = 4
_vert$ = -8						; size = 4
_bomb$ = -4						; size = 4
_obj$ = 8						; size = 4
?PuttyBombBang@@YAXPAUobject_def@@@Z PROC NEAR		; PuttyBombBang, COMDAT

; 1625 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 108				; 0000006cH
	push	ebx
	push	esi
	push	edi

; 1626 : 	PUTTYBOMB_OBJ *bomb = (PUTTYBOMB_OBJ*)obj->Data;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+684]
	mov	DWORD PTR _bomb$[ebp], ecx

; 1627 : 	PUTTYBOMB_VERT *vert;
; 1628 : 	MODEL *model = &LevelModel[obj->DefaultModel].Model;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+656]
	imul	ecx, 168				; 000000a8H
	add	ecx, OFFSET FLAT:?LevelModel@@3PAULEVEL_MODEL@@A+8
	mov	DWORD PTR _model$[ebp], ecx

; 1629 : 	MODEL_VERTEX *mv;
; 1630 : 	VEC vec;
; 1631 : 	long i;
; 1632 : 
; 1633 : // darken car
; 1634 : 
; 1635 : 	if (bomb->Timer < PUTTYBOMB_SPHERE_TIME)

	mov	eax, DWORD PTR _bomb$[ebp]
	fld	DWORD PTR [eax]
	fcomp	DWORD PTR __real@3f000000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L83689

; 1636 : 	{
; 1637 : 		obj->player->car.AddLit -= (long)(TimeStep * 2000);

	mov	eax, DWORD PTR _obj$[ebp]
	mov	esi, DWORD PTR [eax+588]
	fld	DWORD PTR ?TimeStep@@3MA		; TimeStep
	fmul	DWORD PTR __real@44fa0000
	call	__ftol2
	mov	ecx, DWORD PTR [esi+3560]
	sub	ecx, eax
	mov	edx, DWORD PTR _obj$[ebp]
	mov	eax, DWORD PTR [edx+588]
	mov	DWORD PTR [eax+3560], ecx

; 1638 : 		if (obj->player->car.AddLit < -1000) obj->player->car.AddLit = -1000;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+588]
	cmp	DWORD PTR [ecx+3560], -1000		; fffffc18H
	jge	SHORT $L83689
	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+588]
	mov	DWORD PTR [ecx+3560], -1000		; fffffc18H
$L83689:

; 1639 : 	}
; 1640 : 
; 1641 : // maintain light?
; 1642 : 
; 1643 : 	if (obj->Light)

	mov	eax, DWORD PTR _obj$[ebp]
	cmp	DWORD PTR [eax+672], 0
	je	SHORT $L83692

; 1644 : 	{
; 1645 : 		FTOL((float)sin(bomb->Timer / PUTTYBOMB_BANG_TIME * (RAD / 2.0f)) * 240.0f + frand(15.0f), obj->Light->r);

	mov	eax, DWORD PTR _bomb$[ebp]
	fld	DWORD PTR [eax]
	fdiv	DWORD PTR __real@40200000
	fmul	DWORD PTR __real@40490fdb
	push	ecx
	fstp	DWORD PTR [esp]
	call	?sin@@YAMM@Z				; sin
	add	esp, 4
	fmul	DWORD PTR __real@43700000
	fstp	DWORD PTR tv475[ebp]
	call	_rand
	mov	DWORD PTR tv476[ebp], eax
	fild	DWORD PTR tv476[ebp]
	fdiv	DWORD PTR __real@46fffe00
	fmul	DWORD PTR __real@41700000
	fadd	DWORD PTR tv475[ebp]
	fadd	DWORD PTR __real@4b000000
	fstp	DWORD PTR __temp$83693[ebp]
	mov	eax, DWORD PTR __temp$83693[ebp]
	and	eax, 16777215				; 00ffffffH
	mov	ecx, DWORD PTR _obj$[ebp]
	mov	edx, DWORD PTR [ecx+672]
	mov	DWORD PTR [edx+88], eax

; 1646 : 		obj->Light->g = obj->Light->r >> 1;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+672]
	mov	edx, DWORD PTR [ecx+88]
	sar	edx, 1
	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+672]
	mov	DWORD PTR [ecx+92], edx
$L83692:

; 1647 : 	}
; 1648 : 
; 1649 : // maintain pieces
; 1650 : 
; 1651 : 	for (i = 0 ; i < PUTTYBOMB_BANG_NUM ; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $L83698
$L83699:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$L83698:
	cmp	DWORD PTR _i$[ebp], 64			; 00000040H
	jge	$L83700

; 1652 : 	{
; 1653 : 		if (bomb->Bang[i].Age < 0.0f)

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 36					; 00000024H
	mov	ecx, DWORD PTR _bomb$[ebp]
	fld	DWORD PTR [ecx+eax+72]
	fcomp	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 5
	jp	$L83701

; 1654 : 		{
; 1655 : 			VecPlusEqScalarVec(&bomb->Bang[i].Pos, TimeStep, &obj->player->car.Body->Centre.Vel);

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 36					; 00000024H
	mov	ecx, DWORD PTR _obj$[ebp]
	mov	edx, DWORD PTR [ecx+588]
	mov	ecx, DWORD PTR [edx+900]
	fld	DWORD PTR ?TimeStep@@3MA		; TimeStep
	fmul	DWORD PTR [ecx+32]
	mov	edx, DWORD PTR _bomb$[ebp]
	fadd	DWORD PTR [edx+eax+48]
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 36					; 00000024H
	mov	ecx, DWORD PTR _bomb$[ebp]
	fstp	DWORD PTR [ecx+eax+48]
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 36					; 00000024H
	mov	ecx, DWORD PTR _obj$[ebp]
	mov	edx, DWORD PTR [ecx+588]
	mov	ecx, DWORD PTR [edx+900]
	fld	DWORD PTR ?TimeStep@@3MA		; TimeStep
	fmul	DWORD PTR [ecx+36]
	mov	edx, DWORD PTR _bomb$[ebp]
	fadd	DWORD PTR [edx+eax+52]
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 36					; 00000024H
	mov	ecx, DWORD PTR _bomb$[ebp]
	fstp	DWORD PTR [ecx+eax+52]
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 36					; 00000024H
	mov	ecx, DWORD PTR _obj$[ebp]
	mov	edx, DWORD PTR [ecx+588]
	mov	ecx, DWORD PTR [edx+900]
	fld	DWORD PTR ?TimeStep@@3MA		; TimeStep
	fmul	DWORD PTR [ecx+40]
	mov	edx, DWORD PTR _bomb$[ebp]
	fadd	DWORD PTR [edx+eax+56]
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 36					; 00000024H
	mov	ecx, DWORD PTR _bomb$[ebp]
	fstp	DWORD PTR [ecx+eax+56]

; 1656 : 
; 1657 : 			bomb->Bang[i].Vel.v[X] = obj->player->car.Body->Centre.Vel.v[X];

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+588]
	mov	edx, DWORD PTR [ecx+900]
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 36					; 00000024H
	mov	ecx, DWORD PTR _bomb$[ebp]
	mov	edx, DWORD PTR [edx+32]
	mov	DWORD PTR [ecx+eax+60], edx

; 1658 : 			bomb->Bang[i].Vel.v[Z] = obj->player->car.Body->Centre.Vel.v[Z];

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+588]
	mov	edx, DWORD PTR [ecx+900]
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 36					; 00000024H
	mov	ecx, DWORD PTR _bomb$[ebp]
	mov	edx, DWORD PTR [edx+40]
	mov	DWORD PTR [ecx+eax+68], edx

; 1659 : 		}
; 1660 : 		else

	jmp	$L83702
$L83701:

; 1661 : 		{
; 1662 : 			VecPlusEqScalarVec(&bomb->Bang[i].Pos, TimeStep, &bomb->Bang[i].Vel);

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 36					; 00000024H
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 36					; 00000024H
	mov	edx, DWORD PTR _bomb$[ebp]
	fld	DWORD PTR ?TimeStep@@3MA		; TimeStep
	fmul	DWORD PTR [edx+ecx+60]
	mov	ecx, DWORD PTR _bomb$[ebp]
	fadd	DWORD PTR [ecx+eax+48]
	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 36					; 00000024H
	mov	eax, DWORD PTR _bomb$[ebp]
	fstp	DWORD PTR [eax+edx+48]
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 36					; 00000024H
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 36					; 00000024H
	mov	edx, DWORD PTR _bomb$[ebp]
	fld	DWORD PTR ?TimeStep@@3MA		; TimeStep
	fmul	DWORD PTR [edx+ecx+64]
	mov	ecx, DWORD PTR _bomb$[ebp]
	fadd	DWORD PTR [ecx+eax+52]
	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 36					; 00000024H
	mov	eax, DWORD PTR _bomb$[ebp]
	fstp	DWORD PTR [eax+edx+52]
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 36					; 00000024H
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 36					; 00000024H
	mov	edx, DWORD PTR _bomb$[ebp]
	fld	DWORD PTR ?TimeStep@@3MA		; TimeStep
	fmul	DWORD PTR [edx+ecx+68]
	mov	ecx, DWORD PTR _bomb$[ebp]
	fadd	DWORD PTR [ecx+eax+56]
	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 36					; 00000024H
	mov	eax, DWORD PTR _bomb$[ebp]
	fstp	DWORD PTR [eax+edx+56]

; 1663 : 
; 1664 : 			bomb->Bang[i].Vel.v[X] *= (1.0f - 1.5f * TimeStep);

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 36					; 00000024H
	fld	DWORD PTR __real@3fc00000
	fmul	DWORD PTR ?TimeStep@@3MA		; TimeStep
	fsubr	DWORD PTR __real@3f800000
	mov	ecx, DWORD PTR _bomb$[ebp]
	fmul	DWORD PTR [ecx+eax+60]
	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 36					; 00000024H
	mov	eax, DWORD PTR _bomb$[ebp]
	fstp	DWORD PTR [eax+edx+60]

; 1665 : 			bomb->Bang[i].Vel.v[Z] *= (1.0f - 1.5f * TimeStep);

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 36					; 00000024H
	fld	DWORD PTR __real@3fc00000
	fmul	DWORD PTR ?TimeStep@@3MA		; TimeStep
	fsubr	DWORD PTR __real@3f800000
	mov	ecx, DWORD PTR _bomb$[ebp]
	fmul	DWORD PTR [ecx+eax+68]
	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 36					; 00000024H
	mov	eax, DWORD PTR _bomb$[ebp]
	fstp	DWORD PTR [eax+edx+68]
$L83702:

; 1666 : 		}
; 1667 : 
; 1668 : 		bomb->Bang[i].Age += TimeStep;

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 36					; 00000024H
	mov	ecx, DWORD PTR _bomb$[ebp]
	fld	DWORD PTR ?TimeStep@@3MA		; TimeStep
	fadd	DWORD PTR [ecx+eax+72]
	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 36					; 00000024H
	mov	eax, DWORD PTR _bomb$[ebp]
	fstp	DWORD PTR [eax+edx+72]

; 1669 : 	}

	jmp	$L83699
$L83700:

; 1670 : 
; 1671 : // release smoke
; 1672 : 
; 1673 : 	if (bomb->Timer > PUTTYBOMB_SPHERE_TIME)

	mov	eax, DWORD PTR _bomb$[ebp]
	fld	DWORD PTR [eax]
	fcomp	DWORD PTR __real@3f000000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	$L83703

; 1674 : 	{
; 1675 : 		bomb->SmokeTime += TimeStep;

	mov	eax, DWORD PTR _bomb$[ebp]
	fld	DWORD PTR ?TimeStep@@3MA		; TimeStep
	fadd	DWORD PTR [eax+2384]
	mov	ecx, DWORD PTR _bomb$[ebp]
	fstp	DWORD PTR [ecx+2384]

; 1676 : 		if (bomb->SmokeTime >= 0.1f)

	mov	eax, DWORD PTR _bomb$[ebp]
	fld	DWORD PTR [eax+2384]
	fcomp	DWORD PTR __real@3dcccccd
	fnstsw	ax
	test	ah, 1
	jne	$L83703

; 1677 : 		{
; 1678 : 			for (i = 0 ; i < PUTTYBOMB_SMOKE_NUM ; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $L83705
$L83706:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$L83705:
	cmp	DWORD PTR _i$[ebp], 8
	jge	SHORT $L83707

; 1679 : 			{
; 1680 : 				RotTransVector(&obj->player->car.Body->Centre.WMatrix, &obj->player->car.BodyWorldPos, (VEC*)&obj->player->car.Models->Body->VertPtr[bomb->SmokeVert[i]].x, &vec);

	lea	eax, DWORD PTR _vec$[ebp]
	push	eax
	mov	ecx, DWORD PTR _obj$[ebp]
	mov	edx, DWORD PTR [ecx+588]
	mov	eax, DWORD PTR [edx+864]
	mov	ecx, DWORD PTR [eax+6064]
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _bomb$[ebp]
	mov	edx, DWORD PTR [eax+edx*4+2352]
	imul	edx, 88					; 00000058H
	add	edx, DWORD PTR [ecx+52]
	push	edx
	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+588]
	add	ecx, 816				; 00000330H
	push	ecx
	mov	edx, DWORD PTR _obj$[ebp]
	mov	eax, DWORD PTR [edx+588]
	mov	ecx, DWORD PTR [eax+900]
	add	ecx, 100				; 00000064H
	push	ecx
	call	?RotTransVector@@YAXPATMatrixUnion@@PAUVectorStruct@@11@Z ; RotTransVector
	add	esp, 16					; 00000010H

; 1681 : 				CreateSpark(SPARK_SMOKE3, &vec, &BombSmokeVel, 16.0f, 0);

	push	0
	push	0
	push	1098907648				; 41800000H
	push	OFFSET FLAT:_BombSmokeVel
	lea	eax, DWORD PTR _vec$[ebp]
	push	eax
	push	12					; 0000000cH
	call	?CreateSpark@@YA_NW4SparkTypeEnum@@PAUVectorStruct@@1M_K@Z ; CreateSpark
	add	esp, 24					; 00000018H

; 1682 : 			}

	jmp	$L83706
$L83707:

; 1683 : 			bomb->SmokeTime -= 0.1f;

	mov	eax, DWORD PTR _bomb$[ebp]
	fld	DWORD PTR [eax+2384]
	fsub	DWORD PTR __real@3dcccccd
	mov	ecx, DWORD PTR _bomb$[ebp]
	fstp	DWORD PTR [ecx+2384]
$L83703:

; 1684 : 		}
; 1685 : 	}
; 1686 : 
; 1687 : // set vert UV's
; 1688 : 
; 1689 : 	vert = (PUTTYBOMB_VERT*)(bomb + 1);

	mov	eax, DWORD PTR _bomb$[ebp]
	add	eax, 2388				; 00000954H
	mov	DWORD PTR _vert$[ebp], eax

; 1690 : 	mv = model->VertPtr;

	mov	eax, DWORD PTR _model$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	mov	DWORD PTR _mv$[ebp], ecx

; 1691 : 
; 1692 : 	for (i = model->VertNum ; i ; i--, mv++, vert++)

	mov	eax, DWORD PTR _model$[ebp]
	movsx	ecx, WORD PTR [eax+34]
	mov	DWORD PTR _i$[ebp], ecx
	jmp	SHORT $L83710
$L83711:
	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	mov	ecx, DWORD PTR _mv$[ebp]
	add	ecx, 88					; 00000058H
	mov	DWORD PTR _mv$[ebp], ecx
	mov	edx, DWORD PTR _vert$[ebp]
	add	edx, 8
	mov	DWORD PTR _vert$[ebp], edx
$L83710:
	cmp	DWORD PTR _i$[ebp], 0
	je	SHORT $L83712

; 1693 : 	{
; 1694 : 		vert->Time += vert->TimeAdd * TimeStep;

	mov	eax, DWORD PTR _vert$[ebp]
	fld	DWORD PTR ?TimeStep@@3MA		; TimeStep
	fmul	DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _vert$[ebp]
	fadd	DWORD PTR [ecx]
	mov	edx, DWORD PTR _vert$[ebp]
	fstp	DWORD PTR [edx]

; 1695 : 
; 1696 : 		mv->tu = (float)sin(vert->Time) * (12.0f / 256.0f) + (36.0f / 256.0f);

	mov	eax, DWORD PTR _vert$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?sin@@YAMM@Z				; sin
	add	esp, 4
	fmul	DWORD PTR __real@3d400000
	fadd	DWORD PTR __real@3e100000
	mov	edx, DWORD PTR _mv$[ebp]
	fstp	DWORD PTR [edx+60]

; 1697 : 		mv->tv = (float)cos(vert->Time) * (12.0f / 256.0f) + (68.0f / 256.0f);

	mov	eax, DWORD PTR _vert$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?cos@@YAMM@Z				; cos
	add	esp, 4
	fmul	DWORD PTR __real@3d400000
	fadd	DWORD PTR __real@3e880000
	mov	edx, DWORD PTR _mv$[ebp]
	fstp	DWORD PTR [edx+64]

; 1698 : 	}

	jmp	SHORT $L83711
$L83712:

; 1699 : 
; 1700 : // set sphere size
; 1701 : 
; 1702 : 	if (bomb->SphereRadius < 512.0f)

	mov	eax, DWORD PTR _bomb$[ebp]
	fld	DWORD PTR [eax+4]
	fcomp	DWORD PTR __real@44000000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L83715

; 1703 : 	bomb->SphereRadius += (512.0f - bomb->SphereRadius) * 0.07f * TimeFactor;

	mov	eax, DWORD PTR _bomb$[ebp]
	fld	DWORD PTR __real@44000000
	fsub	DWORD PTR [eax+4]
	fmul	DWORD PTR __real@3d8f5c29
	fmul	DWORD PTR ?TimeFactor@@3MA		; TimeFactor
	mov	ecx, DWORD PTR _bomb$[ebp]
	fadd	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _bomb$[ebp]
	fstp	DWORD PTR [edx+4]
$L83715:

; 1704 : 
; 1705 : // inc timer, kill?
; 1706 : 
; 1707 : 	bomb->Timer += TimeStep;

	mov	eax, DWORD PTR _bomb$[ebp]
	fld	DWORD PTR ?TimeStep@@3MA		; TimeStep
	fadd	DWORD PTR [eax]
	mov	ecx, DWORD PTR _bomb$[ebp]
	fstp	DWORD PTR [ecx]

; 1708 : 	if (bomb->Timer >= PUTTYBOMB_BANG_TIME)

	mov	eax, DWORD PTR _bomb$[ebp]
	fld	DWORD PTR [eax]
	fcomp	DWORD PTR __real@40200000
	fnstsw	ax
	test	ah, 1
	jne	SHORT $L83716

; 1709 : 	{
; 1710 : 		obj->player->car.IsBomb = FALSE;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+588]
	mov	DWORD PTR [ecx+3568], 0

; 1711 : 		OBJ_FreeObject(obj);

	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	call	?OBJ_FreeObject@@YAJPAUobject_def@@@Z	; OBJ_FreeObject
	add	esp, 4

; 1712 : 		return;

	jmp	$L83681
$L83716:

; 1713 : 	}
; 1714 : 
; 1715 : // set bounding box + add to mesh fx lists
; 1716 : 
; 1717 : 	if (bomb->Timer < PUTTYBOMB_SPHERE_TIME)

	mov	eax, DWORD PTR _bomb$[ebp]
	fld	DWORD PTR [eax]
	fcomp	DWORD PTR __real@3f000000
	fnstsw	ax
	test	ah, 5
	jp	$L83681

; 1718 : 	{
; 1719 : 		SetBBox(&bomb->Box,
; 1720 : 			bomb->Pos.v[X] - bomb->SphereRadius - PUTTYBOMB_PUSH_RANGE,
; 1721 : 			bomb->Pos.v[X] + bomb->SphereRadius + PUTTYBOMB_PUSH_RANGE,
; 1722 : 			bomb->Pos.v[Y] - bomb->SphereRadius - PUTTYBOMB_PUSH_RANGE,
; 1723 : 			bomb->Pos.v[Y] + bomb->SphereRadius + PUTTYBOMB_PUSH_RANGE,
; 1724 : 			bomb->Pos.v[Z] - bomb->SphereRadius - PUTTYBOMB_PUSH_RANGE,
; 1725 : 			bomb->Pos.v[Z] + bomb->SphereRadius + PUTTYBOMB_PUSH_RANGE);

	mov	eax, DWORD PTR _bomb$[ebp]
	mov	ecx, DWORD PTR _bomb$[ebp]
	fld	DWORD PTR [eax+12]
	fsub	DWORD PTR [ecx+4]
	fsub	DWORD PTR __real@42800000
	mov	edx, DWORD PTR _bomb$[ebp]
	fstp	DWORD PTR [edx+24]
	mov	eax, DWORD PTR _bomb$[ebp]
	mov	ecx, DWORD PTR _bomb$[ebp]
	fld	DWORD PTR [eax+12]
	fadd	DWORD PTR [ecx+4]
	fadd	DWORD PTR __real@42800000
	mov	edx, DWORD PTR _bomb$[ebp]
	fstp	DWORD PTR [edx+28]
	mov	eax, DWORD PTR _bomb$[ebp]
	mov	ecx, DWORD PTR _bomb$[ebp]
	fld	DWORD PTR [eax+16]
	fsub	DWORD PTR [ecx+4]
	fsub	DWORD PTR __real@42800000
	mov	edx, DWORD PTR _bomb$[ebp]
	fstp	DWORD PTR [edx+32]
	mov	eax, DWORD PTR _bomb$[ebp]
	mov	ecx, DWORD PTR _bomb$[ebp]
	fld	DWORD PTR [eax+16]
	fadd	DWORD PTR [ecx+4]
	fadd	DWORD PTR __real@42800000
	mov	edx, DWORD PTR _bomb$[ebp]
	fstp	DWORD PTR [edx+36]
	mov	eax, DWORD PTR _bomb$[ebp]
	mov	ecx, DWORD PTR _bomb$[ebp]
	fld	DWORD PTR [eax+20]
	fsub	DWORD PTR [ecx+4]
	fsub	DWORD PTR __real@42800000
	mov	edx, DWORD PTR _bomb$[ebp]
	fstp	DWORD PTR [edx+40]
	mov	eax, DWORD PTR _bomb$[ebp]
	mov	ecx, DWORD PTR _bomb$[ebp]
	fld	DWORD PTR [eax+20]
	fadd	DWORD PTR [ecx+4]
	fadd	DWORD PTR __real@42800000
	mov	edx, DWORD PTR _bomb$[ebp]
	fstp	DWORD PTR [edx+44]

; 1726 : 
; 1727 : 		AddWorldMeshFx(PuttyBombWorldMeshFxChecker, obj);

	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	push	OFFSET FLAT:?PuttyBombWorldMeshFxChecker@@YAXPAX@Z ; PuttyBombWorldMeshFxChecker
	call	?AddWorldMeshFx@@YAXP6AXPAX@Z0@Z	; AddWorldMeshFx
	add	esp, 8

; 1728 : 		AddModelMeshFx(PuttyBombModelMeshFxChecker, obj);

	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	push	OFFSET FLAT:?PuttyBombModelMeshFxChecker@@YAXPAX@Z ; PuttyBombModelMeshFxChecker
	call	?AddModelMeshFx@@YAXP6AXPAX@Z0@Z	; AddModelMeshFx
	add	esp, 8
$L83681:

; 1729 : 	}
; 1730 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?PuttyBombBang@@YAXPAUobject_def@@@Z ENDP		; PuttyBombBang
_TEXT	ENDS
EXTRN	?PLR_PlayerHead@@3PAUPlayerStruct@@A:DWORD	; PLR_PlayerHead
EXTRN	?OBJ_PairCollInfo@@3PAY0IA@UPairCollInfoStruct@@A:BYTE ; OBJ_PairCollInfo
; Function compile flags: /Odt /ZI
;	COMDAT ?PuttyBombMove@@YAXPAUobject_def@@@Z
_TEXT	SEGMENT
_bomb$ = -8						; size = 4
_player$ = -4						; size = 4
_obj$ = 8						; size = 4
?PuttyBombMove@@YAXPAUobject_def@@@Z PROC NEAR		; PuttyBombMove, COMDAT

; 1733 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi

; 1734 : 	PLAYER *player;
; 1735 : 	PUTTYBOMB_OBJ *bomb = (PUTTYBOMB_OBJ*)obj->Data;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+684]
	mov	DWORD PTR _bomb$[ebp], ecx

; 1736 : 
; 1737 : 	// Make sure it isn't too late
; 1738 : 	if (obj->player->car.WillDetonate) return;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+588]
	cmp	DWORD PTR [ecx+3572], 0
	je	SHORT $L83724
	jmp	$L83720
$L83724:

; 1739 : 
; 1740 : 	// Loop over all other players
; 1741 : 	for (player = PLR_PlayerHead; player != NULL; player = player ->next) {

	mov	eax, DWORD PTR ?PLR_PlayerHead@@3PAUPlayerStruct@@A ; PLR_PlayerHead
	mov	DWORD PTR _player$[ebp], eax
	jmp	SHORT $L83725
$L83726:
	mov	eax, DWORD PTR _player$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _player$[ebp], ecx
$L83725:
	cmp	DWORD PTR _player$[ebp], 0
	je	$L83720

; 1742 : 		if (player == obj->player) continue;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR _player$[ebp]
	cmp	ecx, DWORD PTR [eax+588]
	jne	SHORT $L83728
	jmp	SHORT $L83726
$L83728:

; 1743 : 
; 1744 : 		// Have the players collided?
; 1745 : 		if (!IsPairCollided(obj->player->ownobj, player->ownobj)) continue;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+588]
	mov	edx, DWORD PTR [ecx+40]
	mov	eax, DWORD PTR [edx+576]
	shl	eax, 9
	mov	ecx, DWORD PTR _player$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	ecx, DWORD PTR [edx+576]
	mov	edx, DWORD PTR ?OBJ_PairCollInfo@@3PAY0IA@UPairCollInfoStruct@@A[eax+ecx*4]
	shr	edx, 1
	and	edx, 1
	jne	SHORT $L83729
	jmp	SHORT $L83726
$L83729:

; 1746 : 
; 1747 : 		// Can the bomb be tranferred?
; 1748 : 		if (player->car.NoReturnTimer > ZERO) continue;

	mov	eax, DWORD PTR _player$[ebp]
	fld	DWORD PTR [eax+3576]
	fcomp	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $L83730
	jmp	SHORT $L83726
$L83730:

; 1749 : 
; 1750 : 		// Transfer the bomb
; 1751 : 		obj->player->car.NoReturnTimer = PUTTYBOMB_NORETURN_TIME;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+588]
	mov	DWORD PTR [ecx+3576], 1065353216	; 3f800000H

; 1752 : 		obj->player->car.Aerial.Length = bomb->OrigAerialLen;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+588]
	mov	edx, DWORD PTR _bomb$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+916], eax

; 1753 : 		obj->player->car.IsBomb = FALSE;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+588]
	mov	DWORD PTR [ecx+3568], 0

; 1754 : 		obj->player->car.WillDetonate = FALSE;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+588]
	mov	DWORD PTR [ecx+3572], 0

; 1755 : 
; 1756 : 		player->car.IsBomb = TRUE;

	mov	eax, DWORD PTR _player$[ebp]
	mov	DWORD PTR [eax+3568], 1

; 1757 : 		player->car.WillDetonate = FALSE;

	mov	eax, DWORD PTR _player$[ebp]
	mov	DWORD PTR [eax+3572], 0

; 1758 : 		bomb->OrigAerialLen = player->car.Aerial.Length;

	mov	eax, DWORD PTR _bomb$[ebp]
	mov	ecx, DWORD PTR _player$[ebp]
	mov	edx, DWORD PTR [ecx+916]
	mov	DWORD PTR [eax+8], edx

; 1759 : 		obj->player->car.NoReturnTimer = PUTTYBOMB_NORETURN_TIME;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+588]
	mov	DWORD PTR [ecx+3576], 1065353216	; 3f800000H

; 1760 : 		obj->player = player;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR _player$[ebp]
	mov	DWORD PTR [eax+588], ecx

; 1761 : 
; 1762 : 	}

	jmp	$L83726
$L83720:

; 1763 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?PuttyBombMove@@YAXPAUobject_def@@@Z ENDP		; PuttyBombMove
_TEXT	ENDS
PUBLIC	__real@bf333333
PUBLIC	__real@41f00000
EXTRN	?TimerCurrent@@3KA:DWORD			; TimerCurrent
EXTRN	?TimerFreq@@3KA:DWORD				; TimerFreq
;	COMDAT __real@bf333333
CONST	SEGMENT
__real@bf333333 DD 0bf333333r			; -0.7
CONST	ENDS
;	COMDAT __real@41f00000
CONST	SEGMENT
__real@41f00000 DD 041f00000r			; 30
; Function compile flags: /Odt /ZI
CONST	ENDS
;	COMDAT ?WaterBombHandler@@YAXPAUobject_def@@@Z
_TEXT	SEGMENT
tv362 = -140						; size = 8
tv355 = -132						; size = 8
_dist$ = -60						; size = 4
_pos$ = -56						; size = 12
_mat$ = -44						; size = 36
_bomb$ = -8						; size = 4
_flag$ = -4						; size = 4
_obj$ = 8						; size = 4
?WaterBombHandler@@YAXPAUobject_def@@@Z PROC NEAR	; WaterBombHandler, COMDAT

; 1771 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 140				; 0000008cH
	push	ebx
	push	esi
	push	edi

; 1772 : 	long flag;
; 1773 : 	WATERBOMB_OBJ *bomb = (WATERBOMB_OBJ*)obj->Data;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+684]
	mov	DWORD PTR _bomb$[ebp], ecx

; 1774 : 	MAT mat;
; 1775 : 	VEC pos;
; 1776 : 	REAL dist;
; 1777 : 
; 1778 : // inc age
; 1779 : 
; 1780 : 	bomb->Age += TimeStep;

	mov	eax, DWORD PTR _bomb$[ebp]
	fld	DWORD PTR ?TimeStep@@3MA		; TimeStep
	fadd	DWORD PTR [eax]
	mov	ecx, DWORD PTR _bomb$[ebp]
	fstp	DWORD PTR [ecx]

; 1781 : 
; 1782 : // maintain sfx
; 1783 : 
; 1784 : 	if (obj->Sfx3D)

	mov	eax, DWORD PTR _obj$[ebp]
	cmp	DWORD PTR [eax+680], 0
	je	SHORT $L83740

; 1785 : 	{
; 1786 : 		CopyVec(&obj->body.Centre.Pos, &obj->Sfx3D->Pos);

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+680]
	mov	edx, DWORD PTR _obj$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	DWORD PTR [ecx+28], eax
	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+680]
	mov	edx, DWORD PTR _obj$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	DWORD PTR [ecx+32], eax
	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+680]
	mov	edx, DWORD PTR _obj$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	DWORD PTR [ecx+36], eax
$L83740:

; 1787 : 	}
; 1788 : 
; 1789 : // set wobble scalars
; 1790 : 
; 1791 : 	bomb->ScalarHoriz = (float)sin((float)TIME2MS(TimerCurrent) / 100.0f) / 10.0f + 1.0f;

	mov	eax, DWORD PTR ?TimerCurrent@@3KA	; TimerCurrent
	mov	DWORD PTR tv355[ebp], eax
	mov	DWORD PTR tv355[ebp+4], 0
	fild	QWORD PTR tv355[ebp]
	mov	eax, DWORD PTR ?TimerFreq@@3KA		; TimerFreq
	xor	edx, edx
	mov	ecx, 1000				; 000003e8H
	div	ecx
	mov	DWORD PTR tv362[ebp], eax
	mov	DWORD PTR tv362[ebp+4], 0
	fild	QWORD PTR tv362[ebp]
	fdivp	ST(1), ST(0)
	fdiv	DWORD PTR __real@42c80000
	push	ecx
	fstp	DWORD PTR [esp]
	call	?sin@@YAMM@Z				; sin
	add	esp, 4
	fdiv	DWORD PTR __real@41200000
	fadd	DWORD PTR __real@3f800000
	mov	edx, DWORD PTR _bomb$[ebp]
	fstp	DWORD PTR [edx+8]

; 1792 : 	bomb->ScalarVert = 2.0f - bomb->ScalarHoriz;

	mov	eax, DWORD PTR _bomb$[ebp]
	fld	DWORD PTR __real@40000000
	fsub	DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _bomb$[ebp]
	fstp	DWORD PTR [ecx+12]

; 1793 : 
; 1794 : // sub hit mag
; 1795 : 
; 1796 : 	if (obj->body.BangMag)

	mov	eax, DWORD PTR _obj$[ebp]
	fld	DWORD PTR __real@00000000
	fld	DWORD PTR [eax+548]
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jnp	SHORT $L83743

; 1797 : 	{
; 1798 : 		bomb->BangTol -= obj->body.BangMag;

	mov	eax, DWORD PTR _bomb$[ebp]
	mov	ecx, DWORD PTR _obj$[ebp]
	fld	DWORD PTR [eax+4]
	fsub	DWORD PTR [ecx+548]
	mov	edx, DWORD PTR _bomb$[ebp]
	fstp	DWORD PTR [edx+4]

; 1799 : 		if (obj->body.BangPlane.v[Y] > -0.7f && bomb->BangTol < 0.0f)

	mov	eax, DWORD PTR _obj$[ebp]
	fld	DWORD PTR [eax+556]
	fcomp	DWORD PTR __real@bf333333
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $L83744
	mov	eax, DWORD PTR _bomb$[ebp]
	fld	DWORD PTR [eax+4]
	fcomp	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L83744

; 1800 : 			bomb->BangTol = 0.0f;

	mov	eax, DWORD PTR _bomb$[ebp]
	mov	DWORD PTR [eax+4], 0
$L83744:

; 1801 : 
; 1802 : 		obj->body.BangMag = 0.0f;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	DWORD PTR [eax+548], 0
$L83743:

; 1803 : 	}
; 1804 : 
; 1805 : // bang?
; 1806 : 
; 1807 : 	if (bomb->BangTol < 0.0f || bomb->Age > WATERBOMB_MAX_AGE)

	mov	eax, DWORD PTR _bomb$[ebp]
	fld	DWORD PTR [eax+4]
	fcomp	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 5
	jnp	SHORT $L83746
	mov	eax, DWORD PTR _bomb$[ebp]
	fld	DWORD PTR [eax]
	fcomp	DWORD PTR __real@41f00000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	$L83733
$L83746:

; 1808 : 	{
; 1809 : 		PlaySfx3D(SFX_WATERBOMB_HIT, SFX_MAX_VOL, 22050, &obj->body.Centre.Pos);

	mov	eax, DWORD PTR _obj$[ebp]
	add	eax, 20					; 00000014H
	push	eax
	push	22050					; 00005622H
	push	127					; 0000007fH
	push	14					; 0000000eH
	call	?PlaySfx3D@@YAXJJJPAUVectorStruct@@@Z	; PlaySfx3D
	add	esp, 16					; 00000010H

; 1810 : 
; 1811 : //		flag = (long)&LevelModel[obj->DefaultModel].Model;
; 1812 : //		CreateObject(&obj->body.Centre.Pos, &obj->body.Centre.WMatrix, OBJECT_TYPE_DISSOLVEMODEL, &flag);
; 1813 : 
; 1814 : 		dist = -PlaneDist(&obj->body.BangPlane, &obj->body.Centre.Pos);

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR _obj$[ebp]
	fld	DWORD PTR [eax+20]
	fmul	DWORD PTR [ecx+552]
	mov	edx, DWORD PTR _obj$[ebp]
	mov	eax, DWORD PTR _obj$[ebp]
	fld	DWORD PTR [edx+24]
	fmul	DWORD PTR [eax+556]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR _obj$[ebp]
	mov	edx, DWORD PTR _obj$[ebp]
	fld	DWORD PTR [ecx+28]
	fmul	DWORD PTR [edx+560]
	faddp	ST(1), ST(0)
	mov	eax, DWORD PTR _obj$[ebp]
	fadd	DWORD PTR [eax+564]
	fchs
	fstp	DWORD PTR _dist$[ebp]

; 1815 : 		VecPlusScalarVec(&obj->body.Centre.Pos, dist, (VEC*)&obj->body.BangPlane, &pos);

	mov	eax, DWORD PTR _obj$[ebp]
	fld	DWORD PTR _dist$[ebp]
	fmul	DWORD PTR [eax+552]
	mov	ecx, DWORD PTR _obj$[ebp]
	fadd	DWORD PTR [ecx+20]
	fstp	DWORD PTR _pos$[ebp]
	mov	eax, DWORD PTR _obj$[ebp]
	fld	DWORD PTR _dist$[ebp]
	fmul	DWORD PTR [eax+556]
	mov	ecx, DWORD PTR _obj$[ebp]
	fadd	DWORD PTR [ecx+24]
	fstp	DWORD PTR _pos$[ebp+4]
	mov	eax, DWORD PTR _obj$[ebp]
	fld	DWORD PTR _dist$[ebp]
	fmul	DWORD PTR [eax+560]
	mov	ecx, DWORD PTR _obj$[ebp]
	fadd	DWORD PTR [ecx+28]
	fstp	DWORD PTR _pos$[ebp+8]

; 1816 : 
; 1817 : 		SetVec(&mat.mv[U], -obj->body.BangPlane.v[A], -obj->body.BangPlane.v[B], -obj->body.BangPlane.v[C]);

	mov	eax, DWORD PTR _obj$[ebp]
	fld	DWORD PTR [eax+552]
	fchs
	fstp	DWORD PTR _mat$[ebp+12]
	mov	eax, DWORD PTR _obj$[ebp]
	fld	DWORD PTR [eax+556]
	fchs
	fstp	DWORD PTR _mat$[ebp+16]
	mov	eax, DWORD PTR _obj$[ebp]
	fld	DWORD PTR [eax+560]
	fchs
	fstp	DWORD PTR _mat$[ebp+20]

; 1818 : 		SetVec(&mat.mv[L], mat.m[UY], mat.m[UZ], mat.m[UX]);

	mov	eax, DWORD PTR _mat$[ebp+16]
	mov	DWORD PTR _mat$[ebp+24], eax
	mov	eax, DWORD PTR _mat$[ebp+20]
	mov	DWORD PTR _mat$[ebp+28], eax
	mov	eax, DWORD PTR _mat$[ebp+12]
	mov	DWORD PTR _mat$[ebp+32], eax

; 1819 : 		CrossProduct(&mat.mv[U], &mat.mv[L], &mat.mv[R]);

	fld	DWORD PTR _mat$[ebp+16]
	fmul	DWORD PTR _mat$[ebp+32]
	fld	DWORD PTR _mat$[ebp+20]
	fmul	DWORD PTR _mat$[ebp+28]
	fsubp	ST(1), ST(0)
	fstp	DWORD PTR _mat$[ebp]
	fld	DWORD PTR _mat$[ebp+20]
	fmul	DWORD PTR _mat$[ebp+24]
	fld	DWORD PTR _mat$[ebp+12]
	fmul	DWORD PTR _mat$[ebp+32]
	fsubp	ST(1), ST(0)
	fstp	DWORD PTR _mat$[ebp+4]
	fld	DWORD PTR _mat$[ebp+12]
	fmul	DWORD PTR _mat$[ebp+28]
	fld	DWORD PTR _mat$[ebp+16]
	fmul	DWORD PTR _mat$[ebp+24]
	fsubp	ST(1), ST(0)
	fstp	DWORD PTR _mat$[ebp+8]

; 1820 : 		CrossProduct(&mat.mv[R], &mat.mv[U], &mat.mv[L]);

	fld	DWORD PTR _mat$[ebp+4]
	fmul	DWORD PTR _mat$[ebp+20]
	fld	DWORD PTR _mat$[ebp+8]
	fmul	DWORD PTR _mat$[ebp+16]
	fsubp	ST(1), ST(0)
	fstp	DWORD PTR _mat$[ebp+24]
	fld	DWORD PTR _mat$[ebp+8]
	fmul	DWORD PTR _mat$[ebp+12]
	fld	DWORD PTR _mat$[ebp]
	fmul	DWORD PTR _mat$[ebp+20]
	fsubp	ST(1), ST(0)
	fstp	DWORD PTR _mat$[ebp+28]
	fld	DWORD PTR _mat$[ebp]
	fmul	DWORD PTR _mat$[ebp+16]
	fld	DWORD PTR _mat$[ebp+4]
	fmul	DWORD PTR _mat$[ebp+12]
	fsubp	ST(1), ST(0)
	fstp	DWORD PTR _mat$[ebp+32]

; 1821 : 
; 1822 : 		CreateObject(&pos, &mat, OBJECT_TYPE_SPLASH, &flag);

	lea	eax, DWORD PTR _flag$[ebp]
	push	eax
	push	34					; 00000022H
	lea	ecx, DWORD PTR _mat$[ebp]
	push	ecx
	lea	edx, DWORD PTR _pos$[ebp]
	push	edx
	call	?CreateObject@@YAPAUobject_def@@PAUVectorStruct@@PATMatrixUnion@@JPAJ@Z ; CreateObject
	add	esp, 16					; 00000010H

; 1823 : 
; 1824 : 		OBJ_FreeObject(obj);

	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	call	?OBJ_FreeObject@@YAJPAUobject_def@@@Z	; OBJ_FreeObject
	add	esp, 4
$L83733:

; 1825 : 	}
; 1826 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?WaterBombHandler@@YAXPAUobject_def@@@Z ENDP		; WaterBombHandler
_TEXT	ENDS
PUBLIC	__real@3dc00000
PUBLIC	__real@3ec00000
PUBLIC	__real@43ff8000
PUBLIC	__real@41180000
PUBLIC	__real@47100000
EXTRN	?TransposeRotVector@@YAXPATMatrixUnion@@PAUVectorStruct@@1@Z:NEAR ; TransposeRotVector
;	COMDAT __real@3dc00000
CONST	SEGMENT
__real@3dc00000 DD 03dc00000r			; 0.09375
CONST	ENDS
;	COMDAT __real@3ec00000
CONST	SEGMENT
__real@3ec00000 DD 03ec00000r			; 0.375
CONST	ENDS
;	COMDAT __real@43ff8000
CONST	SEGMENT
__real@43ff8000 DD 043ff8000r			; 511
CONST	ENDS
;	COMDAT __real@41180000
CONST	SEGMENT
__real@41180000 DD 041180000r			; 9.5
CONST	ENDS
;	COMDAT __real@47100000
CONST	SEGMENT
__real@47100000 DD 047100000r			; 36864
; Function compile flags: /Odt /ZI
CONST	ENDS
;	COMDAT ?ElectroPulseHandler@@YAXPAUobject_def@@@Z
_TEXT	SEGMENT
__temp$83830 = -140					; size = 4
__temp$83789 = -136					; size = 4
__temp$83784 = -132					; size = 4
_ndist$ = -128						; size = 4
_dist$ = -124						; size = 4
_v2$ = -120						; size = 12
_v1$ = -108						; size = 12
_rotpos$ = -96						; size = 12
_pos$ = -84						; size = 4
_nvec2$ = -80						; size = 4
_nvec1$ = -76						; size = 4
_vec$ = -72						; size = 12
_delta$ = -60						; size = 12
_player$ = -48						; size = 4
_evert$ = -44						; size = 4
_mv$ = -40						; size = 4
_mrgb$ = -36						; size = 4
_mp$ = -32						; size = 4
_model$ = -28						; size = 4
_dmodel$ = -24						; size = 4
_electro$ = -20						; size = 4
_flag$ = -16						; size = 4
_lmul$ = -12						; size = 4
_rgb$ = -8						; size = 4
_i$ = -4						; size = 4
_obj$ = 8						; size = 4
?ElectroPulseHandler@@YAXPAUobject_def@@@Z PROC NEAR	; ElectroPulseHandler, COMDAT

; 1833 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi

; 1834 : 	long i, rgb, lmul, flag;
; 1835 : 	ELECTROPULSE_OBJ *electro = (ELECTROPULSE_OBJ*)obj->Data;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+684]
	mov	DWORD PTR _electro$[ebp], ecx

; 1836 : 	MODEL *dmodel, *model = (MODEL*)&electro->Model;

	mov	eax, DWORD PTR _electro$[ebp]
	add	eax, 4
	mov	DWORD PTR _model$[ebp], eax

; 1837 : 	MODEL_POLY *mp;
; 1838 : 	POLY_RGB *mrgb;
; 1839 : 	MODEL_VERTEX *mv;
; 1840 : 	ELECTROPULSE_VERT *evert;
; 1841 : 	PLAYER *player;
; 1842 : 	VEC delta, vec, *nvec1, *nvec2, *pos, rotpos, v1, v2;
; 1843 : 	REAL dist, ndist;
; 1844 : 
; 1845 : // set vert UV's
; 1846 : 
; 1847 : 	mv = model->VertPtr;

	mov	eax, DWORD PTR _model$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	mov	DWORD PTR _mv$[ebp], ecx

; 1848 : 	evert = (ELECTROPULSE_VERT*)(model->VertPtr + model->VertNum);

	mov	eax, DWORD PTR _model$[ebp]
	movsx	ecx, WORD PTR [eax+34]
	imul	ecx, 88					; 00000058H
	mov	edx, DWORD PTR _model$[ebp]
	add	ecx, DWORD PTR [edx+52]
	mov	DWORD PTR _evert$[ebp], ecx

; 1849 : 
; 1850 : 	for (i = model->VertNum ; i ; i--, mv++, evert++)

	mov	eax, DWORD PTR _model$[ebp]
	movsx	ecx, WORD PTR [eax+34]
	mov	DWORD PTR _i$[ebp], ecx
	jmp	SHORT $L83778
$L83779:
	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	mov	ecx, DWORD PTR _mv$[ebp]
	add	ecx, 88					; 00000058H
	mov	DWORD PTR _mv$[ebp], ecx
	mov	edx, DWORD PTR _evert$[ebp]
	add	edx, 8
	mov	DWORD PTR _evert$[ebp], edx
$L83778:
	cmp	DWORD PTR _i$[ebp], 0
	je	SHORT $L83780

; 1851 : 	{
; 1852 : 		evert->Time += evert->TimeAdd * TimeStep;

	mov	eax, DWORD PTR _evert$[ebp]
	fld	DWORD PTR ?TimeStep@@3MA		; TimeStep
	fmul	DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _evert$[ebp]
	fadd	DWORD PTR [ecx]
	mov	edx, DWORD PTR _evert$[ebp]
	fstp	DWORD PTR [edx]

; 1853 : 
; 1854 : 		mv->tu = (float)sin(evert->Time) * (24.0f / 256.0f) + (96.0f / 256.0f);

	mov	eax, DWORD PTR _evert$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?sin@@YAMM@Z				; sin
	add	esp, 4
	fmul	DWORD PTR __real@3dc00000
	fadd	DWORD PTR __real@3ec00000
	mov	edx, DWORD PTR _mv$[ebp]
	fstp	DWORD PTR [edx+60]

; 1855 : 		mv->tv = (float)cos(evert->Time) * (24.0f / 256.0f) + (96.0f / 256.0f);

	mov	eax, DWORD PTR _evert$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?cos@@YAMM@Z				; cos
	add	esp, 4
	fmul	DWORD PTR __real@3dc00000
	fadd	DWORD PTR __real@3ec00000
	mov	edx, DWORD PTR _mv$[ebp]
	fstp	DWORD PTR [edx+64]

; 1856 : 	}

	jmp	SHORT $L83779
$L83780:

; 1857 : 
; 1858 : // copy vert UV' to poly UV's + set rgb's
; 1859 : 
; 1860 : 	if (electro->Age < 0.5f)

	mov	eax, DWORD PTR _electro$[ebp]
	fld	DWORD PTR [eax]
	fcomp	DWORD PTR __real@3f000000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L83783

; 1861 : 	{
; 1862 : 		FTOL(electro->Age * 511.0f, lmul);

	mov	eax, DWORD PTR _electro$[ebp]
	fld	DWORD PTR [eax]
	fmul	DWORD PTR __real@43ff8000
	fadd	DWORD PTR __real@4b000000
	fstp	DWORD PTR __temp$83784[ebp]
	mov	eax, DWORD PTR __temp$83784[ebp]
	and	eax, 16777215				; 00ffffffH
	mov	DWORD PTR _lmul$[ebp], eax

; 1863 : 	}
; 1864 : 	else if (electro->Age > 9.5f)

	jmp	SHORT $L83787
$L83783:
	mov	eax, DWORD PTR _electro$[ebp]
	fld	DWORD PTR [eax]
	fcomp	DWORD PTR __real@41180000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $L83788

; 1865 : 	{
; 1866 : 		FTOL((10.0f - electro->Age) * 511.0f, lmul);

	mov	eax, DWORD PTR _electro$[ebp]
	fld	DWORD PTR __real@41200000
	fsub	DWORD PTR [eax]
	fmul	DWORD PTR __real@43ff8000
	fadd	DWORD PTR __real@4b000000
	fstp	DWORD PTR __temp$83789[ebp]
	mov	eax, DWORD PTR __temp$83789[ebp]
	and	eax, 16777215				; 00ffffffH
	mov	DWORD PTR _lmul$[ebp], eax

; 1867 : 	}
; 1868 : 	else

	jmp	SHORT $L83787
$L83788:

; 1869 : 	{
; 1870 : 		lmul = 255;

	mov	DWORD PTR _lmul$[ebp], 255		; 000000ffH
$L83787:

; 1871 : 	}
; 1872 : 
; 1873 : 	rgb = lmul | lmul << 8 | lmul << 16;

	mov	eax, DWORD PTR _lmul$[ebp]
	shl	eax, 8
	or	eax, DWORD PTR _lmul$[ebp]
	mov	ecx, DWORD PTR _lmul$[ebp]
	shl	ecx, 16					; 00000010H
	or	eax, ecx
	mov	DWORD PTR _rgb$[ebp], eax

; 1874 : 
; 1875 : 	mp = model->PolyPtr;

	mov	eax, DWORD PTR _model$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	mov	DWORD PTR _mp$[ebp], ecx

; 1876 : 	mrgb = model->PolyRGB;

	mov	eax, DWORD PTR _model$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	mov	DWORD PTR _mrgb$[ebp], ecx

; 1877 : 
; 1878 : 	for (i = model->PolyNum ; i ; i--, mp++, mrgb++)

	mov	eax, DWORD PTR _model$[ebp]
	movsx	ecx, WORD PTR [eax+32]
	mov	DWORD PTR _i$[ebp], ecx
	jmp	SHORT $L83793
$L83794:
	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	mov	ecx, DWORD PTR _mp$[ebp]
	add	ecx, 52					; 00000034H
	mov	DWORD PTR _mp$[ebp], ecx
	mov	edx, DWORD PTR _mrgb$[ebp]
	add	edx, 16					; 00000010H
	mov	DWORD PTR _mrgb$[ebp], edx
$L83793:
	cmp	DWORD PTR _i$[ebp], 0
	je	$L83795

; 1879 : 	{
; 1880 : 		mp->tu0 = mp->v0->tu;

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _mp$[ebp]
	mov	eax, DWORD PTR [ecx+60]
	mov	DWORD PTR [edx+4], eax

; 1881 : 		mp->tv0 = mp->v0->tv;

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _mp$[ebp]
	mov	eax, DWORD PTR [ecx+64]
	mov	DWORD PTR [edx+8], eax

; 1882 : 
; 1883 : 		mp->tu1 = mp->v1->tu;

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	edx, DWORD PTR _mp$[ebp]
	mov	eax, DWORD PTR [ecx+60]
	mov	DWORD PTR [edx+12], eax

; 1884 : 		mp->tv1 = mp->v1->tv;

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	edx, DWORD PTR _mp$[ebp]
	mov	eax, DWORD PTR [ecx+64]
	mov	DWORD PTR [edx+16], eax

; 1885 : 
; 1886 : 		mp->tu2 = mp->v2->tu;

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	mov	edx, DWORD PTR _mp$[ebp]
	mov	eax, DWORD PTR [ecx+60]
	mov	DWORD PTR [edx+20], eax

; 1887 : 		mp->tv2 = mp->v2->tv;

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	mov	edx, DWORD PTR _mp$[ebp]
	mov	eax, DWORD PTR [ecx+64]
	mov	DWORD PTR [edx+24], eax

; 1888 : 
; 1889 : 		if (mp->Type & POLY_QUAD)

	mov	eax, DWORD PTR _mp$[ebp]
	movsx	ecx, WORD PTR [eax]
	and	ecx, 1
	je	SHORT $L83796

; 1890 : 		{
; 1891 : 			mp->tu3 = mp->v3->tu;

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	mov	edx, DWORD PTR _mp$[ebp]
	mov	eax, DWORD PTR [ecx+60]
	mov	DWORD PTR [edx+28], eax

; 1892 : 			mp->tv3 = mp->v3->tv;

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	mov	edx, DWORD PTR _mp$[ebp]
	mov	eax, DWORD PTR [ecx+64]
	mov	DWORD PTR [edx+32], eax
$L83796:

; 1893 : 		}	
; 1894 : 
; 1895 : 		*(long*)&mrgb->rgb[0] = rgb;

	mov	eax, DWORD PTR _mrgb$[ebp]
	mov	ecx, DWORD PTR _rgb$[ebp]
	mov	DWORD PTR [eax], ecx

; 1896 : 		*(long*)&mrgb->rgb[1] = rgb;

	mov	eax, DWORD PTR _mrgb$[ebp]
	mov	ecx, DWORD PTR _rgb$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 1897 : 		*(long*)&mrgb->rgb[2] = rgb;

	mov	eax, DWORD PTR _mrgb$[ebp]
	mov	ecx, DWORD PTR _rgb$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 1898 : 		*(long*)&mrgb->rgb[3] = rgb;

	mov	eax, DWORD PTR _mrgb$[ebp]
	mov	ecx, DWORD PTR _rgb$[ebp]
	mov	DWORD PTR [eax+12], ecx

; 1899 : 	}

	jmp	$L83794
$L83795:

; 1900 : 
; 1901 : // maintain light
; 1902 : 
; 1903 : 	if (obj->Light)

	mov	eax, DWORD PTR _obj$[ebp]
	cmp	DWORD PTR [eax+672], 0
	je	SHORT $L83801

; 1904 : 	{
; 1905 : 		CopyVec(&obj->player->car.Body->Centre.Pos, (VEC*)&obj->Light->x);

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+588]
	mov	edx, DWORD PTR [ecx+900]
	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+672]
	mov	edx, DWORD PTR [edx+20]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+588]
	mov	edx, DWORD PTR [ecx+900]
	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+672]
	mov	edx, DWORD PTR [edx+24]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+588]
	mov	edx, DWORD PTR [ecx+900]
	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+672]
	mov	edx, DWORD PTR [edx+28]
	mov	DWORD PTR [ecx+8], edx

; 1906 : 
; 1907 : 		obj->Light->b = lmul / 4 + (rand() & 31);

	mov	eax, DWORD PTR _lmul$[ebp]
	cdq
	and	edx, 3
	add	eax, edx
	mov	esi, eax
	sar	esi, 2
	call	_rand
	and	eax, 31					; 0000001fH
	add	esi, eax
	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+672]
	mov	DWORD PTR [ecx+96], esi
$L83801:

; 1908 : 	}
; 1909 : 
; 1910 : // maintain sfx
; 1911 : 
; 1912 : 	if (obj->Sfx3D)

	mov	eax, DWORD PTR _obj$[ebp]
	cmp	DWORD PTR [eax+680], 0
	je	SHORT $L83805

; 1913 : 	{
; 1914 : 		CopyVec(&obj->player->car.Body->Centre.Pos, &obj->Sfx3D->Pos);

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+588]
	mov	edx, DWORD PTR [ecx+900]
	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+680]
	mov	edx, DWORD PTR [edx+20]
	mov	DWORD PTR [ecx+28], edx
	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+588]
	mov	edx, DWORD PTR [ecx+900]
	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+680]
	mov	edx, DWORD PTR [edx+24]
	mov	DWORD PTR [ecx+32], edx
	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+588]
	mov	edx, DWORD PTR [ecx+900]
	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+680]
	mov	edx, DWORD PTR [edx+28]
	mov	DWORD PTR [ecx+36], edx

; 1915 : 
; 1916 : 		obj->Sfx3D->Vol = SFX_MAX_VOL * lmul / 255;

	mov	eax, DWORD PTR _lmul$[ebp]
	imul	eax, 127				; 0000007fH
	cdq
	mov	ecx, 255				; 000000ffH
	idiv	ecx
	mov	edx, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [edx+680]
	mov	DWORD PTR [ecx+8], eax
$L83805:

; 1917 : 	}
; 1918 : 
; 1919 : // kill?
; 1920 : 
; 1921 : 	electro->Age += TimeStep;

	mov	eax, DWORD PTR _electro$[ebp]
	fld	DWORD PTR ?TimeStep@@3MA		; TimeStep
	fadd	DWORD PTR [eax]
	mov	ecx, DWORD PTR _electro$[ebp]
	fstp	DWORD PTR [ecx]

; 1922 : 	if (electro->Age > 10.0f)

	mov	eax, DWORD PTR _electro$[ebp]
	fld	DWORD PTR [eax]
	fcomp	DWORD PTR __real@41200000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $L83806

; 1923 : 	{
; 1924 : 		OBJ_FreeObject(obj);

	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	call	?OBJ_FreeObject@@YAJPAUobject_def@@@Z	; OBJ_FreeObject
	add	esp, 4

; 1925 : 		return;

	jmp	$L83752
$L83806:

; 1926 : 	}
; 1927 : 
; 1928 : // check against other cars
; 1929 : 
; 1930 : 	electro->JumpFlag = 0;

	mov	eax, DWORD PTR _electro$[ebp]
	mov	DWORD PTR [eax+64], 0

; 1931 : 
; 1932 : 	pos = &obj->player->car.BodyWorldPos;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+588]
	add	ecx, 816				; 00000330H
	mov	DWORD PTR _pos$[ebp], ecx

; 1933 : 
; 1934 : 	for (player = PLR_PlayerHead ; player ; player = player->next)

	mov	eax, DWORD PTR ?PLR_PlayerHead@@3PAUPlayerStruct@@A ; PLR_PlayerHead
	mov	DWORD PTR _player$[ebp], eax
	jmp	SHORT $L83807
$L83808:
	mov	eax, DWORD PTR _player$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _player$[ebp], ecx
$L83807:
	cmp	DWORD PTR _player$[ebp], 0
	je	$L83752

; 1935 : 	{
; 1936 : 		 if (player == obj->player)

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR _player$[ebp]
	cmp	ecx, DWORD PTR [eax+588]
	jne	SHORT $L83810

; 1937 : 			continue;

	jmp	SHORT $L83808
$L83810:

; 1938 : 
; 1939 : 		SubVector(pos, &player->car.BodyWorldPos, &delta);

	mov	eax, DWORD PTR _pos$[ebp]
	mov	ecx, DWORD PTR _player$[ebp]
	fld	DWORD PTR [eax]
	fsub	DWORD PTR [ecx+816]
	fstp	DWORD PTR _delta$[ebp]
	mov	eax, DWORD PTR _pos$[ebp]
	mov	ecx, DWORD PTR _player$[ebp]
	fld	DWORD PTR [eax+4]
	fsub	DWORD PTR [ecx+820]
	fstp	DWORD PTR _delta$[ebp+4]
	mov	eax, DWORD PTR _pos$[ebp]
	mov	ecx, DWORD PTR _player$[ebp]
	fld	DWORD PTR [eax+8]
	fsub	DWORD PTR [ecx+824]
	fstp	DWORD PTR _delta$[ebp+8]

; 1940 : 		dist = delta.v[X] * delta.v[X] + delta.v[Y] * delta.v[Y] + delta.v[Z] * delta.v[Z];

	fld	DWORD PTR _delta$[ebp]
	fmul	DWORD PTR _delta$[ebp]
	fld	DWORD PTR _delta$[ebp+4]
	fmul	DWORD PTR _delta$[ebp+4]
	faddp	ST(1), ST(0)
	fld	DWORD PTR _delta$[ebp+8]
	fmul	DWORD PTR _delta$[ebp+8]
	faddp	ST(1), ST(0)
	fstp	DWORD PTR _dist$[ebp]

; 1941 : 		if (dist > (ELECTRO_RANGE * ELECTRO_RANGE))

	fld	DWORD PTR _dist$[ebp]
	fcomp	DWORD PTR __real@47100000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $L83811

; 1942 : 			continue;

	jmp	$L83808
$L83811:

; 1943 : 
; 1944 : // car in range
; 1945 : 
; 1946 : 		if (!player->car.PowerTimer)

	mov	eax, DWORD PTR _player$[ebp]
	fld	DWORD PTR __real@00000000
	fld	DWORD PTR [eax+3556]
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $L83812

; 1947 : 		{
; 1948 : 			flag = (long)player;

	mov	eax, DWORD PTR _player$[ebp]
	mov	DWORD PTR _flag$[ebp], eax

; 1949 : 	 		CreateObject(&player->car.Body->Centre.Pos, &player->car.Body->Centre.WMatrix, OBJECT_TYPE_ELECTROZAPPED, &flag);

	lea	eax, DWORD PTR _flag$[ebp]
	push	eax
	push	28					; 0000001cH
	mov	ecx, DWORD PTR _player$[ebp]
	mov	edx, DWORD PTR [ecx+900]
	add	edx, 100				; 00000064H
	push	edx
	mov	eax, DWORD PTR _player$[ebp]
	mov	ecx, DWORD PTR [eax+900]
	add	ecx, 20					; 00000014H
	push	ecx
	call	?CreateObject@@YAPAUobject_def@@PAUVectorStruct@@PATMatrixUnion@@JPAJ@Z ; CreateObject
	add	esp, 16					; 00000010H
$L83812:

; 1950 : 		}
; 1951 : 
; 1952 : 		player->car.PowerTimer = ELECTRO_KILL_TIME;

	mov	eax, DWORD PTR _player$[ebp]
	mov	DWORD PTR [eax+3556], 1077936128	; 40400000H

; 1953 : 
; 1954 : // find his nearest vert to me
; 1955 : 
; 1956 : 		SubVector(pos, &player->car.BodyWorldPos, &delta);

	mov	eax, DWORD PTR _pos$[ebp]
	mov	ecx, DWORD PTR _player$[ebp]
	fld	DWORD PTR [eax]
	fsub	DWORD PTR [ecx+816]
	fstp	DWORD PTR _delta$[ebp]
	mov	eax, DWORD PTR _pos$[ebp]
	mov	ecx, DWORD PTR _player$[ebp]
	fld	DWORD PTR [eax+4]
	fsub	DWORD PTR [ecx+820]
	fstp	DWORD PTR _delta$[ebp+4]
	mov	eax, DWORD PTR _pos$[ebp]
	mov	ecx, DWORD PTR _player$[ebp]
	fld	DWORD PTR [eax+8]
	fsub	DWORD PTR [ecx+824]
	fstp	DWORD PTR _delta$[ebp+8]

; 1957 : 		TransposeRotVector(&player->car.Body->Centre.WMatrix, &delta, &rotpos);

	lea	eax, DWORD PTR _rotpos$[ebp]
	push	eax
	lea	ecx, DWORD PTR _delta$[ebp]
	push	ecx
	mov	edx, DWORD PTR _player$[ebp]
	mov	eax, DWORD PTR [edx+900]
	add	eax, 100				; 00000064H
	push	eax
	call	?TransposeRotVector@@YAXPATMatrixUnion@@PAUVectorStruct@@1@Z ; TransposeRotVector
	add	esp, 12					; 0000000cH

; 1958 : 
; 1959 : 		dmodel = &player->car.Models->Body[0];

	mov	eax, DWORD PTR _player$[ebp]
	mov	ecx, DWORD PTR [eax+864]
	mov	edx, DWORD PTR [ecx+6064]
	mov	DWORD PTR _dmodel$[ebp], edx

; 1960 : 
; 1961 : 		ndist = 1000000;

	mov	DWORD PTR _ndist$[ebp], 1232348160	; 49742400H

; 1962 : 		mv = dmodel->VertPtr;

	mov	eax, DWORD PTR _dmodel$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	mov	DWORD PTR _mv$[ebp], ecx

; 1963 : 
; 1964 : 		for (i = dmodel->VertNum ; i ; i--, mv++)

	mov	eax, DWORD PTR _dmodel$[ebp]
	movsx	ecx, WORD PTR [eax+34]
	mov	DWORD PTR _i$[ebp], ecx
	jmp	SHORT $L83814
$L83815:
	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	mov	ecx, DWORD PTR _mv$[ebp]
	add	ecx, 88					; 00000058H
	mov	DWORD PTR _mv$[ebp], ecx
$L83814:
	cmp	DWORD PTR _i$[ebp], 0
	je	SHORT $L83816

; 1965 : 		{
; 1966 : 			SubVector((VEC*)&mv->x, &rotpos, &vec);

	mov	eax, DWORD PTR _mv$[ebp]
	fld	DWORD PTR [eax]
	fsub	DWORD PTR _rotpos$[ebp]
	fstp	DWORD PTR _vec$[ebp]
	mov	eax, DWORD PTR _mv$[ebp]
	fld	DWORD PTR [eax+4]
	fsub	DWORD PTR _rotpos$[ebp+4]
	fstp	DWORD PTR _vec$[ebp+4]
	mov	eax, DWORD PTR _mv$[ebp]
	fld	DWORD PTR [eax+8]
	fsub	DWORD PTR _rotpos$[ebp+8]
	fstp	DWORD PTR _vec$[ebp+8]

; 1967 : 			dist = vec.v[X] * vec.v[X] + vec.v[Y] * vec.v[Y] + vec.v[Z] * vec.v[Z];

	fld	DWORD PTR _vec$[ebp]
	fmul	DWORD PTR _vec$[ebp]
	fld	DWORD PTR _vec$[ebp+4]
	fmul	DWORD PTR _vec$[ebp+4]
	faddp	ST(1), ST(0)
	fld	DWORD PTR _vec$[ebp+8]
	fmul	DWORD PTR _vec$[ebp+8]
	faddp	ST(1), ST(0)
	fstp	DWORD PTR _dist$[ebp]

; 1968 : 			if (dist < ndist)

	fld	DWORD PTR _dist$[ebp]
	fcomp	DWORD PTR _ndist$[ebp]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L83820

; 1969 : 			{
; 1970 : 				ndist = dist;

	mov	eax, DWORD PTR _dist$[ebp]
	mov	DWORD PTR _ndist$[ebp], eax

; 1971 : 				nvec1 = (VEC*)&mv->x;

	mov	eax, DWORD PTR _mv$[ebp]
	mov	DWORD PTR _nvec1$[ebp], eax
$L83820:

; 1972 : 			}
; 1973 : 		}

	jmp	SHORT $L83815
$L83816:

; 1974 : 
; 1975 : // find my nearest vert to him
; 1976 : 
; 1977 : 		SubVector(&player->car.BodyWorldPos, pos, &delta);

	mov	eax, DWORD PTR _player$[ebp]
	mov	ecx, DWORD PTR _pos$[ebp]
	fld	DWORD PTR [eax+816]
	fsub	DWORD PTR [ecx]
	fstp	DWORD PTR _delta$[ebp]
	mov	eax, DWORD PTR _player$[ebp]
	mov	ecx, DWORD PTR _pos$[ebp]
	fld	DWORD PTR [eax+820]
	fsub	DWORD PTR [ecx+4]
	fstp	DWORD PTR _delta$[ebp+4]
	mov	eax, DWORD PTR _player$[ebp]
	mov	ecx, DWORD PTR _pos$[ebp]
	fld	DWORD PTR [eax+824]
	fsub	DWORD PTR [ecx+8]
	fstp	DWORD PTR _delta$[ebp+8]

; 1978 : 		TransposeRotVector(&obj->player->car.Body->Centre.WMatrix, &delta, &rotpos);

	lea	eax, DWORD PTR _rotpos$[ebp]
	push	eax
	lea	ecx, DWORD PTR _delta$[ebp]
	push	ecx
	mov	edx, DWORD PTR _obj$[ebp]
	mov	eax, DWORD PTR [edx+588]
	mov	ecx, DWORD PTR [eax+900]
	add	ecx, 100				; 00000064H
	push	ecx
	call	?TransposeRotVector@@YAXPATMatrixUnion@@PAUVectorStruct@@1@Z ; TransposeRotVector
	add	esp, 12					; 0000000cH

; 1979 : 
; 1980 : 		ndist = 1000000;

	mov	DWORD PTR _ndist$[ebp], 1232348160	; 49742400H

; 1981 : 		mv = model->VertPtr;

	mov	eax, DWORD PTR _model$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	mov	DWORD PTR _mv$[ebp], ecx

; 1982 : 
; 1983 : 		for (i = model->VertNum ; i ; i--, mv++)

	mov	eax, DWORD PTR _model$[ebp]
	movsx	ecx, WORD PTR [eax+34]
	mov	DWORD PTR _i$[ebp], ecx
	jmp	SHORT $L83822
$L83823:
	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	mov	ecx, DWORD PTR _mv$[ebp]
	add	ecx, 88					; 00000058H
	mov	DWORD PTR _mv$[ebp], ecx
$L83822:
	cmp	DWORD PTR _i$[ebp], 0
	je	SHORT $L83824

; 1984 : 		{
; 1985 : 			SubVector((VEC*)&mv->x, &rotpos, &vec);

	mov	eax, DWORD PTR _mv$[ebp]
	fld	DWORD PTR [eax]
	fsub	DWORD PTR _rotpos$[ebp]
	fstp	DWORD PTR _vec$[ebp]
	mov	eax, DWORD PTR _mv$[ebp]
	fld	DWORD PTR [eax+4]
	fsub	DWORD PTR _rotpos$[ebp+4]
	fstp	DWORD PTR _vec$[ebp+4]
	mov	eax, DWORD PTR _mv$[ebp]
	fld	DWORD PTR [eax+8]
	fsub	DWORD PTR _rotpos$[ebp+8]
	fstp	DWORD PTR _vec$[ebp+8]

; 1986 : 			dist = vec.v[X] * vec.v[X] + vec.v[Y] * vec.v[Y] + vec.v[Z] * vec.v[Z];

	fld	DWORD PTR _vec$[ebp]
	fmul	DWORD PTR _vec$[ebp]
	fld	DWORD PTR _vec$[ebp+4]
	fmul	DWORD PTR _vec$[ebp+4]
	faddp	ST(1), ST(0)
	fld	DWORD PTR _vec$[ebp+8]
	fmul	DWORD PTR _vec$[ebp+8]
	faddp	ST(1), ST(0)
	fstp	DWORD PTR _dist$[ebp]

; 1987 : 			if (dist < ndist)

	fld	DWORD PTR _dist$[ebp]
	fcomp	DWORD PTR _ndist$[ebp]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L83828

; 1988 : 			{
; 1989 : 				ndist = dist;

	mov	eax, DWORD PTR _dist$[ebp]
	mov	DWORD PTR _ndist$[ebp], eax

; 1990 : 				nvec2 = (VEC*)&mv->x;

	mov	eax, DWORD PTR _mv$[ebp]
	mov	DWORD PTR _nvec2$[ebp], eax
$L83828:

; 1991 : 			}
; 1992 : 		}

	jmp	SHORT $L83823
$L83824:

; 1993 : 
; 1994 : // save player + verts
; 1995 : 
; 1996 : 		electro->Player[electro->JumpFlag] = player;

	mov	eax, DWORD PTR _electro$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	mov	edx, DWORD PTR _electro$[ebp]
	mov	eax, DWORD PTR _player$[ebp]
	mov	DWORD PTR [edx+ecx*4+356], eax

; 1997 : 
; 1998 : 		CopyVec(nvec1, &electro->JumpPos1[electro->JumpFlag]);

	mov	eax, DWORD PTR _electro$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	imul	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR _electro$[ebp]
	mov	eax, DWORD PTR _nvec1$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx+ecx+68], eax
	mov	eax, DWORD PTR _electro$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	imul	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR _electro$[ebp]
	mov	eax, DWORD PTR _nvec1$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+ecx+72], eax
	mov	eax, DWORD PTR _electro$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	imul	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR _electro$[ebp]
	mov	eax, DWORD PTR _nvec1$[ebp]
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [edx+ecx+76], eax

; 1999 : 		CopyVec(nvec2, &electro->JumpPos2[electro->JumpFlag]);

	mov	eax, DWORD PTR _electro$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	imul	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR _electro$[ebp]
	mov	eax, DWORD PTR _nvec2$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx+ecx+212], eax
	mov	eax, DWORD PTR _electro$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	imul	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR _electro$[ebp]
	mov	eax, DWORD PTR _nvec2$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+ecx+216], eax
	mov	eax, DWORD PTR _electro$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	imul	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR _electro$[ebp]
	mov	eax, DWORD PTR _nvec2$[ebp]
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [edx+ecx+220], eax

; 2000 : 
; 2001 : // create sparks
; 2002 : 
; 2003 : 		RotTransVector(&player->car.Body->Centre.WMatrix, &player->car.BodyWorldPos, &electro->JumpPos1[electro->JumpFlag], &v1);

	lea	eax, DWORD PTR _v1$[ebp]
	push	eax
	mov	ecx, DWORD PTR _electro$[ebp]
	mov	edx, DWORD PTR [ecx+64]
	imul	edx, 12					; 0000000cH
	mov	eax, DWORD PTR _electro$[ebp]
	lea	ecx, DWORD PTR [eax+edx+68]
	push	ecx
	mov	edx, DWORD PTR _player$[ebp]
	add	edx, 816				; 00000330H
	push	edx
	mov	eax, DWORD PTR _player$[ebp]
	mov	ecx, DWORD PTR [eax+900]
	add	ecx, 100				; 00000064H
	push	ecx
	call	?RotTransVector@@YAXPATMatrixUnion@@PAUVectorStruct@@11@Z ; RotTransVector
	add	esp, 16					; 00000010H

; 2004 : 		RotTransVector(&obj->player->car.Body->Centre.WMatrix, &obj->player->car.BodyWorldPos, &electro->JumpPos2[electro->JumpFlag], &v2);

	lea	eax, DWORD PTR _v2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _electro$[ebp]
	mov	edx, DWORD PTR [ecx+64]
	imul	edx, 12					; 0000000cH
	mov	eax, DWORD PTR _electro$[ebp]
	lea	ecx, DWORD PTR [eax+edx+212]
	push	ecx
	mov	edx, DWORD PTR _obj$[ebp]
	mov	eax, DWORD PTR [edx+588]
	add	eax, 816				; 00000330H
	push	eax
	mov	ecx, DWORD PTR _obj$[ebp]
	mov	edx, DWORD PTR [ecx+588]
	mov	eax, DWORD PTR [edx+900]
	add	eax, 100				; 00000064H
	push	eax
	call	?RotTransVector@@YAXPATMatrixUnion@@PAUVectorStruct@@11@Z ; RotTransVector
	add	esp, 16					; 00000010H

; 2005 : 
; 2006 : 		FTOL(TimeStep * 50.0f + 1.0f, i);

	fld	DWORD PTR ?TimeStep@@3MA		; TimeStep
	fmul	DWORD PTR __real@42480000
	fadd	DWORD PTR __real@3f800000
	fadd	DWORD PTR __real@4b000000
	fstp	DWORD PTR __temp$83830[ebp]
	mov	eax, DWORD PTR __temp$83830[ebp]
	and	eax, 16777215				; 00ffffffH
	mov	DWORD PTR _i$[ebp], eax

; 2007 : 		for ( ; i ; i--)

	jmp	SHORT $L83833
$L83834:
	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$L83833:
	cmp	DWORD PTR _i$[ebp], 0
	je	SHORT $L83835

; 2008 : 		{
; 2009 : 			CreateSpark(SPARK_ELECTRIC, &v1, &ZeroVector, 200, 0);

	push	0
	push	0
	push	1128792064				; 43480000H
	push	OFFSET FLAT:?ZeroVector@@3UVectorStruct@@A ; ZeroVector
	lea	eax, DWORD PTR _v1$[ebp]
	push	eax
	push	7
	call	?CreateSpark@@YA_NW4SparkTypeEnum@@PAUVectorStruct@@1M_K@Z ; CreateSpark
	add	esp, 24					; 00000018H

; 2010 : 			CreateSpark(SPARK_ELECTRIC, &v2, &ZeroVector, 200, 0);

	push	0
	push	0
	push	1128792064				; 43480000H
	push	OFFSET FLAT:?ZeroVector@@3UVectorStruct@@A ; ZeroVector
	lea	eax, DWORD PTR _v2$[ebp]
	push	eax
	push	7
	call	?CreateSpark@@YA_NW4SparkTypeEnum@@PAUVectorStruct@@1M_K@Z ; CreateSpark
	add	esp, 24					; 00000018H

; 2011 : 		}

	jmp	SHORT $L83834
$L83835:

; 2012 : 
; 2013 : // inc jump flag
; 2014 : 	
; 2015 : 		electro->JumpFlag++;

	mov	eax, DWORD PTR _electro$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	add	ecx, 1
	mov	edx, DWORD PTR _electro$[ebp]
	mov	DWORD PTR [edx+64], ecx

; 2016 : 	}

	jmp	$L83808
$L83752:

; 2017 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?ElectroPulseHandler@@YAXPAUobject_def@@@Z ENDP		; ElectroPulseHandler
_TEXT	ENDS
PUBLIC	__real@44800000
EXTRN	?RotMatrixY@@YAXPATMatrixUnion@@M@Z:NEAR	; RotMatrixY
;	COMDAT __real@44800000
CONST	SEGMENT
__real@44800000 DD 044800000r			; 1024
; Function compile flags: /Odt /ZI
CONST	ENDS
;	COMDAT ?OilSlickHandler@@YAXPAUobject_def@@@Z
_TEXT	SEGMENT
tv376 = -208						; size = 4
_plane$ = -140						; size = 4
_time$ = -136						; size = 4
_mul$ = -132						; size = 4
_mat$ = -128						; size = 36
_v3$ = -92						; size = 12
_v2$ = -80						; size = 12
_v1$ = -68						; size = 12
_v0$ = -56						; size = 12
_vel$ = -44						; size = 12
_pos$ = -32						; size = 12
_vec$ = -20						; size = 12
_oil$ = -8						; size = 4
_i$ = -4						; size = 4
_obj$ = 8						; size = 4
?OilSlickHandler@@YAXPAUobject_def@@@Z PROC NEAR	; OilSlickHandler, COMDAT

; 2025 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi

; 2026 : 	long i;
; 2027 : 	OILSLICK_OBJ *oil = (OILSLICK_OBJ*)obj->Data;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+684]
	mov	DWORD PTR _oil$[ebp], ecx

; 2028 : 	VEC vec, pos, vel, v0, v1, v2, v3;
; 2029 : 	MAT mat;
; 2030 : 	REAL mul, time;
; 2031 : 	PLANE *plane;
; 2032 : 
; 2033 : // falling
; 2034 : 
; 2035 : 	if (!oil->Mode)

	mov	eax, DWORD PTR _oil$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	$L83853

; 2036 : 	{
; 2037 : 
; 2038 : // update time
; 2039 : 
; 2040 : 		oil->Age += TimeStep;

	mov	eax, DWORD PTR _oil$[ebp]
	fld	DWORD PTR ?TimeStep@@3MA		; TimeStep
	fadd	DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _oil$[ebp]
	fstp	DWORD PTR [ecx+4]

; 2041 : 
; 2042 : // add vel
; 2043 : 
; 2044 : 		obj->body.Centre.Vel.v[Y] += OILSLICK_GRAV * TimeStep;

	fld	DWORD PTR __real@45000000
	fmul	DWORD PTR ?TimeStep@@3MA		; TimeStep
	mov	eax, DWORD PTR _obj$[ebp]
	fadd	DWORD PTR [eax+36]
	mov	ecx, DWORD PTR _obj$[ebp]
	fstp	DWORD PTR [ecx+36]

; 2045 : 		obj->body.Centre.Pos.v[Y] += obj->body.Centre.Vel.v[Y] * TimeStep;

	mov	eax, DWORD PTR _obj$[ebp]
	fld	DWORD PTR ?TimeStep@@3MA		; TimeStep
	fmul	DWORD PTR [eax+36]
	mov	ecx, DWORD PTR _obj$[ebp]
	fadd	DWORD PTR [ecx+24]
	mov	edx, DWORD PTR _obj$[ebp]
	fstp	DWORD PTR [edx+24]

; 2046 : 		if (obj->body.Centre.Pos.v[Y] >= oil->LandHeight)

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR _oil$[ebp]
	fld	DWORD PTR [eax+24]
	fcomp	DWORD PTR [ecx+8]
	fnstsw	ax
	test	ah, 1
	jne	$L83853

; 2047 : 		{
; 2048 : 			oil->Mode = 1;

	mov	eax, DWORD PTR _oil$[ebp]
	mov	DWORD PTR [eax], 1

; 2049 : 			oil->Age = 0.0f;

	mov	eax, DWORD PTR _oil$[ebp]
	mov	DWORD PTR [eax+4], 0

; 2050 : 			oil->Size = OILSLICK_MIN_SIZE;

	mov	eax, DWORD PTR _oil$[ebp]
	mov	DWORD PTR [eax+12], 1107296256		; 42000000H

; 2051 : 
; 2052 : 			RotMatrixY(&mat, frand(1.0f));

	call	_rand
	mov	DWORD PTR tv376[ebp], eax
	fild	DWORD PTR tv376[ebp]
	fdiv	DWORD PTR __real@46fffe00
	fmul	DWORD PTR __real@3f800000
	push	ecx
	fstp	DWORD PTR [esp]
	lea	eax, DWORD PTR _mat$[ebp]
	push	eax
	call	?RotMatrixY@@YAXPATMatrixUnion@@M@Z	; RotMatrixY
	add	esp, 8

; 2053 : 
; 2054 : 			SetVector(&v0, -1.0f, 0, 1.0f);

	mov	DWORD PTR _v0$[ebp], -1082130432	; bf800000H
	mov	DWORD PTR _v0$[ebp+4], 0
	mov	DWORD PTR _v0$[ebp+8], 1065353216	; 3f800000H

; 2055 : 			SetVector(&v1, 1.0f, 0, 1.0f);

	mov	DWORD PTR _v1$[ebp], 1065353216		; 3f800000H
	mov	DWORD PTR _v1$[ebp+4], 0
	mov	DWORD PTR _v1$[ebp+8], 1065353216	; 3f800000H

; 2056 : 			SetVector(&v2, 1.0f, 0, -1.0f);

	mov	DWORD PTR _v2$[ebp], 1065353216		; 3f800000H
	mov	DWORD PTR _v2$[ebp+4], 0
	mov	DWORD PTR _v2$[ebp+8], -1082130432	; bf800000H

; 2057 : 			SetVector(&v3, -1.0f, 0, -1.0f);

	mov	DWORD PTR _v3$[ebp], -1082130432	; bf800000H
	mov	DWORD PTR _v3$[ebp+4], 0
	mov	DWORD PTR _v3$[ebp+8], -1082130432	; bf800000H

; 2058 : 
; 2059 : 			RotVector(&mat, &v0, &oil->Vel[0]);

	mov	eax, DWORD PTR _oil$[ebp]
	add	eax, 76					; 0000004cH
	push	eax
	lea	ecx, DWORD PTR _v0$[ebp]
	push	ecx
	lea	edx, DWORD PTR _mat$[ebp]
	push	edx
	call	?RotVector@@YAXPATMatrixUnion@@PAUVectorStruct@@1@Z ; RotVector
	add	esp, 12					; 0000000cH

; 2060 : 			RotVector(&mat, &v1, &oil->Vel[1]);

	mov	eax, DWORD PTR _oil$[ebp]
	add	eax, 88					; 00000058H
	push	eax
	lea	ecx, DWORD PTR _v1$[ebp]
	push	ecx
	lea	edx, DWORD PTR _mat$[ebp]
	push	edx
	call	?RotVector@@YAXPATMatrixUnion@@PAUVectorStruct@@1@Z ; RotVector
	add	esp, 12					; 0000000cH

; 2061 : 			RotVector(&mat, &v2, &oil->Vel[2]);

	mov	eax, DWORD PTR _oil$[ebp]
	add	eax, 100				; 00000064H
	push	eax
	lea	ecx, DWORD PTR _v2$[ebp]
	push	ecx
	lea	edx, DWORD PTR _mat$[ebp]
	push	edx
	call	?RotVector@@YAXPATMatrixUnion@@PAUVectorStruct@@1@Z ; RotVector
	add	esp, 12					; 0000000cH

; 2062 : 			RotVector(&mat, &v3, &oil->Vel[3]);

	mov	eax, DWORD PTR _oil$[ebp]
	add	eax, 112				; 00000070H
	push	eax
	lea	ecx, DWORD PTR _v3$[ebp]
	push	ecx
	lea	edx, DWORD PTR _mat$[ebp]
	push	edx
	call	?RotVector@@YAXPATMatrixUnion@@PAUVectorStruct@@1@Z ; RotVector
	add	esp, 12					; 0000000cH

; 2063 : 
; 2064 : 			SetVector(&pos, obj->body.Centre.Pos.v[X], oil->LandHeight - 32.0f, obj->body.Centre.Pos.v[Z]);

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR _pos$[ebp], ecx
	mov	eax, DWORD PTR _oil$[ebp]
	fld	DWORD PTR [eax+8]
	fsub	DWORD PTR __real@42000000
	fstp	DWORD PTR _pos$[ebp+4]
	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR _pos$[ebp+8], ecx

; 2065 : 
; 2066 : 			SetVector(&v0, -OILSLICK_MIN_SIZE, 0, OILSLICK_MIN_SIZE);

	mov	DWORD PTR _v0$[ebp], -1040187392	; c2000000H
	mov	DWORD PTR _v0$[ebp+4], 0
	mov	DWORD PTR _v0$[ebp+8], 1107296256	; 42000000H

; 2067 : 			SetVector(&v1, OILSLICK_MIN_SIZE, 0, OILSLICK_MIN_SIZE);

	mov	DWORD PTR _v1$[ebp], 1107296256		; 42000000H
	mov	DWORD PTR _v1$[ebp+4], 0
	mov	DWORD PTR _v1$[ebp+8], 1107296256	; 42000000H

; 2068 : 			SetVector(&v2, OILSLICK_MIN_SIZE, 0, -OILSLICK_MIN_SIZE);

	mov	DWORD PTR _v2$[ebp], 1107296256		; 42000000H
	mov	DWORD PTR _v2$[ebp+4], 0
	mov	DWORD PTR _v2$[ebp+8], -1040187392	; c2000000H

; 2069 : 			SetVector(&v3, -OILSLICK_MIN_SIZE, 0, -OILSLICK_MIN_SIZE);

	mov	DWORD PTR _v3$[ebp], -1040187392	; c2000000H
	mov	DWORD PTR _v3$[ebp+4], 0
	mov	DWORD PTR _v3$[ebp+8], -1040187392	; c2000000H

; 2070 : 
; 2071 : 			RotTransVector(&mat, &pos, &v0, &oil->Pos[0]);

	mov	eax, DWORD PTR _oil$[ebp]
	add	eax, 28					; 0000001cH
	push	eax
	lea	ecx, DWORD PTR _v0$[ebp]
	push	ecx
	lea	edx, DWORD PTR _pos$[ebp]
	push	edx
	lea	eax, DWORD PTR _mat$[ebp]
	push	eax
	call	?RotTransVector@@YAXPATMatrixUnion@@PAUVectorStruct@@11@Z ; RotTransVector
	add	esp, 16					; 00000010H

; 2072 : 			RotTransVector(&mat, &pos, &v1, &oil->Pos[1]);

	mov	eax, DWORD PTR _oil$[ebp]
	add	eax, 40					; 00000028H
	push	eax
	lea	ecx, DWORD PTR _v1$[ebp]
	push	ecx
	lea	edx, DWORD PTR _pos$[ebp]
	push	edx
	lea	eax, DWORD PTR _mat$[ebp]
	push	eax
	call	?RotTransVector@@YAXPATMatrixUnion@@PAUVectorStruct@@11@Z ; RotTransVector
	add	esp, 16					; 00000010H

; 2073 : 			RotTransVector(&mat, &pos, &v2, &oil->Pos[2]);

	mov	eax, DWORD PTR _oil$[ebp]
	add	eax, 52					; 00000034H
	push	eax
	lea	ecx, DWORD PTR _v2$[ebp]
	push	ecx
	lea	edx, DWORD PTR _pos$[ebp]
	push	edx
	lea	eax, DWORD PTR _mat$[ebp]
	push	eax
	call	?RotTransVector@@YAXPATMatrixUnion@@PAUVectorStruct@@11@Z ; RotTransVector
	add	esp, 16					; 00000010H

; 2074 : 			RotTransVector(&mat, &pos, &v3, &oil->Pos[3]);

	mov	eax, DWORD PTR _oil$[ebp]
	add	eax, 64					; 00000040H
	push	eax
	lea	ecx, DWORD PTR _v3$[ebp]
	push	ecx
	lea	edx, DWORD PTR _pos$[ebp]
	push	edx
	lea	eax, DWORD PTR _mat$[ebp]
	push	eax
	call	?RotTransVector@@YAXPATMatrixUnion@@PAUVectorStruct@@11@Z ; RotTransVector
	add	esp, 16					; 00000010H
$L83853:

; 2075 : 		}
; 2076 : 	}
; 2077 : 
; 2078 : // on floor
; 2079 : 
; 2080 : 	if (oil->Mode)

	mov	eax, DWORD PTR _oil$[ebp]
	cmp	DWORD PTR [eax], 0
	je	$L83838

; 2081 : 	{
; 2082 : 
; 2083 : // expand
; 2084 : 
; 2085 : 		mul = (oil->MaxSize - oil->Size) * TimeStep;

	mov	eax, DWORD PTR _oil$[ebp]
	mov	ecx, DWORD PTR _oil$[ebp]
	fld	DWORD PTR [eax+16]
	fsub	DWORD PTR [ecx+12]
	fmul	DWORD PTR ?TimeStep@@3MA		; TimeStep
	fstp	DWORD PTR _mul$[ebp]

; 2086 : 		oil->Size += mul;

	mov	eax, DWORD PTR _oil$[ebp]
	fld	DWORD PTR _mul$[ebp]
	fadd	DWORD PTR [eax+12]
	mov	ecx, DWORD PTR _oil$[ebp]
	fstp	DWORD PTR [ecx+12]

; 2087 : 
; 2088 : 		for (i = 0 ; i < 4 ; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $L83857
$L83858:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$L83857:
	cmp	DWORD PTR _i$[ebp], 4
	jge	$L83859

; 2089 : 		{
; 2090 : 			CopyVec(&oil->Vel[i], &vel);

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _oil$[ebp]
	mov	edx, DWORD PTR [ecx+eax+76]
	mov	DWORD PTR _vel$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _oil$[ebp]
	mov	edx, DWORD PTR [ecx+eax+80]
	mov	DWORD PTR _vel$[ebp+4], edx
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _oil$[ebp]
	mov	edx, DWORD PTR [ecx+eax+84]
	mov	DWORD PTR _vel$[ebp+8], edx

; 2091 : 
; 2092 : 			SetVector(&vec, oil->Pos[i].v[X], oil->Pos[i].v[Y] + 1024, oil->Pos[i].v[Z]);

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _oil$[ebp]
	mov	edx, DWORD PTR [ecx+eax+28]
	mov	DWORD PTR _vec$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _oil$[ebp]
	fld	DWORD PTR [ecx+eax+32]
	fadd	DWORD PTR __real@44800000
	fstp	DWORD PTR _vec$[ebp+4]
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _oil$[ebp]
	mov	edx, DWORD PTR [ecx+eax+36]
	mov	DWORD PTR _vec$[ebp+8], edx

; 2093 : 			LineOfSightDist(&oil->Pos[i], &vec, &time, &plane);

	lea	eax, DWORD PTR _plane$[ebp]
	push	eax
	lea	ecx, DWORD PTR _time$[ebp]
	push	ecx
	lea	edx, DWORD PTR _vec$[ebp]
	push	edx
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _oil$[ebp]
	lea	edx, DWORD PTR [ecx+eax+28]
	push	edx
	call	?LineOfSightDist@@YA_NPAUVectorStruct@@0PAMPAPAUPlaneStruct@@@Z ; LineOfSightDist
	add	esp, 16					; 00000010H

; 2094 : 			if (time > 0.0f && time < 1.0f)

	fld	DWORD PTR _time$[ebp]
	fcomp	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $L83860
	fld	DWORD PTR _time$[ebp]
	fcomp	DWORD PTR __real@3f800000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L83860

; 2095 : 			{
; 2096 : 				vel.v[X] += plane->v[X] * 2.0f;

	mov	eax, DWORD PTR _plane$[ebp]
	fld	DWORD PTR [eax]
	fadd	ST(0), ST(0)
	fadd	DWORD PTR _vel$[ebp]
	fstp	DWORD PTR _vel$[ebp]

; 2097 : 				vel.v[Z] += plane->v[Z] * 2.0f;

	mov	eax, DWORD PTR _plane$[ebp]
	fld	DWORD PTR [eax+8]
	fadd	ST(0), ST(0)
	fadd	DWORD PTR _vel$[ebp+8]
	fstp	DWORD PTR _vel$[ebp+8]
$L83860:

; 2098 : 			}
; 2099 : 
; 2100 : 			VecPlusEqScalarVec(&oil->Pos[i], mul, &vel);

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 12					; 0000000cH
	fld	DWORD PTR _mul$[ebp]
	fmul	DWORD PTR _vel$[ebp]
	mov	ecx, DWORD PTR _oil$[ebp]
	fadd	DWORD PTR [ecx+eax+28]
	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 12					; 0000000cH
	mov	eax, DWORD PTR _oil$[ebp]
	fstp	DWORD PTR [eax+edx+28]
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 12					; 0000000cH
	fld	DWORD PTR _mul$[ebp]
	fmul	DWORD PTR _vel$[ebp+4]
	mov	ecx, DWORD PTR _oil$[ebp]
	fadd	DWORD PTR [ecx+eax+32]
	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 12					; 0000000cH
	mov	eax, DWORD PTR _oil$[ebp]
	fstp	DWORD PTR [eax+edx+32]
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 12					; 0000000cH
	fld	DWORD PTR _mul$[ebp]
	fmul	DWORD PTR _vel$[ebp+8]
	mov	ecx, DWORD PTR _oil$[ebp]
	fadd	DWORD PTR [ecx+eax+36]
	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 12					; 0000000cH
	mov	eax, DWORD PTR _oil$[ebp]
	fstp	DWORD PTR [eax+edx+36]

; 2101 : 		}

	jmp	$L83858
$L83859:

; 2102 : 
; 2103 : // add to oilslick list
; 2104 : 
; 2105 : 		if (OilSlickCount < OILSLICK_LIST_MAX)

	cmp	DWORD PTR ?OilSlickCount@@3JA, 64	; OilSlickCount, 00000040H
	jge	$L83861

; 2106 : 		{
; 2107 : 			OilSlickList[OilSlickCount].X = obj->body.Centre.Pos.v[X];

	mov	eax, DWORD PTR ?OilSlickCount@@3JA	; OilSlickCount
	imul	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _obj$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR ?OilSlickList@@3PAUOILSLICK_LIST@@A[eax], edx

; 2108 : 			OilSlickList[OilSlickCount].Z = obj->body.Centre.Pos.v[Z];

	mov	eax, DWORD PTR ?OilSlickCount@@3JA	; OilSlickCount
	imul	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _obj$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR ?OilSlickList@@3PAUOILSLICK_LIST@@A[eax+4], edx

; 2109 : 			OilSlickList[OilSlickCount].Radius = oil->Size;

	mov	eax, DWORD PTR ?OilSlickCount@@3JA	; OilSlickCount
	imul	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _oil$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR ?OilSlickList@@3PAUOILSLICK_LIST@@A[eax+8], edx

; 2110 : 			OilSlickList[OilSlickCount].SquaredRadius = oil->Size * oil->Size;

	mov	eax, DWORD PTR _oil$[ebp]
	mov	ecx, DWORD PTR _oil$[ebp]
	fld	DWORD PTR [eax+12]
	fmul	DWORD PTR [ecx+12]
	mov	edx, DWORD PTR ?OilSlickCount@@3JA	; OilSlickCount
	imul	edx, 24					; 00000018H
	fstp	DWORD PTR ?OilSlickList@@3PAUOILSLICK_LIST@@A[edx+12]

; 2111 : 
; 2112 : 			OilSlickList[OilSlickCount].Ymin = oil->Ymin;

	mov	eax, DWORD PTR ?OilSlickCount@@3JA	; OilSlickCount
	imul	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _oil$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR ?OilSlickList@@3PAUOILSLICK_LIST@@A[eax+16], edx

; 2113 : 			OilSlickList[OilSlickCount].Ymax = oil->Ymax;

	mov	eax, DWORD PTR ?OilSlickCount@@3JA	; OilSlickCount
	imul	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _oil$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR ?OilSlickList@@3PAUOILSLICK_LIST@@A[eax+20], edx

; 2114 : 
; 2115 : 			OilSlickCount++;

	mov	eax, DWORD PTR ?OilSlickCount@@3JA	; OilSlickCount
	add	eax, 1
	mov	DWORD PTR ?OilSlickCount@@3JA, eax	; OilSlickCount
$L83861:

; 2116 : 		}
; 2117 : 
; 2118 : // kill?
; 2119 : 
; 2120 : 		oil->Age += TimeStep;

	mov	eax, DWORD PTR _oil$[ebp]
	fld	DWORD PTR ?TimeStep@@3MA		; TimeStep
	fadd	DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _oil$[ebp]
	fstp	DWORD PTR [ecx+4]

; 2121 : 		if (oil->Age > 30.0f)

	mov	eax, DWORD PTR _oil$[ebp]
	fld	DWORD PTR [eax+4]
	fcomp	DWORD PTR __real@41f00000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $L83838

; 2122 : 		{
; 2123 : 			OBJ_FreeObject(obj);

	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	call	?OBJ_FreeObject@@YAJPAUobject_def@@@Z	; OBJ_FreeObject
	add	esp, 4
$L83838:

; 2124 : 		}
; 2125 : 	}
; 2126 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?OilSlickHandler@@YAXPAUobject_def@@@Z ENDP		; OilSlickHandler
_TEXT	ENDS
PUBLIC	__real@41800000
PUBLIC	__real@42c00000
;	COMDAT __real@41800000
CONST	SEGMENT
__real@41800000 DD 041800000r			; 16
CONST	ENDS
;	COMDAT __real@42c00000
CONST	SEGMENT
__real@42c00000 DD 042c00000r			; 96
; Function compile flags: /Odt /ZI
CONST	ENDS
;	COMDAT ?OilSlickDropperHandler@@YAXPAUobject_def@@@Z
_TEXT	SEGMENT
__temp$83878 = -40					; size = 4
_car$ = -36						; size = 4
_delta$ = -32						; size = 12
_mul$ = -20						; size = 4
_len$ = -16						; size = 4
_flags$ = -12						; size = 8
_dropper$ = -4						; size = 4
_obj$ = 8						; size = 4
?OilSlickDropperHandler@@YAXPAUobject_def@@@Z PROC NEAR	; OilSlickDropperHandler, COMDAT

; 2133 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 104				; 00000068H
	push	ebx
	push	esi
	push	edi

; 2134 : 	OILSLICK_DROPPER_OBJ *dropper = (OILSLICK_DROPPER_OBJ*)obj->Data;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+684]
	mov	DWORD PTR _dropper$[ebp], ecx

; 2135 : 	long flags[2];
; 2136 : 	REAL len, mul;
; 2137 : 	VEC delta;
; 2138 : 	CAR *car;
; 2139 : 
; 2140 : // create new oil slick?
; 2141 : 
; 2142 : 	car = &obj->player->car;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+588]
	add	ecx, 44					; 0000002cH
	mov	DWORD PTR _car$[ebp], ecx

; 2143 : 
; 2144 : 	if (!dropper->Count)

	mov	eax, DWORD PTR _dropper$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $L83873

; 2145 : 	{
; 2146 : 		len = DROPPER_GAP;

	mov	DWORD PTR _len$[ebp], 1115684864	; 42800000H

; 2147 : 	}
; 2148 : 	else

	jmp	SHORT $L83874
$L83873:

; 2149 : 	{
; 2150 : 		SubVector(&car->Body->Centre.Pos, &dropper->LastPos, &delta);

	mov	eax, DWORD PTR _car$[ebp]
	mov	ecx, DWORD PTR [eax+856]
	mov	edx, DWORD PTR _dropper$[ebp]
	fld	DWORD PTR [ecx+20]
	fsub	DWORD PTR [edx+8]
	fstp	DWORD PTR _delta$[ebp]
	mov	eax, DWORD PTR _car$[ebp]
	mov	ecx, DWORD PTR [eax+856]
	mov	edx, DWORD PTR _dropper$[ebp]
	fld	DWORD PTR [ecx+24]
	fsub	DWORD PTR [edx+12]
	fstp	DWORD PTR _delta$[ebp+4]
	mov	eax, DWORD PTR _car$[ebp]
	mov	ecx, DWORD PTR [eax+856]
	mov	edx, DWORD PTR _dropper$[ebp]
	fld	DWORD PTR [ecx+28]
	fsub	DWORD PTR [edx+16]
	fstp	DWORD PTR _delta$[ebp+8]

; 2151 : 		len = Length(&delta);

	fld	DWORD PTR _delta$[ebp]
	fmul	DWORD PTR _delta$[ebp]
	fld	DWORD PTR _delta$[ebp+4]
	fmul	DWORD PTR _delta$[ebp+4]
	faddp	ST(1), ST(0)
	fld	DWORD PTR _delta$[ebp+8]
	fmul	DWORD PTR _delta$[ebp+8]
	faddp	ST(1), ST(0)
	push	ecx
	fstp	DWORD PTR [esp]
	call	?sqrt@@YAMM@Z				; sqrt
	add	esp, 4
	fstp	DWORD PTR _len$[ebp]
$L83874:

; 2152 : 	}
; 2153 : 
; 2154 : 	if (len >= DROPPER_GAP)

	fld	DWORD PTR _len$[ebp]
	fcomp	DWORD PTR __real@42800000
	fnstsw	ax
	test	ah, 1
	jne	$L83876

; 2155 : 	{
; 2156 : 
; 2157 : // yep
; 2158 : 
; 2159 : 		mul = DROPPER_GAP / len;

	fld	DWORD PTR __real@42800000
	fdiv	DWORD PTR _len$[ebp]
	fstp	DWORD PTR _mul$[ebp]

; 2160 : 		VecPlusScalarVec(&dropper->LastPos, mul, &delta, &dropper->LastPos);

	fld	DWORD PTR _mul$[ebp]
	fmul	DWORD PTR _delta$[ebp]
	mov	eax, DWORD PTR _dropper$[ebp]
	fadd	DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _dropper$[ebp]
	fstp	DWORD PTR [ecx+8]
	fld	DWORD PTR _mul$[ebp]
	fmul	DWORD PTR _delta$[ebp+4]
	mov	eax, DWORD PTR _dropper$[ebp]
	fadd	DWORD PTR [eax+12]
	mov	ecx, DWORD PTR _dropper$[ebp]
	fstp	DWORD PTR [ecx+12]
	fld	DWORD PTR _mul$[ebp]
	fmul	DWORD PTR _delta$[ebp+8]
	mov	eax, DWORD PTR _dropper$[ebp]
	fadd	DWORD PTR [eax+16]
	mov	ecx, DWORD PTR _dropper$[ebp]
	fstp	DWORD PTR [ecx+16]

; 2161 : 
; 2162 : 		flags[0] = (long)obj->player;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+588]
	mov	DWORD PTR _flags$[ebp], ecx

; 2163 : 		FTOL(OILSLICK_MAX_SIZE - (float)dropper->Count * 16.0f, flags[1]);

	mov	eax, DWORD PTR _dropper$[ebp]
	fild	DWORD PTR [eax]
	fmul	DWORD PTR __real@41800000
	fsubr	DWORD PTR __real@42c00000
	fadd	DWORD PTR __real@4b000000
	fstp	DWORD PTR __temp$83878[ebp]
	mov	eax, DWORD PTR __temp$83878[ebp]
	and	eax, 16777215				; 00ffffffH
	mov	DWORD PTR _flags$[ebp+4], eax

; 2164 : 
; 2165 : 		CreateObject(&dropper->LastPos, &car->Body->Centre.WMatrix, OBJECT_TYPE_OILSLICK, flags);

	lea	eax, DWORD PTR _flags$[ebp]
	push	eax
	push	23					; 00000017H
	mov	ecx, DWORD PTR _car$[ebp]
	mov	edx, DWORD PTR [ecx+856]
	add	edx, 100				; 00000064H
	push	edx
	mov	eax, DWORD PTR _dropper$[ebp]
	add	eax, 8
	push	eax
	call	?CreateObject@@YAPAUobject_def@@PAUVectorStruct@@PATMatrixUnion@@JPAJ@Z ; CreateObject
	add	esp, 16					; 00000010H

; 2166 : 
; 2167 : 		dropper->Count++;

	mov	eax, DWORD PTR _dropper$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR _dropper$[ebp]
	mov	DWORD PTR [edx], ecx
$L83876:

; 2168 : 	}
; 2169 : 
; 2170 : 
; 2171 : // kill dropper?
; 2172 : 
; 2173 : 	dropper->Age += TimeStep;

	mov	eax, DWORD PTR _dropper$[ebp]
	fld	DWORD PTR ?TimeStep@@3MA		; TimeStep
	fadd	DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _dropper$[ebp]
	fstp	DWORD PTR [ecx+4]

; 2174 : 	if (dropper->Age > 1.0f || dropper->Count >= 3)

	mov	eax, DWORD PTR _dropper$[ebp]
	fld	DWORD PTR [eax+4]
	fcomp	DWORD PTR __real@3f800000
	fnstsw	ax
	test	ah, 65					; 00000041H
	je	SHORT $L83883
	mov	eax, DWORD PTR _dropper$[ebp]
	cmp	DWORD PTR [eax], 3
	jl	SHORT $L83865
$L83883:

; 2175 : 	{
; 2176 : 		OBJ_FreeObject(obj);

	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	call	?OBJ_FreeObject@@YAJPAUobject_def@@@Z	; OBJ_FreeObject
	add	esp, 4
$L83865:

; 2177 : 	}
; 2178 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?OilSlickDropperHandler@@YAXPAUobject_def@@@Z ENDP	; OilSlickDropperHandler
_TEXT	ENDS
PUBLIC	__real@40800000
PUBLIC	__real@41e80000
;	COMDAT __real@40800000
CONST	SEGMENT
__real@40800000 DD 040800000r			; 4
CONST	ENDS
;	COMDAT __real@41e80000
CONST	SEGMENT
__real@41e80000 DD 041e80000r			; 29
; Function compile flags: /Odt /ZI
CONST	ENDS
;	COMDAT ?ChromeBallHandler@@YAXPAUobject_def@@@Z
_TEXT	SEGMENT
_freq$83903 = -20					; size = 4
_vol$83902 = -16					; size = 4
__temp$83895 = -12					; size = 4
_ball$ = -8						; size = 4
_vel$ = -4						; size = 4
_obj$ = 8						; size = 4
?ChromeBallHandler@@YAXPAUobject_def@@@Z PROC NEAR	; ChromeBallHandler, COMDAT

; 2186 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi

; 2187 : 	long vel;
; 2188 : 	CHROMEBALL_OBJ *ball = (CHROMEBALL_OBJ*)obj->Data;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+684]
	mov	DWORD PTR _ball$[ebp], ecx

; 2189 : 
; 2190 : // inc age
; 2191 : 
; 2192 : 	ball->Age += TimeStep;

	mov	eax, DWORD PTR _ball$[ebp]
	fld	DWORD PTR ?TimeStep@@3MA		; TimeStep
	fadd	DWORD PTR [eax]
	mov	ecx, DWORD PTR _ball$[ebp]
	fstp	DWORD PTR [ecx]

; 2193 : 
; 2194 : // set radius
; 2195 : 
; 2196 : 	if (ball->Age < 0.5f)

	mov	eax, DWORD PTR _ball$[ebp]
	fld	DWORD PTR [eax]
	fcomp	DWORD PTR __real@3f000000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L83890

; 2197 : 		ball->Radius = (CHROMEBALL_MAX_RAD - CHROMEBALL_MIN_RAD) * ball->Age * 2.0f + CHROMEBALL_MIN_RAD;

	mov	eax, DWORD PTR _ball$[ebp]
	fld	DWORD PTR __real@42700000
	fmul	DWORD PTR [eax]
	fadd	ST(0), ST(0)
	fadd	DWORD PTR __real@40800000
	mov	ecx, DWORD PTR _ball$[ebp]
	fstp	DWORD PTR [ecx+4]

; 2198 : 	else if (ball->Age > 29.0f)

	jmp	SHORT $L83891
$L83890:
	mov	eax, DWORD PTR _ball$[ebp]
	fld	DWORD PTR [eax]
	fcomp	DWORD PTR __real@41e80000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $L83892

; 2199 : 		ball->Radius = (CHROMEBALL_MAX_RAD - CHROMEBALL_MIN_RAD) * (30.0f - ball->Age) + CHROMEBALL_MIN_RAD;

	mov	eax, DWORD PTR _ball$[ebp]
	fld	DWORD PTR __real@41f00000
	fsub	DWORD PTR [eax]
	fmul	DWORD PTR __real@42700000
	fadd	DWORD PTR __real@40800000
	mov	ecx, DWORD PTR _ball$[ebp]
	fstp	DWORD PTR [ecx+4]

; 2200 : 	else

	jmp	SHORT $L83891
$L83892:

; 2201 : 		ball->Radius = CHROMEBALL_MAX_RAD;

	mov	eax, DWORD PTR _ball$[ebp]
	mov	DWORD PTR [eax+4], 1115684864		; 42800000H
$L83891:

; 2202 : 
; 2203 : 	obj->body.CollSkin.Sphere[0].Radius = obj->body.CollSkin.WorldSphere[0].Radius = obj->body.CollSkin.OldWorldSphere[0].Radius = ball->Radius;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+404]
	mov	edx, DWORD PTR _ball$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+12], eax
	mov	ecx, DWORD PTR _obj$[ebp]
	mov	edx, DWORD PTR [ecx+404]
	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+400]
	mov	edx, DWORD PTR [edx+12]
	mov	DWORD PTR [ecx+12], edx
	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+400]
	mov	edx, DWORD PTR _obj$[ebp]
	mov	eax, DWORD PTR [edx+396]
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], ecx

; 2204 : 
; 2205 : // maintain sfx
; 2206 : 
; 2207 : 	if (obj->Sfx3D)

	mov	eax, DWORD PTR _obj$[ebp]
	cmp	DWORD PTR [eax+680], 0
	je	$L83894

; 2208 : 	{
; 2209 : 		FTOL(Length(&obj->body.Centre.Vel), vel);

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR _obj$[ebp]
	fld	DWORD PTR [eax+32]
	fmul	DWORD PTR [ecx+32]
	mov	edx, DWORD PTR _obj$[ebp]
	mov	eax, DWORD PTR _obj$[ebp]
	fld	DWORD PTR [edx+36]
	fmul	DWORD PTR [eax+36]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR _obj$[ebp]
	mov	edx, DWORD PTR _obj$[ebp]
	fld	DWORD PTR [ecx+40]
	fmul	DWORD PTR [edx+40]
	faddp	ST(1), ST(0)
	push	ecx
	fstp	DWORD PTR [esp]
	call	?sqrt@@YAMM@Z				; sqrt
	add	esp, 4
	fadd	DWORD PTR __real@4b000000
	fstp	DWORD PTR __temp$83895[ebp]
	mov	eax, DWORD PTR __temp$83895[ebp]
	and	eax, 16777215				; 00ffffffH
	mov	DWORD PTR _vel$[ebp], eax

; 2210 : 
; 2211 : 		obj->Sfx3D->Freq = 5000 + vel * 4;

	mov	eax, DWORD PTR _vel$[ebp]
	lea	ecx, DWORD PTR [eax*4+5000]
	mov	edx, DWORD PTR _obj$[ebp]
	mov	eax, DWORD PTR [edx+680]
	mov	DWORD PTR [eax+12], ecx

; 2212 : 
; 2213 : 		obj->Sfx3D->Vol = vel / 2;

	mov	eax, DWORD PTR _vel$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	ecx, DWORD PTR _obj$[ebp]
	mov	edx, DWORD PTR [ecx+680]
	mov	DWORD PTR [edx+8], eax

; 2214 : 		if (obj->Sfx3D->Vol > SFX_MAX_VOL) obj->Sfx3D->Vol = SFX_MAX_VOL;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+680]
	cmp	DWORD PTR [ecx+8], 127			; 0000007fH
	jle	SHORT $L83899
	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+680]
	mov	DWORD PTR [ecx+8], 127			; 0000007fH
$L83899:

; 2215 : 
; 2216 : 		CopyVec(&obj->body.Centre.Pos, &obj->Sfx3D->Pos);

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+680]
	mov	edx, DWORD PTR _obj$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	DWORD PTR [ecx+28], eax
	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+680]
	mov	edx, DWORD PTR _obj$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	DWORD PTR [ecx+32], eax
	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+680]
	mov	edx, DWORD PTR _obj$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	DWORD PTR [ecx+36], eax
$L83894:

; 2217 : 	}
; 2218 : 
; 2219 : 	// Reset knocks
; 2220 : 	if (obj->body.BangMag > TO_VEL(Real(300))) {

	mov	eax, DWORD PTR _obj$[ebp]
	fld	DWORD PTR [eax+548]
	fcomp	DWORD PTR __real@43960000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $L83901

; 2221 : 		long vol, freq;
; 2222 : 
; 2223 : 		//vol = SFX_MIN_VOL + (SFX_MAX_VOL - SFX_MIN_VOL) * obj->body.BangMag / 1000;
; 2224 : 		//if (vol > SFX_MAX_VOL) vol = SFX_MAX_VOL;
; 2225 : 		vol = SFX_MAX_VOL;

	mov	DWORD PTR _vol$83902[ebp], 127		; 0000007fH

; 2226 : 
; 2227 : 		freq = 22050;

	mov	DWORD PTR _freq$83903[ebp], 22050	; 00005622H

; 2228 : 
; 2229 : 		PlaySfx3D(SFX_CHROMEBALL_HIT, vol, freq, &obj->body.Centre.Pos);

	mov	eax, DWORD PTR _obj$[ebp]
	add	eax, 20					; 00000014H
	push	eax
	mov	ecx, DWORD PTR _freq$83903[ebp]
	push	ecx
	mov	edx, DWORD PTR _vol$83902[ebp]
	push	edx
	push	12					; 0000000cH
	call	?PlaySfx3D@@YAXJJJPAUVectorStruct@@@Z	; PlaySfx3D
	add	esp, 16					; 00000010H

; 2230 : 		obj->body.Banged = FALSE;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	BYTE PTR [eax+544], 0

; 2231 : 		obj->body.BangMag = ZERO;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	DWORD PTR [eax+548], 0
$L83901:

; 2232 : 	}
; 2233 : 
; 2234 : // kill?
; 2235 : 
; 2236 : 	if (ball->Age >= 30.0f)

	mov	eax, DWORD PTR _ball$[ebp]
	fld	DWORD PTR [eax]
	fcomp	DWORD PTR __real@41f00000
	fnstsw	ax
	test	ah, 1
	jne	SHORT $L83886

; 2237 : 	{
; 2238 : 		OBJ_FreeObject(obj);

	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	call	?OBJ_FreeObject@@YAJPAUobject_def@@@Z	; OBJ_FreeObject
	add	esp, 4
$L83886:

; 2239 : 	}
; 2240 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?ChromeBallHandler@@YAXPAUobject_def@@@Z ENDP		; ChromeBallHandler
_TEXT	ENDS
PUBLIC	?CloneHandler@@YAXPAUobject_def@@@Z		; CloneHandler
; Function compile flags: /Odt /ZI
;	COMDAT ?CloneHandler@@YAXPAUobject_def@@@Z
_TEXT	SEGMENT
_obj$ = 8						; size = 4
?CloneHandler@@YAXPAUobject_def@@@Z PROC NEAR		; CloneHandler, COMDAT

; 2247 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 2248 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?CloneHandler@@YAXPAUobject_def@@@Z ENDP		; CloneHandler
_TEXT	ENDS
PUBLIC	?TurboAIHandler@@YAXPAUobject_def@@@Z		; TurboAIHandler
PUBLIC	__real@3f847ae147ae147b
PUBLIC	__real@45d1a343
;	COMDAT __real@3f847ae147ae147b
CONST	SEGMENT
__real@3f847ae147ae147b DQ 03f847ae147ae147br	; 0.01
CONST	ENDS
;	COMDAT __real@45d1a343
CONST	SEGMENT
__real@45d1a343 DD 045d1a343r			; 6708.41
; Function compile flags: /Odt /ZI
CONST	ENDS
;	COMDAT ?TurboAIHandler@@YAXPAUobject_def@@@Z
_TEXT	SEGMENT
tv234 = -96						; size = 4
tv231 = -96						; size = 4
tv228 = -96						; size = 4
_turbo$ = -28						; size = 4
_vel$ = -24						; size = 12
_pos$ = -12						; size = 12
_obj$ = 8						; size = 4
?TurboAIHandler@@YAXPAUobject_def@@@Z PROC NEAR		; TurboAIHandler, COMDAT

; 2255 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 96					; 00000060H
	push	ebx
	push	esi
	push	edi

; 2256 : 	//int iTrail;
; 2257 : 	VEC pos, vel;
; 2258 : 	TURBO_OBJ *turbo = (TURBO_OBJ *)obj->Data;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+684]
	mov	DWORD PTR _turbo$[ebp], ecx

; 2259 : 
; 2260 : 	turbo->Age += TimeStep;

	mov	eax, DWORD PTR _turbo$[ebp]
	fld	DWORD PTR ?TimeStep@@3MA		; TimeStep
	fadd	DWORD PTR [eax]
	mov	ecx, DWORD PTR _turbo$[ebp]
	fstp	DWORD PTR [ecx]

; 2261 : 	turbo->SparkTime += TimeStep;

	mov	eax, DWORD PTR _turbo$[ebp]
	fld	DWORD PTR ?TimeStep@@3MA		; TimeStep
	fadd	DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _turbo$[ebp]
	fstp	DWORD PTR [ecx+8]

; 2262 : 
; 2263 : 	if (turbo->SparkTime > 0.01) {

	mov	eax, DWORD PTR _turbo$[ebp]
	fld	DWORD PTR [eax+8]
	fcomp	QWORD PTR __real@3f847ae147ae147b
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	$L83915

; 2264 : 		VecEqScalarVec(&vel, HALF, &obj->player->car.Body->Centre.Vel);

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+588]
	mov	edx, DWORD PTR [ecx+900]
	fld	DWORD PTR __real@3f000000
	fmul	DWORD PTR [edx+32]
	fstp	DWORD PTR _vel$[ebp]
	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+588]
	mov	edx, DWORD PTR [ecx+900]
	fld	DWORD PTR __real@3f000000
	fmul	DWORD PTR [edx+36]
	fstp	DWORD PTR _vel$[ebp+4]
	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+588]
	mov	edx, DWORD PTR [ecx+900]
	fld	DWORD PTR __real@3f000000
	fmul	DWORD PTR [edx+40]
	fstp	DWORD PTR _vel$[ebp+8]

; 2265 : 		pos.v[X] = obj->player->car.Body->Centre.Pos.v[X] + frand(30) - 15;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+588]
	mov	esi, DWORD PTR [ecx+900]
	call	_rand
	mov	DWORD PTR tv228[ebp], eax
	fild	DWORD PTR tv228[ebp]
	fdiv	DWORD PTR __real@46fffe00
	fmul	DWORD PTR __real@41f00000
	fadd	DWORD PTR [esi+20]
	fsub	DWORD PTR __real@41700000
	fstp	DWORD PTR _pos$[ebp]

; 2266 : 		pos.v[Y] = obj->player->car.Body->Centre.Pos.v[Y] + frand(30) - 15;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+588]
	mov	esi, DWORD PTR [ecx+900]
	call	_rand
	mov	DWORD PTR tv231[ebp], eax
	fild	DWORD PTR tv231[ebp]
	fdiv	DWORD PTR __real@46fffe00
	fmul	DWORD PTR __real@41f00000
	fadd	DWORD PTR [esi+24]
	fsub	DWORD PTR __real@41700000
	fstp	DWORD PTR _pos$[ebp+4]

; 2267 : 		pos.v[Z] = obj->player->car.Body->Centre.Pos.v[Z] + frand(30) - 15;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+588]
	mov	esi, DWORD PTR [ecx+900]
	call	_rand
	mov	DWORD PTR tv234[ebp], eax
	fild	DWORD PTR tv234[ebp]
	fdiv	DWORD PTR __real@46fffe00
	fmul	DWORD PTR __real@41f00000
	fadd	DWORD PTR [esi+28]
	fsub	DWORD PTR __real@41700000
	fstp	DWORD PTR _pos$[ebp+8]

; 2268 : 		
; 2269 : 		CreateSpark(SPARK_SPARK, &pos, &vel, TO_VEL(Real(100)), 0);

	push	0
	push	0
	push	1120403456				; 42c80000H
	lea	eax, DWORD PTR _vel$[ebp]
	push	eax
	lea	ecx, DWORD PTR _pos$[ebp]
	push	ecx
	push	0
	call	?CreateSpark@@YA_NW4SparkTypeEnum@@PAUVectorStruct@@1M_K@Z ; CreateSpark
	add	esp, 24					; 00000018H
$L83915:

; 2270 : 	}
; 2271 : 
; 2272 : 	if (turbo->Age < turbo->LifeTime) {

	mov	eax, DWORD PTR _turbo$[ebp]
	mov	ecx, DWORD PTR _turbo$[ebp]
	fld	DWORD PTR [eax]
	fcomp	DWORD PTR [ecx+4]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L83920

; 2273 : 		//obj->player->car.Body->Centre.Boost = turbo->Force * (ONE - turbo->Age / turbo->LifeTime);
; 2274 : 		obj->player->car.TopSpeed = TO_VEL(MPH2OGU_SPEED * 75) * (ONE + HALF * (ONE - turbo->Age / turbo->LifeTime));

	mov	eax, DWORD PTR _turbo$[ebp]
	mov	ecx, DWORD PTR _turbo$[ebp]
	fld	DWORD PTR [eax]
	fdiv	DWORD PTR [ecx+4]
	fsubr	DWORD PTR __real@3f800000
	fmul	DWORD PTR __real@3f000000
	fadd	DWORD PTR __real@3f800000
	fmul	DWORD PTR __real@45d1a343
	mov	edx, DWORD PTR _obj$[ebp]
	mov	eax, DWORD PTR [edx+588]
	fstp	DWORD PTR [eax+888]

; 2275 : 	} else {

	jmp	SHORT $L83910
$L83920:

; 2276 : 		obj->player->car.TopSpeed = obj->player->car.DefaultTopSpeed;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+588]
	mov	edx, DWORD PTR _obj$[ebp]
	mov	eax, DWORD PTR [edx+588]
	mov	ecx, DWORD PTR [ecx+892]
	mov	DWORD PTR [eax+888], ecx

; 2277 : 		//obj->player->car.Body->Centre.Boost = ZERO;
; 2278 : 		/*for (iTrail = 0; iTrail < TURBO_NTRAILS; iTrail++) {
; 2279 : 			if (turbo->TurboTrail[iTrail] != NULL) {
; 2280 : 				FreeTrail(turbo->TurboTrail[iTrail]);
; 2281 : 			}
; 2282 : 		}*/
; 2283 : 		OBJ_FreeObject(obj);

	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	call	?OBJ_FreeObject@@YAJPAUobject_def@@@Z	; OBJ_FreeObject
	add	esp, 4
$L83910:

; 2284 : 	}
; 2285 : 
; 2286 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?TurboAIHandler@@YAXPAUobject_def@@@Z ENDP		; TurboAIHandler
; Function compile flags: /Odt /ZI
_TEXT	ENDS
;	COMDAT ?TurboMoveHandler@@YAXPAUobject_def@@@Z
_TEXT	SEGMENT
_turbo$ = -4						; size = 4
_obj$ = 8						; size = 4
?TurboMoveHandler@@YAXPAUobject_def@@@Z PROC NEAR	; TurboMoveHandler, COMDAT

; 2289 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 2290 : 	//int iTrail;
; 2291 : 	TURBO_OBJ *turbo = (TURBO_OBJ *)obj->Data;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+684]
	mov	DWORD PTR _turbo$[ebp], ecx

; 2292 : 
; 2293 : 	// Update the trail
; 2294 : 	/*for (iTrail = 0; iTrail < TURBO_NTRAILS; iTrail++) {
; 2295 : 		if (turbo->TurboTrail[iTrail] != NULL) {
; 2296 : 			turbo->TrailTime += TimeStep;
; 2297 : 			if (turbo->TrailTime > turbo->TurboTrail[iTrail]->Data->LifeTime / turbo->TurboTrail[iTrail]->MaxTrails) {
; 2298 : 				UpdateTrail(turbo->TurboTrail[iTrail], &obj->player->car.Wheel[iTrail].WPos);
; 2299 : 				turbo->TrailTime = ZERO;
; 2300 : 			} else {
; 2301 : 				ModifyFirstTrail(turbo->TurboTrail[iTrail], &obj->player->car.Wheel[iTrail].WPos);
; 2302 : 			}
; 2303 : 
; 2304 : 		}
; 2305 : 	}*/
; 2306 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?TurboMoveHandler@@YAXPAUobject_def@@@Z ENDP		; TurboMoveHandler
; Function compile flags: /Odt /ZI
_TEXT	ENDS
;	COMDAT ?Turbo2Handler@@YAXPAUobject_def@@@Z
_TEXT	SEGMENT
_turbo$ = -4						; size = 4
_obj$ = 8						; size = 4
?Turbo2Handler@@YAXPAUobject_def@@@Z PROC NEAR		; Turbo2Handler, COMDAT

; 2313 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 2314 : 	TURBO2_OBJ *turbo = (TURBO2_OBJ*)obj->Data;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+684]
	mov	DWORD PTR _turbo$[ebp], ecx

; 2315 : /*	long i, count;
; 2316 : 	REAL mul;
; 2317 : 	VEC vec, vec2, vec3, vec4;
; 2318 : 
; 2319 : // create particles
; 2320 : 
; 2321 : 	FTOL(TimeStep * 100.0f, count);
; 2322 : 	CopyVec(&obj->player->car.Body->Centre.Pos, &vec3);
; 2323 : 	VecEqScalarVec(&vec4, 1.0f / 100.0f, &obj->player->car.Body->Centre.Vel);
; 2324 : 
; 2325 : 	for (i = 0 ; i < count ; i++)
; 2326 : 	{
; 2327 : 		SetVector(&vec, frand(1.0f) - 0.5f, frand(1.0f) - 0.5f, 0.0f);
; 2328 : 		mul = 64.0f / Length(&vec);
; 2329 : 		VecMulScalar(&vec, mul);
; 2330 : 		RotVector(&obj->player->car.Body->Centre.WMatrix, &vec, &vec2);
; 2331 : 		VecPlusScalarVec(&vec3, 0.1f, &vec2, &vec);
; 2332 : 		CreateSpark(SPARK_STAR, &vec, &vec2, 0.0f, 0);
; 2333 : 
; 2334 : 		AddVector(&vec3, &vec4, &vec3);
; 2335 : 	}*/
; 2336 : 
; 2337 : // age
; 2338 : 
; 2339 : 	turbo->Age += TimeStep;

	mov	eax, DWORD PTR _turbo$[ebp]
	fld	DWORD PTR ?TimeStep@@3MA		; TimeStep
	fadd	DWORD PTR [eax]
	mov	ecx, DWORD PTR _turbo$[ebp]
	fstp	DWORD PTR [ecx]

; 2340 : 	if (turbo->Age < turbo->LifeTime)

	mov	eax, DWORD PTR _turbo$[ebp]
	mov	ecx, DWORD PTR _turbo$[ebp]
	fld	DWORD PTR [eax]
	fcomp	DWORD PTR [ecx+4]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L83933

; 2341 : 	{
; 2342 : 		obj->player->car.TopSpeed = TO_VEL(MPH2OGU_SPEED * 75) * (ONE + HALF * (ONE - turbo->Age / turbo->LifeTime));

	mov	eax, DWORD PTR _turbo$[ebp]
	mov	ecx, DWORD PTR _turbo$[ebp]
	fld	DWORD PTR [eax]
	fdiv	DWORD PTR [ecx+4]
	fsubr	DWORD PTR __real@3f800000
	fmul	DWORD PTR __real@3f000000
	fadd	DWORD PTR __real@3f800000
	fmul	DWORD PTR __real@45d1a343
	mov	edx, DWORD PTR _obj$[ebp]
	mov	eax, DWORD PTR [edx+588]
	fstp	DWORD PTR [eax+888]

; 2343 : 	}
; 2344 : 	else

	jmp	SHORT $L83930
$L83933:

; 2345 : 	{
; 2346 : 		OBJ_FreeObject(obj);

	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	call	?OBJ_FreeObject@@YAJPAUobject_def@@@Z	; OBJ_FreeObject
	add	esp, 4
$L83930:

; 2347 : 	}
; 2348 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Turbo2Handler@@YAXPAUobject_def@@@Z ENDP		; Turbo2Handler
; Function compile flags: /Odt /ZI
_TEXT	ENDS
;	COMDAT ?SpringHandler@@YAXPAUobject_def@@@Z
_TEXT	SEGMENT
_imp$ = -12						; size = 12
_obj$ = 8						; size = 4
?SpringHandler@@YAXPAUobject_def@@@Z PROC NEAR		; SpringHandler, COMDAT

; 2355 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi

; 2356 : 	VEC imp;
; 2357 : 
; 2358 : 	ScalarVecPlusScalarVec(-obj->player->car.Body->Centre.Mass * 1000, &obj->player->car.Body->Centre.WMatrix.mv[U], obj->player->car.Body->Centre.Mass * 1000, &obj->player->car.Body->Centre.WMatrix.mv[L], &imp)

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+588]
	mov	edx, DWORD PTR [ecx+900]
	fld	DWORD PTR [edx]
	fchs
	fmul	DWORD PTR __real@447a0000
	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+588]
	mov	edx, DWORD PTR [ecx+900]
	fmul	DWORD PTR [edx+112]
	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+588]
	mov	edx, DWORD PTR [ecx+900]
	fld	DWORD PTR [edx]
	fmul	DWORD PTR __real@447a0000
	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+588]
	mov	edx, DWORD PTR [ecx+900]
	fmul	DWORD PTR [edx+124]
	faddp	ST(1), ST(0)
	fstp	DWORD PTR _imp$[ebp]
	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+588]
	mov	edx, DWORD PTR [ecx+900]
	fld	DWORD PTR [edx]
	fchs
	fmul	DWORD PTR __real@447a0000
	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+588]
	mov	edx, DWORD PTR [ecx+900]
	fmul	DWORD PTR [edx+116]
	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+588]
	mov	edx, DWORD PTR [ecx+900]
	fld	DWORD PTR [edx]
	fmul	DWORD PTR __real@447a0000
	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+588]
	mov	edx, DWORD PTR [ecx+900]
	fmul	DWORD PTR [edx+128]
	faddp	ST(1), ST(0)
	fstp	DWORD PTR _imp$[ebp+4]
	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+588]
	mov	edx, DWORD PTR [ecx+900]
	fld	DWORD PTR [edx]
	fchs
	fmul	DWORD PTR __real@447a0000
	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+588]
	mov	edx, DWORD PTR [ecx+900]
	fmul	DWORD PTR [edx+120]
	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+588]
	mov	edx, DWORD PTR [ecx+900]
	fld	DWORD PTR [edx]
	fmul	DWORD PTR __real@447a0000
	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+588]
	mov	edx, DWORD PTR [ecx+900]
	fmul	DWORD PTR [edx+132]
	faddp	ST(1), ST(0)
	fstp	DWORD PTR _imp$[ebp+8]

; 2359 : 	VecPlusEqVec(&obj->player->car.Body->Centre.Impulse, &imp);

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+588]
	mov	edx, DWORD PTR [ecx+900]
	fld	DWORD PTR _imp$[ebp]
	fadd	DWORD PTR [edx+56]
	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+588]
	mov	edx, DWORD PTR [ecx+900]
	fstp	DWORD PTR [edx+56]
	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+588]
	mov	edx, DWORD PTR [ecx+900]
	fld	DWORD PTR _imp$[ebp+4]
	fadd	DWORD PTR [edx+60]
	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+588]
	mov	edx, DWORD PTR [ecx+900]
	fstp	DWORD PTR [edx+60]
	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+588]
	mov	edx, DWORD PTR [ecx+900]
	fld	DWORD PTR _imp$[ebp+8]
	fadd	DWORD PTR [edx+64]
	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+588]
	mov	edx, DWORD PTR [ecx+900]
	fstp	DWORD PTR [edx+64]

; 2360 : 
; 2361 : 	OBJ_FreeObject(obj);

	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	call	?OBJ_FreeObject@@YAJPAUobject_def@@@Z	; OBJ_FreeObject
	add	esp, 4

; 2362 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?SpringHandler@@YAXPAUobject_def@@@Z ENDP		; SpringHandler
_TEXT	ENDS
PUBLIC	__real@42a00000
;	COMDAT __real@42a00000
CONST	SEGMENT
__real@42a00000 DD 042a00000r			; 80
; Function compile flags: /Odt /ZI
CONST	ENDS
;	COMDAT ?ElectroZappedHandler@@YAXPAUobject_def@@@Z
_TEXT	SEGMENT
__temp$83960 = -40					; size = 4
_evert$ = -36						; size = 4
_mv$ = -32						; size = 4
_mrgb$ = -28						; size = 4
_mp$ = -24						; size = 4
_model$ = -20						; size = 4
_electro$ = -16						; size = 4
_lmul$ = -12						; size = 4
_rgb$ = -8						; size = 4
_i$ = -4						; size = 4
_obj$ = 8						; size = 4
?ElectroZappedHandler@@YAXPAUobject_def@@@Z PROC NEAR	; ElectroZappedHandler, COMDAT

; 2369 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 104				; 00000068H
	push	ebx
	push	esi
	push	edi

; 2370 : 	long i, rgb, lmul;
; 2371 : 	ELECTROZAPPED_OBJ *electro = (ELECTROZAPPED_OBJ*)obj->Data;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+684]
	mov	DWORD PTR _electro$[ebp], ecx

; 2372 : 	MODEL *model = (MODEL*)&electro->Model;

	mov	eax, DWORD PTR _electro$[ebp]
	mov	DWORD PTR _model$[ebp], eax

; 2373 : 	MODEL_POLY *mp;
; 2374 : 	POLY_RGB *mrgb;
; 2375 : 	MODEL_VERTEX *mv;
; 2376 : 	ELECTROZAPPED_VERT *evert;
; 2377 : 
; 2378 : // set vert UV's
; 2379 : 
; 2380 : 	mv = model->VertPtr;

	mov	eax, DWORD PTR _model$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	mov	DWORD PTR _mv$[ebp], ecx

; 2381 : 	evert = (ELECTROZAPPED_VERT*)(model->VertPtr + model->VertNum);

	mov	eax, DWORD PTR _model$[ebp]
	movsx	ecx, WORD PTR [eax+34]
	imul	ecx, 88					; 00000058H
	mov	edx, DWORD PTR _model$[ebp]
	add	ecx, DWORD PTR [edx+52]
	mov	DWORD PTR _evert$[ebp], ecx

; 2382 : 
; 2383 : 	for (i = model->VertNum ; i ; i--, mv++, evert++)

	mov	eax, DWORD PTR _model$[ebp]
	movsx	ecx, WORD PTR [eax+34]
	mov	DWORD PTR _i$[ebp], ecx
	jmp	SHORT $L83955
$L83956:
	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	mov	ecx, DWORD PTR _mv$[ebp]
	add	ecx, 88					; 00000058H
	mov	DWORD PTR _mv$[ebp], ecx
	mov	edx, DWORD PTR _evert$[ebp]
	add	edx, 8
	mov	DWORD PTR _evert$[ebp], edx
$L83955:
	cmp	DWORD PTR _i$[ebp], 0
	je	SHORT $L83957

; 2384 : 	{
; 2385 : 		evert->Time += evert->TimeAdd * TimeStep;

	mov	eax, DWORD PTR _evert$[ebp]
	fld	DWORD PTR ?TimeStep@@3MA		; TimeStep
	fmul	DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _evert$[ebp]
	fadd	DWORD PTR [ecx]
	mov	edx, DWORD PTR _evert$[ebp]
	fstp	DWORD PTR [edx]

; 2386 : 
; 2387 : 		mv->tu = (float)sin(evert->Time) * (24.0f / 256.0f) + (96.0f / 256.0f);

	mov	eax, DWORD PTR _evert$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?sin@@YAMM@Z				; sin
	add	esp, 4
	fmul	DWORD PTR __real@3dc00000
	fadd	DWORD PTR __real@3ec00000
	mov	edx, DWORD PTR _mv$[ebp]
	fstp	DWORD PTR [edx+60]

; 2388 : 		mv->tv = (float)cos(evert->Time) * (24.0f / 256.0f) + (96.0f / 256.0f);

	mov	eax, DWORD PTR _evert$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?cos@@YAMM@Z				; cos
	add	esp, 4
	fmul	DWORD PTR __real@3dc00000
	fadd	DWORD PTR __real@3ec00000
	mov	edx, DWORD PTR _mv$[ebp]
	fstp	DWORD PTR [edx+64]

; 2389 : 	}

	jmp	SHORT $L83956
$L83957:

; 2390 : 
; 2391 : // copy vert UV' to poly UV's + set rgb's
; 2392 : 
; 2393 : 	FTOL(obj->player->car.PowerTimer * 80.0f, lmul);

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+588]
	fld	DWORD PTR [ecx+3556]
	fmul	DWORD PTR __real@42a00000
	fadd	DWORD PTR __real@4b000000
	fstp	DWORD PTR __temp$83960[ebp]
	mov	eax, DWORD PTR __temp$83960[ebp]
	and	eax, 16777215				; 00ffffffH
	mov	DWORD PTR _lmul$[ebp], eax

; 2394 : 
; 2395 : 	rgb = lmul | lmul << 8 | lmul << 16;

	mov	eax, DWORD PTR _lmul$[ebp]
	shl	eax, 8
	or	eax, DWORD PTR _lmul$[ebp]
	mov	ecx, DWORD PTR _lmul$[ebp]
	shl	ecx, 16					; 00000010H
	or	eax, ecx
	mov	DWORD PTR _rgb$[ebp], eax

; 2396 : 
; 2397 : 	mp = model->PolyPtr;

	mov	eax, DWORD PTR _model$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	mov	DWORD PTR _mp$[ebp], ecx

; 2398 : 	mrgb = model->PolyRGB;

	mov	eax, DWORD PTR _model$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	mov	DWORD PTR _mrgb$[ebp], ecx

; 2399 : 
; 2400 : 	for (i = model->PolyNum ; i ; i--, mp++, mrgb++)

	mov	eax, DWORD PTR _model$[ebp]
	movsx	ecx, WORD PTR [eax+32]
	mov	DWORD PTR _i$[ebp], ecx
	jmp	SHORT $L83963
$L83964:
	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	mov	ecx, DWORD PTR _mp$[ebp]
	add	ecx, 52					; 00000034H
	mov	DWORD PTR _mp$[ebp], ecx
	mov	edx, DWORD PTR _mrgb$[ebp]
	add	edx, 16					; 00000010H
	mov	DWORD PTR _mrgb$[ebp], edx
$L83963:
	cmp	DWORD PTR _i$[ebp], 0
	je	$L83965

; 2401 : 	{
; 2402 : 		mp->tu0 = mp->v0->tu;

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _mp$[ebp]
	mov	eax, DWORD PTR [ecx+60]
	mov	DWORD PTR [edx+4], eax

; 2403 : 		mp->tv0 = mp->v0->tv;

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _mp$[ebp]
	mov	eax, DWORD PTR [ecx+64]
	mov	DWORD PTR [edx+8], eax

; 2404 : 
; 2405 : 		mp->tu1 = mp->v1->tu;

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	edx, DWORD PTR _mp$[ebp]
	mov	eax, DWORD PTR [ecx+60]
	mov	DWORD PTR [edx+12], eax

; 2406 : 		mp->tv1 = mp->v1->tv;

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	edx, DWORD PTR _mp$[ebp]
	mov	eax, DWORD PTR [ecx+64]
	mov	DWORD PTR [edx+16], eax

; 2407 : 
; 2408 : 		mp->tu2 = mp->v2->tu;

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	mov	edx, DWORD PTR _mp$[ebp]
	mov	eax, DWORD PTR [ecx+60]
	mov	DWORD PTR [edx+20], eax

; 2409 : 		mp->tv2 = mp->v2->tv;

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	mov	edx, DWORD PTR _mp$[ebp]
	mov	eax, DWORD PTR [ecx+64]
	mov	DWORD PTR [edx+24], eax

; 2410 : 
; 2411 : 		if (mp->Type & POLY_QUAD)

	mov	eax, DWORD PTR _mp$[ebp]
	movsx	ecx, WORD PTR [eax]
	and	ecx, 1
	je	SHORT $L83966

; 2412 : 		{
; 2413 : 			mp->tu3 = mp->v3->tu;

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	mov	edx, DWORD PTR _mp$[ebp]
	mov	eax, DWORD PTR [ecx+60]
	mov	DWORD PTR [edx+28], eax

; 2414 : 			mp->tv3 = mp->v3->tv;

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	mov	edx, DWORD PTR _mp$[ebp]
	mov	eax, DWORD PTR [ecx+64]
	mov	DWORD PTR [edx+32], eax
$L83966:

; 2415 : 		}	
; 2416 : 
; 2417 : 		*(long*)&mrgb->rgb[0] = rgb;

	mov	eax, DWORD PTR _mrgb$[ebp]
	mov	ecx, DWORD PTR _rgb$[ebp]
	mov	DWORD PTR [eax], ecx

; 2418 : 		*(long*)&mrgb->rgb[1] = rgb;

	mov	eax, DWORD PTR _mrgb$[ebp]
	mov	ecx, DWORD PTR _rgb$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 2419 : 		*(long*)&mrgb->rgb[2] = rgb;

	mov	eax, DWORD PTR _mrgb$[ebp]
	mov	ecx, DWORD PTR _rgb$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 2420 : 		*(long*)&mrgb->rgb[3] = rgb;

	mov	eax, DWORD PTR _mrgb$[ebp]
	mov	ecx, DWORD PTR _rgb$[ebp]
	mov	DWORD PTR [eax+12], ecx

; 2421 : 	}

	jmp	$L83964
$L83965:

; 2422 : 
; 2423 : // kill?
; 2424 : 
; 2425 : 	if (!obj->player->car.PowerTimer)

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+588]
	fld	DWORD PTR __real@00000000
	fld	DWORD PTR [ecx+3556]
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $L83942

; 2426 : 	{
; 2427 : 		OBJ_FreeObject(obj);

	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	call	?OBJ_FreeObject@@YAJPAUobject_def@@@Z	; OBJ_FreeObject
	add	esp, 4
$L83942:

; 2428 : 		return;
; 2429 : 	}
; 2430 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?ElectroZappedHandler@@YAXPAUobject_def@@@Z ENDP	; ElectroZappedHandler
_TEXT	ENDS
PUBLIC	__real@3e300000
;	COMDAT __real@3e300000
CONST	SEGMENT
__real@3e300000 DD 03e300000r			; 0.171875
; Function compile flags: /Odt /ZI
CONST	ENDS
;	COMDAT ?BombGlowHandler@@YAXPAUobject_def@@@Z
_TEXT	SEGMENT
__temp$83992 = -40					; size = 4
_gvert$ = -36						; size = 4
_mv$ = -32						; size = 4
_mrgb$ = -28						; size = 4
_mp$ = -24						; size = 4
_model$ = -20						; size = 4
_glow$ = -16						; size = 4
_lmul$ = -12						; size = 4
_rgb$ = -8						; size = 4
_i$ = -4						; size = 4
_obj$ = 8						; size = 4
?BombGlowHandler@@YAXPAUobject_def@@@Z PROC NEAR	; BombGlowHandler, COMDAT

; 2437 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 104				; 00000068H
	push	ebx
	push	esi
	push	edi

; 2438 : 	long i, rgb, lmul;
; 2439 : 	BOMBGLOW_OBJ *glow = (BOMBGLOW_OBJ*)obj->Data;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+684]
	mov	DWORD PTR _glow$[ebp], ecx

; 2440 : 	MODEL *model = (MODEL*)&glow->Model;

	mov	eax, DWORD PTR _glow$[ebp]
	add	eax, 4
	mov	DWORD PTR _model$[ebp], eax

; 2441 : 	MODEL_POLY *mp;
; 2442 : 	POLY_RGB *mrgb;
; 2443 : 	MODEL_VERTEX *mv;
; 2444 : 	BOMBGLOW_VERT *gvert;
; 2445 : 
; 2446 : // set vert UV's
; 2447 : 
; 2448 : 	mv = model->VertPtr;

	mov	eax, DWORD PTR _model$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	mov	DWORD PTR _mv$[ebp], ecx

; 2449 : 	gvert = (BOMBGLOW_VERT*)(model->VertPtr + model->VertNum);

	mov	eax, DWORD PTR _model$[ebp]
	movsx	ecx, WORD PTR [eax+34]
	imul	ecx, 88					; 00000058H
	mov	edx, DWORD PTR _model$[ebp]
	add	ecx, DWORD PTR [edx+52]
	mov	DWORD PTR _gvert$[ebp], ecx

; 2450 : 
; 2451 : 	for (i = model->VertNum ; i ; i--, mv++, gvert++)

	mov	eax, DWORD PTR _model$[ebp]
	movsx	ecx, WORD PTR [eax+34]
	mov	DWORD PTR _i$[ebp], ecx
	jmp	SHORT $L83987
$L83988:
	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	mov	ecx, DWORD PTR _mv$[ebp]
	add	ecx, 88					; 00000058H
	mov	DWORD PTR _mv$[ebp], ecx
	mov	edx, DWORD PTR _gvert$[ebp]
	add	edx, 8
	mov	DWORD PTR _gvert$[ebp], edx
$L83987:
	cmp	DWORD PTR _i$[ebp], 0
	je	SHORT $L83989

; 2452 : 	{
; 2453 : 		gvert->Time += gvert->TimeAdd * TimeStep;

	mov	eax, DWORD PTR _gvert$[ebp]
	fld	DWORD PTR ?TimeStep@@3MA		; TimeStep
	fmul	DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _gvert$[ebp]
	fadd	DWORD PTR [ecx]
	mov	edx, DWORD PTR _gvert$[ebp]
	fstp	DWORD PTR [edx]

; 2454 : 
; 2455 : 		mv->tu = (float)sin(gvert->Time) * (12.0f / 256.0f) + (36.0f / 256.0f);

	mov	eax, DWORD PTR _gvert$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?sin@@YAMM@Z				; sin
	add	esp, 4
	fmul	DWORD PTR __real@3d400000
	fadd	DWORD PTR __real@3e100000
	mov	edx, DWORD PTR _mv$[ebp]
	fstp	DWORD PTR [edx+60]

; 2456 : 		mv->tv = (float)cos(gvert->Time) * (12.0f / 256.0f) + (44.0f / 256.0f);

	mov	eax, DWORD PTR _gvert$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?cos@@YAMM@Z				; cos
	add	esp, 4
	fmul	DWORD PTR __real@3d400000
	fadd	DWORD PTR __real@3e300000
	mov	edx, DWORD PTR _mv$[ebp]
	fstp	DWORD PTR [edx+64]

; 2457 : 	}

	jmp	SHORT $L83988
$L83989:

; 2458 : 
; 2459 : // copy vert UV' to poly UV's + set rgb's
; 2460 : 
; 2461 : 	FTOL(glow->Timer / PUTTYBOMB_COUNTDOWN2 * 128.0f, lmul);

	mov	eax, DWORD PTR _glow$[ebp]
	fld	DWORD PTR [eax]
	fdiv	DWORD PTR __real@3f800000
	fmul	DWORD PTR __real@43000000
	fadd	DWORD PTR __real@4b000000
	fstp	DWORD PTR __temp$83992[ebp]
	mov	eax, DWORD PTR __temp$83992[ebp]
	and	eax, 16777215				; 00ffffffH
	mov	DWORD PTR _lmul$[ebp], eax

; 2462 : 	rgb = lmul | lmul << 8 | lmul << 16;

	mov	eax, DWORD PTR _lmul$[ebp]
	shl	eax, 8
	or	eax, DWORD PTR _lmul$[ebp]
	mov	ecx, DWORD PTR _lmul$[ebp]
	shl	ecx, 16					; 00000010H
	or	eax, ecx
	mov	DWORD PTR _rgb$[ebp], eax

; 2463 : 
; 2464 : 	mp = model->PolyPtr;

	mov	eax, DWORD PTR _model$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	mov	DWORD PTR _mp$[ebp], ecx

; 2465 : 	mrgb = model->PolyRGB;

	mov	eax, DWORD PTR _model$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	mov	DWORD PTR _mrgb$[ebp], ecx

; 2466 : 
; 2467 : 	for (i = model->PolyNum ; i ; i--, mp++, mrgb++)

	mov	eax, DWORD PTR _model$[ebp]
	movsx	ecx, WORD PTR [eax+32]
	mov	DWORD PTR _i$[ebp], ecx
	jmp	SHORT $L83995
$L83996:
	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	mov	ecx, DWORD PTR _mp$[ebp]
	add	ecx, 52					; 00000034H
	mov	DWORD PTR _mp$[ebp], ecx
	mov	edx, DWORD PTR _mrgb$[ebp]
	add	edx, 16					; 00000010H
	mov	DWORD PTR _mrgb$[ebp], edx
$L83995:
	cmp	DWORD PTR _i$[ebp], 0
	je	$L83997

; 2468 : 	{
; 2469 : 		mp->tu0 = mp->v0->tu;

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _mp$[ebp]
	mov	eax, DWORD PTR [ecx+60]
	mov	DWORD PTR [edx+4], eax

; 2470 : 		mp->tv0 = mp->v0->tv;

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _mp$[ebp]
	mov	eax, DWORD PTR [ecx+64]
	mov	DWORD PTR [edx+8], eax

; 2471 : 
; 2472 : 		mp->tu1 = mp->v1->tu;

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	edx, DWORD PTR _mp$[ebp]
	mov	eax, DWORD PTR [ecx+60]
	mov	DWORD PTR [edx+12], eax

; 2473 : 		mp->tv1 = mp->v1->tv;

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	edx, DWORD PTR _mp$[ebp]
	mov	eax, DWORD PTR [ecx+64]
	mov	DWORD PTR [edx+16], eax

; 2474 : 
; 2475 : 		mp->tu2 = mp->v2->tu;

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	mov	edx, DWORD PTR _mp$[ebp]
	mov	eax, DWORD PTR [ecx+60]
	mov	DWORD PTR [edx+20], eax

; 2476 : 		mp->tv2 = mp->v2->tv;

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	mov	edx, DWORD PTR _mp$[ebp]
	mov	eax, DWORD PTR [ecx+64]
	mov	DWORD PTR [edx+24], eax

; 2477 : 
; 2478 : 		if (mp->Type & POLY_QUAD)

	mov	eax, DWORD PTR _mp$[ebp]
	movsx	ecx, WORD PTR [eax]
	and	ecx, 1
	je	SHORT $L83998

; 2479 : 		{
; 2480 : 			mp->tu3 = mp->v3->tu;

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	mov	edx, DWORD PTR _mp$[ebp]
	mov	eax, DWORD PTR [ecx+60]
	mov	DWORD PTR [edx+28], eax

; 2481 : 			mp->tv3 = mp->v3->tv;

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	mov	edx, DWORD PTR _mp$[ebp]
	mov	eax, DWORD PTR [ecx+64]
	mov	DWORD PTR [edx+32], eax
$L83998:

; 2482 : 		}	
; 2483 : 
; 2484 : 		*(long*)&mrgb->rgb[0] = rgb;

	mov	eax, DWORD PTR _mrgb$[ebp]
	mov	ecx, DWORD PTR _rgb$[ebp]
	mov	DWORD PTR [eax], ecx

; 2485 : 		*(long*)&mrgb->rgb[1] = rgb;

	mov	eax, DWORD PTR _mrgb$[ebp]
	mov	ecx, DWORD PTR _rgb$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 2486 : 		*(long*)&mrgb->rgb[2] = rgb;

	mov	eax, DWORD PTR _mrgb$[ebp]
	mov	ecx, DWORD PTR _rgb$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 2487 : 		*(long*)&mrgb->rgb[3] = rgb;

	mov	eax, DWORD PTR _mrgb$[ebp]
	mov	ecx, DWORD PTR _rgb$[ebp]
	mov	DWORD PTR [eax+12], ecx

; 2488 : 	}

	jmp	$L83996
$L83997:

; 2489 : 
; 2490 : // kill?
; 2491 : 
; 2492 : 	glow->Timer += TimeStep;

	mov	eax, DWORD PTR _glow$[ebp]
	fld	DWORD PTR ?TimeStep@@3MA		; TimeStep
	fadd	DWORD PTR [eax]
	mov	ecx, DWORD PTR _glow$[ebp]
	fstp	DWORD PTR [ecx]

; 2493 : 	if (glow->Timer >= PUTTYBOMB_COUNTDOWN2)

	mov	eax, DWORD PTR _glow$[ebp]
	fld	DWORD PTR [eax]
	fcomp	DWORD PTR __real@3f800000
	fnstsw	ax
	test	ah, 1
	jne	SHORT $L83974

; 2494 : 	{
; 2495 : 		OBJ_FreeObject(obj);

	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	call	?OBJ_FreeObject@@YAJPAUobject_def@@@Z	; OBJ_FreeObject
	add	esp, 4
$L83974:

; 2496 : 		return;
; 2497 : 	}
; 2498 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?BombGlowHandler@@YAXPAUobject_def@@@Z ENDP		; BombGlowHandler
_TEXT	ENDS
EXTRN	?CurrentTimer@@YAKXZ:NEAR			; CurrentTimer
EXTRN	?RotMatrixZ@@YAXPATMatrixUnion@@M@Z:NEAR	; RotMatrixZ
EXTRN	?DrawFacingPolyRotMirror@@YAXPAUVectorStruct@@PATMatrixUnion@@PAUFACING_POLY@@JM@Z:NEAR ; DrawFacingPolyRotMirror
; Function compile flags: /Odt /ZI
;	COMDAT ?RenderShockwave@@YAXPAUobject_def@@@Z
_TEXT	SEGMENT
tv134 = -156						; size = 8
tv95 = -148						; size = 8
_ang$ = -76						; size = 4
_mat$ = -72						; size = 36
_poly$ = -36						; size = 32
_shockwave$ = -4					; size = 4
_obj$ = 8						; size = 4
?RenderShockwave@@YAXPAUobject_def@@@Z PROC NEAR	; RenderShockwave, COMDAT

; 2505 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 156				; 0000009cH
	push	ebx
	push	esi
	push	edi

; 2506 : 	SHOCKWAVE_OBJ *shockwave = (SHOCKWAVE_OBJ*)obj->Data;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+684]
	mov	DWORD PTR _shockwave$[ebp], ecx

; 2507 : 	FACING_POLY poly;
; 2508 : 	MAT mat;
; 2509 : 	REAL ang;
; 2510 : 
; 2511 : // render head
; 2512 : 
; 2513 : 	if (shockwave->Alive)

	mov	eax, DWORD PTR _shockwave$[ebp]
	cmp	DWORD PTR [eax], 0
	je	$L84006

; 2514 : 	{
; 2515 : 		poly.Xsize = poly.Ysize = 40.0f;

	mov	DWORD PTR _poly$[ebp+4], 1109393408	; 42200000H
	mov	eax, DWORD PTR _poly$[ebp+4]
	mov	DWORD PTR _poly$[ebp], eax

; 2516 : 		poly.Tpage = TPAGE_FX1;

	mov	WORD PTR _poly$[ebp+24], 27		; 0000001bH

; 2517 : 		poly.U = 0.0f / 256.0f;

	mov	DWORD PTR _poly$[ebp+8], 0

; 2518 : 		poly.V = 64.0f / 256.0f;

	mov	DWORD PTR _poly$[ebp+12], 1048576000	; 3e800000H

; 2519 : 		poly.Usize = poly.Vsize = 64.0f / 256.0f;

	mov	DWORD PTR _poly$[ebp+20], 1048576000	; 3e800000H
	mov	eax, DWORD PTR _poly$[ebp+20]
	mov	DWORD PTR _poly$[ebp+16], eax

; 2520 : 		poly.RGB = 0xffffff;

	mov	DWORD PTR _poly$[ebp+28], 16777215	; 00ffffffH

; 2521 : 
; 2522 : 		ang = (float)TIME2MS(CurrentTimer()) / 2000.0f;

	call	?CurrentTimer@@YAKXZ			; CurrentTimer
	mov	DWORD PTR tv95[ebp], eax
	mov	DWORD PTR tv95[ebp+4], 0
	fild	QWORD PTR tv95[ebp]
	mov	eax, DWORD PTR ?TimerFreq@@3KA		; TimerFreq
	xor	edx, edx
	mov	ecx, 1000				; 000003e8H
	div	ecx
	mov	DWORD PTR tv134[ebp], eax
	mov	DWORD PTR tv134[ebp+4], 0
	fild	QWORD PTR tv134[ebp]
	fdivp	ST(1), ST(0)
	fdiv	DWORD PTR __real@44fa0000
	fstp	DWORD PTR _ang$[ebp]

; 2523 : 
; 2524 : 		RotMatrixZ(&mat, ang);

	mov	eax, DWORD PTR _ang$[ebp]
	push	eax
	lea	ecx, DWORD PTR _mat$[ebp]
	push	ecx
	call	?RotMatrixZ@@YAXPATMatrixUnion@@M@Z	; RotMatrixZ
	add	esp, 8

; 2525 : 		DrawFacingPolyRotMirror(&obj->body.Centre.Pos, &mat, &poly, 1, -128);

	push	-1023410176				; c3000000H
	push	1
	lea	eax, DWORD PTR _poly$[ebp]
	push	eax
	lea	ecx, DWORD PTR _mat$[ebp]
	push	ecx
	mov	edx, DWORD PTR _obj$[ebp]
	add	edx, 20					; 00000014H
	push	edx
	call	?DrawFacingPolyRotMirror@@YAXPAUVectorStruct@@PATMatrixUnion@@PAUFACING_POLY@@JM@Z ; DrawFacingPolyRotMirror
	add	esp, 20					; 00000014H

; 2526 : 
; 2527 : 		RotMatrixZ(&mat, -ang);

	fld	DWORD PTR _ang$[ebp]
	fchs
	push	ecx
	fstp	DWORD PTR [esp]
	lea	eax, DWORD PTR _mat$[ebp]
	push	eax
	call	?RotMatrixZ@@YAXPATMatrixUnion@@M@Z	; RotMatrixZ
	add	esp, 8

; 2528 : 		DrawFacingPolyRotMirror(&obj->body.Centre.Pos, &mat, &poly, 1, -128);

	push	-1023410176				; c3000000H
	push	1
	lea	eax, DWORD PTR _poly$[ebp]
	push	eax
	lea	ecx, DWORD PTR _mat$[ebp]
	push	ecx
	mov	edx, DWORD PTR _obj$[ebp]
	add	edx, 20					; 00000014H
	push	edx
	call	?DrawFacingPolyRotMirror@@YAXPAUVectorStruct@@PATMatrixUnion@@PAUFACING_POLY@@JM@Z ; DrawFacingPolyRotMirror
	add	esp, 20					; 00000014H
$L84006:

; 2529 : 	}
; 2530 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?RenderShockwave@@YAXPAUobject_def@@@Z ENDP		; RenderShockwave
_TEXT	ENDS
EXTRN	?WorldCubeCount@@3FA:WORD			; WorldCubeCount
; Function compile flags: /Odt /ZI
;	COMDAT ?ShockwaveWorldMeshFxChecker@@YAXPAX@Z
_TEXT	SEGMENT
_pull$ = -56						; size = 4
_mul$ = -52						; size = 4
_dist$ = -48						; size = 4
_wmv$ = -44						; size = 4
_wv$ = -40						; size = 4
_pos$ = -36						; size = 4
_vec$ = -32						; size = 12
_shockwave$ = -20					; size = 4
_obj$ = -16						; size = 4
_cubelist$ = -12					; size = 4
_j$ = -8						; size = 4
_i$ = -4						; size = 4
_data$ = 8						; size = 4
?ShockwaveWorldMeshFxChecker@@YAXPAX@Z PROC NEAR	; ShockwaveWorldMeshFxChecker, COMDAT

; 2537 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 120				; 00000078H
	push	ebx
	push	esi
	push	edi

; 2538 : 	long i, j;
; 2539 : 	CUBE_HEADER **cubelist;
; 2540 : 	OBJECT *obj = (OBJECT*)data;

	mov	eax, DWORD PTR _data$[ebp]
	mov	DWORD PTR _obj$[ebp], eax

; 2541 : 	SHOCKWAVE_OBJ *shockwave = (SHOCKWAVE_OBJ*)obj->Data;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+684]
	mov	DWORD PTR _shockwave$[ebp], ecx

; 2542 : 	VEC vec, *pos = &obj->body.Centre.Pos;

	mov	eax, DWORD PTR _obj$[ebp]
	add	eax, 20					; 00000014H
	mov	DWORD PTR _pos$[ebp], eax

; 2543 : 	WORLD_VERTEX *wv;
; 2544 : 	WORLD_MIRROR_VERTEX *wmv;
; 2545 : 	REAL dist, mul, pull;
; 2546 : 
; 2547 : // loop thru world cubes
; 2548 : 
; 2549 : 	cubelist = World.CubeList;

	mov	eax, DWORD PTR ?World@@3UWORLD@@A+12
	mov	DWORD PTR _cubelist$[ebp], eax

; 2550 : 
; 2551 : 	for (i = 0 ; i < WorldCubeCount ; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $L84031
$L84032:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$L84031:
	movsx	eax, WORD PTR ?WorldCubeCount@@3FA	; WorldCubeCount
	cmp	DWORD PTR _i$[ebp], eax
	jge	$L84016

; 2552 : 	{
; 2553 : 
; 2554 : // check bounding box
; 2555 : 
; 2556 : 		if (cubelist[i]->Xmin > shockwave->Box.XMax || cubelist[i]->Xmax < shockwave->Box.XMin ||
; 2557 : 			cubelist[i]->Ymin > shockwave->Box.YMax || cubelist[i]->Ymax < shockwave->Box.YMin ||
; 2558 : 			cubelist[i]->Zmin > shockwave->Box.ZMax || cubelist[i]->Zmax < shockwave->Box.ZMin)

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _cubelist$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _shockwave$[ebp]
	fld	DWORD PTR [edx+16]
	fcomp	DWORD PTR [eax+28]
	fnstsw	ax
	test	ah, 65					; 00000041H
	je	SHORT $L84035
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _cubelist$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _shockwave$[ebp]
	fld	DWORD PTR [edx+20]
	fcomp	DWORD PTR [eax+24]
	fnstsw	ax
	test	ah, 5
	jnp	SHORT $L84035
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _cubelist$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _shockwave$[ebp]
	fld	DWORD PTR [edx+24]
	fcomp	DWORD PTR [eax+36]
	fnstsw	ax
	test	ah, 65					; 00000041H
	je	SHORT $L84035
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _cubelist$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _shockwave$[ebp]
	fld	DWORD PTR [edx+28]
	fcomp	DWORD PTR [eax+32]
	fnstsw	ax
	test	ah, 5
	jnp	SHORT $L84035
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _cubelist$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _shockwave$[ebp]
	fld	DWORD PTR [edx+32]
	fcomp	DWORD PTR [eax+44]
	fnstsw	ax
	test	ah, 65					; 00000041H
	je	SHORT $L84035
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _cubelist$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _shockwave$[ebp]
	fld	DWORD PTR [edx+36]
	fcomp	DWORD PTR [eax+40]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L84034
$L84035:

; 2559 : 				continue;

	jmp	$L84032
$L84034:

; 2560 : 
; 2561 : // check spheres
; 2562 : 
; 2563 : 		SubVector((VEC*)&cubelist[i]->CentreX, pos, &vec);

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _cubelist$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _pos$[ebp]
	fld	DWORD PTR [edx]
	fsub	DWORD PTR [eax]
	fstp	DWORD PTR _vec$[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _cubelist$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _pos$[ebp]
	fld	DWORD PTR [edx+4]
	fsub	DWORD PTR [eax+4]
	fstp	DWORD PTR _vec$[ebp+4]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _cubelist$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _pos$[ebp]
	fld	DWORD PTR [edx+8]
	fsub	DWORD PTR [eax+8]
	fstp	DWORD PTR _vec$[ebp+8]

; 2564 : 		if (Length(&vec) > cubelist[i]->Radius + shockwave->Reach)

	fld	DWORD PTR _vec$[ebp]
	fmul	DWORD PTR _vec$[ebp]
	fld	DWORD PTR _vec$[ebp+4]
	fmul	DWORD PTR _vec$[ebp+4]
	faddp	ST(1), ST(0)
	fld	DWORD PTR _vec$[ebp+8]
	fmul	DWORD PTR _vec$[ebp+8]
	faddp	ST(1), ST(0)
	push	ecx
	fstp	DWORD PTR [esp]
	call	?sqrt@@YAMM@Z				; sqrt
	add	esp, 4
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _cubelist$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _shockwave$[ebp]
	fld	DWORD PTR [edx+12]
	fadd	DWORD PTR [eax+8]
	fcompp
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L84040

; 2565 : 			continue;

	jmp	$L84032
$L84040:

; 2566 : 
; 2567 : // ok, set verts
; 2568 : 
; 2569 : 		if (cubelist[i]->MeshFxFlag & MESHFX_USENEWVERTS)

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _cubelist$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [edx+60]
	and	eax, 1
	je	$L84041

; 2570 : 		{
; 2571 : 			wv = cubelist[i]->Model.VertPtr;

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _cubelist$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [edx+104]
	mov	DWORD PTR _wv$[ebp], eax

; 2572 : 			for (j = cubelist[i]->Model.VertNum ; j ; j--, wv++)

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _cubelist$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	movsx	eax, WORD PTR [edx+74]
	mov	DWORD PTR _j$[ebp], eax
	jmp	SHORT $L84042
$L84043:
	mov	eax, DWORD PTR _j$[ebp]
	sub	eax, 1
	mov	DWORD PTR _j$[ebp], eax
	mov	ecx, DWORD PTR _wv$[ebp]
	add	ecx, 92					; 0000005cH
	mov	DWORD PTR _wv$[ebp], ecx
$L84042:
	cmp	DWORD PTR _j$[ebp], 0
	je	$L84044

; 2573 : 			{
; 2574 : 				SubVector((VEC*)&wv->x2, pos, &vec);

	mov	eax, DWORD PTR _wv$[ebp]
	mov	ecx, DWORD PTR _pos$[ebp]
	fld	DWORD PTR [eax+12]
	fsub	DWORD PTR [ecx]
	fstp	DWORD PTR _vec$[ebp]
	mov	eax, DWORD PTR _wv$[ebp]
	mov	ecx, DWORD PTR _pos$[ebp]
	fld	DWORD PTR [eax+16]
	fsub	DWORD PTR [ecx+4]
	fstp	DWORD PTR _vec$[ebp+4]
	mov	eax, DWORD PTR _wv$[ebp]
	mov	ecx, DWORD PTR _pos$[ebp]
	fld	DWORD PTR [eax+20]
	fsub	DWORD PTR [ecx+8]
	fstp	DWORD PTR _vec$[ebp+8]

; 2575 : 				dist = Length(&vec);

	fld	DWORD PTR _vec$[ebp]
	fmul	DWORD PTR _vec$[ebp]
	fld	DWORD PTR _vec$[ebp+4]
	fmul	DWORD PTR _vec$[ebp+4]
	faddp	ST(1), ST(0)
	fld	DWORD PTR _vec$[ebp+8]
	fmul	DWORD PTR _vec$[ebp+8]
	faddp	ST(1), ST(0)
	push	ecx
	fstp	DWORD PTR [esp]
	call	?sqrt@@YAMM@Z				; sqrt
	add	esp, 4
	fstp	DWORD PTR _dist$[ebp]

; 2576 : 				if (dist < shockwave->Reach)

	mov	eax, DWORD PTR _shockwave$[ebp]
	fld	DWORD PTR _dist$[ebp]
	fcomp	DWORD PTR [eax+8]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L84049

; 2577 : 				{
; 2578 : 					pull = (shockwave->Reach - dist) * SHOCKWAVE_PULL_MAX_MUL;

	mov	eax, DWORD PTR _shockwave$[ebp]
	fld	DWORD PTR [eax+8]
	fsub	DWORD PTR _dist$[ebp]
	fmul	DWORD PTR __real@3dcccccd
	fstp	DWORD PTR _pull$[ebp]

; 2579 : 					if (pull > dist * SHOCKWAVE_PULL_MIN_MUL) pull = dist * SHOCKWAVE_PULL_MIN_MUL;

	fld	DWORD PTR _dist$[ebp]
	fmul	DWORD PTR __real@3f000000
	fcomp	DWORD PTR _pull$[ebp]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L84050
	fld	DWORD PTR _dist$[ebp]
	fmul	DWORD PTR __real@3f000000
	fstp	DWORD PTR _pull$[ebp]
$L84050:

; 2580 : 					mul = pull / dist;

	fld	DWORD PTR _pull$[ebp]
	fdiv	DWORD PTR _dist$[ebp]
	fstp	DWORD PTR _mul$[ebp]

; 2581 : 					VecMinusScalarVec((VEC*)&wv->x2, mul, &vec, (VEC*)&wv->x2);

	fld	DWORD PTR _mul$[ebp]
	fmul	DWORD PTR _vec$[ebp]
	mov	eax, DWORD PTR _wv$[ebp]
	fsubr	DWORD PTR [eax+12]
	mov	ecx, DWORD PTR _wv$[ebp]
	fstp	DWORD PTR [ecx+12]
	fld	DWORD PTR _mul$[ebp]
	fmul	DWORD PTR _vec$[ebp+4]
	mov	eax, DWORD PTR _wv$[ebp]
	fsubr	DWORD PTR [eax+16]
	mov	ecx, DWORD PTR _wv$[ebp]
	fstp	DWORD PTR [ecx+16]
	fld	DWORD PTR _mul$[ebp]
	fmul	DWORD PTR _vec$[ebp+8]
	mov	eax, DWORD PTR _wv$[ebp]
	fsubr	DWORD PTR [eax+20]
	mov	ecx, DWORD PTR _wv$[ebp]
	fstp	DWORD PTR [ecx+20]
$L84049:

; 2582 : 				}
; 2583 : 			}

	jmp	$L84043
$L84044:

; 2584 : 
; 2585 : 			wmv = cubelist[i]->Model.MirrorVertPtr;

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _cubelist$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [edx+112]
	mov	DWORD PTR _wmv$[ebp], eax

; 2586 : 			for (j = cubelist[i]->Model.MirrorVertNum ; j ; j--, wmv++)

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _cubelist$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	movsx	eax, WORD PTR [edx+86]
	mov	DWORD PTR _j$[ebp], eax
	jmp	SHORT $L84057
$L84058:
	mov	eax, DWORD PTR _j$[ebp]
	sub	eax, 1
	mov	DWORD PTR _j$[ebp], eax
	mov	ecx, DWORD PTR _wmv$[ebp]
	add	ecx, 56					; 00000038H
	mov	DWORD PTR _wmv$[ebp], ecx
$L84057:
	cmp	DWORD PTR _j$[ebp], 0
	je	$L84059

; 2587 : 			{
; 2588 : 				SubVector((VEC*)&wmv->RealVertex->x2, pos, &vec);

	mov	eax, DWORD PTR _wmv$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	mov	edx, DWORD PTR _pos$[ebp]
	fld	DWORD PTR [ecx+12]
	fsub	DWORD PTR [edx]
	fstp	DWORD PTR _vec$[ebp]
	mov	eax, DWORD PTR _wmv$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	mov	edx, DWORD PTR _pos$[ebp]
	fld	DWORD PTR [ecx+16]
	fsub	DWORD PTR [edx+4]
	fstp	DWORD PTR _vec$[ebp+4]
	mov	eax, DWORD PTR _wmv$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	mov	edx, DWORD PTR _pos$[ebp]
	fld	DWORD PTR [ecx+20]
	fsub	DWORD PTR [edx+8]
	fstp	DWORD PTR _vec$[ebp+8]

; 2589 : 				dist = Length(&vec);

	fld	DWORD PTR _vec$[ebp]
	fmul	DWORD PTR _vec$[ebp]
	fld	DWORD PTR _vec$[ebp+4]
	fmul	DWORD PTR _vec$[ebp+4]
	faddp	ST(1), ST(0)
	fld	DWORD PTR _vec$[ebp+8]
	fmul	DWORD PTR _vec$[ebp+8]
	faddp	ST(1), ST(0)
	push	ecx
	fstp	DWORD PTR [esp]
	call	?sqrt@@YAMM@Z				; sqrt
	add	esp, 4
	fstp	DWORD PTR _dist$[ebp]

; 2590 : 				if (dist < shockwave->Reach)

	mov	eax, DWORD PTR _shockwave$[ebp]
	fld	DWORD PTR _dist$[ebp]
	fcomp	DWORD PTR [eax+8]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L84064

; 2591 : 				{
; 2592 : 					pull = (shockwave->Reach - dist) * SHOCKWAVE_PULL_MAX_MUL;

	mov	eax, DWORD PTR _shockwave$[ebp]
	fld	DWORD PTR [eax+8]
	fsub	DWORD PTR _dist$[ebp]
	fmul	DWORD PTR __real@3dcccccd
	fstp	DWORD PTR _pull$[ebp]

; 2593 : 					if (pull > dist * SHOCKWAVE_PULL_MIN_MUL) pull = dist * SHOCKWAVE_PULL_MIN_MUL;

	fld	DWORD PTR _dist$[ebp]
	fmul	DWORD PTR __real@3f000000
	fcomp	DWORD PTR _pull$[ebp]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L84065
	fld	DWORD PTR _dist$[ebp]
	fmul	DWORD PTR __real@3f000000
	fstp	DWORD PTR _pull$[ebp]
$L84065:

; 2594 : 					mul = pull / dist;

	fld	DWORD PTR _pull$[ebp]
	fdiv	DWORD PTR _dist$[ebp]
	fstp	DWORD PTR _mul$[ebp]

; 2595 : 					VecMinusScalarVec((VEC*)&wmv->x2, mul, &vec, (VEC*)&wmv->x2);

	fld	DWORD PTR _mul$[ebp]
	fmul	DWORD PTR _vec$[ebp]
	mov	eax, DWORD PTR _wmv$[ebp]
	fsubr	DWORD PTR [eax+12]
	mov	ecx, DWORD PTR _wmv$[ebp]
	fstp	DWORD PTR [ecx+12]
	fld	DWORD PTR _mul$[ebp]
	fmul	DWORD PTR _vec$[ebp+4]
	mov	eax, DWORD PTR _wmv$[ebp]
	fsubr	DWORD PTR [eax+16]
	mov	ecx, DWORD PTR _wmv$[ebp]
	fstp	DWORD PTR [ecx+16]
	fld	DWORD PTR _mul$[ebp]
	fmul	DWORD PTR _vec$[ebp+8]
	mov	eax, DWORD PTR _wmv$[ebp]
	fsubr	DWORD PTR [eax+20]
	mov	ecx, DWORD PTR _wmv$[ebp]
	fstp	DWORD PTR [ecx+20]
$L84064:

; 2596 : 				}
; 2597 : 			}

	jmp	$L84058
$L84059:

; 2598 : 		}
; 2599 : 		else

	jmp	$L84072
$L84041:

; 2600 : 		{
; 2601 : 			wv = cubelist[i]->Model.VertPtr;

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _cubelist$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [edx+104]
	mov	DWORD PTR _wv$[ebp], eax

; 2602 : 			for (j = cubelist[i]->Model.VertNum ; j ; j--, wv++)

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _cubelist$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	movsx	eax, WORD PTR [edx+74]
	mov	DWORD PTR _j$[ebp], eax
	jmp	SHORT $L84073
$L84074:
	mov	eax, DWORD PTR _j$[ebp]
	sub	eax, 1
	mov	DWORD PTR _j$[ebp], eax
	mov	ecx, DWORD PTR _wv$[ebp]
	add	ecx, 92					; 0000005cH
	mov	DWORD PTR _wv$[ebp], ecx
$L84073:
	cmp	DWORD PTR _j$[ebp], 0
	je	$L84075

; 2603 : 			{
; 2604 : 				SubVector((VEC*)&wv->x, pos, &vec);

	mov	eax, DWORD PTR _wv$[ebp]
	mov	ecx, DWORD PTR _pos$[ebp]
	fld	DWORD PTR [eax]
	fsub	DWORD PTR [ecx]
	fstp	DWORD PTR _vec$[ebp]
	mov	eax, DWORD PTR _wv$[ebp]
	mov	ecx, DWORD PTR _pos$[ebp]
	fld	DWORD PTR [eax+4]
	fsub	DWORD PTR [ecx+4]
	fstp	DWORD PTR _vec$[ebp+4]
	mov	eax, DWORD PTR _wv$[ebp]
	mov	ecx, DWORD PTR _pos$[ebp]
	fld	DWORD PTR [eax+8]
	fsub	DWORD PTR [ecx+8]
	fstp	DWORD PTR _vec$[ebp+8]

; 2605 : 				dist = Length(&vec);

	fld	DWORD PTR _vec$[ebp]
	fmul	DWORD PTR _vec$[ebp]
	fld	DWORD PTR _vec$[ebp+4]
	fmul	DWORD PTR _vec$[ebp+4]
	faddp	ST(1), ST(0)
	fld	DWORD PTR _vec$[ebp+8]
	fmul	DWORD PTR _vec$[ebp+8]
	faddp	ST(1), ST(0)
	push	ecx
	fstp	DWORD PTR [esp]
	call	?sqrt@@YAMM@Z				; sqrt
	add	esp, 4
	fstp	DWORD PTR _dist$[ebp]

; 2606 : 				if (dist < shockwave->Reach)

	mov	eax, DWORD PTR _shockwave$[ebp]
	fld	DWORD PTR _dist$[ebp]
	fcomp	DWORD PTR [eax+8]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L84080

; 2607 : 				{
; 2608 : 					pull = (shockwave->Reach - dist) * SHOCKWAVE_PULL_MAX_MUL;

	mov	eax, DWORD PTR _shockwave$[ebp]
	fld	DWORD PTR [eax+8]
	fsub	DWORD PTR _dist$[ebp]
	fmul	DWORD PTR __real@3dcccccd
	fstp	DWORD PTR _pull$[ebp]

; 2609 : 					if (pull > dist * SHOCKWAVE_PULL_MIN_MUL) pull = dist * SHOCKWAVE_PULL_MIN_MUL;

	fld	DWORD PTR _dist$[ebp]
	fmul	DWORD PTR __real@3f000000
	fcomp	DWORD PTR _pull$[ebp]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L84081
	fld	DWORD PTR _dist$[ebp]
	fmul	DWORD PTR __real@3f000000
	fstp	DWORD PTR _pull$[ebp]
$L84081:

; 2610 : 					mul = pull / dist;

	fld	DWORD PTR _pull$[ebp]
	fdiv	DWORD PTR _dist$[ebp]
	fstp	DWORD PTR _mul$[ebp]

; 2611 : 					VecMinusScalarVec((VEC*)&wv->x, mul, &vec, (VEC*)&wv->x2);

	fld	DWORD PTR _mul$[ebp]
	fmul	DWORD PTR _vec$[ebp]
	mov	eax, DWORD PTR _wv$[ebp]
	fsubr	DWORD PTR [eax]
	mov	ecx, DWORD PTR _wv$[ebp]
	fstp	DWORD PTR [ecx+12]
	fld	DWORD PTR _mul$[ebp]
	fmul	DWORD PTR _vec$[ebp+4]
	mov	eax, DWORD PTR _wv$[ebp]
	fsubr	DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _wv$[ebp]
	fstp	DWORD PTR [ecx+16]
	fld	DWORD PTR _mul$[ebp]
	fmul	DWORD PTR _vec$[ebp+8]
	mov	eax, DWORD PTR _wv$[ebp]
	fsubr	DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _wv$[ebp]
	fstp	DWORD PTR [ecx+20]

; 2612 : 				}
; 2613 : 				else

	jmp	SHORT $L84088
$L84080:

; 2614 : 				{
; 2615 : 					CopyVec((VEC*)&wv->x, (VEC*)&wv->x2);

	mov	eax, DWORD PTR _wv$[ebp]
	mov	ecx, DWORD PTR _wv$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _wv$[ebp]
	mov	ecx, DWORD PTR _wv$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+16], edx
	mov	eax, DWORD PTR _wv$[ebp]
	mov	ecx, DWORD PTR _wv$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+20], edx
$L84088:

; 2616 : 				}
; 2617 : 			}

	jmp	$L84074
$L84075:

; 2618 : 
; 2619 : 			wmv = cubelist[i]->Model.MirrorVertPtr;

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _cubelist$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [edx+112]
	mov	DWORD PTR _wmv$[ebp], eax

; 2620 : 			for (j = cubelist[i]->Model.MirrorVertNum ; j ; j--, wmv++)

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _cubelist$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	movsx	eax, WORD PTR [edx+86]
	mov	DWORD PTR _j$[ebp], eax
	jmp	SHORT $L84095
$L84096:
	mov	eax, DWORD PTR _j$[ebp]
	sub	eax, 1
	mov	DWORD PTR _j$[ebp], eax
	mov	ecx, DWORD PTR _wmv$[ebp]
	add	ecx, 56					; 00000038H
	mov	DWORD PTR _wmv$[ebp], ecx
$L84095:
	cmp	DWORD PTR _j$[ebp], 0
	je	$L84072

; 2621 : 			{
; 2622 : 				SubVector((VEC*)&wmv->RealVertex->x, pos, &vec);

	mov	eax, DWORD PTR _wmv$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	mov	edx, DWORD PTR _pos$[ebp]
	fld	DWORD PTR [ecx]
	fsub	DWORD PTR [edx]
	fstp	DWORD PTR _vec$[ebp]
	mov	eax, DWORD PTR _wmv$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	mov	edx, DWORD PTR _pos$[ebp]
	fld	DWORD PTR [ecx+4]
	fsub	DWORD PTR [edx+4]
	fstp	DWORD PTR _vec$[ebp+4]
	mov	eax, DWORD PTR _wmv$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	mov	edx, DWORD PTR _pos$[ebp]
	fld	DWORD PTR [ecx+8]
	fsub	DWORD PTR [edx+8]
	fstp	DWORD PTR _vec$[ebp+8]

; 2623 : 				dist = Length(&vec);

	fld	DWORD PTR _vec$[ebp]
	fmul	DWORD PTR _vec$[ebp]
	fld	DWORD PTR _vec$[ebp+4]
	fmul	DWORD PTR _vec$[ebp+4]
	faddp	ST(1), ST(0)
	fld	DWORD PTR _vec$[ebp+8]
	fmul	DWORD PTR _vec$[ebp+8]
	faddp	ST(1), ST(0)
	push	ecx
	fstp	DWORD PTR [esp]
	call	?sqrt@@YAMM@Z				; sqrt
	add	esp, 4
	fstp	DWORD PTR _dist$[ebp]

; 2624 : 				if (dist < shockwave->Reach)

	mov	eax, DWORD PTR _shockwave$[ebp]
	fld	DWORD PTR _dist$[ebp]
	fcomp	DWORD PTR [eax+8]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L84102

; 2625 : 				{
; 2626 : 					pull = (shockwave->Reach - dist) * SHOCKWAVE_PULL_MAX_MUL;

	mov	eax, DWORD PTR _shockwave$[ebp]
	fld	DWORD PTR [eax+8]
	fsub	DWORD PTR _dist$[ebp]
	fmul	DWORD PTR __real@3dcccccd
	fstp	DWORD PTR _pull$[ebp]

; 2627 : 					if (pull > dist * SHOCKWAVE_PULL_MIN_MUL) pull = dist * SHOCKWAVE_PULL_MIN_MUL;

	fld	DWORD PTR _dist$[ebp]
	fmul	DWORD PTR __real@3f000000
	fcomp	DWORD PTR _pull$[ebp]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L84103
	fld	DWORD PTR _dist$[ebp]
	fmul	DWORD PTR __real@3f000000
	fstp	DWORD PTR _pull$[ebp]
$L84103:

; 2628 : 					mul = pull / dist;

	fld	DWORD PTR _pull$[ebp]
	fdiv	DWORD PTR _dist$[ebp]
	fstp	DWORD PTR _mul$[ebp]

; 2629 : 					VecMinusScalarVec((VEC*)&wmv->x, mul, &vec, (VEC*)&wmv->x2);

	fld	DWORD PTR _mul$[ebp]
	fmul	DWORD PTR _vec$[ebp]
	mov	eax, DWORD PTR _wmv$[ebp]
	fsubr	DWORD PTR [eax]
	mov	ecx, DWORD PTR _wmv$[ebp]
	fstp	DWORD PTR [ecx+12]
	fld	DWORD PTR _mul$[ebp]
	fmul	DWORD PTR _vec$[ebp+4]
	mov	eax, DWORD PTR _wmv$[ebp]
	fsubr	DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _wmv$[ebp]
	fstp	DWORD PTR [ecx+16]
	fld	DWORD PTR _mul$[ebp]
	fmul	DWORD PTR _vec$[ebp+8]
	mov	eax, DWORD PTR _wmv$[ebp]
	fsubr	DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _wmv$[ebp]
	fstp	DWORD PTR [ecx+20]

; 2630 : 				}
; 2631 : 				else

	jmp	SHORT $L84110
$L84102:

; 2632 : 				{
; 2633 : 					CopyVec((VEC*)&wmv->x, (VEC*)&wmv->x2);

	mov	eax, DWORD PTR _wmv$[ebp]
	mov	ecx, DWORD PTR _wmv$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _wmv$[ebp]
	mov	ecx, DWORD PTR _wmv$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+16], edx
	mov	eax, DWORD PTR _wmv$[ebp]
	mov	ecx, DWORD PTR _wmv$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+20], edx
$L84110:

; 2634 : 				}
; 2635 : 			}

	jmp	$L84096
$L84072:

; 2636 : 		}
; 2637 : 
; 2638 : // set mesh flag
; 2639 : 
; 2640 : 		cubelist[i]->MeshFxFlag |= MESHFX_USENEWVERTS;

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _cubelist$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [edx+60]
	or	eax, 1
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _cubelist$[ebp]
	mov	ecx, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR [ecx+60], eax

; 2641 : 	}

	jmp	$L84032
$L84016:

; 2642 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?ShockwaveWorldMeshFxChecker@@YAXPAX@Z ENDP		; ShockwaveWorldMeshFxChecker
_TEXT	ENDS
EXTRN	?ModelMeshModel@@3PAUMODEL@@A:DWORD		; ModelMeshModel
EXTRN	?ModelMeshMat@@3PATMatrixUnion@@A:DWORD		; ModelMeshMat
EXTRN	?ModelMeshPos@@3PAUVectorStruct@@A:DWORD	; ModelMeshPos
EXTRN	?ModelMeshFlag@@3PAFA:DWORD			; ModelMeshFlag
; Function compile flags: /Odt /ZI
;	COMDAT ?ShockwaveModelMeshFxChecker@@YAXPAX@Z
_TEXT	SEGMENT
_mv$ = -68						; size = 4
_vec$ = -64						; size = 12
_newdelta$ = -52					; size = 12
_delta$ = -40						; size = 12
_shockwave$ = -28					; size = 4
_obj$ = -24						; size = 4
_rad$ = -20						; size = 4
_mul$ = -16						; size = 4
_dist$ = -12						; size = 4
_pull$ = -8						; size = 4
_j$ = -4						; size = 4
_data$ = 8						; size = 4
?ShockwaveModelMeshFxChecker@@YAXPAX@Z PROC NEAR	; ShockwaveModelMeshFxChecker, COMDAT

; 2649 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 132				; 00000084H
	push	ebx
	push	esi
	push	edi

; 2650 : 	long j;
; 2651 : 	REAL pull, dist, mul, rad = ModelMeshModel->Radius;

	mov	eax, DWORD PTR ?ModelMeshModel@@3PAUMODEL@@A ; ModelMeshModel
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _rad$[ebp], ecx

; 2652 : 	OBJECT *obj = (OBJECT*)data;

	mov	eax, DWORD PTR _data$[ebp]
	mov	DWORD PTR _obj$[ebp], eax

; 2653 : 	SHOCKWAVE_OBJ *shockwave = (SHOCKWAVE_OBJ*)obj->Data;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+684]
	mov	DWORD PTR _shockwave$[ebp], ecx

; 2654 : 	VEC delta, newdelta, vec;
; 2655 : 	MODEL_VERTEX *mv;
; 2656 : 
; 2657 : // quick radius bounding box test
; 2658 : 
; 2659 : 	if (ModelMeshPos->v[X] + rad < shockwave->Box.XMin ||
; 2660 : 		ModelMeshPos->v[X] - rad > shockwave->Box.XMax ||
; 2661 : 		ModelMeshPos->v[Y] + rad < shockwave->Box.YMin ||
; 2662 : 		ModelMeshPos->v[Y] - rad > shockwave->Box.YMax ||
; 2663 : 		ModelMeshPos->v[Z] + rad < shockwave->Box.ZMin ||
; 2664 : 		ModelMeshPos->v[Z] - rad > shockwave->Box.ZMax)

	mov	eax, DWORD PTR ?ModelMeshPos@@3PAUVectorStruct@@A ; ModelMeshPos
	fld	DWORD PTR _rad$[ebp]
	fadd	DWORD PTR [eax]
	mov	ecx, DWORD PTR _shockwave$[ebp]
	fcomp	DWORD PTR [ecx+24]
	fnstsw	ax
	test	ah, 5
	jnp	SHORT $L84134
	mov	eax, DWORD PTR ?ModelMeshPos@@3PAUVectorStruct@@A ; ModelMeshPos
	fld	DWORD PTR [eax]
	fsub	DWORD PTR _rad$[ebp]
	mov	ecx, DWORD PTR _shockwave$[ebp]
	fcomp	DWORD PTR [ecx+28]
	fnstsw	ax
	test	ah, 65					; 00000041H
	je	SHORT $L84134
	mov	eax, DWORD PTR ?ModelMeshPos@@3PAUVectorStruct@@A ; ModelMeshPos
	fld	DWORD PTR _rad$[ebp]
	fadd	DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _shockwave$[ebp]
	fcomp	DWORD PTR [ecx+32]
	fnstsw	ax
	test	ah, 5
	jnp	SHORT $L84134
	mov	eax, DWORD PTR ?ModelMeshPos@@3PAUVectorStruct@@A ; ModelMeshPos
	fld	DWORD PTR [eax+4]
	fsub	DWORD PTR _rad$[ebp]
	mov	ecx, DWORD PTR _shockwave$[ebp]
	fcomp	DWORD PTR [ecx+36]
	fnstsw	ax
	test	ah, 65					; 00000041H
	je	SHORT $L84134
	mov	eax, DWORD PTR ?ModelMeshPos@@3PAUVectorStruct@@A ; ModelMeshPos
	fld	DWORD PTR _rad$[ebp]
	fadd	DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _shockwave$[ebp]
	fcomp	DWORD PTR [ecx+40]
	fnstsw	ax
	test	ah, 5
	jnp	SHORT $L84134
	mov	eax, DWORD PTR ?ModelMeshPos@@3PAUVectorStruct@@A ; ModelMeshPos
	fld	DWORD PTR [eax+8]
	fsub	DWORD PTR _rad$[ebp]
	mov	ecx, DWORD PTR _shockwave$[ebp]
	fcomp	DWORD PTR [ecx+44]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $L84133
$L84134:

; 2665 : 			return;

	jmp	$L84119
$L84133:

; 2666 : 
; 2667 : // get delta vector
; 2668 : 
; 2669 : 	SubVector(&obj->body.Centre.Pos, ModelMeshPos, &delta);

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR ?ModelMeshPos@@3PAUVectorStruct@@A ; ModelMeshPos
	fld	DWORD PTR [eax+20]
	fsub	DWORD PTR [ecx]
	fstp	DWORD PTR _delta$[ebp]
	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR ?ModelMeshPos@@3PAUVectorStruct@@A ; ModelMeshPos
	fld	DWORD PTR [eax+24]
	fsub	DWORD PTR [ecx+4]
	fstp	DWORD PTR _delta$[ebp+4]
	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR ?ModelMeshPos@@3PAUVectorStruct@@A ; ModelMeshPos
	fld	DWORD PTR [eax+28]
	fsub	DWORD PTR [ecx+8]
	fstp	DWORD PTR _delta$[ebp+8]

; 2670 : 
; 2671 : // sphere test
; 2672 : 
; 2673 : 	dist = Length(&delta);

	fld	DWORD PTR _delta$[ebp]
	fmul	DWORD PTR _delta$[ebp]
	fld	DWORD PTR _delta$[ebp+4]
	fmul	DWORD PTR _delta$[ebp+4]
	faddp	ST(1), ST(0)
	fld	DWORD PTR _delta$[ebp+8]
	fmul	DWORD PTR _delta$[ebp+8]
	faddp	ST(1), ST(0)
	push	ecx
	fstp	DWORD PTR [esp]
	call	?sqrt@@YAMM@Z				; sqrt
	add	esp, 4
	fstp	DWORD PTR _dist$[ebp]

; 2674 : 	if (dist > rad + shockwave->Reach)

	mov	eax, DWORD PTR _shockwave$[ebp]
	fld	DWORD PTR _rad$[ebp]
	fadd	DWORD PTR [eax+8]
	fcomp	DWORD PTR _dist$[ebp]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L84136

; 2675 : 		return;

	jmp	$L84119
$L84136:

; 2676 : 
; 2677 : // put delta vector into model space
; 2678 : 
; 2679 : 	TransposeRotVector(ModelMeshMat, &delta, &newdelta);

	lea	eax, DWORD PTR _newdelta$[ebp]
	push	eax
	lea	ecx, DWORD PTR _delta$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?ModelMeshMat@@3PATMatrixUnion@@A ; ModelMeshMat
	push	edx
	call	?TransposeRotVector@@YAXPATMatrixUnion@@PAUVectorStruct@@1@Z ; TransposeRotVector
	add	esp, 12					; 0000000cH

; 2680 : 
; 2681 : // proper bounding box test
; 2682 : 
; 2683 : 	if (ModelMeshModel->Xmax < newdelta.v[X] - shockwave->Reach ||
; 2684 : 		ModelMeshModel->Xmin > newdelta.v[X] + shockwave->Reach ||
; 2685 : 		ModelMeshModel->Ymax < newdelta.v[Y] - shockwave->Reach ||
; 2686 : 		ModelMeshModel->Ymin > newdelta.v[Y] + shockwave->Reach ||
; 2687 : 		ModelMeshModel->Zmax < newdelta.v[Z] - shockwave->Reach ||
; 2688 : 		ModelMeshModel->Zmin > newdelta.v[Z] + shockwave->Reach)

	mov	eax, DWORD PTR _shockwave$[ebp]
	fld	DWORD PTR _newdelta$[ebp]
	fsub	DWORD PTR [eax+8]
	mov	ecx, DWORD PTR ?ModelMeshModel@@3PAUMODEL@@A ; ModelMeshModel
	fcomp	DWORD PTR [ecx+8]
	fnstsw	ax
	test	ah, 65					; 00000041H
	je	SHORT $L84138
	mov	eax, DWORD PTR _shockwave$[ebp]
	fld	DWORD PTR _newdelta$[ebp]
	fadd	DWORD PTR [eax+8]
	mov	ecx, DWORD PTR ?ModelMeshModel@@3PAUMODEL@@A ; ModelMeshModel
	fcomp	DWORD PTR [ecx+4]
	fnstsw	ax
	test	ah, 5
	jnp	SHORT $L84138
	mov	eax, DWORD PTR _shockwave$[ebp]
	fld	DWORD PTR _newdelta$[ebp+4]
	fsub	DWORD PTR [eax+8]
	mov	ecx, DWORD PTR ?ModelMeshModel@@3PAUMODEL@@A ; ModelMeshModel
	fcomp	DWORD PTR [ecx+16]
	fnstsw	ax
	test	ah, 65					; 00000041H
	je	SHORT $L84138
	mov	eax, DWORD PTR _shockwave$[ebp]
	fld	DWORD PTR _newdelta$[ebp+4]
	fadd	DWORD PTR [eax+8]
	mov	ecx, DWORD PTR ?ModelMeshModel@@3PAUMODEL@@A ; ModelMeshModel
	fcomp	DWORD PTR [ecx+12]
	fnstsw	ax
	test	ah, 5
	jnp	SHORT $L84138
	mov	eax, DWORD PTR _shockwave$[ebp]
	fld	DWORD PTR _newdelta$[ebp+8]
	fsub	DWORD PTR [eax+8]
	mov	ecx, DWORD PTR ?ModelMeshModel@@3PAUMODEL@@A ; ModelMeshModel
	fcomp	DWORD PTR [ecx+24]
	fnstsw	ax
	test	ah, 65					; 00000041H
	je	SHORT $L84138
	mov	eax, DWORD PTR _shockwave$[ebp]
	fld	DWORD PTR _newdelta$[ebp+8]
	fadd	DWORD PTR [eax+8]
	mov	ecx, DWORD PTR ?ModelMeshModel@@3PAUMODEL@@A ; ModelMeshModel
	fcomp	DWORD PTR [ecx+20]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L84137
$L84138:

; 2689 : 			return;

	jmp	$L84119
$L84137:

; 2690 : 
; 2691 : // ok, set verts
; 2692 : 
; 2693 : 		mv = ModelMeshModel->VertPtr;

	mov	eax, DWORD PTR ?ModelMeshModel@@3PAUMODEL@@A ; ModelMeshModel
	mov	ecx, DWORD PTR [eax+52]
	mov	DWORD PTR _mv$[ebp], ecx

; 2694 : 
; 2695 : 		if (*ModelMeshFlag & MODEL_USENEWVERTS)

	mov	eax, DWORD PTR ?ModelMeshFlag@@3PAFA	; ModelMeshFlag
	movsx	ecx, WORD PTR [eax]
	and	ecx, 128				; 00000080H
	je	$L84139

; 2696 : 		{
; 2697 : 			for (j = ModelMeshModel->VertNum ; j ; j--, mv++)

	mov	eax, DWORD PTR ?ModelMeshModel@@3PAUMODEL@@A ; ModelMeshModel
	movsx	ecx, WORD PTR [eax+34]
	mov	DWORD PTR _j$[ebp], ecx
	jmp	SHORT $L84140
$L84141:
	mov	eax, DWORD PTR _j$[ebp]
	sub	eax, 1
	mov	DWORD PTR _j$[ebp], eax
	mov	ecx, DWORD PTR _mv$[ebp]
	add	ecx, 88					; 00000058H
	mov	DWORD PTR _mv$[ebp], ecx
$L84140:
	cmp	DWORD PTR _j$[ebp], 0
	je	$L84142

; 2698 : 			{
; 2699 : 				SubVector((VEC*)&mv->x2, &newdelta, &vec);

	mov	eax, DWORD PTR _mv$[ebp]
	fld	DWORD PTR [eax+12]
	fsub	DWORD PTR _newdelta$[ebp]
	fstp	DWORD PTR _vec$[ebp]
	mov	eax, DWORD PTR _mv$[ebp]
	fld	DWORD PTR [eax+16]
	fsub	DWORD PTR _newdelta$[ebp+4]
	fstp	DWORD PTR _vec$[ebp+4]
	mov	eax, DWORD PTR _mv$[ebp]
	fld	DWORD PTR [eax+20]
	fsub	DWORD PTR _newdelta$[ebp+8]
	fstp	DWORD PTR _vec$[ebp+8]

; 2700 : 				dist = Length(&vec);

	fld	DWORD PTR _vec$[ebp]
	fmul	DWORD PTR _vec$[ebp]
	fld	DWORD PTR _vec$[ebp+4]
	fmul	DWORD PTR _vec$[ebp+4]
	faddp	ST(1), ST(0)
	fld	DWORD PTR _vec$[ebp+8]
	fmul	DWORD PTR _vec$[ebp+8]
	faddp	ST(1), ST(0)
	push	ecx
	fstp	DWORD PTR [esp]
	call	?sqrt@@YAMM@Z				; sqrt
	add	esp, 4
	fstp	DWORD PTR _dist$[ebp]

; 2701 : 				if (dist < shockwave->Reach)

	mov	eax, DWORD PTR _shockwave$[ebp]
	fld	DWORD PTR _dist$[ebp]
	fcomp	DWORD PTR [eax+8]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L84147

; 2702 : 				{
; 2703 : 					pull = (shockwave->Reach - dist) * SHOCKWAVE_PULL_MAX_MUL;

	mov	eax, DWORD PTR _shockwave$[ebp]
	fld	DWORD PTR [eax+8]
	fsub	DWORD PTR _dist$[ebp]
	fmul	DWORD PTR __real@3dcccccd
	fstp	DWORD PTR _pull$[ebp]

; 2704 : 					if (pull > dist * SHOCKWAVE_PULL_MIN_MUL) pull = dist * SHOCKWAVE_PULL_MIN_MUL;

	fld	DWORD PTR _dist$[ebp]
	fmul	DWORD PTR __real@3f000000
	fcomp	DWORD PTR _pull$[ebp]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L84148
	fld	DWORD PTR _dist$[ebp]
	fmul	DWORD PTR __real@3f000000
	fstp	DWORD PTR _pull$[ebp]
$L84148:

; 2705 : 					mul = pull / dist;

	fld	DWORD PTR _pull$[ebp]
	fdiv	DWORD PTR _dist$[ebp]
	fstp	DWORD PTR _mul$[ebp]

; 2706 : 					VecMinusScalarVec((VEC*)&mv->x2, mul, &vec, (VEC*)&mv->x2);

	fld	DWORD PTR _mul$[ebp]
	fmul	DWORD PTR _vec$[ebp]
	mov	eax, DWORD PTR _mv$[ebp]
	fsubr	DWORD PTR [eax+12]
	mov	ecx, DWORD PTR _mv$[ebp]
	fstp	DWORD PTR [ecx+12]
	fld	DWORD PTR _mul$[ebp]
	fmul	DWORD PTR _vec$[ebp+4]
	mov	eax, DWORD PTR _mv$[ebp]
	fsubr	DWORD PTR [eax+16]
	mov	ecx, DWORD PTR _mv$[ebp]
	fstp	DWORD PTR [ecx+16]
	fld	DWORD PTR _mul$[ebp]
	fmul	DWORD PTR _vec$[ebp+8]
	mov	eax, DWORD PTR _mv$[ebp]
	fsubr	DWORD PTR [eax+20]
	mov	ecx, DWORD PTR _mv$[ebp]
	fstp	DWORD PTR [ecx+20]
$L84147:

; 2707 : 				}
; 2708 : 			}

	jmp	$L84141
$L84142:

; 2709 : 		}
; 2710 : 		else

	jmp	$L84155
$L84139:

; 2711 : 		{
; 2712 : 			for (j = ModelMeshModel->VertNum ; j ; j--, mv++)

	mov	eax, DWORD PTR ?ModelMeshModel@@3PAUMODEL@@A ; ModelMeshModel
	movsx	ecx, WORD PTR [eax+34]
	mov	DWORD PTR _j$[ebp], ecx
	jmp	SHORT $L84156
$L84157:
	mov	eax, DWORD PTR _j$[ebp]
	sub	eax, 1
	mov	DWORD PTR _j$[ebp], eax
	mov	ecx, DWORD PTR _mv$[ebp]
	add	ecx, 88					; 00000058H
	mov	DWORD PTR _mv$[ebp], ecx
$L84156:
	cmp	DWORD PTR _j$[ebp], 0
	je	$L84155

; 2713 : 			{
; 2714 : 				SubVector((VEC*)&mv->x, &newdelta, &vec);

	mov	eax, DWORD PTR _mv$[ebp]
	fld	DWORD PTR [eax]
	fsub	DWORD PTR _newdelta$[ebp]
	fstp	DWORD PTR _vec$[ebp]
	mov	eax, DWORD PTR _mv$[ebp]
	fld	DWORD PTR [eax+4]
	fsub	DWORD PTR _newdelta$[ebp+4]
	fstp	DWORD PTR _vec$[ebp+4]
	mov	eax, DWORD PTR _mv$[ebp]
	fld	DWORD PTR [eax+8]
	fsub	DWORD PTR _newdelta$[ebp+8]
	fstp	DWORD PTR _vec$[ebp+8]

; 2715 : 				dist = Length(&vec);

	fld	DWORD PTR _vec$[ebp]
	fmul	DWORD PTR _vec$[ebp]
	fld	DWORD PTR _vec$[ebp+4]
	fmul	DWORD PTR _vec$[ebp+4]
	faddp	ST(1), ST(0)
	fld	DWORD PTR _vec$[ebp+8]
	fmul	DWORD PTR _vec$[ebp+8]
	faddp	ST(1), ST(0)
	push	ecx
	fstp	DWORD PTR [esp]
	call	?sqrt@@YAMM@Z				; sqrt
	add	esp, 4
	fstp	DWORD PTR _dist$[ebp]

; 2716 : 				if (dist < shockwave->Reach)

	mov	eax, DWORD PTR _shockwave$[ebp]
	fld	DWORD PTR _dist$[ebp]
	fcomp	DWORD PTR [eax+8]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L84163

; 2717 : 				{
; 2718 : 					pull = (shockwave->Reach - dist) * SHOCKWAVE_PULL_MAX_MUL;

	mov	eax, DWORD PTR _shockwave$[ebp]
	fld	DWORD PTR [eax+8]
	fsub	DWORD PTR _dist$[ebp]
	fmul	DWORD PTR __real@3dcccccd
	fstp	DWORD PTR _pull$[ebp]

; 2719 : 					if (pull > dist * SHOCKWAVE_PULL_MIN_MUL) pull = dist * SHOCKWAVE_PULL_MIN_MUL;

	fld	DWORD PTR _dist$[ebp]
	fmul	DWORD PTR __real@3f000000
	fcomp	DWORD PTR _pull$[ebp]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L84164
	fld	DWORD PTR _dist$[ebp]
	fmul	DWORD PTR __real@3f000000
	fstp	DWORD PTR _pull$[ebp]
$L84164:

; 2720 : 					mul = pull / dist;

	fld	DWORD PTR _pull$[ebp]
	fdiv	DWORD PTR _dist$[ebp]
	fstp	DWORD PTR _mul$[ebp]

; 2721 : 					VecMinusScalarVec((VEC*)&mv->x, mul, &vec, (VEC*)&mv->x2);

	fld	DWORD PTR _mul$[ebp]
	fmul	DWORD PTR _vec$[ebp]
	mov	eax, DWORD PTR _mv$[ebp]
	fsubr	DWORD PTR [eax]
	mov	ecx, DWORD PTR _mv$[ebp]
	fstp	DWORD PTR [ecx+12]
	fld	DWORD PTR _mul$[ebp]
	fmul	DWORD PTR _vec$[ebp+4]
	mov	eax, DWORD PTR _mv$[ebp]
	fsubr	DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _mv$[ebp]
	fstp	DWORD PTR [ecx+16]
	fld	DWORD PTR _mul$[ebp]
	fmul	DWORD PTR _vec$[ebp+8]
	mov	eax, DWORD PTR _mv$[ebp]
	fsubr	DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _mv$[ebp]
	fstp	DWORD PTR [ecx+20]

; 2722 : 				}
; 2723 : 				else

	jmp	SHORT $L84171
$L84163:

; 2724 : 				{
; 2725 : 					CopyVec((VEC*)&mv->x, (VEC*)&mv->x2);

	mov	eax, DWORD PTR _mv$[ebp]
	mov	ecx, DWORD PTR _mv$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _mv$[ebp]
	mov	ecx, DWORD PTR _mv$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+16], edx
	mov	eax, DWORD PTR _mv$[ebp]
	mov	ecx, DWORD PTR _mv$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+20], edx
$L84171:

; 2726 : 				}
; 2727 : 			}

	jmp	$L84157
$L84155:

; 2728 : 		}
; 2729 : 
; 2730 : // set flag
; 2731 : 
; 2732 : 	*ModelMeshFlag |= MODEL_USENEWVERTS;

	mov	eax, DWORD PTR ?ModelMeshFlag@@3PAFA	; ModelMeshFlag
	movsx	ecx, WORD PTR [eax]
	or	ecx, 128				; 00000080H
	mov	edx, DWORD PTR ?ModelMeshFlag@@3PAFA	; ModelMeshFlag
	mov	WORD PTR [edx], cx
$L84119:

; 2733 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?ShockwaveModelMeshFxChecker@@YAXPAX@Z ENDP		; ShockwaveModelMeshFxChecker
; Function compile flags: /Odt /ZI
_TEXT	ENDS
;	COMDAT ?PuttyBombWorldMeshFxChecker@@YAXPAX@Z
_TEXT	SEGMENT
tv477 = -128						; size = 4
tv393 = -128						; size = 4
tv317 = -128						; size = 4
tv231 = -128						; size = 4
_scalar$ = -60						; size = 4
_push$ = -56						; size = 4
_mul$ = -52						; size = 4
_dist$ = -48						; size = 4
_wmv$ = -44						; size = 4
_wv$ = -40						; size = 4
_pos$ = -36						; size = 4
_vec$ = -32						; size = 12
_bomb$ = -20						; size = 4
_obj$ = -16						; size = 4
_cubelist$ = -12					; size = 4
_j$ = -8						; size = 4
_i$ = -4						; size = 4
_data$ = 8						; size = 4
?PuttyBombWorldMeshFxChecker@@YAXPAX@Z PROC NEAR	; PuttyBombWorldMeshFxChecker, COMDAT

; 2740 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 128				; 00000080H
	push	ebx
	push	esi
	push	edi

; 2741 : 	long i, j;
; 2742 : 	CUBE_HEADER **cubelist;
; 2743 : 	OBJECT *obj = (OBJECT*)data;

	mov	eax, DWORD PTR _data$[ebp]
	mov	DWORD PTR _obj$[ebp], eax

; 2744 : 	PUTTYBOMB_OBJ *bomb = (PUTTYBOMB_OBJ*)obj->Data;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+684]
	mov	DWORD PTR _bomb$[ebp], ecx

; 2745 : 	VEC vec, *pos = &bomb->Pos;

	mov	eax, DWORD PTR _bomb$[ebp]
	add	eax, 12					; 0000000cH
	mov	DWORD PTR _pos$[ebp], eax

; 2746 : 	WORLD_VERTEX *wv;
; 2747 : 	WORLD_MIRROR_VERTEX *wmv;
; 2748 : 	REAL dist, mul, push, scalar;
; 2749 : 
; 2750 : // loop thru world cubes
; 2751 : 
; 2752 : 	cubelist = World.CubeList;

	mov	eax, DWORD PTR ?World@@3UWORLD@@A+12
	mov	DWORD PTR _cubelist$[ebp], eax

; 2753 : 
; 2754 : 	for (i = 0 ; i < WorldCubeCount ; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $L84196
$L84197:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$L84196:
	movsx	eax, WORD PTR ?WorldCubeCount@@3FA	; WorldCubeCount
	cmp	DWORD PTR _i$[ebp], eax
	jge	$L84180

; 2755 : 	{
; 2756 : 
; 2757 : // check bounding box
; 2758 : 
; 2759 : 		if (cubelist[i]->Xmin > bomb->Box.XMax || cubelist[i]->Xmax < bomb->Box.XMin ||
; 2760 : 			cubelist[i]->Ymin > bomb->Box.YMax || cubelist[i]->Ymax < bomb->Box.YMin ||
; 2761 : 			cubelist[i]->Zmin > bomb->Box.ZMax || cubelist[i]->Zmax < bomb->Box.ZMin)

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _cubelist$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _bomb$[ebp]
	fld	DWORD PTR [edx+16]
	fcomp	DWORD PTR [eax+28]
	fnstsw	ax
	test	ah, 65					; 00000041H
	je	SHORT $L84200
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _cubelist$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _bomb$[ebp]
	fld	DWORD PTR [edx+20]
	fcomp	DWORD PTR [eax+24]
	fnstsw	ax
	test	ah, 5
	jnp	SHORT $L84200
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _cubelist$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _bomb$[ebp]
	fld	DWORD PTR [edx+24]
	fcomp	DWORD PTR [eax+36]
	fnstsw	ax
	test	ah, 65					; 00000041H
	je	SHORT $L84200
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _cubelist$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _bomb$[ebp]
	fld	DWORD PTR [edx+28]
	fcomp	DWORD PTR [eax+32]
	fnstsw	ax
	test	ah, 5
	jnp	SHORT $L84200
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _cubelist$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _bomb$[ebp]
	fld	DWORD PTR [edx+32]
	fcomp	DWORD PTR [eax+44]
	fnstsw	ax
	test	ah, 65					; 00000041H
	je	SHORT $L84200
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _cubelist$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _bomb$[ebp]
	fld	DWORD PTR [edx+36]
	fcomp	DWORD PTR [eax+40]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L84199
$L84200:

; 2762 : 				continue;

	jmp	$L84197
$L84199:

; 2763 : 
; 2764 : // check spheres
; 2765 : 
; 2766 : 		SubVector((VEC*)&cubelist[i]->CentreX, pos, &vec);

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _cubelist$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _pos$[ebp]
	fld	DWORD PTR [edx]
	fsub	DWORD PTR [eax]
	fstp	DWORD PTR _vec$[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _cubelist$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _pos$[ebp]
	fld	DWORD PTR [edx+4]
	fsub	DWORD PTR [eax+4]
	fstp	DWORD PTR _vec$[ebp+4]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _cubelist$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _pos$[ebp]
	fld	DWORD PTR [edx+8]
	fsub	DWORD PTR [eax+8]
	fstp	DWORD PTR _vec$[ebp+8]

; 2767 : 		if (Length(&vec) > cubelist[i]->Radius + bomb->SphereRadius + PUTTYBOMB_PUSH_RANGE)

	fld	DWORD PTR _vec$[ebp]
	fmul	DWORD PTR _vec$[ebp]
	fld	DWORD PTR _vec$[ebp+4]
	fmul	DWORD PTR _vec$[ebp+4]
	faddp	ST(1), ST(0)
	fld	DWORD PTR _vec$[ebp+8]
	fmul	DWORD PTR _vec$[ebp+8]
	faddp	ST(1), ST(0)
	push	ecx
	fstp	DWORD PTR [esp]
	call	?sqrt@@YAMM@Z				; sqrt
	add	esp, 4
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _cubelist$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _bomb$[ebp]
	fld	DWORD PTR [edx+12]
	fadd	DWORD PTR [eax+4]
	fadd	DWORD PTR __real@42800000
	fcompp
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L84205

; 2768 : 			continue;

	jmp	$L84197
$L84205:

; 2769 : 
; 2770 : // ok, set verts
; 2771 : 
; 2772 : 		scalar = (PUTTYBOMB_SPHERE_TIME - bomb->Timer) / PUTTYBOMB_SPHERE_TIME;

	mov	eax, DWORD PTR _bomb$[ebp]
	fld	DWORD PTR __real@3f000000
	fsub	DWORD PTR [eax]
	fdiv	DWORD PTR __real@3f000000
	fstp	DWORD PTR _scalar$[ebp]

; 2773 : 
; 2774 : 		if (cubelist[i]->MeshFxFlag & MESHFX_USENEWVERTS)

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _cubelist$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [edx+60]
	and	eax, 1
	je	$L84206

; 2775 : 		{
; 2776 : 			wv = cubelist[i]->Model.VertPtr;

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _cubelist$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [edx+104]
	mov	DWORD PTR _wv$[ebp], eax

; 2777 : 			for (j = cubelist[i]->Model.VertNum ; j ; j--, wv++)

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _cubelist$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	movsx	eax, WORD PTR [edx+74]
	mov	DWORD PTR _j$[ebp], eax
	jmp	SHORT $L84207
$L84208:
	mov	eax, DWORD PTR _j$[ebp]
	sub	eax, 1
	mov	DWORD PTR _j$[ebp], eax
	mov	ecx, DWORD PTR _wv$[ebp]
	add	ecx, 92					; 0000005cH
	mov	DWORD PTR _wv$[ebp], ecx
$L84207:
	cmp	DWORD PTR _j$[ebp], 0
	je	$L84209

; 2778 : 			{
; 2779 : 				SubVector((VEC*)&wv->x2, pos, &vec);

	mov	eax, DWORD PTR _wv$[ebp]
	mov	ecx, DWORD PTR _pos$[ebp]
	fld	DWORD PTR [eax+12]
	fsub	DWORD PTR [ecx]
	fstp	DWORD PTR _vec$[ebp]
	mov	eax, DWORD PTR _wv$[ebp]
	mov	ecx, DWORD PTR _pos$[ebp]
	fld	DWORD PTR [eax+16]
	fsub	DWORD PTR [ecx+4]
	fstp	DWORD PTR _vec$[ebp+4]
	mov	eax, DWORD PTR _wv$[ebp]
	mov	ecx, DWORD PTR _pos$[ebp]
	fld	DWORD PTR [eax+20]
	fsub	DWORD PTR [ecx+8]
	fstp	DWORD PTR _vec$[ebp+8]

; 2780 : 				dist = Length(&vec);

	fld	DWORD PTR _vec$[ebp]
	fmul	DWORD PTR _vec$[ebp]
	fld	DWORD PTR _vec$[ebp+4]
	fmul	DWORD PTR _vec$[ebp+4]
	faddp	ST(1), ST(0)
	fld	DWORD PTR _vec$[ebp+8]
	fmul	DWORD PTR _vec$[ebp+8]
	faddp	ST(1), ST(0)
	push	ecx
	fstp	DWORD PTR [esp]
	call	?sqrt@@YAMM@Z				; sqrt
	add	esp, 4
	fstp	DWORD PTR _dist$[ebp]

; 2781 : 
; 2782 : 				push = (PUTTYBOMB_PUSH_RANGE - abs(bomb->SphereRadius - dist)) * scalar;

	mov	eax, DWORD PTR _bomb$[ebp]
	fld	DWORD PTR [eax+4]
	fsub	DWORD PTR _dist$[ebp]
	fcomp	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $L84903
	mov	ecx, DWORD PTR _bomb$[ebp]
	fld	DWORD PTR [ecx+4]
	fsub	DWORD PTR _dist$[ebp]
	fstp	DWORD PTR tv231[ebp]
	jmp	SHORT $L84904
$L84903:
	mov	edx, DWORD PTR _bomb$[ebp]
	fld	DWORD PTR [edx+4]
	fsub	DWORD PTR _dist$[ebp]
	fchs
	fstp	DWORD PTR tv231[ebp]
$L84904:
	fld	DWORD PTR __real@42800000
	fsub	DWORD PTR tv231[ebp]
	fmul	DWORD PTR _scalar$[ebp]
	fstp	DWORD PTR _push$[ebp]

; 2783 : 				if (push > 0.0f)

	fld	DWORD PTR _push$[ebp]
	fcomp	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $L84214

; 2784 : 				{
; 2785 : 					mul = push / dist;

	fld	DWORD PTR _push$[ebp]
	fdiv	DWORD PTR _dist$[ebp]
	fstp	DWORD PTR _mul$[ebp]

; 2786 : 					VecPlusScalarVec((VEC*)&wv->x2, mul, &vec, (VEC*)&wv->x2);

	fld	DWORD PTR _mul$[ebp]
	fmul	DWORD PTR _vec$[ebp]
	mov	eax, DWORD PTR _wv$[ebp]
	fadd	DWORD PTR [eax+12]
	mov	ecx, DWORD PTR _wv$[ebp]
	fstp	DWORD PTR [ecx+12]
	fld	DWORD PTR _mul$[ebp]
	fmul	DWORD PTR _vec$[ebp+4]
	mov	eax, DWORD PTR _wv$[ebp]
	fadd	DWORD PTR [eax+16]
	mov	ecx, DWORD PTR _wv$[ebp]
	fstp	DWORD PTR [ecx+16]
	fld	DWORD PTR _mul$[ebp]
	fmul	DWORD PTR _vec$[ebp+8]
	mov	eax, DWORD PTR _wv$[ebp]
	fadd	DWORD PTR [eax+20]
	mov	ecx, DWORD PTR _wv$[ebp]
	fstp	DWORD PTR [ecx+20]
$L84214:

; 2787 : 				}
; 2788 : 			}

	jmp	$L84208
$L84209:

; 2789 : 
; 2790 : 			wmv = cubelist[i]->Model.MirrorVertPtr;

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _cubelist$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [edx+112]
	mov	DWORD PTR _wmv$[ebp], eax

; 2791 : 			for (j = cubelist[i]->Model.MirrorVertNum ; j ; j--, wmv++)

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _cubelist$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	movsx	eax, WORD PTR [edx+86]
	mov	DWORD PTR _j$[ebp], eax
	jmp	SHORT $L84221
$L84222:
	mov	eax, DWORD PTR _j$[ebp]
	sub	eax, 1
	mov	DWORD PTR _j$[ebp], eax
	mov	ecx, DWORD PTR _wmv$[ebp]
	add	ecx, 56					; 00000038H
	mov	DWORD PTR _wmv$[ebp], ecx
$L84221:
	cmp	DWORD PTR _j$[ebp], 0
	je	$L84223

; 2792 : 			{
; 2793 : 				SubVector((VEC*)&wmv->RealVertex->x2, pos, &vec);

	mov	eax, DWORD PTR _wmv$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	mov	edx, DWORD PTR _pos$[ebp]
	fld	DWORD PTR [ecx+12]
	fsub	DWORD PTR [edx]
	fstp	DWORD PTR _vec$[ebp]
	mov	eax, DWORD PTR _wmv$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	mov	edx, DWORD PTR _pos$[ebp]
	fld	DWORD PTR [ecx+16]
	fsub	DWORD PTR [edx+4]
	fstp	DWORD PTR _vec$[ebp+4]
	mov	eax, DWORD PTR _wmv$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	mov	edx, DWORD PTR _pos$[ebp]
	fld	DWORD PTR [ecx+20]
	fsub	DWORD PTR [edx+8]
	fstp	DWORD PTR _vec$[ebp+8]

; 2794 : 				dist = Length(&vec);

	fld	DWORD PTR _vec$[ebp]
	fmul	DWORD PTR _vec$[ebp]
	fld	DWORD PTR _vec$[ebp+4]
	fmul	DWORD PTR _vec$[ebp+4]
	faddp	ST(1), ST(0)
	fld	DWORD PTR _vec$[ebp+8]
	fmul	DWORD PTR _vec$[ebp+8]
	faddp	ST(1), ST(0)
	push	ecx
	fstp	DWORD PTR [esp]
	call	?sqrt@@YAMM@Z				; sqrt
	add	esp, 4
	fstp	DWORD PTR _dist$[ebp]

; 2795 : 
; 2796 : 				push = (PUTTYBOMB_PUSH_RANGE - abs(bomb->SphereRadius - dist)) * scalar;

	mov	eax, DWORD PTR _bomb$[ebp]
	fld	DWORD PTR [eax+4]
	fsub	DWORD PTR _dist$[ebp]
	fcomp	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $L84905
	mov	ecx, DWORD PTR _bomb$[ebp]
	fld	DWORD PTR [ecx+4]
	fsub	DWORD PTR _dist$[ebp]
	fstp	DWORD PTR tv317[ebp]
	jmp	SHORT $L84906
$L84905:
	mov	edx, DWORD PTR _bomb$[ebp]
	fld	DWORD PTR [edx+4]
	fsub	DWORD PTR _dist$[ebp]
	fchs
	fstp	DWORD PTR tv317[ebp]
$L84906:
	fld	DWORD PTR __real@42800000
	fsub	DWORD PTR tv317[ebp]
	fmul	DWORD PTR _scalar$[ebp]
	fstp	DWORD PTR _push$[ebp]

; 2797 : 				if (push > 0.0f)

	fld	DWORD PTR _push$[ebp]
	fcomp	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $L84228

; 2798 : 				{
; 2799 : 					mul = push / dist;

	fld	DWORD PTR _push$[ebp]
	fdiv	DWORD PTR _dist$[ebp]
	fstp	DWORD PTR _mul$[ebp]

; 2800 : 					VecPlusScalarVec((VEC*)&wmv->x2, mul, &vec, (VEC*)&wmv->x2);

	fld	DWORD PTR _mul$[ebp]
	fmul	DWORD PTR _vec$[ebp]
	mov	eax, DWORD PTR _wmv$[ebp]
	fadd	DWORD PTR [eax+12]
	mov	ecx, DWORD PTR _wmv$[ebp]
	fstp	DWORD PTR [ecx+12]
	fld	DWORD PTR _mul$[ebp]
	fmul	DWORD PTR _vec$[ebp+4]
	mov	eax, DWORD PTR _wmv$[ebp]
	fadd	DWORD PTR [eax+16]
	mov	ecx, DWORD PTR _wmv$[ebp]
	fstp	DWORD PTR [ecx+16]
	fld	DWORD PTR _mul$[ebp]
	fmul	DWORD PTR _vec$[ebp+8]
	mov	eax, DWORD PTR _wmv$[ebp]
	fadd	DWORD PTR [eax+20]
	mov	ecx, DWORD PTR _wmv$[ebp]
	fstp	DWORD PTR [ecx+20]
$L84228:

; 2801 : 				}
; 2802 : 			}

	jmp	$L84222
$L84223:

; 2803 : 		}
; 2804 : 		else

	jmp	$L84235
$L84206:

; 2805 : 		{
; 2806 : 			wv = cubelist[i]->Model.VertPtr;

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _cubelist$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [edx+104]
	mov	DWORD PTR _wv$[ebp], eax

; 2807 : 			for (j = cubelist[i]->Model.VertNum ; j ; j--, wv++)

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _cubelist$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	movsx	eax, WORD PTR [edx+74]
	mov	DWORD PTR _j$[ebp], eax
	jmp	SHORT $L84236
$L84237:
	mov	eax, DWORD PTR _j$[ebp]
	sub	eax, 1
	mov	DWORD PTR _j$[ebp], eax
	mov	ecx, DWORD PTR _wv$[ebp]
	add	ecx, 92					; 0000005cH
	mov	DWORD PTR _wv$[ebp], ecx
$L84236:
	cmp	DWORD PTR _j$[ebp], 0
	je	$L84238

; 2808 : 			{
; 2809 : 				SubVector((VEC*)&wv->x, pos, &vec);

	mov	eax, DWORD PTR _wv$[ebp]
	mov	ecx, DWORD PTR _pos$[ebp]
	fld	DWORD PTR [eax]
	fsub	DWORD PTR [ecx]
	fstp	DWORD PTR _vec$[ebp]
	mov	eax, DWORD PTR _wv$[ebp]
	mov	ecx, DWORD PTR _pos$[ebp]
	fld	DWORD PTR [eax+4]
	fsub	DWORD PTR [ecx+4]
	fstp	DWORD PTR _vec$[ebp+4]
	mov	eax, DWORD PTR _wv$[ebp]
	mov	ecx, DWORD PTR _pos$[ebp]
	fld	DWORD PTR [eax+8]
	fsub	DWORD PTR [ecx+8]
	fstp	DWORD PTR _vec$[ebp+8]

; 2810 : 				dist = Length(&vec);

	fld	DWORD PTR _vec$[ebp]
	fmul	DWORD PTR _vec$[ebp]
	fld	DWORD PTR _vec$[ebp+4]
	fmul	DWORD PTR _vec$[ebp+4]
	faddp	ST(1), ST(0)
	fld	DWORD PTR _vec$[ebp+8]
	fmul	DWORD PTR _vec$[ebp+8]
	faddp	ST(1), ST(0)
	push	ecx
	fstp	DWORD PTR [esp]
	call	?sqrt@@YAMM@Z				; sqrt
	add	esp, 4
	fstp	DWORD PTR _dist$[ebp]

; 2811 : 
; 2812 : 				push = (PUTTYBOMB_PUSH_RANGE - abs(bomb->SphereRadius - dist)) * scalar;

	mov	eax, DWORD PTR _bomb$[ebp]
	fld	DWORD PTR [eax+4]
	fsub	DWORD PTR _dist$[ebp]
	fcomp	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $L84907
	mov	ecx, DWORD PTR _bomb$[ebp]
	fld	DWORD PTR [ecx+4]
	fsub	DWORD PTR _dist$[ebp]
	fstp	DWORD PTR tv393[ebp]
	jmp	SHORT $L84908
$L84907:
	mov	edx, DWORD PTR _bomb$[ebp]
	fld	DWORD PTR [edx+4]
	fsub	DWORD PTR _dist$[ebp]
	fchs
	fstp	DWORD PTR tv393[ebp]
$L84908:
	fld	DWORD PTR __real@42800000
	fsub	DWORD PTR tv393[ebp]
	fmul	DWORD PTR _scalar$[ebp]
	fstp	DWORD PTR _push$[ebp]

; 2813 : 				if (push > 0.0f)

	fld	DWORD PTR _push$[ebp]
	fcomp	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $L84243

; 2814 : 				{
; 2815 : 					mul = push / dist;

	fld	DWORD PTR _push$[ebp]
	fdiv	DWORD PTR _dist$[ebp]
	fstp	DWORD PTR _mul$[ebp]

; 2816 : 					VecPlusScalarVec((VEC*)&wv->x, mul, &vec, (VEC*)&wv->x2);

	fld	DWORD PTR _mul$[ebp]
	fmul	DWORD PTR _vec$[ebp]
	mov	eax, DWORD PTR _wv$[ebp]
	fadd	DWORD PTR [eax]
	mov	ecx, DWORD PTR _wv$[ebp]
	fstp	DWORD PTR [ecx+12]
	fld	DWORD PTR _mul$[ebp]
	fmul	DWORD PTR _vec$[ebp+4]
	mov	eax, DWORD PTR _wv$[ebp]
	fadd	DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _wv$[ebp]
	fstp	DWORD PTR [ecx+16]
	fld	DWORD PTR _mul$[ebp]
	fmul	DWORD PTR _vec$[ebp+8]
	mov	eax, DWORD PTR _wv$[ebp]
	fadd	DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _wv$[ebp]
	fstp	DWORD PTR [ecx+20]

; 2817 : 				}
; 2818 : 				else

	jmp	SHORT $L84250
$L84243:

; 2819 : 				{
; 2820 : 					CopyVec((VEC*)&wv->x, (VEC*)&wv->x2);

	mov	eax, DWORD PTR _wv$[ebp]
	mov	ecx, DWORD PTR _wv$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _wv$[ebp]
	mov	ecx, DWORD PTR _wv$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+16], edx
	mov	eax, DWORD PTR _wv$[ebp]
	mov	ecx, DWORD PTR _wv$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+20], edx
$L84250:

; 2821 : 				}
; 2822 : 			}

	jmp	$L84237
$L84238:

; 2823 : 
; 2824 : 			wmv = cubelist[i]->Model.MirrorVertPtr;

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _cubelist$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [edx+112]
	mov	DWORD PTR _wmv$[ebp], eax

; 2825 : 			for (j = cubelist[i]->Model.MirrorVertNum ; j ; j--, wmv++)

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _cubelist$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	movsx	eax, WORD PTR [edx+86]
	mov	DWORD PTR _j$[ebp], eax
	jmp	SHORT $L84257
$L84258:
	mov	eax, DWORD PTR _j$[ebp]
	sub	eax, 1
	mov	DWORD PTR _j$[ebp], eax
	mov	ecx, DWORD PTR _wmv$[ebp]
	add	ecx, 56					; 00000038H
	mov	DWORD PTR _wmv$[ebp], ecx
$L84257:
	cmp	DWORD PTR _j$[ebp], 0
	je	$L84235

; 2826 : 			{
; 2827 : 				SubVector((VEC*)&wmv->RealVertex->x, pos, &vec);

	mov	eax, DWORD PTR _wmv$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	mov	edx, DWORD PTR _pos$[ebp]
	fld	DWORD PTR [ecx]
	fsub	DWORD PTR [edx]
	fstp	DWORD PTR _vec$[ebp]
	mov	eax, DWORD PTR _wmv$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	mov	edx, DWORD PTR _pos$[ebp]
	fld	DWORD PTR [ecx+4]
	fsub	DWORD PTR [edx+4]
	fstp	DWORD PTR _vec$[ebp+4]
	mov	eax, DWORD PTR _wmv$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	mov	edx, DWORD PTR _pos$[ebp]
	fld	DWORD PTR [ecx+8]
	fsub	DWORD PTR [edx+8]
	fstp	DWORD PTR _vec$[ebp+8]

; 2828 : 				dist = Length(&vec);

	fld	DWORD PTR _vec$[ebp]
	fmul	DWORD PTR _vec$[ebp]
	fld	DWORD PTR _vec$[ebp+4]
	fmul	DWORD PTR _vec$[ebp+4]
	faddp	ST(1), ST(0)
	fld	DWORD PTR _vec$[ebp+8]
	fmul	DWORD PTR _vec$[ebp+8]
	faddp	ST(1), ST(0)
	push	ecx
	fstp	DWORD PTR [esp]
	call	?sqrt@@YAMM@Z				; sqrt
	add	esp, 4
	fstp	DWORD PTR _dist$[ebp]

; 2829 : 
; 2830 : 				push = (PUTTYBOMB_PUSH_RANGE - abs(bomb->SphereRadius - dist)) * scalar;

	mov	eax, DWORD PTR _bomb$[ebp]
	fld	DWORD PTR [eax+4]
	fsub	DWORD PTR _dist$[ebp]
	fcomp	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $L84909
	mov	ecx, DWORD PTR _bomb$[ebp]
	fld	DWORD PTR [ecx+4]
	fsub	DWORD PTR _dist$[ebp]
	fstp	DWORD PTR tv477[ebp]
	jmp	SHORT $L84910
$L84909:
	mov	edx, DWORD PTR _bomb$[ebp]
	fld	DWORD PTR [edx+4]
	fsub	DWORD PTR _dist$[ebp]
	fchs
	fstp	DWORD PTR tv477[ebp]
$L84910:
	fld	DWORD PTR __real@42800000
	fsub	DWORD PTR tv477[ebp]
	fmul	DWORD PTR _scalar$[ebp]
	fstp	DWORD PTR _push$[ebp]

; 2831 : 				if (push > 0.0f)

	fld	DWORD PTR _push$[ebp]
	fcomp	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $L84264

; 2832 : 				{
; 2833 : 					mul = push / dist;

	fld	DWORD PTR _push$[ebp]
	fdiv	DWORD PTR _dist$[ebp]
	fstp	DWORD PTR _mul$[ebp]

; 2834 : 					VecPlusScalarVec((VEC*)&wmv->x, mul, &vec, (VEC*)&wmv->x2);

	fld	DWORD PTR _mul$[ebp]
	fmul	DWORD PTR _vec$[ebp]
	mov	eax, DWORD PTR _wmv$[ebp]
	fadd	DWORD PTR [eax]
	mov	ecx, DWORD PTR _wmv$[ebp]
	fstp	DWORD PTR [ecx+12]
	fld	DWORD PTR _mul$[ebp]
	fmul	DWORD PTR _vec$[ebp+4]
	mov	eax, DWORD PTR _wmv$[ebp]
	fadd	DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _wmv$[ebp]
	fstp	DWORD PTR [ecx+16]
	fld	DWORD PTR _mul$[ebp]
	fmul	DWORD PTR _vec$[ebp+8]
	mov	eax, DWORD PTR _wmv$[ebp]
	fadd	DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _wmv$[ebp]
	fstp	DWORD PTR [ecx+20]

; 2835 : 				}
; 2836 : 				else

	jmp	SHORT $L84271
$L84264:

; 2837 : 				{
; 2838 : 					CopyVec((VEC*)&wmv->x, (VEC*)&wmv->x2);

	mov	eax, DWORD PTR _wmv$[ebp]
	mov	ecx, DWORD PTR _wmv$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _wmv$[ebp]
	mov	ecx, DWORD PTR _wmv$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+16], edx
	mov	eax, DWORD PTR _wmv$[ebp]
	mov	ecx, DWORD PTR _wmv$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+20], edx
$L84271:

; 2839 : 				}
; 2840 : 			}

	jmp	$L84258
$L84235:

; 2841 : 		}
; 2842 : 
; 2843 : // set mesh flag
; 2844 : 
; 2845 : 		cubelist[i]->MeshFxFlag |= MESHFX_USENEWVERTS;

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _cubelist$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [edx+60]
	or	eax, 1
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _cubelist$[ebp]
	mov	ecx, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR [ecx+60], eax

; 2846 : 	}

	jmp	$L84197
$L84180:

; 2847 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?PuttyBombWorldMeshFxChecker@@YAXPAX@Z ENDP		; PuttyBombWorldMeshFxChecker
; Function compile flags: /Odt /ZI
_TEXT	ENDS
;	COMDAT ?PuttyBombModelMeshFxChecker@@YAXPAX@Z
_TEXT	SEGMENT
tv308 = -140						; size = 4
tv239 = -140						; size = 4
_mv$ = -72						; size = 4
_vec$ = -68						; size = 12
_newdelta$ = -56					; size = 12
_delta$ = -44						; size = 12
_bomb$ = -32						; size = 4
_obj$ = -28						; size = 4
_rad$ = -24						; size = 4
_scalar$ = -20						; size = 4
_mul$ = -16						; size = 4
_dist$ = -12						; size = 4
_push$ = -8						; size = 4
_j$ = -4						; size = 4
_data$ = 8						; size = 4
?PuttyBombModelMeshFxChecker@@YAXPAX@Z PROC NEAR	; PuttyBombModelMeshFxChecker, COMDAT

; 2854 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 140				; 0000008cH
	push	ebx
	push	esi
	push	edi

; 2855 : 	long j;
; 2856 : 	REAL push, dist, mul, scalar, rad = ModelMeshModel->Radius;

	mov	eax, DWORD PTR ?ModelMeshModel@@3PAUMODEL@@A ; ModelMeshModel
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _rad$[ebp], ecx

; 2857 : 	OBJECT *obj = (OBJECT*)data;

	mov	eax, DWORD PTR _data$[ebp]
	mov	DWORD PTR _obj$[ebp], eax

; 2858 : 	PUTTYBOMB_OBJ *bomb = (PUTTYBOMB_OBJ*)obj->Data;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+684]
	mov	DWORD PTR _bomb$[ebp], ecx

; 2859 : 	VEC delta, newdelta, vec;
; 2860 : 	MODEL_VERTEX *mv;
; 2861 : 
; 2862 : // quick radius bounding box test
; 2863 : 
; 2864 : 	if (ModelMeshPos->v[X] + rad < bomb->Box.XMin ||
; 2865 : 		ModelMeshPos->v[X] - rad > bomb->Box.XMax ||
; 2866 : 		ModelMeshPos->v[Y] + rad < bomb->Box.YMin ||
; 2867 : 		ModelMeshPos->v[Y] - rad > bomb->Box.YMax ||
; 2868 : 		ModelMeshPos->v[Z] + rad < bomb->Box.ZMin ||
; 2869 : 		ModelMeshPos->v[Z] - rad > bomb->Box.ZMax)

	mov	eax, DWORD PTR ?ModelMeshPos@@3PAUVectorStruct@@A ; ModelMeshPos
	fld	DWORD PTR _rad$[ebp]
	fadd	DWORD PTR [eax]
	mov	ecx, DWORD PTR _bomb$[ebp]
	fcomp	DWORD PTR [ecx+24]
	fnstsw	ax
	test	ah, 5
	jnp	SHORT $L84296
	mov	eax, DWORD PTR ?ModelMeshPos@@3PAUVectorStruct@@A ; ModelMeshPos
	fld	DWORD PTR [eax]
	fsub	DWORD PTR _rad$[ebp]
	mov	ecx, DWORD PTR _bomb$[ebp]
	fcomp	DWORD PTR [ecx+28]
	fnstsw	ax
	test	ah, 65					; 00000041H
	je	SHORT $L84296
	mov	eax, DWORD PTR ?ModelMeshPos@@3PAUVectorStruct@@A ; ModelMeshPos
	fld	DWORD PTR _rad$[ebp]
	fadd	DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _bomb$[ebp]
	fcomp	DWORD PTR [ecx+32]
	fnstsw	ax
	test	ah, 5
	jnp	SHORT $L84296
	mov	eax, DWORD PTR ?ModelMeshPos@@3PAUVectorStruct@@A ; ModelMeshPos
	fld	DWORD PTR [eax+4]
	fsub	DWORD PTR _rad$[ebp]
	mov	ecx, DWORD PTR _bomb$[ebp]
	fcomp	DWORD PTR [ecx+36]
	fnstsw	ax
	test	ah, 65					; 00000041H
	je	SHORT $L84296
	mov	eax, DWORD PTR ?ModelMeshPos@@3PAUVectorStruct@@A ; ModelMeshPos
	fld	DWORD PTR _rad$[ebp]
	fadd	DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _bomb$[ebp]
	fcomp	DWORD PTR [ecx+40]
	fnstsw	ax
	test	ah, 5
	jnp	SHORT $L84296
	mov	eax, DWORD PTR ?ModelMeshPos@@3PAUVectorStruct@@A ; ModelMeshPos
	fld	DWORD PTR [eax+8]
	fsub	DWORD PTR _rad$[ebp]
	mov	ecx, DWORD PTR _bomb$[ebp]
	fcomp	DWORD PTR [ecx+44]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $L84295
$L84296:

; 2870 : 			return;

	jmp	$L84280
$L84295:

; 2871 : 
; 2872 : // get delta vector
; 2873 : 
; 2874 : 	SubVector(&bomb->Pos, ModelMeshPos, &delta);

	mov	eax, DWORD PTR _bomb$[ebp]
	mov	ecx, DWORD PTR ?ModelMeshPos@@3PAUVectorStruct@@A ; ModelMeshPos
	fld	DWORD PTR [eax+12]
	fsub	DWORD PTR [ecx]
	fstp	DWORD PTR _delta$[ebp]
	mov	eax, DWORD PTR _bomb$[ebp]
	mov	ecx, DWORD PTR ?ModelMeshPos@@3PAUVectorStruct@@A ; ModelMeshPos
	fld	DWORD PTR [eax+16]
	fsub	DWORD PTR [ecx+4]
	fstp	DWORD PTR _delta$[ebp+4]
	mov	eax, DWORD PTR _bomb$[ebp]
	mov	ecx, DWORD PTR ?ModelMeshPos@@3PAUVectorStruct@@A ; ModelMeshPos
	fld	DWORD PTR [eax+20]
	fsub	DWORD PTR [ecx+8]
	fstp	DWORD PTR _delta$[ebp+8]

; 2875 : 
; 2876 : // sphere test
; 2877 : 
; 2878 : 	dist = Length(&delta);

	fld	DWORD PTR _delta$[ebp]
	fmul	DWORD PTR _delta$[ebp]
	fld	DWORD PTR _delta$[ebp+4]
	fmul	DWORD PTR _delta$[ebp+4]
	faddp	ST(1), ST(0)
	fld	DWORD PTR _delta$[ebp+8]
	fmul	DWORD PTR _delta$[ebp+8]
	faddp	ST(1), ST(0)
	push	ecx
	fstp	DWORD PTR [esp]
	call	?sqrt@@YAMM@Z				; sqrt
	add	esp, 4
	fstp	DWORD PTR _dist$[ebp]

; 2879 : 	if (dist > rad + bomb->SphereRadius + PUTTYBOMB_PUSH_RANGE)

	mov	eax, DWORD PTR _bomb$[ebp]
	fld	DWORD PTR _rad$[ebp]
	fadd	DWORD PTR [eax+4]
	fadd	DWORD PTR __real@42800000
	fcomp	DWORD PTR _dist$[ebp]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L84298

; 2880 : 		return;

	jmp	$L84280
$L84298:

; 2881 : 
; 2882 : // put delta vector into model space
; 2883 : 
; 2884 : 	TransposeRotVector(ModelMeshMat, &delta, &newdelta);

	lea	eax, DWORD PTR _newdelta$[ebp]
	push	eax
	lea	ecx, DWORD PTR _delta$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?ModelMeshMat@@3PATMatrixUnion@@A ; ModelMeshMat
	push	edx
	call	?TransposeRotVector@@YAXPATMatrixUnion@@PAUVectorStruct@@1@Z ; TransposeRotVector
	add	esp, 12					; 0000000cH

; 2885 : 
; 2886 : // proper bounding box test
; 2887 : 
; 2888 : 	if (ModelMeshModel->Xmax < newdelta.v[X] - bomb->SphereRadius ||
; 2889 : 		ModelMeshModel->Xmin > newdelta.v[X] + bomb->SphereRadius ||
; 2890 : 		ModelMeshModel->Ymax < newdelta.v[Y] - bomb->SphereRadius ||
; 2891 : 		ModelMeshModel->Ymin > newdelta.v[Y] + bomb->SphereRadius ||
; 2892 : 		ModelMeshModel->Zmax < newdelta.v[Z] - bomb->SphereRadius ||
; 2893 : 		ModelMeshModel->Zmin > newdelta.v[Z] + bomb->SphereRadius)

	mov	eax, DWORD PTR _bomb$[ebp]
	fld	DWORD PTR _newdelta$[ebp]
	fsub	DWORD PTR [eax+4]
	mov	ecx, DWORD PTR ?ModelMeshModel@@3PAUMODEL@@A ; ModelMeshModel
	fcomp	DWORD PTR [ecx+8]
	fnstsw	ax
	test	ah, 65					; 00000041H
	je	SHORT $L84300
	mov	eax, DWORD PTR _bomb$[ebp]
	fld	DWORD PTR _newdelta$[ebp]
	fadd	DWORD PTR [eax+4]
	mov	ecx, DWORD PTR ?ModelMeshModel@@3PAUMODEL@@A ; ModelMeshModel
	fcomp	DWORD PTR [ecx+4]
	fnstsw	ax
	test	ah, 5
	jnp	SHORT $L84300
	mov	eax, DWORD PTR _bomb$[ebp]
	fld	DWORD PTR _newdelta$[ebp+4]
	fsub	DWORD PTR [eax+4]
	mov	ecx, DWORD PTR ?ModelMeshModel@@3PAUMODEL@@A ; ModelMeshModel
	fcomp	DWORD PTR [ecx+16]
	fnstsw	ax
	test	ah, 65					; 00000041H
	je	SHORT $L84300
	mov	eax, DWORD PTR _bomb$[ebp]
	fld	DWORD PTR _newdelta$[ebp+4]
	fadd	DWORD PTR [eax+4]
	mov	ecx, DWORD PTR ?ModelMeshModel@@3PAUMODEL@@A ; ModelMeshModel
	fcomp	DWORD PTR [ecx+12]
	fnstsw	ax
	test	ah, 5
	jnp	SHORT $L84300
	mov	eax, DWORD PTR _bomb$[ebp]
	fld	DWORD PTR _newdelta$[ebp+8]
	fsub	DWORD PTR [eax+4]
	mov	ecx, DWORD PTR ?ModelMeshModel@@3PAUMODEL@@A ; ModelMeshModel
	fcomp	DWORD PTR [ecx+24]
	fnstsw	ax
	test	ah, 65					; 00000041H
	je	SHORT $L84300
	mov	eax, DWORD PTR _bomb$[ebp]
	fld	DWORD PTR _newdelta$[ebp+8]
	fadd	DWORD PTR [eax+4]
	mov	ecx, DWORD PTR ?ModelMeshModel@@3PAUMODEL@@A ; ModelMeshModel
	fcomp	DWORD PTR [ecx+20]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L84299
$L84300:

; 2894 : 			return;

	jmp	$L84280
$L84299:

; 2895 : 
; 2896 : // ok, set verts
; 2897 : 
; 2898 : 		scalar = (PUTTYBOMB_SPHERE_TIME - bomb->Timer) / PUTTYBOMB_SPHERE_TIME;

	mov	eax, DWORD PTR _bomb$[ebp]
	fld	DWORD PTR __real@3f000000
	fsub	DWORD PTR [eax]
	fdiv	DWORD PTR __real@3f000000
	fstp	DWORD PTR _scalar$[ebp]

; 2899 : 
; 2900 : 		mv = ModelMeshModel->VertPtr;

	mov	eax, DWORD PTR ?ModelMeshModel@@3PAUMODEL@@A ; ModelMeshModel
	mov	ecx, DWORD PTR [eax+52]
	mov	DWORD PTR _mv$[ebp], ecx

; 2901 : 
; 2902 : 		if (*ModelMeshFlag & MODEL_USENEWVERTS)

	mov	eax, DWORD PTR ?ModelMeshFlag@@3PAFA	; ModelMeshFlag
	movsx	ecx, WORD PTR [eax]
	and	ecx, 128				; 00000080H
	je	$L84301

; 2903 : 		{
; 2904 : 			for (j = ModelMeshModel->VertNum ; j ; j--, mv++)

	mov	eax, DWORD PTR ?ModelMeshModel@@3PAUMODEL@@A ; ModelMeshModel
	movsx	ecx, WORD PTR [eax+34]
	mov	DWORD PTR _j$[ebp], ecx
	jmp	SHORT $L84302
$L84303:
	mov	eax, DWORD PTR _j$[ebp]
	sub	eax, 1
	mov	DWORD PTR _j$[ebp], eax
	mov	ecx, DWORD PTR _mv$[ebp]
	add	ecx, 88					; 00000058H
	mov	DWORD PTR _mv$[ebp], ecx
$L84302:
	cmp	DWORD PTR _j$[ebp], 0
	je	$L84304

; 2905 : 			{
; 2906 : 				SubVector((VEC*)&mv->x2, &newdelta, &vec);

	mov	eax, DWORD PTR _mv$[ebp]
	fld	DWORD PTR [eax+12]
	fsub	DWORD PTR _newdelta$[ebp]
	fstp	DWORD PTR _vec$[ebp]
	mov	eax, DWORD PTR _mv$[ebp]
	fld	DWORD PTR [eax+16]
	fsub	DWORD PTR _newdelta$[ebp+4]
	fstp	DWORD PTR _vec$[ebp+4]
	mov	eax, DWORD PTR _mv$[ebp]
	fld	DWORD PTR [eax+20]
	fsub	DWORD PTR _newdelta$[ebp+8]
	fstp	DWORD PTR _vec$[ebp+8]

; 2907 : 				dist = Length(&vec);

	fld	DWORD PTR _vec$[ebp]
	fmul	DWORD PTR _vec$[ebp]
	fld	DWORD PTR _vec$[ebp+4]
	fmul	DWORD PTR _vec$[ebp+4]
	faddp	ST(1), ST(0)
	fld	DWORD PTR _vec$[ebp+8]
	fmul	DWORD PTR _vec$[ebp+8]
	faddp	ST(1), ST(0)
	push	ecx
	fstp	DWORD PTR [esp]
	call	?sqrt@@YAMM@Z				; sqrt
	add	esp, 4
	fstp	DWORD PTR _dist$[ebp]

; 2908 : 
; 2909 : 				push = (PUTTYBOMB_PUSH_RANGE - abs(bomb->SphereRadius - dist)) * scalar;

	mov	eax, DWORD PTR _bomb$[ebp]
	fld	DWORD PTR [eax+4]
	fsub	DWORD PTR _dist$[ebp]
	fcomp	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $L84913
	mov	ecx, DWORD PTR _bomb$[ebp]
	fld	DWORD PTR [ecx+4]
	fsub	DWORD PTR _dist$[ebp]
	fstp	DWORD PTR tv239[ebp]
	jmp	SHORT $L84914
$L84913:
	mov	edx, DWORD PTR _bomb$[ebp]
	fld	DWORD PTR [edx+4]
	fsub	DWORD PTR _dist$[ebp]
	fchs
	fstp	DWORD PTR tv239[ebp]
$L84914:
	fld	DWORD PTR __real@42800000
	fsub	DWORD PTR tv239[ebp]
	fmul	DWORD PTR _scalar$[ebp]
	fstp	DWORD PTR _push$[ebp]

; 2910 : 				if (push > 0.0f)

	fld	DWORD PTR _push$[ebp]
	fcomp	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $L84309

; 2911 : 				{
; 2912 : 					mul = push / dist;

	fld	DWORD PTR _push$[ebp]
	fdiv	DWORD PTR _dist$[ebp]
	fstp	DWORD PTR _mul$[ebp]

; 2913 : 					VecPlusScalarVec((VEC*)&mv->x2, mul, &vec, (VEC*)&mv->x2);

	fld	DWORD PTR _mul$[ebp]
	fmul	DWORD PTR _vec$[ebp]
	mov	eax, DWORD PTR _mv$[ebp]
	fadd	DWORD PTR [eax+12]
	mov	ecx, DWORD PTR _mv$[ebp]
	fstp	DWORD PTR [ecx+12]
	fld	DWORD PTR _mul$[ebp]
	fmul	DWORD PTR _vec$[ebp+4]
	mov	eax, DWORD PTR _mv$[ebp]
	fadd	DWORD PTR [eax+16]
	mov	ecx, DWORD PTR _mv$[ebp]
	fstp	DWORD PTR [ecx+16]
	fld	DWORD PTR _mul$[ebp]
	fmul	DWORD PTR _vec$[ebp+8]
	mov	eax, DWORD PTR _mv$[ebp]
	fadd	DWORD PTR [eax+20]
	mov	ecx, DWORD PTR _mv$[ebp]
	fstp	DWORD PTR [ecx+20]
$L84309:

; 2914 : 				}
; 2915 : 			}

	jmp	$L84303
$L84304:

; 2916 : 		}
; 2917 : 		else

	jmp	$L84316
$L84301:

; 2918 : 		{
; 2919 : 			for (j = ModelMeshModel->VertNum ; j ; j--, mv++)

	mov	eax, DWORD PTR ?ModelMeshModel@@3PAUMODEL@@A ; ModelMeshModel
	movsx	ecx, WORD PTR [eax+34]
	mov	DWORD PTR _j$[ebp], ecx
	jmp	SHORT $L84317
$L84318:
	mov	eax, DWORD PTR _j$[ebp]
	sub	eax, 1
	mov	DWORD PTR _j$[ebp], eax
	mov	ecx, DWORD PTR _mv$[ebp]
	add	ecx, 88					; 00000058H
	mov	DWORD PTR _mv$[ebp], ecx
$L84317:
	cmp	DWORD PTR _j$[ebp], 0
	je	$L84316

; 2920 : 			{
; 2921 : 				SubVector((VEC*)&mv->x, &newdelta, &vec);

	mov	eax, DWORD PTR _mv$[ebp]
	fld	DWORD PTR [eax]
	fsub	DWORD PTR _newdelta$[ebp]
	fstp	DWORD PTR _vec$[ebp]
	mov	eax, DWORD PTR _mv$[ebp]
	fld	DWORD PTR [eax+4]
	fsub	DWORD PTR _newdelta$[ebp+4]
	fstp	DWORD PTR _vec$[ebp+4]
	mov	eax, DWORD PTR _mv$[ebp]
	fld	DWORD PTR [eax+8]
	fsub	DWORD PTR _newdelta$[ebp+8]
	fstp	DWORD PTR _vec$[ebp+8]

; 2922 : 				dist = Length(&vec);

	fld	DWORD PTR _vec$[ebp]
	fmul	DWORD PTR _vec$[ebp]
	fld	DWORD PTR _vec$[ebp+4]
	fmul	DWORD PTR _vec$[ebp+4]
	faddp	ST(1), ST(0)
	fld	DWORD PTR _vec$[ebp+8]
	fmul	DWORD PTR _vec$[ebp+8]
	faddp	ST(1), ST(0)
	push	ecx
	fstp	DWORD PTR [esp]
	call	?sqrt@@YAMM@Z				; sqrt
	add	esp, 4
	fstp	DWORD PTR _dist$[ebp]

; 2923 : 
; 2924 : 				push = (PUTTYBOMB_PUSH_RANGE - abs(bomb->SphereRadius - dist)) * scalar;

	mov	eax, DWORD PTR _bomb$[ebp]
	fld	DWORD PTR [eax+4]
	fsub	DWORD PTR _dist$[ebp]
	fcomp	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $L84915
	mov	ecx, DWORD PTR _bomb$[ebp]
	fld	DWORD PTR [ecx+4]
	fsub	DWORD PTR _dist$[ebp]
	fstp	DWORD PTR tv308[ebp]
	jmp	SHORT $L84916
$L84915:
	mov	edx, DWORD PTR _bomb$[ebp]
	fld	DWORD PTR [edx+4]
	fsub	DWORD PTR _dist$[ebp]
	fchs
	fstp	DWORD PTR tv308[ebp]
$L84916:
	fld	DWORD PTR __real@42800000
	fsub	DWORD PTR tv308[ebp]
	fmul	DWORD PTR _scalar$[ebp]
	fstp	DWORD PTR _push$[ebp]

; 2925 : 				if (push > 0.0f)

	fld	DWORD PTR _push$[ebp]
	fcomp	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $L84324

; 2926 : 				{
; 2927 : 					mul = push / dist;

	fld	DWORD PTR _push$[ebp]
	fdiv	DWORD PTR _dist$[ebp]
	fstp	DWORD PTR _mul$[ebp]

; 2928 : 					VecPlusScalarVec((VEC*)&mv->x, mul, &vec, (VEC*)&mv->x2);

	fld	DWORD PTR _mul$[ebp]
	fmul	DWORD PTR _vec$[ebp]
	mov	eax, DWORD PTR _mv$[ebp]
	fadd	DWORD PTR [eax]
	mov	ecx, DWORD PTR _mv$[ebp]
	fstp	DWORD PTR [ecx+12]
	fld	DWORD PTR _mul$[ebp]
	fmul	DWORD PTR _vec$[ebp+4]
	mov	eax, DWORD PTR _mv$[ebp]
	fadd	DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _mv$[ebp]
	fstp	DWORD PTR [ecx+16]
	fld	DWORD PTR _mul$[ebp]
	fmul	DWORD PTR _vec$[ebp+8]
	mov	eax, DWORD PTR _mv$[ebp]
	fadd	DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _mv$[ebp]
	fstp	DWORD PTR [ecx+20]

; 2929 : 				}
; 2930 : 				else

	jmp	SHORT $L84331
$L84324:

; 2931 : 				{
; 2932 : 					CopyVec((VEC*)&mv->x, (VEC*)&mv->x2);

	mov	eax, DWORD PTR _mv$[ebp]
	mov	ecx, DWORD PTR _mv$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _mv$[ebp]
	mov	ecx, DWORD PTR _mv$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+16], edx
	mov	eax, DWORD PTR _mv$[ebp]
	mov	ecx, DWORD PTR _mv$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+20], edx
$L84331:

; 2933 : 				}
; 2934 : 			}

	jmp	$L84318
$L84316:

; 2935 : 		}
; 2936 : 
; 2937 : // set flag
; 2938 : 
; 2939 : 	*ModelMeshFlag |= MODEL_USENEWVERTS;

	mov	eax, DWORD PTR ?ModelMeshFlag@@3PAFA	; ModelMeshFlag
	movsx	ecx, WORD PTR [eax]
	or	ecx, 128				; 00000080H
	mov	edx, DWORD PTR ?ModelMeshFlag@@3PAFA	; ModelMeshFlag
	mov	WORD PTR [edx], cx
$L84280:

; 2940 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?PuttyBombModelMeshFxChecker@@YAXPAX@Z ENDP		; PuttyBombModelMeshFxChecker
_TEXT	ENDS
EXTRN	?DrawJumpSpark@@YAXPAUVectorStruct@@0@Z:NEAR	; DrawJumpSpark
EXTRN	?RenderObjectModel@@YA_NPATMatrixUnion@@PAUVectorStruct@@PAUMODEL@@JUrenderflags@@@Z:NEAR ; RenderObjectModel
; Function compile flags: /Odt /ZI
;	COMDAT ?RenderElectroPulse@@YAXPAUobject_def@@@Z
_TEXT	SEGMENT
tv86 = -105						; size = 1
_nplayer$ = -40						; size = 4
_v2$ = -36						; size = 12
_v1$ = -24						; size = 12
_car$ = -12						; size = 4
_electro$ = -8						; size = 4
_i$ = -4						; size = 4
_obj$ = 8						; size = 4
?RenderElectroPulse@@YAXPAUobject_def@@@Z PROC NEAR	; RenderElectroPulse, COMDAT

; 2947 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 108				; 0000006cH
	push	ebx
	push	esi
	push	edi

; 2948 : 	long i;
; 2949 : 	ELECTROPULSE_OBJ *electro = (ELECTROPULSE_OBJ*)obj->Data;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+684]
	mov	DWORD PTR _electro$[ebp], ecx

; 2950 : 	CAR *car = &obj->player->car;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+588]
	add	ecx, 44					; 0000002cH
	mov	DWORD PTR _car$[ebp], ecx

; 2951 : 	VEC v1, v2;
; 2952 : 	PLAYER *nplayer;
; 2953 : 
; 2954 : // draw model
; 2955 : 
; 2956 : 	obj->renderflag.visible |= RenderObjectModel(&car->Body->Centre.WMatrix, &car->BodyWorldPos, &electro->Model, obj->EnvRGB, obj->renderflag);

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+584]
	push	ecx
	mov	edx, DWORD PTR _obj$[ebp]
	mov	eax, DWORD PTR [edx+652]
	push	eax
	mov	ecx, DWORD PTR _electro$[ebp]
	add	ecx, 4
	push	ecx
	mov	edx, DWORD PTR _car$[ebp]
	add	edx, 772				; 00000304H
	push	edx
	mov	eax, DWORD PTR _car$[ebp]
	mov	ecx, DWORD PTR [eax+856]
	add	ecx, 100				; 00000064H
	push	ecx
	call	?RenderObjectModel@@YA_NPATMatrixUnion@@PAUVectorStruct@@PAUMODEL@@JUrenderflags@@@Z ; RenderObjectModel
	add	esp, 20					; 00000014H
	mov	BYTE PTR tv86[ebp], al
	movzx	edx, BYTE PTR tv86[ebp]
	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+584]
	shr	ecx, 6
	and	ecx, 1
	or	ecx, edx
	and	ecx, 1
	shl	ecx, 6
	mov	edx, DWORD PTR _obj$[ebp]
	mov	eax, DWORD PTR [edx+584]
	and	eax, -65				; ffffffbfH
	or	eax, ecx
	mov	ecx, DWORD PTR _obj$[ebp]
	mov	DWORD PTR [ecx+584], eax

; 2957 : 
; 2958 : // draw jump spark?
; 2959 : 
; 2960 : 	for (i = 0 ; i < electro->JumpFlag ; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $L84348
$L84349:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$L84348:
	mov	eax, DWORD PTR _electro$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR [eax+64]
	jge	$L84340

; 2961 : 	{
; 2962 : 		nplayer = (PLAYER*)electro->Player[i];

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _electro$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+356]
	mov	DWORD PTR _nplayer$[ebp], edx

; 2963 : 
; 2964 : 		RotTransVector(&nplayer->car.Body->Centre.WMatrix, &nplayer->car.BodyWorldPos, &electro->JumpPos1[i], &v1);

	lea	eax, DWORD PTR _v1$[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR _electro$[ebp]
	lea	eax, DWORD PTR [edx+ecx+68]
	push	eax
	mov	ecx, DWORD PTR _nplayer$[ebp]
	add	ecx, 816				; 00000330H
	push	ecx
	mov	edx, DWORD PTR _nplayer$[ebp]
	mov	eax, DWORD PTR [edx+900]
	add	eax, 100				; 00000064H
	push	eax
	call	?RotTransVector@@YAXPATMatrixUnion@@PAUVectorStruct@@11@Z ; RotTransVector
	add	esp, 16					; 00000010H

; 2965 : 		RotTransVector(&obj->player->car.Body->Centre.WMatrix, &obj->player->car.BodyWorldPos, &electro->JumpPos2[i], &v2);

	lea	eax, DWORD PTR _v2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR _electro$[ebp]
	lea	eax, DWORD PTR [edx+ecx+212]
	push	eax
	mov	ecx, DWORD PTR _obj$[ebp]
	mov	edx, DWORD PTR [ecx+588]
	add	edx, 816				; 00000330H
	push	edx
	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+588]
	mov	edx, DWORD PTR [ecx+900]
	add	edx, 100				; 00000064H
	push	edx
	call	?RotTransVector@@YAXPATMatrixUnion@@PAUVectorStruct@@11@Z ; RotTransVector
	add	esp, 16					; 00000010H

; 2966 : 		DrawJumpSpark(&v1, &v2);

	lea	eax, DWORD PTR _v2$[ebp]
	push	eax
	lea	ecx, DWORD PTR _v1$[ebp]
	push	ecx
	call	?DrawJumpSpark@@YAXPAUVectorStruct@@0@Z	; DrawJumpSpark
	add	esp, 8

; 2967 : 	}

	jmp	$L84349
$L84340:

; 2968 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?RenderElectroPulse@@YAXPAUobject_def@@@Z ENDP		; RenderElectroPulse
_TEXT	ENDS
PUBLIC	__real@42400000
PUBLIC	__real@41e00000
PUBLIC	__real@42fe0000
EXTRN	?DrawShadow@@YAXPAUVectorStruct@@000MMMMJMMJJPAUBoundingBoxStruct@@@Z:NEAR ; DrawShadow
EXTRN	?D3Ddevice@@3PAUIDirect3DDevice3@@A:DWORD	; D3Ddevice
EXTRN	?TextureStateChange@@3JA:DWORD			; TextureStateChange
EXTRN	?RenderTP@@3FA:WORD				; RenderTP
EXTRN	?TexInfo@@3PAUTEXINFO@@A:DWORD			; TexInfo
EXTRN	?DrawFacingPoly@@YAXPAUVectorStruct@@PAUFACING_POLY@@JM@Z:NEAR ; DrawFacingPoly
;	COMDAT __real@42400000
CONST	SEGMENT
__real@42400000 DD 042400000r			; 48
CONST	ENDS
;	COMDAT __real@41e00000
CONST	SEGMENT
__real@41e00000 DD 041e00000r			; 28
CONST	ENDS
;	COMDAT __real@42fe0000
CONST	SEGMENT
__real@42fe0000 DD 042fe0000r			; 127
; Function compile flags: /Odt /ZI
CONST	ENDS
;	COMDAT ?RenderOilSlick@@YAXPAUobject_def@@@Z
_TEXT	SEGMENT
__temp$84369 = -68					; size = 4
_box$ = -64						; size = 24
_rgb$ = -40						; size = 4
_poly$ = -36						; size = 32
_oil$ = -4						; size = 4
_obj$ = 8						; size = 4
?RenderOilSlick@@YAXPAUobject_def@@@Z PROC NEAR		; RenderOilSlick, COMDAT

; 2975 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 132				; 00000084H
	push	ebx
	push	esi
	push	edi

; 2976 : 	OILSLICK_OBJ *oil = (OILSLICK_OBJ*)obj->Data;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+684]
	mov	DWORD PTR _oil$[ebp], ecx

; 2977 : 	FACING_POLY poly;
; 2978 : 	long rgb;
; 2979 : 	BOUNDING_BOX box;
; 2980 : 
; 2981 : // falling?
; 2982 : 
; 2983 : 	if (!oil->Mode)

	mov	eax, DWORD PTR _oil$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	$L84360

; 2984 : 	{
; 2985 : 		if (oil->Age < 0.5f)

	mov	eax, DWORD PTR _oil$[ebp]
	fld	DWORD PTR [eax+4]
	fcomp	DWORD PTR __real@3f000000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L84361

; 2986 : 			poly.Xsize = poly.Ysize = oil->Age * 48.0f + 8.0f;

	mov	eax, DWORD PTR _oil$[ebp]
	fld	DWORD PTR [eax+4]
	fmul	DWORD PTR __real@42400000
	fadd	DWORD PTR __real@41000000
	fstp	DWORD PTR _poly$[ebp+4]
	mov	ecx, DWORD PTR _poly$[ebp+4]
	mov	DWORD PTR _poly$[ebp], ecx

; 2987 : 		else

	jmp	SHORT $L84362
$L84361:

; 2988 : 			poly.Xsize = poly.Ysize = 32.0f;

	mov	DWORD PTR _poly$[ebp+4], 1107296256	; 42000000H
	mov	eax, DWORD PTR _poly$[ebp+4]
	mov	DWORD PTR _poly$[ebp], eax
$L84362:

; 2989 : 
; 2990 : 		poly.U = 130.0f / 256.0f;

	mov	DWORD PTR _poly$[ebp+8], 1057095680	; 3f020000H

; 2991 : 		poly.V = 66.0f / 256.0f;

	mov	DWORD PTR _poly$[ebp+12], 1048838144	; 3e840000H

; 2992 : 		poly.Usize = poly.Vsize = 60.0f / 256.0f;

	mov	DWORD PTR _poly$[ebp+20], 1047527424	; 3e700000H
	mov	eax, DWORD PTR _poly$[ebp+20]
	mov	DWORD PTR _poly$[ebp+16], eax

; 2993 : 		poly.Tpage = TPAGE_FX1;

	mov	WORD PTR _poly$[ebp+24], 27		; 0000001bH

; 2994 : 		poly.RGB = 0xffffff;

	mov	DWORD PTR _poly$[ebp+28], 16777215	; 00ffffffH

; 2995 : 
; 2996 : 		DrawFacingPoly(&obj->body.Centre.Pos, &poly, 2, 0);

	push	0
	push	2
	lea	eax, DWORD PTR _poly$[ebp]
	push	eax
	mov	ecx, DWORD PTR _obj$[ebp]
	add	ecx, 20					; 00000014H
	push	ecx
	call	?DrawFacingPoly@@YAXPAUVectorStruct@@PAUFACING_POLY@@JM@Z ; DrawFacingPoly
	add	esp, 16					; 00000010H

; 2997 : 	}
; 2998 : 
; 2999 : // on floor
; 3000 : 
; 3001 : 	else

	jmp	$L84354
$L84360:

; 3002 : 	{
; 3003 : 		SET_TPAGE(TPAGE_FX1);

	movsx	eax, WORD PTR ?RenderTP@@3FA		; RenderTP
	cmp	eax, 27					; 0000001bH
	je	SHORT $L84364
	mov	WORD PTR ?RenderTP@@3FA, 27		; RenderTP, 0000001bH
	movsx	eax, WORD PTR ?RenderTP@@3FA		; RenderTP
	cmp	eax, -1
	jne	SHORT $L84365
	push	0
	push	0
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	edx
	call	DWORD PTR [ecx+152]
	mov	eax, DWORD PTR ?TextureStateChange@@3JA	; TextureStateChange
	add	eax, 1
	mov	DWORD PTR ?TextureStateChange@@3JA, eax	; TextureStateChange
	jmp	SHORT $L84364
$L84365:
	movsx	eax, WORD PTR ?RenderTP@@3FA		; RenderTP
	shl	eax, 6
	mov	ecx, DWORD PTR ?TexInfo@@3PAUTEXINFO@@A	; TexInfo
	mov	edx, DWORD PTR [ecx+eax+52]
	push	edx
	push	0
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	edx
	call	DWORD PTR [ecx+152]
	mov	eax, DWORD PTR ?TextureStateChange@@3JA	; TextureStateChange
	add	eax, 1
	mov	DWORD PTR ?TextureStateChange@@3JA, eax	; TextureStateChange
$L84364:

; 3004 : 
; 3005 : 		if (oil->Age < 28.0f)

	mov	eax, DWORD PTR _oil$[ebp]
	fld	DWORD PTR [eax+4]
	fcomp	DWORD PTR __real@41e00000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L84367

; 3006 : 		{
; 3007 : 			rgb = 0xffffff;

	mov	DWORD PTR _rgb$[ebp], 16777215		; 00ffffffH

; 3008 : 		}
; 3009 : 		else

	jmp	SHORT $L84368
$L84367:

; 3010 : 		{
; 3011 : 			FTOL((30.0f - oil->Age) * 127, rgb);

	mov	eax, DWORD PTR _oil$[ebp]
	fld	DWORD PTR __real@41f00000
	fsub	DWORD PTR [eax+4]
	fmul	DWORD PTR __real@42fe0000
	fadd	DWORD PTR __real@4b000000
	fstp	DWORD PTR __temp$84369[ebp]
	mov	eax, DWORD PTR __temp$84369[ebp]
	and	eax, 16777215				; 00ffffffH
	mov	DWORD PTR _rgb$[ebp], eax

; 3012 : 			rgb |= (rgb << 8) | (rgb << 16);

	mov	eax, DWORD PTR _rgb$[ebp]
	shl	eax, 8
	mov	ecx, DWORD PTR _rgb$[ebp]
	shl	ecx, 16					; 00000010H
	or	eax, ecx
	or	eax, DWORD PTR _rgb$[ebp]
	mov	DWORD PTR _rgb$[ebp], eax
$L84368:

; 3013 : 		}
; 3014 : 
; 3015 : 		DrawShadow(&oil->Pos[0], &oil->Pos[1], &oil->Pos[2], &oil->Pos[3], 130.0f / 256.0f, 66.0f / 256.0f, 60.0f / 256.0f, 60.0f / 256.0f, rgb, -2.0f, 256.0f, 2, TPAGE_FX1, &box);

	lea	eax, DWORD PTR _box$[ebp]
	push	eax
	push	27					; 0000001bH
	push	2
	push	1132462080				; 43800000H
	push	-1073741824				; c0000000H
	mov	ecx, DWORD PTR _rgb$[ebp]
	push	ecx
	push	1047527424				; 3e700000H
	push	1047527424				; 3e700000H
	push	1048838144				; 3e840000H
	push	1057095680				; 3f020000H
	mov	edx, DWORD PTR _oil$[ebp]
	add	edx, 64					; 00000040H
	push	edx
	mov	eax, DWORD PTR _oil$[ebp]
	add	eax, 52					; 00000034H
	push	eax
	mov	ecx, DWORD PTR _oil$[ebp]
	add	ecx, 40					; 00000028H
	push	ecx
	mov	edx, DWORD PTR _oil$[ebp]
	add	edx, 28					; 0000001cH
	push	edx
	call	?DrawShadow@@YAXPAUVectorStruct@@000MMMMJMMJJPAUBoundingBoxStruct@@@Z ; DrawShadow
	add	esp, 56					; 00000038H

; 3016 : 
; 3017 : 		oil->Ymin = box.Ymin - 1.0f;

	fld	DWORD PTR _box$[ebp+8]
	fsub	DWORD PTR __real@3f800000
	mov	eax, DWORD PTR _oil$[ebp]
	fstp	DWORD PTR [eax+20]

; 3018 : 		oil->Ymax = box.Ymax + 1.0f;

	fld	DWORD PTR _box$[ebp+12]
	fadd	DWORD PTR __real@3f800000
	mov	eax, DWORD PTR _oil$[ebp]
	fstp	DWORD PTR [eax+24]
$L84354:

; 3019 : 	}
; 3020 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?RenderOilSlick@@YAXPAUobject_def@@@Z ENDP		; RenderOilSlick
_TEXT	ENDS
PUBLIC	__real@437f0000
EXTRN	?AddModelLight@@YAXPAUMODEL@@PAUVectorStruct@@PATMatrixUnion@@@Z:NEAR ; AddModelLight
EXTRN	?ViewCameraPos@@3UVectorStruct@@A:BYTE		; ViewCameraPos
EXTRN	?TestSphereToFrustum@@YAJPAUVectorStruct@@MPAM@Z:NEAR ; TestSphereToFrustum
EXTRN	?DxState@@3UDX_STATE@@A:BYTE			; DxState
EXTRN	?RenderStateChange@@3JA:DWORD			; RenderStateChange
EXTRN	?RenderFog@@3FA:WORD				; RenderFog
EXTRN	?CopyMat@@YAXPATMatrixUnion@@0@Z:NEAR		; CopyMat
EXTRN	?DrawModel@@YAXPAUMODEL@@PATMatrixUnion@@PAUVectorStruct@@F@Z:NEAR ; DrawModel
EXTRN	?TestObjectVisiboxes@@YADPAUBoundingBoxStruct@@@Z:NEAR ; TestObjectVisiboxes
EXTRN	?SetEnvStatic@@YAXPAUVectorStruct@@PATMatrixUnion@@JMMM@Z:NEAR ; SetEnvStatic
EXTRN	?CheckModelMeshFx@@YAXPAUMODEL@@PATMatrixUnion@@PAUVectorStruct@@PAF@Z:NEAR ; CheckModelMeshFx
EXTRN	?ModelVertFog@@3MA:DWORD			; ModelVertFog
EXTRN	?GetMirrorPlane@@YAJPAUVectorStruct@@@Z:NEAR	; GetMirrorPlane
EXTRN	?MirrorHeight@@3MA:DWORD			; MirrorHeight
EXTRN	?RenderSettings@@3URENDER_SETTINGS@@A:BYTE	; RenderSettings
EXTRN	?CheckObjectLight@@YAFPAUVectorStruct@@PAUBoundingBoxStruct@@M@Z:NEAR ; CheckObjectLight
;	COMDAT __real@437f0000
CONST	SEGMENT
__real@437f0000 DD 0437f0000r			; 255
; Function compile flags: /Odt /ZI
CONST	ENDS
;	COMDAT ?RenderChromeBall@@YAXPAUobject_def@@@Z
_TEXT	SEGMENT
_flag$ = -140						; size = 2
_visflag$ = -136					; size = 4
_pos$ = -132						; size = 4
_v3$ = -128						; size = 12
_v2$ = -116						; size = 12
_v1$ = -104						; size = 12
_v0$ = -92						; size = 12
_model$ = -80						; size = 4
_box$ = -76						; size = 24
_z$ = -52						; size = 4
_mul$ = -48						; size = 4
_mat$ = -44						; size = 36
_car$ = -8						; size = 4
_ball$ = -4						; size = 4
_obj$ = 8						; size = 4
?RenderChromeBall@@YAXPAUobject_def@@@Z PROC NEAR	; RenderChromeBall, COMDAT

; 3027 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi

; 3028 : 	CHROMEBALL_OBJ *ball = (CHROMEBALL_OBJ*)obj->Data;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+684]
	mov	DWORD PTR _ball$[ebp], ecx

; 3029 : 	CAR *car = &obj->player->car;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+588]
	add	ecx, 44					; 0000002cH
	mov	DWORD PTR _car$[ebp], ecx

; 3030 : 	MAT mat;
; 3031 : 	REAL mul;
; 3032 : 	REAL z;
; 3033 : 	BOUNDING_BOX box;
; 3034 : 	MODEL *model = &LevelModel[obj->DefaultModel].Model;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+656]
	imul	ecx, 168				; 000000a8H
	add	ecx, OFFSET FLAT:?LevelModel@@3PAULEVEL_MODEL@@A+8
	mov	DWORD PTR _model$[ebp], ecx

; 3035 : 	VEC v0, v1, v2, v3, *pos = &obj->body.Centre.Pos;

	mov	eax, DWORD PTR _obj$[ebp]
	add	eax, 20					; 00000014H
	mov	DWORD PTR _pos$[ebp], eax

; 3036 : 	long visflag;
; 3037 : 	short flag = MODEL_ENV;

	mov	WORD PTR _flag$[ebp], 4

; 3038 : 
; 3039 : // set rad matrix
; 3040 : 
; 3041 : 	CopyMat(&obj->body.Centre.WMatrix, &mat);

	lea	eax, DWORD PTR _mat$[ebp]
	push	eax
	mov	ecx, DWORD PTR _obj$[ebp]
	add	ecx, 100				; 00000064H
	push	ecx
	call	?CopyMat@@YAXPATMatrixUnion@@0@Z	; CopyMat
	add	esp, 8

; 3042 : 	mul = ball->Radius / LevelModel[obj->DefaultModel].Model.Radius;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+656]
	imul	ecx, 168				; 000000a8H
	mov	edx, DWORD PTR _ball$[ebp]
	fld	DWORD PTR [edx+4]
	fdiv	DWORD PTR ?LevelModel@@3PAULEVEL_MODEL@@A[ecx+8]
	fstp	DWORD PTR _mul$[ebp]

; 3043 : 	mat.m[XX] *= mul;

	fld	DWORD PTR _mat$[ebp]
	fmul	DWORD PTR _mul$[ebp]
	fstp	DWORD PTR _mat$[ebp]

; 3044 : 	mat.m[XY] *= mul;

	fld	DWORD PTR _mat$[ebp+4]
	fmul	DWORD PTR _mul$[ebp]
	fstp	DWORD PTR _mat$[ebp+4]

; 3045 : 	mat.m[XZ] *= mul;

	fld	DWORD PTR _mat$[ebp+8]
	fmul	DWORD PTR _mul$[ebp]
	fstp	DWORD PTR _mat$[ebp+8]

; 3046 : 	mat.m[YX] *= mul;

	fld	DWORD PTR _mat$[ebp+12]
	fmul	DWORD PTR _mul$[ebp]
	fstp	DWORD PTR _mat$[ebp+12]

; 3047 : 	mat.m[YY] *= mul;

	fld	DWORD PTR _mat$[ebp+16]
	fmul	DWORD PTR _mul$[ebp]
	fstp	DWORD PTR _mat$[ebp+16]

; 3048 : 	mat.m[YZ] *= mul;

	fld	DWORD PTR _mat$[ebp+20]
	fmul	DWORD PTR _mul$[ebp]
	fstp	DWORD PTR _mat$[ebp+20]

; 3049 : 	mat.m[ZX] *= mul;

	fld	DWORD PTR _mat$[ebp+24]
	fmul	DWORD PTR _mul$[ebp]
	fstp	DWORD PTR _mat$[ebp+24]

; 3050 : 	mat.m[ZY] *= mul;

	fld	DWORD PTR _mat$[ebp+28]
	fmul	DWORD PTR _mul$[ebp]
	fstp	DWORD PTR _mat$[ebp+28]

; 3051 : 	mat.m[ZZ] *= mul;

	fld	DWORD PTR _mat$[ebp+32]
	fmul	DWORD PTR _mul$[ebp]
	fstp	DWORD PTR _mat$[ebp+32]

; 3052 : 
; 3053 : // get bounding box
; 3054 : 
; 3055 : 	box.Xmin = pos->v[X] - model->Radius;

	mov	eax, DWORD PTR _pos$[ebp]
	mov	ecx, DWORD PTR _model$[ebp]
	fld	DWORD PTR [eax]
	fsub	DWORD PTR [ecx]
	fstp	DWORD PTR _box$[ebp]

; 3056 : 	box.Xmax = pos->v[X] + model->Radius;

	mov	eax, DWORD PTR _pos$[ebp]
	mov	ecx, DWORD PTR _model$[ebp]
	fld	DWORD PTR [eax]
	fadd	DWORD PTR [ecx]
	fstp	DWORD PTR _box$[ebp+4]

; 3057 : 	box.Ymin = pos->v[Y] - model->Radius;

	mov	eax, DWORD PTR _pos$[ebp]
	mov	ecx, DWORD PTR _model$[ebp]
	fld	DWORD PTR [eax+4]
	fsub	DWORD PTR [ecx]
	fstp	DWORD PTR _box$[ebp+8]

; 3058 : 	box.Ymax = pos->v[Y] + model->Radius;

	mov	eax, DWORD PTR _pos$[ebp]
	mov	ecx, DWORD PTR _model$[ebp]
	fld	DWORD PTR [eax+4]
	fadd	DWORD PTR [ecx]
	fstp	DWORD PTR _box$[ebp+12]

; 3059 : 	box.Zmin = pos->v[Z] - model->Radius;

	mov	eax, DWORD PTR _pos$[ebp]
	mov	ecx, DWORD PTR _model$[ebp]
	fld	DWORD PTR [eax+8]
	fsub	DWORD PTR [ecx]
	fstp	DWORD PTR _box$[ebp+16]

; 3060 : 	box.Zmax = pos->v[Z] + model->Radius;

	mov	eax, DWORD PTR _pos$[ebp]
	mov	ecx, DWORD PTR _model$[ebp]
	fld	DWORD PTR [eax+8]
	fadd	DWORD PTR [ecx]
	fstp	DWORD PTR _box$[ebp+20]

; 3061 : 
; 3062 : // test against visicubes
; 3063 : 
; 3064 : 	if (TestObjectVisiboxes(&box))

	lea	eax, DWORD PTR _box$[ebp]
	push	eax
	call	?TestObjectVisiboxes@@YADPAUBoundingBoxStruct@@@Z ; TestObjectVisiboxes
	add	esp, 4
	movsx	ecx, al
	test	ecx, ecx
	je	SHORT $L84390

; 3065 : 		return;

	jmp	$L84374
$L84390:

; 3066 : 
; 3067 : // skip if offscreen
; 3068 : 
; 3069 : 	visflag = TestSphereToFrustum(pos, ball->Radius, &z);

	lea	eax, DWORD PTR _z$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ball$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _pos$[ebp]
	push	eax
	call	?TestSphereToFrustum@@YAJPAUVectorStruct@@MPAM@Z ; TestSphereToFrustum
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _visflag$[ebp], eax

; 3070 : 	if (visflag == SPHERE_OUT) return;

	cmp	DWORD PTR _visflag$[ebp], 0
	jne	SHORT $L84391
	jmp	$L84374
$L84391:

; 3071 : 	if (visflag == SPHERE_IN) flag |= MODEL_DONOTCLIP;

	cmp	DWORD PTR _visflag$[ebp], 2
	jne	SHORT $L84392
	movsx	eax, WORD PTR _flag$[ebp]
	or	eax, 8
	mov	WORD PTR _flag$[ebp], ax
$L84392:

; 3072 : 
; 3073 : // set visible flag
; 3074 : 
; 3075 : 	obj->renderflag.visible = TRUE;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+584]
	or	ecx, 64					; 00000040H
	mov	edx, DWORD PTR _obj$[ebp]
	mov	DWORD PTR [edx+584], ecx

; 3076 : 
; 3077 : // set env
; 3078 : 
; 3079 : 	SetEnvStatic(pos, &obj->body.Centre.WMatrix, 0x808080, 0.0f, 0.1f, 0.5f);

	push	1056964608				; 3f000000H
	push	1036831949				; 3dcccccdH
	push	0
	push	8421504					; 00808080H
	mov	eax, DWORD PTR _obj$[ebp]
	add	eax, 100				; 00000064H
	push	eax
	mov	ecx, DWORD PTR _pos$[ebp]
	push	ecx
	call	?SetEnvStatic@@YAXPAUVectorStruct@@PATMatrixUnion@@JMMM@Z ; SetEnvStatic
	add	esp, 24					; 00000018H

; 3080 : 
; 3081 : // in light?
; 3082 : 
; 3083 : 	if (CheckObjectLight(pos, &box, model->Radius))

	mov	eax, DWORD PTR _model$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	lea	edx, DWORD PTR _box$[ebp]
	push	edx
	mov	eax, DWORD PTR _pos$[ebp]
	push	eax
	call	?CheckObjectLight@@YAFPAUVectorStruct@@PAUBoundingBoxStruct@@M@Z ; CheckObjectLight
	add	esp, 12					; 0000000cH
	movsx	ecx, ax
	test	ecx, ecx
	je	SHORT $L84393

; 3084 : 	{
; 3085 : 		flag |= MODEL_LIT;

	movsx	eax, WORD PTR _flag$[ebp]
	or	eax, 2
	mov	WORD PTR _flag$[ebp], ax

; 3086 : 		AddModelLight(model, pos, &obj->body.Centre.WMatrix);

	mov	eax, DWORD PTR _obj$[ebp]
	add	eax, 100				; 00000064H
	push	eax
	mov	ecx, DWORD PTR _pos$[ebp]
	push	ecx
	mov	edx, DWORD PTR _model$[ebp]
	push	edx
	call	?AddModelLight@@YAXPAUMODEL@@PAUVectorStruct@@PATMatrixUnion@@@Z ; AddModelLight
	add	esp, 12					; 0000000cH
$L84393:

; 3087 : 	}
; 3088 : 
; 3089 : // reflect?
; 3090 : 
; 3091 : 	if (RenderSettings.Mirror)

	cmp	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+80, 0
	je	SHORT $L84394

; 3092 : 	{
; 3093 : 		if (GetMirrorPlane(pos))

	mov	eax, DWORD PTR _pos$[ebp]
	push	eax
	call	?GetMirrorPlane@@YAJPAUVectorStruct@@@Z	; GetMirrorPlane
	add	esp, 4
	test	eax, eax
	je	SHORT $L84394

; 3094 : 		{
; 3095 : 			if (ViewCameraPos.v[Y] < MirrorHeight)

	fld	DWORD PTR ?ViewCameraPos@@3UVectorStruct@@A+4
	fcomp	DWORD PTR ?MirrorHeight@@3MA		; MirrorHeight
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L84394

; 3096 : 				flag |= MODEL_MIRROR;

	movsx	eax, WORD PTR _flag$[ebp]
	or	eax, 16					; 00000010H
	mov	WORD PTR _flag$[ebp], ax
$L84394:

; 3097 : 		}
; 3098 : 	}
; 3099 : 
; 3100 : // in fog?
; 3101 : 
; 3102 : 	if (z + model->Radius > RenderSettings.FogStart && DxState.Fog)

	mov	eax, DWORD PTR _model$[ebp]
	fld	DWORD PTR _z$[ebp]
	fadd	DWORD PTR [eax]
	fcomp	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+48
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	$L84397
	cmp	DWORD PTR ?DxState@@3UDX_STATE@@A+36, 0
	je	$L84397

; 3103 : 	{
; 3104 : 		ModelVertFog = (pos->v[Y] - RenderSettings.VertFogStart) * RenderSettings.VertFogMul;

	mov	eax, DWORD PTR _pos$[ebp]
	fld	DWORD PTR [eax+4]
	fsub	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+60
	fmul	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+72
	fstp	DWORD PTR ?ModelVertFog@@3MA		; ModelVertFog

; 3105 : 		if (ModelVertFog < 0) ModelVertFog = 0;

	fld	DWORD PTR ?ModelVertFog@@3MA		; ModelVertFog
	fcomp	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L84398
	mov	DWORD PTR ?ModelVertFog@@3MA, 0
$L84398:

; 3106 : 		if (ModelVertFog > 255) ModelVertFog = 255;

	fld	DWORD PTR ?ModelVertFog@@3MA		; ModelVertFog
	fcomp	DWORD PTR __real@437f0000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $L84399
	mov	DWORD PTR ?ModelVertFog@@3MA, 1132396544 ; 437f0000H
$L84399:

; 3107 : 
; 3108 : 		flag |= MODEL_FOG;

	movsx	eax, WORD PTR _flag$[ebp]
	or	eax, 1
	mov	WORD PTR _flag$[ebp], ax

; 3109 : 		FOG_ON();

	movsx	eax, WORD PTR ?RenderFog@@3FA		; RenderFog
	test	eax, eax
	jne	SHORT $L84397
	mov	WORD PTR ?RenderFog@@3FA, 1		; RenderFog
	movsx	eax, WORD PTR ?RenderFog@@3FA		; RenderFog
	push	eax
	push	28					; 0000001cH
	mov	ecx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	eax
	call	DWORD PTR [edx+88]
	mov	eax, DWORD PTR ?RenderStateChange@@3JA	; RenderStateChange
	add	eax, 1
	mov	DWORD PTR ?RenderStateChange@@3JA, eax	; RenderStateChange
$L84397:

; 3110 : 	}
; 3111 : 
; 3112 : // mesh fx?
; 3113 : 
; 3114 : 	CheckModelMeshFx(model, &obj->body.Centre.WMatrix, pos, &flag);

	lea	eax, DWORD PTR _flag$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pos$[ebp]
	push	ecx
	mov	edx, DWORD PTR _obj$[ebp]
	add	edx, 100				; 00000064H
	push	edx
	mov	eax, DWORD PTR _model$[ebp]
	push	eax
	call	?CheckModelMeshFx@@YAXPAUMODEL@@PATMatrixUnion@@PAUVectorStruct@@PAF@Z ; CheckModelMeshFx
	add	esp, 16					; 00000010H

; 3115 : 
; 3116 : // draw model
; 3117 : 
; 3118 : 	DrawModel(model, &mat, pos, flag);

	mov	ax, WORD PTR _flag$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pos$[ebp]
	push	ecx
	lea	edx, DWORD PTR _mat$[ebp]
	push	edx
	mov	eax, DWORD PTR _model$[ebp]
	push	eax
	call	?DrawModel@@YAXPAUMODEL@@PATMatrixUnion@@PAUVectorStruct@@F@Z ; DrawModel
	add	esp, 16					; 00000010H

; 3119 : 
; 3120 : // fog off?
; 3121 : 
; 3122 : 	if (flag & MODEL_FOG)

	movsx	eax, WORD PTR _flag$[ebp]
	and	eax, 1
	je	SHORT $L84401

; 3123 : 		FOG_OFF();

	movsx	eax, WORD PTR ?RenderFog@@3FA		; RenderFog
	test	eax, eax
	je	SHORT $L84401
	mov	WORD PTR ?RenderFog@@3FA, 0		; RenderFog
	movsx	eax, WORD PTR ?RenderFog@@3FA		; RenderFog
	push	eax
	push	28					; 0000001cH
	mov	ecx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	eax
	call	DWORD PTR [edx+88]
	mov	eax, DWORD PTR ?RenderStateChange@@3JA	; RenderStateChange
	add	eax, 1
	mov	DWORD PTR ?RenderStateChange@@3JA, eax	; RenderStateChange
$L84401:

; 3124 : 
; 3125 : // draw shadow
; 3126 : 
; 3127 : 	SetVector(&v0, pos->v[X] - ball->Radius, pos->v[Y], pos->v[Z] - ball->Radius);

	mov	eax, DWORD PTR _pos$[ebp]
	mov	ecx, DWORD PTR _ball$[ebp]
	fld	DWORD PTR [eax]
	fsub	DWORD PTR [ecx+4]
	fstp	DWORD PTR _v0$[ebp]
	mov	eax, DWORD PTR _pos$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _v0$[ebp+4], ecx
	mov	eax, DWORD PTR _pos$[ebp]
	mov	ecx, DWORD PTR _ball$[ebp]
	fld	DWORD PTR [eax+8]
	fsub	DWORD PTR [ecx+4]
	fstp	DWORD PTR _v0$[ebp+8]

; 3128 : 	SetVector(&v1, pos->v[X] + ball->Radius, pos->v[Y], pos->v[Z] - ball->Radius);

	mov	eax, DWORD PTR _pos$[ebp]
	mov	ecx, DWORD PTR _ball$[ebp]
	fld	DWORD PTR [eax]
	fadd	DWORD PTR [ecx+4]
	fstp	DWORD PTR _v1$[ebp]
	mov	eax, DWORD PTR _pos$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _v1$[ebp+4], ecx
	mov	eax, DWORD PTR _pos$[ebp]
	mov	ecx, DWORD PTR _ball$[ebp]
	fld	DWORD PTR [eax+8]
	fsub	DWORD PTR [ecx+4]
	fstp	DWORD PTR _v1$[ebp+8]

; 3129 : 	SetVector(&v2, pos->v[X] + ball->Radius, pos->v[Y], pos->v[Z] + ball->Radius);

	mov	eax, DWORD PTR _pos$[ebp]
	mov	ecx, DWORD PTR _ball$[ebp]
	fld	DWORD PTR [eax]
	fadd	DWORD PTR [ecx+4]
	fstp	DWORD PTR _v2$[ebp]
	mov	eax, DWORD PTR _pos$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _v2$[ebp+4], ecx
	mov	eax, DWORD PTR _pos$[ebp]
	mov	ecx, DWORD PTR _ball$[ebp]
	fld	DWORD PTR [eax+8]
	fadd	DWORD PTR [ecx+4]
	fstp	DWORD PTR _v2$[ebp+8]

; 3130 : 	SetVector(&v3, pos->v[X] - ball->Radius, pos->v[Y], pos->v[Z] + ball->Radius);

	mov	eax, DWORD PTR _pos$[ebp]
	mov	ecx, DWORD PTR _ball$[ebp]
	fld	DWORD PTR [eax]
	fsub	DWORD PTR [ecx+4]
	fstp	DWORD PTR _v3$[ebp]
	mov	eax, DWORD PTR _pos$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _v3$[ebp+4], ecx
	mov	eax, DWORD PTR _pos$[ebp]
	mov	ecx, DWORD PTR _ball$[ebp]
	fld	DWORD PTR [eax+8]
	fadd	DWORD PTR [ecx+4]
	fstp	DWORD PTR _v3$[ebp+8]

; 3131 : 
; 3132 : 	DrawShadow(&v0, &v1, &v2, &v3, 193.0f / 256.0f, 129.0f / 256.0f, 62.0f / 256.0f, 62.0f / 256.0f, 0x808080, -2.0f, 0.0f, 2, TPAGE_FX1, NULL);

	push	0
	push	27					; 0000001bH
	push	2
	push	0
	push	-1073741824				; c0000000H
	push	8421504					; 00808080H
	push	1048051712				; 3e780000H
	push	1048051712				; 3e780000H
	push	1057030144				; 3f010000H
	push	1061224448				; 3f410000H
	lea	eax, DWORD PTR _v3$[ebp]
	push	eax
	lea	ecx, DWORD PTR _v2$[ebp]
	push	ecx
	lea	edx, DWORD PTR _v1$[ebp]
	push	edx
	lea	eax, DWORD PTR _v0$[ebp]
	push	eax
	call	?DrawShadow@@YAXPAUVectorStruct@@000MMMMJMMJJPAUBoundingBoxStruct@@@Z ; DrawShadow
	add	esp, 56					; 00000038H
$L84374:

; 3133 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?RenderChromeBall@@YAXPAUobject_def@@@Z ENDP		; RenderChromeBall
; Function compile flags: /Odt /ZI
_TEXT	ENDS
;	COMDAT ?RenderElectroZapped@@YAXPAUobject_def@@@Z
_TEXT	SEGMENT
tv85 = -73						; size = 1
_car$ = -8						; size = 4
_electro$ = -4						; size = 4
_obj$ = 8						; size = 4
?RenderElectroZapped@@YAXPAUobject_def@@@Z PROC NEAR	; RenderElectroZapped, COMDAT

; 3140 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi

; 3141 : 	ELECTROZAPPED_OBJ *electro = (ELECTROZAPPED_OBJ*)obj->Data;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+684]
	mov	DWORD PTR _electro$[ebp], ecx

; 3142 : 	CAR *car = &obj->player->car;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+588]
	add	ecx, 44					; 0000002cH
	mov	DWORD PTR _car$[ebp], ecx

; 3143 : 
; 3144 : // draw model
; 3145 : 
; 3146 : 	obj->renderflag.visible |= RenderObjectModel(&car->Body->Centre.WMatrix, &car->BodyWorldPos, &electro->Model, obj->EnvRGB, obj->renderflag);

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+584]
	push	ecx
	mov	edx, DWORD PTR _obj$[ebp]
	mov	eax, DWORD PTR [edx+652]
	push	eax
	mov	ecx, DWORD PTR _electro$[ebp]
	push	ecx
	mov	edx, DWORD PTR _car$[ebp]
	add	edx, 772				; 00000304H
	push	edx
	mov	eax, DWORD PTR _car$[ebp]
	mov	ecx, DWORD PTR [eax+856]
	add	ecx, 100				; 00000064H
	push	ecx
	call	?RenderObjectModel@@YA_NPATMatrixUnion@@PAUVectorStruct@@PAUMODEL@@JUrenderflags@@@Z ; RenderObjectModel
	add	esp, 20					; 00000014H
	mov	BYTE PTR tv85[ebp], al
	movzx	edx, BYTE PTR tv85[ebp]
	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+584]
	shr	ecx, 6
	and	ecx, 1
	or	ecx, edx
	and	ecx, 1
	shl	ecx, 6
	mov	edx, DWORD PTR _obj$[ebp]
	mov	eax, DWORD PTR [edx+584]
	and	eax, -65				; ffffffbfH
	or	eax, ecx
	mov	ecx, DWORD PTR _obj$[ebp]
	mov	DWORD PTR [ecx+584], eax

; 3147 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?RenderElectroZapped@@YAXPAUobject_def@@@Z ENDP		; RenderElectroZapped
; Function compile flags: /Odt /ZI
_TEXT	ENDS
;	COMDAT ?RenderBombGlow@@YAXPAUobject_def@@@Z
_TEXT	SEGMENT
tv86 = -73						; size = 1
_car$ = -8						; size = 4
_glow$ = -4						; size = 4
_obj$ = 8						; size = 4
?RenderBombGlow@@YAXPAUobject_def@@@Z PROC NEAR		; RenderBombGlow, COMDAT

; 3154 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi

; 3155 : 	BOMBGLOW_OBJ *glow = (BOMBGLOW_OBJ*)obj->Data;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+684]
	mov	DWORD PTR _glow$[ebp], ecx

; 3156 : 	CAR *car = &obj->player->car;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+588]
	add	ecx, 44					; 0000002cH
	mov	DWORD PTR _car$[ebp], ecx

; 3157 : 
; 3158 : // draw model
; 3159 : 
; 3160 : 	obj->renderflag.visible |= RenderObjectModel(&car->Body->Centre.WMatrix, &car->BodyWorldPos, &glow->Model, obj->EnvRGB, obj->renderflag);

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+584]
	push	ecx
	mov	edx, DWORD PTR _obj$[ebp]
	mov	eax, DWORD PTR [edx+652]
	push	eax
	mov	ecx, DWORD PTR _glow$[ebp]
	add	ecx, 4
	push	ecx
	mov	edx, DWORD PTR _car$[ebp]
	add	edx, 772				; 00000304H
	push	edx
	mov	eax, DWORD PTR _car$[ebp]
	mov	ecx, DWORD PTR [eax+856]
	add	ecx, 100				; 00000064H
	push	ecx
	call	?RenderObjectModel@@YA_NPATMatrixUnion@@PAUVectorStruct@@PAUMODEL@@JUrenderflags@@@Z ; RenderObjectModel
	add	esp, 20					; 00000014H
	mov	BYTE PTR tv86[ebp], al
	movzx	edx, BYTE PTR tv86[ebp]
	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+584]
	shr	ecx, 6
	and	ecx, 1
	or	ecx, edx
	and	ecx, 1
	shl	ecx, 6
	mov	edx, DWORD PTR _obj$[ebp]
	mov	eax, DWORD PTR [edx+584]
	and	eax, -65				; ffffffbfH
	or	eax, ecx
	mov	ecx, DWORD PTR _obj$[ebp]
	mov	DWORD PTR [ecx+584], eax

; 3161 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?RenderBombGlow@@YAXPAUobject_def@@@Z ENDP		; RenderBombGlow
_TEXT	ENDS
EXTRN	?CopyMatrix@@YAXPATMatrixUnion@@0@Z:NEAR	; CopyMatrix
; Function compile flags: /Odt /ZI
;	COMDAT ?RenderWaterBomb@@YAXPAUobject_def@@@Z
_TEXT	SEGMENT
tv168 = -129						; size = 1
_mat$ = -64						; size = 36
_vec2$ = -28						; size = 12
_vec$ = -16						; size = 12
_bomb$ = -4						; size = 4
_obj$ = 8						; size = 4
?RenderWaterBomb@@YAXPAUobject_def@@@Z PROC NEAR	; RenderWaterBomb, COMDAT

; 3168 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 132				; 00000084H
	push	ebx
	push	esi
	push	edi

; 3169 : 	WATERBOMB_OBJ *bomb = (WATERBOMB_OBJ*)obj->Data;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+684]
	mov	DWORD PTR _bomb$[ebp], ecx

; 3170 : 	VEC vec, vec2;
; 3171 : 	MAT mat;
; 3172 : 
; 3173 : // get world pos / mat
; 3174 : 
; 3175 : 	SetVector(&vec2, WaterBombOff.v[X], WaterBombOff.v[Y] + (WATERBOMB_RADIUS * bomb->ScalarHoriz) - WATERBOMB_RADIUS, WaterBombOff.v[Z]);

	mov	eax, DWORD PTR _WaterBombOff
	mov	DWORD PTR _vec2$[ebp], eax
	mov	eax, DWORD PTR _bomb$[ebp]
	fld	DWORD PTR __real@41f00000
	fmul	DWORD PTR [eax+8]
	fadd	DWORD PTR _WaterBombOff+4
	fsub	DWORD PTR __real@41f00000
	fstp	DWORD PTR _vec2$[ebp+4]
	mov	eax, DWORD PTR _WaterBombOff+8
	mov	DWORD PTR _vec2$[ebp+8], eax

; 3176 : 	RotTransVector(&obj->body.Centre.WMatrix, &obj->body.Centre.Pos, &vec2, &vec);

	lea	eax, DWORD PTR _vec$[ebp]
	push	eax
	lea	ecx, DWORD PTR _vec2$[ebp]
	push	ecx
	mov	edx, DWORD PTR _obj$[ebp]
	add	edx, 20					; 00000014H
	push	edx
	mov	eax, DWORD PTR _obj$[ebp]
	add	eax, 100				; 00000064H
	push	eax
	call	?RotTransVector@@YAXPATMatrixUnion@@PAUVectorStruct@@11@Z ; RotTransVector
	add	esp, 16					; 00000010H

; 3177 : 	CopyMatrix(&obj->body.Centre.WMatrix, &mat);

	lea	eax, DWORD PTR _mat$[ebp]
	push	eax
	mov	ecx, DWORD PTR _obj$[ebp]
	add	ecx, 100				; 00000064H
	push	ecx
	call	?CopyMatrix@@YAXPATMatrixUnion@@0@Z	; CopyMatrix
	add	esp, 8

; 3178 : 
; 3179 : 	mat.m[RX] *= bomb->ScalarHoriz;

	mov	eax, DWORD PTR _bomb$[ebp]
	fld	DWORD PTR _mat$[ebp]
	fmul	DWORD PTR [eax+8]
	fstp	DWORD PTR _mat$[ebp]

; 3180 : 	mat.m[RY] *= bomb->ScalarHoriz;

	mov	eax, DWORD PTR _bomb$[ebp]
	fld	DWORD PTR _mat$[ebp+4]
	fmul	DWORD PTR [eax+8]
	fstp	DWORD PTR _mat$[ebp+4]

; 3181 : 	mat.m[RZ] *= bomb->ScalarHoriz;

	mov	eax, DWORD PTR _bomb$[ebp]
	fld	DWORD PTR _mat$[ebp+8]
	fmul	DWORD PTR [eax+8]
	fstp	DWORD PTR _mat$[ebp+8]

; 3182 : 	mat.m[LX] *= bomb->ScalarHoriz;

	mov	eax, DWORD PTR _bomb$[ebp]
	fld	DWORD PTR _mat$[ebp+24]
	fmul	DWORD PTR [eax+8]
	fstp	DWORD PTR _mat$[ebp+24]

; 3183 : 	mat.m[LY] *= bomb->ScalarHoriz;

	mov	eax, DWORD PTR _bomb$[ebp]
	fld	DWORD PTR _mat$[ebp+28]
	fmul	DWORD PTR [eax+8]
	fstp	DWORD PTR _mat$[ebp+28]

; 3184 : 	mat.m[LZ] *= bomb->ScalarHoriz;

	mov	eax, DWORD PTR _bomb$[ebp]
	fld	DWORD PTR _mat$[ebp+32]
	fmul	DWORD PTR [eax+8]
	fstp	DWORD PTR _mat$[ebp+32]

; 3185 : 
; 3186 : 	mat.m[YX] *= bomb->ScalarVert;

	mov	eax, DWORD PTR _bomb$[ebp]
	fld	DWORD PTR _mat$[ebp+12]
	fmul	DWORD PTR [eax+12]
	fstp	DWORD PTR _mat$[ebp+12]

; 3187 : 	mat.m[YY] *= bomb->ScalarVert;

	mov	eax, DWORD PTR _bomb$[ebp]
	fld	DWORD PTR _mat$[ebp+16]
	fmul	DWORD PTR [eax+12]
	fstp	DWORD PTR _mat$[ebp+16]

; 3188 : 	mat.m[YZ] *= bomb->ScalarVert;

	mov	eax, DWORD PTR _bomb$[ebp]
	fld	DWORD PTR _mat$[ebp+20]
	fmul	DWORD PTR [eax+12]
	fstp	DWORD PTR _mat$[ebp+20]

; 3189 : 
; 3190 : // draw
; 3191 : 
; 3192 : 	obj->renderflag.visible |= RenderObjectModel(&mat, &vec, &LevelModel[obj->DefaultModel].Model, obj->EnvRGB, obj->renderflag);

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+584]
	push	ecx
	mov	edx, DWORD PTR _obj$[ebp]
	mov	eax, DWORD PTR [edx+652]
	push	eax
	mov	ecx, DWORD PTR _obj$[ebp]
	mov	edx, DWORD PTR [ecx+656]
	imul	edx, 168				; 000000a8H
	add	edx, OFFSET FLAT:?LevelModel@@3PAULEVEL_MODEL@@A+8
	push	edx
	lea	eax, DWORD PTR _vec$[ebp]
	push	eax
	lea	ecx, DWORD PTR _mat$[ebp]
	push	ecx
	call	?RenderObjectModel@@YA_NPATMatrixUnion@@PAUVectorStruct@@PAUMODEL@@JUrenderflags@@@Z ; RenderObjectModel
	add	esp, 20					; 00000014H
	mov	BYTE PTR tv168[ebp], al
	movzx	edx, BYTE PTR tv168[ebp]
	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+584]
	shr	ecx, 6
	and	ecx, 1
	or	ecx, edx
	and	ecx, 1
	shl	ecx, 6
	mov	edx, DWORD PTR _obj$[ebp]
	mov	eax, DWORD PTR [edx+584]
	and	eax, -65				; ffffffbfH
	or	eax, ecx
	mov	ecx, DWORD PTR _obj$[ebp]
	mov	DWORD PTR [ecx+584], eax

; 3193 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?RenderWaterBomb@@YAXPAUobject_def@@@Z ENDP		; RenderWaterBomb
_TEXT	ENDS
PUBLIC	__real@42040000
PUBLIC	__real@41f80000
PUBLIC	__real@43400000
EXTRN	?Identity@@3TMatrixUnion@@A:BYTE		; Identity
;	COMDAT __real@42040000
CONST	SEGMENT
__real@42040000 DD 042040000r			; 33
CONST	ENDS
;	COMDAT __real@41f80000
CONST	SEGMENT
__real@41f80000 DD 041f80000r			; 31
CONST	ENDS
;	COMDAT __real@43400000
CONST	SEGMENT
__real@43400000 DD 043400000r			; 192
; Function compile flags: /Odt /ZI
CONST	ENDS
;	COMDAT ?RenderPuttyBombBang@@YAXPAUobject_def@@@Z
_TEXT	SEGMENT
tv415 = -244						; size = 4
tv408 = -244						; size = 4
tv297 = -241						; size = 1
__temp$84456 = -176					; size = 4
__temp$84450 = -172					; size = 4
_v3$ = -168						; size = 12
_v2$ = -156						; size = 12
_v1$ = -144						; size = 12
_v0$ = -132						; size = 12
_mrgb$ = -120						; size = 4
_mp$ = -116						; size = 4
_model$ = -112						; size = 4
_mat$ = -108						; size = 36
_poly$ = -72						; size = 32
_size$ = -40						; size = 4
_tv$ = -36						; size = 4
_tu$ = -32						; size = 4
_z$ = -28						; size = 4
_x$ = -24						; size = 4
_mul$ = -20						; size = 4
_rgb$ = -16						; size = 4
_frame$ = -12						; size = 4
_i$ = -8						; size = 4
_bomb$ = -4						; size = 4
_obj$ = 8						; size = 4
?RenderPuttyBombBang@@YAXPAUobject_def@@@Z PROC NEAR	; RenderPuttyBombBang, COMDAT

; 3200 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 244				; 000000f4H
	push	ebx
	push	esi
	push	edi

; 3201 : 	PUTTYBOMB_OBJ *bomb = (PUTTYBOMB_OBJ*)obj->Data;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+684]
	mov	DWORD PTR _bomb$[ebp], ecx

; 3202 : 	long i, frame, rgb;
; 3203 : 	REAL mul, x, z, tu, tv, size;
; 3204 : 	FACING_POLY poly;
; 3205 : 	MAT mat;
; 3206 : 	MODEL *model = &LevelModel[obj->DefaultModel].Model;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+656]
	imul	ecx, 168				; 000000a8H
	add	ecx, OFFSET FLAT:?LevelModel@@3PAULEVEL_MODEL@@A+8
	mov	DWORD PTR _model$[ebp], ecx

; 3207 : 	MODEL_POLY *mp;
; 3208 : 	POLY_RGB *mrgb;
; 3209 : 	VEC v0, v1, v2, v3;
; 3210 : 
; 3211 : // draw bang pieces
; 3212 : 
; 3213 : 	poly.Usize = poly.Vsize = 30.0f / 256.0f;

	mov	DWORD PTR _poly$[ebp+20], 1039138816	; 3df00000H
	mov	eax, DWORD PTR _poly$[ebp+20]
	mov	DWORD PTR _poly$[ebp+16], eax

; 3214 : 	poly.Tpage = TPAGE_FX3;

	mov	WORD PTR _poly$[ebp+24], 29		; 0000001dH

; 3215 : 	poly.RGB = 0xffffff;

	mov	DWORD PTR _poly$[ebp+28], 16777215	; 00ffffffH

; 3216 : 
; 3217 : 	for (i = 0 ; i < PUTTYBOMB_BANG_NUM ; i++) if (bomb->Bang[i].Age >= 0.0f && bomb->Bang[i].Age < bomb->Bang[i].Life)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $L84446
$L84447:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$L84446:
	cmp	DWORD PTR _i$[ebp], 64			; 00000040H
	jge	$L84448
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 36					; 00000024H
	mov	ecx, DWORD PTR _bomb$[ebp]
	fld	DWORD PTR [ecx+eax+72]
	fcomp	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 1
	jne	$L84449
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 36					; 00000024H
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 36					; 00000024H
	mov	edx, DWORD PTR _bomb$[ebp]
	mov	esi, DWORD PTR _bomb$[ebp]
	fld	DWORD PTR [edx+eax+72]
	fcomp	DWORD PTR [esi+ecx+80]
	fnstsw	ax
	test	ah, 5
	jp	$L84449

; 3218 : 	{
; 3219 : 		FTOL(bomb->Bang[i].Age / bomb->Bang[i].Life * 16.0f, frame);

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 36					; 00000024H
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 36					; 00000024H
	mov	edx, DWORD PTR _bomb$[ebp]
	mov	esi, DWORD PTR _bomb$[ebp]
	fld	DWORD PTR [edx+eax+72]
	fdiv	DWORD PTR [esi+ecx+80]
	fmul	DWORD PTR __real@41800000
	fadd	DWORD PTR __real@4b000000
	fstp	DWORD PTR __temp$84450[ebp]
	mov	eax, DWORD PTR __temp$84450[ebp]
	and	eax, 16777215				; 00ffffffH
	mov	DWORD PTR _frame$[ebp], eax

; 3220 : 		poly.U = ((float)(frame & 7) * 32.0f + 1.0f) / 256.0f;

	mov	eax, DWORD PTR _frame$[ebp]
	and	eax, 7
	mov	DWORD PTR tv408[ebp], eax
	fild	DWORD PTR tv408[ebp]
	fmul	DWORD PTR __real@42000000
	fadd	DWORD PTR __real@3f800000
	fdiv	DWORD PTR __real@43800000
	fstp	DWORD PTR _poly$[ebp+8]

; 3221 : 		poly.V = ((float)(frame / 8) * 32.0f + 33.0f) / 256.0f;

	mov	eax, DWORD PTR _frame$[ebp]
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	mov	DWORD PTR tv415[ebp], eax
	fild	DWORD PTR tv415[ebp]
	fmul	DWORD PTR __real@42000000
	fadd	DWORD PTR __real@42040000
	fdiv	DWORD PTR __real@43800000
	fstp	DWORD PTR _poly$[ebp+12]

; 3222 : 	
; 3223 : 		poly.Xsize = poly.Ysize = bomb->Bang[i].Size;

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 36					; 00000024H
	mov	ecx, DWORD PTR _bomb$[ebp]
	mov	edx, DWORD PTR [ecx+eax+76]
	mov	DWORD PTR _poly$[ebp+4], edx
	mov	eax, DWORD PTR _poly$[ebp+4]
	mov	DWORD PTR _poly$[ebp], eax

; 3224 : 
; 3225 : 		DrawFacingPoly(&bomb->Bang[i].Pos, &poly, 1, 0.0f);

	push	0
	push	1
	lea	eax, DWORD PTR _poly$[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 36					; 00000024H
	mov	edx, DWORD PTR _bomb$[ebp]
	lea	eax, DWORD PTR [edx+ecx+48]
	push	eax
	call	?DrawFacingPoly@@YAXPAUVectorStruct@@PAUFACING_POLY@@JM@Z ; DrawFacingPoly
	add	esp, 16					; 00000010H
$L84449:

; 3226 : 	}
; 3227 : 
; 3228 : // draw sphere
; 3229 : 
; 3230 : 	if (bomb->Timer < PUTTYBOMB_SPHERE_TIME)

	jmp	$L84447
$L84448:
	mov	eax, DWORD PTR _bomb$[ebp]
	fld	DWORD PTR [eax]
	fcomp	DWORD PTR __real@3f000000
	fnstsw	ax
	test	ah, 5
	jp	$L84425

; 3231 : 	{
; 3232 : 
; 3233 : // copy vert info to poly's
; 3234 : 
; 3235 : 		FTOL((PUTTYBOMB_SPHERE_TIME - bomb->Timer) / PUTTYBOMB_SPHERE_TIME * 255.0f, rgb);

	mov	eax, DWORD PTR _bomb$[ebp]
	fld	DWORD PTR __real@3f000000
	fsub	DWORD PTR [eax]
	fdiv	DWORD PTR __real@3f000000
	fmul	DWORD PTR __real@437f0000
	fadd	DWORD PTR __real@4b000000
	fstp	DWORD PTR __temp$84456[ebp]
	mov	eax, DWORD PTR __temp$84456[ebp]
	and	eax, 16777215				; 00ffffffH
	mov	DWORD PTR _rgb$[ebp], eax

; 3236 : 		rgb |= rgb << 8 | rgb << 16;

	mov	eax, DWORD PTR _rgb$[ebp]
	shl	eax, 8
	mov	ecx, DWORD PTR _rgb$[ebp]
	shl	ecx, 16					; 00000010H
	or	eax, ecx
	or	eax, DWORD PTR _rgb$[ebp]
	mov	DWORD PTR _rgb$[ebp], eax

; 3237 : 
; 3238 : 		mp = model->PolyPtr;

	mov	eax, DWORD PTR _model$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	mov	DWORD PTR _mp$[ebp], ecx

; 3239 : 		mrgb = model->PolyRGB;

	mov	eax, DWORD PTR _model$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	mov	DWORD PTR _mrgb$[ebp], ecx

; 3240 : 
; 3241 : 		for (i = model->PolyNum ; i ; i--, mp++, mrgb++)

	mov	eax, DWORD PTR _model$[ebp]
	movsx	ecx, WORD PTR [eax+32]
	mov	DWORD PTR _i$[ebp], ecx
	jmp	SHORT $L84459
$L84460:
	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	mov	ecx, DWORD PTR _mp$[ebp]
	add	ecx, 52					; 00000034H
	mov	DWORD PTR _mp$[ebp], ecx
	mov	edx, DWORD PTR _mrgb$[ebp]
	add	edx, 16					; 00000010H
	mov	DWORD PTR _mrgb$[ebp], edx
$L84459:
	cmp	DWORD PTR _i$[ebp], 0
	je	$L84461

; 3242 : 		{
; 3243 : 			mp->tu0 = mp->v0->tu;

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _mp$[ebp]
	mov	eax, DWORD PTR [ecx+60]
	mov	DWORD PTR [edx+4], eax

; 3244 : 			mp->tv0 = mp->v0->tv;

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _mp$[ebp]
	mov	eax, DWORD PTR [ecx+64]
	mov	DWORD PTR [edx+8], eax

; 3245 : 
; 3246 : 			mp->tu1 = mp->v1->tu;

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	edx, DWORD PTR _mp$[ebp]
	mov	eax, DWORD PTR [ecx+60]
	mov	DWORD PTR [edx+12], eax

; 3247 : 			mp->tv1 = mp->v1->tv;

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	edx, DWORD PTR _mp$[ebp]
	mov	eax, DWORD PTR [ecx+64]
	mov	DWORD PTR [edx+16], eax

; 3248 : 
; 3249 : 			mp->tu2 = mp->v2->tu;

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	mov	edx, DWORD PTR _mp$[ebp]
	mov	eax, DWORD PTR [ecx+60]
	mov	DWORD PTR [edx+20], eax

; 3250 : 			mp->tv2 = mp->v2->tv;

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	mov	edx, DWORD PTR _mp$[ebp]
	mov	eax, DWORD PTR [ecx+64]
	mov	DWORD PTR [edx+24], eax

; 3251 : 
; 3252 : 			if (mp->Type & POLY_QUAD)

	mov	eax, DWORD PTR _mp$[ebp]
	movsx	ecx, WORD PTR [eax]
	and	ecx, 1
	je	SHORT $L84462

; 3253 : 			{
; 3254 : 				mp->tu3 = mp->v3->tu;

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	mov	edx, DWORD PTR _mp$[ebp]
	mov	eax, DWORD PTR [ecx+60]
	mov	DWORD PTR [edx+28], eax

; 3255 : 				mp->tv3 = mp->v3->tv;

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	mov	edx, DWORD PTR _mp$[ebp]
	mov	eax, DWORD PTR [ecx+64]
	mov	DWORD PTR [edx+32], eax
$L84462:

; 3256 : 			}
; 3257 : 
; 3258 : 			*(long*)&mrgb->rgb[0] = rgb;

	mov	eax, DWORD PTR _mrgb$[ebp]
	mov	ecx, DWORD PTR _rgb$[ebp]
	mov	DWORD PTR [eax], ecx

; 3259 : 			*(long*)&mrgb->rgb[1] = rgb;

	mov	eax, DWORD PTR _mrgb$[ebp]
	mov	ecx, DWORD PTR _rgb$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 3260 : 			*(long*)&mrgb->rgb[2] = rgb;

	mov	eax, DWORD PTR _mrgb$[ebp]
	mov	ecx, DWORD PTR _rgb$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 3261 : 			*(long*)&mrgb->rgb[3] = rgb;

	mov	eax, DWORD PTR _mrgb$[ebp]
	mov	ecx, DWORD PTR _rgb$[ebp]
	mov	DWORD PTR [eax+12], ecx

; 3262 : 		}

	jmp	$L84460
$L84461:

; 3263 : 
; 3264 : // set mat, draw
; 3265 : 
; 3266 : 		CopyMatrix(&Identity, &mat);

	lea	eax, DWORD PTR _mat$[ebp]
	push	eax
	push	OFFSET FLAT:?Identity@@3TMatrixUnion@@A	; Identity
	call	?CopyMatrix@@YAXPATMatrixUnion@@0@Z	; CopyMatrix
	add	esp, 8

; 3267 : 
; 3268 : 		mul = bomb->SphereRadius / model->Radius;

	mov	eax, DWORD PTR _bomb$[ebp]
	mov	ecx, DWORD PTR _model$[ebp]
	fld	DWORD PTR [eax+4]
	fdiv	DWORD PTR [ecx]
	fstp	DWORD PTR _mul$[ebp]

; 3269 : 
; 3270 : 		VecMulScalar(&mat.mv[R], mul);

	fld	DWORD PTR _mat$[ebp]
	fmul	DWORD PTR _mul$[ebp]
	fstp	DWORD PTR _mat$[ebp]
	fld	DWORD PTR _mat$[ebp+4]
	fmul	DWORD PTR _mul$[ebp]
	fstp	DWORD PTR _mat$[ebp+4]
	fld	DWORD PTR _mat$[ebp+8]
	fmul	DWORD PTR _mul$[ebp]
	fstp	DWORD PTR _mat$[ebp+8]

; 3271 : 		VecMulScalar(&mat.mv[U], mul);

	fld	DWORD PTR _mat$[ebp+12]
	fmul	DWORD PTR _mul$[ebp]
	fstp	DWORD PTR _mat$[ebp+12]
	fld	DWORD PTR _mat$[ebp+16]
	fmul	DWORD PTR _mul$[ebp]
	fstp	DWORD PTR _mat$[ebp+16]
	fld	DWORD PTR _mat$[ebp+20]
	fmul	DWORD PTR _mul$[ebp]
	fstp	DWORD PTR _mat$[ebp+20]

; 3272 : 		VecMulScalar(&mat.mv[L], mul);

	fld	DWORD PTR _mat$[ebp+24]
	fmul	DWORD PTR _mul$[ebp]
	fstp	DWORD PTR _mat$[ebp+24]
	fld	DWORD PTR _mat$[ebp+28]
	fmul	DWORD PTR _mul$[ebp]
	fstp	DWORD PTR _mat$[ebp+28]
	fld	DWORD PTR _mat$[ebp+32]
	fmul	DWORD PTR _mul$[ebp]
	fstp	DWORD PTR _mat$[ebp+32]

; 3273 : 
; 3274 : 		if (obj->DefaultModel != -1)

	mov	eax, DWORD PTR _obj$[ebp]
	cmp	DWORD PTR [eax+656], -1
	je	SHORT $L84467

; 3275 : 			obj->renderflag.visible |= RenderObjectModel(&mat, &bomb->Pos, &LevelModel[obj->DefaultModel].Model, 0, obj->renderflag);

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+584]
	push	ecx
	push	0
	mov	edx, DWORD PTR _obj$[ebp]
	mov	eax, DWORD PTR [edx+656]
	imul	eax, 168				; 000000a8H
	add	eax, OFFSET FLAT:?LevelModel@@3PAULEVEL_MODEL@@A+8
	push	eax
	mov	ecx, DWORD PTR _bomb$[ebp]
	add	ecx, 12					; 0000000cH
	push	ecx
	lea	edx, DWORD PTR _mat$[ebp]
	push	edx
	call	?RenderObjectModel@@YA_NPATMatrixUnion@@PAUVectorStruct@@PAUMODEL@@JUrenderflags@@@Z ; RenderObjectModel
	add	esp, 20					; 00000014H
	mov	BYTE PTR tv297[ebp], al
	movzx	eax, BYTE PTR tv297[ebp]
	mov	ecx, DWORD PTR _obj$[ebp]
	mov	edx, DWORD PTR [ecx+584]
	shr	edx, 6
	and	edx, 1
	or	edx, eax
	and	edx, 1
	shl	edx, 6
	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+584]
	and	ecx, -65				; ffffffbfH
	or	ecx, edx
	mov	edx, DWORD PTR _obj$[ebp]
	mov	DWORD PTR [edx+584], ecx
$L84467:

; 3276 : 
; 3277 : // draw shockwave
; 3278 : 
; 3279 : 		if (bomb->Timer < PUTTYBOMB_SPHERE_TIME)

	mov	eax, DWORD PTR _bomb$[ebp]
	fld	DWORD PTR [eax]
	fcomp	DWORD PTR __real@3f000000
	fnstsw	ax
	test	ah, 5
	jp	$L84425

; 3280 : 		{
; 3281 : 			size = bomb->SphereRadius * 0.5f;

	mov	eax, DWORD PTR _bomb$[ebp]
	fld	DWORD PTR [eax+4]
	fmul	DWORD PTR __real@3f000000
	fstp	DWORD PTR _size$[ebp]

; 3282 : 
; 3283 : 			for (x = -2.0f ; x < 2.0f ; x++) for (z = -2.0f ; z < 2.0f ; z++)

	mov	DWORD PTR _x$[ebp], -1073741824		; c0000000H
	jmp	SHORT $L84469
$L84470:
	fld	DWORD PTR _x$[ebp]
	fadd	DWORD PTR __real@3f800000
	fstp	DWORD PTR _x$[ebp]
$L84469:
	fld	DWORD PTR _x$[ebp]
	fcomp	DWORD PTR __real@40000000
	fnstsw	ax
	test	ah, 5
	jp	$L84425
	mov	DWORD PTR _z$[ebp], -1073741824		; c0000000H
	jmp	SHORT $L84472
$L84473:
	fld	DWORD PTR _z$[ebp]
	fadd	DWORD PTR __real@3f800000
	fstp	DWORD PTR _z$[ebp]
$L84472:
	fld	DWORD PTR _z$[ebp]
	fcomp	DWORD PTR __real@40000000
	fnstsw	ax
	test	ah, 5
	jp	$L84474

; 3284 : 			{
; 3285 : 				SetVector(&v0, x * size + bomb->Pos.v[X], bomb->Pos.v[Y] - 256.0f, z * size + bomb->Pos.v[Z]);

	fld	DWORD PTR _x$[ebp]
	fmul	DWORD PTR _size$[ebp]
	mov	eax, DWORD PTR _bomb$[ebp]
	fadd	DWORD PTR [eax+12]
	fstp	DWORD PTR _v0$[ebp]
	mov	eax, DWORD PTR _bomb$[ebp]
	fld	DWORD PTR [eax+16]
	fsub	DWORD PTR __real@43800000
	fstp	DWORD PTR _v0$[ebp+4]
	fld	DWORD PTR _z$[ebp]
	fmul	DWORD PTR _size$[ebp]
	mov	eax, DWORD PTR _bomb$[ebp]
	fadd	DWORD PTR [eax+20]
	fstp	DWORD PTR _v0$[ebp+8]

; 3286 : 				SetVector(&v1, v0.v[X] + size, bomb->Pos.v[Y] - 256.0f, v0.v[Z]);

	fld	DWORD PTR _v0$[ebp]
	fadd	DWORD PTR _size$[ebp]
	fstp	DWORD PTR _v1$[ebp]
	mov	eax, DWORD PTR _bomb$[ebp]
	fld	DWORD PTR [eax+16]
	fsub	DWORD PTR __real@43800000
	fstp	DWORD PTR _v1$[ebp+4]
	mov	eax, DWORD PTR _v0$[ebp+8]
	mov	DWORD PTR _v1$[ebp+8], eax

; 3287 : 				SetVector(&v2, v0.v[X] + size, bomb->Pos.v[Y] - 256.0f, v0.v[Z] + size);

	fld	DWORD PTR _v0$[ebp]
	fadd	DWORD PTR _size$[ebp]
	fstp	DWORD PTR _v2$[ebp]
	mov	eax, DWORD PTR _bomb$[ebp]
	fld	DWORD PTR [eax+16]
	fsub	DWORD PTR __real@43800000
	fstp	DWORD PTR _v2$[ebp+4]
	fld	DWORD PTR _v0$[ebp+8]
	fadd	DWORD PTR _size$[ebp]
	fstp	DWORD PTR _v2$[ebp+8]

; 3288 : 				SetVector(&v3, v0.v[X], bomb->Pos.v[Y] - 256.0f, v0.v[Z] + size);

	mov	eax, DWORD PTR _v0$[ebp]
	mov	DWORD PTR _v3$[ebp], eax
	mov	eax, DWORD PTR _bomb$[ebp]
	fld	DWORD PTR [eax+16]
	fsub	DWORD PTR __real@43800000
	fstp	DWORD PTR _v3$[ebp+4]
	fld	DWORD PTR _v0$[ebp+8]
	fadd	DWORD PTR _size$[ebp]
	fstp	DWORD PTR _v3$[ebp+8]

; 3289 : 
; 3290 : 				tu = (64.0f + x * 31.0f) / 256.0f;

	fld	DWORD PTR _x$[ebp]
	fmul	DWORD PTR __real@41f80000
	fadd	DWORD PTR __real@42800000
	fdiv	DWORD PTR __real@43800000
	fstp	DWORD PTR _tu$[ebp]

; 3291 : 				tv = (192.0f + z * 31.0f) / 256.0f;

	fld	DWORD PTR _z$[ebp]
	fmul	DWORD PTR __real@41f80000
	fadd	DWORD PTR __real@43400000
	fdiv	DWORD PTR __real@43800000
	fstp	DWORD PTR _tv$[ebp]

; 3292 : 
; 3293 : 				DrawShadow(&v0, &v1, &v2, &v3, tu, tv, 31.0f / 256.0f, 31.0f / 256.0f, rgb, -2.0f, 512.0f, 1, TPAGE_FX3, NULL);

	push	0
	push	29					; 0000001dH
	push	1
	push	1140850688				; 44000000H
	push	-1073741824				; c0000000H
	mov	eax, DWORD PTR _rgb$[ebp]
	push	eax
	push	1039663104				; 3df80000H
	push	1039663104				; 3df80000H
	mov	ecx, DWORD PTR _tv$[ebp]
	push	ecx
	mov	edx, DWORD PTR _tu$[ebp]
	push	edx
	lea	eax, DWORD PTR _v3$[ebp]
	push	eax
	lea	ecx, DWORD PTR _v2$[ebp]
	push	ecx
	lea	edx, DWORD PTR _v1$[ebp]
	push	edx
	lea	eax, DWORD PTR _v0$[ebp]
	push	eax
	call	?DrawShadow@@YAXPAUVectorStruct@@000MMMMJMMJJPAUBoundingBoxStruct@@@Z ; DrawShadow
	add	esp, 56					; 00000038H

; 3294 : 			}

	jmp	$L84473
$L84474:
	jmp	$L84470
$L84425:

; 3295 : 		}
; 3296 : 	}
; 3297 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?RenderPuttyBombBang@@YAXPAUobject_def@@@Z ENDP		; RenderPuttyBombBang
_TEXT	ENDS
PUBLIC	?__LINE__Var@?1??WeaponTarget@@YAPAUobject_def@@PAU2@@Z@4JA ; `WeaponTarget'::`2'::__LINE__Var
PUBLIC	?WeaponTarget@@YAPAUobject_def@@PAU1@@Z		; WeaponTarget
EXTRN	?DebugAssert@@YAX_NHPAD@Z:NEAR			; DebugAssert
;	COMDAT ?__LINE__Var@?1??WeaponTarget@@YAPAUobject_def@@PAU2@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??WeaponTarget@@YAPAUobject_def@@PAU2@@Z@4JA DD 0cecH ; `WeaponTarget'::`2'::__LINE__Var
; Function compile flags: /Odt /ZI
_DATA	ENDS
;	COMDAT ?WeaponTarget@@YAPAUobject_def@@PAU1@@Z
_TEXT	SEGMENT
_player$ = -40						; size = 4
_bestTarget$ = -36					; size = 4
_target$ = -32						; size = 4
_dR$ = -28						; size = 12
_lookdR$ = -16						; size = 4
_dRLen$ = -12						; size = 4
_best$ = -8						; size = 4
_score$ = -4						; size = 4
_playerObj$ = 8						; size = 4
?WeaponTarget@@YAPAUobject_def@@PAU1@@Z PROC NEAR	; WeaponTarget, COMDAT

; 3308 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 104				; 00000068H
	push	ebx
	push	esi
	push	edi

; 3309 : 	REAL score, best;
; 3310 : 	REAL dRLen, lookdR;
; 3311 : 	VEC dR;
; 3312 : 	PLAYER *target, *bestTarget, *player;
; 3313 : 
; 3314 : 
; 3315 : 	best = -LARGEDIST;

	mov	DWORD PTR _best$[ebp], -915135488	; c9742400H

; 3316 : 	bestTarget = NULL;

	mov	DWORD PTR _bestTarget$[ebp], 0

; 3317 : 	player = playerObj->player;

	mov	eax, DWORD PTR _playerObj$[ebp]
	mov	ecx, DWORD PTR [eax+588]
	mov	DWORD PTR _player$[ebp], ecx

; 3318 : 
; 3319 : 	Assert(player != NULL);

	push	OFFSET FLAT:??_C@_0IL@GBHCIHE@c?3?2documents?5and?5settings?2jarhea@
	mov	eax, DWORD PTR ?__LINE__Var@?1??WeaponTarget@@YAPAUobject_def@@PAU2@@Z@4JA
	add	eax, 11					; 0000000bH
	push	eax
	cmp	DWORD PTR _player$[ebp], 0
	setne	cl
	push	ecx
	call	?DebugAssert@@YAX_NHPAD@Z		; DebugAssert
	add	esp, 12					; 0000000cH

; 3320 : 
; 3321 : 	// Loop over other players
; 3322 : 	for (target = PLR_PlayerHead; target != NULL; target = target->next) {

	mov	eax, DWORD PTR ?PLR_PlayerHead@@3PAUPlayerStruct@@A ; PLR_PlayerHead
	mov	DWORD PTR _target$[ebp], eax
	jmp	SHORT $L84487
$L84488:
	mov	eax, DWORD PTR _target$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _target$[ebp], ecx
$L84487:
	cmp	DWORD PTR _target$[ebp], 0
	je	$L84489

; 3323 : 
; 3324 : 		// Only target other players and CPU cars
; 3325 : 		if ((target->type != PLAYER_CPU) && (player->type != PLAYER_REMOTE) && (player->type != PLAYER_LOCAL)) continue;

	mov	eax, DWORD PTR _target$[ebp]
	cmp	DWORD PTR [eax+4], 3
	je	SHORT $L84490
	mov	eax, DWORD PTR _player$[ebp]
	cmp	DWORD PTR [eax+4], 2
	je	SHORT $L84490
	mov	eax, DWORD PTR _player$[ebp]
	cmp	DWORD PTR [eax+4], 1
	je	SHORT $L84490
	jmp	SHORT $L84488
$L84490:

; 3326 : 
; 3327 : 		// do not target self
; 3328 : 		if (target == player) continue;

	mov	eax, DWORD PTR _target$[ebp]
	cmp	eax, DWORD PTR _player$[ebp]
	jne	SHORT $L84491
	jmp	SHORT $L84488
$L84491:

; 3329 : 
; 3330 : 		// Separation dependence
; 3331 : 		VecMinusVec(&target->car.Body->Centre.Pos, &player->car.Body->Centre.Pos, &dR);

	mov	eax, DWORD PTR _target$[ebp]
	mov	ecx, DWORD PTR [eax+900]
	mov	edx, DWORD PTR _player$[ebp]
	mov	eax, DWORD PTR [edx+900]
	fld	DWORD PTR [ecx+20]
	fsub	DWORD PTR [eax+20]
	fstp	DWORD PTR _dR$[ebp]
	mov	eax, DWORD PTR _target$[ebp]
	mov	ecx, DWORD PTR [eax+900]
	mov	edx, DWORD PTR _player$[ebp]
	mov	eax, DWORD PTR [edx+900]
	fld	DWORD PTR [ecx+24]
	fsub	DWORD PTR [eax+24]
	fstp	DWORD PTR _dR$[ebp+4]
	mov	eax, DWORD PTR _target$[ebp]
	mov	ecx, DWORD PTR [eax+900]
	mov	edx, DWORD PTR _player$[ebp]
	mov	eax, DWORD PTR [edx+900]
	fld	DWORD PTR [ecx+28]
	fsub	DWORD PTR [eax+28]
	fstp	DWORD PTR _dR$[ebp+8]

; 3332 : 		dRLen = VecLen(&dR);

	fld	DWORD PTR _dR$[ebp]
	fmul	DWORD PTR _dR$[ebp]
	fld	DWORD PTR _dR$[ebp+4]
	fmul	DWORD PTR _dR$[ebp+4]
	faddp	ST(1), ST(0)
	fld	DWORD PTR _dR$[ebp+8]
	fmul	DWORD PTR _dR$[ebp+8]
	faddp	ST(1), ST(0)
	push	ecx
	fstp	DWORD PTR [esp]
	call	?sqrt@@YAMM@Z				; sqrt
	add	esp, 4
	fstp	DWORD PTR _dRLen$[ebp]

; 3333 : 		if (dRLen > SMALL_REAL) {

	fld	DWORD PTR _dRLen$[ebp]
	fcomp	DWORD PTR __real@3727c5ac
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $L84493

; 3334 : 			VecDivScalar(&dR, dRLen);

	fld	DWORD PTR _dR$[ebp]
	fdiv	DWORD PTR _dRLen$[ebp]
	fstp	DWORD PTR _dR$[ebp]
	fld	DWORD PTR _dR$[ebp+4]
	fdiv	DWORD PTR _dRLen$[ebp]
	fstp	DWORD PTR _dR$[ebp+4]
	fld	DWORD PTR _dR$[ebp+8]
	fdiv	DWORD PTR _dRLen$[ebp]
	fstp	DWORD PTR _dR$[ebp+8]

; 3335 : 		} else {

	jmp	SHORT $L84494
$L84493:

; 3336 : 			SetVecZero(&dR);

	mov	DWORD PTR _dR$[ebp], 0
	mov	DWORD PTR _dR$[ebp+4], 0
	mov	DWORD PTR _dR$[ebp+8], 0
$L84494:

; 3337 : 		}
; 3338 : 
; 3339 : 		// Quick range check
; 3340 : 		if ((dRLen > WEAPON_RANGE_MAX) || (dRLen < WEAPON_RANGE_MIN)) continue;

	fld	DWORD PTR _dRLen$[ebp]
	fcomp	DWORD PTR __real@455ac000
	fnstsw	ax
	test	ah, 65					; 00000041H
	je	SHORT $L84498
	fld	DWORD PTR _dRLen$[ebp]
	fcomp	DWORD PTR __real@42c80000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L84497
$L84498:
	jmp	$L84488
$L84497:

; 3341 : 
; 3342 : 		// directional dependence
; 3343 : 		lookdR = VecDotVec(&dR, &player->car.Body->Centre.WMatrix.mv[L]) - WEAPON_DIR_OFFSET;

	mov	eax, DWORD PTR _player$[ebp]
	mov	ecx, DWORD PTR [eax+900]
	fld	DWORD PTR _dR$[ebp]
	fmul	DWORD PTR [ecx+124]
	mov	edx, DWORD PTR _player$[ebp]
	mov	eax, DWORD PTR [edx+900]
	fld	DWORD PTR _dR$[ebp+4]
	fmul	DWORD PTR [eax+128]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR _player$[ebp]
	mov	edx, DWORD PTR [ecx+900]
	fld	DWORD PTR _dR$[ebp+8]
	fmul	DWORD PTR [edx+132]
	faddp	ST(1), ST(0)
	fsub	DWORD PTR __real@3e800000
	fstp	DWORD PTR _lookdR$[ebp]

; 3344 : 
; 3345 : 		// Quit if target out of range
; 3346 : 		if ((dRLen > (WEAPON_RANGE_MAX * lookdR)) || (lookdR < ZERO)) {

	fld	DWORD PTR __real@455ac000
	fmul	DWORD PTR _lookdR$[ebp]
	fcomp	DWORD PTR _dRLen$[ebp]
	fnstsw	ax
	test	ah, 5
	jnp	SHORT $L84502
	fld	DWORD PTR _lookdR$[ebp]
	fcomp	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L84501
$L84502:

; 3347 : 			continue;

	jmp	$L84488
$L84501:

; 3348 : 		}
; 3349 : 
; 3350 : 		// Generate target score for this player and see if it is the best
; 3351 : 		score = (WEAPON_RANGE_MAX / (dRLen + WEAPON_RANGE_OFFSET)) * (lookdR * lookdR * lookdR * lookdR);

	fld	DWORD PTR _dRLen$[ebp]
	fadd	DWORD PTR __real@43480000
	fdivr	DWORD PTR __real@455ac000
	fld	DWORD PTR _lookdR$[ebp]
	fmul	DWORD PTR _lookdR$[ebp]
	fmul	DWORD PTR _lookdR$[ebp]
	fmul	DWORD PTR _lookdR$[ebp]
	fmulp	ST(1), ST(0)
	fstp	DWORD PTR _score$[ebp]

; 3352 : 
; 3353 : 		if (score > best) {

	fld	DWORD PTR _score$[ebp]
	fcomp	DWORD PTR _best$[ebp]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $L84505

; 3354 : 			best = score;

	mov	eax, DWORD PTR _score$[ebp]
	mov	DWORD PTR _best$[ebp], eax

; 3355 : 			bestTarget = target;

	mov	eax, DWORD PTR _target$[ebp]
	mov	DWORD PTR _bestTarget$[ebp], eax
$L84505:

; 3356 : 		}
; 3357 : 
; 3358 : 	}

	jmp	$L84488
$L84489:

; 3359 : 
; 3360 : 	if (bestTarget == NULL) {

	cmp	DWORD PTR _bestTarget$[ebp], 0
	jne	SHORT $L84506

; 3361 : 		return NULL;

	xor	eax, eax
	jmp	SHORT $L84477
$L84506:

; 3362 : 	}
; 3363 : 
; 3364 : 	return bestTarget->ownobj;

	mov	eax, DWORD PTR _bestTarget$[ebp]
	mov	eax, DWORD PTR [eax+40]
$L84477:

; 3365 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?WeaponTarget@@YAPAUobject_def@@PAU1@@Z ENDP		; WeaponTarget
_TEXT	ENDS
END
