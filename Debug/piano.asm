; Listing generated by Microsoft (R) Optimizing Compiler Version 13.10.3077 

	TITLE	.\source\piano.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT PARA USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT _IsEqualGUID
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _==
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _acosl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _asinl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _atanl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _atan2l
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _ceill
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _cosl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _coshl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _expl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _fabsl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _floorl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _fmodl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _frexpl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _ldexpl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _logl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _log10l
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _modfl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _powl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _sinl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _sinhl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _sqrtl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _tanl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _tanhl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _frexpf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _ldexpf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _acosf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _asinf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _atanf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _atan2f
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _ceilf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _cosf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _coshf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _expf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _fabsf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _floorf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _fmodf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _logf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _log10f
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _modff
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _powf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _sinf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _sinhf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _sqrtf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _tanf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _tanhf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?TriggerPiano@@YAXPAUPlayerStruct@@JJPAUVectorStruct@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?PlayPianoNote@@YAXPAUVectorStruct@@JJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Pow_int@N@@YANNH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Pow_int@H@@YAHHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Pow_int@M@@YAMMH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Pow_int@O@@YAOOH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
sxdata	SEGMENT DWORD USE32 'SXDATA'
sxdata	ENDS
FLAT	GROUP _DATA, CONST, _BSS
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBCD
INCLUDELIB OLDNAMES

_DATA	SEGMENT
_KeyTypeTable DD 01H
	DD	00H
	DD	00H
	DD	02H
	DD	01H
	DD	00H
	DD	02H
	DD	01H
	DD	00H
	DD	00H
	DD	02H
	DD	01H
	DD	00H
	DD	02H
	DD	01H
	DD	00H
	DD	00H
	DD	02H
	DD	01H
	DD	00H
	DD	02H
	DD	01H
	DD	00H
	DD	00H
	DD	02H
	DD	01H
	DD	00H
	DD	02H
	DD	01H
	DD	00H
	DD	00H
	DD	02H
_KeyTexTable DD	03f0c0000r			; 0.546875
	DD	03f160000r			; 0.585938
	DD	03f200000r			; 0.625
	ORG $+4
_BlackKeyNumbers DD 01H
	DD	02H
	DD	03H
	DD	05H
	DD	06H
	DD	08H
	DD	09H
	DD	0aH
	DD	0cH
	DD	0dH
	DD	0fH
	DD	010H
	DD	011H
	DD	013H
	DD	014H
	DD	016H
	DD	017H
	DD	018H
	DD	01aH
	DD	01bH
	DD	01dH
	DD	01eH
	DD	01fH
_RainbowCols DD	0ff0c07H
	DD	0ff4700H
	DD	0ffe300H
	DD	09c31fH
	DD	0282ffH
	DD	01000b9H
	DD	0a000e1H
_RgbCols DD	0ff0000H
	DD	0ff00H
	DD	0ffH
_DATA	ENDS
PUBLIC	__real@44820000
PUBLIC	__real@c5cbe800
PUBLIC	__real@00000000
PUBLIC	__real@450ed000
PUBLIC	__real@437a0000
PUBLIC	__real@42e10000
PUBLIC	__real@420ed000
PUBLIC	__real@428ed000
PUBLIC	__real@be800000
PUBLIC	__real@3e800000
PUBLIC	__real@4b000000
PUBLIC	__real@3d000000
PUBLIC	__real@3f800000
PUBLIC	__real@3c800000
PUBLIC	__real@42563800
PUBLIC	?TriggerPiano@@YAXPAUPlayerStruct@@JJPAUVectorStruct@@@Z ; TriggerPiano
PUBLIC	?PlayPianoNote@@YAXPAUVectorStruct@@JJ@Z	; PlayPianoNote
EXTRN	?Get3dPoly@@YAPAUDRAW_3D_POLY@@XZ:NEAR		; Get3dPoly
EXTRN	__ftol2:NEAR
EXTRN	__fltused:NEAR
EXTRN	?TimeFactor@@3MA:DWORD				; TimeFactor
_BSS	SEGMENT
_PianoKeys DD	020H DUP (?)
_BlackPianoKeys DD 017H DUP (?)
_BSS	ENDS
;	COMDAT __real@44820000
; File c:\documents and settings\jarhead\desktop\shit to display my love for xbox revolt and fuck you borman-ness\revolt source\source\piano.cpp
CONST	SEGMENT
__real@44820000 DD 044820000r			; 1040
CONST	ENDS
;	COMDAT __real@c5cbe800
CONST	SEGMENT
__real@c5cbe800 DD 0c5cbe800r			; -6525
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT __real@450ed000
CONST	SEGMENT
__real@450ed000 DD 0450ed000r			; 2285
CONST	ENDS
;	COMDAT __real@437a0000
CONST	SEGMENT
__real@437a0000 DD 0437a0000r			; 250
CONST	ENDS
;	COMDAT __real@42e10000
CONST	SEGMENT
__real@42e10000 DD 042e10000r			; 112.5
CONST	ENDS
;	COMDAT __real@420ed000
CONST	SEGMENT
__real@420ed000 DD 0420ed000r			; 35.7031
CONST	ENDS
;	COMDAT __real@428ed000
CONST	SEGMENT
__real@428ed000 DD 0428ed000r			; 71.4063
CONST	ENDS
;	COMDAT __real@be800000
CONST	SEGMENT
__real@be800000 DD 0be800000r			; -0.25
CONST	ENDS
;	COMDAT __real@3e800000
CONST	SEGMENT
__real@3e800000 DD 03e800000r			; 0.25
CONST	ENDS
;	COMDAT __real@4b000000
CONST	SEGMENT
__real@4b000000 DD 04b000000r			; 8.38861e+006
CONST	ENDS
;	COMDAT __real@3d000000
CONST	SEGMENT
__real@3d000000 DD 03d000000r			; 0.03125
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3c800000
CONST	SEGMENT
__real@3c800000 DD 03c800000r			; 0.015625
CONST	ENDS
;	COMDAT __real@42563800
CONST	SEGMENT
__real@42563800 DD 042563800r			; 53.5547
; Function compile flags: /Odt /ZI
CONST	ENDS
;	COMDAT ?TriggerPiano@@YAXPAUPlayerStruct@@JJPAUVectorStruct@@@Z
_TEXT	SEGMENT
tv637 = -116						; size = 4
__temp$81124 = -48					; size = 4
__temp$81106 = -44					; size = 4
_car$ = -40						; size = 4
_poly$ = -36						; size = 4
_f$ = -32						; size = 4
_z$ = -28						; size = 4
_x$ = -24						; size = 4
_gotblack$ = -20					; size = 4
_col$ = -16						; size = 4
_key$ = -12						; size = 4
_j$ = -8						; size = 4
_i$ = -4						; size = 4
_player$ = 8						; size = 4
_flag$ = 12						; size = 4
_n$ = 16						; size = 4
_vec$ = 20						; size = 4
?TriggerPiano@@YAXPAUPlayerStruct@@JJPAUVectorStruct@@@Z PROC NEAR ; TriggerPiano, COMDAT

; 66   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 116				; 00000074H
	push	ebx
	push	esi
	push	edi

; 67   : 	long i, j, key, col, gotblack;
; 68   : 	float x, z, f;
; 69   : 	DRAW_3D_POLY *poly;
; 70   : 	CAR	*car;
; 71   : 
; 72   : 	car = &player->car;

	mov	eax, DWORD PTR _player$[ebp]
	add	eax, 44					; 0000002cH
	mov	DWORD PTR _car$[ebp], eax

; 73   : 	
; 74   : // zero key count if global first
; 75   : 
; 76   : 	if (flag & TRIGGER_GLOBAL_FIRST)

	mov	eax, DWORD PTR _flag$[ebp]
	and	eax, 1
	je	SHORT $L81073

; 77   : 		for (i = 0 ; i < PIANO_KEY_NUM ; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $L81074
$L81075:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$L81074:
	cmp	DWORD PTR _i$[ebp], 32			; 00000020H
	jge	SHORT $L81073

; 78   : 			PianoKeys[i] = 0;

	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR _PianoKeys[eax*4], 0
	jmp	SHORT $L81075
$L81073:

; 79   : 
; 80   : // loop thru each present wheel
; 81   : 
; 82   : 	for (i = 0 ; i < CAR_NWHEELS ; i++) if (IsWheelPresent(&car->Wheel[i]))

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $L81077
$L81078:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$L81077:
	cmp	DWORD PTR _i$[ebp], 4
	jge	$L81079
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 360				; 00000168H
	mov	ecx, DWORD PTR _car$[ebp]
	mov	edx, DWORD PTR [ecx+eax+1560]
	and	edx, 1
	je	$L81080

; 83   : 	{
; 84   : 
; 85   : // in contact?
; 86   : 
; 87   : 		if (IsWheelInContact(&car->Wheel[i]))

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 360				; 00000168H
	mov	ecx, DWORD PTR _car$[ebp]
	mov	edx, DWORD PTR [ecx+eax+1560]
	and	edx, 8
	je	$L81080

; 88   : 		{
; 89   : 
; 90   : // yep, check if on piano
; 91   : 
; 92   : 			x = car->Wheel[i].WPos.v[X] - PIANO_XPOS;

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 360				; 00000168H
	mov	ecx, DWORD PTR _car$[ebp]
	fld	DWORD PTR [ecx+eax+1720]
	fsub	DWORD PTR __real@44820000
	fstp	DWORD PTR _x$[ebp]

; 93   : 			z = car->Wheel[i].WPos.v[Z] - PIANO_ZPOS;

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 360				; 00000168H
	mov	ecx, DWORD PTR _car$[ebp]
	fld	DWORD PTR [ecx+eax+1728]
	fsub	DWORD PTR __real@c5cbe800
	fstp	DWORD PTR _z$[ebp]

; 94   : 
; 95   : 			if (x >= 0 && x <= PIANO_WIDTH && z >= 0 && z <= PIANO_DEPTH)

	fld	DWORD PTR _x$[ebp]
	fcomp	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 1
	jne	$L81080
	fld	DWORD PTR _x$[ebp]
	fcomp	DWORD PTR __real@450ed000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jp	$L81080
	fld	DWORD PTR _z$[ebp]
	fcomp	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 1
	jne	$L81080
	fld	DWORD PTR _z$[ebp]
	fcomp	DWORD PTR __real@437a0000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jp	$L81080

; 96   : 			{
; 97   : 
; 98   : // on piano, set black or white
; 99   : 
; 100  : 				gotblack = FALSE;

	mov	DWORD PTR _gotblack$[ebp], 0

; 101  : 				if (z > (PIANO_DEPTH - BLACK_PIANO_DEPTH))

	fld	DWORD PTR _z$[ebp]
	fcomp	DWORD PTR __real@42e10000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	$L81083

; 102  : 				{
; 103  : 					key = (long)((x + PIANO_KEY_WIDTH / 2)  / PIANO_KEY_WIDTH);

	fld	DWORD PTR _x$[ebp]
	fadd	DWORD PTR __real@420ed000
	fdiv	DWORD PTR __real@428ed000
	call	__ftol2
	mov	DWORD PTR _key$[ebp], eax

; 104  : 					f = x / PIANO_KEY_WIDTH - (float)key;

	fld	DWORD PTR _x$[ebp]
	fdiv	DWORD PTR __real@428ed000
	fisub	DWORD PTR _key$[ebp]
	fstp	DWORD PTR _f$[ebp]

; 105  : 					if (f > -BLACK_PIANO_PER_WIDTH && f < BLACK_PIANO_PER_WIDTH)

	fld	DWORD PTR _f$[ebp]
	fcomp	DWORD PTR __real@be800000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	$L81083
	fld	DWORD PTR _f$[ebp]
	fcomp	DWORD PTR __real@3e800000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L81083

; 106  : 					{
; 107  : 						for (j = 0 ; j < BLACK_PIANO_KEY_NUM ; j++) if (BlackKeyNumbers[j] == key)

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $L81090
$L81091:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$L81090:
	cmp	DWORD PTR _j$[ebp], 23			; 00000017H
	jge	SHORT $L81083
	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _BlackKeyNumbers[eax*4]
	cmp	ecx, DWORD PTR _key$[ebp]
	jne	SHORT $L81093

; 108  : 						{
; 109  : 							if (!BlackPianoKeys[j]) PlayPianoNote(&car->Wheel[i].WPos, key, TRUE);

	mov	eax, DWORD PTR _j$[ebp]
	fld	DWORD PTR __real@00000000
	fld	DWORD PTR _BlackPianoKeys[eax*4]
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $L81094
	push	1
	mov	eax, DWORD PTR _key$[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 360				; 00000168H
	mov	edx, DWORD PTR _car$[ebp]
	lea	eax, DWORD PTR [edx+ecx+1720]
	push	eax
	call	?PlayPianoNote@@YAXPAUVectorStruct@@JJ@Z ; PlayPianoNote
	add	esp, 12					; 0000000cH
$L81094:

; 110  : 							BlackPianoKeys[j] = PIANO_KEY_SET;

	mov	eax, DWORD PTR _j$[ebp]
	mov	DWORD PTR _BlackPianoKeys[eax*4], 1098907648 ; 41800000H

; 111  : 							gotblack = TRUE;

	mov	DWORD PTR _gotblack$[ebp], 1

; 112  : 							break;

	jmp	SHORT $L81083
$L81093:

; 113  : 						}
; 114  : 					}

	jmp	SHORT $L81091
$L81083:

; 115  : 				}
; 116  : 
; 117  : 				if (!gotblack)

	cmp	DWORD PTR _gotblack$[ebp], 0
	jne	SHORT $L81080

; 118  : 				{
; 119  : 					key = (long)(x / PIANO_KEY_WIDTH);

	fld	DWORD PTR _x$[ebp]
	fdiv	DWORD PTR __real@428ed000
	call	__ftol2
	mov	DWORD PTR _key$[ebp], eax

; 120  : 					if (!PianoKeys[key]) PlayPianoNote(&car->Wheel[i].WPos, key, FALSE);

	mov	eax, DWORD PTR _key$[ebp]
	fld	DWORD PTR __real@00000000
	fld	DWORD PTR _PianoKeys[eax*4]
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $L81098
	push	0
	mov	eax, DWORD PTR _key$[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 360				; 00000168H
	mov	edx, DWORD PTR _car$[ebp]
	lea	eax, DWORD PTR [edx+ecx+1720]
	push	eax
	call	?PlayPianoNote@@YAXPAUVectorStruct@@JJ@Z ; PlayPianoNote
	add	esp, 12					; 0000000cH
$L81098:

; 121  : 					PianoKeys[key] = PIANO_KEY_SET;

	mov	eax, DWORD PTR _key$[ebp]
	mov	DWORD PTR _PianoKeys[eax*4], 1098907648	; 41800000H
$L81080:

; 122  : 				}
; 123  : 			}
; 124  : 		}
; 125  : 	}
; 126  : 
; 127  : // maintain keys if frame first
; 128  : 
; 129  : 	if (flag & TRIGGER_FRAME_FIRST)

	jmp	$L81078
$L81079:
	mov	eax, DWORD PTR _flag$[ebp]
	and	eax, 2
	je	$L81062

; 130  : 	{
; 131  : 
; 132  : // white keys
; 133  : 
; 134  : 		for (i = 0 ; i < PIANO_KEY_NUM ; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $L81100
$L81101:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$L81100:
	cmp	DWORD PTR _i$[ebp], 32			; 00000020H
	jge	$L81102

; 135  : 		{
; 136  : 
; 137  : // live key?
; 138  : 
; 139  : 			if (PianoKeys[i])

	mov	eax, DWORD PTR _i$[ebp]
	fld	DWORD PTR __real@00000000
	fld	DWORD PTR _PianoKeys[eax*4]
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jnp	$L81103

; 140  : 			{
; 141  : 
; 142  : // yep, add poly to render list
; 143  : 
; 144  : 				poly = Get3dPoly();

	call	?Get3dPoly@@YAPAUDRAW_3D_POLY@@XZ	; Get3dPoly
	mov	DWORD PTR _poly$[ebp], eax

; 145  : 				if (poly)

	cmp	DWORD PTR _poly$[ebp], 0
	je	$L81104

; 146  : 				{
; 147  : 					x = (float)i;

	fild	DWORD PTR _i$[ebp]
	fstp	DWORD PTR _x$[ebp]

; 148  : 
; 149  : 					FTOL(PianoKeys[i], col);

	mov	eax, DWORD PTR _i$[ebp]
	fld	DWORD PTR _PianoKeys[eax*4]
	fadd	DWORD PTR __real@4b000000
	fstp	DWORD PTR __temp$81106[ebp]
	mov	eax, DWORD PTR __temp$81106[ebp]
	and	eax, 16777215				; 00ffffffH
	mov	DWORD PTR _col$[ebp], eax

; 150  : 					col *= 12;

	mov	eax, DWORD PTR _col$[ebp]
	imul	eax, 12					; 0000000cH
	mov	DWORD PTR _col$[ebp], eax

; 151  : 					col <<= 24;

	mov	eax, DWORD PTR _col$[ebp]
	shl	eax, 24					; 00000018H
	mov	DWORD PTR _col$[ebp], eax

; 152  : 					col |= RainbowCols[i % 7];

	mov	eax, DWORD PTR _i$[ebp]
	cdq
	mov	ecx, 7
	idiv	ecx
	mov	eax, DWORD PTR _col$[ebp]
	or	eax, DWORD PTR _RainbowCols[edx*4]
	mov	DWORD PTR _col$[ebp], eax

; 153  : 
; 154  : 					poly->VertNum = 4;

	mov	eax, DWORD PTR _poly$[ebp]
	mov	DWORD PTR [eax], 4

; 155  : 					poly->Tpage = 5;

	mov	eax, DWORD PTR _poly$[ebp]
	mov	DWORD PTR [eax+4], 5

; 156  : 					poly->Fog = FALSE;

	mov	eax, DWORD PTR _poly$[ebp]
	mov	DWORD PTR [eax+8], 0

; 157  : 					poly->SemiType = 0;

	mov	eax, DWORD PTR _poly$[ebp]
	mov	DWORD PTR [eax+12], 0

; 158  : 
; 159  : 					poly->Verts[0].color = col;

	mov	eax, DWORD PTR _poly$[ebp]
	mov	ecx, DWORD PTR _col$[ebp]
	mov	DWORD PTR [eax+80], ecx

; 160  : 					poly->Verts[1].color = col;

	mov	eax, DWORD PTR _poly$[ebp]
	mov	ecx, DWORD PTR _col$[ebp]
	mov	DWORD PTR [eax+112], ecx

; 161  : 					poly->Verts[2].color = col;

	mov	eax, DWORD PTR _poly$[ebp]
	mov	ecx, DWORD PTR _col$[ebp]
	mov	DWORD PTR [eax+144], ecx

; 162  : 					poly->Verts[3].color = col;

	mov	eax, DWORD PTR _poly$[ebp]
	mov	ecx, DWORD PTR _col$[ebp]
	mov	DWORD PTR [eax+176], ecx

; 163  : 
; 164  : 					poly->Verts[0].tu = poly->Verts[3].tu = KeyTexTable[KeyTypeTable[i]];

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _KeyTypeTable[eax*4]
	mov	edx, DWORD PTR _poly$[ebp]
	mov	eax, DWORD PTR _KeyTexTable[ecx*4]
	mov	DWORD PTR [edx+184], eax
	mov	ecx, DWORD PTR _poly$[ebp]
	mov	edx, DWORD PTR _poly$[ebp]
	mov	eax, DWORD PTR [edx+184]
	mov	DWORD PTR [ecx+88], eax

; 165  : 					poly->Verts[1].tu = poly->Verts[2].tu = KeyTexTable[KeyTypeTable[i]] + PIANO_TEX_WIDTH;

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _KeyTypeTable[eax*4]
	fld	DWORD PTR _KeyTexTable[ecx*4]
	fadd	DWORD PTR __real@3d000000
	mov	edx, DWORD PTR _poly$[ebp]
	fstp	DWORD PTR [edx+152]
	mov	eax, DWORD PTR _poly$[ebp]
	mov	ecx, DWORD PTR _poly$[ebp]
	mov	edx, DWORD PTR [ecx+152]
	mov	DWORD PTR [eax+120], edx

; 166  : 					poly->Verts[0].tv = poly->Verts[1].tv = PIANO_TV;

	mov	eax, DWORD PTR _poly$[ebp]
	mov	DWORD PTR [eax+124], 1062338560		; 3f520000H
	mov	ecx, DWORD PTR _poly$[ebp]
	mov	DWORD PTR [ecx+92], 1062338560		; 3f520000H

; 167  : 					poly->Verts[2].tv = poly->Verts[3].tv = PIANO_TV + PIANO_TEX_HEIGHT;

	mov	eax, DWORD PTR _poly$[ebp]
	mov	DWORD PTR [eax+188], 1063976960		; 3f6b0000H
	mov	ecx, DWORD PTR _poly$[ebp]
	mov	DWORD PTR [ecx+156], 1063976960		; 3f6b0000H

; 168  : 
; 169  : 					poly->Pos[0].v[X] = poly->Pos[3].v[X] = (x * PIANO_KEY_WIDTH) + PIANO_XPOS;

	fld	DWORD PTR _x$[ebp]
	fmul	DWORD PTR __real@428ed000
	fadd	DWORD PTR __real@44820000
	mov	eax, DWORD PTR _poly$[ebp]
	fstp	DWORD PTR [eax+52]
	mov	ecx, DWORD PTR _poly$[ebp]
	mov	edx, DWORD PTR _poly$[ebp]
	mov	eax, DWORD PTR [edx+52]
	mov	DWORD PTR [ecx+16], eax

; 170  : 					poly->Pos[1].v[X] = poly->Pos[2].v[X] = ((x + 1) * PIANO_KEY_WIDTH) + PIANO_XPOS;

	fld	DWORD PTR _x$[ebp]
	fadd	DWORD PTR __real@3f800000
	fmul	DWORD PTR __real@428ed000
	fadd	DWORD PTR __real@44820000
	mov	eax, DWORD PTR _poly$[ebp]
	fstp	DWORD PTR [eax+40]
	mov	ecx, DWORD PTR _poly$[ebp]
	mov	edx, DWORD PTR _poly$[ebp]
	mov	eax, DWORD PTR [edx+40]
	mov	DWORD PTR [ecx+28], eax

; 171  : 
; 172  : 					poly->Pos[0].v[Y] = poly->Pos[1].v[Y] = poly->Pos[2].v[Y] = poly->Pos[3].v[Y] = PIANO_YPOS;

	mov	eax, DWORD PTR _poly$[ebp]
	mov	DWORD PTR [eax+56], -1012187136		; c3ab4000H
	mov	ecx, DWORD PTR _poly$[ebp]
	mov	DWORD PTR [ecx+44], -1012187136		; c3ab4000H
	mov	edx, DWORD PTR _poly$[ebp]
	mov	DWORD PTR [edx+32], -1012187136		; c3ab4000H
	mov	eax, DWORD PTR _poly$[ebp]
	mov	DWORD PTR [eax+20], -1012187136		; c3ab4000H

; 173  : 
; 174  : 					poly->Pos[0].v[Z] = poly->Pos[1].v[Z] = PIANO_ZPOS;

	mov	eax, DWORD PTR _poly$[ebp]
	mov	DWORD PTR [eax+36], -976492544		; c5cbe800H
	mov	ecx, DWORD PTR _poly$[ebp]
	mov	DWORD PTR [ecx+24], -976492544		; c5cbe800H

; 175  : 					poly->Pos[2].v[Z] = poly->Pos[3].v[Z] = PIANO_ZPOS + PIANO_DEPTH;

	mov	eax, DWORD PTR _poly$[ebp]
	mov	DWORD PTR [eax+60], -977004544		; c5c41800H
	mov	ecx, DWORD PTR _poly$[ebp]
	mov	DWORD PTR [ecx+48], -977004544		; c5c41800H

; 176  : 
; 177  : 					if (!i)

	cmp	DWORD PTR _i$[ebp], 0
	jne	SHORT $L81104

; 178  : 					{
; 179  : 						poly->Pos[0].v[X] += PIANO_KEY_WIDTH / 2;

	mov	eax, DWORD PTR _poly$[ebp]
	fld	DWORD PTR [eax+16]
	fadd	DWORD PTR __real@420ed000
	mov	ecx, DWORD PTR _poly$[ebp]
	fstp	DWORD PTR [ecx+16]

; 180  : 						poly->Pos[3].v[X] += PIANO_KEY_WIDTH / 2;

	mov	eax, DWORD PTR _poly$[ebp]
	fld	DWORD PTR [eax+52]
	fadd	DWORD PTR __real@420ed000
	mov	ecx, DWORD PTR _poly$[ebp]
	fstp	DWORD PTR [ecx+52]

; 181  : 						poly->Verts[0].tu += PIANO_TEX_WIDTH / 2;

	mov	eax, DWORD PTR _poly$[ebp]
	fld	DWORD PTR [eax+88]
	fadd	DWORD PTR __real@3c800000
	mov	ecx, DWORD PTR _poly$[ebp]
	fstp	DWORD PTR [ecx+88]

; 182  : 						poly->Verts[3].tu += PIANO_TEX_WIDTH / 2;

	mov	eax, DWORD PTR _poly$[ebp]
	fld	DWORD PTR [eax+184]
	fadd	DWORD PTR __real@3c800000
	mov	ecx, DWORD PTR _poly$[ebp]
	fstp	DWORD PTR [ecx+184]
$L81104:

; 183  : 					}
; 184  : 				}
; 185  : 
; 186  : // dec count
; 187  : 
; 188  : 				PianoKeys[i] -= TimeFactor;

	mov	eax, DWORD PTR _i$[ebp]
	fld	DWORD PTR _PianoKeys[eax*4]
	fsub	DWORD PTR ?TimeFactor@@3MA		; TimeFactor
	mov	ecx, DWORD PTR _i$[ebp]
	fstp	DWORD PTR _PianoKeys[ecx*4]

; 189  : 				if (PianoKeys[i] < 0) PianoKeys[i] = 0;

	mov	eax, DWORD PTR _i$[ebp]
	fld	DWORD PTR _PianoKeys[eax*4]
	fcomp	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L81103
	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR _PianoKeys[eax*4], 0
$L81103:

; 190  : 			}
; 191  : 		}

	jmp	$L81101
$L81102:

; 192  : 
; 193  : // black keys
; 194  : 
; 195  : 		for (i = 0 ; i < BLACK_PIANO_KEY_NUM ; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $L81115
$L81116:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$L81115:
	cmp	DWORD PTR _i$[ebp], 23			; 00000017H
	jge	$L81062

; 196  : 		{
; 197  : 
; 198  : // live key?
; 199  : 
; 200  : 			if (BlackPianoKeys[i])

	mov	eax, DWORD PTR _i$[ebp]
	fld	DWORD PTR __real@00000000
	fld	DWORD PTR _BlackPianoKeys[eax*4]
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jnp	$L81118

; 201  : 			{
; 202  : 
; 203  : // yep, add poly to render list
; 204  : 
; 205  : 				poly = Get3dPoly();

	call	?Get3dPoly@@YAPAUDRAW_3D_POLY@@XZ	; Get3dPoly
	mov	DWORD PTR _poly$[ebp], eax

; 206  : 				if (poly)

	cmp	DWORD PTR _poly$[ebp], 0
	je	$L81119

; 207  : 				{
; 208  : 					x = (float)(BlackKeyNumbers[i] - 1) * PIANO_KEY_WIDTH + PIANO_XPOS + BLACK_PIANO_XOFFSET;

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _BlackKeyNumbers[eax*4]
	sub	ecx, 1
	mov	DWORD PTR tv637[ebp], ecx
	fild	DWORD PTR tv637[ebp]
	fmul	DWORD PTR __real@428ed000
	fadd	DWORD PTR __real@44820000
	fadd	DWORD PTR __real@42563800
	fstp	DWORD PTR _x$[ebp]

; 209  : 
; 210  : 					FTOL(BlackPianoKeys[i], col);

	mov	eax, DWORD PTR _i$[ebp]
	fld	DWORD PTR _BlackPianoKeys[eax*4]
	fadd	DWORD PTR __real@4b000000
	fstp	DWORD PTR __temp$81124[ebp]
	mov	eax, DWORD PTR __temp$81124[ebp]
	and	eax, 16777215				; 00ffffffH
	mov	DWORD PTR _col$[ebp], eax

; 211  : 					col *= 12;

	mov	eax, DWORD PTR _col$[ebp]
	imul	eax, 12					; 0000000cH
	mov	DWORD PTR _col$[ebp], eax

; 212  : 					col <<= 24;

	mov	eax, DWORD PTR _col$[ebp]
	shl	eax, 24					; 00000018H
	mov	DWORD PTR _col$[ebp], eax

; 213  : 					col |= RgbCols[i % 3];

	mov	eax, DWORD PTR _i$[ebp]
	cdq
	mov	ecx, 3
	idiv	ecx
	mov	eax, DWORD PTR _col$[ebp]
	or	eax, DWORD PTR _RgbCols[edx*4]
	mov	DWORD PTR _col$[ebp], eax

; 214  : 
; 215  : 					poly->VertNum = 4;

	mov	eax, DWORD PTR _poly$[ebp]
	mov	DWORD PTR [eax], 4

; 216  : 					poly->Tpage = 5;

	mov	eax, DWORD PTR _poly$[ebp]
	mov	DWORD PTR [eax+4], 5

; 217  : 					poly->Fog = FALSE;

	mov	eax, DWORD PTR _poly$[ebp]
	mov	DWORD PTR [eax+8], 0

; 218  : 					poly->SemiType = 0;

	mov	eax, DWORD PTR _poly$[ebp]
	mov	DWORD PTR [eax+12], 0

; 219  : 
; 220  : 					poly->Verts[0].color = col;

	mov	eax, DWORD PTR _poly$[ebp]
	mov	ecx, DWORD PTR _col$[ebp]
	mov	DWORD PTR [eax+80], ecx

; 221  : 					poly->Verts[1].color = col;

	mov	eax, DWORD PTR _poly$[ebp]
	mov	ecx, DWORD PTR _col$[ebp]
	mov	DWORD PTR [eax+112], ecx

; 222  : 					poly->Verts[2].color = col;

	mov	eax, DWORD PTR _poly$[ebp]
	mov	ecx, DWORD PTR _col$[ebp]
	mov	DWORD PTR [eax+144], ecx

; 223  : 					poly->Verts[3].color = col;

	mov	eax, DWORD PTR _poly$[ebp]
	mov	ecx, DWORD PTR _col$[ebp]
	mov	DWORD PTR [eax+176], ecx

; 224  : 
; 225  : 					poly->Verts[0].tu = poly->Verts[3].tu = BLACK_PIANO_TU;

	mov	eax, DWORD PTR _poly$[ebp]
	mov	DWORD PTR [eax+184], 1059782656		; 3f2b0000H
	mov	ecx, DWORD PTR _poly$[ebp]
	mov	DWORD PTR [ecx+88], 1059782656		; 3f2b0000H

; 226  : 					poly->Verts[1].tu = poly->Verts[2].tu = BLACK_PIANO_TU + BLACK_PIANO_TEX_WIDTH;

	mov	eax, DWORD PTR _poly$[ebp]
	mov	DWORD PTR [eax+152], 1060044800		; 3f2f0000H
	mov	ecx, DWORD PTR _poly$[ebp]
	mov	DWORD PTR [ecx+120], 1060044800		; 3f2f0000H

; 227  : 					poly->Verts[0].tv = poly->Verts[1].tv = BLACK_PIANO_TV;

	mov	eax, DWORD PTR _poly$[ebp]
	mov	DWORD PTR [eax+124], 1062731776		; 3f580000H
	mov	ecx, DWORD PTR _poly$[ebp]
	mov	DWORD PTR [ecx+92], 1062731776		; 3f580000H

; 228  : 					poly->Verts[2].tv = poly->Verts[3].tv = BLACK_PIANO_TV + BLACK_PIANO_TEX_HEIGHT;

	mov	eax, DWORD PTR _poly$[ebp]
	mov	DWORD PTR [eax+188], 1063714816		; 3f670000H
	mov	ecx, DWORD PTR _poly$[ebp]
	mov	DWORD PTR [ecx+156], 1063714816		; 3f670000H

; 229  : 
; 230  : 					poly->Pos[0].v[X] = poly->Pos[3].v[X] = x;

	mov	eax, DWORD PTR _poly$[ebp]
	mov	ecx, DWORD PTR _x$[ebp]
	mov	DWORD PTR [eax+52], ecx
	mov	edx, DWORD PTR _poly$[ebp]
	mov	eax, DWORD PTR _x$[ebp]
	mov	DWORD PTR [edx+16], eax

; 231  : 					poly->Pos[1].v[X] = poly->Pos[2].v[X] = x + BLACK_PIANO_WIDTH;

	fld	DWORD PTR _x$[ebp]
	fadd	DWORD PTR __real@420ed000
	mov	eax, DWORD PTR _poly$[ebp]
	fstp	DWORD PTR [eax+40]
	mov	ecx, DWORD PTR _poly$[ebp]
	mov	edx, DWORD PTR _poly$[ebp]
	mov	eax, DWORD PTR [edx+40]
	mov	DWORD PTR [ecx+28], eax

; 232  : 
; 233  : 					poly->Pos[0].v[Y] = poly->Pos[1].v[Y] = poly->Pos[2].v[Y] = poly->Pos[3].v[Y] = PIANO_YPOS;

	mov	eax, DWORD PTR _poly$[ebp]
	mov	DWORD PTR [eax+56], -1012187136		; c3ab4000H
	mov	ecx, DWORD PTR _poly$[ebp]
	mov	DWORD PTR [ecx+44], -1012187136		; c3ab4000H
	mov	edx, DWORD PTR _poly$[ebp]
	mov	DWORD PTR [edx+32], -1012187136		; c3ab4000H
	mov	eax, DWORD PTR _poly$[ebp]
	mov	DWORD PTR [eax+20], -1012187136		; c3ab4000H

; 234  : 
; 235  : 					poly->Pos[0].v[Z] = poly->Pos[1].v[Z] = PIANO_ZPOS + (PIANO_DEPTH - BLACK_PIANO_DEPTH);

	mov	eax, DWORD PTR _poly$[ebp]
	mov	DWORD PTR [eax+36], -976722944		; c5c86400H
	mov	ecx, DWORD PTR _poly$[ebp]
	mov	DWORD PTR [ecx+24], -976722944		; c5c86400H

; 236  : 					poly->Pos[2].v[Z] = poly->Pos[3].v[Z] = PIANO_ZPOS + PIANO_DEPTH;

	mov	eax, DWORD PTR _poly$[ebp]
	mov	DWORD PTR [eax+60], -977004544		; c5c41800H
	mov	ecx, DWORD PTR _poly$[ebp]
	mov	DWORD PTR [ecx+48], -977004544		; c5c41800H
$L81119:

; 237  : 				}
; 238  : 
; 239  : // dec count
; 240  : 
; 241  : 				BlackPianoKeys[i] -= TimeFactor;

	mov	eax, DWORD PTR _i$[ebp]
	fld	DWORD PTR _BlackPianoKeys[eax*4]
	fsub	DWORD PTR ?TimeFactor@@3MA		; TimeFactor
	mov	ecx, DWORD PTR _i$[ebp]
	fstp	DWORD PTR _BlackPianoKeys[ecx*4]

; 242  : 				if (BlackPianoKeys[i] < 0) BlackPianoKeys[i] = 0;

	mov	eax, DWORD PTR _i$[ebp]
	fld	DWORD PTR _BlackPianoKeys[eax*4]
	fcomp	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L81118
	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR _BlackPianoKeys[eax*4], 0
$L81118:

; 243  : 			}
; 244  : 		}

	jmp	$L81116
$L81062:

; 245  : 	}
; 246  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?TriggerPiano@@YAXPAUPlayerStruct@@JJPAUVectorStruct@@@Z ENDP ; TriggerPiano
_TEXT	ENDS
EXTRN	?PlaySfx3D@@YAXJJJPAUVectorStruct@@@Z:NEAR	; PlaySfx3D
; Function compile flags: /Odt /ZI
;	COMDAT ?PlayPianoNote@@YAXPAUVectorStruct@@JJ@Z
_TEXT	SEGMENT
_c$ = -4						; size = 4
_pos$ = 8						; size = 4
_key$ = 12						; size = 4
_black$ = 16						; size = 4
?PlayPianoNote@@YAXPAUVectorStruct@@JJ@Z PROC NEAR	; PlayPianoNote, COMDAT

; 253  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 254  : 	long c;
; 255  : 
; 256  : // calc semitone number
; 257  : 
; 258  : 	c = 0;

	mov	DWORD PTR _c$[ebp], 0
$L81136:

; 259  : 	while (BlackKeyNumbers[c] <= key) c++;

	mov	eax, DWORD PTR _c$[ebp]
	mov	ecx, DWORD PTR _BlackKeyNumbers[eax*4]
	cmp	ecx, DWORD PTR _key$[ebp]
	jg	SHORT $L81137
	mov	eax, DWORD PTR _c$[ebp]
	add	eax, 1
	mov	DWORD PTR _c$[ebp], eax
	jmp	SHORT $L81136
$L81137:

; 260  : 
; 261  : 	c += key;

	mov	eax, DWORD PTR _c$[ebp]
	add	eax, DWORD PTR _key$[ebp]
	mov	DWORD PTR _c$[ebp], eax

; 262  : 	c -= black;

	mov	eax, DWORD PTR _c$[ebp]
	sub	eax, DWORD PTR _black$[ebp]
	mov	DWORD PTR _c$[ebp], eax

; 263  : 
; 264  : // play
; 265  : 
; 266  : 	PlaySfx3D(SFX_TOY_PIANO, SFX_MAX_VOL, c * 800 + 12000, pos);

	mov	eax, DWORD PTR _pos$[ebp]
	push	eax
	mov	ecx, DWORD PTR _c$[ebp]
	imul	ecx, 800				; 00000320H
	add	ecx, 12000				; 00002ee0H
	push	ecx
	push	127					; 0000007fH
	push	17					; 00000011H
	call	?PlaySfx3D@@YAXJJJPAUVectorStruct@@@Z	; PlaySfx3D
	add	esp, 16					; 00000010H

; 267  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?PlayPianoNote@@YAXPAUVectorStruct@@JJ@Z ENDP		; PlayPianoNote
_TEXT	ENDS
END
