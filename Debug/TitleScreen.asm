; Listing generated by Microsoft (R) Optimizing Compiler Version 13.10.3077 

	TITLE	.\source\TitleScreen.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT PARA USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_0O@PEANDJCI@gfx?2font1?4bmp?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0O@IKBJKENM@gfx?2title?4bmp?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BB@CLJMFCFI@models?2trolley?4m?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_08KLCEOACE@FRONTEND?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0JA@MGDDACDG@c?3?2documents?5and?5settings?2jarhea@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _IsEqualGUID
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _==
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _acosl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _asinl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _atanl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _atan2l
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _ceill
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _cosl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _coshl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _expl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _fabsl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _floorl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _fmodl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _frexpl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _ldexpl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _logl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _log10l
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _modfl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _powl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _sinl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _sinhl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _sqrtl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _tanl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _tanhl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _frexpf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _ldexpf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _acosf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _asinf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _atanf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _atan2f
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _ceilf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _cosf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _coshf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _expf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _fabsf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _floorf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _fmodf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _logf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _log10f
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _modff
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _powf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _sinf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _sinhf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _sqrtf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _tanf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _tanhf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?sqrt@@YAMM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GoTitleScreen@@YAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ReleaseTitleScreen@@YAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ts_InitCameraPositions@@YAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?TitleScreen@@YAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetLightPos@@YAXPAUt_Light@@MMM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetLightDir@@YAXPAUt_Light@@MMM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetLightPower@@YAXPAUt_Light@@M@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetLightStrength@@YAXPAUt_Light@@M@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetLightRange@@YAXPAUt_Light@@M@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?InitFlag@@YAXPAUt_Flag@@HHMM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ReleaseFlag@@YAXPAUt_Flag@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RenderFlag@@YAXPAUt_Flag@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ts_ApplyLightPull@@YAXPAUt_Light@@PAUVectorStruct@@11@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ts_Power@@YAMMM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Pow_int@N@@YANNH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Pow_int@H@@YAHHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Pow_int@M@@YAMMH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Pow_int@O@@YAOOH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?__LINE__Var@?1??ReleaseFlag@@YAXPAUt_Flag@@@Z@4JA
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??InitFlag@@YAXPAUt_Flag@@HHMM@Z@4JA
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
sxdata	SEGMENT DWORD USE32 'SXDATA'
sxdata	ENDS
FLAT	GROUP _DATA, CONST, _BSS
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBCD
INCLUDELIB OLDNAMES

PUBLIC	?gLight@@3PAUt_Light@@A				; gLight
PUBLIC	?gMenu@@3PAUt_Menu@@A				; gMenu
PUBLIC	?gFlag@@3Ut_Flag@@A				; gFlag
PUBLIC	?gModel@@3PAUMODEL@@A				; gModel
PUBLIC	?gCameraPositions@@3PAUt_CameraPos@@A		; gCameraPositions
_BSS	SEGMENT
?gLight@@3PAUt_Light@@A DB 084H DUP (?)			; gLight
?gMenu@@3PAUt_Menu@@A DD 01H DUP (?)			; gMenu
?gFlag@@3Ut_Flag@@A DB 0cH DUP (?)			; gFlag
?gModel@@3PAUMODEL@@A DB 03cH DUP (?)			; gModel
?modelRot@?P@??TitleScreen@@YAXXZ@4UVectorStruct@@A DB 0cH DUP (?) ; `TitleScreen'::`15'::modelRot
?rZ@?1??RenderFlag@@YAXPAUt_Flag@@@Z@4HA DD 01H DUP (?)	; `RenderFlag'::`2'::rZ
_BSS	ENDS
_DATA	SEGMENT
?gCameraPositions@@3PAUt_CameraPos@@A DD 0bb03126fr ; -0.002 ; gCameraPositions
	DD	0c1ee51ecr			; -29.79
	DD	03ff147aer			; 1.885
	DD	0bb03126fr			; -0.002
	DD	03d872b02r			; 0.066
	DD	0408bd70ar			; 4.37
	ORG $+16
	DD	04119645ar			; 9.587
	DD	040e41062r			; 7.127
	DD	0401947aer			; 2.395
	DD	041856873r			; 16.676
	DD	0414e3127r			; 12.887
	DD	03fecac08r			; 1.849
	ORG $+16
	DD	04135eb85r			; 11.37
	DD	0c19f1aa0r			; -19.888
	DD	040b70a3dr			; 5.72
	DD	041d1df3br			; 26.234
	DD	0c1420c4ar			; -12.128
	DD	0406e147br			; 3.72
	ORG $+16
	DD	04145c28fr			; 12.36
	DD	0c16f47aer			; -14.955
	DD	040a83958r			; 5.257
	DD	041d74dd3r			; 26.913
	DD	0c1af5e35r			; -21.921
	DD	0407cdd2fr			; 3.951
	ORG $+16
	DD	0c1531aa0r			; -13.194
	DD	0bfbf9db2r			; -1.497
	DD	040772b02r			; 3.862
	DD	0c1b32d0er			; -22.397
	DD	0c095d2f2r			; -4.682
	DD	040d451ecr			; 6.635
	ORG $+16
	DD	0c17c8b44r			; -15.784
	DD	03ed47ae1r			; 0.415
	DD	040370a3dr			; 2.86
	DD	0c1b8c8b4r			; -23.098
	DD	03ed60419r			; 0.418
	DD	0409ab852r			; 4.835
	ORG $+16
	DD	0c16a45a2r			; -14.642
	DD	04097ef9er			; 4.748
	DD	040a1fbe7r			; 5.062
	DD	0c1aa1062r			; -21.258
	DD	040750e56r			; 3.829
	DD	040bbef9er			; 5.873
	ORG $+16
	DD	0c1616042r			; -14.086
	DD	040e722d1r			; 7.223
	DD	04040e560r			; 3.014
	DD	0c1b3fbe7r			; -22.498
	DD	040fd9168r			; 7.924
	DD	0409ab852r			; 4.835
	ORG $+16
	DD	000000000r			; 0
	DD	03d2c0831r			; 0.042
	DD	0427ea4ddr			; 63.661
	DD	000000000r			; 0
	DD	0beb8d4fer			; -0.361
	DD	0bf3f7ceer			; -0.748
	ORG $+16
?camFocus@?1??TitleScreen@@YAXXZ@4UVectorStruct@@A DD 0459c4000r ; 5000 ; `TitleScreen'::`2'::camFocus
	DD	0459c4000r			; 5000
	DD	000000000r			; 0
?camPos@?P@??TitleScreen@@YAXXZ@4UVectorStruct@@A DD 000000000r ; 0 ; `TitleScreen'::`15'::camPos
	DD	000000000r			; 0
	DD	0c3480000r			; -200
?rX@?1??RenderFlag@@YAXPAUt_Flag@@@Z@4HA DD 019H	; `RenderFlag'::`2'::rX
?rY@?1??RenderFlag@@YAXPAUt_Flag@@@Z@4HA DD 02dH	; `RenderFlag'::`2'::rY
?normal@?CF@??RenderFlag@@YAXPAUt_Flag@@@Z@4UVectorStruct@@A DD 000000000r ; 0 ; `RenderFlag'::`37'::normal
	DD	0bf800000r			; -1
	DD	000000000r			; 0
_DATA	ENDS
PUBLIC	?GoTitleScreen@@YAXXZ				; GoTitleScreen
PUBLIC	?TitleScreen@@YAXXZ				; TitleScreen
PUBLIC	?ts_InitCameraPositions@@YAXXZ			; ts_InitCameraPositions
PUBLIC	?SetLightPos@@YAXPAUt_Light@@MMM@Z		; SetLightPos
PUBLIC	?SetLightDir@@YAXPAUt_Light@@MMM@Z		; SetLightDir
PUBLIC	?SetLightPower@@YAXPAUt_Light@@M@Z		; SetLightPower
PUBLIC	?SetLightStrength@@YAXPAUt_Light@@M@Z		; SetLightStrength
PUBLIC	?SetLightRange@@YAXPAUt_Light@@M@Z		; SetLightRange
PUBLIC	?InitFlag@@YAXPAUt_Flag@@HHMM@Z			; InitFlag
PUBLIC	??_C@_0O@PEANDJCI@gfx?2font1?4bmp?$AA@		; `string'
PUBLIC	??_C@_0O@IKBJKENM@gfx?2title?4bmp?$AA@		; `string'
PUBLIC	??_C@_0BB@CLJMFCFI@models?2trolley?4m?$AA@	; `string'
PUBLIC	??_C@_08KLCEOACE@FRONTEND?$AA@			; `string'
EXTRN	?QuitGame@@3DA:BYTE				; QuitGame
EXTRN	?SetViewport@@YAXMMMMM@Z:NEAR			; SetViewport
EXTRN	?TitleHbm@@3PAUHBITMAP__@@A:DWORD		; TitleHbm
EXTRN	?Event@@3P6AXXZA:DWORD				; Event
EXTRN	?GameSettings@@3UGAME_SETTINGS@@A:BYTE		; GameSettings
EXTRN	?RenderSettings@@3URENDER_SETTINGS@@A:BYTE	; RenderSettings
EXTRN	?MenuInit@@YAXPAUt_Menu@@0@Z:NEAR		; MenuInit
EXTRN	?gMainOptions_Menu@@3Ut_Menu@@A:BYTE		; gMainOptions_Menu
EXTRN	?MenuCount@@3FA:WORD				; MenuCount
EXTRN	?BaseGeomPers@@3MA:DWORD			; BaseGeomPers
EXTRN	?InitD3D@@YAHKKKK@Z:NEAR			; InitD3D
EXTRN	?SetupDxState@@YAXXZ:NEAR			; SetupDxState
EXTRN	?ScreenXsize@@3KA:DWORD				; ScreenXsize
EXTRN	?ScreenYsize@@3KA:DWORD				; ScreenYsize
EXTRN	?DisplayModeCount@@3JA:DWORD			; DisplayModeCount
EXTRN	?DrawDevices@@3PAUDRAW_DEVICE@@A:BYTE		; DrawDevices
EXTRN	?LEV_InitLevel@@YAXXZ:NEAR			; LEV_InitLevel
EXTRN	?GetLevelNum@@YAJPAD@Z:NEAR			; GetLevelNum
EXTRN	__fltused:NEAR
EXTRN	?GetTextureFormat@@YAXJ@Z:NEAR			; GetTextureFormat
EXTRN	?RegistrySettings@@3UREGISTRY_SETTINGS@@A:BYTE	; RegistrySettings
EXTRN	?LoadMipTexture@@YA_NPADDJJJJ@Z:NEAR		; LoadMipTexture
EXTRN	?InitTextures@@YAXXZ:NEAR			; InitTextures
EXTRN	?SetNearFar@@YAXMM@Z:NEAR			; SetNearFar
EXTRN	?LoadModel@@YAJPADPAUMODEL@@DDDJ@Z:NEAR		; LoadModel
EXTRN	?LoadBitmapA@@YAHPADPAPAUHBITMAP__@@@Z:NEAR	; LoadBitmapA
;	COMDAT ??_C@_0O@PEANDJCI@gfx?2font1?4bmp?$AA@
; File c:\documents and settings\jarhead\desktop\shit to display my love for xbox revolt and fuck you borman-ness\revolt source\source\titlescreen.cpp
CONST	SEGMENT
??_C@_0O@PEANDJCI@gfx?2font1?4bmp?$AA@ DB 'gfx\font1.bmp', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@IKBJKENM@gfx?2title?4bmp?$AA@
CONST	SEGMENT
??_C@_0O@IKBJKENM@gfx?2title?4bmp?$AA@ DB 'gfx\title.bmp', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@CLJMFCFI@models?2trolley?4m?$AA@
CONST	SEGMENT
??_C@_0BB@CLJMFCFI@models?2trolley?4m?$AA@ DB 'models\trolley.m', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08KLCEOACE@FRONTEND?$AA@
CONST	SEGMENT
??_C@_08KLCEOACE@FRONTEND?$AA@ DB 'FRONTEND', 00H	; `string'
; Function compile flags: /Odt /ZI
CONST	ENDS
;	COMDAT ?GoTitleScreen@@YAXXZ
_TEXT	SEGMENT
tv257 = -80						; size = 8
tv221 = -72						; size = 8
?GoTitleScreen@@YAXXZ PROC NEAR				; GoTitleScreen, COMDAT

; 99   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi

; 100  : // init D3D
; 101  : 	if (!InitD3D(DrawDevices[RegistrySettings.DrawDevice].DisplayMode[DisplayModeCount].Width, DrawDevices[RegistrySettings.DrawDevice].DisplayMode[DisplayModeCount].Height, DrawDevices[RegistrySettings.DrawDevice].DisplayMode[DisplayModeCount].Bpp, 0))

	push	0
	mov	eax, DWORD PTR ?RegistrySettings@@3UREGISTRY_SETTINGS@@A+44
	imul	eax, 1672				; 00000688H
	mov	ecx, DWORD PTR ?DisplayModeCount@@3JA	; DisplayModeCount
	imul	ecx, 48					; 00000030H
	mov	edx, DWORD PTR ?DrawDevices@@3PAUDRAW_DEVICE@@A[eax+ecx+144]
	push	edx
	mov	eax, DWORD PTR ?RegistrySettings@@3UREGISTRY_SETTINGS@@A+44
	imul	eax, 1672				; 00000688H
	mov	ecx, DWORD PTR ?DisplayModeCount@@3JA	; DisplayModeCount
	imul	ecx, 48					; 00000030H
	mov	edx, DWORD PTR ?DrawDevices@@3PAUDRAW_DEVICE@@A[eax+ecx+140]
	push	edx
	mov	eax, DWORD PTR ?RegistrySettings@@3UREGISTRY_SETTINGS@@A+44
	imul	eax, 1672				; 00000688H
	mov	ecx, DWORD PTR ?DisplayModeCount@@3JA	; DisplayModeCount
	imul	ecx, 48					; 00000030H
	mov	edx, DWORD PTR ?DrawDevices@@3PAUDRAW_DEVICE@@A[eax+ecx+136]
	push	edx
	call	?InitD3D@@YAHKKKK@Z			; InitD3D
	add	esp, 16					; 00000010H
	test	eax, eax
	jne	SHORT $L82208

; 102  : 	{
; 103  : 		QuitGame = TRUE;

	mov	BYTE PTR ?QuitGame@@3DA, 1		; QuitGame

; 104  : 		return;

	jmp	$L82207
$L82208:

; 105  : 	}
; 106  : 
; 107  : 	GetTextureFormat(RegistrySettings.TextureBpp);

	mov	eax, DWORD PTR ?RegistrySettings@@3UREGISTRY_SETTINGS@@A+56
	push	eax
	call	?GetTextureFormat@@YAXJ@Z		; GetTextureFormat
	add	esp, 4

; 108  : 	InitTextures();

	call	?InitTextures@@YAXXZ			; InitTextures

; 109  : 
; 110  : // setup states
; 111  : 
; 112  : 	SetupDxState();

	call	?SetupDxState@@YAXXZ			; SetupDxState

; 113  : 
; 114  : // set geom vars
; 115  : 
; 116  : 	RenderSettings.GeomPers = BaseGeomPers;

	mov	eax, DWORD PTR ?BaseGeomPers@@3MA
	mov	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A, eax

; 117  : //	SetNearFar(48.0f, 4096.0f);
; 118  : 	SetNearFar(48.0f, 60000.0f);

	push	1198153728				; 476a6000H
	push	1111490560				; 42400000H
	call	?SetNearFar@@YAXMM@Z			; SetNearFar
	add	esp, 8

; 119  : 	SetViewport(0, 0, (float)ScreenXsize, (float)ScreenYsize, RenderSettings.GeomPers);

	mov	eax, DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A
	push	eax
	mov	ecx, DWORD PTR ?ScreenYsize@@3KA	; ScreenYsize
	mov	DWORD PTR tv221[ebp], ecx
	mov	DWORD PTR tv221[ebp+4], 0
	fild	QWORD PTR tv221[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	edx, DWORD PTR ?ScreenXsize@@3KA	; ScreenXsize
	mov	DWORD PTR tv257[ebp], edx
	mov	DWORD PTR tv257[ebp+4], 0
	fild	QWORD PTR tv257[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	push	0
	push	0
	call	?SetViewport@@YAXMMMMM@Z		; SetViewport
	add	esp, 20					; 00000014H

; 120  : 
; 121  : // setup main menu
; 122  : 
; 123  : 	LoadMipTexture("gfx\\font1.bmp", TPAGE_FONT, 256, 256, 0, 1);

	push	1
	push	0
	push	256					; 00000100H
	push	256					; 00000100H
	push	22					; 00000016H
	push	OFFSET FLAT:??_C@_0O@PEANDJCI@gfx?2font1?4bmp?$AA@
	call	?LoadMipTexture@@YA_NPADDJJJJ@Z		; LoadMipTexture
	add	esp, 24					; 00000018H

; 124  : 
; 125  : 	LoadBitmap("gfx\\title.bmp", &TitleHbm);

	push	OFFSET FLAT:?TitleHbm@@3PAUHBITMAP__@@A	; TitleHbm
	push	OFFSET FLAT:??_C@_0O@IKBJKENM@gfx?2title?4bmp?$AA@
	call	?LoadBitmapA@@YAHPADPAPAUHBITMAP__@@@Z	; LoadBitmapA
	add	esp, 8

; 126  : 
; 127  : 	MenuCount = 0;

	mov	WORD PTR ?MenuCount@@3FA, 0		; MenuCount

; 128  : 	Event = TitleScreen;

	mov	DWORD PTR ?Event@@3P6AXXZA, OFFSET FLAT:?TitleScreen@@YAXXZ ; Event, TitleScreen

; 129  : 
; 130  : 
; 131  : // Setup flag
; 132  : 	InitFlag(&gFlag, 32,32, 10,10);

	push	1092616192				; 41200000H
	push	1092616192				; 41200000H
	push	32					; 00000020H
	push	32					; 00000020H
	push	OFFSET FLAT:?gFlag@@3Ut_Flag@@A		; gFlag
	call	?InitFlag@@YAXPAUt_Flag@@HHMM@Z		; InitFlag
	add	esp, 20					; 00000014H

; 133  : 
; 134  : // Setup light #0
; 135  : 	SetLightPos(&gLight[0], 100,-100,-100);

	push	-1027080192				; c2c80000H
	push	-1027080192				; c2c80000H
	push	1120403456				; 42c80000H
	push	OFFSET FLAT:?gLight@@3PAUt_Light@@A
	call	?SetLightPos@@YAXPAUt_Light@@MMM@Z	; SetLightPos
	add	esp, 16					; 00000010H

; 136  : 	SetLightDir(&gLight[0], -0.5,1,0.5);

	push	1056964608				; 3f000000H
	push	1065353216				; 3f800000H
	push	-1090519040				; bf000000H
	push	OFFSET FLAT:?gLight@@3PAUt_Light@@A
	call	?SetLightDir@@YAXPAUt_Light@@MMM@Z	; SetLightDir
	add	esp, 16					; 00000010H

; 137  : 	SetLightPower(&gLight[0], 15);

	push	1097859072				; 41700000H
	push	OFFSET FLAT:?gLight@@3PAUt_Light@@A
	call	?SetLightPower@@YAXPAUt_Light@@M@Z	; SetLightPower
	add	esp, 8

; 138  : 	SetLightStrength(&gLight[0], 1000);

	push	1148846080				; 447a0000H
	push	OFFSET FLAT:?gLight@@3PAUt_Light@@A
	call	?SetLightStrength@@YAXPAUt_Light@@M@Z	; SetLightStrength
	add	esp, 8

; 139  : 	SetLightRange(&gLight[0], 250);

	push	1132068864				; 437a0000H
	push	OFFSET FLAT:?gLight@@3PAUt_Light@@A
	call	?SetLightRange@@YAXPAUt_Light@@M@Z	; SetLightRange
	add	esp, 8

; 140  : 
; 141  : // Setup light #1
; 142  : 	SetLightPos(&gLight[1], -200,-100,0);

	push	0
	push	-1027080192				; c2c80000H
	push	-1018691584				; c3480000H
	push	OFFSET FLAT:?gLight@@3PAUt_Light@@A+44
	call	?SetLightPos@@YAXPAUt_Light@@MMM@Z	; SetLightPos
	add	esp, 16					; 00000010H

; 143  : 	SetLightDir(&gLight[1], 1,1,0);

	push	0
	push	1065353216				; 3f800000H
	push	1065353216				; 3f800000H
	push	OFFSET FLAT:?gLight@@3PAUt_Light@@A+44
	call	?SetLightDir@@YAXPAUt_Light@@MMM@Z	; SetLightDir
	add	esp, 16					; 00000010H

; 144  : 	SetLightPower(&gLight[1], 25);

	push	1103626240				; 41c80000H
	push	OFFSET FLAT:?gLight@@3PAUt_Light@@A+44
	call	?SetLightPower@@YAXPAUt_Light@@M@Z	; SetLightPower
	add	esp, 8

; 145  : 	SetLightStrength(&gLight[1], 1250);

	push	1151090688				; 449c4000H
	push	OFFSET FLAT:?gLight@@3PAUt_Light@@A+44
	call	?SetLightStrength@@YAXPAUt_Light@@M@Z	; SetLightStrength
	add	esp, 8

; 146  : 	SetLightRange(&gLight[1], 300);

	push	1133903872				; 43960000H
	push	OFFSET FLAT:?gLight@@3PAUt_Light@@A+44
	call	?SetLightRange@@YAXPAUt_Light@@M@Z	; SetLightRange
	add	esp, 8

; 147  : 
; 148  : // Setup light #2
; 149  : 	SetLightPos(&gLight[2], 0,100,150);

	push	1125515264				; 43160000H
	push	1120403456				; 42c80000H
	push	0
	push	OFFSET FLAT:?gLight@@3PAUt_Light@@A+88
	call	?SetLightPos@@YAXPAUt_Light@@MMM@Z	; SetLightPos
	add	esp, 16					; 00000010H

; 150  : 	SetLightDir(&gLight[2], 0,-4,-2);

	push	-1073741824				; c0000000H
	push	-1065353216				; c0800000H
	push	0
	push	OFFSET FLAT:?gLight@@3PAUt_Light@@A+88
	call	?SetLightDir@@YAXPAUt_Light@@MMM@Z	; SetLightDir
	add	esp, 16					; 00000010H

; 151  : 	SetLightPower(&gLight[2], 30);

	push	1106247680				; 41f00000H
	push	OFFSET FLAT:?gLight@@3PAUt_Light@@A+88
	call	?SetLightPower@@YAXPAUt_Light@@M@Z	; SetLightPower
	add	esp, 8

; 152  : 	SetLightStrength(&gLight[2], 500);

	push	1140457472				; 43fa0000H
	push	OFFSET FLAT:?gLight@@3PAUt_Light@@A+88
	call	?SetLightStrength@@YAXPAUt_Light@@M@Z	; SetLightStrength
	add	esp, 8

; 153  : 	SetLightRange(&gLight[2], 500);

	push	1140457472				; 43fa0000H
	push	OFFSET FLAT:?gLight@@3PAUt_Light@@A+88
	call	?SetLightRange@@YAXPAUt_Light@@M@Z	; SetLightRange
	add	esp, 8

; 154  : 
; 155  : //		SetLightStrength(&gLight[0], 0);
; 156  : //		SetLightStrength(&gLight[2], 0);
; 157  : 
; 158  : // Setup menu options
; 159  : 	gMenu = &gMainOptions_Menu;

	mov	DWORD PTR ?gMenu@@3PAUt_Menu@@A, OFFSET FLAT:?gMainOptions_Menu@@3Ut_Menu@@A ; gMenu, gMainOptions_Menu

; 160  : 	MenuInit(gMenu, NULL);

	push	0
	mov	eax, DWORD PTR ?gMenu@@3PAUt_Menu@@A	; gMenu
	push	eax
	call	?MenuInit@@YAXPAUt_Menu@@0@Z		; MenuInit
	add	esp, 8

; 161  : 
; 162  : 
; 163  : // Model
; 164  : 
; 165  : 	//	LoadModel("models\\spaceman.m", &gModel[0], 0,1, LOADMODEL_OFFSET_TPAGE, 100);
; 166  : //	LoadModel("models\\beachball.m", &gModel[0], 0,1, LOADMODEL_OFFSET_TPAGE, 100);
; 167  : 	LoadModel("models\\trolley.m", &gModel[0], 0,1, LOADMODEL_OFFSET_TPAGE, 100);

	push	100					; 00000064H
	push	2
	push	1
	push	0
	push	OFFSET FLAT:?gModel@@3PAUMODEL@@A	; gModel
	push	OFFSET FLAT:??_C@_0BB@CLJMFCFI@models?2trolley?4m?$AA@
	call	?LoadModel@@YAJPADPAUMODEL@@DDDJ@Z	; LoadModel
	add	esp, 24					; 00000018H

; 168  : 
; 169  : 
; 170  : // init level
; 171  : 	GameSettings.Level = GetLevelNum("FRONTEND");

	push	OFFSET FLAT:??_C@_08KLCEOACE@FRONTEND?$AA@
	call	?GetLevelNum@@YAJPAD@Z			; GetLevelNum
	add	esp, 4
	mov	DWORD PTR ?GameSettings@@3UGAME_SETTINGS@@A+4, eax

; 172  : 	if (GameSettings.Level < 0)

	cmp	DWORD PTR ?GameSettings@@3UGAME_SETTINGS@@A+4, 0
	jge	SHORT $L82215

; 173  : 		GameSettings.Level = 12;

	mov	DWORD PTR ?GameSettings@@3UGAME_SETTINGS@@A+4, 12 ; 0000000cH
$L82215:

; 174  : 	LEV_InitLevel();

	call	?LEV_InitLevel@@YAXXZ			; LEV_InitLevel

; 175  : 
; 176  : 	ts_InitCameraPositions();

	call	?ts_InitCameraPositions@@YAXXZ		; ts_InitCameraPositions
$L82207:

; 177  : 
; 178  : //	Camera[CameraCount].WPos.v[0] = 200 * 9.587;	//0;
; 179  : //	Camera[CameraCount].WPos.v[1] = 200 * -2.395;	//-4000;
; 180  : //	Camera[CameraCount].WPos.v[2] = 200 * 7.127;	//0;
; 181  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GoTitleScreen@@YAXXZ ENDP				; GoTitleScreen
_TEXT	ENDS
PUBLIC	?ReleaseTitleScreen@@YAXXZ			; ReleaseTitleScreen
PUBLIC	?ReleaseFlag@@YAXPAUt_Flag@@@Z			; ReleaseFlag
EXTRN	?LEV_EndLevel@@YAXXZ:NEAR			; LEV_EndLevel
EXTRN	?FreeModel@@YAXPAUMODEL@@J@Z:NEAR		; FreeModel
; Function compile flags: /Odt /ZI
;	COMDAT ?ReleaseTitleScreen@@YAXXZ
_TEXT	SEGMENT
?ReleaseTitleScreen@@YAXXZ PROC NEAR			; ReleaseTitleScreen, COMDAT

; 187  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 188  : 	ReleaseFlag(&gFlag);

	push	OFFSET FLAT:?gFlag@@3Ut_Flag@@A		; gFlag
	call	?ReleaseFlag@@YAXPAUt_Flag@@@Z		; ReleaseFlag
	add	esp, 4

; 189  : 	FreeModel(&gModel[0], 1);

	push	1
	push	OFFSET FLAT:?gModel@@3PAUMODEL@@A	; gModel
	call	?FreeModel@@YAXPAUMODEL@@J@Z		; FreeModel
	add	esp, 8

; 190  : 	LEV_EndLevel();

	call	?LEV_EndLevel@@YAXXZ			; LEV_EndLevel

; 191  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?ReleaseTitleScreen@@YAXXZ ENDP				; ReleaseTitleScreen
_TEXT	ENDS
PUBLIC	__real@43480000
EXTRN	?BuildLookMatrixForward@@YAXPAUVectorStruct@@0PATMatrixUnion@@@Z:NEAR ; BuildLookMatrixForward
EXTRN	?MatToQuat@@YAXPATMatrixUnion@@PAUQuaternionStruct@@@Z:NEAR ; MatToQuat
;	COMDAT __real@43480000
CONST	SEGMENT
__real@43480000 DD 043480000r			; 200
; Function compile flags: /Odt /ZI
CONST	ENDS
;	COMDAT ?ts_InitCameraPositions@@YAXXZ
_TEXT	SEGMENT
_i$ = -48						; size = 4
_y$ = -44						; size = 4
_matrix$ = -40						; size = 36
_pCamPos$ = -4						; size = 4
?ts_InitCameraPositions@@YAXXZ PROC NEAR		; ts_InitCameraPositions, COMDAT

; 198  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 112				; 00000070H
	push	ebx
	push	esi
	push	edi

; 199  : 	t_CameraPos*	pCamPos;
; 200  : 	MAT				matrix;
; 201  : 	REAL			y;
; 202  : 	int				i;
; 203  : 
; 204  : 	pCamPos = gCameraPositions;

	mov	DWORD PTR _pCamPos$[ebp], OFFSET FLAT:?gCameraPositions@@3PAUt_CameraPos@@A ; gCameraPositions

; 205  : 	for (i = 0; i < TS_CAMPOS_NUM; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $L82226
$L82227:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$L82226:
	cmp	DWORD PTR _i$[ebp], 9
	jge	$L82221

; 206  : 	{
; 207  : 		y = pCamPos->eye.v[1];

	mov	eax, DWORD PTR _pCamPos$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _y$[ebp], ecx

; 208  : 		pCamPos->eye.v[0] = MulScalar(TS_COORD_SCALE, pCamPos->eye.v[0]);

	mov	eax, DWORD PTR _pCamPos$[ebp]
	fld	DWORD PTR __real@43480000
	fmul	DWORD PTR [eax]
	mov	ecx, DWORD PTR _pCamPos$[ebp]
	fstp	DWORD PTR [ecx]

; 209  : 		pCamPos->eye.v[1] = MulScalar(TS_COORD_SCALE, -pCamPos->eye.v[2]);

	mov	eax, DWORD PTR _pCamPos$[ebp]
	fld	DWORD PTR [eax+8]
	fchs
	fmul	DWORD PTR __real@43480000
	mov	ecx, DWORD PTR _pCamPos$[ebp]
	fstp	DWORD PTR [ecx+4]

; 210  : 		pCamPos->eye.v[2] = MulScalar(TS_COORD_SCALE, y);

	fld	DWORD PTR __real@43480000
	fmul	DWORD PTR _y$[ebp]
	mov	eax, DWORD PTR _pCamPos$[ebp]
	fstp	DWORD PTR [eax+8]

; 211  : 
; 212  : 		y = pCamPos->focus.v[1];

	mov	eax, DWORD PTR _pCamPos$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _y$[ebp], ecx

; 213  : 		pCamPos->focus.v[0] = MulScalar(TS_COORD_SCALE, pCamPos->focus.v[0]);

	mov	eax, DWORD PTR _pCamPos$[ebp]
	fld	DWORD PTR [eax+12]
	fmul	DWORD PTR __real@43480000
	mov	ecx, DWORD PTR _pCamPos$[ebp]
	fstp	DWORD PTR [ecx+12]

; 214  : 		pCamPos->focus.v[1] = MulScalar(TS_COORD_SCALE, -pCamPos->focus.v[2]);

	mov	eax, DWORD PTR _pCamPos$[ebp]
	fld	DWORD PTR [eax+20]
	fchs
	fmul	DWORD PTR __real@43480000
	mov	ecx, DWORD PTR _pCamPos$[ebp]
	fstp	DWORD PTR [ecx+16]

; 215  : 		pCamPos->focus.v[2] = MulScalar(TS_COORD_SCALE, y);

	fld	DWORD PTR __real@43480000
	fmul	DWORD PTR _y$[ebp]
	mov	eax, DWORD PTR _pCamPos$[ebp]
	fstp	DWORD PTR [eax+20]

; 216  : 
; 217  : 		BuildLookMatrixForward(&pCamPos->eye, &pCamPos->focus, &matrix);

	lea	eax, DWORD PTR _matrix$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pCamPos$[ebp]
	add	ecx, 12					; 0000000cH
	push	ecx
	mov	edx, DWORD PTR _pCamPos$[ebp]
	push	edx
	call	?BuildLookMatrixForward@@YAXPAUVectorStruct@@0PATMatrixUnion@@@Z ; BuildLookMatrixForward
	add	esp, 12					; 0000000cH

; 218  : 		MatToQuat(&matrix, &pCamPos->quat);

	mov	eax, DWORD PTR _pCamPos$[ebp]
	add	eax, 24					; 00000018H
	push	eax
	lea	ecx, DWORD PTR _matrix$[ebp]
	push	ecx
	call	?MatToQuat@@YAXPATMatrixUnion@@PAUQuaternionStruct@@@Z ; MatToQuat
	add	esp, 8

; 219  : 
; 220  : 		pCamPos++;

	mov	eax, DWORD PTR _pCamPos$[ebp]
	add	eax, 40					; 00000028H
	mov	DWORD PTR _pCamPos$[ebp], eax

; 221  : 	}

	jmp	$L82227
$L82221:

; 222  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?ts_InitCameraPositions@@YAXXZ ENDP			; ts_InitCameraPositions
_TEXT	ENDS
PUBLIC	__real@42c80000
PUBLIC	__real@43b40000
PUBLIC	__real@00000000
PUBLIC	__real@41200000
EXTRN	?UpdateTimeFactor@@YAXXZ:NEAR			; UpdateTimeFactor
EXTRN	?GoFront@@YAXXZ:NEAR				; GoFront
EXTRN	?RotMatrixZYX@@YAXPATMatrixUnion@@MMM@Z:NEAR	; RotMatrixZYX
EXTRN	?SetCameraView@@YAXPATMatrixUnion@@PAUVectorStruct@@M@Z:NEAR ; SetCameraView
EXTRN	?DrawWorld@@YAXXZ:NEAR				; DrawWorld
EXTRN	?UpdateCamera@@YAXPAUCameraStruct@@@Z:NEAR	; UpdateCamera
EXTRN	?MenuProcess@@YAPAUt_Menu@@PAU1@@Z:NEAR		; MenuProcess
EXTRN	?MenuRender@@YAXPAUt_Menu@@@Z:NEAR		; MenuRender
EXTRN	?BeginTextState@@YAXXZ:NEAR			; BeginTextState
EXTRN	?Camera@@3PAUCameraStruct@@A:BYTE		; Camera
EXTRN	?ReadKeyboard@@YAXXZ:NEAR			; ReadKeyboard
EXTRN	?ReadMouse@@YAXXZ:NEAR				; ReadMouse
EXTRN	?Keys@@3PADA:BYTE				; Keys
EXTRN	?QuatToMat@@YAXPAUQuaternionStruct@@PATMatrixUnion@@@Z:NEAR ; QuatToMat
EXTRN	?SetCameraVisiMask@@YAXPAUVectorStruct@@@Z:NEAR	; SetCameraVisiMask
EXTRN	?CheckSurfaces@@YAXXZ:NEAR			; CheckSurfaces
EXTRN	?FlipBuffers@@YAXXZ:NEAR			; FlipBuffers
EXTRN	?ClearBuffers@@YAXXZ:NEAR			; ClearBuffers
EXTRN	?D3Ddevice@@3PAUIDirect3DDevice3@@A:DWORD	; D3Ddevice
EXTRN	?DrawInstances@@YAXXZ:NEAR			; DrawInstances
EXTRN	?InitPolyBuckets@@YAXXZ:NEAR			; InitPolyBuckets
EXTRN	?FlushPolyBuckets@@YAXXZ:NEAR			; FlushPolyBuckets
EXTRN	?FlushEnvBuckets@@YAXXZ:NEAR			; FlushEnvBuckets
EXTRN	?Reset3dPolyList@@YAXXZ:NEAR			; Reset3dPolyList
EXTRN	?ResetSemiList@@YAXXZ:NEAR			; ResetSemiList
EXTRN	?InitRenderStates@@YAXXZ:NEAR			; InitRenderStates
;	COMDAT __real@42c80000
CONST	SEGMENT
__real@42c80000 DD 042c80000r			; 100
CONST	ENDS
;	COMDAT __real@43b40000
CONST	SEGMENT
__real@43b40000 DD 043b40000r			; 360
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT __real@41200000
CONST	SEGMENT
__real@41200000 DD 041200000r			; 10
; Function compile flags: /Odt /ZI
CONST	ENDS
;	COMDAT ?TitleScreen@@YAXXZ
_TEXT	SEGMENT
_modelPos$ = -92					; size = 12
_modelMat$ = -80					; size = 36
_camMat$ = -44						; size = 36
_pCamPos$ = -8						; size = 4
_CameraCount$ = -4					; size = 4
?TitleScreen@@YAXXZ PROC NEAR				; TitleScreen, COMDAT

; 229  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 156				; 0000009cH
	push	ebx
	push	esi
	push	edi

; 230  : 
; 231  : // buffer flip / clear
; 232  : 
; 233  : 	CheckSurfaces();

	call	?CheckSurfaces@@YAXXZ			; CheckSurfaces

; 234  : 	FlipBuffers();

	call	?FlipBuffers@@YAXXZ			; FlipBuffers

; 235  : //	ClearBuffers();
; 236  : 
; 237  : // set and clear viewport
; 238  : //	SetViewport(Camera[CameraCount].X, Camera[CameraCount].Y, Camera[CameraCount].Xsize, Camera[CameraCount].Ysize, BaseGeomPers + Camera[CameraCount].Lens);
; 239  : 	InitRenderStates();

	call	?InitRenderStates@@YAXXZ		; InitRenderStates

; 240  : 
; 241  : 
; 242  : // reset 3d poly list
; 243  : 	Reset3dPolyList();

	call	?Reset3dPolyList@@YAXXZ			; Reset3dPolyList

; 244  : 	InitPolyBuckets();

	call	?InitPolyBuckets@@YAXXZ			; InitPolyBuckets

; 245  : 
; 246  : // Input
; 247  : 	ReadMouse();

	call	?ReadMouse@@YAXXZ			; ReadMouse

; 248  : 	ReadKeyboard();

	call	?ReadKeyboard@@YAXXZ			; ReadKeyboard

; 249  : 	UpdateTimeFactor();

	call	?UpdateTimeFactor@@YAXXZ		; UpdateTimeFactor

; 250  : 
; 251  : 
; 252  : // show menu
; 253  : 
; 254  : 	D3Ddevice->BeginScene();

	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	edx
	call	DWORD PTR [ecx+36]

; 255  : 
; 256  : //	BlitBitmap(TitleHbm, &BackBuffer);
; 257  : 
; 258  : 	BeginTextState();

	call	?BeginTextState@@YAXXZ			; BeginTextState

; 259  : 
; 260  : 
; 261  : // Gazza
; 262  : 	gMenu = MenuProcess(gMenu);

	mov	eax, DWORD PTR ?gMenu@@3PAUt_Menu@@A	; gMenu
	push	eax
	call	?MenuProcess@@YAPAUt_Menu@@PAU1@@Z	; MenuProcess
	add	esp, 4
	mov	DWORD PTR ?gMenu@@3PAUt_Menu@@A, eax	; gMenu

; 263  : 
; 264  : 
; 265  : 
; 266  : // update camera + set camera view vars
; 267  : 	int CameraCount = 0;

	mov	DWORD PTR _CameraCount$[ebp], 0

; 268  : 
; 269  : 	UpdateCamera(&Camera[CameraCount]);

	mov	eax, DWORD PTR _CameraCount$[ebp]
	imul	eax, 348				; 0000015cH
	add	eax, OFFSET FLAT:?Camera@@3PAUCameraStruct@@A ; Camera
	push	eax
	call	?UpdateCamera@@YAXPAUCameraStruct@@@Z	; UpdateCamera
	add	esp, 4

; 270  : 
; 271  : 		static VEC camFocus = {5000,5000,0};
; 272  : //		static VEC camFocus = {200*16.676, -200*1.849, 200*12.887};
; 273  : 
; 274  : 		if (Keys[DIK_NUMPAD4])

	movsx	eax, BYTE PTR ?Keys@@3PADA+75
	test	eax, eax
	je	SHORT $L82241

; 275  : 			camFocus.v[0] -= 100;

	fld	DWORD PTR ?camFocus@?1??TitleScreen@@YAXXZ@4UVectorStruct@@A
	fsub	DWORD PTR __real@42c80000
	fstp	DWORD PTR ?camFocus@?1??TitleScreen@@YAXXZ@4UVectorStruct@@A
$L82241:

; 276  : 		if (Keys[DIK_NUMPAD6])

	movsx	eax, BYTE PTR ?Keys@@3PADA+77
	test	eax, eax
	je	SHORT $L82242

; 277  : 			camFocus.v[0] += 100;

	fld	DWORD PTR ?camFocus@?1??TitleScreen@@YAXXZ@4UVectorStruct@@A
	fadd	DWORD PTR __real@42c80000
	fstp	DWORD PTR ?camFocus@?1??TitleScreen@@YAXXZ@4UVectorStruct@@A
$L82242:

; 278  : 		if (Keys[DIK_NUMPAD2])

	movsx	eax, BYTE PTR ?Keys@@3PADA+80
	test	eax, eax
	je	SHORT $L82243

; 279  : 			camFocus.v[2] -= 100;

	fld	DWORD PTR ?camFocus@?1??TitleScreen@@YAXXZ@4UVectorStruct@@A+8
	fsub	DWORD PTR __real@42c80000
	fstp	DWORD PTR ?camFocus@?1??TitleScreen@@YAXXZ@4UVectorStruct@@A+8
$L82243:

; 280  : 		if (Keys[DIK_NUMPAD8])

	movsx	eax, BYTE PTR ?Keys@@3PADA+72
	test	eax, eax
	je	SHORT $L82244

; 281  : 			camFocus.v[2] += 100;

	fld	DWORD PTR ?camFocus@?1??TitleScreen@@YAXXZ@4UVectorStruct@@A+8
	fadd	DWORD PTR __real@42c80000
	fstp	DWORD PTR ?camFocus@?1??TitleScreen@@YAXXZ@4UVectorStruct@@A+8
$L82244:

; 282  : 
; 283  : 		if (Keys[DIK_NUMPAD7])

	movsx	eax, BYTE PTR ?Keys@@3PADA+71
	test	eax, eax
	je	SHORT $L82245

; 284  : 			Camera[CameraCount].WPos.v[1] -= 100;

	mov	eax, DWORD PTR _CameraCount$[ebp]
	imul	eax, 348				; 0000015cH
	fld	DWORD PTR ?Camera@@3PAUCameraStruct@@A[eax+72]
	fsub	DWORD PTR __real@42c80000
	mov	ecx, DWORD PTR _CameraCount$[ebp]
	imul	ecx, 348				; 0000015cH
	fstp	DWORD PTR ?Camera@@3PAUCameraStruct@@A[ecx+72]
$L82245:

; 285  : 		if (Keys[DIK_NUMPAD9])

	movsx	eax, BYTE PTR ?Keys@@3PADA+73
	test	eax, eax
	je	SHORT $L82246

; 286  : 			Camera[CameraCount].WPos.v[1] += 100;

	mov	eax, DWORD PTR _CameraCount$[ebp]
	imul	eax, 348				; 0000015cH
	fld	DWORD PTR ?Camera@@3PAUCameraStruct@@A[eax+72]
	fadd	DWORD PTR __real@42c80000
	mov	ecx, DWORD PTR _CameraCount$[ebp]
	imul	ecx, 348				; 0000015cH
	fstp	DWORD PTR ?Camera@@3PAUCameraStruct@@A[ecx+72]
$L82246:

; 287  : 
; 288  : //		BuildLookMatrixForward(&Camera[CameraCount].WPos, &camFocus, &Camera[CameraCount].WMatrix);
; 289  : 
; 290  : 			t_CameraPos* pCamPos;
; 291  : 			pCamPos = &gCameraPositions[0];

	mov	DWORD PTR _pCamPos$[ebp], OFFSET FLAT:?gCameraPositions@@3PAUt_CameraPos@@A ; gCameraPositions

; 292  : 			Camera[CameraCount].WPos.v[0] = pCamPos->eye.v[0];

	mov	eax, DWORD PTR _CameraCount$[ebp]
	imul	eax, 348				; 0000015cH
	mov	ecx, DWORD PTR _pCamPos$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR ?Camera@@3PAUCameraStruct@@A[eax+68], edx

; 293  : 			Camera[CameraCount].WPos.v[1] = pCamPos->eye.v[1];

	mov	eax, DWORD PTR _CameraCount$[ebp]
	imul	eax, 348				; 0000015cH
	mov	ecx, DWORD PTR _pCamPos$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR ?Camera@@3PAUCameraStruct@@A[eax+72], edx

; 294  : 			Camera[CameraCount].WPos.v[2] = pCamPos->eye.v[2];

	mov	eax, DWORD PTR _CameraCount$[ebp]
	imul	eax, 348				; 0000015cH
	mov	ecx, DWORD PTR _pCamPos$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR ?Camera@@3PAUCameraStruct@@A[eax+76], edx

; 295  : 			camFocus.v[0] = pCamPos->focus.v[0];

	mov	eax, DWORD PTR _pCamPos$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR ?camFocus@?1??TitleScreen@@YAXXZ@4UVectorStruct@@A, ecx

; 296  : 			camFocus.v[1] = pCamPos->focus.v[1];

	mov	eax, DWORD PTR _pCamPos$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR ?camFocus@?1??TitleScreen@@YAXXZ@4UVectorStruct@@A+4, ecx

; 297  : 			camFocus.v[2] = pCamPos->focus.v[2];

	mov	eax, DWORD PTR _pCamPos$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR ?camFocus@?1??TitleScreen@@YAXXZ@4UVectorStruct@@A+8, ecx

; 298  : //			BuildLookMatrixForward(&Camera[CameraCount].WPos, &camFocus, &Camera[CameraCount].WMatrix);
; 299  : 			QuatToMat(&pCamPos->quat, &Camera[CameraCount].WMatrix);

	mov	eax, DWORD PTR _CameraCount$[ebp]
	imul	eax, 348				; 0000015cH
	add	eax, OFFSET FLAT:?Camera@@3PAUCameraStruct@@A+16
	push	eax
	mov	ecx, DWORD PTR _pCamPos$[ebp]
	add	ecx, 24					; 00000018H
	push	ecx
	call	?QuatToMat@@YAXPAUQuaternionStruct@@PATMatrixUnion@@@Z ; QuatToMat
	add	esp, 8

; 300  : 
; 301  : // set and clear viewport
; 302  : 
; 303  : 	SetViewport(Camera[CameraCount].X, Camera[CameraCount].Y, Camera[CameraCount].Xsize, Camera[CameraCount].Ysize, BaseGeomPers + Camera[CameraCount].Lens);

	mov	eax, DWORD PTR _CameraCount$[ebp]
	imul	eax, 348				; 0000015cH
	fld	DWORD PTR ?BaseGeomPers@@3MA		; BaseGeomPers
	fadd	DWORD PTR ?Camera@@3PAUCameraStruct@@A[eax+168]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _CameraCount$[ebp]
	imul	ecx, 348				; 0000015cH
	mov	edx, DWORD PTR ?Camera@@3PAUCameraStruct@@A[ecx+340]
	push	edx
	mov	eax, DWORD PTR _CameraCount$[ebp]
	imul	eax, 348				; 0000015cH
	mov	ecx, DWORD PTR ?Camera@@3PAUCameraStruct@@A[eax+336]
	push	ecx
	mov	edx, DWORD PTR _CameraCount$[ebp]
	imul	edx, 348				; 0000015cH
	mov	eax, DWORD PTR ?Camera@@3PAUCameraStruct@@A[edx+332]
	push	eax
	mov	ecx, DWORD PTR _CameraCount$[ebp]
	imul	ecx, 348				; 0000015cH
	mov	edx, DWORD PTR ?Camera@@3PAUCameraStruct@@A[ecx+328]
	push	edx
	call	?SetViewport@@YAXMMMMM@Z		; SetViewport
	add	esp, 20					; 00000014H

; 304  : 	InitRenderStates();

	call	?InitRenderStates@@YAXXZ		; InitRenderStates

; 305  : 	ClearBuffers();

	call	?ClearBuffers@@YAXXZ			; ClearBuffers

; 306  : 
; 307  : 	SetCameraView(&Camera[CameraCount].WMatrix, &Camera[CameraCount].WPos, Camera[CameraCount].Shake);

	mov	eax, DWORD PTR _CameraCount$[ebp]
	imul	eax, 348				; 0000015cH
	mov	ecx, DWORD PTR ?Camera@@3PAUCameraStruct@@A[eax+188]
	push	ecx
	mov	edx, DWORD PTR _CameraCount$[ebp]
	imul	edx, 348				; 0000015cH
	add	edx, OFFSET FLAT:?Camera@@3PAUCameraStruct@@A+68
	push	edx
	mov	eax, DWORD PTR _CameraCount$[ebp]
	imul	eax, 348				; 0000015cH
	add	eax, OFFSET FLAT:?Camera@@3PAUCameraStruct@@A+16
	push	eax
	call	?SetCameraView@@YAXPATMatrixUnion@@PAUVectorStruct@@M@Z ; SetCameraView
	add	esp, 12					; 0000000cH

; 308  : 	SetCameraVisiMask(&Camera[CameraCount].WPos);

	mov	eax, DWORD PTR _CameraCount$[ebp]
	imul	eax, 348				; 0000015cH
	add	eax, OFFSET FLAT:?Camera@@3PAUCameraStruct@@A+68
	push	eax
	call	?SetCameraVisiMask@@YAXPAUVectorStruct@@@Z ; SetCameraVisiMask
	add	esp, 4

; 309  : 
; 310  : // render opaque polys
; 311  : 
; 312  : 	ResetSemiList();

	call	?ResetSemiList@@YAXXZ			; ResetSemiList

; 313  : 
; 314  : //		if (DrawGridCollSkin)
; 315  : //		{
; 316  : //			DrawGridCollPolys(PosToCollGrid(&PLR_LocalPlayer->car.Body->Centre.Pos));
; 317  : //		}
; 318  : //		else
; 319  : 	{
; 320  : 		DrawWorld();

	call	?DrawWorld@@YAXXZ			; DrawWorld

; 321  : 		DrawInstances();

	call	?DrawInstances@@YAXXZ			; DrawInstances

; 322  : 	}
; 323  : 
; 324  : //		DrawObjects();
; 325  : //		DrawAllCars();
; 326  : //		Draw3dPolyList();
; 327  : 
; 328  : 
; 329  : 
; 330  : // TEST
; 331  : //	RenderFlag(&gFlag);
; 332  : 
; 333  : 
; 334  : // TEST
; 335  : 	MAT camMat;
; 336  : //	static VEC camPos = {0,0,-750};
; 337  : 	static VEC camPos = {0,0,-200};
; 338  : 	RotMatrixZYX(&camMat, (REAL)0/360,(REAL)0/360,(REAL)0/360);

	push	0
	push	0
	push	0
	lea	eax, DWORD PTR _camMat$[ebp]
	push	eax
	call	?RotMatrixZYX@@YAXPATMatrixUnion@@MMM@Z	; RotMatrixZYX
	add	esp, 16					; 00000010H

; 339  : 	SetCameraView(&camMat, &camPos, 0);

	push	0
	push	OFFSET FLAT:?camPos@?P@??TitleScreen@@YAXXZ@4UVectorStruct@@A
	lea	eax, DWORD PTR _camMat$[ebp]
	push	eax
	call	?SetCameraView@@YAXPATMatrixUnion@@PAUVectorStruct@@M@Z ; SetCameraView
	add	esp, 12					; 0000000cH

; 340  : 
; 341  : 	static VEC modelRot = {0,0,0};
; 342  : 	MAT	modelMat;
; 343  : 	VEC	modelPos = {0,0,0};

	mov	DWORD PTR _modelPos$[ebp], 0
	mov	DWORD PTR _modelPos$[ebp+4], 0
	mov	DWORD PTR _modelPos$[ebp+8], 0

; 344  : 	RotMatrixZYX(&modelMat, (REAL)modelRot.v[0]/360,(REAL)modelRot.v[1]/360,(REAL)modelRot.v[2]/360);

	fld	DWORD PTR ?modelRot@?P@??TitleScreen@@YAXXZ@4UVectorStruct@@A+8
	fdiv	DWORD PTR __real@43b40000
	push	ecx
	fstp	DWORD PTR [esp]
	fld	DWORD PTR ?modelRot@?P@??TitleScreen@@YAXXZ@4UVectorStruct@@A+4
	fdiv	DWORD PTR __real@43b40000
	push	ecx
	fstp	DWORD PTR [esp]
	fld	DWORD PTR ?modelRot@?P@??TitleScreen@@YAXXZ@4UVectorStruct@@A
	fdiv	DWORD PTR __real@43b40000
	push	ecx
	fstp	DWORD PTR [esp]
	lea	eax, DWORD PTR _modelMat$[ebp]
	push	eax
	call	?RotMatrixZYX@@YAXPATMatrixUnion@@MMM@Z	; RotMatrixZYX
	add	esp, 16					; 00000010H

; 345  : //	DrawModel(&gModel[0], &modelMat, &modelPos, MODEL_LIT);
; 346  : 
; 347  : 	modelRot.v[0] += 0;

	fld	DWORD PTR ?modelRot@?P@??TitleScreen@@YAXXZ@4UVectorStruct@@A
	fadd	DWORD PTR __real@00000000
	fstp	DWORD PTR ?modelRot@?P@??TitleScreen@@YAXXZ@4UVectorStruct@@A

; 348  : 	modelRot.v[1] += 10;

	fld	DWORD PTR ?modelRot@?P@??TitleScreen@@YAXXZ@4UVectorStruct@@A+4
	fadd	DWORD PTR __real@41200000
	fstp	DWORD PTR ?modelRot@?P@??TitleScreen@@YAXXZ@4UVectorStruct@@A+4

; 349  : 	modelRot.v[2] += 0;

	fld	DWORD PTR ?modelRot@?P@??TitleScreen@@YAXXZ@4UVectorStruct@@A+8
	fadd	DWORD PTR __real@00000000
	fstp	DWORD PTR ?modelRot@?P@??TitleScreen@@YAXXZ@4UVectorStruct@@A+8

; 350  : 
; 351  : 
; 352  : // set eye mat + trans
; 353  : //	MulMatrix(&ViewMatrixScaled, worldmat, &eyematrix);
; 354  : //	RotTransVector(&ViewMatrixScaled, &ViewTransScaled, worldpos, &eyetrans);
; 355  : 
; 356  : 
; 357  : 
; 358  : 
; 359  : 
; 360  : // Flush poly buckets
; 361  : 	FlushPolyBuckets();

	call	?FlushPolyBuckets@@YAXXZ		; FlushPolyBuckets

; 362  : 	FlushEnvBuckets();

	call	?FlushEnvBuckets@@YAXXZ			; FlushEnvBuckets

; 363  : 
; 364  : 
; 365  : // Render menu
; 366  : 	if (gMenu)

	cmp	DWORD PTR ?gMenu@@3PAUt_Menu@@A, 0	; gMenu
	je	SHORT $L82261

; 367  : 	{
; 368  : 		BeginTextState();

	call	?BeginTextState@@YAXXZ			; BeginTextState

; 369  : 		MenuRender(gMenu);

	mov	eax, DWORD PTR ?gMenu@@3PAUt_Menu@@A	; gMenu
	push	eax
	call	?MenuRender@@YAXPAUt_Menu@@@Z		; MenuRender
	add	esp, 4
$L82261:

; 370  : 	}
; 371  : 
; 372  : // End scene
; 373  : 	D3Ddevice->EndScene();

	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	edx
	call	DWORD PTR [ecx+40]

; 374  : 
; 375  : 
; 376  : // Quit ?
; 377  : 	if (!gMenu)

	cmp	DWORD PTR ?gMenu@@3PAUt_Menu@@A, 0	; gMenu
	jne	SHORT $L82237

; 378  : 	{
; 379  : 		ReleaseTitleScreen();

	call	?ReleaseTitleScreen@@YAXXZ		; ReleaseTitleScreen

; 380  : 		Event = GoFront;

	mov	DWORD PTR ?Event@@3P6AXXZA, OFFSET FLAT:?GoFront@@YAXXZ ; Event, GoFront
$L82237:

; 381  : 	}
; 382  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?TitleScreen@@YAXXZ ENDP				; TitleScreen
; Function compile flags: /Odt /ZI
_TEXT	ENDS
;	COMDAT ?SetLightPos@@YAXPAUt_Light@@MMM@Z
_TEXT	SEGMENT
_pLight$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_z$ = 20						; size = 4
?SetLightPos@@YAXPAUt_Light@@MMM@Z PROC NEAR		; SetLightPos, COMDAT

; 389  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 390  : 	pLight->pos.v[0] = x;

	mov	eax, DWORD PTR _pLight$[ebp]
	mov	ecx, DWORD PTR _x$[ebp]
	mov	DWORD PTR [eax], ecx

; 391  : 	pLight->pos.v[1] = y;

	mov	eax, DWORD PTR _pLight$[ebp]
	mov	ecx, DWORD PTR _y$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 392  : 	pLight->pos.v[2] = z;

	mov	eax, DWORD PTR _pLight$[ebp]
	mov	ecx, DWORD PTR _z$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 393  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?SetLightPos@@YAXPAUt_Light@@MMM@Z ENDP			; SetLightPos
_TEXT	ENDS
PUBLIC	?sqrt@@YAMM@Z					; sqrt
PUBLIC	__real@3f800000
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
; Function compile flags: /Odt /ZI
CONST	ENDS
;	COMDAT ?SetLightDir@@YAXPAUt_Light@@MMM@Z
_TEXT	SEGMENT
_l$ = -4						; size = 4
_pLight$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_z$ = 20						; size = 4
?SetLightDir@@YAXPAUt_Light@@MMM@Z PROC NEAR		; SetLightDir, COMDAT

; 396  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 397  : 	REAL l = MulScalar(x, x) + MulScalar(y, y) + MulScalar(z, z);

	fld	DWORD PTR _x$[ebp]
	fmul	DWORD PTR _x$[ebp]
	fld	DWORD PTR _y$[ebp]
	fmul	DWORD PTR _y$[ebp]
	faddp	ST(1), ST(0)
	fld	DWORD PTR _z$[ebp]
	fmul	DWORD PTR _z$[ebp]
	faddp	ST(1), ST(0)
	fstp	DWORD PTR _l$[ebp]

; 398  : 	if (l != (ONE*ONE))

	cmp	DWORD PTR _l$[ebp], 1065353216		; 3f800000H
	je	SHORT $L82276

; 399  : 	{
; 400  : 		l = ONE / (REAL)sqrt(l);

	mov	eax, DWORD PTR _l$[ebp]
	push	eax
	call	?sqrt@@YAMM@Z				; sqrt
	add	esp, 4
	fdivr	DWORD PTR __real@3f800000
	fstp	DWORD PTR _l$[ebp]

; 401  : 		x = MulScalar(x, l);

	fld	DWORD PTR _x$[ebp]
	fmul	DWORD PTR _l$[ebp]
	fstp	DWORD PTR _x$[ebp]

; 402  : 		y = MulScalar(y, l);

	fld	DWORD PTR _y$[ebp]
	fmul	DWORD PTR _l$[ebp]
	fstp	DWORD PTR _y$[ebp]

; 403  : 		z = MulScalar(z, l);

	fld	DWORD PTR _z$[ebp]
	fmul	DWORD PTR _l$[ebp]
	fstp	DWORD PTR _z$[ebp]
$L82276:

; 404  : 	}
; 405  : 
; 406  : 	pLight->dir.v[0] = x;

	mov	eax, DWORD PTR _pLight$[ebp]
	mov	ecx, DWORD PTR _x$[ebp]
	mov	DWORD PTR [eax+12], ecx

; 407  : 	pLight->dir.v[1] = y;

	mov	eax, DWORD PTR _pLight$[ebp]
	mov	ecx, DWORD PTR _y$[ebp]
	mov	DWORD PTR [eax+16], ecx

; 408  : 	pLight->dir.v[2] = z;

	mov	eax, DWORD PTR _pLight$[ebp]
	mov	ecx, DWORD PTR _z$[ebp]
	mov	DWORD PTR [eax+20], ecx

; 409  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?SetLightDir@@YAXPAUt_Light@@MMM@Z ENDP			; SetLightDir
; Function compile flags: /Odt /ZI
_TEXT	ENDS
;	COMDAT ?SetLightPower@@YAXPAUt_Light@@M@Z
_TEXT	SEGMENT
_pLight$ = 8						; size = 4
_power$ = 12						; size = 4
?SetLightPower@@YAXPAUt_Light@@M@Z PROC NEAR		; SetLightPower, COMDAT

; 412  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 413  : 	pLight->power = power;

	mov	eax, DWORD PTR _pLight$[ebp]
	mov	ecx, DWORD PTR _power$[ebp]
	mov	DWORD PTR [eax+24], ecx

; 414  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?SetLightPower@@YAXPAUt_Light@@M@Z ENDP			; SetLightPower
; Function compile flags: /Odt /ZI
_TEXT	ENDS
;	COMDAT ?SetLightStrength@@YAXPAUt_Light@@M@Z
_TEXT	SEGMENT
_pLight$ = 8						; size = 4
_strength$ = 12						; size = 4
?SetLightStrength@@YAXPAUt_Light@@M@Z PROC NEAR		; SetLightStrength, COMDAT

; 417  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 418  : 	pLight->strength = strength;

	mov	eax, DWORD PTR _pLight$[ebp]
	mov	ecx, DWORD PTR _strength$[ebp]
	mov	DWORD PTR [eax+28], ecx

; 419  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?SetLightStrength@@YAXPAUt_Light@@M@Z ENDP		; SetLightStrength
; Function compile flags: /Odt /ZI
_TEXT	ENDS
;	COMDAT ?SetLightRange@@YAXPAUt_Light@@M@Z
_TEXT	SEGMENT
_pLight$ = 8						; size = 4
_range$ = 12						; size = 4
?SetLightRange@@YAXPAUt_Light@@M@Z PROC NEAR		; SetLightRange, COMDAT

; 422  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 423  : 	pLight->range = range;

	mov	eax, DWORD PTR _pLight$[ebp]
	mov	ecx, DWORD PTR _range$[ebp]
	mov	DWORD PTR [eax+32], ecx

; 424  : 	pLight->range2 = MulScalar(range, range);

	fld	DWORD PTR _range$[ebp]
	fmul	DWORD PTR _range$[ebp]
	mov	eax, DWORD PTR _pLight$[ebp]
	fstp	DWORD PTR [eax+36]

; 425  : 	pLight->rangeInv = DivScalar(ONE, range);

	fld	DWORD PTR __real@3f800000
	fdiv	DWORD PTR _range$[ebp]
	mov	eax, DWORD PTR _pLight$[ebp]
	fstp	DWORD PTR [eax+40]

; 426  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?SetLightRange@@YAXPAUt_Light@@M@Z ENDP			; SetLightRange
_TEXT	ENDS
PUBLIC	?__LINE__Var@?1??InitFlag@@YAXPAUt_Flag@@HHMM@Z@4JA ; `InitFlag'::`2'::__LINE__Var
PUBLIC	??_C@_0JA@MGDDACDG@c?3?2documents?5and?5settings?2jarhea@ ; `string'
EXTRN	?DebugMalloc@@YAPAXIHPAD@Z:NEAR			; DebugMalloc
;	COMDAT ??_C@_0JA@MGDDACDG@c?3?2documents?5and?5settings?2jarhea@
CONST	SEGMENT
??_C@_0JA@MGDDACDG@c?3?2documents?5and?5settings?2jarhea@ DB 'c:\document'
	DB	's and settings\jarhead\desktop\shit to display my love for xb'
	DB	'ox revolt and fuck you borman-ness\revolt source\source\title'
	DB	'screen.cpp', 00H				; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??InitFlag@@YAXPAUt_Flag@@HHMM@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??InitFlag@@YAXPAUt_Flag@@HHMM@Z@4JA DD 01b1H ; `InitFlag'::`2'::__LINE__Var
; Function compile flags: /Odt /ZI
_DATA	ENDS
;	COMDAT ?InitFlag@@YAXPAUt_Flag@@HHMM@Z
_TEXT	SEGMENT
tv170 = -100						; size = 4
tv165 = -100						; size = 4
_cY$ = -32						; size = 4
_cX$ = -28						; size = 4
_Dz$ = -24						; size = 4
_Dy$ = -20						; size = 4
_Dx$ = -16						; size = 4
_z$ = -12						; size = 4
_y$ = -8						; size = 4
_x$ = -4						; size = 4
_pFlag$ = 8						; size = 4
_w$ = 12						; size = 4
_h$ = 16						; size = 4
_sX$ = 20						; size = 4
_sY$ = 24						; size = 4
?InitFlag@@YAXPAUt_Flag@@HHMM@Z PROC NEAR		; InitFlag, COMDAT

; 433  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 100				; 00000064H
	push	ebx
	push	esi
	push	edi

; 434  : 	REAL	x, y, z, Dx, Dy, Dz;
; 435  : 	int		cX, cY;
; 436  : 
; 437  : // Setup variables
; 438  : 	pFlag->w = w;

	mov	eax, DWORD PTR _pFlag$[ebp]
	mov	ecx, DWORD PTR _w$[ebp]
	mov	DWORD PTR [eax], ecx

; 439  : 	pFlag->h = h;

	mov	eax, DWORD PTR _pFlag$[ebp]
	mov	ecx, DWORD PTR _h$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 440  : 	pFlag->pPoints = (t_FlagPoint*)malloc(w * h * sizeof(t_FlagPoint));

	push	OFFSET FLAT:??_C@_0JA@MGDDACDG@c?3?2documents?5and?5settings?2jarhea@
	mov	eax, DWORD PTR ?__LINE__Var@?1??InitFlag@@YAXPAUt_Flag@@HHMM@Z@4JA
	add	eax, 7
	push	eax
	mov	ecx, DWORD PTR _w$[ebp]
	imul	ecx, DWORD PTR _h$[ebp]
	imul	ecx, 20					; 00000014H
	push	ecx
	call	?DebugMalloc@@YAPAXIHPAD@Z		; DebugMalloc
	add	esp, 12					; 0000000cH
	mov	edx, DWORD PTR _pFlag$[ebp]
	mov	DWORD PTR [edx+8], eax

; 441  : 
; 442  : // Create points
; 443  : 	Dx = sX;

	mov	eax, DWORD PTR _sX$[ebp]
	mov	DWORD PTR _Dx$[ebp], eax

; 444  : 	Dy = 0;

	mov	DWORD PTR _Dy$[ebp], 0

; 445  : 	Dz = -sY;

	fld	DWORD PTR _sY$[ebp]
	fchs
	fstp	DWORD PTR _Dz$[ebp]

; 446  : 
; 447  : 	y = 0;

	mov	DWORD PTR _y$[ebp], 0

; 448  : 	z = (h >> 1) * -Dz;

	mov	eax, DWORD PTR _h$[ebp]
	sar	eax, 1
	mov	DWORD PTR tv165[ebp], eax
	fild	DWORD PTR tv165[ebp]
	fld	DWORD PTR _Dz$[ebp]
	fchs
	fmulp	ST(1), ST(0)
	fstp	DWORD PTR _z$[ebp]

; 449  : 
; 450  : 	for (cY = 0; cY < h; cY++)

	mov	DWORD PTR _cY$[ebp], 0
	jmp	SHORT $L82309
$L82310:
	mov	eax, DWORD PTR _cY$[ebp]
	add	eax, 1
	mov	DWORD PTR _cY$[ebp], eax
$L82309:
	mov	eax, DWORD PTR _cY$[ebp]
	cmp	eax, DWORD PTR _h$[ebp]
	jge	$L82296

; 451  : 	{
; 452  : 		x = (w >> 1) * -Dx;

	mov	eax, DWORD PTR _w$[ebp]
	sar	eax, 1
	mov	DWORD PTR tv170[ebp], eax
	fild	DWORD PTR tv170[ebp]
	fld	DWORD PTR _Dx$[ebp]
	fchs
	fmulp	ST(1), ST(0)
	fstp	DWORD PTR _x$[ebp]

; 453  : 
; 454  : 		for (cX = 0; cX < w; cX++)

	mov	DWORD PTR _cX$[ebp], 0
	jmp	SHORT $L82312
$L82313:
	mov	eax, DWORD PTR _cX$[ebp]
	add	eax, 1
	mov	DWORD PTR _cX$[ebp], eax
$L82312:
	mov	eax, DWORD PTR _cX$[ebp]
	cmp	eax, DWORD PTR _w$[ebp]
	jge	$L82314

; 455  : 		{
; 456  : 			pFlag->pPoints[cX + (cY * w)].pos.v[0] = x;

	mov	eax, DWORD PTR _cY$[ebp]
	imul	eax, DWORD PTR _w$[ebp]
	add	eax, DWORD PTR _cX$[ebp]
	imul	eax, 20					; 00000014H
	mov	ecx, DWORD PTR _pFlag$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	ecx, DWORD PTR _x$[ebp]
	mov	DWORD PTR [eax+edx], ecx

; 457  : 			pFlag->pPoints[cX + (cY * w)].pos.v[1] = y;

	mov	eax, DWORD PTR _cY$[ebp]
	imul	eax, DWORD PTR _w$[ebp]
	add	eax, DWORD PTR _cX$[ebp]
	imul	eax, 20					; 00000014H
	mov	ecx, DWORD PTR _pFlag$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	ecx, DWORD PTR _y$[ebp]
	mov	DWORD PTR [edx+eax+4], ecx

; 458  : 			pFlag->pPoints[cX + (cY * w)].pos.v[2] = z;

	mov	eax, DWORD PTR _cY$[ebp]
	imul	eax, DWORD PTR _w$[ebp]
	add	eax, DWORD PTR _cX$[ebp]
	imul	eax, 20					; 00000014H
	mov	ecx, DWORD PTR _pFlag$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	ecx, DWORD PTR _z$[ebp]
	mov	DWORD PTR [edx+eax+8], ecx

; 459  : 
; 460  : 			pFlag->pPoints[cX + (cY * w)].u = 0;

	mov	eax, DWORD PTR _cY$[ebp]
	imul	eax, DWORD PTR _w$[ebp]
	add	eax, DWORD PTR _cX$[ebp]
	imul	eax, 20					; 00000014H
	mov	ecx, DWORD PTR _pFlag$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+eax+12], 0

; 461  : 			pFlag->pPoints[cX + (cY * w)].v = 0;

	mov	eax, DWORD PTR _cY$[ebp]
	imul	eax, DWORD PTR _w$[ebp]
	add	eax, DWORD PTR _cX$[ebp]
	imul	eax, 20					; 00000014H
	mov	ecx, DWORD PTR _pFlag$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+eax+16], 0

; 462  : 
; 463  : 			x += Dx;

	fld	DWORD PTR _x$[ebp]
	fadd	DWORD PTR _Dx$[ebp]
	fstp	DWORD PTR _x$[ebp]

; 464  : 		}

	jmp	$L82313
$L82314:

; 465  : 
; 466  : 		z += Dz;

	fld	DWORD PTR _z$[ebp]
	fadd	DWORD PTR _Dz$[ebp]
	fstp	DWORD PTR _z$[ebp]

; 467  : 	}

	jmp	$L82310
$L82296:

; 468  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?InitFlag@@YAXPAUt_Flag@@HHMM@Z ENDP			; InitFlag
_TEXT	ENDS
PUBLIC	?__LINE__Var@?1??ReleaseFlag@@YAXPAUt_Flag@@@Z@4JA ; `ReleaseFlag'::`2'::__LINE__Var
EXTRN	?DebugFree@@YAXPAXHPAD@Z:NEAR			; DebugFree
;	COMDAT ?__LINE__Var@?1??ReleaseFlag@@YAXPAUt_Flag@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??ReleaseFlag@@YAXPAUt_Flag@@@Z@4JA DD 01daH ; `ReleaseFlag'::`2'::__LINE__Var
; Function compile flags: /Odt /ZI
_DATA	ENDS
;	COMDAT ?ReleaseFlag@@YAXPAUt_Flag@@@Z
_TEXT	SEGMENT
_pFlag$ = 8						; size = 4
?ReleaseFlag@@YAXPAUt_Flag@@@Z PROC NEAR		; ReleaseFlag, COMDAT

; 474  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 475  : 	if (pFlag->pPoints)

	mov	eax, DWORD PTR _pFlag$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $L82317

; 476  : 	{
; 477  : 		free(pFlag->pPoints);

	push	OFFSET FLAT:??_C@_0JA@MGDDACDG@c?3?2documents?5and?5settings?2jarhea@
	mov	eax, DWORD PTR ?__LINE__Var@?1??ReleaseFlag@@YAXPAUt_Flag@@@Z@4JA
	add	eax, 3
	push	eax
	mov	ecx, DWORD PTR _pFlag$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	call	?DebugFree@@YAXPAXHPAD@Z		; DebugFree
	add	esp, 12					; 0000000cH

; 478  : 		pFlag->pPoints = NULL;

	mov	eax, DWORD PTR _pFlag$[ebp]
	mov	DWORD PTR [eax+8], 0
$L82317:

; 479  : 	}
; 480  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?ReleaseFlag@@YAXPAUt_Flag@@@Z ENDP			; ReleaseFlag
_TEXT	ENDS
PUBLIC	?RenderFlag@@YAXPAUt_Flag@@@Z			; RenderFlag
PUBLIC	?ts_ApplyLightPull@@YAXPAUt_Light@@PAUVectorStruct@@11@Z ; ts_ApplyLightPull
PUBLIC	__real@40000000
PUBLIC	__real@3eaaaaab
PUBLIC	__real@43a00000
PUBLIC	__real@437f0000
PUBLIC	__real@43000000
EXTRN	?RotTransVector@@YAXPATMatrixUnion@@PAUVectorStruct@@11@Z:NEAR ; RotTransVector
EXTRN	?RotTransPersVector@@YAXPATMatrixUnion@@PAUVectorStruct@@1PAM@Z:NEAR ; RotTransPersVector
EXTRN	?ViewMatrixScaled@@3TMatrixUnion@@A:BYTE	; ViewMatrixScaled
EXTRN	?ViewTransScaled@@3UVectorStruct@@A:BYTE	; ViewTransScaled
EXTRN	?RenderStateChange@@3JA:DWORD			; RenderStateChange
EXTRN	?TextureStateChange@@3JA:DWORD			; TextureStateChange
EXTRN	?RenderTP@@3FA:WORD				; RenderTP
EXTRN	?RenderZcmp@@3FA:WORD				; RenderZcmp
EXTRN	?RenderZwrite@@3FA:WORD				; RenderZwrite
EXTRN	?RenderZbuffer@@3FA:WORD			; RenderZbuffer
EXTRN	__ftol2:NEAR
EXTRN	__chkstk:NEAR
EXTRN	?TexInfo@@3PAUTEXINFO@@A:DWORD			; TexInfo
EXTRN	?DrawTriClip@@YAXPAUVERTEX_TEX1@@00@Z:NEAR	; DrawTriClip
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
CONST	ENDS
;	COMDAT __real@3eaaaaab
CONST	SEGMENT
__real@3eaaaaab DD 03eaaaaabr			; 0.333333
CONST	ENDS
;	COMDAT __real@43a00000
CONST	SEGMENT
__real@43a00000 DD 043a00000r			; 320
CONST	ENDS
;	COMDAT __real@437f0000
CONST	SEGMENT
__real@437f0000 DD 0437f0000r			; 255
CONST	ENDS
;	COMDAT __real@43000000
CONST	SEGMENT
__real@43000000 DD 043000000r			; 128
; Function compile flags: /Odt /ZI
CONST	ENDS
;	COMDAT ?RenderFlag@@YAXPAUt_Flag@@@Z
_TEXT	SEGMENT
_rgb$82368 = -262288					; size = 12
_lightPullVec$82363 = -262276				; size = 36
_tempPos2$ = -262240					; size = 12
_tempPos$ = -262228					; size = 12
_viewPos$ = -262216					; size = 12
_viewMatrix$ = -262204					; size = 36
_i$ = -262168						; size = 4
_cL$ = -262164						; size = 4
_cY$ = -262160						; size = 4
_cX$ = -262156						; size = 4
_pSV$ = -262152						; size = 4
_pDV$ = -262148						; size = 4
_v$ = -262144						; size = 262144
_pFlag$ = 8						; size = 4
?RenderFlag@@YAXPAUt_Flag@@@Z PROC NEAR			; RenderFlag, COMDAT

; 487  : {

	push	ebp
	mov	ebp, esp
	mov	eax, 262352				; 000400d0H
	call	__chkstk
	push	ebx
	push	esi
	push	edi

; 488  : 	VERTEX_TEX1	v[64*64*2];
; 489  : 	VERTEX_TEX1 *pDV;
; 490  : 	t_FlagPoint	*pSV;
; 491  : 	int			cX, cY;
; 492  : 	int			cL;
; 493  : 	int			i;
; 494  : 	static		rX = 25;
; 495  : 	static		rY = 45;
; 496  : 	static		rZ = 0;
; 497  : 
; 498  : //	SetCameraView(&Camera[CameraCount].WMatrix, &Camera[CameraCount].WPos, Camera[CameraCount].Shake);
; 499  : //	SetCameraVisiMask(&Camera[CameraCount].WPos);
; 500  : 
; 501  : 	ZBUFFER_ON();

	movsx	eax, WORD PTR ?RenderZbuffer@@3FA	; RenderZbuffer
	cmp	eax, 1
	je	SHORT $L82336
	mov	WORD PTR ?RenderZbuffer@@3FA, 1		; RenderZbuffer
	movsx	eax, WORD PTR ?RenderZbuffer@@3FA	; RenderZbuffer
	push	eax
	push	7
	mov	ecx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	eax
	call	DWORD PTR [edx+88]
	mov	eax, DWORD PTR ?RenderStateChange@@3JA	; RenderStateChange
	add	eax, 1
	mov	DWORD PTR ?RenderStateChange@@3JA, eax	; RenderStateChange
$L82336:

; 502  : 	ZWRITE_ON();

	movsx	eax, WORD PTR ?RenderZwrite@@3FA	; RenderZwrite
	test	eax, eax
	jne	SHORT $L82337
	mov	WORD PTR ?RenderZwrite@@3FA, 1		; RenderZwrite
	movsx	eax, WORD PTR ?RenderZwrite@@3FA	; RenderZwrite
	push	eax
	push	14					; 0000000eH
	mov	ecx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	eax
	call	DWORD PTR [edx+88]
	mov	eax, DWORD PTR ?RenderStateChange@@3JA	; RenderStateChange
	add	eax, 1
	mov	DWORD PTR ?RenderStateChange@@3JA, eax	; RenderStateChange
$L82337:

; 503  : 	ZCMP(D3DCMP_LESSEQUAL);

	movsx	eax, WORD PTR ?RenderZcmp@@3FA		; RenderZcmp
	cmp	eax, 4
	je	SHORT $L82338
	mov	WORD PTR ?RenderZcmp@@3FA, 4		; RenderZcmp
	movsx	eax, WORD PTR ?RenderZcmp@@3FA		; RenderZcmp
	push	eax
	push	23					; 00000017H
	mov	ecx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	eax
	call	DWORD PTR [edx+88]
	mov	eax, DWORD PTR ?RenderStateChange@@3JA	; RenderStateChange
	add	eax, 1
	mov	DWORD PTR ?RenderStateChange@@3JA, eax	; RenderStateChange
$L82338:

; 504  : //	FOG_ON();
; 505  : //	WIREFRAME_ON();
; 506  : 	CULL_OFF();

	push	1
	push	22					; 00000016H
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	edx
	call	DWORD PTR [ecx+88]
	mov	eax, DWORD PTR ?RenderStateChange@@3JA	; RenderStateChange
	add	eax, 1
	mov	DWORD PTR ?RenderStateChange@@3JA, eax	; RenderStateChange

; 507  : 
; 508  : 	MAT	viewMatrix;
; 509  : 	VEC viewPos;
; 510  : 	VEC tempPos;
; 511  : 	VEC tempPos2;
; 512  : 
; 513  : 	tempPos.v[0] = 0;

	mov	DWORD PTR _tempPos$[ebp], 0

; 514  : 	tempPos.v[1] = -150;

	mov	DWORD PTR _tempPos$[ebp+4], -1021968384	; c3160000H

; 515  : 	tempPos.v[2] = -750;

	mov	DWORD PTR _tempPos$[ebp+8], -1002733568	; c43b8000H

; 516  : 
; 517  : 	tempPos2.v[0] = 0;

	mov	DWORD PTR _tempPos2$[ebp], 0

; 518  : 	tempPos2.v[1] = 0;

	mov	DWORD PTR _tempPos2$[ebp+4], 0

; 519  : 	tempPos2.v[2] = 0;

	mov	DWORD PTR _tempPos2$[ebp+8], 0

; 520  : 
; 521  : //		if (Keys[DIK_UP] && !LastKeys[DIK_UP])
; 522  : 		if (Keys[DIK_NUMPAD8])

	movsx	eax, BYTE PTR ?Keys@@3PADA+72
	test	eax, eax
	je	SHORT $L82343

; 523  : 			rX -= 10;

	mov	eax, DWORD PTR ?rX@?1??RenderFlag@@YAXPAUt_Flag@@@Z@4HA
	sub	eax, 10					; 0000000aH
	mov	DWORD PTR ?rX@?1??RenderFlag@@YAXPAUt_Flag@@@Z@4HA, eax
$L82343:

; 524  : 		if (Keys[DIK_NUMPAD2])

	movsx	eax, BYTE PTR ?Keys@@3PADA+80
	test	eax, eax
	je	SHORT $L82344

; 525  : 			rX += 10;

	mov	eax, DWORD PTR ?rX@?1??RenderFlag@@YAXPAUt_Flag@@@Z@4HA
	add	eax, 10					; 0000000aH
	mov	DWORD PTR ?rX@?1??RenderFlag@@YAXPAUt_Flag@@@Z@4HA, eax
$L82344:

; 526  : 		if (Keys[DIK_NUMPAD4])

	movsx	eax, BYTE PTR ?Keys@@3PADA+75
	test	eax, eax
	je	SHORT $L82345

; 527  : 			rY -= 10;

	mov	eax, DWORD PTR ?rY@?1??RenderFlag@@YAXPAUt_Flag@@@Z@4HA
	sub	eax, 10					; 0000000aH
	mov	DWORD PTR ?rY@?1??RenderFlag@@YAXPAUt_Flag@@@Z@4HA, eax
$L82345:

; 528  : 		if (Keys[DIK_NUMPAD6])

	movsx	eax, BYTE PTR ?Keys@@3PADA+77
	test	eax, eax
	je	SHORT $L82346

; 529  : 			rY += 10;

	mov	eax, DWORD PTR ?rY@?1??RenderFlag@@YAXPAUt_Flag@@@Z@4HA
	add	eax, 10					; 0000000aH
	mov	DWORD PTR ?rY@?1??RenderFlag@@YAXPAUt_Flag@@@Z@4HA, eax
$L82346:

; 530  : 
; 531  : //		if (Keys[DIK_NUMPADMINUS])
; 532  : 		if (Keys[DIK_COMMA])

	movsx	eax, BYTE PTR ?Keys@@3PADA+51
	test	eax, eax
	je	SHORT $L82347

; 533  : 			gLight[0].strength -= 2;

	fld	DWORD PTR ?gLight@@3PAUt_Light@@A+28
	fsub	DWORD PTR __real@40000000
	fstp	DWORD PTR ?gLight@@3PAUt_Light@@A+28
$L82347:

; 534  : //		if (Keys[DIK_NUMPADMINUS])
; 535  : 		if (Keys[DIK_PERIOD])

	movsx	eax, BYTE PTR ?Keys@@3PADA+52
	test	eax, eax
	je	SHORT $L82348

; 536  : 			gLight[0].strength += 2;

	fld	DWORD PTR ?gLight@@3PAUt_Light@@A+28
	fadd	DWORD PTR __real@40000000
	fstp	DWORD PTR ?gLight@@3PAUt_Light@@A+28
$L82348:

; 537  : 
; 538  : 		if (Keys[DIK_LBRACKET])

	movsx	eax, BYTE PTR ?Keys@@3PADA+26
	test	eax, eax
	je	SHORT $L82349

; 539  : 			gLight[0].power -= 1;

	fld	DWORD PTR ?gLight@@3PAUt_Light@@A+24
	fsub	DWORD PTR __real@3f800000
	fstp	DWORD PTR ?gLight@@3PAUt_Light@@A+24
$L82349:

; 540  : 		if (Keys[DIK_RBRACKET])

	movsx	eax, BYTE PTR ?Keys@@3PADA+27
	test	eax, eax
	je	SHORT $L82350

; 541  : 			gLight[0].power += 1;

	fld	DWORD PTR ?gLight@@3PAUt_Light@@A+24
	fadd	DWORD PTR __real@3f800000
	fstp	DWORD PTR ?gLight@@3PAUt_Light@@A+24
$L82350:

; 542  : 		if (gLight[0].power < 1)

	fld	DWORD PTR ?gLight@@3PAUt_Light@@A+24
	fcomp	DWORD PTR __real@3f800000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L82351

; 543  : 			gLight[0].power = 1;

	mov	DWORD PTR ?gLight@@3PAUt_Light@@A+24, 1065353216 ; 3f800000H
$L82351:

; 544  : 
; 545  : 	RotMatrixZYX(&viewMatrix, (REAL)rX/360,(REAL)rY/360,(REAL)rZ/360);

	fild	DWORD PTR ?rZ@?1??RenderFlag@@YAXPAUt_Flag@@@Z@4HA
	fdiv	DWORD PTR __real@43b40000
	push	ecx
	fstp	DWORD PTR [esp]
	fild	DWORD PTR ?rY@?1??RenderFlag@@YAXPAUt_Flag@@@Z@4HA
	fdiv	DWORD PTR __real@43b40000
	push	ecx
	fstp	DWORD PTR [esp]
	fild	DWORD PTR ?rX@?1??RenderFlag@@YAXPAUt_Flag@@@Z@4HA
	fdiv	DWORD PTR __real@43b40000
	push	ecx
	fstp	DWORD PTR [esp]
	lea	eax, DWORD PTR _viewMatrix$[ebp]
	push	eax
	call	?RotMatrixZYX@@YAXPATMatrixUnion@@MMM@Z	; RotMatrixZYX
	add	esp, 16					; 00000010H

; 546  : 	RotTransVector(&viewMatrix, &tempPos2, &tempPos, &viewPos);

	lea	eax, DWORD PTR _viewPos$[ebp]
	push	eax
	lea	ecx, DWORD PTR _tempPos$[ebp]
	push	ecx
	lea	edx, DWORD PTR _tempPos2$[ebp]
	push	edx
	lea	eax, DWORD PTR _viewMatrix$[ebp]
	push	eax
	call	?RotTransVector@@YAXPATMatrixUnion@@PAUVectorStruct@@11@Z ; RotTransVector
	add	esp, 16					; 00000010H

; 547  : 	SetCameraView(&viewMatrix, &viewPos, 0);

	push	0
	lea	eax, DWORD PTR _viewPos$[ebp]
	push	eax
	lea	ecx, DWORD PTR _viewMatrix$[ebp]
	push	ecx
	call	?SetCameraView@@YAXPATMatrixUnion@@PAUVectorStruct@@M@Z ; SetCameraView
	add	esp, 12					; 0000000cH

; 548  : 
; 549  : 
; 550  : // Transform vertices
; 551  : 	pSV = pFlag->pPoints;

	mov	eax, DWORD PTR _pFlag$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _pSV$[ebp], ecx

; 552  : 	pDV = v;

	lea	eax, DWORD PTR _v$[ebp]
	mov	DWORD PTR _pDV$[ebp], eax

; 553  : 	for (cY = 0; cY < pFlag->h; cY++)

	mov	DWORD PTR _cY$[ebp], 0
	jmp	SHORT $L82355
$L82356:
	mov	eax, DWORD PTR _cY$[ebp]
	add	eax, 1
	mov	DWORD PTR _cY$[ebp], eax
$L82355:
	mov	eax, DWORD PTR _pFlag$[ebp]
	mov	ecx, DWORD PTR _cY$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jge	$L82357

; 554  : 	{
; 555  : 		for (cX = 0; cX < pFlag->w; cX++)

	mov	DWORD PTR _cX$[ebp], 0
	jmp	SHORT $L82358
$L82359:
	mov	eax, DWORD PTR _cX$[ebp]
	add	eax, 1
	mov	DWORD PTR _cX$[ebp], eax
$L82358:
	mov	eax, DWORD PTR _pFlag$[ebp]
	mov	ecx, DWORD PTR _cX$[ebp]
	cmp	ecx, DWORD PTR [eax]
	jge	$L82360

; 556  : 		{
; 557  : 			static VEC normal = {0,-1,0};
; 558  : 			VEC	lightPullVec[MENU_LIGHT_MAX];
; 559  : 
; 560  : 			tempPos.v[0] = 0;

	mov	DWORD PTR _tempPos$[ebp], 0

; 561  : 			tempPos.v[1] = 0;

	mov	DWORD PTR _tempPos$[ebp+4], 0

; 562  : 			tempPos.v[2] = 0;

	mov	DWORD PTR _tempPos$[ebp+8], 0

; 563  : 			for (cL = 0; cL < MENU_LIGHT_MAX; cL++)

	mov	DWORD PTR _cL$[ebp], 0
	jmp	SHORT $L82364
$L82365:
	mov	eax, DWORD PTR _cL$[ebp]
	add	eax, 1
	mov	DWORD PTR _cL$[ebp], eax
$L82364:
	cmp	DWORD PTR _cL$[ebp], 3
	jge	$L82366

; 564  : 			{
; 565  : 				ts_ApplyLightPull(&gLight[cL], &normal, &pSV->pos, &lightPullVec[cL]);

	mov	eax, DWORD PTR _cL$[ebp]
	imul	eax, 12					; 0000000cH
	lea	ecx, DWORD PTR _lightPullVec$82363[ebp+eax]
	push	ecx
	mov	edx, DWORD PTR _pSV$[ebp]
	push	edx
	push	OFFSET FLAT:?normal@?CF@??RenderFlag@@YAXPAUt_Flag@@@Z@4UVectorStruct@@A
	mov	eax, DWORD PTR _cL$[ebp]
	imul	eax, 44					; 0000002cH
	add	eax, OFFSET FLAT:?gLight@@3PAUt_Light@@A ; gLight
	push	eax
	call	?ts_ApplyLightPull@@YAXPAUt_Light@@PAUVectorStruct@@11@Z ; ts_ApplyLightPull
	add	esp, 16					; 00000010H

; 566  : 				VecPlusEqVec(&tempPos, &lightPullVec[cL]);

	mov	eax, DWORD PTR _cL$[ebp]
	imul	eax, 12					; 0000000cH
	fld	DWORD PTR _tempPos$[ebp]
	fadd	DWORD PTR _lightPullVec$82363[ebp+eax]
	fstp	DWORD PTR _tempPos$[ebp]
	mov	eax, DWORD PTR _cL$[ebp]
	imul	eax, 12					; 0000000cH
	fld	DWORD PTR _tempPos$[ebp+4]
	fadd	DWORD PTR _lightPullVec$82363[ebp+eax+4]
	fstp	DWORD PTR _tempPos$[ebp+4]
	mov	eax, DWORD PTR _cL$[ebp]
	imul	eax, 12					; 0000000cH
	fld	DWORD PTR _tempPos$[ebp+8]
	fadd	DWORD PTR _lightPullVec$82363[ebp+eax+8]
	fstp	DWORD PTR _tempPos$[ebp+8]

; 567  : 			}

	jmp	$L82365
$L82366:

; 568  : 
; 569  : 			tempPos.v[0] = MulScalar(tempPos.v[0], ONE/MENU_LIGHT_MAX);

	fld	DWORD PTR _tempPos$[ebp]
	fmul	DWORD PTR __real@3eaaaaab
	fstp	DWORD PTR _tempPos$[ebp]

; 570  : 			tempPos.v[1] = MulScalar(tempPos.v[1], ONE/MENU_LIGHT_MAX);

	fld	DWORD PTR _tempPos$[ebp+4]
	fmul	DWORD PTR __real@3eaaaaab
	fstp	DWORD PTR _tempPos$[ebp+4]

; 571  : 			tempPos.v[2] = MulScalar(tempPos.v[2], ONE/MENU_LIGHT_MAX);

	fld	DWORD PTR _tempPos$[ebp+8]
	fmul	DWORD PTR __real@3eaaaaab
	fstp	DWORD PTR _tempPos$[ebp+8]

; 572  : 
; 573  : 			RotTransPersVector(&ViewMatrixScaled, &ViewTransScaled, &tempPos, (float*)&pDV->sx);			

	mov	eax, DWORD PTR _pDV$[ebp]
	push	eax
	lea	ecx, DWORD PTR _tempPos$[ebp]
	push	ecx
	push	OFFSET FLAT:?ViewTransScaled@@3UVectorStruct@@A ; ViewTransScaled
	push	OFFSET FLAT:?ViewMatrixScaled@@3TMatrixUnion@@A ; ViewMatrixScaled
	call	?RotTransPersVector@@YAXPATMatrixUnion@@PAUVectorStruct@@1PAM@Z ; RotTransPersVector
	add	esp, 16					; 00000010H

; 574  : 
; 575  : //			RotTransPersVector(&ViewMatrixScaled, &ViewTransScaled, &pSV->pos, (float*)&pDV->sx);			
; 576  : 
; 577  : 			pDV->tu			= pSV->u;

	mov	eax, DWORD PTR _pDV$[ebp]
	mov	ecx, DWORD PTR _pSV$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+24], edx

; 578  : 			pDV->tv			= pSV->v;

	mov	eax, DWORD PTR _pDV$[ebp]
	mov	ecx, DWORD PTR _pSV$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+28], edx

; 579  : 			pDV->color		= 0xFFFFFF;

	mov	eax, DWORD PTR _pDV$[ebp]
	mov	DWORD PTR [eax+16], 16777215		; 00ffffffH

; 580  : 			pDV->specular	= 0x000000;

	mov	eax, DWORD PTR _pDV$[ebp]
	mov	DWORD PTR [eax+20], 0

; 581  : 
; 582  : 	#if 1
; 583  : #if 1
; 584  : /*
; 585  : 			int r,g,b;
; 586  : 			if (normal.v[0] > 0)	r = (int)(normal.v[0] * 255);
; 587  : 			else					r = 0;
; 588  : 			if (normal.v[1] > 0)	g = (int)(normal.v[1] * 255);
; 589  : 			else					g = 0;
; 590  : 			if (normal.v[2] > 0)	b = (int)(normal.v[2] * 255);
; 591  : 			else					b = 0;
; 592  : 				g = b = 0;
; 593  : 			pDV->color		= r | (g << 8) | (b << 16);
; 594  : */
; 595  : 			int	rgb[3];
; 596  : 			for (i = 0; i < 3; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $L82369
$L82370:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$L82369:
	cmp	DWORD PTR _i$[ebp], 3
	jge	SHORT $L82371

; 597  : 			{
; 598  : //				rgb[i] = (int)((((tempPos.v[i] - viewPos.v[i]) / 320) * 255) + 128);
; 599  : 				rgb[i] = (int)((((tempPos.v[i]) / 320) * 255) + 128);

	mov	eax, DWORD PTR _i$[ebp]
	fld	DWORD PTR _tempPos$[ebp+eax*4]
	fdiv	DWORD PTR __real@43a00000
	fmul	DWORD PTR __real@437f0000
	fadd	DWORD PTR __real@43000000
	call	__ftol2
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR _rgb$82368[ebp+ecx*4], eax

; 600  : 
; 601  : 				if (rgb[i] < 0)		rgb[i] = 0;

	mov	eax, DWORD PTR _i$[ebp]
	cmp	DWORD PTR _rgb$82368[ebp+eax*4], 0
	jge	SHORT $L82373
	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR _rgb$82368[ebp+eax*4], 0
$L82373:

; 602  : 				if (rgb[i] > 255)	rgb[i] = 255;

	mov	eax, DWORD PTR _i$[ebp]
	cmp	DWORD PTR _rgb$82368[ebp+eax*4], 255	; 000000ffH
	jle	SHORT $L82374
	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR _rgb$82368[ebp+eax*4], 255	; 000000ffH
$L82374:

; 603  : 			}

	jmp	$L82370
$L82371:

; 604  : 
; 605  : 				//rgb[0] = rgb[1] = rgb[2];
; 606  : 
; 607  : 			pDV->color = rgb[0] | (rgb[1] << 8) | (rgb[2] << 16);

	mov	eax, DWORD PTR _rgb$82368[ebp+4]
	shl	eax, 8
	or	eax, DWORD PTR _rgb$82368[ebp]
	mov	ecx, DWORD PTR _rgb$82368[ebp+8]
	shl	ecx, 16					; 00000010H
	or	eax, ecx
	mov	edx, DWORD PTR _pDV$[ebp]
	mov	DWORD PTR [edx+16], eax

; 608  : #else
; 609  : 			int f = (cX & 1) + ((cY & 1) << 1);
; 610  : 			switch (f)
; 611  : 			{
; 612  : 				case 0:
; 613  : 					pDV->color = 0x000000;
; 614  : 					break;
; 615  : 				case 1:
; 616  : 					pDV->color = 0x0000FF;
; 617  : 					break;
; 618  : 				case 2:
; 619  : 					pDV->color = 0x00FF00;
; 620  : 					break;
; 621  : 				case 3:
; 622  : 					pDV->color = 0xFF0000;
; 623  : 					break;
; 624  : 			}
; 625  : #endif
; 626  : 	#endif
; 627  : 
; 628  : 			pSV++;

	mov	eax, DWORD PTR _pSV$[ebp]
	add	eax, 20					; 00000014H
	mov	DWORD PTR _pSV$[ebp], eax

; 629  : 			pDV++;

	mov	eax, DWORD PTR _pDV$[ebp]
	add	eax, 32					; 00000020H
	mov	DWORD PTR _pDV$[ebp], eax

; 630  : 		}

	jmp	$L82359
$L82360:

; 631  : 	}

	jmp	$L82356
$L82357:

; 632  : 
; 633  : 
; 634  : // Render tris
; 635  : 	SET_TPAGE(-1);

	movsx	eax, WORD PTR ?RenderTP@@3FA		; RenderTP
	cmp	eax, -1
	je	SHORT $L82375
	mov	WORD PTR ?RenderTP@@3FA, -1		; RenderTP
	movsx	eax, WORD PTR ?RenderTP@@3FA		; RenderTP
	cmp	eax, -1
	jne	SHORT $L82376
	push	0
	push	0
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	edx
	call	DWORD PTR [ecx+152]
	mov	eax, DWORD PTR ?TextureStateChange@@3JA	; TextureStateChange
	add	eax, 1
	mov	DWORD PTR ?TextureStateChange@@3JA, eax	; TextureStateChange
	jmp	SHORT $L82375
$L82376:
	movsx	eax, WORD PTR ?RenderTP@@3FA		; RenderTP
	shl	eax, 6
	mov	ecx, DWORD PTR ?TexInfo@@3PAUTEXINFO@@A	; TexInfo
	mov	edx, DWORD PTR [ecx+eax+52]
	push	edx
	push	0
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	edx
	call	DWORD PTR [ecx+152]
	mov	eax, DWORD PTR ?TextureStateChange@@3JA	; TextureStateChange
	add	eax, 1
	mov	DWORD PTR ?TextureStateChange@@3JA, eax	; TextureStateChange
$L82375:

; 636  : 
; 637  : 	pDV = v;

	lea	eax, DWORD PTR _v$[ebp]
	mov	DWORD PTR _pDV$[ebp], eax

; 638  : 	for (cY = 0; cY < pFlag->h-1; cY++)

	mov	DWORD PTR _cY$[ebp], 0
	jmp	SHORT $L82378
$L82379:
	mov	eax, DWORD PTR _cY$[ebp]
	add	eax, 1
	mov	DWORD PTR _cY$[ebp], eax
$L82378:
	mov	eax, DWORD PTR _pFlag$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, 1
	cmp	DWORD PTR _cY$[ebp], ecx
	jge	$L82322

; 639  : 	{
; 640  : 		for (cX = 0; cX < pFlag->w-1; cX++)

	mov	DWORD PTR _cX$[ebp], 0
	jmp	SHORT $L82381
$L82382:
	mov	eax, DWORD PTR _cX$[ebp]
	add	eax, 1
	mov	DWORD PTR _cX$[ebp], eax
$L82381:
	mov	eax, DWORD PTR _pFlag$[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, 1
	cmp	DWORD PTR _cX$[ebp], ecx
	jge	SHORT $L82383

; 641  : 		{
; 642  : 			DrawTriClip(&pDV[0], &pDV[1], &pDV[pFlag->w+1]);

	mov	eax, DWORD PTR _pFlag$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	shl	ecx, 5
	add	ecx, DWORD PTR _pDV$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pDV$[ebp]
	add	edx, 32					; 00000020H
	push	edx
	mov	eax, DWORD PTR _pDV$[ebp]
	push	eax
	call	?DrawTriClip@@YAXPAUVERTEX_TEX1@@00@Z	; DrawTriClip
	add	esp, 12					; 0000000cH

; 643  : 			DrawTriClip(&pDV[0], &pDV[pFlag->w+1], &pDV[pFlag->w]);

	mov	eax, DWORD PTR _pFlag$[ebp]
	mov	ecx, DWORD PTR [eax]
	shl	ecx, 5
	add	ecx, DWORD PTR _pDV$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pFlag$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 1
	shl	eax, 5
	add	eax, DWORD PTR _pDV$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pDV$[ebp]
	push	ecx
	call	?DrawTriClip@@YAXPAUVERTEX_TEX1@@00@Z	; DrawTriClip
	add	esp, 12					; 0000000cH

; 644  : 			pDV++;

	mov	eax, DWORD PTR _pDV$[ebp]
	add	eax, 32					; 00000020H
	mov	DWORD PTR _pDV$[ebp], eax

; 645  : 		}

	jmp	$L82382
$L82383:

; 646  : 
; 647  : 		pDV++;

	mov	eax, DWORD PTR _pDV$[ebp]
	add	eax, 32					; 00000020H
	mov	DWORD PTR _pDV$[ebp], eax

; 648  : 	}

	jmp	$L82379
$L82322:

; 649  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?RenderFlag@@YAXPAUt_Flag@@@Z ENDP			; RenderFlag
_TEXT	ENDS
PUBLIC	?ts_Power@@YAMMM@Z				; ts_Power
; Function compile flags: /Odt /ZI
;	COMDAT ?ts_ApplyLightPull@@YAXPAUt_Light@@PAUVectorStruct@@11@Z
_TEXT	SEGMENT
_strength$ = -28					; size = 4
_lInv$ = -24						; size = 4
_l$ = -20						; size = 4
_delta$ = -16						; size = 12
_dotP$ = -4						; size = 4
_pLight$ = 8						; size = 4
_pN$ = 12						; size = 4
_pS$ = 16						; size = 4
_pE$ = 20						; size = 4
?ts_ApplyLightPull@@YAXPAUt_Light@@PAUVectorStruct@@11@Z PROC NEAR ; ts_ApplyLightPull, COMDAT

; 656  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 92					; 0000005cH
	push	ebx
	push	esi
	push	edi

; 657  : 	REAL	dotP;
; 658  : 	VEC		delta;
; 659  : 	REAL	l, lInv;
; 660  : 	REAL	strength;
; 661  : 
; 662  : 	delta.v[0] = pS->v[0] - pLight->pos.v[0];

	mov	eax, DWORD PTR _pS$[ebp]
	mov	ecx, DWORD PTR _pLight$[ebp]
	fld	DWORD PTR [eax]
	fsub	DWORD PTR [ecx]
	fstp	DWORD PTR _delta$[ebp]

; 663  : 	delta.v[1] = pS->v[1] - pLight->pos.v[1];

	mov	eax, DWORD PTR _pS$[ebp]
	mov	ecx, DWORD PTR _pLight$[ebp]
	fld	DWORD PTR [eax+4]
	fsub	DWORD PTR [ecx+4]
	fstp	DWORD PTR _delta$[ebp+4]

; 664  : 	delta.v[2] = pS->v[2] - pLight->pos.v[2];

	mov	eax, DWORD PTR _pS$[ebp]
	mov	ecx, DWORD PTR _pLight$[ebp]
	fld	DWORD PTR [eax+8]
	fsub	DWORD PTR [ecx+8]
	fstp	DWORD PTR _delta$[ebp+8]

; 665  : 	l = MulScalar(delta.v[0], delta.v[0]) +
; 666  : 		MulScalar(delta.v[1], delta.v[1]) +
; 667  : 		MulScalar(delta.v[2], delta.v[2]);

	fld	DWORD PTR _delta$[ebp]
	fmul	DWORD PTR _delta$[ebp]
	fld	DWORD PTR _delta$[ebp+4]
	fmul	DWORD PTR _delta$[ebp+4]
	faddp	ST(1), ST(0)
	fld	DWORD PTR _delta$[ebp+8]
	fmul	DWORD PTR _delta$[ebp+8]
	faddp	ST(1), ST(0)
	fstp	DWORD PTR _l$[ebp]

; 668  : 
; 669  : 	if (l >= pLight->range2)

	mov	eax, DWORD PTR _pLight$[ebp]
	fld	DWORD PTR _l$[ebp]
	fcomp	DWORD PTR [eax+36]
	fnstsw	ax
	test	ah, 1
	jne	SHORT $L82395

; 670  : 	{
; 671  : 		pE->v[0] = pS->v[0];

	mov	eax, DWORD PTR _pE$[ebp]
	mov	ecx, DWORD PTR _pS$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 672  : 		pE->v[1] = pS->v[1];

	mov	eax, DWORD PTR _pE$[ebp]
	mov	ecx, DWORD PTR _pS$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx

; 673  : 		pE->v[2] = pS->v[2];

	mov	eax, DWORD PTR _pE$[ebp]
	mov	ecx, DWORD PTR _pS$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx

; 674  : 		return;

	jmp	$L82389
$L82395:

; 675  : 	}
; 676  : 
; 677  : 	l = (REAL)sqrt(l);

	mov	eax, DWORD PTR _l$[ebp]
	push	eax
	call	?sqrt@@YAMM@Z				; sqrt
	add	esp, 4
	fstp	DWORD PTR _l$[ebp]

; 678  : 	lInv = ONE / l;

	fld	DWORD PTR __real@3f800000
	fdiv	DWORD PTR _l$[ebp]
	fstp	DWORD PTR _lInv$[ebp]

; 679  : 	delta.v[0] = MulScalar(delta.v[0], lInv);

	fld	DWORD PTR _delta$[ebp]
	fmul	DWORD PTR _lInv$[ebp]
	fstp	DWORD PTR _delta$[ebp]

; 680  : 	delta.v[1] = MulScalar(delta.v[1], lInv);

	fld	DWORD PTR _delta$[ebp+4]
	fmul	DWORD PTR _lInv$[ebp]
	fstp	DWORD PTR _delta$[ebp+4]

; 681  : 	delta.v[2] = MulScalar(delta.v[2], lInv);

	fld	DWORD PTR _delta$[ebp+8]
	fmul	DWORD PTR _lInv$[ebp]
	fstp	DWORD PTR _delta$[ebp+8]

; 682  : 
; 683  : 	dotP = MulScalar(pLight->dir.v[0], delta.v[0]) +
; 684  : 		   MulScalar(pLight->dir.v[1], delta.v[1]) +
; 685  : 		   MulScalar(pLight->dir.v[2], delta.v[2]);

	mov	eax, DWORD PTR _pLight$[ebp]
	fld	DWORD PTR [eax+12]
	fmul	DWORD PTR _delta$[ebp]
	mov	ecx, DWORD PTR _pLight$[ebp]
	fld	DWORD PTR [ecx+16]
	fmul	DWORD PTR _delta$[ebp+4]
	faddp	ST(1), ST(0)
	mov	edx, DWORD PTR _pLight$[ebp]
	fld	DWORD PTR [edx+20]
	fmul	DWORD PTR _delta$[ebp+8]
	faddp	ST(1), ST(0)
	fstp	DWORD PTR _dotP$[ebp]

; 686  : 
; 687  : 	if (dotP > 0)

	fld	DWORD PTR _dotP$[ebp]
	fcomp	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $L82397

; 688  : 	{
; 689  : 		strength = MulScalar(pLight->strength, ONE - MulScalar(l, pLight->rangeInv));

	mov	eax, DWORD PTR _pLight$[ebp]
	fld	DWORD PTR [eax+28]
	mov	ecx, DWORD PTR _pLight$[ebp]
	fld	DWORD PTR [ecx+40]
	fmul	DWORD PTR _l$[ebp]
	fsubr	DWORD PTR __real@3f800000
	fmulp	ST(1), ST(0)
	fstp	DWORD PTR _strength$[ebp]

; 690  : 		dotP = ts_Power(dotP, pLight->power);

	mov	eax, DWORD PTR _pLight$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	mov	edx, DWORD PTR _dotP$[ebp]
	push	edx
	call	?ts_Power@@YAMMM@Z			; ts_Power
	add	esp, 8
	fstp	DWORD PTR _dotP$[ebp]

; 691  : 		dotP = MulScalar(dotP, strength);

	fld	DWORD PTR _dotP$[ebp]
	fmul	DWORD PTR _strength$[ebp]
	fstp	DWORD PTR _dotP$[ebp]

; 692  : 
; 693  : 		pE->v[0] = pS->v[0] - MulScalar(dotP, pLight->dir.v[0]);

	mov	eax, DWORD PTR _pLight$[ebp]
	fld	DWORD PTR [eax+12]
	fmul	DWORD PTR _dotP$[ebp]
	mov	ecx, DWORD PTR _pS$[ebp]
	fsubr	DWORD PTR [ecx]
	mov	edx, DWORD PTR _pE$[ebp]
	fstp	DWORD PTR [edx]

; 694  : 		pE->v[1] = pS->v[1] - MulScalar(dotP, pLight->dir.v[1]);

	mov	eax, DWORD PTR _pLight$[ebp]
	fld	DWORD PTR [eax+16]
	fmul	DWORD PTR _dotP$[ebp]
	mov	ecx, DWORD PTR _pS$[ebp]
	fsubr	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _pE$[ebp]
	fstp	DWORD PTR [edx+4]

; 695  : 		pE->v[2] = pS->v[2] - MulScalar(dotP, pLight->dir.v[2]);

	mov	eax, DWORD PTR _pLight$[ebp]
	fld	DWORD PTR [eax+20]
	fmul	DWORD PTR _dotP$[ebp]
	mov	ecx, DWORD PTR _pS$[ebp]
	fsubr	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _pE$[ebp]
	fstp	DWORD PTR [edx+8]

; 696  : 	}
; 697  : 	else

	jmp	SHORT $L82398
$L82397:

; 698  : 	{
; 699  : 		pE->v[0] = pS->v[0];

	mov	eax, DWORD PTR _pE$[ebp]
	mov	ecx, DWORD PTR _pS$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 700  : 		pE->v[1] = pS->v[1];

	mov	eax, DWORD PTR _pE$[ebp]
	mov	ecx, DWORD PTR _pS$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx

; 701  : 		pE->v[2] = pS->v[2];

	mov	eax, DWORD PTR _pE$[ebp]
	mov	ecx, DWORD PTR _pS$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
$L82398:

; 702  : 	}
; 703  : 
; 704  : 	CopyVec(&delta, pN);

	mov	eax, DWORD PTR _pN$[ebp]
	mov	ecx, DWORD PTR _delta$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	eax, DWORD PTR _pN$[ebp]
	mov	ecx, DWORD PTR _delta$[ebp+4]
	mov	DWORD PTR [eax+4], ecx
	mov	eax, DWORD PTR _pN$[ebp]
	mov	ecx, DWORD PTR _delta$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
$L82389:

; 705  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?ts_ApplyLightPull@@YAXPAUt_Light@@PAUVectorStruct@@11@Z ENDP ; ts_ApplyLightPull
; Function compile flags: /Odt /ZI
_TEXT	ENDS
;	COMDAT ?ts_Power@@YAMMM@Z
_TEXT	SEGMENT
_denominator$ = -4					; size = 4
_value$ = 8						; size = 4
_power$ = 12						; size = 4
?ts_Power@@YAMMM@Z PROC NEAR				; ts_Power, COMDAT

; 712  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 713  : 	REAL denominator = power - MulScalar(power, value) + value;

	fld	DWORD PTR _power$[ebp]
	fmul	DWORD PTR _value$[ebp]
	fsubr	DWORD PTR _power$[ebp]
	fadd	DWORD PTR _value$[ebp]
	fstp	DWORD PTR _denominator$[ebp]

; 714  : 	if (denominator == 0)

	fld	DWORD PTR __real@00000000
	fld	DWORD PTR _denominator$[ebp]
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $L82404

; 715  : 		return 0;

	fld	DWORD PTR __real@00000000
	jmp	SHORT $L82402
$L82404:

; 716  : 
; 717  : 	return (value / denominator);

	fld	DWORD PTR _value$[ebp]
	fdiv	DWORD PTR _denominator$[ebp]
$L82402:

; 718  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?ts_Power@@YAMMM@Z ENDP					; ts_Power
_TEXT	ENDS
PUBLIC	_sqrtf
; Function compile flags: /Odt /ZI
; File c:\program files\microsoft visual studio .net 2003\vc7\include\math.h
;	COMDAT ?sqrt@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?sqrt@@YAMM@Z PROC NEAR					; sqrt, COMDAT

; 579  :         {return (sqrtf(_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR __X$[ebp]
	push	eax
	call	_sqrtf
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?sqrt@@YAMM@Z ENDP					; sqrt
_TEXT	ENDS
EXTRN	_sqrt:NEAR
; Function compile flags: /Odt /ZI
;	COMDAT _sqrtf
_TEXT	SEGMENT
tv70 = -68						; size = 4
__X$ = 8						; size = 4
_sqrtf	PROC NEAR					; COMDAT

; 470  :         {return ((float)sqrt((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	fld	DWORD PTR __X$[ebp]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	call	_sqrt
	add	esp, 8
	fst	DWORD PTR tv70[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_sqrtf	ENDP
_TEXT	ENDS
END
