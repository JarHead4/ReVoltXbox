; Listing generated by Microsoft (R) Optimizing Compiler Version 13.10.3077 

	TITLE	.\source\Util.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT _IsEqualGUID
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _==
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _acosl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _asinl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _atanl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _atan2l
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _ceill
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _cosl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _coshl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _expl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _fabsl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _floorl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _fmodl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _frexpl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _ldexpl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _logl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _log10l
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _modfl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _powl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _sinl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _sinhl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _sqrtl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _tanl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _tanhl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _frexpf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _ldexpf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _acosf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _asinf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _atanf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _atan2f
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _ceilf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _cosf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _coshf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _expf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _fabsf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _floorf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _fmodf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _logf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _log10f
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _modff
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _powf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _sinf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _sinhf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _sqrtf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _tanf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _tanhf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GoodWrap@@YAMPAMMM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Pow_int@N@@YANNH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Pow_int@H@@YAHHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Pow_int@M@@YAMMH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Pow_int@O@@YAOOH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
sxdata	SEGMENT DWORD USE32 'SXDATA'
sxdata	ENDS
FLAT	GROUP _DATA, CONST, _BSS
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBCD
INCLUDELIB OLDNAMES

PUBLIC	?GoodWrap@@YAMPAMMM@Z				; GoodWrap
EXTRN	__ftol2:NEAR
EXTRN	__fltused:NEAR
; Function compile flags: /Odt /ZI
; File c:\documents and settings\jarhead\desktop\shit to display my love for xbox revolt and fuck you borman-ness\revolt source\source\util.cpp
;	COMDAT ?GoodWrap@@YAMPAMMM@Z
_TEXT	SEGMENT
tv143 = -80						; size = 4
tv128 = -80						; size = 4
_range$ = -12						; size = 4
_diff$ = -8						; size = 4
_n$ = -4						; size = 4
_var$ = 8						; size = 4
_min$ = 12						; size = 4
_max$ = 16						; size = 4
?GoodWrap@@YAMPAMMM@Z PROC NEAR				; GoodWrap, COMDAT

; 12   : { 

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi

; 13   : 	int n; 
; 14   : 	REAL diff, range; 
; 15   : 	if (*var < min) { 

	mov	eax, DWORD PTR _var$[ebp]
	fld	DWORD PTR [eax]
	fcomp	DWORD PTR _min$[ebp]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L74419

; 16   : 		range = max - min; 

	fld	DWORD PTR _max$[ebp]
	fsub	DWORD PTR _min$[ebp]
	fstp	DWORD PTR _range$[ebp]

; 17   : 		diff = min - *var; 

	mov	eax, DWORD PTR _var$[ebp]
	fld	DWORD PTR _min$[ebp]
	fsub	DWORD PTR [eax]
	fstp	DWORD PTR _diff$[ebp]

; 18   : 		n = (int) (diff / range); 

	fld	DWORD PTR _diff$[ebp]
	fdiv	DWORD PTR _range$[ebp]
	call	__ftol2
	mov	DWORD PTR _n$[ebp], eax

; 19   : 		*var += range * (n + 1); 

	mov	eax, DWORD PTR _n$[ebp]
	add	eax, 1
	mov	DWORD PTR tv128[ebp], eax
	fild	DWORD PTR tv128[ebp]
	fmul	DWORD PTR _range$[ebp]
	mov	ecx, DWORD PTR _var$[ebp]
	fadd	DWORD PTR [ecx]
	mov	edx, DWORD PTR _var$[ebp]
	fstp	DWORD PTR [edx]

; 20   : 	} 
; 21   : 	else if (*var > max) { 

	jmp	SHORT $L74421
$L74419:
	mov	eax, DWORD PTR _var$[ebp]
	fld	DWORD PTR [eax]
	fcomp	DWORD PTR _max$[ebp]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $L74421

; 22   : 		range = max - min; 

	fld	DWORD PTR _max$[ebp]
	fsub	DWORD PTR _min$[ebp]
	fstp	DWORD PTR _range$[ebp]

; 23   : 		diff = *var - max; 

	mov	eax, DWORD PTR _var$[ebp]
	fld	DWORD PTR [eax]
	fsub	DWORD PTR _max$[ebp]
	fstp	DWORD PTR _diff$[ebp]

; 24   : 		n = (int) (diff / range); 

	fld	DWORD PTR _diff$[ebp]
	fdiv	DWORD PTR _range$[ebp]
	call	__ftol2
	mov	DWORD PTR _n$[ebp], eax

; 25   : 		*var -= range * (n + 1); 

	mov	eax, DWORD PTR _n$[ebp]
	add	eax, 1
	mov	DWORD PTR tv143[ebp], eax
	fild	DWORD PTR tv143[ebp]
	fmul	DWORD PTR _range$[ebp]
	mov	ecx, DWORD PTR _var$[ebp]
	fsubr	DWORD PTR [ecx]
	mov	edx, DWORD PTR _var$[ebp]
	fstp	DWORD PTR [edx]
$L74421:

; 26   : 	} 
; 27   : 	return *var;

	mov	eax, DWORD PTR _var$[ebp]
	fld	DWORD PTR [eax]

; 28   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GoodWrap@@YAMPAMMM@Z ENDP				; GoodWrap
_TEXT	ENDS
END
