; Listing generated by Microsoft (R) Optimizing Compiler Version 13.10.3077 

	TITLE	.\source\panel.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT PARA USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_03OOCCIGMC@mph?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_03EEFEPFIG@fpm?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_03MLEJNJBO@kph?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0M@BIBECKCF@?$CFd?5?$DN?5?$CFd?0?5?$CFd?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_02DPKJAMEF@?$CFd?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_05EHPMMFBK@split?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BA@IMIDIBIE@?$CL?$CF02d?3?$CF02d?3?$CF03d?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BA@NPBCOIGA@?9?$CF02d?3?$CF02d?3?$CF03d?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_03MJGBLALJ@lap?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0P@PKAPJJPG@?$CF02d?3?$CF02d?3?$CF03d?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_04GLEOMBLA@race?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_03GLKEJMAA@?$CF4d?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_05LCKIIOJE@?$CFd?1?$CFd?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_01HIHLOKLC@1?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_08CEMIADPL@last?5lap?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_08GIEANGJD@best?5lap?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _IsEqualGUID
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _==
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _acosl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _asinl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _atanl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _atan2l
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _ceill
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _cosl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _coshl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _expl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _fabsl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _floorl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _fmodl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _frexpl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _ldexpl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _logl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _log10l
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _modfl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _powl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _sinl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _sinhl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _sqrtl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _tanl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _tanhl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _frexpf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _ldexpf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _acosf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _asinf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _atanf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _atan2f
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _ceilf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _cosf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _coshf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _expf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _fabsf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _floorf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _fmodf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _logf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _log10f
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _modff
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _powf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _sinf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _sinhf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _sqrtf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _tanf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _tanhf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?cos@@YAMM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?sin@@YAMM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?sqrt@@YAMM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?TriggerSplit@@YAXPAUPlayerStruct@@JJPAUVectorStruct@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?TriggerTrackDir@@YAXPAUPlayerStruct@@JJPAUVectorStruct@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DrawControlPanel@@YAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DrawPanelSprite@@YAXMMMMMMMMJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Pow_int@N@@YANNH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Pow_int@H@@YAHHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Pow_int@M@@YAMMH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Pow_int@O@@YAOOH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
sxdata	SEGMENT DWORD USE32 'SXDATA'
sxdata	ENDS
FLAT	GROUP _DATA, CONST, _BSS
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBCD
INCLUDELIB OLDNAMES

PUBLIC	??_C@_03OOCCIGMC@mph?$AA@			; `string'
PUBLIC	??_C@_03EEFEPFIG@fpm?$AA@			; `string'
PUBLIC	??_C@_03MLEJNJBO@kph?$AA@			; `string'
PUBLIC	?SpeedUnits@@3JA				; SpeedUnits
_BSS	SEGMENT
_TrackDirCount DD 01H DUP (?)
?edit@?1??EditRevsPos@@YAXXZ@4JA DD 01H DUP (?)		; `EditRevsPos'::`2'::edit
?SpeedUnits@@3JA DD 01H DUP (?)				; SpeedUnits
_BSS	ENDS
;	COMDAT ??_C@_03OOCCIGMC@mph?$AA@
CONST	SEGMENT
??_C@_03OOCCIGMC@mph?$AA@ DB 'mph', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03EEFEPFIG@fpm?$AA@
CONST	SEGMENT
??_C@_03EEFEPFIG@fpm?$AA@ DB 'fpm', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03MLEJNJBO@kph?$AA@
CONST	SEGMENT
??_C@_03MLEJNJBO@kph?$AA@ DB 'kph', 00H			; `string'
CONST	ENDS
_DATA	SEGMENT
_SpeedUnitText DD FLAT:??_C@_03OOCCIGMC@mph?$AA@
	DD	FLAT:??_C@_03EEFEPFIG@fpm?$AA@
	DD	FLAT:??_C@_03MLEJNJBO@kph?$AA@
_SpeedUnitScale DD 03c372c52r			; 0.01118
	DD	03dd013a9r			; 0.1016
	DD	03c9374bcr			; 0.018
_MapInfo DB	'MARKET1', 00H
	ORG $+8
	DD	041c00000r			; 24
	DD	043c80000r			; 400
	DD	03c23d70ar			; 0.01
	DD	03c23d70ar			; 0.01
	DD	000000000r			; 0
	DD	043000000r			; 128
	DD	042800000r			; 64
	DD	042800000r			; 64
	DB	00H
	ORG $+15
	ORG $+32
_TrackDirUV DD	043000000r			; 128
	DD	000000000r			; 0
	DD	0c2800000r			; -64
	DD	042800000r			; 64
	DD	042800000r			; 64
	DD	000000000r			; 0
	DD	0c2800000r			; -64
	DD	042800000r			; 64
	DD	043000000r			; 128
	DD	042800000r			; 64
	DD	0c2800000r			; -64
	DD	042780000r			; 62
	DD	043800000r			; 256
	DD	000000000r			; 0
	DD	0c2800000r			; -64
	DD	042800000r			; 64
	DD	042800000r			; 64
	DD	000000000r			; 0
	DD	042800000r			; 64
	DD	042800000r			; 64
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	042800000r			; 64
	DD	042800000r			; 64
	DD	042800000r			; 64
	DD	042800000r			; 64
	DD	042800000r			; 64
	DD	042780000r			; 62
	DD	043400000r			; 192
	DD	000000000r			; 0
	DD	042800000r			; 64
	DD	042800000r			; 64
	DD	000000000r			; 0
	DD	042800000r			; 64
	DD	042800000r			; 64
	DD	042780000r			; 62
	DD	043000000r			; 128
	DD	000000000r			; 0
	DD	042800000r			; 64
	DD	042800000r			; 64
	DD	043400000r			; 192
	DD	042800000r			; 64
	DD	042800000r			; 64
	DD	042780000r			; 62
_RevsUV	DD	0430f0000r			; 143
	DD	043000000r			; 128
	DD	041700000r			; 15
	DD	041600000r			; 14
	DD	042ee0000r			; 119
	DD	043000000r			; 128
	DD	041800000r			; 16
	DD	041800000r			; 16
	DD	042be0000r			; 95
	DD	043000000r			; 128
	DD	041980000r			; 19
	DD	041900000r			; 18
	DD	0428e0000r			; 71
	DD	043000000r			; 128
	DD	041980000r			; 19
	DD	041980000r			; 19
	DD	0423c0000r			; 47
	DD	043000000r			; 128
	DD	041a80000r			; 21
	DD	041a80000r			; 21
	DD	041b80000r			; 23
	DD	043000000r			; 128
	DD	041b00000r			; 22
	DD	041b00000r			; 22
	DD	000000000r			; 0
	DD	043000000r			; 128
	DD	041b00000r			; 22
	DD	041c00000r			; 24
_RevsPositions DD 043f60000r			; 492
	DD	043e18000r			; 451
	DD	043fb0000r			; 502
	DD	043d98000r			; 435
	DD	044014000r			; 517
	DD	043d30000r			; 422
	DD	044060000r			; 536
	DD	043ce0000r			; 412
	DD	0440b8000r			; 558
	DD	043ca8000r			; 405
	DD	044114000r			; 581
	DD	043c80000r			; 400
	DD	044178000r			; 606
	DD	043c78000r			; 399
_PickupUV DD	000000000r			; 0
	DD	043600000r			; 224
	DD	042800000r			; 64
	DD	043600000r			; 224
	DD	042c00000r			; 96
	DD	043600000r			; 224
	DD	042000000r			; 32
	DD	043600000r			; 224
	DD	043000000r			; 128
	DD	043600000r			; 224
	DD	043600000r			; 224
	DD	043600000r			; 224
	DD	043400000r			; 192
	DD	043600000r			; 224
	DD	000000000r			; 0
	DD	043400000r			; 192
	DD	042000000r			; 32
	DD	043400000r			; 192
?light@?KF@??DrawControlPanel@@YAXXZ@4UVectorStruct@@A DD 000000000r ; 0 ; `DrawControlPanel'::`165'::light
	DD	000000000r			; 0
	DD	0c3000000r			; -128
?tl@?KF@??DrawControlPanel@@YAXXZ@4UVectorStruct@@A DD 0c2800000r ; -64 ; `DrawControlPanel'::`165'::tl
	DD	0c2800000r			; -64
	DD	000000000r			; 0
?tr@?KF@??DrawControlPanel@@YAXXZ@4UVectorStruct@@A DD 042800000r ; 64 ; `DrawControlPanel'::`165'::tr
	DD	0c2800000r			; -64
	DD	000000000r			; 0
?br@?KF@??DrawControlPanel@@YAXXZ@4UVectorStruct@@A DD 042800000r ; 64 ; `DrawControlPanel'::`165'::br
	DD	042800000r			; 64
	DD	000000000r			; 0
?bl@?KF@??DrawControlPanel@@YAXXZ@4UVectorStruct@@A DD 0c2800000r ; -64 ; `DrawControlPanel'::`165'::bl
	DD	042800000r			; 64
	DD	000000000r			; 0
_DATA	ENDS
PUBLIC	?TriggerSplit@@YAXPAUPlayerStruct@@JJPAUVectorStruct@@@Z ; TriggerSplit
EXTRN	?PLR_LocalPlayer@@3PAUPlayerStruct@@A:DWORD	; PLR_LocalPlayer
EXTRN	?TrackRecords@@3URECORD_ENTRY@@A:BYTE		; TrackRecords
EXTRN	__fltused:NEAR
_BSS	SEGMENT
_DisplaySplitTime DD 01H DUP (?)
_DisplaySplitCount DD 01H DUP (?)
; Function compile flags: /Odt /ZI
; File c:\documents and settings\jarhead\desktop\shit to display my love for xbox revolt and fuck you borman-ness\revolt source\source\panel.cpp
_BSS	ENDS
;	COMDAT ?TriggerSplit@@YAXPAUPlayerStruct@@JJPAUVectorStruct@@@Z
_TEXT	SEGMENT
_car$ = -4						; size = 4
_player$ = 8						; size = 4
_flag$ = 12						; size = 4
_n$ = 16						; size = 4
_vec$ = 20						; size = 4
?TriggerSplit@@YAXPAUPlayerStruct@@JJPAUVectorStruct@@@Z PROC NEAR ; TriggerSplit, COMDAT

; 107  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 108  : 	CAR	*car;
; 109  : 
; 110  : // ignore if wrong car
; 111  : 
; 112  : 	if (player != PLR_LocalPlayer)

	mov	eax, DWORD PTR _player$[ebp]
	cmp	eax, DWORD PTR ?PLR_LocalPlayer@@3PAUPlayerStruct@@A ; PLR_LocalPlayer
	je	SHORT $L81571

; 113  : 		return;

	jmp	$L81569
$L81571:

; 114  : 
; 115  : 	car = &player->car;

	mov	eax, DWORD PTR _player$[ebp]
	add	eax, 44					; 0000002cH
	mov	DWORD PTR _car$[ebp], eax

; 116  : 
; 117  : // special end of lap split?
; 118  : 
; 119  : 	if (n == -1)

	cmp	DWORD PTR _n$[ebp], -1
	jne	SHORT $L81572

; 120  : 	{
; 121  : 		DisplaySplitCount = SPLIT_COUNT;

	mov	DWORD PTR _DisplaySplitCount, 1073741824 ; 40000000H

; 122  : 		DisplaySplitTime = car->CurrentLapTime - TrackRecords.RecordLap[0].Time;

	mov	eax, DWORD PTR _car$[ebp]
	mov	ecx, DWORD PTR [eax+3424]
	sub	ecx, DWORD PTR ?TrackRecords@@3URECORD_ENTRY@@A+40
	mov	DWORD PTR _DisplaySplitTime, ecx

; 123  : 		car->NextSplit++;

	mov	eax, DWORD PTR _car$[ebp]
	mov	ecx, DWORD PTR [eax+3416]
	add	ecx, 1
	mov	edx, DWORD PTR _car$[ebp]
	mov	DWORD PTR [edx+3416], ecx
$L81572:

; 124  : 	}
; 125  : 
; 126  : // ignore if gay number
; 127  : 
; 128  : 	if (n >= MAX_SPLIT_TIMES)

	cmp	DWORD PTR _n$[ebp], 10			; 0000000aH
	jl	SHORT $L81573

; 129  : 		return;

	jmp	SHORT $L81569
$L81573:

; 130  : 
; 131  : // ignore if wrong split
; 132  : 
; 133  : 	if (n != car->NextSplit)

	mov	eax, DWORD PTR _car$[ebp]
	mov	ecx, DWORD PTR _n$[ebp]
	cmp	ecx, DWORD PTR [eax+3416]
	je	SHORT $L81574

; 134  : 		return;

	jmp	SHORT $L81569
$L81574:

; 135  : 
; 136  : // set car split time
; 137  : 
; 138  : 	car->SplitTime[n] = car->CurrentLapTime;

	mov	eax, DWORD PTR _n$[ebp]
	mov	ecx, DWORD PTR _car$[ebp]
	mov	edx, DWORD PTR _car$[ebp]
	mov	edx, DWORD PTR [edx+3424]
	mov	DWORD PTR [ecx+eax*4+3444], edx

; 139  : 
; 140  : // display split time
; 141  : 
; 142  : 	DisplaySplitCount = SPLIT_COUNT;

	mov	DWORD PTR _DisplaySplitCount, 1073741824 ; 40000000H

; 143  : 	DisplaySplitTime = car->SplitTime[n] - TrackRecords.SplitTime[n];

	mov	eax, DWORD PTR _n$[ebp]
	mov	ecx, DWORD PTR _car$[ebp]
	mov	edx, DWORD PTR _n$[ebp]
	mov	eax, DWORD PTR [ecx+eax*4+3444]
	sub	eax, DWORD PTR ?TrackRecords@@3URECORD_ENTRY@@A[edx*4]
	mov	DWORD PTR _DisplaySplitTime, eax

; 144  : 	car->NextSplit++;

	mov	eax, DWORD PTR _car$[ebp]
	mov	ecx, DWORD PTR [eax+3416]
	add	ecx, 1
	mov	edx, DWORD PTR _car$[ebp]
	mov	DWORD PTR [edx+3416], ecx
$L81569:

; 145  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?TriggerSplit@@YAXPAUPlayerStruct@@JJPAUVectorStruct@@@Z ENDP ; TriggerSplit
_TEXT	ENDS
PUBLIC	?TriggerTrackDir@@YAXPAUPlayerStruct@@JJPAUVectorStruct@@@Z ; TriggerTrackDir
_BSS	SEGMENT
_TrackDirType DD 01H DUP (?)
; Function compile flags: /Odt /ZI
_BSS	ENDS
;	COMDAT ?TriggerTrackDir@@YAXPAUPlayerStruct@@JJPAUVectorStruct@@@Z
_TEXT	SEGMENT
_player$ = 8						; size = 4
_flag$ = 12						; size = 4
_n$ = 16						; size = 4
_vec$ = 20						; size = 4
?TriggerTrackDir@@YAXPAUPlayerStruct@@JJPAUVectorStruct@@@Z PROC NEAR ; TriggerTrackDir, COMDAT

; 152  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 153  : 
; 154  : // fuck off everyone else
; 155  : 
; 156  : 	if (player != PLR_LocalPlayer)

	mov	eax, DWORD PTR _player$[ebp]
	cmp	eax, DWORD PTR ?PLR_LocalPlayer@@3PAUPlayerStruct@@A ; PLR_LocalPlayer
	je	SHORT $L81581

; 157  : 		return;

	jmp	SHORT $L81580
$L81581:

; 158  : 
; 159  : // ignore if not first trigger
; 160  : 
; 161  : 	if (!(flag & TRIGGER_GLOBAL_FIRST))

	mov	eax, DWORD PTR _flag$[ebp]
	and	eax, 1
	jne	SHORT $L81582

; 162  : 		return;

	jmp	SHORT $L81580
$L81582:

; 163  : 
; 164  : // set track dir flags
; 165  : 
; 166  : 	TrackDirType = n;

	mov	eax, DWORD PTR _n$[ebp]
	mov	DWORD PTR _TrackDirType, eax

; 167  : 	TrackDirCount = TRACK_DIR_COUNT;

	mov	DWORD PTR _TrackDirCount, 640		; 00000280H
$L81580:

; 168  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?TriggerTrackDir@@YAXPAUPlayerStruct@@JJPAUVectorStruct@@@Z ENDP ; TriggerTrackDir
_TEXT	ENDS
PUBLIC	__real@40c90fdb
PUBLIC	__real@42380000
PUBLIC	__real@42680000
PUBLIC	__real@43ce0000
PUBLIC	__real@40400000
PUBLIC	__real@43800000
PUBLIC	__real@41200000
PUBLIC	__real@00000000
PUBLIC	__real@4b000000
PUBLIC	__real@44800000
PUBLIC	__real@3dc80000
PUBLIC	__real@437f0000
PUBLIC	?cos@@YAMM@Z					; cos
PUBLIC	?sin@@YAMM@Z					; sin
PUBLIC	?sqrt@@YAMM@Z					; sqrt
PUBLIC	??_C@_02DPKJAMEF@?$CFd?$AA@			; `string'
PUBLIC	??_C@_05EHPMMFBK@split?$AA@			; `string'
PUBLIC	??_C@_0BA@IMIDIBIE@?$CL?$CF02d?3?$CF02d?3?$CF03d?$AA@ ; `string'
PUBLIC	??_C@_0BA@NPBCOIGA@?9?$CF02d?3?$CF02d?3?$CF03d?$AA@ ; `string'
PUBLIC	??_C@_03MJGBLALJ@lap?$AA@			; `string'
PUBLIC	??_C@_0P@PKAPJJPG@?$CF02d?3?$CF02d?3?$CF03d?$AA@ ; `string'
PUBLIC	??_C@_04GLEOMBLA@race?$AA@			; `string'
PUBLIC	??_C@_03GLKEJMAA@?$CF4d?$AA@			; `string'
PUBLIC	??_C@_05LCKIIOJE@?$CFd?1?$CFd?$AA@		; `string'
PUBLIC	??_C@_01HIHLOKLC@1?$AA@				; `string'
PUBLIC	??_C@_08CEMIADPL@last?5lap?$AA@			; `string'
PUBLIC	??_C@_08GIEANGJD@best?5lap?$AA@			; `string'
PUBLIC	?DrawControlPanel@@YAXXZ			; DrawControlPanel
PUBLIC	?DrawPanelSprite@@YAXMMMMMMMMJ@Z		; DrawPanelSprite
EXTRN	__ftol2:NEAR
EXTRN	?D3Ddevice@@3PAUIDirect3DDevice3@@A:DWORD	; D3Ddevice
EXTRN	?RenderStateChange@@3JA:DWORD			; RenderStateChange
EXTRN	?TextureStateChange@@3JA:DWORD			; TextureStateChange
EXTRN	?RenderTP@@3FA:WORD				; RenderTP
EXTRN	?RenderAlpha@@3FA:WORD				; RenderAlpha
EXTRN	?RenderAlphaSrc@@3FA:WORD			; RenderAlphaSrc
EXTRN	?RenderAlphaDest@@3FA:WORD			; RenderAlphaDest
EXTRN	?RenderZbuffer@@3FA:WORD			; RenderZbuffer
EXTRN	?DumpText@@YAXFFFFJPAD@Z:NEAR			; DumpText
EXTRN	?DumpBigText@@YAXFFFFJPAD@Z:NEAR		; DumpBigText
EXTRN	?TimeFactor@@3MA:DWORD				; TimeFactor
EXTRN	?TimeStep@@3MA:DWORD				; TimeStep
EXTRN	?GameSettings@@3UGAME_SETTINGS@@A:BYTE		; GameSettings
EXTRN	?TexInfo@@3PAUTEXINFO@@A:DWORD			; TexInfo
EXTRN	?CAM_MainCamera@@3PAUCameraStruct@@A:DWORD	; CAM_MainCamera
EXTRN	?PLR_PlayerHead@@3PAUPlayerStruct@@A:DWORD	; PLR_PlayerHead
EXTRN	?TimerCurrent@@3KA:DWORD			; TimerCurrent
EXTRN	?TimerFreq@@3KA:DWORD				; TimerFreq
EXTRN	?TotalRaceTime@@3KA:DWORD			; TotalRaceTime
EXTRN	?CountdownTime@@3KA:DWORD			; CountdownTime
EXTRN	__imp__wsprintfA:NEAR
_BSS	SEGMENT
_RevLit	DD	0400H DUP (?)
_WrongWayFlag DD 01H DUP (?)
_WrongWayTimer DD 01H DUP (?)
_BSS	ENDS
;	COMDAT __real@40c90fdb
CONST	SEGMENT
__real@40c90fdb DD 040c90fdbr			; 6.28319
CONST	ENDS
;	COMDAT __real@42380000
CONST	SEGMENT
__real@42380000 DD 042380000r			; 46
CONST	ENDS
;	COMDAT __real@42680000
CONST	SEGMENT
__real@42680000 DD 042680000r			; 58
CONST	ENDS
;	COMDAT __real@43ce0000
CONST	SEGMENT
__real@43ce0000 DD 043ce0000r			; 412
CONST	ENDS
;	COMDAT __real@40400000
CONST	SEGMENT
__real@40400000 DD 040400000r			; 3
CONST	ENDS
;	COMDAT __real@43800000
CONST	SEGMENT
__real@43800000 DD 043800000r			; 256
CONST	ENDS
;	COMDAT __real@41200000
CONST	SEGMENT
__real@41200000 DD 041200000r			; 10
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT __real@4b000000
CONST	SEGMENT
__real@4b000000 DD 04b000000r			; 8.38861e+006
CONST	ENDS
;	COMDAT __real@44800000
CONST	SEGMENT
__real@44800000 DD 044800000r			; 1024
CONST	ENDS
;	COMDAT __real@3dc80000
CONST	SEGMENT
__real@3dc80000 DD 03dc80000r			; 0.0976563
CONST	ENDS
;	COMDAT __real@437f0000
CONST	SEGMENT
__real@437f0000 DD 0437f0000r			; 255
CONST	ENDS
;	COMDAT ??_C@_02DPKJAMEF@?$CFd?$AA@
CONST	SEGMENT
??_C@_02DPKJAMEF@?$CFd?$AA@ DB '%d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05EHPMMFBK@split?$AA@
CONST	SEGMENT
??_C@_05EHPMMFBK@split?$AA@ DB 'split', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@IMIDIBIE@?$CL?$CF02d?3?$CF02d?3?$CF03d?$AA@
CONST	SEGMENT
??_C@_0BA@IMIDIBIE@?$CL?$CF02d?3?$CF02d?3?$CF03d?$AA@ DB '+%02d:%02d:%03d'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@NPBCOIGA@?9?$CF02d?3?$CF02d?3?$CF03d?$AA@
CONST	SEGMENT
??_C@_0BA@NPBCOIGA@?9?$CF02d?3?$CF02d?3?$CF03d?$AA@ DB '-%02d:%02d:%03d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03MJGBLALJ@lap?$AA@
CONST	SEGMENT
??_C@_03MJGBLALJ@lap?$AA@ DB 'lap', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@PKAPJJPG@?$CF02d?3?$CF02d?3?$CF03d?$AA@
CONST	SEGMENT
??_C@_0P@PKAPJJPG@?$CF02d?3?$CF02d?3?$CF03d?$AA@ DB '%02d:%02d:%03d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04GLEOMBLA@race?$AA@
CONST	SEGMENT
??_C@_04GLEOMBLA@race?$AA@ DB 'race', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03GLKEJMAA@?$CF4d?$AA@
CONST	SEGMENT
??_C@_03GLKEJMAA@?$CF4d?$AA@ DB '%4d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05LCKIIOJE@?$CFd?1?$CFd?$AA@
CONST	SEGMENT
??_C@_05LCKIIOJE@?$CFd?1?$CFd?$AA@ DB '%d/%d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_01HIHLOKLC@1?$AA@
CONST	SEGMENT
??_C@_01HIHLOKLC@1?$AA@ DB '1', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08CEMIADPL@last?5lap?$AA@
CONST	SEGMENT
??_C@_08CEMIADPL@last?5lap?$AA@ DB 'last lap', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08GIEANGJD@best?5lap?$AA@
CONST	SEGMENT
??_C@_08GIEANGJD@best?5lap?$AA@ DB 'best lap', 00H	; `string'
; Function compile flags: /Odt /ZI
CONST	ENDS
;	COMDAT ?DrawControlPanel@@YAXXZ
_TEXT	SEGMENT
tv280 = -324						; size = 4
__temp$81692 = -228					; size = 4
__temp$81668 = -224					; size = 4
__temp$81664 = -220					; size = 4
__temp$81661 = -216					; size = 4
_player$ = -212						; size = 4
_buf$ = -208						; size = 128
_pickup2$ = -80						; size = 4
_pickup$ = -76						; size = 4
_revadd$ = -72						; size = 4
_revper$ = -68						; size = 4
_revdest$ = -64						; size = 4
_revs$ = -60						; size = 4
_speed$ = -56						; size = 4
_col$ = -52						; size = 4
_i$ = -48						; size = 4
_dist$ = -44						; size = 4
_frevs$ = -40						; size = 4
_p$ = -36						; size = 4
_theight$ = -32						; size = 4
_twidth$ = -28						; size = 4
_tv$ = -24						; size = 4
_tu$ = -20						; size = 4
_ysize$ = -16						; size = 4
_xsize$ = -12						; size = 4
_y$ = -8						; size = 4
_x$ = -4						; size = 4
?DrawControlPanel@@YAXXZ PROC NEAR			; DrawControlPanel, COMDAT

; 205  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 324				; 00000144H
	push	ebx
	push	esi
	push	edi

; 206  : 	float x, y, xsize, ysize, tu, tv, twidth, theight, *p, frevs, dist;
; 207  : 	long i, col, speed, revs, revdest, revper, revadd, pickup, pickup2;
; 208  : 	char buf[128];
; 209  : 	PLAYER *player;
; 210  : 
; 211  : // skip if editing
; 212  : 
; 213  : 	if (CAM_MainCamera->Type == CAM_EDIT)

	mov	eax, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	cmp	DWORD PTR [eax], 5
	jne	SHORT $L81633

; 214  : 		return;

	jmp	$L81610
$L81633:

; 215  : 
; 216  : // set misc render states
; 217  : 
; 218  : 	ZBUFFER_OFF();

	movsx	eax, WORD PTR ?RenderZbuffer@@3FA	; RenderZbuffer
	test	eax, eax
	je	SHORT $L81634
	mov	WORD PTR ?RenderZbuffer@@3FA, 0		; RenderZbuffer
	movsx	eax, WORD PTR ?RenderZbuffer@@3FA	; RenderZbuffer
	push	eax
	push	7
	mov	ecx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	eax
	call	DWORD PTR [edx+88]
	mov	eax, DWORD PTR ?RenderStateChange@@3JA	; RenderStateChange
	add	eax, 1
	mov	DWORD PTR ?RenderStateChange@@3JA, eax	; RenderStateChange
$L81634:

; 219  : 
; 220  : 	ALPHA_ON();

	movsx	eax, WORD PTR ?RenderAlpha@@3FA		; RenderAlpha
	test	eax, eax
	jne	SHORT $L81635
	mov	WORD PTR ?RenderAlpha@@3FA, 1		; RenderAlpha
	movsx	eax, WORD PTR ?RenderAlpha@@3FA		; RenderAlpha
	push	eax
	push	27					; 0000001bH
	mov	ecx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	eax
	call	DWORD PTR [edx+88]
	mov	eax, DWORD PTR ?RenderStateChange@@3JA	; RenderStateChange
	add	eax, 1
	mov	DWORD PTR ?RenderStateChange@@3JA, eax	; RenderStateChange
$L81635:

; 221  : 	ALPHA_SRC(D3DBLEND_SRCALPHA);

	movsx	eax, WORD PTR ?RenderAlphaSrc@@3FA	; RenderAlphaSrc
	cmp	eax, 5
	je	SHORT $L81636
	mov	WORD PTR ?RenderAlphaSrc@@3FA, 5	; RenderAlphaSrc
	movsx	eax, WORD PTR ?RenderAlphaSrc@@3FA	; RenderAlphaSrc
	push	eax
	push	19					; 00000013H
	mov	ecx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	eax
	call	DWORD PTR [edx+88]
	mov	eax, DWORD PTR ?RenderStateChange@@3JA	; RenderStateChange
	add	eax, 1
	mov	DWORD PTR ?RenderStateChange@@3JA, eax	; RenderStateChange
$L81636:

; 222  : 	ALPHA_DEST(D3DBLEND_INVSRCALPHA);

	movsx	eax, WORD PTR ?RenderAlphaDest@@3FA	; RenderAlphaDest
	cmp	eax, 6
	je	SHORT $L81637
	mov	WORD PTR ?RenderAlphaDest@@3FA, 6	; RenderAlphaDest
	movsx	eax, WORD PTR ?RenderAlphaDest@@3FA	; RenderAlphaDest
	push	eax
	push	20					; 00000014H
	mov	ecx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	eax
	call	DWORD PTR [edx+88]
	mov	eax, DWORD PTR ?RenderStateChange@@3JA	; RenderStateChange
	add	eax, 1
	mov	DWORD PTR ?RenderStateChange@@3JA, eax	; RenderStateChange
$L81637:

; 223  : 
; 224  : // fx 1
; 225  : 
; 226  : 	SET_TPAGE(TPAGE_FX1);

	movsx	eax, WORD PTR ?RenderTP@@3FA		; RenderTP
	cmp	eax, 27					; 0000001bH
	je	SHORT $L81638
	mov	WORD PTR ?RenderTP@@3FA, 27		; RenderTP, 0000001bH
	movsx	eax, WORD PTR ?RenderTP@@3FA		; RenderTP
	cmp	eax, -1
	jne	SHORT $L81639
	push	0
	push	0
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	edx
	call	DWORD PTR [ecx+152]
	mov	eax, DWORD PTR ?TextureStateChange@@3JA	; TextureStateChange
	add	eax, 1
	mov	DWORD PTR ?TextureStateChange@@3JA, eax	; TextureStateChange
	jmp	SHORT $L81638
$L81639:
	movsx	eax, WORD PTR ?RenderTP@@3FA		; RenderTP
	shl	eax, 6
	mov	ecx, DWORD PTR ?TexInfo@@3PAUTEXINFO@@A	; TexInfo
	mov	edx, DWORD PTR [ecx+eax+52]
	push	edx
	push	0
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	edx
	call	DWORD PTR [ecx+152]
	mov	eax, DWORD PTR ?TextureStateChange@@3JA	; TextureStateChange
	add	eax, 1
	mov	DWORD PTR ?TextureStateChange@@3JA, eax	; TextureStateChange
$L81638:

; 227  : 
; 228  : // position ring
; 229  : 
; 230  : 	DrawPanelSprite(16, 368, 96, 96, 1.0f / 256.0f, 129.0f / 256.0f, 62.0f / 256.0f, 62.0f / 256.0f, 0xc0ffffff);

	push	-1056964609				; c0ffffffH
	push	1048051712				; 3e780000H
	push	1048051712				; 3e780000H
	push	1057030144				; 3f010000H
	push	998244352				; 3b800000H
	push	1119879168				; 42c00000H
	push	1119879168				; 42c00000H
	push	1136132096				; 43b80000H
	push	1098907648				; 41800000H
	call	?DrawPanelSprite@@YAXMMMMMMMMJ@Z	; DrawPanelSprite
	add	esp, 36					; 00000024H

; 231  : 	for (player = PLR_PlayerHead ; player ; player = player->next)

	mov	eax, DWORD PTR ?PLR_PlayerHead@@3PAUPlayerStruct@@A ; PLR_PlayerHead
	mov	DWORD PTR _player$[ebp], eax
	jmp	SHORT $L81641
$L81642:
	mov	eax, DWORD PTR _player$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _player$[ebp], ecx
$L81641:
	cmp	DWORD PTR _player$[ebp], 0
	je	$L81643

; 232  : 	{
; 233  : 		dist = player->CarAI.FinishDistPanel * RAD;

	mov	eax, DWORD PTR _player$[ebp]
	fld	DWORD PTR [eax+10204]
	fmul	DWORD PTR __real@40c90fdb
	fstp	DWORD PTR _dist$[ebp]

; 234  : 
; 235  : 		x = -(float)sin(dist) * 46.0f + 58.0f;

	mov	eax, DWORD PTR _dist$[ebp]
	push	eax
	call	?sin@@YAMM@Z				; sin
	add	esp, 4
	fchs
	fmul	DWORD PTR __real@42380000
	fadd	DWORD PTR __real@42680000
	fstp	DWORD PTR _x$[ebp]

; 236  : 		y = -(float)cos(dist) * 46.0f + 412.0f;

	mov	eax, DWORD PTR _dist$[ebp]
	push	eax
	call	?cos@@YAMM@Z				; cos
	add	esp, 4
	fchs
	fmul	DWORD PTR __real@42380000
	fadd	DWORD PTR __real@43ce0000
	fstp	DWORD PTR _y$[ebp]

; 237  : 
; 238  : 		tu = 208.0f / 256.0f;

	mov	DWORD PTR _tu$[ebp], 1062207488		; 3f500000H

; 239  : 		tv = 216.0f / 256.0f;

	mov	DWORD PTR _tv$[ebp], 1062731776		; 3f580000H

; 240  : 
; 241  : 		DrawPanelSprite(x, y, 10.0f, 10.0f, tu, tv, 8.0f / 256.0f, 8.0f / 256.0f, 0xc0ffffff);

	push	-1056964609				; c0ffffffH
	push	1023410176				; 3d000000H
	push	1023410176				; 3d000000H
	mov	eax, DWORD PTR _tv$[ebp]
	push	eax
	mov	ecx, DWORD PTR _tu$[ebp]
	push	ecx
	push	1092616192				; 41200000H
	push	1092616192				; 41200000H
	mov	edx, DWORD PTR _y$[ebp]
	push	edx
	mov	eax, DWORD PTR _x$[ebp]
	push	eax
	call	?DrawPanelSprite@@YAXMMMMMMMMJ@Z	; DrawPanelSprite
	add	esp, 36					; 00000024H

; 242  : 	}

	jmp	$L81642
$L81643:

; 243  : 
; 244  : // fx 2
; 245  : 
; 246  : 	SET_TPAGE(TPAGE_FX2);

	movsx	eax, WORD PTR ?RenderTP@@3FA		; RenderTP
	cmp	eax, 28					; 0000001cH
	je	SHORT $L81646
	mov	WORD PTR ?RenderTP@@3FA, 28		; RenderTP, 0000001cH
	movsx	eax, WORD PTR ?RenderTP@@3FA		; RenderTP
	cmp	eax, -1
	jne	SHORT $L81647
	push	0
	push	0
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	edx
	call	DWORD PTR [ecx+152]
	mov	eax, DWORD PTR ?TextureStateChange@@3JA	; TextureStateChange
	add	eax, 1
	mov	DWORD PTR ?TextureStateChange@@3JA, eax	; TextureStateChange
	jmp	SHORT $L81646
$L81647:
	movsx	eax, WORD PTR ?RenderTP@@3FA		; RenderTP
	shl	eax, 6
	mov	ecx, DWORD PTR ?TexInfo@@3PAUTEXINFO@@A	; TexInfo
	mov	edx, DWORD PTR [ecx+eax+52]
	push	edx
	push	0
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	edx
	call	DWORD PTR [ecx+152]
	mov	eax, DWORD PTR ?TextureStateChange@@3JA	; TextureStateChange
	add	eax, 1
	mov	DWORD PTR ?TextureStateChange@@3JA, eax	; TextureStateChange
$L81646:

; 247  : 
; 248  : // wrong way?
; 249  : 
; 250  : 	if (WrongWayFlag != PLR_LocalPlayer->CarAI.WrongWay)

	mov	eax, DWORD PTR ?PLR_LocalPlayer@@3PAUPlayerStruct@@A ; PLR_LocalPlayer
	mov	ecx, DWORD PTR _WrongWayFlag
	cmp	ecx, DWORD PTR [eax+10192]
	je	SHORT $L81649

; 251  : 		WrongWayTimer += TimeStep;

	fld	DWORD PTR _WrongWayTimer
	fadd	DWORD PTR ?TimeStep@@3MA		; TimeStep
	fstp	DWORD PTR _WrongWayTimer

; 252  : 	else

	jmp	SHORT $L81650
$L81649:

; 253  : 		WrongWayTimer = 0.0f;

	mov	DWORD PTR _WrongWayTimer, 0
$L81650:

; 254  : 
; 255  : 	if (WrongWayTimer >= WRONG_WAY_TOLERANCE) WrongWayFlag = !WrongWayFlag;

	fld	DWORD PTR _WrongWayTimer
	fcomp	DWORD PTR __real@40400000
	fnstsw	ax
	test	ah, 1
	jne	SHORT $L81651
	xor	eax, eax
	cmp	DWORD PTR _WrongWayFlag, 0
	sete	al
	mov	DWORD PTR _WrongWayFlag, eax
$L81651:

; 256  : 
; 257  : 	if (WrongWayFlag && TIME2MS(TimerCurrent) & 256)

	cmp	DWORD PTR _WrongWayFlag, 0
	je	SHORT $L81652
	mov	eax, DWORD PTR ?TimerFreq@@3KA		; TimerFreq
	xor	edx, edx
	mov	ecx, 1000				; 000003e8H
	div	ecx
	mov	ecx, eax
	mov	eax, DWORD PTR ?TimerCurrent@@3KA	; TimerCurrent
	xor	edx, edx
	div	ecx
	and	eax, 256				; 00000100H
	je	SHORT $L81652

; 258  : 	{
; 259  : 		DrawPanelSprite(256, 0, 128, 128, 128.0f / 256.0f, 64.0f / 256.0f, 64.0f / 256.0f, 64.0f / 256.0f, 0xc0ffffff);

	push	-1056964609				; c0ffffffH
	push	1048576000				; 3e800000H
	push	1048576000				; 3e800000H
	push	1048576000				; 3e800000H
	push	1056964608				; 3f000000H
	push	1124073472				; 43000000H
	push	1124073472				; 43000000H
	push	0
	push	1132462080				; 43800000H
	call	?DrawPanelSprite@@YAXMMMMMMMMJ@Z	; DrawPanelSprite
	add	esp, 36					; 00000024H
$L81652:

; 260  : 	}
; 261  : 
; 262  : // track dir?
; 263  : 
; 264  : 	if (TrackDirCount)

	cmp	DWORD PTR _TrackDirCount, 0
	je	$L81653

; 265  : 	{
; 266  : 		if (!WrongWayFlag)

	cmp	DWORD PTR _WrongWayFlag, 0
	jne	$L81654

; 267  : 		{
; 268  : 			p = &TrackDirUV[TrackDirType * 4];

	mov	eax, DWORD PTR _TrackDirType
	shl	eax, 2
	lea	ecx, DWORD PTR _TrackDirUV[eax*4]
	mov	DWORD PTR _p$[ebp], ecx

; 269  : 			tu = *p++ / 256.0f;

	mov	eax, DWORD PTR _p$[ebp]
	fld	DWORD PTR [eax]
	fdiv	DWORD PTR __real@43800000
	fstp	DWORD PTR _tu$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 4
	mov	DWORD PTR _p$[ebp], ecx

; 270  : 			tv = *p++ / 256.0f;

	mov	eax, DWORD PTR _p$[ebp]
	fld	DWORD PTR [eax]
	fdiv	DWORD PTR __real@43800000
	fstp	DWORD PTR _tv$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 4
	mov	DWORD PTR _p$[ebp], ecx

; 271  : 			twidth = *p++ / 256.0f;

	mov	eax, DWORD PTR _p$[ebp]
	fld	DWORD PTR [eax]
	fdiv	DWORD PTR __real@43800000
	fstp	DWORD PTR _twidth$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 4
	mov	DWORD PTR _p$[ebp], ecx

; 272  : 			theight = *p++ / 256.0f;

	mov	eax, DWORD PTR _p$[ebp]
	fld	DWORD PTR [eax]
	fdiv	DWORD PTR __real@43800000
	fstp	DWORD PTR _theight$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 4
	mov	DWORD PTR _p$[ebp], ecx

; 273  : 
; 274  : 			if (TrackDirCount > TRACK_DIR_COUNT - TRACK_DIR_FADE_COUNT) col = (TRACK_DIR_COUNT - TrackDirCount) << 25;

	cmp	DWORD PTR _TrackDirCount, 512		; 00000200H
	jle	SHORT $L81655
	mov	eax, 640				; 00000280H
	sub	eax, DWORD PTR _TrackDirCount
	shl	eax, 25					; 00000019H
	mov	DWORD PTR _col$[ebp], eax

; 275  : 			else if (TrackDirCount < TRACK_DIR_FADE_COUNT) col = (TrackDirCount) << 25;

	jmp	SHORT $L81656
$L81655:
	cmp	DWORD PTR _TrackDirCount, 128		; 00000080H
	jge	SHORT $L81657
	mov	eax, DWORD PTR _TrackDirCount
	shl	eax, 25					; 00000019H
	mov	DWORD PTR _col$[ebp], eax

; 276  : 			else col = 255 << 24;

	jmp	SHORT $L81656
$L81657:
	mov	DWORD PTR _col$[ebp], -16777216		; ff000000H
$L81656:

; 277  : 			col |= 0xffffff;

	mov	eax, DWORD PTR _col$[ebp]
	or	eax, 16777215				; 00ffffffH
	mov	DWORD PTR _col$[ebp], eax

; 278  : 
; 279  : 			DrawPanelSprite(256, 0, 128, 128, tu, tv, twidth, theight, col);

	mov	eax, DWORD PTR _col$[ebp]
	push	eax
	mov	ecx, DWORD PTR _theight$[ebp]
	push	ecx
	mov	edx, DWORD PTR _twidth$[ebp]
	push	edx
	mov	eax, DWORD PTR _tv$[ebp]
	push	eax
	mov	ecx, DWORD PTR _tu$[ebp]
	push	ecx
	push	1124073472				; 43000000H
	push	1124073472				; 43000000H
	push	0
	push	1132462080				; 43800000H
	call	?DrawPanelSprite@@YAXMMMMMMMMJ@Z	; DrawPanelSprite
	add	esp, 36					; 00000024H
$L81654:

; 280  : 		}
; 281  : 
; 282  : 		if ((TrackDirCount -= (long)(TimeFactor * 10)) < 0) TrackDirCount = 0;

	fld	DWORD PTR ?TimeFactor@@3MA		; TimeFactor
	fmul	DWORD PTR __real@41200000
	call	__ftol2
	mov	ecx, DWORD PTR _TrackDirCount
	sub	ecx, eax
	mov	DWORD PTR _TrackDirCount, ecx
	jns	SHORT $L81653
	mov	DWORD PTR _TrackDirCount, 0
$L81653:

; 283  : 	}
; 284  : 
; 285  : // revs
; 286  : 
; 287  : 	frevs = abs(PLR_LocalPlayer->car.Revs / PLR_LocalPlayer->car.MaxRevs);

	mov	eax, DWORD PTR ?PLR_LocalPlayer@@3PAUPlayerStruct@@A ; PLR_LocalPlayer
	mov	ecx, DWORD PTR ?PLR_LocalPlayer@@3PAUPlayerStruct@@A ; PLR_LocalPlayer
	fld	DWORD PTR [eax+3548]
	fdiv	DWORD PTR [ecx+3552]
	fcomp	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $L81923
	mov	edx, DWORD PTR ?PLR_LocalPlayer@@3PAUPlayerStruct@@A ; PLR_LocalPlayer
	mov	eax, DWORD PTR ?PLR_LocalPlayer@@3PAUPlayerStruct@@A ; PLR_LocalPlayer
	fld	DWORD PTR [edx+3548]
	fdiv	DWORD PTR [eax+3552]
	fstp	DWORD PTR tv280[ebp]
	jmp	SHORT $L81924
$L81923:
	mov	ecx, DWORD PTR ?PLR_LocalPlayer@@3PAUPlayerStruct@@A ; PLR_LocalPlayer
	mov	edx, DWORD PTR ?PLR_LocalPlayer@@3PAUPlayerStruct@@A ; PLR_LocalPlayer
	fld	DWORD PTR [ecx+3548]
	fdiv	DWORD PTR [edx+3552]
	fchs
	fstp	DWORD PTR tv280[ebp]
$L81924:
	mov	eax, DWORD PTR tv280[ebp]
	mov	DWORD PTR _frevs$[ebp], eax

; 288  : 	FTOL(frevs, revs);

	fld	DWORD PTR _frevs$[ebp]
	fadd	DWORD PTR __real@4b000000
	fstp	DWORD PTR __temp$81661[ebp]
	mov	eax, DWORD PTR __temp$81661[ebp]
	and	eax, 16777215				; 00ffffffH
	mov	DWORD PTR _revs$[ebp], eax

; 289  : 	FTOL((frevs - (float)revs) * REV_LIT_MAX, revper);

	fild	DWORD PTR _revs$[ebp]
	fsubr	DWORD PTR _frevs$[ebp]
	fmul	DWORD PTR __real@44800000
	fadd	DWORD PTR __real@4b000000
	fstp	DWORD PTR __temp$81664[ebp]
	mov	eax, DWORD PTR __temp$81664[ebp]
	and	eax, 16777215				; 00ffffffH
	mov	DWORD PTR _revper$[ebp], eax

; 290  : 	FTOL(TimeStep * 1024, revadd);

	fld	DWORD PTR ?TimeStep@@3MA		; TimeStep
	fmul	DWORD PTR __real@44800000
	fadd	DWORD PTR __real@4b000000
	fstp	DWORD PTR __temp$81668[ebp]
	mov	eax, DWORD PTR __temp$81668[ebp]
	and	eax, 16777215				; 00ffffffH
	mov	DWORD PTR _revadd$[ebp], eax

; 291  : 
; 292  : 	for (i = 0 ; i < REV_LIT_NUM ; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $L81671
$L81672:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$L81671:
	cmp	DWORD PTR _i$[ebp], 7
	jge	$L81673

; 293  : 	{
; 294  : 		if (revs > i) revdest = REV_LIT_MAX;

	mov	eax, DWORD PTR _revs$[ebp]
	cmp	eax, DWORD PTR _i$[ebp]
	jle	SHORT $L81674
	mov	DWORD PTR _revdest$[ebp], 1024		; 00000400H

; 295  : 		else if (revs < i) revdest = 0;

	jmp	SHORT $L81675
$L81674:
	mov	eax, DWORD PTR _revs$[ebp]
	cmp	eax, DWORD PTR _i$[ebp]
	jge	SHORT $L81676
	mov	DWORD PTR _revdest$[ebp], 0

; 296  : 		else revdest = revper;

	jmp	SHORT $L81675
$L81676:
	mov	eax, DWORD PTR _revper$[ebp]
	mov	DWORD PTR _revdest$[ebp], eax
$L81675:

; 297  : 
; 298  : 		if (RevLit[i] < revdest)

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _RevLit[eax*4]
	cmp	ecx, DWORD PTR _revdest$[ebp]
	jge	SHORT $L81678

; 299  : 		{
; 300  : 			RevLit[i] += revadd * 4;

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _RevLit[eax*4]
	mov	edx, DWORD PTR _revadd$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR _RevLit[ecx*4], eax

; 301  : 			if (RevLit[i] > REV_LIT_MAX) RevLit[i] = REV_LIT_MAX;

	mov	eax, DWORD PTR _i$[ebp]
	cmp	DWORD PTR _RevLit[eax*4], 1024		; 00000400H
	jle	SHORT $L81679
	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR _RevLit[eax*4], 1024		; 00000400H
$L81679:

; 302  : 		}
; 303  : 		else if (RevLit[i] > revdest)

	jmp	SHORT $L81680
$L81678:
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _RevLit[eax*4]
	cmp	ecx, DWORD PTR _revdest$[ebp]
	jle	SHORT $L81680

; 304  : 		{
; 305  : 			RevLit[i] -= revadd;

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _RevLit[eax*4]
	sub	ecx, DWORD PTR _revadd$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	mov	DWORD PTR _RevLit[edx*4], ecx

; 306  : 			if (RevLit[i] < 0) RevLit[i] = 0;

	mov	eax, DWORD PTR _i$[ebp]
	cmp	DWORD PTR _RevLit[eax*4], 0
	jge	SHORT $L81680
	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR _RevLit[eax*4], 0
$L81680:

; 307  : 		}
; 308  : 	}

	jmp	$L81672
$L81673:

; 309  : 
; 310  : 	p = RevsUV;

	mov	DWORD PTR _p$[ebp], OFFSET FLAT:_RevsUV

; 311  : 
; 312  : 	for (i = 0 ; i < REV_LIT_NUM ; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $L81683
$L81684:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$L81683:
	cmp	DWORD PTR _i$[ebp], 7
	jge	$L81685

; 313  : 	{
; 314  : 		tu = *p++ / 256.0f;

	mov	eax, DWORD PTR _p$[ebp]
	fld	DWORD PTR [eax]
	fdiv	DWORD PTR __real@43800000
	fstp	DWORD PTR _tu$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 4
	mov	DWORD PTR _p$[ebp], ecx

; 315  : 		tv = *p++ / 256.0f;

	mov	eax, DWORD PTR _p$[ebp]
	fld	DWORD PTR [eax]
	fdiv	DWORD PTR __real@43800000
	fstp	DWORD PTR _tv$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 4
	mov	DWORD PTR _p$[ebp], ecx

; 316  : 		twidth = *p++ / 256.0f;

	mov	eax, DWORD PTR _p$[ebp]
	fld	DWORD PTR [eax]
	fdiv	DWORD PTR __real@43800000
	fstp	DWORD PTR _twidth$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 4
	mov	DWORD PTR _p$[ebp], ecx

; 317  : 		theight = *p++ / 256.0f;

	mov	eax, DWORD PTR _p$[ebp]
	fld	DWORD PTR [eax]
	fdiv	DWORD PTR __real@43800000
	fstp	DWORD PTR _theight$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 4
	mov	DWORD PTR _p$[ebp], ecx

; 318  : 
; 319  : 		x = RevsPositions[i * 2];

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 1
	mov	ecx, DWORD PTR _RevsPositions[eax*4]
	mov	DWORD PTR _x$[ebp], ecx

; 320  : 		y = RevsPositions[i * 2 + 1];

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 1
	mov	ecx, DWORD PTR _RevsPositions[eax*4+4]
	mov	DWORD PTR _y$[ebp], ecx

; 321  : 
; 322  : 		xsize = twidth * 256;

	fld	DWORD PTR _twidth$[ebp]
	fmul	DWORD PTR __real@43800000
	fstp	DWORD PTR _xsize$[ebp]

; 323  : 		ysize = theight * 256;

	fld	DWORD PTR _theight$[ebp]
	fmul	DWORD PTR __real@43800000
	fstp	DWORD PTR _ysize$[ebp]

; 324  : 
; 325  : 		if (!RevLit[i])

	mov	eax, DWORD PTR _i$[ebp]
	cmp	DWORD PTR _RevLit[eax*4], 0
	jne	SHORT $L81686

; 326  : 			DrawPanelSprite(x, y, xsize, ysize, tu, tv, twidth, theight, 0xc0ffffff);

	push	-1056964609				; c0ffffffH
	mov	eax, DWORD PTR _theight$[ebp]
	push	eax
	mov	ecx, DWORD PTR _twidth$[ebp]
	push	ecx
	mov	edx, DWORD PTR _tv$[ebp]
	push	edx
	mov	eax, DWORD PTR _tu$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ysize$[ebp]
	push	ecx
	mov	edx, DWORD PTR _xsize$[ebp]
	push	edx
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	call	?DrawPanelSprite@@YAXMMMMMMMMJ@Z	; DrawPanelSprite
	add	esp, 36					; 00000024H

; 327  : 		else if (RevLit[i] == REV_LIT_MAX)

	jmp	$L81687
$L81686:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	DWORD PTR _RevLit[eax*4], 1024		; 00000400H
	jne	SHORT $L81688

; 328  : 			DrawPanelSprite(x, y, xsize, ysize, tu, tv + (25.0f / 256.0f), twidth, theight, 0xc0ffffff);

	push	-1056964609				; c0ffffffH
	mov	eax, DWORD PTR _theight$[ebp]
	push	eax
	mov	ecx, DWORD PTR _twidth$[ebp]
	push	ecx
	fld	DWORD PTR _tv$[ebp]
	fadd	DWORD PTR __real@3dc80000
	push	ecx
	fstp	DWORD PTR [esp]
	mov	edx, DWORD PTR _tu$[ebp]
	push	edx
	mov	eax, DWORD PTR _ysize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _xsize$[ebp]
	push	ecx
	mov	edx, DWORD PTR _y$[ebp]
	push	edx
	mov	eax, DWORD PTR _x$[ebp]
	push	eax
	call	?DrawPanelSprite@@YAXMMMMMMMMJ@Z	; DrawPanelSprite
	add	esp, 36					; 00000024H

; 329  : 		else

	jmp	$L81687
$L81688:

; 330  : 		{
; 331  : 			col = RevLit[i] * 0xc0 / REV_LIT_MAX;

	mov	eax, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _RevLit[eax*4]
	imul	eax, 192				; 000000c0H
	cdq
	and	edx, 1023				; 000003ffH
	add	eax, edx
	sar	eax, 10					; 0000000aH
	mov	DWORD PTR _col$[ebp], eax

; 332  : 			DrawPanelSprite(x, y, xsize, ysize, tu, tv, twidth, theight, ((0xc0 - col) << 24) | 0xffffff);

	mov	eax, 192				; 000000c0H
	sub	eax, DWORD PTR _col$[ebp]
	shl	eax, 24					; 00000018H
	or	eax, 16777215				; 00ffffffH
	push	eax
	mov	ecx, DWORD PTR _theight$[ebp]
	push	ecx
	mov	edx, DWORD PTR _twidth$[ebp]
	push	edx
	mov	eax, DWORD PTR _tv$[ebp]
	push	eax
	mov	ecx, DWORD PTR _tu$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ysize$[ebp]
	push	edx
	mov	eax, DWORD PTR _xsize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _y$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x$[ebp]
	push	edx
	call	?DrawPanelSprite@@YAXMMMMMMMMJ@Z	; DrawPanelSprite
	add	esp, 36					; 00000024H

; 333  : 			DrawPanelSprite(x, y, xsize, ysize, tu, tv + (25.0f / 256.0f), twidth, theight, (col << 24) | 0xffffff);

	mov	eax, DWORD PTR _col$[ebp]
	shl	eax, 24					; 00000018H
	or	eax, 16777215				; 00ffffffH
	push	eax
	mov	ecx, DWORD PTR _theight$[ebp]
	push	ecx
	mov	edx, DWORD PTR _twidth$[ebp]
	push	edx
	fld	DWORD PTR _tv$[ebp]
	fadd	DWORD PTR __real@3dc80000
	push	ecx
	fstp	DWORD PTR [esp]
	mov	eax, DWORD PTR _tu$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ysize$[ebp]
	push	ecx
	mov	edx, DWORD PTR _xsize$[ebp]
	push	edx
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	call	?DrawPanelSprite@@YAXMMMMMMMMJ@Z	; DrawPanelSprite
	add	esp, 36					; 00000024H
$L81687:

; 334  : 		}
; 335  : 	}

	jmp	$L81684
$L81685:

; 336  : 
; 337  : // pickup
; 338  : 
; 339  : 	DrawPanelSprite(4, 56, 64, 64, 190.0f / 256.0f, 157.0f / 256.0f, 64.0f / 256.0f, 64.0f / 256.0f, 0xe0ffffff);

	push	-520093697				; e0ffffffH
	push	1048576000				; 3e800000H
	push	1048576000				; 3e800000H
	push	1058865152				; 3f1d0000H
	push	1061027840				; 3f3e0000H
	push	1115684864				; 42800000H
	push	1115684864				; 42800000H
	push	1113587712				; 42600000H
	push	1082130432				; 40800000H
	call	?DrawPanelSprite@@YAXMMMMMMMMJ@Z	; DrawPanelSprite
	add	esp, 36					; 00000024H

; 340  : 
; 341  : 	if (PLR_LocalPlayer->PickupCycleSpeed)

	mov	eax, DWORD PTR ?PLR_LocalPlayer@@3PAUPlayerStruct@@A ; PLR_LocalPlayer
	fld	DWORD PTR __real@00000000
	fld	DWORD PTR [eax+10224]
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jnp	SHORT $L81690

; 342  : 	{
; 343  : 		pickup = (long)PLR_LocalPlayer->PickupCycleType;

	mov	eax, DWORD PTR ?PLR_LocalPlayer@@3PAUPlayerStruct@@A ; PLR_LocalPlayer
	fld	DWORD PTR [eax+10220]
	call	__ftol2
	mov	DWORD PTR _pickup$[ebp], eax

; 344  : 		pickup2 = (pickup + 1) % PICKUP_NUM;

	mov	eax, DWORD PTR _pickup$[ebp]
	add	eax, 1
	cdq
	mov	ecx, 9
	idiv	ecx
	mov	DWORD PTR _pickup2$[ebp], edx

; 345  : 
; 346  : 		FTOL((PLR_LocalPlayer->PickupCycleType - (float)pickup) * 255.0f, col);

	fild	DWORD PTR _pickup$[ebp]
	mov	eax, DWORD PTR ?PLR_LocalPlayer@@3PAUPlayerStruct@@A ; PLR_LocalPlayer
	fsubr	DWORD PTR [eax+10220]
	fmul	DWORD PTR __real@437f0000
	fadd	DWORD PTR __real@4b000000
	fstp	DWORD PTR __temp$81692[ebp]
	mov	eax, DWORD PTR __temp$81692[ebp]
	and	eax, 16777215				; 00ffffffH
	mov	DWORD PTR _col$[ebp], eax

; 347  : 		col |= (col << 8) | (col << 16);

	mov	eax, DWORD PTR _col$[ebp]
	shl	eax, 8
	mov	ecx, DWORD PTR _col$[ebp]
	shl	ecx, 16					; 00000010H
	or	eax, ecx
	or	eax, DWORD PTR _col$[ebp]
	mov	DWORD PTR _col$[ebp], eax

; 348  : 	}
; 349  : 	else if (PLR_LocalPlayer->PickupNum)

	jmp	SHORT $L81696
$L81690:
	mov	eax, DWORD PTR ?PLR_LocalPlayer@@3PAUPlayerStruct@@A ; PLR_LocalPlayer
	cmp	DWORD PTR [eax+10232], 0
	je	SHORT $L81697

; 350  : 	{
; 351  : 		pickup = PLR_LocalPlayer->PickupType;

	mov	eax, DWORD PTR ?PLR_LocalPlayer@@3PAUPlayerStruct@@A ; PLR_LocalPlayer
	mov	ecx, DWORD PTR [eax+10228]
	mov	DWORD PTR _pickup$[ebp], ecx

; 352  : 		col = 0;

	mov	DWORD PTR _col$[ebp], 0

; 353  : 	}
; 354  : 	else

	jmp	SHORT $L81696
$L81697:

; 355  : 	{
; 356  : 		pickup = -1;

	mov	DWORD PTR _pickup$[ebp], -1
$L81696:

; 357  : 	}
; 358  : 
; 359  : 	if (pickup != -1)

	cmp	DWORD PTR _pickup$[ebp], -1
	je	$L81699

; 360  : 	{
; 361  : 		ALPHA_SRC(D3DBLEND_ONE);

	movsx	eax, WORD PTR ?RenderAlphaSrc@@3FA	; RenderAlphaSrc
	cmp	eax, 2
	je	SHORT $L81700
	mov	WORD PTR ?RenderAlphaSrc@@3FA, 2	; RenderAlphaSrc
	movsx	eax, WORD PTR ?RenderAlphaSrc@@3FA	; RenderAlphaSrc
	push	eax
	push	19					; 00000013H
	mov	ecx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	eax
	call	DWORD PTR [edx+88]
	mov	eax, DWORD PTR ?RenderStateChange@@3JA	; RenderStateChange
	add	eax, 1
	mov	DWORD PTR ?RenderStateChange@@3JA, eax	; RenderStateChange
$L81700:

; 362  : 		ALPHA_DEST(D3DBLEND_ONE);

	movsx	eax, WORD PTR ?RenderAlphaDest@@3FA	; RenderAlphaDest
	cmp	eax, 2
	je	SHORT $L81701
	mov	WORD PTR ?RenderAlphaDest@@3FA, 2	; RenderAlphaDest
	movsx	eax, WORD PTR ?RenderAlphaDest@@3FA	; RenderAlphaDest
	push	eax
	push	20					; 00000014H
	mov	ecx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	eax
	call	DWORD PTR [edx+88]
	mov	eax, DWORD PTR ?RenderStateChange@@3JA	; RenderStateChange
	add	eax, 1
	mov	DWORD PTR ?RenderStateChange@@3JA, eax	; RenderStateChange
$L81701:

; 363  : 
; 364  : 		tu = (PickupUV[pickup * 2]) / 256.0f;

	mov	eax, DWORD PTR _pickup$[ebp]
	shl	eax, 1
	fld	DWORD PTR _PickupUV[eax*4]
	fdiv	DWORD PTR __real@43800000
	fstp	DWORD PTR _tu$[ebp]

; 365  : 		tv = (PickupUV[pickup * 2 + 1]) / 256.0f;

	mov	eax, DWORD PTR _pickup$[ebp]
	shl	eax, 1
	fld	DWORD PTR _PickupUV[eax*4+4]
	fdiv	DWORD PTR __real@43800000
	fstp	DWORD PTR _tv$[ebp]

; 366  : 		DrawPanelSprite(20, 72, 32, 32, tu, tv, 32.0f / 256.0f, 32.0f / 256.0f, 0xffffff - col);

	mov	eax, 16777215				; 00ffffffH
	sub	eax, DWORD PTR _col$[ebp]
	push	eax
	push	1040187392				; 3e000000H
	push	1040187392				; 3e000000H
	mov	ecx, DWORD PTR _tv$[ebp]
	push	ecx
	mov	edx, DWORD PTR _tu$[ebp]
	push	edx
	push	1107296256				; 42000000H
	push	1107296256				; 42000000H
	push	1116733440				; 42900000H
	push	1101004800				; 41a00000H
	call	?DrawPanelSprite@@YAXMMMMMMMMJ@Z	; DrawPanelSprite
	add	esp, 36					; 00000024H

; 367  : 
; 368  : 		if (col)

	cmp	DWORD PTR _col$[ebp], 0
	je	SHORT $L81702

; 369  : 		{
; 370  : 			tu = (PickupUV[pickup2 * 2]) / 256.0f;

	mov	eax, DWORD PTR _pickup2$[ebp]
	shl	eax, 1
	fld	DWORD PTR _PickupUV[eax*4]
	fdiv	DWORD PTR __real@43800000
	fstp	DWORD PTR _tu$[ebp]

; 371  : 			tv = (PickupUV[pickup2 * 2 + 1]) / 256.0f;

	mov	eax, DWORD PTR _pickup2$[ebp]
	shl	eax, 1
	fld	DWORD PTR _PickupUV[eax*4+4]
	fdiv	DWORD PTR __real@43800000
	fstp	DWORD PTR _tv$[ebp]

; 372  : 			DrawPanelSprite(20, 72, 32, 32, tu, tv, 32.0f / 256.0f, 32.0f / 256.0f, col);

	mov	eax, DWORD PTR _col$[ebp]
	push	eax
	push	1040187392				; 3e000000H
	push	1040187392				; 3e000000H
	mov	ecx, DWORD PTR _tv$[ebp]
	push	ecx
	mov	edx, DWORD PTR _tu$[ebp]
	push	edx
	push	1107296256				; 42000000H
	push	1107296256				; 42000000H
	push	1116733440				; 42900000H
	push	1101004800				; 41a00000H
	call	?DrawPanelSprite@@YAXMMMMMMMMJ@Z	; DrawPanelSprite
	add	esp, 36					; 00000024H
$L81702:

; 373  : 		}
; 374  : 
; 375  : 		ALPHA_SRC(D3DBLEND_SRCALPHA);

	movsx	eax, WORD PTR ?RenderAlphaSrc@@3FA	; RenderAlphaSrc
	cmp	eax, 5
	je	SHORT $L81703
	mov	WORD PTR ?RenderAlphaSrc@@3FA, 5	; RenderAlphaSrc
	movsx	eax, WORD PTR ?RenderAlphaSrc@@3FA	; RenderAlphaSrc
	push	eax
	push	19					; 00000013H
	mov	ecx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	eax
	call	DWORD PTR [edx+88]
	mov	eax, DWORD PTR ?RenderStateChange@@3JA	; RenderStateChange
	add	eax, 1
	mov	DWORD PTR ?RenderStateChange@@3JA, eax	; RenderStateChange
$L81703:

; 376  : 		ALPHA_DEST(D3DBLEND_INVSRCALPHA);

	movsx	eax, WORD PTR ?RenderAlphaDest@@3FA	; RenderAlphaDest
	cmp	eax, 6
	je	SHORT $L81699
	mov	WORD PTR ?RenderAlphaDest@@3FA, 6	; RenderAlphaDest
	movsx	eax, WORD PTR ?RenderAlphaDest@@3FA	; RenderAlphaDest
	push	eax
	push	20					; 00000014H
	mov	ecx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	eax
	call	DWORD PTR [edx+88]
	mov	eax, DWORD PTR ?RenderStateChange@@3JA	; RenderStateChange
	add	eax, 1
	mov	DWORD PTR ?RenderStateChange@@3JA, eax	; RenderStateChange
$L81699:

; 377  : 	}
; 378  : 
; 379  : // big font
; 380  : 
; 381  : 	SET_TPAGE(TPAGE_BIGFONT);

	movsx	eax, WORD PTR ?RenderTP@@3FA		; RenderTP
	cmp	eax, 23					; 00000017H
	je	SHORT $L81705
	mov	WORD PTR ?RenderTP@@3FA, 23		; RenderTP, 00000017H
	movsx	eax, WORD PTR ?RenderTP@@3FA		; RenderTP
	cmp	eax, -1
	jne	SHORT $L81706
	push	0
	push	0
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	edx
	call	DWORD PTR [ecx+152]
	mov	eax, DWORD PTR ?TextureStateChange@@3JA	; TextureStateChange
	add	eax, 1
	mov	DWORD PTR ?TextureStateChange@@3JA, eax	; TextureStateChange
	jmp	SHORT $L81705
$L81706:
	movsx	eax, WORD PTR ?RenderTP@@3FA		; RenderTP
	shl	eax, 6
	mov	ecx, DWORD PTR ?TexInfo@@3PAUTEXINFO@@A	; TexInfo
	mov	edx, DWORD PTR [ecx+eax+52]
	push	edx
	push	0
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	edx
	call	DWORD PTR [ecx+152]
	mov	eax, DWORD PTR ?TextureStateChange@@3JA	; TextureStateChange
	add	eax, 1
	mov	DWORD PTR ?TextureStateChange@@3JA, eax	; TextureStateChange
$L81705:

; 382  : 
; 383  : // countdown?
; 384  : 
; 385  : 	if (CountdownTime && CountdownTime < (1000 * 3))

	cmp	DWORD PTR ?CountdownTime@@3KA, 0	; CountdownTime
	je	SHORT $L81708
	cmp	DWORD PTR ?CountdownTime@@3KA, 3000	; CountdownTime, 00000bb8H
	jae	SHORT $L81708

; 386  : 	{
; 387  : 		wsprintf(buf, "%d", (CountdownTime / 1000 + 1));

	mov	eax, DWORD PTR ?CountdownTime@@3KA	; CountdownTime
	xor	edx, edx
	mov	ecx, 1000				; 000003e8H
	div	ecx
	add	eax, 1
	push	eax
	push	OFFSET FLAT:??_C@_02DPKJAMEF@?$CFd?$AA@
	lea	edx, DWORD PTR _buf$[ebp]
	push	edx
	call	DWORD PTR __imp__wsprintfA
	add	esp, 12					; 0000000cH

; 388  : 		DumpBigText(224, 0, 192, 256, 0xc0ffffff, buf);

	lea	eax, DWORD PTR _buf$[ebp]
	push	eax
	push	-1056964609				; c0ffffffH
	push	256					; 00000100H
	push	192					; 000000c0H
	push	0
	push	224					; 000000e0H
	call	?DumpBigText@@YAXFFFFJPAD@Z		; DumpBigText
	add	esp, 24					; 00000018H
$L81708:

; 389  : 	}
; 390  : 
; 391  : // normal font
; 392  : 
; 393  : 	SET_TPAGE(TPAGE_FONT);

	movsx	eax, WORD PTR ?RenderTP@@3FA		; RenderTP
	cmp	eax, 22					; 00000016H
	je	SHORT $L81710
	mov	WORD PTR ?RenderTP@@3FA, 22		; RenderTP, 00000016H
	movsx	eax, WORD PTR ?RenderTP@@3FA		; RenderTP
	cmp	eax, -1
	jne	SHORT $L81711
	push	0
	push	0
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	edx
	call	DWORD PTR [ecx+152]
	mov	eax, DWORD PTR ?TextureStateChange@@3JA	; TextureStateChange
	add	eax, 1
	mov	DWORD PTR ?TextureStateChange@@3JA, eax	; TextureStateChange
	jmp	SHORT $L81710
$L81711:
	movsx	eax, WORD PTR ?RenderTP@@3FA		; RenderTP
	shl	eax, 6
	mov	ecx, DWORD PTR ?TexInfo@@3PAUTEXINFO@@A	; TexInfo
	mov	edx, DWORD PTR [ecx+eax+52]
	push	edx
	push	0
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	edx
	call	DWORD PTR [ecx+152]
	mov	eax, DWORD PTR ?TextureStateChange@@3JA	; TextureStateChange
	add	eax, 1
	mov	DWORD PTR ?TextureStateChange@@3JA, eax	; TextureStateChange
$L81710:

; 394  : 
; 395  : // split time?
; 396  : 
; 397  : 	if (DisplaySplitCount)

	fld	DWORD PTR __real@00000000
	fld	DWORD PTR _DisplaySplitCount
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jnp	$L81713

; 398  : 	{
; 399  : 		DisplaySplitCount -= TimeStep;

	fld	DWORD PTR _DisplaySplitCount
	fsub	DWORD PTR ?TimeStep@@3MA		; TimeStep
	fstp	DWORD PTR _DisplaySplitCount

; 400  : 		if (DisplaySplitCount < 0) DisplaySplitCount = 0;

	fld	DWORD PTR _DisplaySplitCount
	fcomp	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L81714
	mov	DWORD PTR _DisplaySplitCount, 0
$L81714:

; 401  : 
; 402  : 		DumpText(290, 128, 12, 16, 0xc000ffff, "split");

	push	OFFSET FLAT:??_C@_05EHPMMFBK@split?$AA@
	push	-1073676289				; c000ffffH
	push	16					; 00000010H
	push	12					; 0000000cH
	push	128					; 00000080H
	push	290					; 00000122H
	call	?DumpText@@YAXFFFFJPAD@Z		; DumpText
	add	esp, 24					; 00000018H

; 403  : 		if (DisplaySplitTime > 0) wsprintf(buf, "+%02d:%02d:%03d", MINUTES(DisplaySplitTime), SECONDS(DisplaySplitTime), THOUSANDTHS(DisplaySplitTime));

	cmp	DWORD PTR _DisplaySplitTime, 0
	jle	SHORT $L81716
	mov	eax, DWORD PTR _DisplaySplitTime
	cdq
	mov	ecx, 1000				; 000003e8H
	idiv	ecx
	push	edx
	mov	eax, DWORD PTR _DisplaySplitTime
	cdq
	mov	ecx, 1000				; 000003e8H
	idiv	ecx
	cdq
	mov	ecx, 60					; 0000003cH
	idiv	ecx
	push	edx
	mov	eax, DWORD PTR _DisplaySplitTime
	cdq
	mov	ecx, 60000				; 0000ea60H
	idiv	ecx
	push	eax
	push	OFFSET FLAT:??_C@_0BA@IMIDIBIE@?$CL?$CF02d?3?$CF02d?3?$CF03d?$AA@
	lea	edx, DWORD PTR _buf$[ebp]
	push	edx
	call	DWORD PTR __imp__wsprintfA
	add	esp, 20					; 00000014H

; 404  : 		else wsprintf(buf, "-%02d:%02d:%03d", MINUTES(-DisplaySplitTime), SECONDS(-DisplaySplitTime), THOUSANDTHS(-DisplaySplitTime));

	jmp	SHORT $L81718
$L81716:
	mov	eax, DWORD PTR _DisplaySplitTime
	neg	eax
	cdq
	mov	ecx, 1000				; 000003e8H
	idiv	ecx
	push	edx
	mov	eax, DWORD PTR _DisplaySplitTime
	neg	eax
	cdq
	mov	ecx, 1000				; 000003e8H
	idiv	ecx
	cdq
	mov	ecx, 60					; 0000003cH
	idiv	ecx
	push	edx
	mov	eax, DWORD PTR _DisplaySplitTime
	neg	eax
	cdq
	mov	ecx, 60000				; 0000ea60H
	idiv	ecx
	push	eax
	push	OFFSET FLAT:??_C@_0BA@NPBCOIGA@?9?$CF02d?3?$CF02d?3?$CF03d?$AA@
	lea	edx, DWORD PTR _buf$[ebp]
	push	edx
	call	DWORD PTR __imp__wsprintfA
	add	esp, 20					; 00000014H
$L81718:

; 405  : 		DumpText(260, 144, 12, 16, 0xc0ffffff, buf);

	lea	eax, DWORD PTR _buf$[ebp]
	push	eax
	push	-1056964609				; c0ffffffH
	push	16					; 00000010H
	push	12					; 0000000cH
	push	144					; 00000090H
	push	260					; 00000104H
	call	?DumpText@@YAXFFFFJPAD@Z		; DumpText
	add	esp, 24					; 00000018H
$L81713:

; 406  : 	}
; 407  : 
; 408  : // lap time
; 409  : 
; 410  : 	DumpText(588, 96, 12, 16, 0xc000ffff, "lap");

	push	OFFSET FLAT:??_C@_03MJGBLALJ@lap?$AA@
	push	-1073676289				; c000ffffH
	push	16					; 00000010H
	push	12					; 0000000cH
	push	96					; 00000060H
	push	588					; 0000024cH
	call	?DumpText@@YAXFFFFJPAD@Z		; DumpText
	add	esp, 24					; 00000018H

; 411  : 	wsprintf(buf, "%02d:%02d:%03d", MINUTES(PLR_LocalPlayer->car.CurrentLapTime), SECONDS(PLR_LocalPlayer->car.CurrentLapTime), THOUSANDTHS(PLR_LocalPlayer->car.CurrentLapTime));

	mov	eax, DWORD PTR ?PLR_LocalPlayer@@3PAUPlayerStruct@@A ; PLR_LocalPlayer
	mov	eax, DWORD PTR [eax+3468]
	cdq
	mov	ecx, 1000				; 000003e8H
	idiv	ecx
	push	edx
	mov	edx, DWORD PTR ?PLR_LocalPlayer@@3PAUPlayerStruct@@A ; PLR_LocalPlayer
	mov	eax, DWORD PTR [edx+3468]
	cdq
	mov	ecx, 1000				; 000003e8H
	idiv	ecx
	cdq
	mov	ecx, 60					; 0000003cH
	idiv	ecx
	push	edx
	mov	edx, DWORD PTR ?PLR_LocalPlayer@@3PAUPlayerStruct@@A ; PLR_LocalPlayer
	mov	eax, DWORD PTR [edx+3468]
	cdq
	mov	ecx, 60000				; 0000ea60H
	idiv	ecx
	push	eax
	push	OFFSET FLAT:??_C@_0P@PKAPJJPG@?$CF02d?3?$CF02d?3?$CF03d?$AA@
	lea	edx, DWORD PTR _buf$[ebp]
	push	edx
	call	DWORD PTR __imp__wsprintfA
	add	esp, 20					; 00000014H

; 412  : 	DumpText(516, 112, 12, 16, 0xc0ffffff, buf);

	lea	eax, DWORD PTR _buf$[ebp]
	push	eax
	push	-1056964609				; c0ffffffH
	push	16					; 00000010H
	push	12					; 0000000cH
	push	112					; 00000070H
	push	516					; 00000204H
	call	?DumpText@@YAXFFFFJPAD@Z		; DumpText
	add	esp, 24					; 00000018H

; 413  : 
; 414  : // race time
; 415  : 
; 416  : 	DumpText(576, 136, 12, 16, 0xc000ffff, "race");

	push	OFFSET FLAT:??_C@_04GLEOMBLA@race?$AA@
	push	-1073676289				; c000ffffH
	push	16					; 00000010H
	push	12					; 0000000cH
	push	136					; 00000088H
	push	576					; 00000240H
	call	?DumpText@@YAXFFFFJPAD@Z		; DumpText
	add	esp, 24					; 00000018H

; 417  : 	wsprintf(buf, "%02d:%02d:%03d", MINUTES(TotalRaceTime), SECONDS(TotalRaceTime), THOUSANDTHS(TotalRaceTime));

	mov	eax, DWORD PTR ?TotalRaceTime@@3KA	; TotalRaceTime
	xor	edx, edx
	mov	ecx, 1000				; 000003e8H
	div	ecx
	push	edx
	mov	eax, DWORD PTR ?TotalRaceTime@@3KA	; TotalRaceTime
	xor	edx, edx
	mov	ecx, 1000				; 000003e8H
	div	ecx
	xor	edx, edx
	mov	ecx, 60					; 0000003cH
	div	ecx
	push	edx
	mov	eax, DWORD PTR ?TotalRaceTime@@3KA	; TotalRaceTime
	xor	edx, edx
	mov	ecx, 60000				; 0000ea60H
	div	ecx
	push	eax
	push	OFFSET FLAT:??_C@_0P@PKAPJJPG@?$CF02d?3?$CF02d?3?$CF03d?$AA@
	lea	edx, DWORD PTR _buf$[ebp]
	push	edx
	call	DWORD PTR __imp__wsprintfA
	add	esp, 20					; 00000014H

; 418  : 	DumpText(516, 152, 12, 16, 0xc0ffffff, buf);

	lea	eax, DWORD PTR _buf$[ebp]
	push	eax
	push	-1056964609				; c0ffffffH
	push	16					; 00000010H
	push	12					; 0000000cH
	push	152					; 00000098H
	push	516					; 00000204H
	call	?DumpText@@YAXFFFFJPAD@Z		; DumpText
	add	esp, 24					; 00000018H

; 419  : 
; 420  : // speed
; 421  : 
; 422  : 	DumpText(588, 448, 12, 16, 0xc000ffff, SpeedUnitText[SpeedUnits]);

	mov	eax, DWORD PTR ?SpeedUnits@@3JA		; SpeedUnits
	mov	ecx, DWORD PTR _SpeedUnitText[eax*4]
	push	ecx
	push	-1073676289				; c000ffffH
	push	16					; 00000010H
	push	12					; 0000000cH
	push	448					; 000001c0H
	push	588					; 0000024cH
	call	?DumpText@@YAXFFFFJPAD@Z		; DumpText
	add	esp, 24					; 00000018H

; 423  : 	speed = (long)(SpeedUnitScale[SpeedUnits] * VecLen(&PLR_LocalPlayer->car.Body->Centre.Vel));

	mov	eax, DWORD PTR ?PLR_LocalPlayer@@3PAUPlayerStruct@@A ; PLR_LocalPlayer
	mov	ecx, DWORD PTR [eax+900]
	mov	edx, DWORD PTR ?PLR_LocalPlayer@@3PAUPlayerStruct@@A ; PLR_LocalPlayer
	mov	eax, DWORD PTR [edx+900]
	fld	DWORD PTR [ecx+32]
	fmul	DWORD PTR [eax+32]
	mov	ecx, DWORD PTR ?PLR_LocalPlayer@@3PAUPlayerStruct@@A ; PLR_LocalPlayer
	mov	edx, DWORD PTR [ecx+900]
	mov	eax, DWORD PTR ?PLR_LocalPlayer@@3PAUPlayerStruct@@A ; PLR_LocalPlayer
	mov	ecx, DWORD PTR [eax+900]
	fld	DWORD PTR [edx+36]
	fmul	DWORD PTR [ecx+36]
	faddp	ST(1), ST(0)
	mov	edx, DWORD PTR ?PLR_LocalPlayer@@3PAUPlayerStruct@@A ; PLR_LocalPlayer
	mov	eax, DWORD PTR [edx+900]
	mov	ecx, DWORD PTR ?PLR_LocalPlayer@@3PAUPlayerStruct@@A ; PLR_LocalPlayer
	mov	edx, DWORD PTR [ecx+900]
	fld	DWORD PTR [eax+40]
	fmul	DWORD PTR [edx+40]
	faddp	ST(1), ST(0)
	push	ecx
	fstp	DWORD PTR [esp]
	call	?sqrt@@YAMM@Z				; sqrt
	add	esp, 4
	mov	eax, DWORD PTR ?SpeedUnits@@3JA		; SpeedUnits
	fmul	DWORD PTR _SpeedUnitScale[eax*4]
	call	__ftol2
	mov	DWORD PTR _speed$[ebp], eax

; 424  : 	wsprintf(buf, "%4d", speed);

	mov	eax, DWORD PTR _speed$[ebp]
	push	eax
	push	OFFSET FLAT:??_C@_03GLKEJMAA@?$CF4d?$AA@
	lea	ecx, DWORD PTR _buf$[ebp]
	push	ecx
	call	DWORD PTR __imp__wsprintfA
	add	esp, 12					; 0000000cH

; 425  : 	DumpText(528, 448, 12, 16, 0xc0ffffff, buf);

	lea	eax, DWORD PTR _buf$[ebp]
	push	eax
	push	-1056964609				; c0ffffffH
	push	16					; 00000010H
	push	12					; 0000000cH
	push	448					; 000001c0H
	push	528					; 00000210H
	call	?DumpText@@YAXFFFFJPAD@Z		; DumpText
	add	esp, 24					; 00000018H

; 426  : 
; 427  : // best acc
; 428  : //	wsprintf(buf, "0-15: %3dms", (PLR_LocalPlayer->car.Best0to15 > ZERO)? (int)(1000 * PLR_LocalPlayer->car.Best0to15): 0);
; 429  : //	DumpText(100, 50, 12, 16, 0xc0ffffff, buf);
; 430  : //	wsprintf(buf, "0-25: %3dms", (PLR_LocalPlayer->car.Best0to25 > ZERO)? (int)(1000 * PLR_LocalPlayer->car.Best0to25): 0);
; 431  : //	DumpText(100, 70, 12, 16, 0xc0ffffff, buf);
; 432  : //	wsprintf(buf, "ValidNode: %d (%d)", PLR_LocalPlayer->ValidRailCamNode, (PLR_LocalPlayer->ValidRailCamNode == -1)? -1: CAM_CameraNode[PLR_LocalPlayer->ValidRailCamNode].ID);
; 433  : //	DumpText(100, 50, 12, 16, 0xffff0000, buf);
; 434  : //	wsprintf(buf, "BangMag: %d", (int)(100 * PLR_LocalPlayer->car.Body->BangMag));
; 435  : //	DumpText(100, 50, 12, 16, 0xffff0000, buf);
; 436  : //	wsprintf(buf, "Down: %8d %8d %8d (%8d)", (int)(100 * DEBUG_DownForce.v[X]), (int)(100 * DEBUG_DownForce.v[Y]), (int)(100 * DEBUG_DownForce.v[Z]), (int)(100 * PLR_LocalPlayer->car.DownForceMod));
; 437  : //	DumpText(100, 50, 8, 12, 0xffff0000, buf);
; 438  : 
; 439  : // laps
; 440  : 
; 441  : 	DumpText(16, 16, 12, 16, 0xc000ffff, "lap");

	push	OFFSET FLAT:??_C@_03MJGBLALJ@lap?$AA@
	push	-1073676289				; c000ffffH
	push	16					; 00000010H
	push	12					; 0000000cH
	push	16					; 00000010H
	push	16					; 00000010H
	call	?DumpText@@YAXFFFFJPAD@Z		; DumpText
	add	esp, 24					; 00000018H

; 442  : 	wsprintf(buf, "%d/%d", PLR_LocalPlayer->car.Laps + 1, 5);

	push	5
	mov	eax, DWORD PTR ?PLR_LocalPlayer@@3PAUPlayerStruct@@A ; PLR_LocalPlayer
	mov	ecx, DWORD PTR [eax+3464]
	add	ecx, 1
	push	ecx
	push	OFFSET FLAT:??_C@_05LCKIIOJE@?$CFd?1?$CFd?$AA@
	lea	edx, DWORD PTR _buf$[ebp]
	push	edx
	call	DWORD PTR __imp__wsprintfA
	add	esp, 16					; 00000010H

; 443  : 	DumpText(16, 32, 12, 16, 0xc0ffffff, buf);

	lea	eax, DWORD PTR _buf$[ebp]
	push	eax
	push	-1056964609				; c0ffffffH
	push	16					; 00000010H
	push	12					; 0000000cH
	push	32					; 00000020H
	push	16					; 00000010H
	call	?DumpText@@YAXFFFFJPAD@Z		; DumpText
	add	esp, 24					; 00000018H

; 444  : 
; 445  : // position
; 446  : 
; 447  : 	if (GameSettings.GameType != GAMETYPE_TRIAL)

	cmp	DWORD PTR ?GameSettings@@3UGAME_SETTINGS@@A, 0
	je	SHORT $L81727

; 448  : 	{
; 449  : 		DumpText(58, 416, 12, 16, 0xc0ffffff, "1");

	push	OFFSET FLAT:??_C@_01HIHLOKLC@1?$AA@
	push	-1056964609				; c0ffffffH
	push	16					; 00000010H
	push	12					; 0000000cH
	push	416					; 000001a0H
	push	58					; 0000003aH
	call	?DumpText@@YAXFFFFJPAD@Z		; DumpText
	add	esp, 24					; 00000018H
$L81727:

; 450  : 	}
; 451  : 
; 452  : // last lap
; 453  : 
; 454  : 	DumpText(528, 16, 12, 16, 0xc000ffff, "last lap");

	push	OFFSET FLAT:??_C@_08CEMIADPL@last?5lap?$AA@
	push	-1073676289				; c000ffffH
	push	16					; 00000010H
	push	12					; 0000000cH
	push	16					; 00000010H
	push	528					; 00000210H
	call	?DumpText@@YAXFFFFJPAD@Z		; DumpText
	add	esp, 24					; 00000018H

; 455  : 	wsprintf(buf, "%02d:%02d:%03d", MINUTES(PLR_LocalPlayer->car.LastLapTime), SECONDS(PLR_LocalPlayer->car.LastLapTime), THOUSANDTHS(PLR_LocalPlayer->car.LastLapTime));

	mov	eax, DWORD PTR ?PLR_LocalPlayer@@3PAUPlayerStruct@@A ; PLR_LocalPlayer
	mov	eax, DWORD PTR [eax+3472]
	cdq
	mov	ecx, 1000				; 000003e8H
	idiv	ecx
	push	edx
	mov	edx, DWORD PTR ?PLR_LocalPlayer@@3PAUPlayerStruct@@A ; PLR_LocalPlayer
	mov	eax, DWORD PTR [edx+3472]
	cdq
	mov	ecx, 1000				; 000003e8H
	idiv	ecx
	cdq
	mov	ecx, 60					; 0000003cH
	idiv	ecx
	push	edx
	mov	edx, DWORD PTR ?PLR_LocalPlayer@@3PAUPlayerStruct@@A ; PLR_LocalPlayer
	mov	eax, DWORD PTR [edx+3472]
	cdq
	mov	ecx, 60000				; 0000ea60H
	idiv	ecx
	push	eax
	push	OFFSET FLAT:??_C@_0P@PKAPJJPG@?$CF02d?3?$CF02d?3?$CF03d?$AA@
	lea	edx, DWORD PTR _buf$[ebp]
	push	edx
	call	DWORD PTR __imp__wsprintfA
	add	esp, 20					; 00000014H

; 456  : 	DumpText(516, 32, 12, 16, 0xc0ffffff, buf);

	lea	eax, DWORD PTR _buf$[ebp]
	push	eax
	push	-1056964609				; c0ffffffH
	push	16					; 00000010H
	push	12					; 0000000cH
	push	32					; 00000020H
	push	516					; 00000204H
	call	?DumpText@@YAXFFFFJPAD@Z		; DumpText
	add	esp, 24					; 00000018H

; 457  : 
; 458  : // best lap
; 459  : 
; 460  : 	DumpText(528, 56, 12, 16, 0xc000ffff, "best lap");

	push	OFFSET FLAT:??_C@_08GIEANGJD@best?5lap?$AA@
	push	-1073676289				; c000ffffH
	push	16					; 00000010H
	push	12					; 0000000cH
	push	56					; 00000038H
	push	528					; 00000210H
	call	?DumpText@@YAXFFFFJPAD@Z		; DumpText
	add	esp, 24					; 00000018H

; 461  : 	wsprintf(buf, "%02d:%02d:%03d", MINUTES(PLR_LocalPlayer->car.BestLapTime), SECONDS(PLR_LocalPlayer->car.BestLapTime), THOUSANDTHS(PLR_LocalPlayer->car.BestLapTime));

	mov	eax, DWORD PTR ?PLR_LocalPlayer@@3PAUPlayerStruct@@A ; PLR_LocalPlayer
	mov	eax, DWORD PTR [eax+3476]
	cdq
	mov	ecx, 1000				; 000003e8H
	idiv	ecx
	push	edx
	mov	edx, DWORD PTR ?PLR_LocalPlayer@@3PAUPlayerStruct@@A ; PLR_LocalPlayer
	mov	eax, DWORD PTR [edx+3476]
	cdq
	mov	ecx, 1000				; 000003e8H
	idiv	ecx
	cdq
	mov	ecx, 60					; 0000003cH
	idiv	ecx
	push	edx
	mov	edx, DWORD PTR ?PLR_LocalPlayer@@3PAUPlayerStruct@@A ; PLR_LocalPlayer
	mov	eax, DWORD PTR [edx+3476]
	cdq
	mov	ecx, 60000				; 0000ea60H
	idiv	ecx
	push	eax
	push	OFFSET FLAT:??_C@_0P@PKAPJJPG@?$CF02d?3?$CF02d?3?$CF03d?$AA@
	lea	edx, DWORD PTR _buf$[ebp]
	push	edx
	call	DWORD PTR __imp__wsprintfA
	add	esp, 20					; 00000014H

; 462  : 	DumpText(516, 72, 12, 16, 0xc0ffffff, buf);

	lea	eax, DWORD PTR _buf$[ebp]
	push	eax
	push	-1056964609				; c0ffffffH
	push	16					; 00000010H
	push	12					; 0000000cH
	push	72					; 00000048H
	push	516					; 00000204H
	call	?DumpText@@YAXFFFFJPAD@Z		; DumpText
	add	esp, 24					; 00000018H
$L81610:

; 463  : 
; 464  : // bump test
; 465  : 
; 466  : return;
; 467  : 	VEC vec;
; 468  : 	static VEC light = {0, 0, -128};
; 469  : 	static VEC tl = {-64, -64, 0};
; 470  : 	static VEC tr = {64, -64, 0};
; 471  : 	static VEC br = {64, 64, 0};
; 472  : 	static VEC bl = {-64, 64, 0};
; 473  : 	static float tu0, tv0, tu1, tv1, tu2, tv2, tu3, tv3;
; 474  : 
; 475  : 	if (Keys[DIK_LEFT]) light.v[X]--;
; 476  : 	if (Keys[DIK_RIGHT]) light.v[X]++;
; 477  : 	if (Keys[DIK_UP]) light.v[Y]--;
; 478  : 	if (Keys[DIK_DOWN]) light.v[Y]++;
; 479  : 
; 480  : 	SubVector(&tl, &light, &vec);
; 481  : 	NormalizeVector(&vec);
; 482  : 	tu0 = 0.0f / 256.0f - vec.v[X] / 64.0f;
; 483  : 	tv0 = 0.0f / 256.0f - vec.v[Y] / 64.0f;
; 484  : 
; 485  : 	SubVector(&tr, &light, &vec);
; 486  : 	NormalizeVector(&vec);
; 487  : 	tu1 = 64.0f / 256.0f - vec.v[X] / 64.0f;
; 488  : 	tv1 = 0.0f / 256.0f - vec.v[Y] / 64.0f;
; 489  : 
; 490  : 	SubVector(&br, &light, &vec);
; 491  : 	NormalizeVector(&vec);
; 492  : 	tu2 = 64.0f / 256.0f - vec.v[X] / 64.0f;
; 493  : 	tv2 = 64.0f / 256.0f - vec.v[Y] / 64.0f;
; 494  : 
; 495  : 	SubVector(&bl, &light, &vec);
; 496  : 	NormalizeVector(&vec);
; 497  : 	tu3 = 0.0f / 256.0f - vec.v[X] / 64.0f;
; 498  : 	tv3 = 64.0f / 256.0f - vec.v[Y] / 64.0f;
; 499  : 
; 500  : 	DrawVertsTEX2[0].sx = 128;
; 501  : 	DrawVertsTEX2[0].sy = 128;
; 502  : 	DrawVertsTEX2[0].sz = 0.01f;
; 503  : 	DrawVertsTEX2[0].rhw = 1;
; 504  : 	DrawVertsTEX2[0].color = 0x808080;
; 505  : 	DrawVertsTEX2[0].tu = 0.0f / 256.0f;
; 506  : 	DrawVertsTEX2[0].tv = 0.0f / 256.0f;
; 507  : 
; 508  : 	DrawVertsTEX2[1].sx = 256;
; 509  : 	DrawVertsTEX2[1].sy = 128;
; 510  : 	DrawVertsTEX2[1].sz = 0.01f;
; 511  : 	DrawVertsTEX2[1].rhw = 1;
; 512  : 	DrawVertsTEX2[1].color = 0x808080;
; 513  : 	DrawVertsTEX2[1].tu = 64.0f / 256.0f;
; 514  : 	DrawVertsTEX2[1].tv = 0.0f / 256.0f;
; 515  : 
; 516  : 	DrawVertsTEX2[2].sx = 256;
; 517  : 	DrawVertsTEX2[2].sy = 256;
; 518  : 	DrawVertsTEX2[2].sz = 0.01f;
; 519  : 	DrawVertsTEX2[2].rhw = 1;
; 520  : 	DrawVertsTEX2[2].color = 0x808080;
; 521  : 	DrawVertsTEX2[2].tu = 64.0f / 256.0f;
; 522  : 	DrawVertsTEX2[2].tv = 64.0f / 256.0f;
; 523  : 
; 524  : 	DrawVertsTEX2[3].sx = 128;
; 525  : 	DrawVertsTEX2[3].sy = 256;
; 526  : 	DrawVertsTEX2[3].sz = 0.01f;
; 527  : 	DrawVertsTEX2[3].rhw = 1;
; 528  : 	DrawVertsTEX2[3].color = 0x808080;
; 529  : 	DrawVertsTEX2[3].tu = 0.0f / 256.0f;
; 530  : 	DrawVertsTEX2[3].tv = 64.0f / 256.0f;
; 531  : 
; 532  : 	DrawVertsTEX2[0].tu2 = tu0;
; 533  : 	DrawVertsTEX2[0].tv2 = tv0;
; 534  : 
; 535  : 	DrawVertsTEX2[1].tu2 = tu1;
; 536  : 	DrawVertsTEX2[1].tv2 = tv1;
; 537  : 
; 538  : 	DrawVertsTEX2[2].tu2 = tu2;
; 539  : 	DrawVertsTEX2[2].tv2 = tv2;
; 540  : 
; 541  : 	DrawVertsTEX2[3].tu2 = tu3;
; 542  : 	DrawVertsTEX2[3].tv2 = tv3;
; 543  : 
; 544  : 	ALPHA_OFF();
; 545  : 	SET_TPAGE(TPAGE_FX1);
; 546  : 	SET_TPAGE2(TPAGE_FX1);
; 547  : 
; 548  : 	SET_STAGE_STATE(1, D3DTSS_TEXCOORDINDEX, 1);
; 549  : 	SET_STAGE_STATE(1, D3DTSS_COLORARG1, D3DTA_TEXTURE);
; 550  : 	SET_STAGE_STATE(1, D3DTSS_COLORARG2, D3DTA_CURRENT);
; 551  : 	SET_STAGE_STATE(1, D3DTSS_COLOROP, D3DTOP_SUBTRACT);
; 552  : 
; 553  : 	D3Ddevice->DrawPrimitive(D3DPT_TRIANGLEFAN, FVF_TEX2, DrawVertsTEX2, 4, D3DDP_DONOTUPDATEEXTENTS);
; 554  : 
; 555  : 	SET_STAGE_STATE(1, D3DTSS_COLOROP, D3DTOP_DISABLE);
; 556  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?DrawControlPanel@@YAXXZ ENDP				; DrawControlPanel
_TEXT	ENDS
PUBLIC	_cosf
; Function compile flags: /Odt /ZI
; File c:\program files\microsoft visual studio .net 2003\vc7\include\math.h
;	COMDAT ?cos@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?cos@@YAMM@Z PROC NEAR					; cos, COMDAT

; 549  :         {return (cosf(_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR __X$[ebp]
	push	eax
	call	_cosf
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?cos@@YAMM@Z ENDP					; cos
_TEXT	ENDS
EXTRN	_cos:NEAR
; Function compile flags: /Odt /ZI
;	COMDAT _cosf
_TEXT	SEGMENT
tv70 = -68						; size = 4
__X$ = 8						; size = 4
_cosf	PROC NEAR					; COMDAT

; 444  :         {return ((float)cos((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	fld	DWORD PTR __X$[ebp]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	call	_cos
	add	esp, 8
	fst	DWORD PTR tv70[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_cosf	ENDP
_TEXT	ENDS
PUBLIC	_sinf
; Function compile flags: /Odt /ZI
;	COMDAT ?sin@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?sin@@YAMM@Z PROC NEAR					; sin, COMDAT

; 575  :         {return (sinf(_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR __X$[ebp]
	push	eax
	call	_sinf
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?sin@@YAMM@Z ENDP					; sin
_TEXT	ENDS
EXTRN	_sin:NEAR
; Function compile flags: /Odt /ZI
;	COMDAT _sinf
_TEXT	SEGMENT
tv70 = -68						; size = 4
__X$ = 8						; size = 4
_sinf	PROC NEAR					; COMDAT

; 466  :         {return ((float)sin((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	fld	DWORD PTR __X$[ebp]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	call	_sin
	add	esp, 8
	fst	DWORD PTR tv70[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_sinf	ENDP
_TEXT	ENDS
PUBLIC	_sqrtf
; Function compile flags: /Odt /ZI
;	COMDAT ?sqrt@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?sqrt@@YAMM@Z PROC NEAR					; sqrt, COMDAT

; 579  :         {return (sqrtf(_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR __X$[ebp]
	push	eax
	call	_sqrtf
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?sqrt@@YAMM@Z ENDP					; sqrt
_TEXT	ENDS
EXTRN	_sqrt:NEAR
; Function compile flags: /Odt /ZI
;	COMDAT _sqrtf
_TEXT	SEGMENT
tv70 = -68						; size = 4
__X$ = 8						; size = 4
_sqrtf	PROC NEAR					; COMDAT

; 470  :         {return ((float)sqrt((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	fld	DWORD PTR __X$[ebp]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	call	_sqrt
	add	esp, 8
	fst	DWORD PTR tv70[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_sqrtf	ENDP
_TEXT	ENDS
EXTRN	?ScreenLeftClip@@3MA:DWORD			; ScreenLeftClip
EXTRN	?ScreenTopClip@@3MA:DWORD			; ScreenTopClip
EXTRN	?DrawVertsTEX1@@3PAUVERTEX_TEX1@@A:BYTE		; DrawVertsTEX1
EXTRN	?RenderSettings@@3URENDER_SETTINGS@@A:BYTE	; RenderSettings
; Function compile flags: /Odt /ZI
; File c:\documents and settings\jarhead\desktop\shit to display my love for xbox revolt and fuck you borman-ness\revolt source\source\panel.cpp
;	COMDAT ?DrawPanelSprite@@YAXMMMMMMMMJ@Z
_TEXT	SEGMENT
_ysize$ = -20						; size = 4
_xsize$ = -16						; size = 4
_ystart$ = -12						; size = 4
_xstart$ = -8						; size = 4
_i$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_width$ = 16						; size = 4
_height$ = 20						; size = 4
_tu$ = 24						; size = 4
_tv$ = 28						; size = 4
_twidth$ = 32						; size = 4
_theight$ = 36						; size = 4
_rgba$ = 40						; size = 4
?DrawPanelSprite@@YAXMMMMMMMMJ@Z PROC NEAR		; DrawPanelSprite, COMDAT

; 563  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi

; 564  : 	long i;
; 565  : 	float xstart, ystart, xsize, ysize;
; 566  : 
; 567  : // scale
; 568  : 
; 569  : 	xstart = x * RenderSettings.GeomScaleX + ScreenLeftClip;

	fld	DWORD PTR _x$[ebp]
	fmul	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+12
	fadd	DWORD PTR ?ScreenLeftClip@@3MA		; ScreenLeftClip
	fstp	DWORD PTR _xstart$[ebp]

; 570  : 	ystart = y * RenderSettings.GeomScaleY + ScreenTopClip;

	fld	DWORD PTR _y$[ebp]
	fmul	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+16
	fadd	DWORD PTR ?ScreenTopClip@@3MA		; ScreenTopClip
	fstp	DWORD PTR _ystart$[ebp]

; 571  : 
; 572  : 	xsize = width * RenderSettings.GeomScaleX;

	fld	DWORD PTR _width$[ebp]
	fmul	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+12
	fstp	DWORD PTR _xsize$[ebp]

; 573  : 	ysize = height * RenderSettings.GeomScaleY;

	fld	DWORD PTR _height$[ebp]
	fmul	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+16
	fstp	DWORD PTR _ysize$[ebp]

; 574  : 
; 575  : // init vert misc
; 576  : 
; 577  : 	for (i = 0 ; i < 4 ; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $L81793
$L81794:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$L81793:
	cmp	DWORD PTR _i$[ebp], 4
	jge	SHORT $L81795

; 578  : 	{
; 579  : 		DrawVertsTEX1[i].color = rgba;

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 5
	mov	ecx, DWORD PTR _rgba$[ebp]
	mov	DWORD PTR ?DrawVertsTEX1@@3PAUVERTEX_TEX1@@A[eax+16], ecx

; 580  : 		DrawVertsTEX1[i].rhw = 1;

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 5
	mov	DWORD PTR ?DrawVertsTEX1@@3PAUVERTEX_TEX1@@A[eax+12], 1065353216 ; 3f800000H

; 581  : 	}

	jmp	SHORT $L81794
$L81795:

; 582  : 
; 583  : // set screen coors
; 584  : 
; 585  : 	DrawVertsTEX1[0].sx = DrawVertsTEX1[3].sx = xstart;

	mov	eax, DWORD PTR _xstart$[ebp]
	mov	DWORD PTR ?DrawVertsTEX1@@3PAUVERTEX_TEX1@@A+96, eax
	mov	ecx, DWORD PTR ?DrawVertsTEX1@@3PAUVERTEX_TEX1@@A+96
	mov	DWORD PTR ?DrawVertsTEX1@@3PAUVERTEX_TEX1@@A, ecx

; 586  : 	DrawVertsTEX1[1].sx = DrawVertsTEX1[2].sx = xstart + xsize;

	fld	DWORD PTR _xstart$[ebp]
	fadd	DWORD PTR _xsize$[ebp]
	fstp	DWORD PTR ?DrawVertsTEX1@@3PAUVERTEX_TEX1@@A+64
	mov	eax, DWORD PTR ?DrawVertsTEX1@@3PAUVERTEX_TEX1@@A+64
	mov	DWORD PTR ?DrawVertsTEX1@@3PAUVERTEX_TEX1@@A+32, eax

; 587  : 	DrawVertsTEX1[0].sy = DrawVertsTEX1[1].sy = ystart;

	mov	eax, DWORD PTR _ystart$[ebp]
	mov	DWORD PTR ?DrawVertsTEX1@@3PAUVERTEX_TEX1@@A+36, eax
	mov	ecx, DWORD PTR ?DrawVertsTEX1@@3PAUVERTEX_TEX1@@A+36
	mov	DWORD PTR ?DrawVertsTEX1@@3PAUVERTEX_TEX1@@A+4, ecx

; 588  : 	DrawVertsTEX1[2].sy = DrawVertsTEX1[3].sy = ystart + ysize;

	fld	DWORD PTR _ystart$[ebp]
	fadd	DWORD PTR _ysize$[ebp]
	fstp	DWORD PTR ?DrawVertsTEX1@@3PAUVERTEX_TEX1@@A+100
	mov	eax, DWORD PTR ?DrawVertsTEX1@@3PAUVERTEX_TEX1@@A+100
	mov	DWORD PTR ?DrawVertsTEX1@@3PAUVERTEX_TEX1@@A+68, eax

; 589  : 
; 590  : // set uv's
; 591  : 
; 592  : 	DrawVertsTEX1[0].tu = DrawVertsTEX1[3].tu = tu;

	mov	eax, DWORD PTR _tu$[ebp]
	mov	DWORD PTR ?DrawVertsTEX1@@3PAUVERTEX_TEX1@@A+120, eax
	mov	ecx, DWORD PTR ?DrawVertsTEX1@@3PAUVERTEX_TEX1@@A+120
	mov	DWORD PTR ?DrawVertsTEX1@@3PAUVERTEX_TEX1@@A+24, ecx

; 593  : 	DrawVertsTEX1[1].tu = DrawVertsTEX1[2].tu = tu + twidth;

	fld	DWORD PTR _tu$[ebp]
	fadd	DWORD PTR _twidth$[ebp]
	fstp	DWORD PTR ?DrawVertsTEX1@@3PAUVERTEX_TEX1@@A+88
	mov	eax, DWORD PTR ?DrawVertsTEX1@@3PAUVERTEX_TEX1@@A+88
	mov	DWORD PTR ?DrawVertsTEX1@@3PAUVERTEX_TEX1@@A+56, eax

; 594  : 	DrawVertsTEX1[0].tv = DrawVertsTEX1[1].tv = tv;

	mov	eax, DWORD PTR _tv$[ebp]
	mov	DWORD PTR ?DrawVertsTEX1@@3PAUVERTEX_TEX1@@A+60, eax
	mov	ecx, DWORD PTR ?DrawVertsTEX1@@3PAUVERTEX_TEX1@@A+60
	mov	DWORD PTR ?DrawVertsTEX1@@3PAUVERTEX_TEX1@@A+28, ecx

; 595  : 	DrawVertsTEX1[2].tv = DrawVertsTEX1[3].tv = tv + theight;

	fld	DWORD PTR _tv$[ebp]
	fadd	DWORD PTR _theight$[ebp]
	fstp	DWORD PTR ?DrawVertsTEX1@@3PAUVERTEX_TEX1@@A+124
	mov	eax, DWORD PTR ?DrawVertsTEX1@@3PAUVERTEX_TEX1@@A+124
	mov	DWORD PTR ?DrawVertsTEX1@@3PAUVERTEX_TEX1@@A+92, eax

; 596  : 
; 597  : // draw
; 598  : 
; 599  : 	D3Ddevice->DrawPrimitive(D3DPT_TRIANGLEFAN, FVF_TEX1, DrawVertsTEX1, 4, D3DDP_DONOTUPDATEEXTENTS | D3DDP_DONOTCLIP);

	push	12					; 0000000cH
	push	4
	push	OFFSET FLAT:?DrawVertsTEX1@@3PAUVERTEX_TEX1@@A ; DrawVertsTEX1
	push	452					; 000001c4H
	push	6
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	edx
	call	DWORD PTR [ecx+112]

; 600  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?DrawPanelSprite@@YAXMMMMMMMMJ@Z ENDP			; DrawPanelSprite
_TEXT	ENDS
END
