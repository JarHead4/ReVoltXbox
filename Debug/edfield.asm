; Listing generated by Microsoft (R) Optimizing Compiler Version 13.10.3077 

	TITLE	.\source\edfield.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT PARA USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_06LACFBFGA@Linear?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0M@LHPCLPIO@Orientation?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_08LIFBEL@Velocity?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_09BPHDNFPM@Spherical?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_03ELMLMPLG@Box?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_03JAMCAEFC@Dir?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_03IDDGKHFD@X?5Y?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_03KIBLPEJA@X?5Z?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_03CJDPGPNI@Z?5Y?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_01MMEEDKFM@X?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_01NFFPALBN@Y?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_01POHCFINO@Z?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_06JCBBMBIP@Camera?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_05MFLOHCHP@World?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0IM@PBBANIGJ@c?3?2documents?5and?5settings?2jarhea@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CE@BLMEEBG@Can?8t?5alloc?5memory?5for?5file?5fiel@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_02JDPG@rb?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_02GMLFBBN@wb?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_03KBBBOAJH@fl?9?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BC@HMGKMEAH@Saved?5Field?5File?3?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_02DKCKIIND@?$CFs?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0N@MOINFLNL@Axis?5?$CFs?5?9?5?$CFs?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_06LJIPCCJP@Rot?5?$CFs?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_07CNMMGIID@Mag?5?$CFs_?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0O@MAGBIBKP@Mag?5?$CFld?4?$CF04ld?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0M@MOMKOEKC@Damping?5?$CFs_?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BC@PGEIDLIK@Damping?5?$CFld?4?$CF04ld?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0P@DJKKECBE@Grad?5Start?5?$CFs_?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BF@EOBBDDIC@Grad?5Start?5?$CFld?4?$CF04ld?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0N@CHILAPFD@Grad?5End?5?$CFs_?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BD@PCBJNDIP@Grad?5End?5?$CFld?4?$CF04ld?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_02HBOOOICD@?9?$DO?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_03IAKKBENL@fld?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0O@DAJIBJAO@edit?2field1?4m?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0O@CCCNLGOA@edit?2field2?4m?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _IsEqualGUID
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _==
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _acosl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _asinl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _atanl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _atan2l
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _ceill
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _cosl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _coshl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _expl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _fabsl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _floorl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _fmodl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _frexpl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _ldexpl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _logl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _log10l
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _modfl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _powl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _sinl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _sinhl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _sqrtl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _tanl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _tanhl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _frexpf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _ldexpf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _acosf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _asinf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _atanf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _atan2f
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _ceilf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _cosf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _coshf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _expf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _fabsf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _floorf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _fmodf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _logf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _log10f
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _modff
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _powf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _sinf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _sinhf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _sqrtf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _tanf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _tanhf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?sqrt@@YAMM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?InitFileFields@@YAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?KillFileFields@@YAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?LoadFileFields@@YAXPAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SaveFileFields@@YAXPAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AllocFileField@@YAPAUFILE_FIELD@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?FreeFileField@@YAXPAUFILE_FIELD@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DrawFields@@YAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DisplayFieldInfo@@YAXPAUFILE_FIELD@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?EditFields@@YAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?LoadFileFieldModels@@YAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?FreeFileFieldModels@@YAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Pow_int@N@@YANNH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Pow_int@H@@YAHHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Pow_int@M@@YAMMH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Pow_int@O@@YAOOH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?__LINE__Var@?1??KillFileFields@@YAXXZ@4JA
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??InitFileFields@@YAXXZ@4JA
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
sxdata	SEGMENT DWORD USE32 'SXDATA'
sxdata	ENDS
FLAT	GROUP _DATA, CONST, _BSS
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBCD
INCLUDELIB OLDNAMES

PUBLIC	??_C@_06LACFBFGA@Linear?$AA@			; `string'
PUBLIC	??_C@_0M@LHPCLPIO@Orientation?$AA@		; `string'
PUBLIC	??_C@_08LIFBEL@Velocity?$AA@			; `string'
PUBLIC	??_C@_09BPHDNFPM@Spherical?$AA@			; `string'
PUBLIC	??_C@_03ELMLMPLG@Box?$AA@			; `string'
PUBLIC	??_C@_03JAMCAEFC@Dir?$AA@			; `string'
PUBLIC	??_C@_03IDDGKHFD@X?5Y?$AA@			; `string'
PUBLIC	??_C@_03KIBLPEJA@X?5Z?$AA@			; `string'
PUBLIC	??_C@_03CJDPGPNI@Z?5Y?$AA@			; `string'
PUBLIC	??_C@_01MMEEDKFM@X?$AA@				; `string'
PUBLIC	??_C@_01NFFPALBN@Y?$AA@				; `string'
PUBLIC	??_C@_01POHCFINO@Z?$AA@				; `string'
PUBLIC	??_C@_06JCBBMBIP@Camera?$AA@			; `string'
PUBLIC	??_C@_05MFLOHCHP@World?$AA@			; `string'
PUBLIC	?CurrentField@@3PAUFILE_FIELD@@A		; CurrentField
_BSS	SEGMENT
?CurrentField@@3PAUFILE_FIELD@@A DD 01H DUP (?)		; CurrentField
_BSS	ENDS
;	COMDAT ??_C@_06LACFBFGA@Linear?$AA@
CONST	SEGMENT
??_C@_06LACFBFGA@Linear?$AA@ DB 'Linear', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@LHPCLPIO@Orientation?$AA@
CONST	SEGMENT
??_C@_0M@LHPCLPIO@Orientation?$AA@ DB 'Orientation', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08LIFBEL@Velocity?$AA@
CONST	SEGMENT
??_C@_08LIFBEL@Velocity?$AA@ DB 'Velocity', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09BPHDNFPM@Spherical?$AA@
CONST	SEGMENT
??_C@_09BPHDNFPM@Spherical?$AA@ DB 'Spherical', 00H	; `string'
CONST	ENDS
_DATA	SEGMENT
_FileFieldTypeNames DD FLAT:??_C@_06LACFBFGA@Linear?$AA@
	DD	FLAT:??_C@_0M@LHPCLPIO@Orientation?$AA@
	DD	FLAT:??_C@_08LIFBEL@Velocity?$AA@
	DD	FLAT:??_C@_09BPHDNFPM@Spherical?$AA@
_MaxPicker DB	02H
	DB	02H
	DB	01H
	DB	02H
_DATA	ENDS
;	COMDAT ??_C@_03ELMLMPLG@Box?$AA@
CONST	SEGMENT
??_C@_03ELMLMPLG@Box?$AA@ DB 'Box', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03JAMCAEFC@Dir?$AA@
CONST	SEGMENT
??_C@_03JAMCAEFC@Dir?$AA@ DB 'Dir', 00H			; `string'
CONST	ENDS
_DATA	SEGMENT
_FileFieldRotNames DD FLAT:??_C@_03ELMLMPLG@Box?$AA@
	DD	FLAT:??_C@_03JAMCAEFC@Dir?$AA@
_DATA	ENDS
;	COMDAT ??_C@_03IDDGKHFD@X?5Y?$AA@
CONST	SEGMENT
??_C@_03IDDGKHFD@X?5Y?$AA@ DB 'X Y', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03KIBLPEJA@X?5Z?$AA@
CONST	SEGMENT
??_C@_03KIBLPEJA@X?5Z?$AA@ DB 'X Z', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03CJDPGPNI@Z?5Y?$AA@
CONST	SEGMENT
??_C@_03CJDPGPNI@Z?5Y?$AA@ DB 'Z Y', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01MMEEDKFM@X?$AA@
CONST	SEGMENT
??_C@_01MMEEDKFM@X?$AA@ DB 'X', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01NFFPALBN@Y?$AA@
CONST	SEGMENT
??_C@_01NFFPALBN@Y?$AA@ DB 'Y', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01POHCFINO@Z?$AA@
CONST	SEGMENT
??_C@_01POHCFINO@Z?$AA@ DB 'Z', 00H			; `string'
CONST	ENDS
_DATA	SEGMENT
_FileFieldAxisNames DD FLAT:??_C@_03IDDGKHFD@X?5Y?$AA@
	DD	FLAT:??_C@_03KIBLPEJA@X?5Z?$AA@
	DD	FLAT:??_C@_03CJDPGPNI@Z?5Y?$AA@
	DD	FLAT:??_C@_01MMEEDKFM@X?$AA@
	DD	FLAT:??_C@_01NFFPALBN@Y?$AA@
	DD	FLAT:??_C@_01POHCFINO@Z?$AA@
_DATA	ENDS
;	COMDAT ??_C@_06JCBBMBIP@Camera?$AA@
CONST	SEGMENT
??_C@_06JCBBMBIP@Camera?$AA@ DB 'Camera', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05MFLOHCHP@World?$AA@
CONST	SEGMENT
??_C@_05MFLOHCHP@World?$AA@ DB 'World', 00H		; `string'
CONST	ENDS
_DATA	SEGMENT
_FileFieldAxisTypeNames DD FLAT:??_C@_06JCBBMBIP@Camera?$AA@
	DD	FLAT:??_C@_05MFLOHCHP@World?$AA@
_DrawFieldIndex DW 01H
	DW	03H
	DW	07H
	DW	05H
	DW	02H
	DW	00H
	DW	04H
	DW	06H
	DW	04H
	DW	05H
	DW	07H
	DW	06H
	DW	00H
	DW	02H
	DW	03H
	DW	01H
	DW	03H
	DW	02H
	DW	06H
	DW	07H
	DW	00H
	DW	01H
	DW	05H
	DW	04H
_DrawFieldCol DD 080ff0000H
	DD	08000ff00H
	DD	0800000ffH
_DATA	ENDS
PUBLIC	?__LINE__Var@?1??InitFileFields@@YAXXZ@4JA	; `InitFileFields'::`2'::__LINE__Var
PUBLIC	??_C@_0IM@PBBANIGJ@c?3?2documents?5and?5settings?2jarhea@ ; `string'
PUBLIC	??_C@_0CE@BLMEEBG@Can?8t?5alloc?5memory?5for?5file?5fiel@ ; `string'
PUBLIC	?InitFileFields@@YAXXZ				; InitFileFields
EXTRN	?DebugMalloc@@YAPAXIHPAD@Z:NEAR			; DebugMalloc
EXTRN	?Box@@YAJPAD0J@Z:NEAR				; Box
EXTRN	?QuitGame@@3DA:BYTE				; QuitGame
_BSS	SEGMENT
_FileFields DD	01H DUP (?)
_BSS	ENDS
;	COMDAT ??_C@_0IM@PBBANIGJ@c?3?2documents?5and?5settings?2jarhea@
; File c:\documents and settings\jarhead\desktop\shit to display my love for xbox revolt and fuck you borman-ness\revolt source\source\edfield.cpp
CONST	SEGMENT
??_C@_0IM@PBBANIGJ@c?3?2documents?5and?5settings?2jarhea@ DB 'c:\document'
	DB	's and settings\jarhead\desktop\shit to display my love for xb'
	DB	'ox revolt and fuck you borman-ness\revolt source\source\edfie'
	DB	'ld.cpp', 00H				; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??InitFileFields@@YAXXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?1??InitFileFields@@YAXXZ@4JA DD 050H	; `InitFileFields'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0CE@BLMEEBG@Can?8t?5alloc?5memory?5for?5file?5fiel@
CONST	SEGMENT
??_C@_0CE@BLMEEBG@Can?8t?5alloc?5memory?5for?5file?5fiel@ DB 'Can''t allo'
	DB	'c memory for file fields!', 00H		; `string'
; Function compile flags: /Odt /ZI
CONST	ENDS
;	COMDAT ?InitFileFields@@YAXXZ
_TEXT	SEGMENT
?InitFileFields@@YAXXZ PROC NEAR			; InitFileFields, COMDAT

; 80   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 81   : 	FileFields = (FILE_FIELD*)malloc(sizeof(FILE_FIELD) * MAX_FILE_FIELDS);

	push	OFFSET FLAT:??_C@_0IM@PBBANIGJ@c?3?2documents?5and?5settings?2jarhea@
	mov	eax, DWORD PTR ?__LINE__Var@?1??InitFileFields@@YAXXZ@4JA
	add	eax, 1
	push	eax
	push	12800					; 00003200H
	call	?DebugMalloc@@YAPAXIHPAD@Z		; DebugMalloc
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _FileFields, eax

; 82   : 	if (!FileFields)

	cmp	DWORD PTR _FileFields, 0
	jne	SHORT $L81257

; 83   : 	{
; 84   : 		Box(NULL, "Can't alloc memory for file fields!", MB_OK);

	push	0
	push	OFFSET FLAT:??_C@_0CE@BLMEEBG@Can?8t?5alloc?5memory?5for?5file?5fiel@
	push	0
	call	?Box@@YAJPAD0J@Z			; Box
	add	esp, 12					; 0000000cH

; 85   : 		QuitGame = TRUE;

	mov	BYTE PTR ?QuitGame@@3DA, 1		; QuitGame
$L81257:

; 86   : 	}
; 87   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?InitFileFields@@YAXXZ ENDP				; InitFileFields
_TEXT	ENDS
PUBLIC	?__LINE__Var@?1??KillFileFields@@YAXXZ@4JA	; `KillFileFields'::`2'::__LINE__Var
PUBLIC	?KillFileFields@@YAXXZ				; KillFileFields
EXTRN	?DebugFree@@YAXPAXHPAD@Z:NEAR			; DebugFree
;	COMDAT ?__LINE__Var@?1??KillFileFields@@YAXXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?1??KillFileFields@@YAXXZ@4JA DD 05eH	; `KillFileFields'::`2'::__LINE__Var
; Function compile flags: /Odt /ZI
_DATA	ENDS
;	COMDAT ?KillFileFields@@YAXXZ
_TEXT	SEGMENT
?KillFileFields@@YAXXZ PROC NEAR			; KillFileFields, COMDAT

; 94   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 95   : 	free(FileFields);

	push	OFFSET FLAT:??_C@_0IM@PBBANIGJ@c?3?2documents?5and?5settings?2jarhea@
	mov	eax, DWORD PTR ?__LINE__Var@?1??KillFileFields@@YAXXZ@4JA
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _FileFields
	push	ecx
	call	?DebugFree@@YAXPAXHPAD@Z		; DebugFree
	add	esp, 12					; 0000000cH

; 96   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?KillFileFields@@YAXXZ ENDP				; KillFileFields
_TEXT	ENDS
PUBLIC	??_C@_02JDPG@rb?$AA@				; `string'
PUBLIC	??_C@_02GMLFBBN@wb?$AA@				; `string'
PUBLIC	?LoadFileFields@@YAXPAD@Z			; LoadFileFields
EXTRN	_fclose:NEAR
EXTRN	_fopen:NEAR
EXTRN	_fread:NEAR
EXTRN	_fwrite:NEAR
EXTRN	__fltused:NEAR
EXTRN	?EditScale@@3MA:DWORD				; EditScale
_BSS	SEGMENT
_FileFieldNum DD 01H DUP (?)
_BSS	ENDS
;	COMDAT ??_C@_02JDPG@rb?$AA@
CONST	SEGMENT
??_C@_02JDPG@rb?$AA@ DB 'rb', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02GMLFBBN@wb?$AA@
CONST	SEGMENT
??_C@_02GMLFBBN@wb?$AA@ DB 'wb', 00H			; `string'
; Function compile flags: /Odt /ZI
CONST	ENDS
;	COMDAT ?LoadFileFields@@YAXPAD@Z
_TEXT	SEGMENT
_ff$ = -108						; size = 100
_fp$ = -8						; size = 4
_i$ = -4						; size = 4
_file$ = 8						; size = 4
?LoadFileFields@@YAXPAD@Z PROC NEAR			; LoadFileFields, COMDAT

; 103  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 172				; 000000acH
	push	ebx
	push	esi
	push	edi

; 104  : 	long i;
; 105  : 	FILE *fp;
; 106  : 	FILE_FIELD ff;
; 107  : 
; 108  : // open field file
; 109  : 
; 110  : 	fp = fopen(file, "rb");

	push	OFFSET FLAT:??_C@_02JDPG@rb?$AA@
	mov	eax, DWORD PTR _file$[ebp]
	push	eax
	call	_fopen
	add	esp, 8
	mov	DWORD PTR _fp$[ebp], eax

; 111  : 
; 112  : // if not there create empty one
; 113  : 
; 114  : 	if (!fp)

	cmp	DWORD PTR _fp$[ebp], 0
	jne	SHORT $L81275

; 115  : 	{
; 116  : 		fp = fopen(file, "wb");

	push	OFFSET FLAT:??_C@_02GMLFBBN@wb?$AA@
	mov	eax, DWORD PTR _file$[ebp]
	push	eax
	call	_fopen
	add	esp, 8
	mov	DWORD PTR _fp$[ebp], eax

; 117  : 		if (!fp) return;

	cmp	DWORD PTR _fp$[ebp], 0
	jne	SHORT $L81277
	jmp	$L81270
$L81277:

; 118  : 		i = 0;

	mov	DWORD PTR _i$[ebp], 0

; 119  : 		fwrite(&i, sizeof(i), 1, fp);

	mov	eax, DWORD PTR _fp$[ebp]
	push	eax
	push	1
	push	4
	lea	ecx, DWORD PTR _i$[ebp]
	push	ecx
	call	_fwrite
	add	esp, 16					; 00000010H

; 120  : 		fclose(fp);

	mov	eax, DWORD PTR _fp$[ebp]
	push	eax
	call	_fclose
	add	esp, 4

; 121  : 		fp = fopen(file, "rb");

	push	OFFSET FLAT:??_C@_02JDPG@rb?$AA@
	mov	eax, DWORD PTR _file$[ebp]
	push	eax
	call	_fopen
	add	esp, 8
	mov	DWORD PTR _fp$[ebp], eax

; 122  : 		if (!fp) return;

	cmp	DWORD PTR _fp$[ebp], 0
	jne	SHORT $L81275
	jmp	$L81270
$L81275:

; 123  : 	}
; 124  : 
; 125  : // loop thru all fields
; 126  : 
; 127  : 	fread(&FileFieldNum, sizeof(FileFieldNum), 1, fp);

	mov	eax, DWORD PTR _fp$[ebp]
	push	eax
	push	1
	push	4
	push	OFFSET FLAT:_FileFieldNum
	call	_fread
	add	esp, 16					; 00000010H

; 128  : 
; 129  : 	for (i = 0 ; i < FileFieldNum ; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $L81279
$L81280:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$L81279:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _FileFieldNum
	jge	SHORT $L81281

; 130  : 	{
; 131  : 
; 132  : // load one file field
; 133  : 
; 134  : 		fread(&ff, sizeof(ff), 1, fp);

	mov	eax, DWORD PTR _fp$[ebp]
	push	eax
	push	1
	push	100					; 00000064H
	lea	ecx, DWORD PTR _ff$[ebp]
	push	ecx
	call	_fread
	add	esp, 16					; 00000010H

; 135  : 
; 136  : 		VecMulScalar(&ff.Pos, EditScale);

	fld	DWORD PTR _ff$[ebp+4]
	fmul	DWORD PTR ?EditScale@@3MA		; EditScale
	fstp	DWORD PTR _ff$[ebp+4]
	fld	DWORD PTR _ff$[ebp+8]
	fmul	DWORD PTR ?EditScale@@3MA		; EditScale
	fstp	DWORD PTR _ff$[ebp+8]
	fld	DWORD PTR _ff$[ebp+12]
	fmul	DWORD PTR ?EditScale@@3MA		; EditScale
	fstp	DWORD PTR _ff$[ebp+12]

; 137  : 		VecMulScalar((VEC*)ff.Size, EditScale);

	fld	DWORD PTR _ff$[ebp+52]
	fmul	DWORD PTR ?EditScale@@3MA		; EditScale
	fstp	DWORD PTR _ff$[ebp+52]
	fld	DWORD PTR _ff$[ebp+56]
	fmul	DWORD PTR ?EditScale@@3MA		; EditScale
	fstp	DWORD PTR _ff$[ebp+56]
	fld	DWORD PTR _ff$[ebp+60]
	fmul	DWORD PTR ?EditScale@@3MA		; EditScale
	fstp	DWORD PTR _ff$[ebp+60]

; 138  : 
; 139  : // setup edit field
; 140  : 
; 141  : 		FileFields[i] = ff;

	mov	edi, DWORD PTR _i$[ebp]
	imul	edi, 100				; 00000064H
	add	edi, DWORD PTR _FileFields
	mov	ecx, 25					; 00000019H
	lea	esi, DWORD PTR _ff$[ebp]
	rep movsd

; 142  : 	}

	jmp	$L81280
$L81281:

; 143  : 
; 144  : // close file
; 145  : 
; 146  : 	fclose(fp);

	mov	eax, DWORD PTR _fp$[ebp]
	push	eax
	call	_fclose
	add	esp, 4
$L81270:

; 147  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?LoadFileFields@@YAXPAD@Z ENDP				; LoadFileFields
_TEXT	ENDS
PUBLIC	??_C@_03KBBBOAJH@fl?9?$AA@			; `string'
PUBLIC	??_C@_0BC@HMGKMEAH@Saved?5Field?5File?3?$AA@	; `string'
PUBLIC	?SaveFileFields@@YAXPAD@Z			; SaveFileFields
EXTRN	_remove:NEAR
EXTRN	_rename:NEAR
EXTRN	_memcpy:NEAR
EXTRN	_strlen:NEAR
EXTRN	__imp__wsprintfA:NEAR
;	COMDAT ??_C@_03KBBBOAJH@fl?9?$AA@
CONST	SEGMENT
??_C@_03KBBBOAJH@fl?9?$AA@ DB 'fl-', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@HMGKMEAH@Saved?5Field?5File?3?$AA@
CONST	SEGMENT
??_C@_0BC@HMGKMEAH@Saved?5Field?5File?3?$AA@ DB 'Saved Field File:', 00H ; `string'
; Function compile flags: /Odt /ZI
CONST	ENDS
;	COMDAT ?SaveFileFields@@YAXPAD@Z
_TEXT	SEGMENT
_bak$ = -364						; size = 256
_ff$ = -108						; size = 100
_fp$ = -8						; size = 4
_i$ = -4						; size = 4
_file$ = 8						; size = 4
?SaveFileFields@@YAXPAD@Z PROC NEAR			; SaveFileFields, COMDAT

; 154  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 428				; 000001acH
	push	ebx
	push	esi
	push	edi

; 155  : 	long i;
; 156  : 	FILE *fp;
; 157  : 	FILE_FIELD ff;
; 158  : 	char bak[256];
; 159  : 
; 160  : // backup old file
; 161  : 
; 162  : 	memcpy(bak, file, strlen(file) - 3);

	mov	eax, DWORD PTR _file$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	sub	eax, 3
	push	eax
	mov	ecx, DWORD PTR _file$[ebp]
	push	ecx
	lea	edx, DWORD PTR _bak$[ebp]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 163  : 	wsprintf(bak + strlen(file) - 3, "fl-");

	push	OFFSET FLAT:??_C@_03KBBBOAJH@fl?9?$AA@
	mov	eax, DWORD PTR _file$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	lea	ecx, DWORD PTR _bak$[ebp+eax-3]
	push	ecx
	call	DWORD PTR __imp__wsprintfA
	add	esp, 8

; 164  : 	remove(bak);

	lea	eax, DWORD PTR _bak$[ebp]
	push	eax
	call	_remove
	add	esp, 4

; 165  : 	rename(file, bak);

	lea	eax, DWORD PTR _bak$[ebp]
	push	eax
	mov	ecx, DWORD PTR _file$[ebp]
	push	ecx
	call	_rename
	add	esp, 8

; 166  : 
; 167  : // open field file
; 168  : 
; 169  : 	fp = fopen(file, "wb");

	push	OFFSET FLAT:??_C@_02GMLFBBN@wb?$AA@
	mov	eax, DWORD PTR _file$[ebp]
	push	eax
	call	_fopen
	add	esp, 8
	mov	DWORD PTR _fp$[ebp], eax

; 170  : 	if (!fp) return;

	cmp	DWORD PTR _fp$[ebp], 0
	jne	SHORT $L81293
	jmp	SHORT $L81287
$L81293:

; 171  : 
; 172  : // write num
; 173  : 
; 174  : 	fwrite(&FileFieldNum, sizeof(FileFieldNum), 1, fp);

	mov	eax, DWORD PTR _fp$[ebp]
	push	eax
	push	1
	push	4
	push	OFFSET FLAT:_FileFieldNum
	call	_fwrite
	add	esp, 16					; 00000010H

; 175  : 
; 176  : // write out each field
; 177  : 
; 178  : 	for (i = 0 ; i < FileFieldNum ; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $L81294
$L81295:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$L81294:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _FileFieldNum
	jge	SHORT $L81296

; 179  : 	{
; 180  : 
; 181  : // set file field
; 182  : 
; 183  : 		ff = FileFields[i];

	mov	esi, DWORD PTR _i$[ebp]
	imul	esi, 100				; 00000064H
	add	esi, DWORD PTR _FileFields
	mov	ecx, 25					; 00000019H
	lea	edi, DWORD PTR _ff$[ebp]
	rep movsd

; 184  : 
; 185  : // write it
; 186  : 
; 187  : 		fwrite(&ff, sizeof(ff), 1, fp);

	mov	eax, DWORD PTR _fp$[ebp]
	push	eax
	push	1
	push	100					; 00000064H
	lea	ecx, DWORD PTR _ff$[ebp]
	push	ecx
	call	_fwrite
	add	esp, 16					; 00000010H

; 188  : 	}

	jmp	SHORT $L81295
$L81296:

; 189  : 
; 190  : // close file
; 191  : 
; 192  : 	Box("Saved Field File:", file, MB_OK);

	push	0
	mov	eax, DWORD PTR _file$[ebp]
	push	eax
	push	OFFSET FLAT:??_C@_0BC@HMGKMEAH@Saved?5Field?5File?3?$AA@
	call	?Box@@YAJPAD0J@Z			; Box
	add	esp, 12					; 0000000cH

; 193  : 	fclose(fp);

	mov	eax, DWORD PTR _fp$[ebp]
	push	eax
	call	_fclose
	add	esp, 4
$L81287:

; 194  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?SaveFileFields@@YAXPAD@Z ENDP				; SaveFileFields
_TEXT	ENDS
PUBLIC	?AllocFileField@@YAPAUFILE_FIELD@@XZ		; AllocFileField
; Function compile flags: /Odt /ZI
;	COMDAT ?AllocFileField@@YAPAUFILE_FIELD@@XZ
_TEXT	SEGMENT
tv68 = -68						; size = 4
?AllocFileField@@YAPAUFILE_FIELD@@XZ PROC NEAR		; AllocFileField, COMDAT

; 201  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 202  : 
; 203  : // full?
; 204  : 
; 205  : 	if (FileFieldNum >= MAX_FILE_FIELDS)

	cmp	DWORD PTR _FileFieldNum, 128		; 00000080H
	jl	SHORT $L81301

; 206  : 		return NULL;

	xor	eax, eax
	jmp	SHORT $L81300
$L81301:

; 207  : 
; 208  : // inc counter, return slot
; 209  : 
; 210  : 	return &FileFields[FileFieldNum++];

	mov	eax, DWORD PTR _FileFieldNum
	imul	eax, 100				; 00000064H
	add	eax, DWORD PTR _FileFields
	mov	DWORD PTR tv68[ebp], eax
	mov	ecx, DWORD PTR _FileFieldNum
	add	ecx, 1
	mov	DWORD PTR _FileFieldNum, ecx
	mov	eax, DWORD PTR tv68[ebp]
$L81300:

; 211  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?AllocFileField@@YAPAUFILE_FIELD@@XZ ENDP		; AllocFileField
_TEXT	ENDS
PUBLIC	?FreeFileField@@YAXPAUFILE_FIELD@@@Z		; FreeFileField
; Function compile flags: /Odt /ZI
;	COMDAT ?FreeFileField@@YAXPAUFILE_FIELD@@@Z
_TEXT	SEGMENT
_i$ = -8						; size = 4
_idx$ = -4						; size = 4
_field$ = 8						; size = 4
?FreeFileField@@YAXPAUFILE_FIELD@@@Z PROC NEAR		; FreeFileField, COMDAT

; 218  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi

; 219  : 	long idx, i;
; 220  : 
; 221  : // find index into list
; 222  : 
; 223  : 	idx = (long)(field - FileFields);

	mov	eax, DWORD PTR _field$[ebp]
	sub	eax, DWORD PTR _FileFields
	cdq
	mov	ecx, 100				; 00000064H
	idiv	ecx
	mov	DWORD PTR _idx$[ebp], eax

; 224  : 
; 225  : // copy all higher fields down one
; 226  : 
; 227  : 	for (i = idx ; i < FileFieldNum - 1; i++)

	mov	eax, DWORD PTR _idx$[ebp]
	mov	DWORD PTR _i$[ebp], eax
	jmp	SHORT $L81308
$L81309:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$L81308:
	mov	eax, DWORD PTR _FileFieldNum
	sub	eax, 1
	cmp	DWORD PTR _i$[ebp], eax
	jge	SHORT $L81310

; 228  : 	{
; 229  : 		FileFields[i] = FileFields[i + 1];

	mov	esi, DWORD PTR _i$[ebp]
	add	esi, 1
	imul	esi, 100				; 00000064H
	add	esi, DWORD PTR _FileFields
	mov	edi, DWORD PTR _i$[ebp]
	imul	edi, 100				; 00000064H
	add	edi, DWORD PTR _FileFields
	mov	ecx, 25					; 00000019H
	rep movsd

; 230  : 	}

	jmp	SHORT $L81309
$L81310:

; 231  : 
; 232  : // dec num
; 233  : 
; 234  : 	FileFieldNum--;

	mov	eax, DWORD PTR _FileFieldNum
	sub	eax, 1
	mov	DWORD PTR _FileFieldNum, eax

; 235  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?FreeFileField@@YAXPAUFILE_FIELD@@@Z ENDP		; FreeFileField
_TEXT	ENDS
PUBLIC	??_C@_02DKCKIIND@?$CFs?$AA@			; `string'
PUBLIC	?DrawFields@@YAXXZ				; DrawFields
PUBLIC	__real@43800000
PUBLIC	__real@42800000
EXTRN	?DrawNearClipPolyTEX0@@YAXPAUVectorStruct@@PAJJ@Z:NEAR ; DrawNearClipPolyTEX0
EXTRN	?DrawAxis@@YAXPATMatrixUnion@@PAUVectorStruct@@@Z:NEAR ; DrawAxis
EXTRN	?ViewMatrix@@3TMatrixUnion@@A:BYTE		; ViewMatrix
EXTRN	?ViewTrans@@3UVectorStruct@@A:BYTE		; ViewTrans
EXTRN	?DrawLine@@YAXPAUVectorStruct@@0JJ@Z:NEAR	; DrawLine
EXTRN	?CAM_MainCamera@@3PAUCameraStruct@@A:DWORD	; CAM_MainCamera
EXTRN	?DrawModel@@YAXPAUMODEL@@PATMatrixUnion@@PAUVectorStruct@@F@Z:NEAR ; DrawModel
EXTRN	?DumpText3D@@YAXPAUVectorStruct@@MMJPAD@Z:NEAR	; DumpText3D
EXTRN	?DxState@@3UDX_STATE@@A:BYTE			; DxState
EXTRN	?D3Ddevice@@3PAUIDirect3DDevice3@@A:DWORD	; D3Ddevice
EXTRN	?RenderStateChange@@3JA:DWORD			; RenderStateChange
EXTRN	?TextureStateChange@@3JA:DWORD			; TextureStateChange
EXTRN	?RenderTP@@3FA:WORD				; RenderTP
EXTRN	?RenderAlpha@@3FA:WORD				; RenderAlpha
EXTRN	?RenderAlphaSrc@@3FA:WORD			; RenderAlphaSrc
EXTRN	?RenderAlphaDest@@3FA:WORD			; RenderAlphaDest
EXTRN	?RenderZbuffer@@3FA:WORD			; RenderZbuffer
EXTRN	?RotTransVector@@YAXPATMatrixUnion@@PAUVectorStruct@@11@Z:NEAR ; RotTransVector
EXTRN	?CopyMatrix@@YAXPATMatrixUnion@@0@Z:NEAR	; CopyMatrix
EXTRN	?MatMulScalar@@YAXPATMatrixUnion@@M@Z:NEAR	; MatMulScalar
EXTRN	?IdentityMatrix@@3TMatrixUnion@@A:BYTE		; IdentityMatrix
EXTRN	?FrameCount@@3KA:DWORD				; FrameCount
EXTRN	?RenderSettings@@3URENDER_SETTINGS@@A:BYTE	; RenderSettings
EXTRN	?TexInfo@@3PAUTEXINFO@@A:DWORD			; TexInfo
EXTRN	?FlushPolyBuckets@@YAXXZ:NEAR			; FlushPolyBuckets
_BSS	SEGMENT
_FileFieldAxisType DD 01H DUP (?)
_FileFieldSide DD 01H DUP (?)
_FileFieldModel DB 078H DUP (?)
_BSS	ENDS
;	COMDAT __real@43800000
CONST	SEGMENT
__real@43800000 DD 043800000r			; 256
CONST	ENDS
;	COMDAT ??_C@_02DKCKIIND@?$CFs?$AA@
CONST	SEGMENT
??_C@_02DKCKIIND@?$CFs?$AA@ DB '%s', 00H		; `string'
CONST	ENDS
;	COMDAT __real@42800000
CONST	SEGMENT
__real@42800000 DD 042800000r			; 64
; Function compile flags: /Odt /ZI
CONST	ENDS
;	COMDAT ?DrawFields@@YAXXZ
_TEXT	SEGMENT
tv773 = -524						; size = 8
_buf$ = -452						; size = 128
_vec$ = -324						; size = 12
_mat$ = -312						; size = 36
_pos$ = -276						; size = 48
_vpos$ = -228						; size = 96
_v$ = -132						; size = 96
_field$ = -36						; size = 4
_mul$ = -32						; size = 4
_col$ = -28						; size = 16
_k$ = -12						; size = 4
_j$ = -8						; size = 4
_i$ = -4						; size = 4
?DrawFields@@YAXXZ PROC NEAR				; DrawFields, COMDAT

; 242  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 524				; 0000020cH
	push	ebx
	push	esi
	push	edi

; 243  : 	long i, j, k, col[4];
; 244  : 	float mul;
; 245  : 	FILE_FIELD *field;
; 246  : 	VEC v[8], vpos[8], pos[4];
; 247  : 	MAT mat;
; 248  : 	VEC vec;
; 249  : 	char buf[128];
; 250  : 
; 251  : // set render states
; 252  : 
; 253  : 	WIREFRAME_OFF();

	push	3
	push	8
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	edx
	call	DWORD PTR [ecx+88]
	mov	eax, DWORD PTR ?RenderStateChange@@3JA	; RenderStateChange
	add	eax, 1
	mov	DWORD PTR ?RenderStateChange@@3JA, eax	; RenderStateChange

; 254  : 
; 255  : // loop thru all fields
; 256  : 
; 257  : 	field = FileFields;

	mov	eax, DWORD PTR _FileFields
	mov	DWORD PTR _field$[ebp], eax

; 258  : 	for (i = 0 ; i < FileFieldNum ; i++, field++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $L81326
$L81327:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	mov	ecx, DWORD PTR _field$[ebp]
	add	ecx, 100				; 00000064H
	mov	DWORD PTR _field$[ebp], ecx
$L81326:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _FileFieldNum
	jge	$L81328

; 259  : 	{
; 260  : 
; 261  : // spherical
; 262  : 
; 263  : 		if (field->Type == FILE_FIELD_TYPE_SPHERICAL)

	mov	eax, DWORD PTR _field$[ebp]
	cmp	DWORD PTR [eax], 3
	jne	$L81329

; 264  : 		{
; 265  : 			ALPHA_ON();

	movsx	eax, WORD PTR ?RenderAlpha@@3FA		; RenderAlpha
	test	eax, eax
	jne	SHORT $L81330
	mov	WORD PTR ?RenderAlpha@@3FA, 1		; RenderAlpha
	movsx	eax, WORD PTR ?RenderAlpha@@3FA		; RenderAlpha
	push	eax
	push	27					; 0000001bH
	mov	ecx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	eax
	call	DWORD PTR [edx+88]
	mov	eax, DWORD PTR ?RenderStateChange@@3JA	; RenderStateChange
	add	eax, 1
	mov	DWORD PTR ?RenderStateChange@@3JA, eax	; RenderStateChange
$L81330:

; 266  : 			ALPHA_SRC(D3DBLEND_ONE);

	movsx	eax, WORD PTR ?RenderAlphaSrc@@3FA	; RenderAlphaSrc
	cmp	eax, 2
	je	SHORT $L81331
	mov	WORD PTR ?RenderAlphaSrc@@3FA, 2	; RenderAlphaSrc
	movsx	eax, WORD PTR ?RenderAlphaSrc@@3FA	; RenderAlphaSrc
	push	eax
	push	19					; 00000013H
	mov	ecx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	eax
	call	DWORD PTR [edx+88]
	mov	eax, DWORD PTR ?RenderStateChange@@3JA	; RenderStateChange
	add	eax, 1
	mov	DWORD PTR ?RenderStateChange@@3JA, eax	; RenderStateChange
$L81331:

; 267  : 			ALPHA_DEST(D3DBLEND_ONE);

	movsx	eax, WORD PTR ?RenderAlphaDest@@3FA	; RenderAlphaDest
	cmp	eax, 2
	je	SHORT $L81332
	mov	WORD PTR ?RenderAlphaDest@@3FA, 2	; RenderAlphaDest
	movsx	eax, WORD PTR ?RenderAlphaDest@@3FA	; RenderAlphaDest
	push	eax
	push	20					; 00000014H
	mov	ecx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	eax
	call	DWORD PTR [edx+88]
	mov	eax, DWORD PTR ?RenderStateChange@@3JA	; RenderStateChange
	add	eax, 1
	mov	DWORD PTR ?RenderStateChange@@3JA, eax	; RenderStateChange
$L81332:

; 268  : 			ZBUFFER_ON();

	movsx	eax, WORD PTR ?RenderZbuffer@@3FA	; RenderZbuffer
	cmp	eax, 1
	je	SHORT $L81333
	mov	WORD PTR ?RenderZbuffer@@3FA, 1		; RenderZbuffer
	movsx	eax, WORD PTR ?RenderZbuffer@@3FA	; RenderZbuffer
	push	eax
	push	7
	mov	ecx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	eax
	call	DWORD PTR [edx+88]
	mov	eax, DWORD PTR ?RenderStateChange@@3JA	; RenderStateChange
	add	eax, 1
	mov	DWORD PTR ?RenderStateChange@@3JA, eax	; RenderStateChange
$L81333:

; 269  : 
; 270  : 			CopyMatrix(&IdentityMatrix, &mat);

	lea	eax, DWORD PTR _mat$[ebp]
	push	eax
	push	OFFSET FLAT:?IdentityMatrix@@3TMatrixUnion@@A ; IdentityMatrix
	call	?CopyMatrix@@YAXPATMatrixUnion@@0@Z	; CopyMatrix
	add	esp, 8

; 271  : 			mul = field->RadStart / FileFieldModel[0].Radius;

	mov	eax, DWORD PTR _field$[ebp]
	fld	DWORD PTR [eax+84]
	fdiv	DWORD PTR _FileFieldModel
	fstp	DWORD PTR _mul$[ebp]

; 272  : 			for (j = 0 ; j < 9 ; j++) mat.m[j] *= mul;

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $L81334
$L81335:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$L81334:
	cmp	DWORD PTR _j$[ebp], 9
	jge	SHORT $L81336
	mov	eax, DWORD PTR _j$[ebp]
	fld	DWORD PTR _mul$[ebp]
	fmul	DWORD PTR _mat$[ebp+eax*4]
	mov	ecx, DWORD PTR _j$[ebp]
	fstp	DWORD PTR _mat$[ebp+ecx*4]
	jmp	SHORT $L81335
$L81336:

; 273  : 			DrawModel(&FileFieldModel[0], &mat, &field->Pos, MODEL_PLAIN);

	push	0
	mov	eax, DWORD PTR _field$[ebp]
	add	eax, 4
	push	eax
	lea	ecx, DWORD PTR _mat$[ebp]
	push	ecx
	push	OFFSET FLAT:_FileFieldModel
	call	?DrawModel@@YAXPAUMODEL@@PATMatrixUnion@@PAUVectorStruct@@F@Z ; DrawModel
	add	esp, 16					; 00000010H

; 274  : 
; 275  : 			CopyMatrix(&IdentityMatrix, &mat);

	lea	eax, DWORD PTR _mat$[ebp]
	push	eax
	push	OFFSET FLAT:?IdentityMatrix@@3TMatrixUnion@@A ; IdentityMatrix
	call	?CopyMatrix@@YAXPATMatrixUnion@@0@Z	; CopyMatrix
	add	esp, 8

; 276  : 			mul = field->RadEnd / FileFieldModel[1].Radius;

	mov	eax, DWORD PTR _field$[ebp]
	fld	DWORD PTR [eax+88]
	fdiv	DWORD PTR _FileFieldModel+60
	fstp	DWORD PTR _mul$[ebp]

; 277  : 			for (j = 0 ; j < 9 ; j++) mat.m[j] *= mul;

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $L81337
$L81338:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$L81337:
	cmp	DWORD PTR _j$[ebp], 9
	jge	SHORT $L81339
	mov	eax, DWORD PTR _j$[ebp]
	fld	DWORD PTR _mul$[ebp]
	fmul	DWORD PTR _mat$[ebp+eax*4]
	mov	ecx, DWORD PTR _j$[ebp]
	fstp	DWORD PTR _mat$[ebp+ecx*4]
	jmp	SHORT $L81338
$L81339:

; 278  : 			DrawModel(&FileFieldModel[1], &mat, &field->Pos, MODEL_PLAIN);

	push	0
	mov	eax, DWORD PTR _field$[ebp]
	add	eax, 4
	push	eax
	lea	ecx, DWORD PTR _mat$[ebp]
	push	ecx
	push	OFFSET FLAT:_FileFieldModel+60
	call	?DrawModel@@YAXPAUMODEL@@PATMatrixUnion@@PAUVectorStruct@@F@Z ; DrawModel
	add	esp, 16					; 00000010H

; 279  : 
; 280  : 			FlushPolyBuckets();

	call	?FlushPolyBuckets@@YAXXZ		; FlushPolyBuckets

; 281  : 		}
; 282  : 
; 283  : // hull
; 284  : 
; 285  : 		else

	jmp	$L81340
$L81329:

; 286  : 		{
; 287  : 
; 288  : // draw dir vec
; 289  : 
; 290  : 			ALPHA_OFF();

	movsx	eax, WORD PTR ?RenderAlpha@@3FA		; RenderAlpha
	test	eax, eax
	je	SHORT $L81341
	mov	WORD PTR ?RenderAlpha@@3FA, 0		; RenderAlpha
	movsx	eax, WORD PTR ?RenderAlpha@@3FA		; RenderAlpha
	push	eax
	push	27					; 0000001bH
	mov	ecx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	eax
	call	DWORD PTR [edx+88]
	mov	eax, DWORD PTR ?RenderStateChange@@3JA	; RenderStateChange
	add	eax, 1
	mov	DWORD PTR ?RenderStateChange@@3JA, eax	; RenderStateChange
$L81341:

; 291  : 			ZBUFFER_ON();

	movsx	eax, WORD PTR ?RenderZbuffer@@3FA	; RenderZbuffer
	cmp	eax, 1
	je	SHORT $L81342
	mov	WORD PTR ?RenderZbuffer@@3FA, 1		; RenderZbuffer
	movsx	eax, WORD PTR ?RenderZbuffer@@3FA	; RenderZbuffer
	push	eax
	push	7
	mov	ecx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	eax
	call	DWORD PTR [edx+88]
	mov	eax, DWORD PTR ?RenderStateChange@@3JA	; RenderStateChange
	add	eax, 1
	mov	DWORD PTR ?RenderStateChange@@3JA, eax	; RenderStateChange
$L81342:

; 292  : 
; 293  : 			vec.v[X] = field->Pos.v[X] + field->Dir.v[X] * 256;

	mov	eax, DWORD PTR _field$[ebp]
	fld	DWORD PTR [eax+64]
	fmul	DWORD PTR __real@43800000
	mov	ecx, DWORD PTR _field$[ebp]
	fadd	DWORD PTR [ecx+4]
	fstp	DWORD PTR _vec$[ebp]

; 294  : 			vec.v[Y] = field->Pos.v[Y] + field->Dir.v[Y] * 256;

	mov	eax, DWORD PTR _field$[ebp]
	fld	DWORD PTR [eax+68]
	fmul	DWORD PTR __real@43800000
	mov	ecx, DWORD PTR _field$[ebp]
	fadd	DWORD PTR [ecx+8]
	fstp	DWORD PTR _vec$[ebp+4]

; 295  : 			vec.v[Z] = field->Pos.v[Z] + field->Dir.v[Z] * 256;

	mov	eax, DWORD PTR _field$[ebp]
	fld	DWORD PTR [eax+72]
	fmul	DWORD PTR __real@43800000
	mov	ecx, DWORD PTR _field$[ebp]
	fadd	DWORD PTR [ecx+12]
	fstp	DWORD PTR _vec$[ebp+8]

; 296  : 
; 297  : 			DrawLine(&field->Pos, &vec, 0xffffff, 0xffffff);

	push	16777215				; 00ffffffH
	push	16777215				; 00ffffffH
	lea	eax, DWORD PTR _vec$[ebp]
	push	eax
	mov	ecx, DWORD PTR _field$[ebp]
	add	ecx, 4
	push	ecx
	call	?DrawLine@@YAXPAUVectorStruct@@0JJ@Z	; DrawLine
	add	esp, 16					; 00000010H

; 298  : 
; 299  : // get 8 corners
; 300  : 
; 301  : 			SetVector(&v[0], -field->Size[X], -field->Size[Y], -field->Size[Z]);

	mov	eax, DWORD PTR _field$[ebp]
	fld	DWORD PTR [eax+52]
	fchs
	fstp	DWORD PTR _v$[ebp]
	mov	eax, DWORD PTR _field$[ebp]
	fld	DWORD PTR [eax+56]
	fchs
	fstp	DWORD PTR _v$[ebp+4]
	mov	eax, DWORD PTR _field$[ebp]
	fld	DWORD PTR [eax+60]
	fchs
	fstp	DWORD PTR _v$[ebp+8]

; 302  : 			SetVector(&v[1], field->Size[X], -field->Size[Y], -field->Size[Z]);

	mov	eax, DWORD PTR _field$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	mov	DWORD PTR _v$[ebp+12], ecx
	mov	eax, DWORD PTR _field$[ebp]
	fld	DWORD PTR [eax+56]
	fchs
	fstp	DWORD PTR _v$[ebp+16]
	mov	eax, DWORD PTR _field$[ebp]
	fld	DWORD PTR [eax+60]
	fchs
	fstp	DWORD PTR _v$[ebp+20]

; 303  : 			SetVector(&v[2], -field->Size[X], -field->Size[Y], field->Size[Z]);

	mov	eax, DWORD PTR _field$[ebp]
	fld	DWORD PTR [eax+52]
	fchs
	fstp	DWORD PTR _v$[ebp+24]
	mov	eax, DWORD PTR _field$[ebp]
	fld	DWORD PTR [eax+56]
	fchs
	fstp	DWORD PTR _v$[ebp+28]
	mov	eax, DWORD PTR _field$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	mov	DWORD PTR _v$[ebp+32], ecx

; 304  : 			SetVector(&v[3], field->Size[X], -field->Size[Y], field->Size[Z]);

	mov	eax, DWORD PTR _field$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	mov	DWORD PTR _v$[ebp+36], ecx
	mov	eax, DWORD PTR _field$[ebp]
	fld	DWORD PTR [eax+56]
	fchs
	fstp	DWORD PTR _v$[ebp+40]
	mov	eax, DWORD PTR _field$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	mov	DWORD PTR _v$[ebp+44], ecx

; 305  : 
; 306  : 			SetVector(&v[4], -field->Size[X], field->Size[Y], -field->Size[Z]);

	mov	eax, DWORD PTR _field$[ebp]
	fld	DWORD PTR [eax+52]
	fchs
	fstp	DWORD PTR _v$[ebp+48]
	mov	eax, DWORD PTR _field$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	DWORD PTR _v$[ebp+52], ecx
	mov	eax, DWORD PTR _field$[ebp]
	fld	DWORD PTR [eax+60]
	fchs
	fstp	DWORD PTR _v$[ebp+56]

; 307  : 			SetVector(&v[5], field->Size[X], field->Size[Y], -field->Size[Z]);

	mov	eax, DWORD PTR _field$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	mov	DWORD PTR _v$[ebp+60], ecx
	mov	eax, DWORD PTR _field$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	DWORD PTR _v$[ebp+64], ecx
	mov	eax, DWORD PTR _field$[ebp]
	fld	DWORD PTR [eax+60]
	fchs
	fstp	DWORD PTR _v$[ebp+68]

; 308  : 			SetVector(&v[6], -field->Size[X], field->Size[Y], field->Size[Z]);

	mov	eax, DWORD PTR _field$[ebp]
	fld	DWORD PTR [eax+52]
	fchs
	fstp	DWORD PTR _v$[ebp+72]
	mov	eax, DWORD PTR _field$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	DWORD PTR _v$[ebp+76], ecx
	mov	eax, DWORD PTR _field$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	mov	DWORD PTR _v$[ebp+80], ecx

; 309  : 			SetVector(&v[7], field->Size[X], field->Size[Y], field->Size[Z]);

	mov	eax, DWORD PTR _field$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	mov	DWORD PTR _v$[ebp+84], ecx
	mov	eax, DWORD PTR _field$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	DWORD PTR _v$[ebp+88], ecx
	mov	eax, DWORD PTR _field$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	mov	DWORD PTR _v$[ebp+92], ecx

; 310  : 
; 311  : 			for (j = 0 ; j < 8 ; j++)

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $L81343
$L81344:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$L81343:
	cmp	DWORD PTR _j$[ebp], 8
	jge	SHORT $L81345

; 312  : 			{
; 313  : 				RotTransVector(&field->Matrix, &field->Pos, &v[j], &vpos[j]);

	mov	eax, DWORD PTR _j$[ebp]
	imul	eax, 12					; 0000000cH
	lea	ecx, DWORD PTR _vpos$[ebp+eax]
	push	ecx
	mov	edx, DWORD PTR _j$[ebp]
	imul	edx, 12					; 0000000cH
	lea	eax, DWORD PTR _v$[ebp+edx]
	push	eax
	mov	ecx, DWORD PTR _field$[ebp]
	add	ecx, 4
	push	ecx
	mov	edx, DWORD PTR _field$[ebp]
	add	edx, 16					; 00000010H
	push	edx
	call	?RotTransVector@@YAXPATMatrixUnion@@PAUVectorStruct@@11@Z ; RotTransVector
	add	esp, 16					; 00000010H

; 314  : 			}

	jmp	SHORT $L81344
$L81345:

; 315  : 
; 316  : // draw
; 317  : 
; 318  : 			SET_TPAGE(-1);

	movsx	eax, WORD PTR ?RenderTP@@3FA		; RenderTP
	cmp	eax, -1
	je	SHORT $L81346
	mov	WORD PTR ?RenderTP@@3FA, -1		; RenderTP
	movsx	eax, WORD PTR ?RenderTP@@3FA		; RenderTP
	cmp	eax, -1
	jne	SHORT $L81347
	push	0
	push	0
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	edx
	call	DWORD PTR [ecx+152]
	mov	eax, DWORD PTR ?TextureStateChange@@3JA	; TextureStateChange
	add	eax, 1
	mov	DWORD PTR ?TextureStateChange@@3JA, eax	; TextureStateChange
	jmp	SHORT $L81346
$L81347:
	movsx	eax, WORD PTR ?RenderTP@@3FA		; RenderTP
	shl	eax, 6
	mov	ecx, DWORD PTR ?TexInfo@@3PAUTEXINFO@@A	; TexInfo
	mov	edx, DWORD PTR [ecx+eax+52]
	push	edx
	push	0
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	edx
	call	DWORD PTR [ecx+152]
	mov	eax, DWORD PTR ?TextureStateChange@@3JA	; TextureStateChange
	add	eax, 1
	mov	DWORD PTR ?TextureStateChange@@3JA, eax	; TextureStateChange
$L81346:

; 319  : 			ALPHA_SRC(D3DBLEND_SRCALPHA);

	movsx	eax, WORD PTR ?RenderAlphaSrc@@3FA	; RenderAlphaSrc
	cmp	eax, 5
	je	SHORT $L81349
	mov	WORD PTR ?RenderAlphaSrc@@3FA, 5	; RenderAlphaSrc
	movsx	eax, WORD PTR ?RenderAlphaSrc@@3FA	; RenderAlphaSrc
	push	eax
	push	19					; 00000013H
	mov	ecx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	eax
	call	DWORD PTR [edx+88]
	mov	eax, DWORD PTR ?RenderStateChange@@3JA	; RenderStateChange
	add	eax, 1
	mov	DWORD PTR ?RenderStateChange@@3JA, eax	; RenderStateChange
$L81349:

; 320  : 			ALPHA_DEST(D3DBLEND_INVSRCALPHA);

	movsx	eax, WORD PTR ?RenderAlphaDest@@3FA	; RenderAlphaDest
	cmp	eax, 6
	je	SHORT $L81350
	mov	WORD PTR ?RenderAlphaDest@@3FA, 6	; RenderAlphaDest
	movsx	eax, WORD PTR ?RenderAlphaDest@@3FA	; RenderAlphaDest
	push	eax
	push	20					; 00000014H
	mov	ecx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	eax
	call	DWORD PTR [edx+88]
	mov	eax, DWORD PTR ?RenderStateChange@@3JA	; RenderStateChange
	add	eax, 1
	mov	DWORD PTR ?RenderStateChange@@3JA, eax	; RenderStateChange
$L81350:

; 321  : 			ALPHA_ON();

	movsx	eax, WORD PTR ?RenderAlpha@@3FA		; RenderAlpha
	test	eax, eax
	jne	SHORT $L81351
	mov	WORD PTR ?RenderAlpha@@3FA, 1		; RenderAlpha
	movsx	eax, WORD PTR ?RenderAlpha@@3FA		; RenderAlpha
	push	eax
	push	27					; 0000001bH
	mov	ecx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	eax
	call	DWORD PTR [edx+88]
	mov	eax, DWORD PTR ?RenderStateChange@@3JA	; RenderStateChange
	add	eax, 1
	mov	DWORD PTR ?RenderStateChange@@3JA, eax	; RenderStateChange
$L81351:

; 322  : 			ZBUFFER_ON();

	movsx	eax, WORD PTR ?RenderZbuffer@@3FA	; RenderZbuffer
	cmp	eax, 1
	je	SHORT $L81352
	mov	WORD PTR ?RenderZbuffer@@3FA, 1		; RenderZbuffer
	movsx	eax, WORD PTR ?RenderZbuffer@@3FA	; RenderZbuffer
	push	eax
	push	7
	mov	ecx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	eax
	call	DWORD PTR [edx+88]
	mov	eax, DWORD PTR ?RenderStateChange@@3JA	; RenderStateChange
	add	eax, 1
	mov	DWORD PTR ?RenderStateChange@@3JA, eax	; RenderStateChange
$L81352:

; 323  : 
; 324  : 			for (j = 0 ; j < 6 ; j++)

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $L81353
$L81354:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$L81353:
	cmp	DWORD PTR _j$[ebp], 6
	jge	$L81340

; 325  : 			{
; 326  : 				for (k = 0 ; k < 4 ; k++)

	mov	DWORD PTR _k$[ebp], 0
	jmp	SHORT $L81356
$L81357:
	mov	eax, DWORD PTR _k$[ebp]
	add	eax, 1
	mov	DWORD PTR _k$[ebp], eax
$L81356:
	cmp	DWORD PTR _k$[ebp], 4
	jge	$L81358

; 327  : 				{
; 328  : 					pos[k] = vpos[DrawFieldIndex[j * 4 + k]];

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _k$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	movzx	eax, WORD PTR _DrawFieldIndex[edx*2]
	imul	eax, 12					; 0000000cH
	lea	ecx, DWORD PTR _vpos$[ebp+eax]
	mov	edx, DWORD PTR _k$[ebp]
	imul	edx, 12					; 0000000cH
	lea	eax, DWORD PTR _pos$[ebp+edx]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], ecx

; 329  : 
; 330  : 					if (CurrentField == field && j == FileFieldSide)

	mov	eax, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	cmp	eax, DWORD PTR _field$[ebp]
	jne	SHORT $L81359
	mov	eax, DWORD PTR _j$[ebp]
	cmp	eax, DWORD PTR _FileFieldSide
	jne	SHORT $L81359

; 331  : 						col[k] = 0x80ffffff * (FrameCount & 1);

	mov	eax, DWORD PTR ?FrameCount@@3KA		; FrameCount
	and	eax, 1
	imul	eax, -2130706433			; 80ffffffH
	mov	ecx, DWORD PTR _k$[ebp]
	mov	DWORD PTR _col$[ebp+ecx*4], eax

; 332  : 					else

	jmp	SHORT $L81360
$L81359:

; 333  : 						col[k] = DrawFieldCol[field->Type % FILE_FIELD_TYPE_MAX];

	mov	eax, DWORD PTR _field$[ebp]
	mov	ecx, DWORD PTR [eax]
	and	ecx, -2147483645			; 80000003H
	jns	SHORT $L81753
	dec	ecx
	or	ecx, -4					; fffffffcH
	inc	ecx
$L81753:
	mov	edx, DWORD PTR _k$[ebp]
	mov	eax, DWORD PTR _DrawFieldCol[ecx*4]
	mov	DWORD PTR _col$[ebp+edx*4], eax
$L81360:

; 334  : 				}

	jmp	$L81357
$L81358:

; 335  : 
; 336  : 			DrawNearClipPolyTEX0(pos, col, 4);

	push	4
	lea	eax, DWORD PTR _col$[ebp]
	push	eax
	lea	ecx, DWORD PTR _pos$[ebp]
	push	ecx
	call	?DrawNearClipPolyTEX0@@YAXPAUVectorStruct@@PAJJ@Z ; DrawNearClipPolyTEX0
	add	esp, 12					; 0000000cH

; 337  : 			}

	jmp	$L81354
$L81340:

; 338  : 		}
; 339  : 
; 340  : // display name
; 341  : 
; 342  : 		wsprintf(buf, "%s", FileFieldTypeNames[field->Type]);

	mov	eax, DWORD PTR _field$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _FileFieldTypeNames[ecx*4]
	push	edx
	push	OFFSET FLAT:??_C@_02DKCKIIND@?$CFs?$AA@
	lea	eax, DWORD PTR _buf$[ebp]
	push	eax
	call	DWORD PTR __imp__wsprintfA
	add	esp, 12					; 0000000cH

; 343  : 		RotTransVector(&ViewMatrix, &ViewTrans, &field->Pos, &vec);

	lea	eax, DWORD PTR _vec$[ebp]
	push	eax
	mov	ecx, DWORD PTR _field$[ebp]
	add	ecx, 4
	push	ecx
	push	OFFSET FLAT:?ViewTrans@@3UVectorStruct@@A ; ViewTrans
	push	OFFSET FLAT:?ViewMatrix@@3TMatrixUnion@@A ; ViewMatrix
	call	?RotTransVector@@YAXPATMatrixUnion@@PAUVectorStruct@@11@Z ; RotTransVector
	add	esp, 16					; 00000010H

; 344  : 		vec.v[X] -= 32 * strlen(FileFieldTypeNames[field->Type]);

	mov	eax, DWORD PTR _field$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _FileFieldTypeNames[ecx*4]
	push	edx
	call	_strlen
	add	esp, 4
	shl	eax, 5
	mov	DWORD PTR tv773[ebp], eax
	mov	DWORD PTR tv773[ebp+4], 0
	fild	QWORD PTR tv773[ebp]
	fsubr	DWORD PTR _vec$[ebp]
	fstp	DWORD PTR _vec$[ebp]

; 345  : 		vec.v[Y] -= 64;

	fld	DWORD PTR _vec$[ebp+4]
	fsub	DWORD PTR __real@42800000
	fstp	DWORD PTR _vec$[ebp+4]

; 346  : 		if (vec.v[Z] > RenderSettings.NearClip)

	fld	DWORD PTR _vec$[ebp+8]
	fcomp	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+28
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	$L81362

; 347  : 		{
; 348  : 			ALPHA_OFF();

	movsx	eax, WORD PTR ?RenderAlpha@@3FA		; RenderAlpha
	test	eax, eax
	je	SHORT $L81363
	mov	WORD PTR ?RenderAlpha@@3FA, 0		; RenderAlpha
	movsx	eax, WORD PTR ?RenderAlpha@@3FA		; RenderAlpha
	push	eax
	push	27					; 0000001bH
	mov	ecx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	eax
	call	DWORD PTR [edx+88]
	mov	eax, DWORD PTR ?RenderStateChange@@3JA	; RenderStateChange
	add	eax, 1
	mov	DWORD PTR ?RenderStateChange@@3JA, eax	; RenderStateChange
$L81363:

; 349  : 			ZBUFFER_OFF();

	movsx	eax, WORD PTR ?RenderZbuffer@@3FA	; RenderZbuffer
	test	eax, eax
	je	SHORT $L81364
	mov	WORD PTR ?RenderZbuffer@@3FA, 0		; RenderZbuffer
	movsx	eax, WORD PTR ?RenderZbuffer@@3FA	; RenderZbuffer
	push	eax
	push	7
	mov	ecx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	eax
	call	DWORD PTR [edx+88]
	mov	eax, DWORD PTR ?RenderStateChange@@3JA	; RenderStateChange
	add	eax, 1
	mov	DWORD PTR ?RenderStateChange@@3JA, eax	; RenderStateChange
$L81364:

; 350  : 			DumpText3D(&vec, 64, 128, 0x00ffff, buf);

	lea	eax, DWORD PTR _buf$[ebp]
	push	eax
	push	65535					; 0000ffffH
	push	1124073472				; 43000000H
	push	1115684864				; 42800000H
	lea	ecx, DWORD PTR _vec$[ebp]
	push	ecx
	call	?DumpText3D@@YAXPAUVectorStruct@@MMJPAD@Z ; DumpText3D
	add	esp, 20					; 00000014H
$L81362:

; 351  : 		}
; 352  : 
; 353  : // draw axis?
; 354  : 
; 355  : 		if (CurrentField == field)

	mov	eax, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	cmp	eax, DWORD PTR _field$[ebp]
	jne	$L81365

; 356  : 		{
; 357  : 			ALPHA_OFF();

	movsx	eax, WORD PTR ?RenderAlpha@@3FA		; RenderAlpha
	test	eax, eax
	je	SHORT $L81366
	mov	WORD PTR ?RenderAlpha@@3FA, 0		; RenderAlpha
	movsx	eax, WORD PTR ?RenderAlpha@@3FA		; RenderAlpha
	push	eax
	push	27					; 0000001bH
	mov	ecx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	eax
	call	DWORD PTR [edx+88]
	mov	eax, DWORD PTR ?RenderStateChange@@3JA	; RenderStateChange
	add	eax, 1
	mov	DWORD PTR ?RenderStateChange@@3JA, eax	; RenderStateChange
$L81366:

; 358  : 			ZBUFFER_OFF();

	movsx	eax, WORD PTR ?RenderZbuffer@@3FA	; RenderZbuffer
	test	eax, eax
	je	SHORT $L81367
	mov	WORD PTR ?RenderZbuffer@@3FA, 0		; RenderZbuffer
	movsx	eax, WORD PTR ?RenderZbuffer@@3FA	; RenderZbuffer
	push	eax
	push	7
	mov	ecx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	eax
	call	DWORD PTR [edx+88]
	mov	eax, DWORD PTR ?RenderStateChange@@3JA	; RenderStateChange
	add	eax, 1
	mov	DWORD PTR ?RenderStateChange@@3JA, eax	; RenderStateChange
$L81367:

; 359  : 
; 360  : 			if (FileFieldAxisType)

	cmp	DWORD PTR _FileFieldAxisType, 0
	je	SHORT $L81368

; 361  : 				CopyMatrix(&IdentityMatrix, &mat);

	lea	eax, DWORD PTR _mat$[ebp]
	push	eax
	push	OFFSET FLAT:?IdentityMatrix@@3TMatrixUnion@@A ; IdentityMatrix
	call	?CopyMatrix@@YAXPATMatrixUnion@@0@Z	; CopyMatrix
	add	esp, 8

; 362  : 			else

	jmp	SHORT $L81369
$L81368:

; 363  : 				CopyMatrix(&CAM_MainCamera->WMatrix, &mat);

	lea	eax, DWORD PTR _mat$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	add	ecx, 16					; 00000010H
	push	ecx
	call	?CopyMatrix@@YAXPATMatrixUnion@@0@Z	; CopyMatrix
	add	esp, 8
$L81369:

; 364  : 
; 365  : 			MatMulScalar(&mat, 2.0f);

	push	1073741824				; 40000000H
	lea	eax, DWORD PTR _mat$[ebp]
	push	eax
	call	?MatMulScalar@@YAXPATMatrixUnion@@M@Z	; MatMulScalar
	add	esp, 8

; 366  : 			DrawAxis(&mat, &field->Pos);

	mov	eax, DWORD PTR _field$[ebp]
	add	eax, 4
	push	eax
	lea	ecx, DWORD PTR _mat$[ebp]
	push	ecx
	call	?DrawAxis@@YAXPATMatrixUnion@@PAUVectorStruct@@@Z ; DrawAxis
	add	esp, 8
$L81365:

; 367  : 		}
; 368  : 	}

	jmp	$L81327
$L81328:

; 369  : 
; 370  : // reset render states
; 371  : 
; 372  : 	WIREFRAME_ON();

	mov	eax, DWORD PTR ?DxState@@3UDX_STATE@@A+4
	push	eax
	push	8
	mov	ecx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	eax
	call	DWORD PTR [edx+88]
	mov	eax, DWORD PTR ?RenderStateChange@@3JA	; RenderStateChange
	add	eax, 1
	mov	DWORD PTR ?RenderStateChange@@3JA, eax	; RenderStateChange

; 373  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?DrawFields@@YAXXZ ENDP					; DrawFields
_TEXT	ENDS
PUBLIC	??_C@_0N@MOINFLNL@Axis?5?$CFs?5?9?5?$CFs?$AA@	; `string'
PUBLIC	??_C@_06LJIPCCJP@Rot?5?$CFs?$AA@		; `string'
PUBLIC	??_C@_07CNMMGIID@Mag?5?$CFs_?$AA@		; `string'
PUBLIC	??_C@_0O@MAGBIBKP@Mag?5?$CFld?4?$CF04ld?$AA@	; `string'
PUBLIC	??_C@_0M@MOMKOEKC@Damping?5?$CFs_?$AA@		; `string'
PUBLIC	??_C@_0BC@PGEIDLIK@Damping?5?$CFld?4?$CF04ld?$AA@ ; `string'
PUBLIC	??_C@_0P@DJKKECBE@Grad?5Start?5?$CFs_?$AA@	; `string'
PUBLIC	??_C@_0BF@EOBBDDIC@Grad?5Start?5?$CFld?4?$CF04ld?$AA@ ; `string'
PUBLIC	??_C@_0N@CHILAPFD@Grad?5End?5?$CFs_?$AA@	; `string'
PUBLIC	??_C@_0BD@PCBJNDIP@Grad?5End?5?$CFld?4?$CF04ld?$AA@ ; `string'
PUBLIC	??_C@_02HBOOOICD@?9?$DO?$AA@			; `string'
PUBLIC	?DisplayFieldInfo@@YAXPAUFILE_FIELD@@@Z		; DisplayFieldInfo
PUBLIC	__real@461c4000
EXTRN	?DumpText@@YAXFFFFJPAD@Z:NEAR			; DumpText
EXTRN	__ftol2:NEAR
_BSS	SEGMENT
_FileFieldAxis DD 01H DUP (?)
_FileFieldRotType DD 01H DUP (?)
_Picker	DD	01H DUP (?)
_EnterFlag DD	01H DUP (?)
_EnterString DB	080H DUP (?)
_BSS	ENDS
;	COMDAT ??_C@_0N@MOINFLNL@Axis?5?$CFs?5?9?5?$CFs?$AA@
CONST	SEGMENT
??_C@_0N@MOINFLNL@Axis?5?$CFs?5?9?5?$CFs?$AA@ DB 'Axis %s - %s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06LJIPCCJP@Rot?5?$CFs?$AA@
CONST	SEGMENT
??_C@_06LJIPCCJP@Rot?5?$CFs?$AA@ DB 'Rot %s', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07CNMMGIID@Mag?5?$CFs_?$AA@
CONST	SEGMENT
??_C@_07CNMMGIID@Mag?5?$CFs_?$AA@ DB 'Mag %s_', 00H	; `string'
CONST	ENDS
;	COMDAT __real@461c4000
CONST	SEGMENT
__real@461c4000 DD 0461c4000r			; 10000
CONST	ENDS
;	COMDAT ??_C@_0O@MAGBIBKP@Mag?5?$CFld?4?$CF04ld?$AA@
CONST	SEGMENT
??_C@_0O@MAGBIBKP@Mag?5?$CFld?4?$CF04ld?$AA@ DB 'Mag %ld.%04ld', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@MOMKOEKC@Damping?5?$CFs_?$AA@
CONST	SEGMENT
??_C@_0M@MOMKOEKC@Damping?5?$CFs_?$AA@ DB 'Damping %s_', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@PGEIDLIK@Damping?5?$CFld?4?$CF04ld?$AA@
CONST	SEGMENT
??_C@_0BC@PGEIDLIK@Damping?5?$CFld?4?$CF04ld?$AA@ DB 'Damping %ld.%04ld', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@DJKKECBE@Grad?5Start?5?$CFs_?$AA@
CONST	SEGMENT
??_C@_0P@DJKKECBE@Grad?5Start?5?$CFs_?$AA@ DB 'Grad Start %s_', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@EOBBDDIC@Grad?5Start?5?$CFld?4?$CF04ld?$AA@
CONST	SEGMENT
??_C@_0BF@EOBBDDIC@Grad?5Start?5?$CFld?4?$CF04ld?$AA@ DB 'Grad Start %ld.'
	DB	'%04ld', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@CHILAPFD@Grad?5End?5?$CFs_?$AA@
CONST	SEGMENT
??_C@_0N@CHILAPFD@Grad?5End?5?$CFs_?$AA@ DB 'Grad End %s_', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@PCBJNDIP@Grad?5End?5?$CFld?4?$CF04ld?$AA@
CONST	SEGMENT
??_C@_0BD@PCBJNDIP@Grad?5End?5?$CFld?4?$CF04ld?$AA@ DB 'Grad End %ld.%04l'
	DB	'd', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_02HBOOOICD@?9?$DO?$AA@
CONST	SEGMENT
??_C@_02HBOOOICD@?9?$DO?$AA@ DB '->', 00H		; `string'
; Function compile flags: /Odt /ZI
CONST	ENDS
;	COMDAT ?DisplayFieldInfo@@YAXPAUFILE_FIELD@@@Z
_TEXT	SEGMENT
tv320 = -324						; size = 4
tv304 = -324						; size = 4
tv288 = -324						; size = 4
tv271 = -324						; size = 4
_buf$ = -256						; size = 256
_field$ = 8						; size = 4
?DisplayFieldInfo@@YAXPAUFILE_FIELD@@@Z PROC NEAR	; DisplayFieldInfo, COMDAT

; 380  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 324				; 00000144H
	push	ebx
	push	esi
	push	edi

; 381  : 	char buf[256];
; 382  : 
; 383  : // Type
; 384  : 
; 385  : 	wsprintf(buf, "%s", FileFieldTypeNames[field->Type]);

	mov	eax, DWORD PTR _field$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _FileFieldTypeNames[ecx*4]
	push	edx
	push	OFFSET FLAT:??_C@_02DKCKIIND@?$CFs?$AA@
	lea	eax, DWORD PTR _buf$[ebp]
	push	eax
	call	DWORD PTR __imp__wsprintfA
	add	esp, 12					; 0000000cH

; 386  : 	DumpText(450, 0, 8, 16, 0xffff00, buf);

	lea	eax, DWORD PTR _buf$[ebp]
	push	eax
	push	16776960				; 00ffff00H
	push	16					; 00000010H
	push	8
	push	0
	push	450					; 000001c2H
	call	?DumpText@@YAXFFFFJPAD@Z		; DumpText
	add	esp, 24					; 00000018H

; 387  : 
; 388  : // axis
; 389  : 
; 390  : 	wsprintf(buf, "Axis %s - %s", FileFieldAxisNames[FileFieldAxis], FileFieldAxisTypeNames[FileFieldAxisType]);

	mov	eax, DWORD PTR _FileFieldAxisType
	mov	ecx, DWORD PTR _FileFieldAxisTypeNames[eax*4]
	push	ecx
	mov	edx, DWORD PTR _FileFieldAxis
	mov	eax, DWORD PTR _FileFieldAxisNames[edx*4]
	push	eax
	push	OFFSET FLAT:??_C@_0N@MOINFLNL@Axis?5?$CFs?5?9?5?$CFs?$AA@
	lea	ecx, DWORD PTR _buf$[ebp]
	push	ecx
	call	DWORD PTR __imp__wsprintfA
	add	esp, 16					; 00000010H

; 391  : 	DumpText(450, 24, 8, 16, 0xff00ff, buf);

	lea	eax, DWORD PTR _buf$[ebp]
	push	eax
	push	16711935				; 00ff00ffH
	push	16					; 00000010H
	push	8
	push	24					; 00000018H
	push	450					; 000001c2H
	call	?DumpText@@YAXFFFFJPAD@Z		; DumpText
	add	esp, 24					; 00000018H

; 392  : 
; 393  : // rot
; 394  : 
; 395  : 	wsprintf(buf, "Rot %s", FileFieldRotNames[FileFieldRotType]);

	mov	eax, DWORD PTR _FileFieldRotType
	mov	ecx, DWORD PTR _FileFieldRotNames[eax*4]
	push	ecx
	push	OFFSET FLAT:??_C@_06LJIPCCJP@Rot?5?$CFs?$AA@
	lea	edx, DWORD PTR _buf$[ebp]
	push	edx
	call	DWORD PTR __imp__wsprintfA
	add	esp, 12					; 0000000cH

; 396  : 	DumpText(450, 48, 8, 16, 0xff0000, buf);

	lea	eax, DWORD PTR _buf$[ebp]
	push	eax
	push	16711680				; 00ff0000H
	push	16					; 00000010H
	push	8
	push	48					; 00000030H
	push	450					; 000001c2H
	call	?DumpText@@YAXFFFFJPAD@Z		; DumpText
	add	esp, 24					; 00000018H

; 397  : 
; 398  : // mag
; 399  : 
; 400  : 	if (field->Type != FILE_FIELD_TYPE_SPHERICAL)

	mov	eax, DWORD PTR _field$[ebp]
	cmp	DWORD PTR [eax], 3
	je	$L81376

; 401  : 	{
; 402  : 		if (EnterFlag && !Picker) wsprintf(buf, "Mag %s_", EnterString);

	cmp	DWORD PTR _EnterFlag, 0
	je	SHORT $L81377
	cmp	DWORD PTR _Picker, 0
	jne	SHORT $L81377
	push	OFFSET FLAT:_EnterString
	push	OFFSET FLAT:??_C@_07CNMMGIID@Mag?5?$CFs_?$AA@
	lea	eax, DWORD PTR _buf$[ebp]
	push	eax
	call	DWORD PTR __imp__wsprintfA
	add	esp, 12					; 0000000cH

; 403  : 		else wsprintf(buf, "Mag %ld.%04ld", (long)field->Mag, (long)((field->Mag - (float)(long)field->Mag) * 10000));

	jmp	SHORT $L81379
$L81377:
	mov	eax, DWORD PTR _field$[ebp]
	fld	DWORD PTR [eax+76]
	call	__ftol2
	mov	DWORD PTR tv271[ebp], eax
	fild	DWORD PTR tv271[ebp]
	mov	ecx, DWORD PTR _field$[ebp]
	fsubr	DWORD PTR [ecx+76]
	fmul	DWORD PTR __real@461c4000
	call	__ftol2
	push	eax
	mov	edx, DWORD PTR _field$[ebp]
	fld	DWORD PTR [edx+76]
	call	__ftol2
	push	eax
	push	OFFSET FLAT:??_C@_0O@MAGBIBKP@Mag?5?$CFld?4?$CF04ld?$AA@
	lea	eax, DWORD PTR _buf$[ebp]
	push	eax
	call	DWORD PTR __imp__wsprintfA
	add	esp, 16					; 00000010H
$L81379:

; 404  : 		DumpText(450, 72, 8, 16, 0x00ffff, buf);

	lea	eax, DWORD PTR _buf$[ebp]
	push	eax
	push	65535					; 0000ffffH
	push	16					; 00000010H
	push	8
	push	72					; 00000048H
	push	450					; 000001c2H
	call	?DumpText@@YAXFFFFJPAD@Z		; DumpText
	add	esp, 24					; 00000018H
$L81376:

; 405  : 	}
; 406  : 
; 407  : // damping
; 408  : 
; 409  : 	if (field->Type == FILE_FIELD_TYPE_LINEAR || field->Type == FILE_FIELD_TYPE_ORIENTATION)

	mov	eax, DWORD PTR _field$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $L81386
	mov	eax, DWORD PTR _field$[ebp]
	cmp	DWORD PTR [eax], 1
	jne	$L81385
$L81386:

; 410  : 	{
; 411  : 		if (EnterFlag && Picker == 1) wsprintf(buf, "Damping %s_", EnterString);

	cmp	DWORD PTR _EnterFlag, 0
	je	SHORT $L81387
	cmp	DWORD PTR _Picker, 1
	jne	SHORT $L81387
	push	OFFSET FLAT:_EnterString
	push	OFFSET FLAT:??_C@_0M@MOMKOEKC@Damping?5?$CFs_?$AA@
	lea	eax, DWORD PTR _buf$[ebp]
	push	eax
	call	DWORD PTR __imp__wsprintfA
	add	esp, 12					; 0000000cH

; 412  : 		else wsprintf(buf, "Damping %ld.%04ld", (long)field->Damping, (long)((field->Damping - (float)(long)field->Damping) * 10000));

	jmp	SHORT $L81389
$L81387:
	mov	eax, DWORD PTR _field$[ebp]
	fld	DWORD PTR [eax+80]
	call	__ftol2
	mov	DWORD PTR tv288[ebp], eax
	fild	DWORD PTR tv288[ebp]
	mov	ecx, DWORD PTR _field$[ebp]
	fsubr	DWORD PTR [ecx+80]
	fmul	DWORD PTR __real@461c4000
	call	__ftol2
	push	eax
	mov	edx, DWORD PTR _field$[ebp]
	fld	DWORD PTR [edx+80]
	call	__ftol2
	push	eax
	push	OFFSET FLAT:??_C@_0BC@PGEIDLIK@Damping?5?$CFld?4?$CF04ld?$AA@
	lea	eax, DWORD PTR _buf$[ebp]
	push	eax
	call	DWORD PTR __imp__wsprintfA
	add	esp, 16					; 00000010H
$L81389:

; 413  : 		DumpText(450, 96, 8, 16, 0x00ff00, buf);

	lea	eax, DWORD PTR _buf$[ebp]
	push	eax
	push	65280					; 0000ff00H
	push	16					; 00000010H
	push	8
	push	96					; 00000060H
	push	450					; 000001c2H
	call	?DumpText@@YAXFFFFJPAD@Z		; DumpText
	add	esp, 24					; 00000018H
$L81385:

; 414  : 	}
; 415  : 
; 416  : // grad start
; 417  : 
; 418  : 	if (field->Type == FILE_FIELD_TYPE_SPHERICAL)

	mov	eax, DWORD PTR _field$[ebp]
	cmp	DWORD PTR [eax], 3
	jne	$L81395

; 419  : 	{
; 420  : 		if (EnterFlag && !Picker) wsprintf(buf, "Grad Start %s_", EnterString);

	cmp	DWORD PTR _EnterFlag, 0
	je	SHORT $L81396
	cmp	DWORD PTR _Picker, 0
	jne	SHORT $L81396
	push	OFFSET FLAT:_EnterString
	push	OFFSET FLAT:??_C@_0P@DJKKECBE@Grad?5Start?5?$CFs_?$AA@
	lea	eax, DWORD PTR _buf$[ebp]
	push	eax
	call	DWORD PTR __imp__wsprintfA
	add	esp, 12					; 0000000cH

; 421  : 		else wsprintf(buf, "Grad Start %ld.%04ld", (long)field->GradStart, (long)((field->GradStart - (float)(long)field->GradStart) * 10000));

	jmp	SHORT $L81398
$L81396:
	mov	eax, DWORD PTR _field$[ebp]
	fld	DWORD PTR [eax+92]
	call	__ftol2
	mov	DWORD PTR tv304[ebp], eax
	fild	DWORD PTR tv304[ebp]
	mov	ecx, DWORD PTR _field$[ebp]
	fsubr	DWORD PTR [ecx+92]
	fmul	DWORD PTR __real@461c4000
	call	__ftol2
	push	eax
	mov	edx, DWORD PTR _field$[ebp]
	fld	DWORD PTR [edx+92]
	call	__ftol2
	push	eax
	push	OFFSET FLAT:??_C@_0BF@EOBBDDIC@Grad?5Start?5?$CFld?4?$CF04ld?$AA@
	lea	eax, DWORD PTR _buf$[ebp]
	push	eax
	call	DWORD PTR __imp__wsprintfA
	add	esp, 16					; 00000010H
$L81398:

; 422  : 		DumpText(450, 72, 8, 16, 0x00ffff, buf);

	lea	eax, DWORD PTR _buf$[ebp]
	push	eax
	push	65535					; 0000ffffH
	push	16					; 00000010H
	push	8
	push	72					; 00000048H
	push	450					; 000001c2H
	call	?DumpText@@YAXFFFFJPAD@Z		; DumpText
	add	esp, 24					; 00000018H
$L81395:

; 423  : 	}
; 424  : 
; 425  : // grad end
; 426  : 
; 427  : 	if (field->Type == FILE_FIELD_TYPE_SPHERICAL)

	mov	eax, DWORD PTR _field$[ebp]
	cmp	DWORD PTR [eax], 3
	jne	$L81404

; 428  : 	{
; 429  : 		if (EnterFlag && Picker == 1) wsprintf(buf, "Grad End %s_", EnterString);

	cmp	DWORD PTR _EnterFlag, 0
	je	SHORT $L81405
	cmp	DWORD PTR _Picker, 1
	jne	SHORT $L81405
	push	OFFSET FLAT:_EnterString
	push	OFFSET FLAT:??_C@_0N@CHILAPFD@Grad?5End?5?$CFs_?$AA@
	lea	eax, DWORD PTR _buf$[ebp]
	push	eax
	call	DWORD PTR __imp__wsprintfA
	add	esp, 12					; 0000000cH

; 430  : 		else wsprintf(buf, "Grad End %ld.%04ld", (long)field->GradEnd, (long)((field->GradEnd - (float)(long)field->GradEnd) * 10000));

	jmp	SHORT $L81407
$L81405:
	mov	eax, DWORD PTR _field$[ebp]
	fld	DWORD PTR [eax+96]
	call	__ftol2
	mov	DWORD PTR tv320[ebp], eax
	fild	DWORD PTR tv320[ebp]
	mov	ecx, DWORD PTR _field$[ebp]
	fsubr	DWORD PTR [ecx+96]
	fmul	DWORD PTR __real@461c4000
	call	__ftol2
	push	eax
	mov	edx, DWORD PTR _field$[ebp]
	fld	DWORD PTR [edx+96]
	call	__ftol2
	push	eax
	push	OFFSET FLAT:??_C@_0BD@PCBJNDIP@Grad?5End?5?$CFld?4?$CF04ld?$AA@
	lea	eax, DWORD PTR _buf$[ebp]
	push	eax
	call	DWORD PTR __imp__wsprintfA
	add	esp, 16					; 00000010H
$L81407:

; 431  : 		DumpText(450, 96, 8, 16, 0x00ff00, buf);

	lea	eax, DWORD PTR _buf$[ebp]
	push	eax
	push	65280					; 0000ff00H
	push	16					; 00000010H
	push	8
	push	96					; 00000060H
	push	450					; 000001c2H
	call	?DumpText@@YAXFFFFJPAD@Z		; DumpText
	add	esp, 24					; 00000018H
$L81404:

; 432  : 	}
; 433  : 
; 434  : // picker
; 435  : 
; 436  : 	DumpText(426, Picker * 24 + 72, 8, 16, 0xffffff, "->");

	push	OFFSET FLAT:??_C@_02HBOOOICD@?9?$DO?$AA@
	push	16777215				; 00ffffffH
	push	16					; 00000010H
	push	8
	mov	eax, DWORD PTR _Picker
	imul	eax, 24					; 00000018H
	add	eax, 72					; 00000048H
	push	eax
	push	426					; 000001aaH
	call	?DumpText@@YAXFFFFJPAD@Z		; DumpText
	add	esp, 24					; 00000018H

; 437  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?DisplayFieldInfo@@YAXPAUFILE_FIELD@@@Z ENDP		; DisplayFieldInfo
_TEXT	ENDS
PUBLIC	?sqrt@@YAMM@Z					; sqrt
PUBLIC	??_C@_03IAKKBENL@fld?$AA@			; `string'
PUBLIC	?EditFields@@YAXXZ				; EditFields
PUBLIC	__real@45400000
PUBLIC	__real@3f800000
PUBLIC	__real@43a00000
PUBLIC	__real@43700000
PUBLIC	__real@43000000
PUBLIC	__real@40800000
PUBLIC	__real@c0800000
PUBLIC	__real@45800000
PUBLIC	__real@42000000
PUBLIC	__real@00000000
PUBLIC	__real@41800000
PUBLIC	__real@3ba3d70a
PUBLIC	__real@3e800000
EXTRN	?MouseXpos@@3MA:DWORD				; MouseXpos
EXTRN	?MouseYpos@@3MA:DWORD				; MouseYpos
EXTRN	?MouseXrel@@3MA:DWORD				; MouseXrel
EXTRN	?MouseYrel@@3MA:DWORD				; MouseYrel
EXTRN	?CameraEditXrel@@3MA:DWORD			; CameraEditXrel
EXTRN	?CameraEditYrel@@3MA:DWORD			; CameraEditYrel
EXTRN	?CameraEditZrel@@3MA:DWORD			; CameraEditZrel
EXTRN	?MouseLeft@@3DA:BYTE				; MouseLeft
EXTRN	?MouseRight@@3DA:BYTE				; MouseRight
EXTRN	?GetKeyPress@@YAEXZ:NEAR			; GetKeyPress
EXTRN	?Keys@@3PADA:BYTE				; Keys
EXTRN	?LastKeys@@3PADA:BYTE				; LastKeys
EXTRN	?Mouse@@3U_DIMOUSESTATE@@A:BYTE			; Mouse
EXTRN	?GetLevelFilename@@YAPADPADJ@Z:NEAR		; GetLevelFilename
EXTRN	?RotMatrixZYX@@YAXPATMatrixUnion@@MMM@Z:NEAR	; RotMatrixZYX
EXTRN	?RotVector@@YAXPATMatrixUnion@@PAUVectorStruct@@1@Z:NEAR ; RotVector
EXTRN	_atof:NEAR
EXTRN	?MulMatrix@@YAXPATMatrixUnion@@00@Z:NEAR	; MulMatrix
EXTRN	?UpVec@@3UVectorStruct@@A:BYTE			; UpVec
EXTRN	?TimeFactor@@3MA:DWORD				; TimeFactor
;	COMDAT __real@45400000
CONST	SEGMENT
__real@45400000 DD 045400000r			; 3072
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT ??_C@_03IAKKBENL@fld?$AA@
CONST	SEGMENT
??_C@_03IAKKBENL@fld?$AA@ DB 'fld', 00H			; `string'
CONST	ENDS
;	COMDAT __real@43a00000
CONST	SEGMENT
__real@43a00000 DD 043a00000r			; 320
CONST	ENDS
;	COMDAT __real@43700000
CONST	SEGMENT
__real@43700000 DD 043700000r			; 240
CONST	ENDS
;	COMDAT __real@43000000
CONST	SEGMENT
__real@43000000 DD 043000000r			; 128
CONST	ENDS
;	COMDAT __real@40800000
CONST	SEGMENT
__real@40800000 DD 040800000r			; 4
CONST	ENDS
;	COMDAT __real@c0800000
CONST	SEGMENT
__real@c0800000 DD 0c0800000r			; -4
CONST	ENDS
;	COMDAT __real@45800000
CONST	SEGMENT
__real@45800000 DD 045800000r			; 4096
CONST	ENDS
;	COMDAT __real@42000000
CONST	SEGMENT
__real@42000000 DD 042000000r			; 32
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT __real@41800000
CONST	SEGMENT
__real@41800000 DD 041800000r			; 16
CONST	ENDS
;	COMDAT __real@3ba3d70a
CONST	SEGMENT
__real@3ba3d70a DD 03ba3d70ar			; 0.005
CONST	ENDS
;	COMDAT __real@3e800000
CONST	SEGMENT
__real@3e800000 DD 03e800000r			; 0.25
; Function compile flags: /Odt /ZI
CONST	ENDS
;	COMDAT ?EditFields@@YAXXZ
_TEXT	SEGMENT
tv1997 = -312						; size = 4
tv1026 = -312						; size = 4
tv801 = -312						; size = 4
tv129 = -312						; size = 4
__mul$81578 = -244					; size = 4
__mul$81576 = -240					; size = 4
__mul$81571 = -236					; size = 4
__mul$81569 = -232					; size = 4
__mul$81564 = -228					; size = 4
__mul$81559 = -224					; size = 4
__mul$81463 = -220					; size = 4
__mul$81461 = -216					; size = 4
_field$ = -212						; size = 4
_nfield$ = -208						; size = 4
_c$ = -201						; size = 1
_mat2$ = -200						; size = 36
_mat$ = -164						; size = 36
_f$ = -128						; size = 4
_add$ = -124						; size = 4
_rad$ = -120						; size = 4
_sy$ = -116						; size = 4
_sx$ = -112						; size = 4
_z$ = -108						; size = 4
_l2$ = -104						; size = 12
_u2$ = -92						; size = 12
_r2$ = -80						; size = 12
_l$ = -68						; size = 12
_u$ = -56						; size = 12
_r$ = -44						; size = 12
_vec2$ = -32						; size = 12
_vec$ = -20						; size = 12
_j$ = -8						; size = 4
_i$ = -4						; size = 4
?EditFields@@YAXXZ PROC NEAR				; EditFields, COMDAT

; 444  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 312				; 00000138H
	push	ebx
	push	esi
	push	edi

; 445  : 	long i, j;
; 446  : 	VEC vec, vec2, r, u, l, r2, u2, l2;
; 447  : 	float z, sx, sy, rad, add, f;
; 448  : 	MAT mat, mat2;
; 449  : 	unsigned char c;
; 450  : 	FILE_FIELD *nfield, *field;
; 451  : 
; 452  : // quit if not in edit mode
; 453  : 
; 454  : 	if (CAM_MainCamera->Type != CAM_EDIT)

	mov	eax, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	cmp	DWORD PTR [eax], 5
	je	SHORT $L81438

; 455  : 	{
; 456  : 		CurrentField = NULL;

	mov	DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A, 0 ; CurrentField

; 457  : 		EnterFlag = FALSE;

	mov	DWORD PTR _EnterFlag, 0

; 458  : 		return;

	jmp	$L81416
$L81438:

; 459  : 	}
; 460  : 
; 461  : // entering number?
; 462  : 
; 463  : 	if (EnterFlag)

	cmp	DWORD PTR _EnterFlag, 0
	je	$L81439

; 464  : 	{
; 465  : 		if ((c = GetKeyPress()))

	call	?GetKeyPress@@YAEXZ			; GetKeyPress
	mov	BYTE PTR _c$[ebp], al
	movzx	eax, BYTE PTR _c$[ebp]
	test	eax, eax
	je	$L81440

; 466  : 		{
; 467  : 			if (c == 8)

	movzx	eax, BYTE PTR _c$[ebp]
	cmp	eax, 8
	jne	SHORT $L81441

; 468  : 			{
; 469  : 				if (strlen(EnterString))

	push	OFFSET FLAT:_EnterString
	call	_strlen
	add	esp, 4
	test	eax, eax
	je	SHORT $L81442

; 470  : 				{
; 471  : 					EnterString[strlen(EnterString) - 1] = 0;

	push	OFFSET FLAT:_EnterString
	call	_strlen
	add	esp, 4
	mov	BYTE PTR _EnterString[eax-1], 0
$L81442:

; 472  : 				}
; 473  : 			}
; 474  : 			else if (c != 13 && c != 27)

	jmp	SHORT $L81443
$L81441:
	movzx	eax, BYTE PTR _c$[ebp]
	cmp	eax, 13					; 0000000dH
	je	SHORT $L81443
	movzx	eax, BYTE PTR _c$[ebp]
	cmp	eax, 27					; 0000001bH
	je	SHORT $L81443

; 475  : 			{
; 476  : 				if (strlen(EnterString) < 127)

	push	OFFSET FLAT:_EnterString
	call	_strlen
	add	esp, 4
	cmp	eax, 127				; 0000007fH
	jae	SHORT $L81443

; 477  : 				{
; 478  : 					EnterString[strlen(EnterString) + 1] = 0;

	push	OFFSET FLAT:_EnterString
	call	_strlen
	add	esp, 4
	mov	BYTE PTR _EnterString[eax+1], 0

; 479  : 					EnterString[strlen(EnterString)] = c;

	push	OFFSET FLAT:_EnterString
	call	_strlen
	add	esp, 4
	mov	cl, BYTE PTR _c$[ebp]
	mov	BYTE PTR _EnterString[eax], cl
$L81443:

; 480  : 				}
; 481  : 			}
; 482  : 			if (c == 13)

	movzx	eax, BYTE PTR _c$[ebp]
	cmp	eax, 13					; 0000000dH
	jne	SHORT $L81440

; 483  : 			{
; 484  : 				f = (float)atof(EnterString);

	push	OFFSET FLAT:_EnterString
	call	_atof
	add	esp, 4
	fstp	DWORD PTR _f$[ebp]

; 485  : 				switch (Picker)

	mov	eax, DWORD PTR _Picker
	mov	DWORD PTR tv129[ebp], eax
	cmp	DWORD PTR tv129[ebp], 0
	je	SHORT $L81452
	cmp	DWORD PTR tv129[ebp], 1
	je	SHORT $L81455
	jmp	SHORT $L81449
$L81452:

; 486  : 				{
; 487  : 					case 0:
; 488  : 						if (CurrentField->Type == FILE_FIELD_TYPE_SPHERICAL) CurrentField->GradStart = f;

	mov	eax, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	cmp	DWORD PTR [eax], 3
	jne	SHORT $L81453
	mov	eax, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	mov	ecx, DWORD PTR _f$[ebp]
	mov	DWORD PTR [eax+92], ecx

; 489  : 						else CurrentField->Mag = f;

	jmp	SHORT $L81454
$L81453:
	mov	eax, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	mov	ecx, DWORD PTR _f$[ebp]
	mov	DWORD PTR [eax+76], ecx
$L81454:

; 490  : 					break;

	jmp	SHORT $L81449
$L81455:

; 491  : 
; 492  : 					case 1:
; 493  : 						if (CurrentField->Type == FILE_FIELD_TYPE_SPHERICAL) CurrentField->GradEnd = f;

	mov	eax, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	cmp	DWORD PTR [eax], 3
	jne	SHORT $L81456
	mov	eax, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	mov	ecx, DWORD PTR _f$[ebp]
	mov	DWORD PTR [eax+96], ecx

; 494  : 						else CurrentField->Damping = f;

	jmp	SHORT $L81449
$L81456:
	mov	eax, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	mov	ecx, DWORD PTR _f$[ebp]
	mov	DWORD PTR [eax+80], ecx
$L81449:

; 495  : 					break;
; 496  : 				}
; 497  : 
; 498  : 				EnterFlag = FALSE;

	mov	DWORD PTR _EnterFlag, 0
$L81440:

; 499  : 			}
; 500  : 		}
; 501  : 		return;

	jmp	$L81416
$L81439:

; 502  : 	}
; 503  : 
; 504  : // rotate camera?
; 505  : 
; 506  : 	if (MouseRight)

	movsx	eax, BYTE PTR ?MouseRight@@3DA		; MouseRight
	test	eax, eax
	je	$L81458

; 507  : 	{
; 508  : 		RotMatrixZYX(&mat, (float)-Mouse.lY / 3072, -(float)Mouse.lX / 3072, 0);

	push	0
	fild	DWORD PTR ?Mouse@@3U_DIMOUSESTATE@@A
	fchs
	fdiv	DWORD PTR __real@45400000
	push	ecx
	fstp	DWORD PTR [esp]
	mov	eax, DWORD PTR ?Mouse@@3U_DIMOUSESTATE@@A+4
	neg	eax
	mov	DWORD PTR tv1997[ebp], eax
	fild	DWORD PTR tv1997[ebp]
	fdiv	DWORD PTR __real@45400000
	push	ecx
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR _mat$[ebp]
	push	ecx
	call	?RotMatrixZYX@@YAXPATMatrixUnion@@MMM@Z	; RotMatrixZYX
	add	esp, 16					; 00000010H

; 509  : 		MulMatrix(&CAM_MainCamera->WMatrix, &mat, &mat2);

	lea	eax, DWORD PTR _mat2$[ebp]
	push	eax
	lea	ecx, DWORD PTR _mat$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	add	edx, 16					; 00000010H
	push	edx
	call	?MulMatrix@@YAXPATMatrixUnion@@00@Z	; MulMatrix
	add	esp, 12					; 0000000cH

; 510  : 		CopyMatrix(&mat2, &CAM_MainCamera->WMatrix);

	mov	eax, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	add	eax, 16					; 00000010H
	push	eax
	lea	ecx, DWORD PTR _mat2$[ebp]
	push	ecx
	call	?CopyMatrix@@YAXPATMatrixUnion@@0@Z	; CopyMatrix
	add	esp, 8

; 511  : 
; 512  : 		CAM_MainCamera->WMatrix.m[RY] = 0;

	mov	eax, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	mov	DWORD PTR [eax+20], 0

; 513  : 		NormalizeVector(&CAM_MainCamera->WMatrix.mv[X]);

	mov	eax, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	mov	ecx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fld	DWORD PTR [eax+16]
	fmul	DWORD PTR [ecx+16]
	mov	edx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	mov	eax, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fld	DWORD PTR [edx+20]
	fmul	DWORD PTR [eax+20]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	mov	edx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fld	DWORD PTR [ecx+24]
	fmul	DWORD PTR [edx+24]
	faddp	ST(1), ST(0)
	push	ecx
	fstp	DWORD PTR [esp]
	call	?sqrt@@YAMM@Z				; sqrt
	add	esp, 4
	fdivr	DWORD PTR __real@3f800000
	fstp	DWORD PTR __mul$81461[ebp]
	mov	eax, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fld	DWORD PTR __mul$81461[ebp]
	fmul	DWORD PTR [eax+16]
	mov	ecx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fstp	DWORD PTR [ecx+16]
	mov	eax, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fld	DWORD PTR __mul$81461[ebp]
	fmul	DWORD PTR [eax+20]
	mov	ecx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fstp	DWORD PTR [ecx+20]
	mov	eax, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fld	DWORD PTR __mul$81461[ebp]
	fmul	DWORD PTR [eax+24]
	mov	ecx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fstp	DWORD PTR [ecx+24]

; 514  : 		CrossProduct(&CAM_MainCamera->WMatrix.mv[Z], &CAM_MainCamera->WMatrix.mv[X], &CAM_MainCamera->WMatrix.mv[Y]);

	mov	eax, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	mov	ecx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fld	DWORD PTR [eax+44]
	fmul	DWORD PTR [ecx+24]
	mov	edx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	mov	eax, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fld	DWORD PTR [edx+48]
	fmul	DWORD PTR [eax+20]
	fsubp	ST(1), ST(0)
	mov	ecx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fstp	DWORD PTR [ecx+28]
	mov	eax, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	mov	ecx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fld	DWORD PTR [eax+48]
	fmul	DWORD PTR [ecx+16]
	mov	edx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	mov	eax, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fld	DWORD PTR [edx+40]
	fmul	DWORD PTR [eax+24]
	fsubp	ST(1), ST(0)
	mov	ecx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fstp	DWORD PTR [ecx+32]
	mov	eax, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	mov	ecx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fld	DWORD PTR [eax+40]
	fmul	DWORD PTR [ecx+20]
	mov	edx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	mov	eax, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fld	DWORD PTR [edx+44]
	fmul	DWORD PTR [eax+16]
	fsubp	ST(1), ST(0)
	mov	ecx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fstp	DWORD PTR [ecx+36]

; 515  : 		NormalizeVector(&CAM_MainCamera->WMatrix.mv[Y]);

	mov	eax, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	mov	ecx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fld	DWORD PTR [eax+28]
	fmul	DWORD PTR [ecx+28]
	mov	edx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	mov	eax, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fld	DWORD PTR [edx+32]
	fmul	DWORD PTR [eax+32]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	mov	edx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fld	DWORD PTR [ecx+36]
	fmul	DWORD PTR [edx+36]
	faddp	ST(1), ST(0)
	push	ecx
	fstp	DWORD PTR [esp]
	call	?sqrt@@YAMM@Z				; sqrt
	add	esp, 4
	fdivr	DWORD PTR __real@3f800000
	fstp	DWORD PTR __mul$81463[ebp]
	mov	eax, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fld	DWORD PTR __mul$81463[ebp]
	fmul	DWORD PTR [eax+28]
	mov	ecx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fstp	DWORD PTR [ecx+28]
	mov	eax, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fld	DWORD PTR __mul$81463[ebp]
	fmul	DWORD PTR [eax+32]
	mov	ecx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fstp	DWORD PTR [ecx+32]
	mov	eax, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fld	DWORD PTR __mul$81463[ebp]
	fmul	DWORD PTR [eax+36]
	mov	ecx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fstp	DWORD PTR [ecx+36]

; 516  : 		CrossProduct(&CAM_MainCamera->WMatrix.mv[X], &CAM_MainCamera->WMatrix.mv[Y], &CAM_MainCamera->WMatrix.mv[Z]);

	mov	eax, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	mov	ecx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fld	DWORD PTR [eax+20]
	fmul	DWORD PTR [ecx+36]
	mov	edx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	mov	eax, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fld	DWORD PTR [edx+24]
	fmul	DWORD PTR [eax+32]
	fsubp	ST(1), ST(0)
	mov	ecx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fstp	DWORD PTR [ecx+40]
	mov	eax, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	mov	ecx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fld	DWORD PTR [eax+24]
	fmul	DWORD PTR [ecx+28]
	mov	edx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	mov	eax, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fld	DWORD PTR [edx+16]
	fmul	DWORD PTR [eax+36]
	fsubp	ST(1), ST(0)
	mov	ecx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fstp	DWORD PTR [ecx+44]
	mov	eax, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	mov	ecx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fld	DWORD PTR [eax+16]
	fmul	DWORD PTR [ecx+32]
	mov	edx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	mov	eax, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fld	DWORD PTR [edx+20]
	fmul	DWORD PTR [eax+28]
	fsubp	ST(1), ST(0)
	mov	ecx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fstp	DWORD PTR [ecx+48]
$L81458:

; 517  : 	}
; 518  : 
; 519  : // save fields?
; 520  : 
; 521  : 	if (Keys[DIK_LCONTROL] && Keys[DIK_F4] && !LastKeys[DIK_F4])

	movsx	eax, BYTE PTR ?Keys@@3PADA+29
	test	eax, eax
	je	SHORT $L81465
	movsx	eax, BYTE PTR ?Keys@@3PADA+62
	test	eax, eax
	je	SHORT $L81465
	movsx	eax, BYTE PTR ?LastKeys@@3PADA+62
	test	eax, eax
	jne	SHORT $L81465

; 522  : 	{
; 523  : 		SaveFileFields(GetLevelFilename("fld", FILENAME_MAKE_BODY | FILENAME_GAME_SETTINGS));

	push	3
	push	OFFSET FLAT:??_C@_03IAKKBENL@fld?$AA@
	call	?GetLevelFilename@@YAPADPADJ@Z		; GetLevelFilename
	add	esp, 8
	push	eax
	call	?SaveFileFields@@YAXPAD@Z		; SaveFileFields
	add	esp, 4
$L81465:

; 524  : 	}
; 525  : 
; 526  : // get a current field?
; 527  : 
; 528  : 	if (Keys[DIK_RETURN] && !LastKeys[DIK_RETURN])

	movsx	eax, BYTE PTR ?Keys@@3PADA+28
	test	eax, eax
	je	$L81467
	movsx	eax, BYTE PTR ?LastKeys@@3PADA+28
	test	eax, eax
	jne	$L81467

; 529  : 	{
; 530  : 		nfield = NULL;

	mov	DWORD PTR _nfield$[ebp], 0

; 531  : 		z = RenderSettings.FarClip;

	mov	eax, DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+32
	mov	DWORD PTR _z$[ebp], eax

; 532  : 
; 533  : 		field = FileFields;

	mov	eax, DWORD PTR _FileFields
	mov	DWORD PTR _field$[ebp], eax

; 534  : 		for (i = 0 ; i < FileFieldNum ; i++, field++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $L81468
$L81469:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	mov	ecx, DWORD PTR _field$[ebp]
	add	ecx, 100				; 00000064H
	mov	DWORD PTR _field$[ebp], ecx
$L81468:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _FileFieldNum
	jge	$L81470

; 535  : 		{
; 536  : 			for (j = 0 ; j < 2 ; j++)

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $L81471
$L81472:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$L81471:
	cmp	DWORD PTR _j$[ebp], 2
	jge	$L81473

; 537  : 			{
; 538  : 				RotTransVector(&ViewMatrix, &ViewTrans, &field->Pos, &vec);

	lea	eax, DWORD PTR _vec$[ebp]
	push	eax
	mov	ecx, DWORD PTR _field$[ebp]
	add	ecx, 4
	push	ecx
	push	OFFSET FLAT:?ViewTrans@@3UVectorStruct@@A ; ViewTrans
	push	OFFSET FLAT:?ViewMatrix@@3TMatrixUnion@@A ; ViewMatrix
	call	?RotTransVector@@YAXPATMatrixUnion@@PAUVectorStruct@@11@Z ; RotTransVector
	add	esp, 16					; 00000010H

; 539  : 
; 540  : 				if (vec.v[Z] < RenderSettings.NearClip || vec.v[Z] >= RenderSettings.FarClip) continue;

	fld	DWORD PTR _vec$[ebp+8]
	fcomp	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+28
	fnstsw	ax
	test	ah, 5
	jnp	SHORT $L81475
	fld	DWORD PTR _vec$[ebp+8]
	fcomp	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+32
	fnstsw	ax
	test	ah, 1
	jne	SHORT $L81474
$L81475:
	jmp	SHORT $L81472
$L81474:

; 541  : 
; 542  : 				sx = vec.v[X] * RenderSettings.GeomPers / vec.v[Z] + REAL_SCREEN_XHALF;

	fld	DWORD PTR _vec$[ebp]
	fmul	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A
	fdiv	DWORD PTR _vec$[ebp+8]
	fadd	DWORD PTR __real@43a00000
	fstp	DWORD PTR _sx$[ebp]

; 543  : 				sy = vec.v[Y] * RenderSettings.GeomPers / vec.v[Z] + REAL_SCREEN_YHALF;

	fld	DWORD PTR _vec$[ebp+4]
	fmul	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A
	fdiv	DWORD PTR _vec$[ebp+8]
	fadd	DWORD PTR __real@43700000
	fstp	DWORD PTR _sy$[ebp]

; 544  : 
; 545  : 				rad = 128 * RenderSettings.GeomPers / vec.v[Z];

	fld	DWORD PTR __real@43000000
	fmul	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A
	fdiv	DWORD PTR _vec$[ebp+8]
	fstp	DWORD PTR _rad$[ebp]

; 546  : 
; 547  : 				if (MouseXpos > sx - rad && MouseXpos < sx + rad && MouseYpos > sy - rad && MouseYpos < sy + rad)

	fld	DWORD PTR _sx$[ebp]
	fsub	DWORD PTR _rad$[ebp]
	fcomp	DWORD PTR ?MouseXpos@@3MA		; MouseXpos
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L81476
	fld	DWORD PTR _sx$[ebp]
	fadd	DWORD PTR _rad$[ebp]
	fcomp	DWORD PTR ?MouseXpos@@3MA		; MouseXpos
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $L81476
	fld	DWORD PTR _sy$[ebp]
	fsub	DWORD PTR _rad$[ebp]
	fcomp	DWORD PTR ?MouseYpos@@3MA		; MouseYpos
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L81476
	fld	DWORD PTR _sy$[ebp]
	fadd	DWORD PTR _rad$[ebp]
	fcomp	DWORD PTR ?MouseYpos@@3MA		; MouseYpos
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $L81476

; 548  : 				{
; 549  : 					if (vec.v[Z] < z)

	fld	DWORD PTR _vec$[ebp+8]
	fcomp	DWORD PTR _z$[ebp]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L81476

; 550  : 					{
; 551  : 						nfield = field;

	mov	eax, DWORD PTR _field$[ebp]
	mov	DWORD PTR _nfield$[ebp], eax

; 552  : 						z = vec.v[Z];

	mov	eax, DWORD PTR _vec$[ebp+8]
	mov	DWORD PTR _z$[ebp], eax
$L81476:

; 553  : 					}
; 554  : 				}
; 555  : 			}

	jmp	$L81472
$L81473:

; 556  : 		}

	jmp	$L81469
$L81470:

; 557  : 		if (nfield)

	cmp	DWORD PTR _nfield$[ebp], 0
	je	SHORT $L81467

; 558  : 		{
; 559  : 			CurrentField = nfield;

	mov	eax, DWORD PTR _nfield$[ebp]
	mov	DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A, eax ; CurrentField

; 560  : 			return;

	jmp	$L81416
$L81467:

; 561  : 		}
; 562  : 	}
; 563  : 
; 564  : // new field?
; 565  : 
; 566  : 	if (Keys[DIK_INSERT] && !LastKeys[DIK_INSERT])

	movsx	eax, BYTE PTR ?Keys@@3PADA+210
	test	eax, eax
	je	$L81479
	movsx	eax, BYTE PTR ?LastKeys@@3PADA+210
	test	eax, eax
	jne	$L81479

; 567  : 	{
; 568  : 		if ((field = AllocFileField()))

	call	?AllocFileField@@YAPAUFILE_FIELD@@XZ	; AllocFileField
	mov	DWORD PTR _field$[ebp], eax
	cmp	DWORD PTR _field$[ebp], 0
	je	$L81479

; 569  : 		{
; 570  : 			vec.v[X] = 0;

	mov	DWORD PTR _vec$[ebp], 0

; 571  : 			vec.v[Y] = 0;

	mov	DWORD PTR _vec$[ebp+4], 0

; 572  : 			vec.v[Z] = 512;

	mov	DWORD PTR _vec$[ebp+8], 1140850688	; 44000000H

; 573  : 			RotVector(&CAM_MainCamera->WMatrix, &vec, &vec2);

	lea	eax, DWORD PTR _vec2$[ebp]
	push	eax
	lea	ecx, DWORD PTR _vec$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	add	edx, 16					; 00000010H
	push	edx
	call	?RotVector@@YAXPATMatrixUnion@@PAUVectorStruct@@1@Z ; RotVector
	add	esp, 12					; 0000000cH

; 574  : 			AddVector(&CAM_MainCamera->WPos, &vec2, &field->Pos);

	mov	eax, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fld	DWORD PTR _vec2$[ebp]
	fadd	DWORD PTR [eax+68]
	mov	ecx, DWORD PTR _field$[ebp]
	fstp	DWORD PTR [ecx+4]
	mov	eax, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fld	DWORD PTR _vec2$[ebp+4]
	fadd	DWORD PTR [eax+72]
	mov	ecx, DWORD PTR _field$[ebp]
	fstp	DWORD PTR [ecx+8]
	mov	eax, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fld	DWORD PTR _vec2$[ebp+8]
	fadd	DWORD PTR [eax+76]
	mov	ecx, DWORD PTR _field$[ebp]
	fstp	DWORD PTR [ecx+12]

; 575  : 
; 576  : 			CopyMatrix(&IdentityMatrix, &field->Matrix);

	mov	eax, DWORD PTR _field$[ebp]
	add	eax, 16					; 00000010H
	push	eax
	push	OFFSET FLAT:?IdentityMatrix@@3TMatrixUnion@@A ; IdentityMatrix
	call	?CopyMatrix@@YAXPATMatrixUnion@@0@Z	; CopyMatrix
	add	esp, 8

; 577  : 
; 578  : 			field->Size[X] = field->Size[Y] = field->Size[Z] = 128;

	mov	eax, DWORD PTR _field$[ebp]
	mov	DWORD PTR [eax+60], 1124073472		; 43000000H
	mov	ecx, DWORD PTR _field$[ebp]
	mov	DWORD PTR [ecx+56], 1124073472		; 43000000H
	mov	edx, DWORD PTR _field$[ebp]
	mov	DWORD PTR [edx+52], 1124073472		; 43000000H

; 579  : 			field->Type = FILE_FIELD_TYPE_LINEAR;

	mov	eax, DWORD PTR _field$[ebp]
	mov	DWORD PTR [eax], 0

; 580  : 
; 581  : 			CopyVec(&UpVec, &field->Dir);

	mov	eax, DWORD PTR _field$[ebp]
	mov	ecx, DWORD PTR ?UpVec@@3UVectorStruct@@A
	mov	DWORD PTR [eax+64], ecx
	mov	eax, DWORD PTR _field$[ebp]
	mov	ecx, DWORD PTR ?UpVec@@3UVectorStruct@@A+4
	mov	DWORD PTR [eax+68], ecx
	mov	eax, DWORD PTR _field$[ebp]
	mov	ecx, DWORD PTR ?UpVec@@3UVectorStruct@@A+8
	mov	DWORD PTR [eax+72], ecx

; 582  : 			field->Mag = 0;

	mov	eax, DWORD PTR _field$[ebp]
	mov	DWORD PTR [eax+76], 0

; 583  : 			field->Damping = 0;

	mov	eax, DWORD PTR _field$[ebp]
	mov	DWORD PTR [eax+80], 0

; 584  : 			field->RadStart = 64;

	mov	eax, DWORD PTR _field$[ebp]
	mov	DWORD PTR [eax+84], 1115684864		; 42800000H

; 585  : 			field->RadEnd = 128;

	mov	eax, DWORD PTR _field$[ebp]
	mov	DWORD PTR [eax+88], 1124073472		; 43000000H

; 586  : 			field->GradStart = 0;

	mov	eax, DWORD PTR _field$[ebp]
	mov	DWORD PTR [eax+92], 0

; 587  : 			field->GradEnd = 0;

	mov	eax, DWORD PTR _field$[ebp]
	mov	DWORD PTR [eax+96], 0

; 588  : 
; 589  : 			CurrentField = field;

	mov	eax, DWORD PTR _field$[ebp]
	mov	DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A, eax ; CurrentField
$L81479:

; 590  : 		}
; 591  : 	}
; 592  : 
; 593  : // quit now if no current file field
; 594  : 
; 595  : 	if (!CurrentField) return;

	cmp	DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A, 0 ; CurrentField
	jne	SHORT $L81481
	jmp	$L81416
$L81481:

; 596  : 
; 597  : // exit current edit?
; 598  : 
; 599  : 	if (Keys[DIK_RETURN] && !LastKeys[DIK_RETURN])

	movsx	eax, BYTE PTR ?Keys@@3PADA+28
	test	eax, eax
	je	SHORT $L81482
	movsx	eax, BYTE PTR ?LastKeys@@3PADA+28
	test	eax, eax
	jne	SHORT $L81482

; 600  : 	{
; 601  : 		CurrentField = NULL;

	mov	DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A, 0 ; CurrentField

; 602  : 		return;

	jmp	$L81416
$L81482:

; 603  : 	}
; 604  : 
; 605  : // delete current field?
; 606  : 
; 607  : 	if (Keys[DIK_DELETE] && !LastKeys[DIK_DELETE])

	movsx	eax, BYTE PTR ?Keys@@3PADA+211
	test	eax, eax
	je	SHORT $L81483
	movsx	eax, BYTE PTR ?LastKeys@@3PADA+211
	test	eax, eax
	jne	SHORT $L81483

; 608  : 	{
; 609  : 		FreeFileField(CurrentField);

	mov	eax, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	push	eax
	call	?FreeFileField@@YAXPAUFILE_FIELD@@@Z	; FreeFileField
	add	esp, 4

; 610  : 		CurrentField = NULL;

	mov	DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A, 0 ; CurrentField

; 611  : 		return;

	jmp	$L81416
$L81483:

; 612  : 	}
; 613  : 
; 614  : // change axis?
; 615  : 
; 616  : 	if (Keys[DIK_TAB] && !LastKeys[DIK_TAB])

	movsx	eax, BYTE PTR ?Keys@@3PADA+15
	test	eax, eax
	je	SHORT $L81484
	movsx	eax, BYTE PTR ?LastKeys@@3PADA+15
	test	eax, eax
	jne	SHORT $L81484

; 617  : 	{
; 618  : 		if (Keys[DIK_LSHIFT]) FileFieldAxis--;

	movsx	eax, BYTE PTR ?Keys@@3PADA+42
	test	eax, eax
	je	SHORT $L81485
	mov	eax, DWORD PTR _FileFieldAxis
	sub	eax, 1
	mov	DWORD PTR _FileFieldAxis, eax

; 619  : 		else FileFieldAxis++;

	jmp	SHORT $L81486
$L81485:
	mov	eax, DWORD PTR _FileFieldAxis
	add	eax, 1
	mov	DWORD PTR _FileFieldAxis, eax
$L81486:

; 620  : 		if (FileFieldAxis == -1) FileFieldAxis = 5;

	cmp	DWORD PTR _FileFieldAxis, -1
	jne	SHORT $L81487
	mov	DWORD PTR _FileFieldAxis, 5
$L81487:

; 621  : 		if (FileFieldAxis == 6) FileFieldAxis = 0;

	cmp	DWORD PTR _FileFieldAxis, 6
	jne	SHORT $L81484
	mov	DWORD PTR _FileFieldAxis, 0
$L81484:

; 622  : 	}
; 623  : 
; 624  : // change axis type?
; 625  : 
; 626  : 	if (Keys[DIK_LALT] && !LastKeys[DIK_LALT])

	movsx	eax, BYTE PTR ?Keys@@3PADA+56
	test	eax, eax
	je	SHORT $L81489
	movsx	eax, BYTE PTR ?LastKeys@@3PADA+56
	test	eax, eax
	jne	SHORT $L81489

; 627  : 		FileFieldAxisType ^= 1;

	mov	eax, DWORD PTR _FileFieldAxisType
	xor	eax, 1
	mov	DWORD PTR _FileFieldAxisType, eax
$L81489:

; 628  : 
; 629  : // change side?
; 630  : 
; 631  : 	if (Keys[DIK_SPACE] && !LastKeys[DIK_SPACE])

	movsx	eax, BYTE PTR ?Keys@@3PADA+57
	test	eax, eax
	je	SHORT $L81490
	movsx	eax, BYTE PTR ?LastKeys@@3PADA+57
	test	eax, eax
	jne	SHORT $L81490

; 632  : 		FileFieldSide = (FileFieldSide + 1) % 6;

	mov	eax, DWORD PTR _FileFieldSide
	add	eax, 1
	cdq
	mov	ecx, 6
	idiv	ecx
	mov	DWORD PTR _FileFieldSide, edx
$L81490:

; 633  : 
; 634  : // change rot type?
; 635  : 
; 636  : 	if (Keys[DIK_NUMPADPERIOD] && !LastKeys[DIK_NUMPADPERIOD])

	movsx	eax, BYTE PTR ?Keys@@3PADA+83
	test	eax, eax
	je	SHORT $L81491
	movsx	eax, BYTE PTR ?LastKeys@@3PADA+83
	test	eax, eax
	jne	SHORT $L81491

; 637  : 		FileFieldRotType ^= 1;

	mov	eax, DWORD PTR _FileFieldRotType
	xor	eax, 1
	mov	DWORD PTR _FileFieldRotType, eax
$L81491:

; 638  : 
; 639  : // change Type?
; 640  : 
; 641  : 	if (Keys[DIK_NUMPADMINUS] && !LastKeys[DIK_NUMPADMINUS] && CurrentField->Type)

	movsx	eax, BYTE PTR ?Keys@@3PADA+74
	test	eax, eax
	je	SHORT $L81492
	movsx	eax, BYTE PTR ?LastKeys@@3PADA+74
	test	eax, eax
	jne	SHORT $L81492
	mov	eax, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	cmp	DWORD PTR [eax], 0
	je	SHORT $L81492

; 642  : 		CurrentField->Type--;

	mov	eax, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	mov	ecx, DWORD PTR [eax]
	sub	ecx, 1
	mov	edx, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	mov	DWORD PTR [edx], ecx
$L81492:

; 643  : 	if (Keys[DIK_NUMPADPLUS] && !LastKeys[DIK_NUMPADPLUS] && CurrentField->Type < FILE_FIELD_TYPE_MAX - 1)

	movsx	eax, BYTE PTR ?Keys@@3PADA+78
	test	eax, eax
	je	SHORT $L81493
	movsx	eax, BYTE PTR ?LastKeys@@3PADA+78
	test	eax, eax
	jne	SHORT $L81493
	mov	eax, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	cmp	DWORD PTR [eax], 3
	jge	SHORT $L81493

; 644  : 		CurrentField->Type++;

	mov	eax, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	mov	DWORD PTR [edx], ecx
$L81493:

; 645  : 
; 646  : // change picker
; 647  : 
; 648  : 	if (Keys[DIK_UP] && !LastKeys[DIK_UP] && Picker)

	movsx	eax, BYTE PTR ?Keys@@3PADA+200
	test	eax, eax
	je	SHORT $L81494
	movsx	eax, BYTE PTR ?LastKeys@@3PADA+200
	test	eax, eax
	jne	SHORT $L81494
	cmp	DWORD PTR _Picker, 0
	je	SHORT $L81494

; 649  : 		Picker--;

	mov	eax, DWORD PTR _Picker
	sub	eax, 1
	mov	DWORD PTR _Picker, eax
$L81494:

; 650  : 
; 651  : 	if (Keys[DIK_DOWN] && !LastKeys[DIK_DOWN])

	movsx	eax, BYTE PTR ?Keys@@3PADA+208
	test	eax, eax
	je	SHORT $L81495
	movsx	eax, BYTE PTR ?LastKeys@@3PADA+208
	test	eax, eax
	jne	SHORT $L81495

; 652  : 		Picker++;

	mov	eax, DWORD PTR _Picker
	add	eax, 1
	mov	DWORD PTR _Picker, eax
$L81495:

; 653  : 
; 654  : 	if (Picker > MaxPicker[CurrentField->Type] - 1)

	mov	eax, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	mov	ecx, DWORD PTR [eax]
	movsx	edx, BYTE PTR _MaxPicker[ecx]
	sub	edx, 1
	cmp	DWORD PTR _Picker, edx
	jle	SHORT $L81496

; 655  : 		Picker = MaxPicker[CurrentField->Type] - 1;

	mov	eax, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	mov	ecx, DWORD PTR [eax]
	movsx	edx, BYTE PTR _MaxPicker[ecx]
	sub	edx, 1
	mov	DWORD PTR _Picker, edx
$L81496:

; 656  : 
; 657  : // start enter?
; 658  : 
; 659  : 	if (!EnterFlag && Keys[DIK_NUMPADENTER] && !LastKeys[DIK_NUMPADENTER])

	cmp	DWORD PTR _EnterFlag, 0
	jne	SHORT $L81497
	movsx	eax, BYTE PTR ?Keys@@3PADA+156
	test	eax, eax
	je	SHORT $L81497
	movsx	eax, BYTE PTR ?LastKeys@@3PADA+156
	test	eax, eax
	jne	SHORT $L81497

; 660  : 	{
; 661  : 		EnterFlag = TRUE;

	mov	DWORD PTR _EnterFlag, 1

; 662  : 		EnterString[0] = 0;

	mov	BYTE PTR _EnterString, 0
$L81497:

; 663  : 	}
; 664  : 
; 665  : // resize spherical
; 666  : 
; 667  : 	if (CurrentField->Type == FILE_FIELD_TYPE_SPHERICAL)

	mov	eax, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	cmp	DWORD PTR [eax], 3
	jne	$L81498

; 668  : 	{
; 669  : 		add = 0;

	mov	DWORD PTR _add$[ebp], 0

; 670  : 		if (Keys[DIK_NUMPADSTAR])

	movsx	eax, BYTE PTR ?Keys@@3PADA+55
	test	eax, eax
	je	SHORT $L81499

; 671  : 			add = 4 * TimeFactor;

	fld	DWORD PTR __real@40800000
	fmul	DWORD PTR ?TimeFactor@@3MA		; TimeFactor
	fstp	DWORD PTR _add$[ebp]
$L81499:

; 672  : 		if (Keys[DIK_NUMPADSLASH])

	movsx	eax, BYTE PTR ?Keys@@3PADA+181
	test	eax, eax
	je	SHORT $L81500

; 673  : 			add = -4 * TimeFactor;

	fld	DWORD PTR __real@c0800000
	fmul	DWORD PTR ?TimeFactor@@3MA		; TimeFactor
	fstp	DWORD PTR _add$[ebp]
$L81500:

; 674  : 
; 675  : 		if (Keys[DIK_LSHIFT])

	movsx	eax, BYTE PTR ?Keys@@3PADA+42
	test	eax, eax
	je	SHORT $L81501

; 676  : 		{
; 677  : 			CurrentField->RadEnd += add;

	mov	eax, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	fld	DWORD PTR _add$[ebp]
	fadd	DWORD PTR [eax+88]
	mov	ecx, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	fstp	DWORD PTR [ecx+88]

; 678  : 			if (CurrentField->RadEnd > 4096) CurrentField->RadEnd = 4096;

	mov	eax, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	fld	DWORD PTR [eax+88]
	fcomp	DWORD PTR __real@45800000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $L81502
	mov	eax, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	mov	DWORD PTR [eax+88], 1166016512		; 45800000H
$L81502:

; 679  : 			if (CurrentField->RadEnd < CurrentField->RadStart) CurrentField->RadEnd = CurrentField->RadStart;

	mov	eax, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	mov	ecx, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	fld	DWORD PTR [eax+88]
	fcomp	DWORD PTR [ecx+84]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L81503
	mov	eax, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	mov	ecx, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	mov	edx, DWORD PTR [ecx+84]
	mov	DWORD PTR [eax+88], edx
$L81503:

; 680  : 		}
; 681  : 		else

	jmp	SHORT $L81504
$L81501:

; 682  : 		{
; 683  : 			CurrentField->RadStart += add;

	mov	eax, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	fld	DWORD PTR _add$[ebp]
	fadd	DWORD PTR [eax+84]
	mov	ecx, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	fstp	DWORD PTR [ecx+84]

; 684  : 			if (CurrentField->RadStart < 32) CurrentField->RadStart = 32;

	mov	eax, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	fld	DWORD PTR [eax+84]
	fcomp	DWORD PTR __real@42000000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L81505
	mov	eax, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	mov	DWORD PTR [eax+84], 1107296256		; 42000000H
$L81505:

; 685  : 			if (CurrentField->RadStart > CurrentField->RadEnd) CurrentField->RadStart = CurrentField->RadEnd;

	mov	eax, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	mov	ecx, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	fld	DWORD PTR [eax+84]
	fcomp	DWORD PTR [ecx+88]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $L81504
	mov	eax, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	mov	ecx, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	mov	edx, DWORD PTR [ecx+88]
	mov	DWORD PTR [eax+84], edx
$L81504:

; 686  : 		}
; 687  : 	}
; 688  : 
; 689  : // resize hull
; 690  : 
; 691  : 	else

	jmp	$L81507
$L81498:

; 692  : 	{
; 693  : 		add = 0;

	mov	DWORD PTR _add$[ebp], 0

; 694  : 		if (Keys[DIK_NUMPADSTAR])

	movsx	eax, BYTE PTR ?Keys@@3PADA+55
	test	eax, eax
	je	SHORT $L81508

; 695  : 			add = 4 * TimeFactor;

	fld	DWORD PTR __real@40800000
	fmul	DWORD PTR ?TimeFactor@@3MA		; TimeFactor
	fstp	DWORD PTR _add$[ebp]
$L81508:

; 696  : 		if (Keys[DIK_NUMPADSLASH])

	movsx	eax, BYTE PTR ?Keys@@3PADA+181
	test	eax, eax
	je	SHORT $L81509

; 697  : 			add = -4 * TimeFactor;

	fld	DWORD PTR __real@c0800000
	fmul	DWORD PTR ?TimeFactor@@3MA		; TimeFactor
	fstp	DWORD PTR _add$[ebp]
$L81509:

; 698  : 
; 699  : 		if (Keys[DIK_LCONTROL]) add *= 4;

	movsx	eax, BYTE PTR ?Keys@@3PADA+29
	test	eax, eax
	je	SHORT $L81510
	fld	DWORD PTR _add$[ebp]
	fmul	DWORD PTR __real@40800000
	fstp	DWORD PTR _add$[ebp]
$L81510:

; 700  : 
; 701  : 		if (add)

	fld	DWORD PTR __real@00000000
	fld	DWORD PTR _add$[ebp]
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jnp	$L81507

; 702  : 		{
; 703  : 			if (Keys[DIK_LSHIFT])

	movsx	eax, BYTE PTR ?Keys@@3PADA+42
	test	eax, eax
	je	$L81512

; 704  : 			{
; 705  : 				CurrentField->Size[X] += add;

	mov	eax, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	fld	DWORD PTR _add$[ebp]
	fadd	DWORD PTR [eax+52]
	mov	ecx, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	fstp	DWORD PTR [ecx+52]

; 706  : 				if (CurrentField->Size[X] < 16) CurrentField->Size[X] = 16;

	mov	eax, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	fld	DWORD PTR [eax+52]
	fcomp	DWORD PTR __real@41800000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L81513
	mov	eax, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	mov	DWORD PTR [eax+52], 1098907648		; 41800000H
$L81513:

; 707  : 				CurrentField->Size[Y] += add;

	mov	eax, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	fld	DWORD PTR _add$[ebp]
	fadd	DWORD PTR [eax+56]
	mov	ecx, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	fstp	DWORD PTR [ecx+56]

; 708  : 				if (CurrentField->Size[Y] < 16) CurrentField->Size[Y] = 16;

	mov	eax, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	fld	DWORD PTR [eax+56]
	fcomp	DWORD PTR __real@41800000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L81514
	mov	eax, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	mov	DWORD PTR [eax+56], 1098907648		; 41800000H
$L81514:

; 709  : 				CurrentField->Size[Z] += add;

	mov	eax, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	fld	DWORD PTR _add$[ebp]
	fadd	DWORD PTR [eax+60]
	mov	ecx, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	fstp	DWORD PTR [ecx+60]

; 710  : 				if (CurrentField->Size[Z] < 16) CurrentField->Size[Z] = 16;

	mov	eax, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	fld	DWORD PTR [eax+60]
	fcomp	DWORD PTR __real@41800000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L81515
	mov	eax, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	mov	DWORD PTR [eax+60], 1098907648		; 41800000H
$L81515:

; 711  : 			}
; 712  : 			else

	jmp	$L81507
$L81512:

; 713  : 			{
; 714  : 				switch (FileFieldSide)

	mov	eax, DWORD PTR _FileFieldSide
	mov	DWORD PTR tv801[ebp], eax
	cmp	DWORD PTR tv801[ebp], 5
	ja	$L81507
	mov	ecx, DWORD PTR tv801[ebp]
	jmp	DWORD PTR $L81787[ecx*4]
$L81521:

; 715  : 				{
; 716  : 					case 0:
; 717  : 						CurrentField->Size[X] += add;

	mov	eax, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	fld	DWORD PTR _add$[ebp]
	fadd	DWORD PTR [eax+52]
	mov	ecx, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	fstp	DWORD PTR [ecx+52]

; 718  : 						if (CurrentField->Size[X] < 16) CurrentField->Size[X] = 16;

	mov	eax, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	fld	DWORD PTR [eax+52]
	fcomp	DWORD PTR __real@41800000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L81522
	mov	eax, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	mov	DWORD PTR [eax+52], 1098907648		; 41800000H
$L81522:

; 719  : 						CurrentField->Pos.v[X] += CurrentField->Matrix.m[RX] * add;

	mov	eax, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	fld	DWORD PTR _add$[ebp]
	fmul	DWORD PTR [eax+16]
	mov	ecx, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	fadd	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	fstp	DWORD PTR [edx+4]

; 720  : 						CurrentField->Pos.v[Y] += CurrentField->Matrix.m[RY] * add;

	mov	eax, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	fld	DWORD PTR _add$[ebp]
	fmul	DWORD PTR [eax+20]
	mov	ecx, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	fadd	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	fstp	DWORD PTR [edx+8]

; 721  : 						CurrentField->Pos.v[Z] += CurrentField->Matrix.m[RZ] * add;

	mov	eax, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	fld	DWORD PTR _add$[ebp]
	fmul	DWORD PTR [eax+24]
	mov	ecx, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	fadd	DWORD PTR [ecx+12]
	mov	edx, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	fstp	DWORD PTR [edx+12]

; 722  : 						break;

	jmp	$L81507
$L81523:

; 723  : 					case 1:
; 724  : 						CurrentField->Size[X] += add;

	mov	eax, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	fld	DWORD PTR _add$[ebp]
	fadd	DWORD PTR [eax+52]
	mov	ecx, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	fstp	DWORD PTR [ecx+52]

; 725  : 						if (CurrentField->Size[X] < 16) CurrentField->Size[X] = 16;

	mov	eax, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	fld	DWORD PTR [eax+52]
	fcomp	DWORD PTR __real@41800000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L81524
	mov	eax, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	mov	DWORD PTR [eax+52], 1098907648		; 41800000H
$L81524:

; 726  : 						CurrentField->Pos.v[X] -= CurrentField->Matrix.m[RX] * add;

	mov	eax, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	fld	DWORD PTR _add$[ebp]
	fmul	DWORD PTR [eax+16]
	mov	ecx, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	fsubr	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	fstp	DWORD PTR [edx+4]

; 727  : 						CurrentField->Pos.v[Y] -= CurrentField->Matrix.m[RY] * add;

	mov	eax, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	fld	DWORD PTR _add$[ebp]
	fmul	DWORD PTR [eax+20]
	mov	ecx, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	fsubr	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	fstp	DWORD PTR [edx+8]

; 728  : 						CurrentField->Pos.v[Z] -= CurrentField->Matrix.m[RZ] * add;

	mov	eax, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	fld	DWORD PTR _add$[ebp]
	fmul	DWORD PTR [eax+24]
	mov	ecx, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	fsubr	DWORD PTR [ecx+12]
	mov	edx, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	fstp	DWORD PTR [edx+12]

; 729  : 						break;

	jmp	$L81507
$L81525:

; 730  : 					case 2:
; 731  : 						CurrentField->Size[Y] += add;

	mov	eax, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	fld	DWORD PTR _add$[ebp]
	fadd	DWORD PTR [eax+56]
	mov	ecx, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	fstp	DWORD PTR [ecx+56]

; 732  : 						if (CurrentField->Size[Y] < 16) CurrentField->Size[Y] = 16;

	mov	eax, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	fld	DWORD PTR [eax+56]
	fcomp	DWORD PTR __real@41800000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L81526
	mov	eax, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	mov	DWORD PTR [eax+56], 1098907648		; 41800000H
$L81526:

; 733  : 						CurrentField->Pos.v[X] += CurrentField->Matrix.m[UX] * add;

	mov	eax, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	fld	DWORD PTR _add$[ebp]
	fmul	DWORD PTR [eax+28]
	mov	ecx, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	fadd	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	fstp	DWORD PTR [edx+4]

; 734  : 						CurrentField->Pos.v[Y] += CurrentField->Matrix.m[UY] * add;

	mov	eax, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	fld	DWORD PTR _add$[ebp]
	fmul	DWORD PTR [eax+32]
	mov	ecx, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	fadd	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	fstp	DWORD PTR [edx+8]

; 735  : 						CurrentField->Pos.v[Z] += CurrentField->Matrix.m[UZ] * add;

	mov	eax, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	fld	DWORD PTR _add$[ebp]
	fmul	DWORD PTR [eax+36]
	mov	ecx, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	fadd	DWORD PTR [ecx+12]
	mov	edx, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	fstp	DWORD PTR [edx+12]

; 736  : 						break;

	jmp	$L81507
$L81527:

; 737  : 					case 3:
; 738  : 						CurrentField->Size[Y] += add;

	mov	eax, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	fld	DWORD PTR _add$[ebp]
	fadd	DWORD PTR [eax+56]
	mov	ecx, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	fstp	DWORD PTR [ecx+56]

; 739  : 						if (CurrentField->Size[Y] < 16) CurrentField->Size[Y] = 16;

	mov	eax, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	fld	DWORD PTR [eax+56]
	fcomp	DWORD PTR __real@41800000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L81528
	mov	eax, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	mov	DWORD PTR [eax+56], 1098907648		; 41800000H
$L81528:

; 740  : 						CurrentField->Pos.v[X] -= CurrentField->Matrix.m[UX] * add;

	mov	eax, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	fld	DWORD PTR _add$[ebp]
	fmul	DWORD PTR [eax+28]
	mov	ecx, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	fsubr	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	fstp	DWORD PTR [edx+4]

; 741  : 						CurrentField->Pos.v[Y] -= CurrentField->Matrix.m[UY] * add;

	mov	eax, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	fld	DWORD PTR _add$[ebp]
	fmul	DWORD PTR [eax+32]
	mov	ecx, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	fsubr	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	fstp	DWORD PTR [edx+8]

; 742  : 						CurrentField->Pos.v[Z] -= CurrentField->Matrix.m[UZ] * add;

	mov	eax, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	fld	DWORD PTR _add$[ebp]
	fmul	DWORD PTR [eax+36]
	mov	ecx, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	fsubr	DWORD PTR [ecx+12]
	mov	edx, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	fstp	DWORD PTR [edx+12]

; 743  : 						break;

	jmp	$L81507
$L81529:

; 744  : 					case 4:
; 745  : 						CurrentField->Size[Z] += add;

	mov	eax, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	fld	DWORD PTR _add$[ebp]
	fadd	DWORD PTR [eax+60]
	mov	ecx, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	fstp	DWORD PTR [ecx+60]

; 746  : 						if (CurrentField->Size[Z] < 16) CurrentField->Size[Z] = 16;

	mov	eax, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	fld	DWORD PTR [eax+60]
	fcomp	DWORD PTR __real@41800000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L81530
	mov	eax, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	mov	DWORD PTR [eax+60], 1098907648		; 41800000H
$L81530:

; 747  : 						CurrentField->Pos.v[X] += CurrentField->Matrix.m[LX] * add;

	mov	eax, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	fld	DWORD PTR _add$[ebp]
	fmul	DWORD PTR [eax+40]
	mov	ecx, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	fadd	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	fstp	DWORD PTR [edx+4]

; 748  : 						CurrentField->Pos.v[Y] += CurrentField->Matrix.m[LY] * add;

	mov	eax, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	fld	DWORD PTR _add$[ebp]
	fmul	DWORD PTR [eax+44]
	mov	ecx, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	fadd	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	fstp	DWORD PTR [edx+8]

; 749  : 						CurrentField->Pos.v[Z] += CurrentField->Matrix.m[LZ] * add;

	mov	eax, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	fld	DWORD PTR _add$[ebp]
	fmul	DWORD PTR [eax+48]
	mov	ecx, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	fadd	DWORD PTR [ecx+12]
	mov	edx, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	fstp	DWORD PTR [edx+12]

; 750  : 						break;

	jmp	$L81507
$L81531:

; 751  : 					case 5:
; 752  : 						CurrentField->Size[Z] += add;

	mov	eax, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	fld	DWORD PTR _add$[ebp]
	fadd	DWORD PTR [eax+60]
	mov	ecx, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	fstp	DWORD PTR [ecx+60]

; 753  : 						if (CurrentField->Size[Z] < 16) CurrentField->Size[Z] = 16;

	mov	eax, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	fld	DWORD PTR [eax+60]
	fcomp	DWORD PTR __real@41800000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L81532
	mov	eax, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	mov	DWORD PTR [eax+60], 1098907648		; 41800000H
$L81532:

; 754  : 						CurrentField->Pos.v[X] -= CurrentField->Matrix.m[LX] * add;

	mov	eax, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	fld	DWORD PTR _add$[ebp]
	fmul	DWORD PTR [eax+40]
	mov	ecx, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	fsubr	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	fstp	DWORD PTR [edx+4]

; 755  : 						CurrentField->Pos.v[Y] -= CurrentField->Matrix.m[LY] * add;

	mov	eax, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	fld	DWORD PTR _add$[ebp]
	fmul	DWORD PTR [eax+44]
	mov	ecx, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	fsubr	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	fstp	DWORD PTR [edx+8]

; 756  : 						CurrentField->Pos.v[Z] -= CurrentField->Matrix.m[LZ] * add;

	mov	eax, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	fld	DWORD PTR _add$[ebp]
	fmul	DWORD PTR [eax+48]
	mov	ecx, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	fsubr	DWORD PTR [ecx+12]
	mov	edx, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	fstp	DWORD PTR [edx+12]
$L81507:

; 757  : 						break;
; 758  : 				}
; 759  : 			}
; 760  : 		}
; 761  : 	}
; 762  : 
; 763  : // move?
; 764  : 
; 765  : 	if (MouseLeft)

	movsx	eax, BYTE PTR ?MouseLeft@@3DA		; MouseLeft
	test	eax, eax
	je	$L81533

; 766  : 	{
; 767  : 		RotTransVector(&ViewMatrix, &ViewTrans, &CurrentField->Pos, &vec);

	lea	eax, DWORD PTR _vec$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	add	ecx, 4
	push	ecx
	push	OFFSET FLAT:?ViewTrans@@3UVectorStruct@@A ; ViewTrans
	push	OFFSET FLAT:?ViewMatrix@@3TMatrixUnion@@A ; ViewMatrix
	call	?RotTransVector@@YAXPATMatrixUnion@@PAUVectorStruct@@11@Z ; RotTransVector
	add	esp, 16					; 00000010H

; 768  : 
; 769  : 		switch (FileFieldAxis)

	mov	eax, DWORD PTR _FileFieldAxis
	mov	DWORD PTR tv1026[ebp], eax
	cmp	DWORD PTR tv1026[ebp], 5
	ja	$L81535
	mov	ecx, DWORD PTR tv1026[ebp]
	jmp	DWORD PTR $L81788[ecx*4]
$L81538:

; 770  : 		{
; 771  : 			case FILE_FIELD_AXIS_XY:
; 772  : 				vec.v[X] = MouseXrel * vec.v[Z] / RenderSettings.GeomPers + CameraEditXrel;

	fld	DWORD PTR ?MouseXrel@@3MA		; MouseXrel
	fmul	DWORD PTR _vec$[ebp+8]
	fdiv	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A
	fadd	DWORD PTR ?CameraEditXrel@@3MA		; CameraEditXrel
	fstp	DWORD PTR _vec$[ebp]

; 773  : 				vec.v[Y] = MouseYrel * vec.v[Z] / RenderSettings.GeomPers + CameraEditYrel;

	fld	DWORD PTR ?MouseYrel@@3MA		; MouseYrel
	fmul	DWORD PTR _vec$[ebp+8]
	fdiv	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A
	fadd	DWORD PTR ?CameraEditYrel@@3MA		; CameraEditYrel
	fstp	DWORD PTR _vec$[ebp+4]

; 774  : 				vec.v[Z] = CameraEditZrel;

	mov	eax, DWORD PTR ?CameraEditZrel@@3MA
	mov	DWORD PTR _vec$[ebp+8], eax

; 775  : 				break;

	jmp	$L81535
$L81539:

; 776  : 			case FILE_FIELD_AXIS_XZ:
; 777  : 				vec.v[X] = MouseXrel * vec.v[Z] / RenderSettings.GeomPers + CameraEditXrel;

	fld	DWORD PTR ?MouseXrel@@3MA		; MouseXrel
	fmul	DWORD PTR _vec$[ebp+8]
	fdiv	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A
	fadd	DWORD PTR ?CameraEditXrel@@3MA		; CameraEditXrel
	fstp	DWORD PTR _vec$[ebp]

; 778  : 				vec.v[Y] = CameraEditYrel;

	mov	eax, DWORD PTR ?CameraEditYrel@@3MA
	mov	DWORD PTR _vec$[ebp+4], eax

; 779  : 				vec.v[Z] = -MouseYrel * vec.v[Z] / RenderSettings.GeomPers + CameraEditZrel;

	fld	DWORD PTR ?MouseYrel@@3MA		; MouseYrel
	fchs
	fmul	DWORD PTR _vec$[ebp+8]
	fdiv	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A
	fadd	DWORD PTR ?CameraEditZrel@@3MA		; CameraEditZrel
	fstp	DWORD PTR _vec$[ebp+8]

; 780  : 				break;

	jmp	$L81535
$L81540:

; 781  : 			case FILE_FIELD_AXIS_ZY:
; 782  : 				vec.v[X] = CameraEditXrel;

	mov	eax, DWORD PTR ?CameraEditXrel@@3MA
	mov	DWORD PTR _vec$[ebp], eax

; 783  : 				vec.v[Y] = MouseYrel * vec.v[Z] / RenderSettings.GeomPers + CameraEditYrel;

	fld	DWORD PTR ?MouseYrel@@3MA		; MouseYrel
	fmul	DWORD PTR _vec$[ebp+8]
	fdiv	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A
	fadd	DWORD PTR ?CameraEditYrel@@3MA		; CameraEditYrel
	fstp	DWORD PTR _vec$[ebp+4]

; 784  : 				vec.v[Z] = MouseXrel * vec.v[Z] / RenderSettings.GeomPers + CameraEditZrel;

	fld	DWORD PTR ?MouseXrel@@3MA		; MouseXrel
	fmul	DWORD PTR _vec$[ebp+8]
	fdiv	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A
	fadd	DWORD PTR ?CameraEditZrel@@3MA		; CameraEditZrel
	fstp	DWORD PTR _vec$[ebp+8]

; 785  : 				break;

	jmp	SHORT $L81535
$L81541:

; 786  : 			case FILE_FIELD_AXIS_X:
; 787  : 				vec.v[X] = MouseXrel * vec.v[Z] / RenderSettings.GeomPers + CameraEditXrel;

	fld	DWORD PTR ?MouseXrel@@3MA		; MouseXrel
	fmul	DWORD PTR _vec$[ebp+8]
	fdiv	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A
	fadd	DWORD PTR ?CameraEditXrel@@3MA		; CameraEditXrel
	fstp	DWORD PTR _vec$[ebp]

; 788  : 				vec.v[Y] = CameraEditYrel;

	mov	eax, DWORD PTR ?CameraEditYrel@@3MA
	mov	DWORD PTR _vec$[ebp+4], eax

; 789  : 				vec.v[Z] = CameraEditZrel;

	mov	eax, DWORD PTR ?CameraEditZrel@@3MA
	mov	DWORD PTR _vec$[ebp+8], eax

; 790  : 				break;

	jmp	SHORT $L81535
$L81542:

; 791  : 			case FILE_FIELD_AXIS_Y:
; 792  : 				vec.v[X] = CameraEditXrel;

	mov	eax, DWORD PTR ?CameraEditXrel@@3MA
	mov	DWORD PTR _vec$[ebp], eax

; 793  : 				vec.v[Y] = MouseYrel * vec.v[Z] / RenderSettings.GeomPers + CameraEditYrel;

	fld	DWORD PTR ?MouseYrel@@3MA		; MouseYrel
	fmul	DWORD PTR _vec$[ebp+8]
	fdiv	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A
	fadd	DWORD PTR ?CameraEditYrel@@3MA		; CameraEditYrel
	fstp	DWORD PTR _vec$[ebp+4]

; 794  : 				vec.v[Z] = CameraEditZrel;

	mov	eax, DWORD PTR ?CameraEditZrel@@3MA
	mov	DWORD PTR _vec$[ebp+8], eax

; 795  : 				break;

	jmp	SHORT $L81535
$L81543:

; 796  : 			case FILE_FIELD_AXIS_Z:
; 797  : 				vec.v[X] = CameraEditXrel;

	mov	eax, DWORD PTR ?CameraEditXrel@@3MA
	mov	DWORD PTR _vec$[ebp], eax

; 798  : 				vec.v[Y] = CameraEditYrel;

	mov	eax, DWORD PTR ?CameraEditYrel@@3MA
	mov	DWORD PTR _vec$[ebp+4], eax

; 799  : 				vec.v[Z] = -MouseYrel * vec.v[Z] / RenderSettings.GeomPers + CameraEditZrel;

	fld	DWORD PTR ?MouseYrel@@3MA		; MouseYrel
	fchs
	fmul	DWORD PTR _vec$[ebp+8]
	fdiv	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A
	fadd	DWORD PTR ?CameraEditZrel@@3MA		; CameraEditZrel
	fstp	DWORD PTR _vec$[ebp+8]
$L81535:

; 800  : 				break;
; 801  : 		}
; 802  : 
; 803  : 		if (FileFieldAxisType == 1) 

	cmp	DWORD PTR _FileFieldAxisType, 1
	jne	SHORT $L81544

; 804  : 		{
; 805  : 			SetVector(&vec2, vec.v[X], vec.v[Y], vec.v[Z]);

	mov	eax, DWORD PTR _vec$[ebp]
	mov	DWORD PTR _vec2$[ebp], eax
	mov	eax, DWORD PTR _vec$[ebp+4]
	mov	DWORD PTR _vec2$[ebp+4], eax
	mov	eax, DWORD PTR _vec$[ebp+8]
	mov	DWORD PTR _vec2$[ebp+8], eax

; 806  : 		}
; 807  : 		else

	jmp	SHORT $L81545
$L81544:

; 808  : 		{
; 809  : 			RotVector(&CAM_MainCamera->WMatrix, &vec, &vec2);

	lea	eax, DWORD PTR _vec2$[ebp]
	push	eax
	lea	ecx, DWORD PTR _vec$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	add	edx, 16					; 00000010H
	push	edx
	call	?RotVector@@YAXPATMatrixUnion@@PAUVectorStruct@@1@Z ; RotVector
	add	esp, 12					; 0000000cH
$L81545:

; 810  : 		}
; 811  : 
; 812  : 		CurrentField->Pos.v[X] += vec2.v[X];

	mov	eax, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	fld	DWORD PTR _vec2$[ebp]
	fadd	DWORD PTR [eax+4]
	mov	ecx, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	fstp	DWORD PTR [ecx+4]

; 813  : 		CurrentField->Pos.v[Y] += vec2.v[Y];

	mov	eax, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	fld	DWORD PTR _vec2$[ebp+4]
	fadd	DWORD PTR [eax+8]
	mov	ecx, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	fstp	DWORD PTR [ecx+8]

; 814  : 		CurrentField->Pos.v[Z] += vec2.v[Z];

	mov	eax, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	fld	DWORD PTR _vec2$[ebp+8]
	fadd	DWORD PTR [eax+12]
	mov	ecx, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	fstp	DWORD PTR [ecx+12]
$L81533:

; 815  : 	}
; 816  : 
; 817  : // rotate?
; 818  : 
; 819  : 	if (CurrentField->Type != FILE_FIELD_TYPE_SPHERICAL)

	mov	eax, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	cmp	DWORD PTR [eax], 3
	je	$L81416

; 820  : 	{
; 821  : 		vec.v[X] = vec.v[Y] = vec.v[Z] = 0;

	mov	DWORD PTR _vec$[ebp+8], 0
	mov	eax, DWORD PTR _vec$[ebp+8]
	mov	DWORD PTR _vec$[ebp+4], eax
	mov	ecx, DWORD PTR _vec$[ebp+4]
	mov	DWORD PTR _vec$[ebp], ecx

; 822  : 
; 823  : 		if (Keys[DIK_NUMPAD7]) vec.v[X] -= 0.005f;

	movsx	eax, BYTE PTR ?Keys@@3PADA+71
	test	eax, eax
	je	SHORT $L81547
	fld	DWORD PTR _vec$[ebp]
	fsub	DWORD PTR __real@3ba3d70a
	fstp	DWORD PTR _vec$[ebp]
$L81547:

; 824  : 		if (Keys[DIK_NUMPAD4]) vec.v[X] += 0.005f;

	movsx	eax, BYTE PTR ?Keys@@3PADA+75
	test	eax, eax
	je	SHORT $L81548
	fld	DWORD PTR _vec$[ebp]
	fadd	DWORD PTR __real@3ba3d70a
	fstp	DWORD PTR _vec$[ebp]
$L81548:

; 825  : 		if (Keys[DIK_NUMPAD8]) vec.v[Y] -= 0.005f;

	movsx	eax, BYTE PTR ?Keys@@3PADA+72
	test	eax, eax
	je	SHORT $L81549
	fld	DWORD PTR _vec$[ebp+4]
	fsub	DWORD PTR __real@3ba3d70a
	fstp	DWORD PTR _vec$[ebp+4]
$L81549:

; 826  : 		if (Keys[DIK_NUMPAD5]) vec.v[Y] += 0.005f;

	movsx	eax, BYTE PTR ?Keys@@3PADA+76
	test	eax, eax
	je	SHORT $L81550
	fld	DWORD PTR _vec$[ebp+4]
	fadd	DWORD PTR __real@3ba3d70a
	fstp	DWORD PTR _vec$[ebp+4]
$L81550:

; 827  : 		if (Keys[DIK_NUMPAD9]) vec.v[Z] -= 0.005f;

	movsx	eax, BYTE PTR ?Keys@@3PADA+73
	test	eax, eax
	je	SHORT $L81551
	fld	DWORD PTR _vec$[ebp+8]
	fsub	DWORD PTR __real@3ba3d70a
	fstp	DWORD PTR _vec$[ebp+8]
$L81551:

; 828  : 		if (Keys[DIK_NUMPAD6]) vec.v[Z] += 0.005f;

	movsx	eax, BYTE PTR ?Keys@@3PADA+77
	test	eax, eax
	je	SHORT $L81552
	fld	DWORD PTR _vec$[ebp+8]
	fadd	DWORD PTR __real@3ba3d70a
	fstp	DWORD PTR _vec$[ebp+8]
$L81552:

; 829  : 
; 830  : 		if (Keys[DIK_NUMPAD1] && !LastKeys[DIK_NUMPAD1]) vec.v[X] += 0.25f;

	movsx	eax, BYTE PTR ?Keys@@3PADA+79
	test	eax, eax
	je	SHORT $L81553
	movsx	eax, BYTE PTR ?LastKeys@@3PADA+79
	test	eax, eax
	jne	SHORT $L81553
	fld	DWORD PTR _vec$[ebp]
	fadd	DWORD PTR __real@3e800000
	fstp	DWORD PTR _vec$[ebp]
$L81553:

; 831  : 		if (Keys[DIK_NUMPAD2] && !LastKeys[DIK_NUMPAD2]) vec.v[Y] += 0.25f;

	movsx	eax, BYTE PTR ?Keys@@3PADA+80
	test	eax, eax
	je	SHORT $L81554
	movsx	eax, BYTE PTR ?LastKeys@@3PADA+80
	test	eax, eax
	jne	SHORT $L81554
	fld	DWORD PTR _vec$[ebp+4]
	fadd	DWORD PTR __real@3e800000
	fstp	DWORD PTR _vec$[ebp+4]
$L81554:

; 832  : 		if (Keys[DIK_NUMPAD3] && !LastKeys[DIK_NUMPAD3]) vec.v[Z] += 0.25f;

	movsx	eax, BYTE PTR ?Keys@@3PADA+81
	test	eax, eax
	je	SHORT $L81555
	movsx	eax, BYTE PTR ?LastKeys@@3PADA+81
	test	eax, eax
	jne	SHORT $L81555
	fld	DWORD PTR _vec$[ebp+8]
	fadd	DWORD PTR __real@3e800000
	fstp	DWORD PTR _vec$[ebp+8]
$L81555:

; 833  : 
; 834  : 		RotMatrixZYX(&mat, vec.v[X], vec.v[Y], vec.v[Z]);

	mov	eax, DWORD PTR _vec$[ebp+8]
	push	eax
	mov	ecx, DWORD PTR _vec$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _vec$[ebp]
	push	edx
	lea	eax, DWORD PTR _mat$[ebp]
	push	eax
	call	?RotMatrixZYX@@YAXPATMatrixUnion@@MMM@Z	; RotMatrixZYX
	add	esp, 16					; 00000010H

; 835  : 
; 836  : // dir
; 837  : 
; 838  : 		if (FileFieldRotType)

	cmp	DWORD PTR _FileFieldRotType, 0
	je	$L81556

; 839  : 		{
; 840  : 			if (Keys[DIK_NUMPAD0]) CopyVec(&UpVec, &CurrentField->Dir);

	movsx	eax, BYTE PTR ?Keys@@3PADA+82
	test	eax, eax
	je	SHORT $L81557
	mov	eax, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	mov	ecx, DWORD PTR ?UpVec@@3UVectorStruct@@A
	mov	DWORD PTR [eax+64], ecx
	mov	eax, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	mov	ecx, DWORD PTR ?UpVec@@3UVectorStruct@@A+4
	mov	DWORD PTR [eax+68], ecx
	mov	eax, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	mov	ecx, DWORD PTR ?UpVec@@3UVectorStruct@@A+8
	mov	DWORD PTR [eax+72], ecx
$L81557:

; 841  : 
; 842  : 			if (FileFieldAxisType)

	cmp	DWORD PTR _FileFieldAxisType, 0
	je	$L81558

; 843  : 			{
; 844  : 				RotVector(&mat, &CurrentField->Dir, &l);

	lea	eax, DWORD PTR _l$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	add	ecx, 64					; 00000040H
	push	ecx
	lea	edx, DWORD PTR _mat$[ebp]
	push	edx
	call	?RotVector@@YAXPATMatrixUnion@@PAUVectorStruct@@1@Z ; RotVector
	add	esp, 12					; 0000000cH

; 845  : 				CopyVec(&l, &CurrentField->Dir);

	mov	eax, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	mov	ecx, DWORD PTR _l$[ebp]
	mov	DWORD PTR [eax+64], ecx
	mov	eax, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	mov	ecx, DWORD PTR _l$[ebp+4]
	mov	DWORD PTR [eax+68], ecx
	mov	eax, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	mov	ecx, DWORD PTR _l$[ebp+8]
	mov	DWORD PTR [eax+72], ecx

; 846  : 				NormalizeVector(&CurrentField->Dir);

	mov	eax, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	mov	ecx, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	fld	DWORD PTR [eax+64]
	fmul	DWORD PTR [ecx+64]
	mov	edx, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	mov	eax, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	fld	DWORD PTR [edx+68]
	fmul	DWORD PTR [eax+68]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	mov	edx, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	fld	DWORD PTR [ecx+72]
	fmul	DWORD PTR [edx+72]
	faddp	ST(1), ST(0)
	push	ecx
	fstp	DWORD PTR [esp]
	call	?sqrt@@YAMM@Z				; sqrt
	add	esp, 4
	fdivr	DWORD PTR __real@3f800000
	fstp	DWORD PTR __mul$81559[ebp]
	mov	eax, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	fld	DWORD PTR __mul$81559[ebp]
	fmul	DWORD PTR [eax+64]
	mov	ecx, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	fstp	DWORD PTR [ecx+64]
	mov	eax, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	fld	DWORD PTR __mul$81559[ebp]
	fmul	DWORD PTR [eax+68]
	mov	ecx, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	fstp	DWORD PTR [ecx+68]
	mov	eax, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	fld	DWORD PTR __mul$81559[ebp]
	fmul	DWORD PTR [eax+72]
	mov	ecx, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	fstp	DWORD PTR [ecx+72]

; 847  : 			}
; 848  : 			else if (vec.v[X] || vec.v[Y] || vec.v[Z])

	jmp	$L81561
$L81558:
	fld	DWORD PTR __real@00000000
	fld	DWORD PTR _vec$[ebp]
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $L81563
	fld	DWORD PTR __real@00000000
	fld	DWORD PTR _vec$[ebp+4]
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $L81563
	fld	DWORD PTR __real@00000000
	fld	DWORD PTR _vec$[ebp+8]
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jnp	$L81561
$L81563:

; 849  : 			{
; 850  : 				RotVector(&ViewMatrix, &CurrentField->Dir, &l);

	lea	eax, DWORD PTR _l$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	add	ecx, 64					; 00000040H
	push	ecx
	push	OFFSET FLAT:?ViewMatrix@@3TMatrixUnion@@A ; ViewMatrix
	call	?RotVector@@YAXPATMatrixUnion@@PAUVectorStruct@@1@Z ; RotVector
	add	esp, 12					; 0000000cH

; 851  : 				RotVector(&mat, &l, &l2);

	lea	eax, DWORD PTR _l2$[ebp]
	push	eax
	lea	ecx, DWORD PTR _l$[ebp]
	push	ecx
	lea	edx, DWORD PTR _mat$[ebp]
	push	edx
	call	?RotVector@@YAXPATMatrixUnion@@PAUVectorStruct@@1@Z ; RotVector
	add	esp, 12					; 0000000cH

; 852  : 				RotVector(&CAM_MainCamera->WMatrix, &l2, &CurrentField->Dir);

	mov	eax, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	add	eax, 64					; 00000040H
	push	eax
	lea	ecx, DWORD PTR _l2$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	add	edx, 16					; 00000010H
	push	edx
	call	?RotVector@@YAXPATMatrixUnion@@PAUVectorStruct@@1@Z ; RotVector
	add	esp, 12					; 0000000cH

; 853  : 				NormalizeVector(&CurrentField->Dir);

	mov	eax, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	mov	ecx, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	fld	DWORD PTR [eax+64]
	fmul	DWORD PTR [ecx+64]
	mov	edx, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	mov	eax, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	fld	DWORD PTR [edx+68]
	fmul	DWORD PTR [eax+68]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	mov	edx, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	fld	DWORD PTR [ecx+72]
	fmul	DWORD PTR [edx+72]
	faddp	ST(1), ST(0)
	push	ecx
	fstp	DWORD PTR [esp]
	call	?sqrt@@YAMM@Z				; sqrt
	add	esp, 4
	fdivr	DWORD PTR __real@3f800000
	fstp	DWORD PTR __mul$81564[ebp]
	mov	eax, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	fld	DWORD PTR __mul$81564[ebp]
	fmul	DWORD PTR [eax+64]
	mov	ecx, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	fstp	DWORD PTR [ecx+64]
	mov	eax, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	fld	DWORD PTR __mul$81564[ebp]
	fmul	DWORD PTR [eax+68]
	mov	ecx, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	fstp	DWORD PTR [ecx+68]
	mov	eax, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	fld	DWORD PTR __mul$81564[ebp]
	fmul	DWORD PTR [eax+72]
	mov	ecx, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	fstp	DWORD PTR [ecx+72]
$L81561:

; 854  : 			}
; 855  : 		}
; 856  : 
; 857  : // hull
; 858  : 
; 859  : 		else

	jmp	$L81416
$L81556:

; 860  : 		{
; 861  : 			if (Keys[DIK_NUMPAD0]) CopyMatrix(&IdentityMatrix, &CurrentField->Matrix);

	movsx	eax, BYTE PTR ?Keys@@3PADA+82
	test	eax, eax
	je	SHORT $L81567
	mov	eax, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	add	eax, 16					; 00000010H
	push	eax
	push	OFFSET FLAT:?IdentityMatrix@@3TMatrixUnion@@A ; IdentityMatrix
	call	?CopyMatrix@@YAXPATMatrixUnion@@0@Z	; CopyMatrix
	add	esp, 8
$L81567:

; 862  : 
; 863  : 			if (FileFieldAxisType)

	cmp	DWORD PTR _FileFieldAxisType, 0
	je	$L81568

; 864  : 			{
; 865  : 				MulMatrix(&mat, &CurrentField->Matrix, &mat2);

	lea	eax, DWORD PTR _mat2$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	add	ecx, 16					; 00000010H
	push	ecx
	lea	edx, DWORD PTR _mat$[ebp]
	push	edx
	call	?MulMatrix@@YAXPATMatrixUnion@@00@Z	; MulMatrix
	add	esp, 12					; 0000000cH

; 866  : 				CopyMatrix(&mat2, &CurrentField->Matrix);

	mov	eax, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	add	eax, 16					; 00000010H
	push	eax
	lea	ecx, DWORD PTR _mat2$[ebp]
	push	ecx
	call	?CopyMatrix@@YAXPATMatrixUnion@@0@Z	; CopyMatrix
	add	esp, 8

; 867  : 				NormalizeMatrix(&CurrentField->Matrix);

	mov	eax, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	mov	ecx, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	fld	DWORD PTR [eax+28]
	fmul	DWORD PTR [ecx+28]
	mov	edx, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	mov	eax, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	fld	DWORD PTR [edx+32]
	fmul	DWORD PTR [eax+32]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	mov	edx, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	fld	DWORD PTR [ecx+36]
	fmul	DWORD PTR [edx+36]
	faddp	ST(1), ST(0)
	push	ecx
	fstp	DWORD PTR [esp]
	call	?sqrt@@YAMM@Z				; sqrt
	add	esp, 4
	fdivr	DWORD PTR __real@3f800000
	fstp	DWORD PTR __mul$81569[ebp]
	mov	eax, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	fld	DWORD PTR __mul$81569[ebp]
	fmul	DWORD PTR [eax+28]
	mov	ecx, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	fstp	DWORD PTR [ecx+28]
	mov	eax, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	fld	DWORD PTR __mul$81569[ebp]
	fmul	DWORD PTR [eax+32]
	mov	ecx, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	fstp	DWORD PTR [ecx+32]
	mov	eax, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	fld	DWORD PTR __mul$81569[ebp]
	fmul	DWORD PTR [eax+36]
	mov	ecx, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	fstp	DWORD PTR [ecx+36]
	mov	eax, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	mov	ecx, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	fld	DWORD PTR [eax+40]
	fmul	DWORD PTR [ecx+40]
	mov	edx, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	mov	eax, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	fld	DWORD PTR [edx+44]
	fmul	DWORD PTR [eax+44]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	mov	edx, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	fld	DWORD PTR [ecx+48]
	fmul	DWORD PTR [edx+48]
	faddp	ST(1), ST(0)
	push	ecx
	fstp	DWORD PTR [esp]
	call	?sqrt@@YAMM@Z				; sqrt
	add	esp, 4
	fdivr	DWORD PTR __real@3f800000
	fstp	DWORD PTR __mul$81571[ebp]
	mov	eax, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	fld	DWORD PTR __mul$81571[ebp]
	fmul	DWORD PTR [eax+40]
	mov	ecx, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	fstp	DWORD PTR [ecx+40]
	mov	eax, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	fld	DWORD PTR __mul$81571[ebp]
	fmul	DWORD PTR [eax+44]
	mov	ecx, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	fstp	DWORD PTR [ecx+44]
	mov	eax, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	fld	DWORD PTR __mul$81571[ebp]
	fmul	DWORD PTR [eax+48]
	mov	ecx, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	fstp	DWORD PTR [ecx+48]
	mov	eax, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	mov	ecx, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	fld	DWORD PTR [eax+32]
	fmul	DWORD PTR [ecx+48]
	mov	edx, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	mov	eax, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	fld	DWORD PTR [edx+36]
	fmul	DWORD PTR [eax+44]
	fsubp	ST(1), ST(0)
	mov	ecx, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	fstp	DWORD PTR [ecx+16]
	mov	eax, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	mov	ecx, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	fld	DWORD PTR [eax+36]
	fmul	DWORD PTR [ecx+40]
	mov	edx, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	mov	eax, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	fld	DWORD PTR [edx+28]
	fmul	DWORD PTR [eax+48]
	fsubp	ST(1), ST(0)
	mov	ecx, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	fstp	DWORD PTR [ecx+20]
	mov	eax, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	mov	ecx, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	fld	DWORD PTR [eax+28]
	fmul	DWORD PTR [ecx+44]
	mov	edx, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	mov	eax, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	fld	DWORD PTR [edx+32]
	fmul	DWORD PTR [eax+40]
	fsubp	ST(1), ST(0)
	mov	ecx, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	fstp	DWORD PTR [ecx+24]
	mov	eax, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	mov	ecx, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	fld	DWORD PTR [eax+44]
	fmul	DWORD PTR [ecx+24]
	mov	edx, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	mov	eax, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	fld	DWORD PTR [edx+48]
	fmul	DWORD PTR [eax+20]
	fsubp	ST(1), ST(0)
	mov	ecx, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	fstp	DWORD PTR [ecx+28]
	mov	eax, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	mov	ecx, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	fld	DWORD PTR [eax+48]
	fmul	DWORD PTR [ecx+16]
	mov	edx, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	mov	eax, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	fld	DWORD PTR [edx+40]
	fmul	DWORD PTR [eax+24]
	fsubp	ST(1), ST(0)
	mov	ecx, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	fstp	DWORD PTR [ecx+32]
	mov	eax, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	mov	ecx, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	fld	DWORD PTR [eax+40]
	fmul	DWORD PTR [ecx+20]
	mov	edx, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	mov	eax, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	fld	DWORD PTR [edx+44]
	fmul	DWORD PTR [eax+16]
	fsubp	ST(1), ST(0)
	mov	ecx, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	fstp	DWORD PTR [ecx+36]

; 868  : 			}
; 869  : 			else if (vec.v[X] || vec.v[Y] || vec.v[Z])

	jmp	$L81416
$L81568:
	fld	DWORD PTR __real@00000000
	fld	DWORD PTR _vec$[ebp]
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $L81575
	fld	DWORD PTR __real@00000000
	fld	DWORD PTR _vec$[ebp+4]
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $L81575
	fld	DWORD PTR __real@00000000
	fld	DWORD PTR _vec$[ebp+8]
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jnp	$L81416
$L81575:

; 870  : 			{
; 871  : 				RotVector(&ViewMatrix, &CurrentField->Matrix.mv[X], &r);

	lea	eax, DWORD PTR _r$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	add	ecx, 16					; 00000010H
	push	ecx
	push	OFFSET FLAT:?ViewMatrix@@3TMatrixUnion@@A ; ViewMatrix
	call	?RotVector@@YAXPATMatrixUnion@@PAUVectorStruct@@1@Z ; RotVector
	add	esp, 12					; 0000000cH

; 872  : 				RotVector(&ViewMatrix, &CurrentField->Matrix.mv[Y], &u);

	lea	eax, DWORD PTR _u$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	add	ecx, 28					; 0000001cH
	push	ecx
	push	OFFSET FLAT:?ViewMatrix@@3TMatrixUnion@@A ; ViewMatrix
	call	?RotVector@@YAXPATMatrixUnion@@PAUVectorStruct@@1@Z ; RotVector
	add	esp, 12					; 0000000cH

; 873  : 				RotVector(&ViewMatrix, &CurrentField->Matrix.mv[Z], &l);

	lea	eax, DWORD PTR _l$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	add	ecx, 40					; 00000028H
	push	ecx
	push	OFFSET FLAT:?ViewMatrix@@3TMatrixUnion@@A ; ViewMatrix
	call	?RotVector@@YAXPATMatrixUnion@@PAUVectorStruct@@1@Z ; RotVector
	add	esp, 12					; 0000000cH

; 874  : 
; 875  : 				RotVector(&mat, &r, &r2);

	lea	eax, DWORD PTR _r2$[ebp]
	push	eax
	lea	ecx, DWORD PTR _r$[ebp]
	push	ecx
	lea	edx, DWORD PTR _mat$[ebp]
	push	edx
	call	?RotVector@@YAXPATMatrixUnion@@PAUVectorStruct@@1@Z ; RotVector
	add	esp, 12					; 0000000cH

; 876  : 				RotVector(&mat, &u, &u2);

	lea	eax, DWORD PTR _u2$[ebp]
	push	eax
	lea	ecx, DWORD PTR _u$[ebp]
	push	ecx
	lea	edx, DWORD PTR _mat$[ebp]
	push	edx
	call	?RotVector@@YAXPATMatrixUnion@@PAUVectorStruct@@1@Z ; RotVector
	add	esp, 12					; 0000000cH

; 877  : 				RotVector(&mat, &l, &l2);

	lea	eax, DWORD PTR _l2$[ebp]
	push	eax
	lea	ecx, DWORD PTR _l$[ebp]
	push	ecx
	lea	edx, DWORD PTR _mat$[ebp]
	push	edx
	call	?RotVector@@YAXPATMatrixUnion@@PAUVectorStruct@@1@Z ; RotVector
	add	esp, 12					; 0000000cH

; 878  : 
; 879  : 				RotVector(&CAM_MainCamera->WMatrix, &r2, &CurrentField->Matrix.mv[X]);

	mov	eax, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	add	eax, 16					; 00000010H
	push	eax
	lea	ecx, DWORD PTR _r2$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	add	edx, 16					; 00000010H
	push	edx
	call	?RotVector@@YAXPATMatrixUnion@@PAUVectorStruct@@1@Z ; RotVector
	add	esp, 12					; 0000000cH

; 880  : 				RotVector(&CAM_MainCamera->WMatrix, &u2, &CurrentField->Matrix.mv[Y]);

	mov	eax, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	add	eax, 28					; 0000001cH
	push	eax
	lea	ecx, DWORD PTR _u2$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	add	edx, 16					; 00000010H
	push	edx
	call	?RotVector@@YAXPATMatrixUnion@@PAUVectorStruct@@1@Z ; RotVector
	add	esp, 12					; 0000000cH

; 881  : 				RotVector(&CAM_MainCamera->WMatrix, &l2, &CurrentField->Matrix.mv[Z]);

	mov	eax, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	add	eax, 40					; 00000028H
	push	eax
	lea	ecx, DWORD PTR _l2$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	add	edx, 16					; 00000010H
	push	edx
	call	?RotVector@@YAXPATMatrixUnion@@PAUVectorStruct@@1@Z ; RotVector
	add	esp, 12					; 0000000cH

; 882  : 
; 883  : 				NormalizeMatrix(&CurrentField->Matrix);

	mov	eax, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	mov	ecx, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	fld	DWORD PTR [eax+28]
	fmul	DWORD PTR [ecx+28]
	mov	edx, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	mov	eax, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	fld	DWORD PTR [edx+32]
	fmul	DWORD PTR [eax+32]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	mov	edx, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	fld	DWORD PTR [ecx+36]
	fmul	DWORD PTR [edx+36]
	faddp	ST(1), ST(0)
	push	ecx
	fstp	DWORD PTR [esp]
	call	?sqrt@@YAMM@Z				; sqrt
	add	esp, 4
	fdivr	DWORD PTR __real@3f800000
	fstp	DWORD PTR __mul$81576[ebp]
	mov	eax, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	fld	DWORD PTR __mul$81576[ebp]
	fmul	DWORD PTR [eax+28]
	mov	ecx, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	fstp	DWORD PTR [ecx+28]
	mov	eax, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	fld	DWORD PTR __mul$81576[ebp]
	fmul	DWORD PTR [eax+32]
	mov	ecx, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	fstp	DWORD PTR [ecx+32]
	mov	eax, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	fld	DWORD PTR __mul$81576[ebp]
	fmul	DWORD PTR [eax+36]
	mov	ecx, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	fstp	DWORD PTR [ecx+36]
	mov	eax, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	mov	ecx, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	fld	DWORD PTR [eax+40]
	fmul	DWORD PTR [ecx+40]
	mov	edx, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	mov	eax, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	fld	DWORD PTR [edx+44]
	fmul	DWORD PTR [eax+44]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	mov	edx, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	fld	DWORD PTR [ecx+48]
	fmul	DWORD PTR [edx+48]
	faddp	ST(1), ST(0)
	push	ecx
	fstp	DWORD PTR [esp]
	call	?sqrt@@YAMM@Z				; sqrt
	add	esp, 4
	fdivr	DWORD PTR __real@3f800000
	fstp	DWORD PTR __mul$81578[ebp]
	mov	eax, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	fld	DWORD PTR __mul$81578[ebp]
	fmul	DWORD PTR [eax+40]
	mov	ecx, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	fstp	DWORD PTR [ecx+40]
	mov	eax, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	fld	DWORD PTR __mul$81578[ebp]
	fmul	DWORD PTR [eax+44]
	mov	ecx, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	fstp	DWORD PTR [ecx+44]
	mov	eax, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	fld	DWORD PTR __mul$81578[ebp]
	fmul	DWORD PTR [eax+48]
	mov	ecx, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	fstp	DWORD PTR [ecx+48]
	mov	eax, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	mov	ecx, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	fld	DWORD PTR [eax+32]
	fmul	DWORD PTR [ecx+48]
	mov	edx, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	mov	eax, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	fld	DWORD PTR [edx+36]
	fmul	DWORD PTR [eax+44]
	fsubp	ST(1), ST(0)
	mov	ecx, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	fstp	DWORD PTR [ecx+16]
	mov	eax, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	mov	ecx, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	fld	DWORD PTR [eax+36]
	fmul	DWORD PTR [ecx+40]
	mov	edx, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	mov	eax, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	fld	DWORD PTR [edx+28]
	fmul	DWORD PTR [eax+48]
	fsubp	ST(1), ST(0)
	mov	ecx, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	fstp	DWORD PTR [ecx+20]
	mov	eax, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	mov	ecx, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	fld	DWORD PTR [eax+28]
	fmul	DWORD PTR [ecx+44]
	mov	edx, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	mov	eax, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	fld	DWORD PTR [edx+32]
	fmul	DWORD PTR [eax+40]
	fsubp	ST(1), ST(0)
	mov	ecx, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	fstp	DWORD PTR [ecx+24]
	mov	eax, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	mov	ecx, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	fld	DWORD PTR [eax+44]
	fmul	DWORD PTR [ecx+24]
	mov	edx, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	mov	eax, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	fld	DWORD PTR [edx+48]
	fmul	DWORD PTR [eax+20]
	fsubp	ST(1), ST(0)
	mov	ecx, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	fstp	DWORD PTR [ecx+28]
	mov	eax, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	mov	ecx, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	fld	DWORD PTR [eax+48]
	fmul	DWORD PTR [ecx+16]
	mov	edx, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	mov	eax, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	fld	DWORD PTR [edx+40]
	fmul	DWORD PTR [eax+24]
	fsubp	ST(1), ST(0)
	mov	ecx, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	fstp	DWORD PTR [ecx+32]
	mov	eax, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	mov	ecx, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	fld	DWORD PTR [eax+40]
	fmul	DWORD PTR [ecx+20]
	mov	edx, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	mov	eax, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	fld	DWORD PTR [edx+44]
	fmul	DWORD PTR [eax+16]
	fsubp	ST(1), ST(0)
	mov	ecx, DWORD PTR ?CurrentField@@3PAUFILE_FIELD@@A ; CurrentField
	fstp	DWORD PTR [ecx+36]
$L81416:

; 884  : 			}
; 885  : 		}
; 886  : 	}
; 887  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
$L81787:
	DD	$L81521
	DD	$L81523
	DD	$L81525
	DD	$L81527
	DD	$L81529
	DD	$L81531
$L81788:
	DD	$L81538
	DD	$L81539
	DD	$L81540
	DD	$L81541
	DD	$L81542
	DD	$L81543
?EditFields@@YAXXZ ENDP					; EditFields
_TEXT	ENDS
PUBLIC	_sqrtf
; Function compile flags: /Odt /ZI
; File c:\program files\microsoft visual studio .net 2003\vc7\include\math.h
;	COMDAT ?sqrt@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?sqrt@@YAMM@Z PROC NEAR					; sqrt, COMDAT

; 579  :         {return (sqrtf(_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR __X$[ebp]
	push	eax
	call	_sqrtf
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?sqrt@@YAMM@Z ENDP					; sqrt
_TEXT	ENDS
EXTRN	_sqrt:NEAR
; Function compile flags: /Odt /ZI
;	COMDAT _sqrtf
_TEXT	SEGMENT
tv70 = -68						; size = 4
__X$ = 8						; size = 4
_sqrtf	PROC NEAR					; COMDAT

; 470  :         {return ((float)sqrt((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	fld	DWORD PTR __X$[ebp]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	call	_sqrt
	add	esp, 8
	fst	DWORD PTR tv70[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_sqrtf	ENDP
_TEXT	ENDS
PUBLIC	??_C@_0O@DAJIBJAO@edit?2field1?4m?$AA@		; `string'
PUBLIC	??_C@_0O@CCCNLGOA@edit?2field2?4m?$AA@		; `string'
PUBLIC	?LoadFileFieldModels@@YAXXZ			; LoadFileFieldModels
EXTRN	?LoadModel@@YAJPADPAUMODEL@@DDDJ@Z:NEAR		; LoadModel
;	COMDAT ??_C@_0O@DAJIBJAO@edit?2field1?4m?$AA@
; File c:\documents and settings\jarhead\desktop\shit to display my love for xbox revolt and fuck you borman-ness\revolt source\source\edfield.cpp
CONST	SEGMENT
??_C@_0O@DAJIBJAO@edit?2field1?4m?$AA@ DB 'edit\field1.m', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@CCCNLGOA@edit?2field2?4m?$AA@
CONST	SEGMENT
??_C@_0O@CCCNLGOA@edit?2field2?4m?$AA@ DB 'edit\field2.m', 00H ; `string'
; Function compile flags: /Odt /ZI
CONST	ENDS
;	COMDAT ?LoadFileFieldModels@@YAXXZ
_TEXT	SEGMENT
?LoadFileFieldModels@@YAXXZ PROC NEAR			; LoadFileFieldModels, COMDAT

; 894  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 895  : 	LoadModel("edit\\field1.m", &FileFieldModel[0], -1, 1, LOADMODEL_FORCE_TPAGE, 100);

	push	100					; 00000064H
	push	1
	push	1
	push	-1
	push	OFFSET FLAT:_FileFieldModel
	push	OFFSET FLAT:??_C@_0O@DAJIBJAO@edit?2field1?4m?$AA@
	call	?LoadModel@@YAJPADPAUMODEL@@DDDJ@Z	; LoadModel
	add	esp, 24					; 00000018H

; 896  : 	LoadModel("edit\\field2.m", &FileFieldModel[1], -1, 1, LOADMODEL_FORCE_TPAGE, 100);

	push	100					; 00000064H
	push	1
	push	1
	push	-1
	push	OFFSET FLAT:_FileFieldModel+60
	push	OFFSET FLAT:??_C@_0O@CCCNLGOA@edit?2field2?4m?$AA@
	call	?LoadModel@@YAJPADPAUMODEL@@DDDJ@Z	; LoadModel
	add	esp, 24					; 00000018H

; 897  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?LoadFileFieldModels@@YAXXZ ENDP			; LoadFileFieldModels
_TEXT	ENDS
PUBLIC	?FreeFileFieldModels@@YAXXZ			; FreeFileFieldModels
EXTRN	?FreeModel@@YAXPAUMODEL@@J@Z:NEAR		; FreeModel
; Function compile flags: /Odt /ZI
;	COMDAT ?FreeFileFieldModels@@YAXXZ
_TEXT	SEGMENT
?FreeFileFieldModels@@YAXXZ PROC NEAR			; FreeFileFieldModels, COMDAT

; 904  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 905  : 	FreeModel(&FileFieldModel[0], 1);

	push	1
	push	OFFSET FLAT:_FileFieldModel
	call	?FreeModel@@YAXPAUMODEL@@J@Z		; FreeModel
	add	esp, 8

; 906  : 	FreeModel(&FileFieldModel[1], 1);

	push	1
	push	OFFSET FLAT:_FileFieldModel+60
	call	?FreeModel@@YAXPAUMODEL@@J@Z		; FreeModel
	add	esp, 8

; 907  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?FreeFileFieldModels@@YAXXZ ENDP			; FreeFileFieldModels
_TEXT	ENDS
END
