; Listing generated by Microsoft (R) Optimizing Compiler Version 13.10.3077 

	TITLE	.\source\world.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT PARA USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_02JDPG@rb?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BM@BHCJILJL@Can?8t?5load?5world?5file?3?5?8?$CFs?8?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_05MBDEGLCK@ERROR?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0IK@HDNGGFNG@c?3?2documents?5and?5settings?2jarhea@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CE@ELCDEHBO@Can?8t?5alloc?5memory?5for?5world?5cub@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CD@FJOACDPG@Can?8t?5alloc?5memory?5for?5world?5mes@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CI@MPLBNIHO@?8?$CFs?8?5is?5not?5PSX?5friendly?5by?5?$CFld?5@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_08NEFBJFKJ@Warning?$CB?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CB@DMHCIOCH@World?5file?5has?5no?5big?5cube?5info?$CB@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CI@IIKBFFCJ@Can?8t?5alloc?5memory?5for?5world?5big@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CE@ONEFABNC@Can?8t?5alloc?5memory?5for?5a?5cube?5li@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CI@JIAHBCJ@Can?8t?5alloc?5memory?5for?5world?5cub@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CJ@BFELLIBE@Can?8t?5alloc?5memory?5for?5texture?5a@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _IsEqualGUID
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _==
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _acosl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _asinl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _atanl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _atan2l
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _ceill
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _cosl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _coshl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _expl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _fabsl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _floorl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _fmodl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _frexpl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _ldexpl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _logl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _log10l
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _modfl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _powl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _sinl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _sinhl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _sqrtl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _tanl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _tanhl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _frexpf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _ldexpf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _acosf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _asinf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _atanf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _atan2f
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _ceilf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _cosf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _coshf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _expf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _fabsf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _floorf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _fmodf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _logf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _log10f
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _modff
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _powf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _sinf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _sinhf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _sqrtf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _tanf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _tanhf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?sqrt@@YAMM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?LoadWorld@@YA_NPAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?FreeWorld@@YAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?MirrorWorldPolys@@YAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetWorldMirror@@YAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DrawWorld@@YAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DrawWorldCube@@YAXPAUCUBE_HEADER@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DrawWorldCubeMirror@@YAXPAUCUBE_HEADER@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?TransCubeVertsClip@@YAXPAUWORLD_MODEL@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?TransCubeVertsFogClip@@YAXPAUWORLD_MODEL@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?TransCubeVerts@@YAXPAUWORLD_MODEL@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?TransCubeVertsFog@@YAXPAUWORLD_MODEL@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?TransCubeVertsClipNewVerts@@YAXPAUWORLD_MODEL@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?TransCubeVertsFogClipNewVerts@@YAXPAUWORLD_MODEL@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?TransCubeVertsNewVerts@@YAXPAUWORLD_MODEL@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?TransCubeVertsFogNewVerts@@YAXPAUWORLD_MODEL@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?TransCubeVertsMirror@@YAXPAUWORLD_MODEL@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?TransCubeVertsMirrorNewVerts@@YAXPAUWORLD_MODEL@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DrawCubePolysClip@@YAXPAUWORLD_MODEL@@J@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DrawCubePolys@@YAXPAUWORLD_MODEL@@J@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DrawCubePolysMirror@@YAXPAUWORLD_MODEL@@J@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ProcessTextureAnimations@@YAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Pow_int@N@@YANNH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Pow_int@H@@YAHHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Pow_int@M@@YAMMH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Pow_int@O@@YAOOH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?__LINE__Var@?1??MirrorWorldPolys@@YAXXZ@4JA
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??FreeWorld@@YAXXZ@4JA
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??LoadWorld@@YA_NPAD@Z@4JA
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
sxdata	SEGMENT DWORD USE32 'SXDATA'
sxdata	ENDS
FLAT	GROUP _DATA, CONST, _BSS
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBCD
INCLUDELIB OLDNAMES

PUBLIC	?TexAnimNum@@3JA				; TexAnimNum
PUBLIC	?TexAnim@@3PAUTEXANIM_HEADER@@A			; TexAnim
PUBLIC	?World@@3UWORLD@@A				; World
PUBLIC	?WorldBigCubeCount@@3FA				; WorldBigCubeCount
PUBLIC	?WorldCubeCount@@3FA				; WorldCubeCount
PUBLIC	?WorldPolyCount@@3FA				; WorldPolyCount
PUBLIC	?WorldDrawnCount@@3FA				; WorldDrawnCount
_BSS	SEGMENT
?TexAnimNum@@3JA DD 01H DUP (?)				; TexAnimNum
?TexAnim@@3PAUTEXANIM_HEADER@@A DB 0140H DUP (?)	; TexAnim
?World@@3UWORLD@@A DB 014H DUP (?)			; World
?WorldBigCubeCount@@3FA DW 01H DUP (?)			; WorldBigCubeCount
	ALIGN	4

?WorldCubeCount@@3FA DW 01H DUP (?)			; WorldCubeCount
	ALIGN	4

?WorldPolyCount@@3FA DW 01H DUP (?)			; WorldPolyCount
	ALIGN	4

?WorldDrawnCount@@3FA DW 01H DUP (?)			; WorldDrawnCount
_BSS	ENDS
_DATA	SEGMENT
_ShellGap DD	0dH
	DD	04H
	DD	01H
_DATA	ENDS
PUBLIC	?sqrt@@YAMM@Z					; sqrt
PUBLIC	??_C@_02JDPG@rb?$AA@				; `string'
PUBLIC	??_C@_0BM@BHCJILJL@Can?8t?5load?5world?5file?3?5?8?$CFs?8?$AA@ ; `string'
PUBLIC	??_C@_05MBDEGLCK@ERROR?$AA@			; `string'
PUBLIC	?__LINE__Var@?1??LoadWorld@@YA_NPAD@Z@4JA	; `LoadWorld'::`2'::__LINE__Var
PUBLIC	??_C@_0IK@HDNGGFNG@c?3?2documents?5and?5settings?2jarhea@ ; `string'
PUBLIC	??_C@_0CE@ELCDEHBO@Can?8t?5alloc?5memory?5for?5world?5cub@ ; `string'
PUBLIC	??_C@_0CD@FJOACDPG@Can?8t?5alloc?5memory?5for?5world?5mes@ ; `string'
PUBLIC	?LoadWorld@@YA_NPAD@Z				; LoadWorld
PUBLIC	??_C@_0CI@MPLBNIHO@?8?$CFs?8?5is?5not?5PSX?5friendly?5by?5?$CFld?5@ ; `string'
PUBLIC	??_C@_08NEFBJFKJ@Warning?$CB?$AA@		; `string'
PUBLIC	??_C@_0CB@DMHCIOCH@World?5file?5has?5no?5big?5cube?5info?$CB@ ; `string'
PUBLIC	??_C@_0CI@IIKBFFCJ@Can?8t?5alloc?5memory?5for?5world?5big@ ; `string'
PUBLIC	??_C@_0CE@ONEFABNC@Can?8t?5alloc?5memory?5for?5a?5cube?5li@ ; `string'
PUBLIC	??_C@_0CI@JIAHBCJ@Can?8t?5alloc?5memory?5for?5world?5cub@ ; `string'
PUBLIC	??_C@_0CJ@BFELLIBE@Can?8t?5alloc?5memory?5for?5texture?5a@ ; `string'
PUBLIC	__real@00000000
PUBLIC	__real@437f0000
PUBLIC	__real@46fffe00
EXTRN	_fclose:NEAR
EXTRN	_fopen:NEAR
EXTRN	_fread:NEAR
EXTRN	?LevelInf@@3PAULEVELINFO@@A:DWORD		; LevelInf
EXTRN	?MirrorAlpha@@3JA:DWORD				; MirrorAlpha
EXTRN	_rand:NEAR
EXTRN	?DebugMalloc@@YAPAXIHPAD@Z:NEAR			; DebugMalloc
EXTRN	?DebugFree@@YAXPAXHPAD@Z:NEAR			; DebugFree
EXTRN	?Box@@YAJPAD0J@Z:NEAR				; Box
EXTRN	?QuitGame@@3DA:BYTE				; QuitGame
EXTRN	?GameSettings@@3UGAME_SETTINGS@@A:BYTE		; GameSettings
EXTRN	?RenderSettings@@3URENDER_SETTINGS@@A:BYTE	; RenderSettings
EXTRN	_memcpy:NEAR
EXTRN	__imp__wsprintfA:NEAR
EXTRN	__ftol2:NEAR
EXTRN	__fltused:NEAR
;	COMDAT ??_C@_02JDPG@rb?$AA@
; File c:\documents and settings\jarhead\desktop\shit to display my love for xbox revolt and fuck you borman-ness\revolt source\source\world.cpp
CONST	SEGMENT
??_C@_02JDPG@rb?$AA@ DB 'rb', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@BHCJILJL@Can?8t?5load?5world?5file?3?5?8?$CFs?8?$AA@
CONST	SEGMENT
??_C@_0BM@BHCJILJL@Can?8t?5load?5world?5file?3?5?8?$CFs?8?$AA@ DB 'Can''t'
	DB	' load world file: ''%s''', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05MBDEGLCK@ERROR?$AA@
CONST	SEGMENT
??_C@_05MBDEGLCK@ERROR?$AA@ DB 'ERROR', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0IK@HDNGGFNG@c?3?2documents?5and?5settings?2jarhea@
CONST	SEGMENT
??_C@_0IK@HDNGGFNG@c?3?2documents?5and?5settings?2jarhea@ DB 'c:\document'
	DB	's and settings\jarhead\desktop\shit to display my love for xb'
	DB	'ox revolt and fuck you borman-ness\revolt source\source\world'
	DB	'.cpp', 00H					; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??LoadWorld@@YA_NPAD@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??LoadWorld@@YA_NPAD@Z@4JA DD 027H	; `LoadWorld'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0CE@ELCDEHBO@Can?8t?5alloc?5memory?5for?5world?5cub@
CONST	SEGMENT
??_C@_0CE@ELCDEHBO@Can?8t?5alloc?5memory?5for?5world?5cub@ DB 'Can''t all'
	DB	'oc memory for world cubes!', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@FJOACDPG@Can?8t?5alloc?5memory?5for?5world?5mes@
CONST	SEGMENT
??_C@_0CD@FJOACDPG@Can?8t?5alloc?5memory?5for?5world?5mes@ DB 'Can''t all'
	DB	'oc memory for world mesh!', 00H		; `string'
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT __real@437f0000
CONST	SEGMENT
__real@437f0000 DD 0437f0000r			; 255
CONST	ENDS
;	COMDAT __real@46fffe00
CONST	SEGMENT
__real@46fffe00 DD 046fffe00r			; 32767
CONST	ENDS
;	COMDAT ??_C@_0CI@MPLBNIHO@?8?$CFs?8?5is?5not?5PSX?5friendly?5by?5?$CFld?5@
CONST	SEGMENT
??_C@_0CI@MPLBNIHO@?8?$CFs?8?5is?5not?5PSX?5friendly?5by?5?$CFld?5@ DB ''''
	DB	'%s'' is not PSX friendly by %ld pixels!', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08NEFBJFKJ@Warning?$CB?$AA@
CONST	SEGMENT
??_C@_08NEFBJFKJ@Warning?$CB?$AA@ DB 'Warning!', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@DMHCIOCH@World?5file?5has?5no?5big?5cube?5info?$CB@
CONST	SEGMENT
??_C@_0CB@DMHCIOCH@World?5file?5has?5no?5big?5cube?5info?$CB@ DB 'World f'
	DB	'ile has no big cube info!', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@IIKBFFCJ@Can?8t?5alloc?5memory?5for?5world?5big@
CONST	SEGMENT
??_C@_0CI@IIKBFFCJ@Can?8t?5alloc?5memory?5for?5world?5big@ DB 'Can''t all'
	DB	'oc memory for world big cubes!', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@ONEFABNC@Can?8t?5alloc?5memory?5for?5a?5cube?5li@
CONST	SEGMENT
??_C@_0CE@ONEFABNC@Can?8t?5alloc?5memory?5for?5a?5cube?5li@ DB 'Can''t al'
	DB	'loc memory for a cube list!', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@JIAHBCJ@Can?8t?5alloc?5memory?5for?5world?5cub@
CONST	SEGMENT
??_C@_0CI@JIAHBCJ@Can?8t?5alloc?5memory?5for?5world?5cub@ DB 'Can''t allo'
	DB	'c memory for world cube list!', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@BFELLIBE@Can?8t?5alloc?5memory?5for?5texture?5a@
CONST	SEGMENT
??_C@_0CJ@BFELLIBE@Can?8t?5alloc?5memory?5for?5texture?5a@ DB 'Can''t all'
	DB	'oc memory for texture animation', 00H	; `string'
; Function compile flags: /Odt /ZI
CONST	ENDS
;	COMDAT ?LoadWorld@@YA_NPAD@Z
_TEXT	SEGMENT
tv1714 = -492						; size = 4
_maxrad$ = -424						; size = 4
_rad$ = -420						; size = 4
_vf$ = -416						; size = 4
_buff$ = -412						; size = 128
_rgb$ = -284						; size = 4
_b$ = -280						; size = 4
_a$ = -276						; size = 4
_idx$ = -272						; size = 4
_l$ = -268						; size = 4
_k$ = -264						; size = 4
_j$ = -260						; size = 4
_i$ = -256						; size = 4
_size$ = -252						; size = 4
_vert2$ = -248						; size = 4
_vert$ = -244						; size = 4
_wp$ = -240						; size = 80
_mvl$ = -160						; size = 24
_mpl$ = -136						; size = 60
_mp$ = -76						; size = 4
_bchl$ = -72						; size = 20
_chl$ = -52						; size = 44
_wh$ = -8						; size = 4
_fp$ = -4						; size = 4
_file$ = 8						; size = 4
?LoadWorld@@YA_NPAD@Z PROC NEAR				; LoadWorld, COMDAT

; 39   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 492				; 000001ecH
	push	ebx
	push	esi
	push	edi

; 40   : 	FILE *fp;
; 41   : 	WORLD_HEADER wh;
; 42   : 	CUBE_HEADER_LOAD chl;
; 43   : 	BIG_CUBE_HEADER_LOAD bchl;
; 44   : 	WORLD_POLY *mp;
; 45   : 	WORLD_POLY_LOAD mpl;
; 46   : 	WORLD_VERTEX_LOAD mvl;
; 47   : 	WORLD_POLY wp;
; 48   : 	WORLD_VERTEX **vert, **vert2;
; 49   : 	long size, i, j, k, l, idx, a, b, rgb;
; 50   : 	char buff[128];
; 51   : 	float vf, rad, maxrad;
; 52   : 
; 53   : // open file for reading
; 54   : 
; 55   : 	fp = fopen(file, "rb");

	push	OFFSET FLAT:??_C@_02JDPG@rb?$AA@
	mov	eax, DWORD PTR _file$[ebp]
	push	eax
	call	_fopen
	add	esp, 8
	mov	DWORD PTR _fp$[ebp], eax

; 56   : 	if (!fp)

	cmp	DWORD PTR _fp$[ebp], 0
	jne	SHORT $L81308

; 57   : 	{
; 58   : 		wsprintf(buff, "Can't load world file: '%s'", file);

	mov	eax, DWORD PTR _file$[ebp]
	push	eax
	push	OFFSET FLAT:??_C@_0BM@BHCJILJL@Can?8t?5load?5world?5file?3?5?8?$CFs?8?$AA@
	lea	ecx, DWORD PTR _buff$[ebp]
	push	ecx
	call	DWORD PTR __imp__wsprintfA
	add	esp, 12					; 0000000cH

; 59   : 		Box("ERROR", buff, MB_OK);

	push	0
	lea	eax, DWORD PTR _buff$[ebp]
	push	eax
	push	OFFSET FLAT:??_C@_05MBDEGLCK@ERROR?$AA@
	call	?Box@@YAJPAD0J@Z			; Box
	add	esp, 12					; 0000000cH

; 60   : 		return FALSE;

	xor	al, al
	jmp	$L81283
$L81308:

; 61   : 	 }
; 62   : 
; 63   : // get header info, alloc cube header memory
; 64   : 
; 65   : 	fread(&wh, sizeof(wh), 1, fp);

	mov	eax, DWORD PTR _fp$[ebp]
	push	eax
	push	1
	push	4
	lea	ecx, DWORD PTR _wh$[ebp]
	push	ecx
	call	_fread
	add	esp, 16					; 00000010H

; 66   : 	World.CubeNum = wh.CubeNum;

	mov	eax, DWORD PTR _wh$[ebp]
	mov	DWORD PTR ?World@@3UWORLD@@A, eax

; 67   : 	World.Cube = (CUBE_HEADER*)malloc(World.CubeNum * sizeof(CUBE_HEADER));

	push	OFFSET FLAT:??_C@_0IK@HDNGGFNG@c?3?2documents?5and?5settings?2jarhea@
	mov	eax, DWORD PTR ?__LINE__Var@?1??LoadWorld@@YA_NPAD@Z@4JA
	add	eax, 28					; 0000001cH
	push	eax
	mov	ecx, DWORD PTR ?World@@3UWORLD@@A
	shl	ecx, 7
	push	ecx
	call	?DebugMalloc@@YAPAXIHPAD@Z		; DebugMalloc
	add	esp, 12					; 0000000cH
	mov	DWORD PTR ?World@@3UWORLD@@A+8, eax

; 68   : 	if (!World.Cube)

	cmp	DWORD PTR ?World@@3UWORLD@@A+8, 0
	jne	SHORT $L81315

; 69   : 	{
; 70   : 		Box("ERROR", "Can't alloc memory for world cubes!", MB_OK);

	push	0
	push	OFFSET FLAT:??_C@_0CE@ELCDEHBO@Can?8t?5alloc?5memory?5for?5world?5cub@
	push	OFFSET FLAT:??_C@_05MBDEGLCK@ERROR?$AA@
	call	?Box@@YAJPAD0J@Z			; Box
	add	esp, 12					; 0000000cH

; 71   : 		QuitGame = TRUE;

	mov	BYTE PTR ?QuitGame@@3DA, 1		; QuitGame

; 72   : 		return FALSE;

	xor	al, al
	jmp	$L81283
$L81315:

; 73   : 	}
; 74   : 
; 75   : // loop thru each cube
; 76   : 
; 77   : 	maxrad = 0;

	mov	DWORD PTR _maxrad$[ebp], 0

; 78   : 
; 79   : 	for (i = 0 ; i < World.CubeNum ; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $L81317
$L81318:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$L81317:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR ?World@@3UWORLD@@A
	jge	$L81319

; 80   : 	{
; 81   : 
; 82   : // setup header
; 83   : 
; 84   : 		fread(&chl, sizeof(chl), 1, fp);

	mov	eax, DWORD PTR _fp$[ebp]
	push	eax
	push	1
	push	44					; 0000002cH
	lea	ecx, DWORD PTR _chl$[ebp]
	push	ecx
	call	_fread
	add	esp, 16					; 00000010H

; 85   : 
; 86   : 		World.Cube[i].CentreY = chl.CentreY;

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 7
	mov	ecx, DWORD PTR ?World@@3UWORLD@@A+8
	mov	edx, DWORD PTR _chl$[ebp+4]
	mov	DWORD PTR [ecx+eax+4], edx

; 87   : 		World.Cube[i].CentreX = chl.CentreX;

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 7
	mov	ecx, DWORD PTR ?World@@3UWORLD@@A+8
	mov	edx, DWORD PTR _chl$[ebp]
	mov	DWORD PTR [ecx+eax], edx

; 88   : 		World.Cube[i].CentreZ = chl.CentreZ;

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 7
	mov	ecx, DWORD PTR ?World@@3UWORLD@@A+8
	mov	edx, DWORD PTR _chl$[ebp+8]
	mov	DWORD PTR [ecx+eax+8], edx

; 89   : 		World.Cube[i].Radius = chl.Radius;

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 7
	mov	ecx, DWORD PTR ?World@@3UWORLD@@A+8
	mov	edx, DWORD PTR _chl$[ebp+12]
	mov	DWORD PTR [ecx+eax+12], edx

; 90   : 		World.Cube[i].Xmin = chl.Xmin;

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 7
	mov	ecx, DWORD PTR ?World@@3UWORLD@@A+8
	mov	edx, DWORD PTR _chl$[ebp+16]
	mov	DWORD PTR [ecx+eax+16], edx

; 91   : 		World.Cube[i].Xmax = chl.Xmax;

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 7
	mov	ecx, DWORD PTR ?World@@3UWORLD@@A+8
	mov	edx, DWORD PTR _chl$[ebp+20]
	mov	DWORD PTR [ecx+eax+20], edx

; 92   : 		World.Cube[i].Ymin = chl.Ymin;

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 7
	mov	ecx, DWORD PTR ?World@@3UWORLD@@A+8
	mov	edx, DWORD PTR _chl$[ebp+24]
	mov	DWORD PTR [ecx+eax+24], edx

; 93   : 		World.Cube[i].Ymax = chl.Ymax;

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 7
	mov	ecx, DWORD PTR ?World@@3UWORLD@@A+8
	mov	edx, DWORD PTR _chl$[ebp+28]
	mov	DWORD PTR [ecx+eax+28], edx

; 94   : 		World.Cube[i].Zmin = chl.Zmin;

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 7
	mov	ecx, DWORD PTR ?World@@3UWORLD@@A+8
	mov	edx, DWORD PTR _chl$[ebp+32]
	mov	DWORD PTR [ecx+eax+32], edx

; 95   : 		World.Cube[i].Zmax = chl.Zmax;

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 7
	mov	ecx, DWORD PTR ?World@@3UWORLD@@A+8
	mov	edx, DWORD PTR _chl$[ebp+36]
	mov	DWORD PTR [ecx+eax+36], edx

; 96   : 
; 97   : 		World.Cube[i].Model.PolyNum = chl.PolyNum;

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 7
	mov	ecx, DWORD PTR ?World@@3UWORLD@@A+8
	mov	dx, WORD PTR _chl$[ebp+40]
	mov	WORD PTR [ecx+eax+72], dx

; 98   : 		World.Cube[i].Model.VertNum = chl.VertNum;

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 7
	mov	ecx, DWORD PTR ?World@@3UWORLD@@A+8
	mov	dx, WORD PTR _chl$[ebp+42]
	mov	WORD PTR [ecx+eax+74], dx

; 99   : 
; 100  : // alloc memory for polys / verts
; 101  : 
; 102  : 		size = sizeof(WORLD_POLY) * World.Cube[i].Model.PolyNum;

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 7
	mov	ecx, DWORD PTR ?World@@3UWORLD@@A+8
	movsx	edx, WORD PTR [ecx+eax+72]
	imul	edx, 80					; 00000050H
	mov	DWORD PTR _size$[ebp], edx

; 103  : 		size += sizeof(WORLD_VERTEX) * World.Cube[i].Model.VertNum;

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 7
	mov	ecx, DWORD PTR ?World@@3UWORLD@@A+8
	movsx	edx, WORD PTR [ecx+eax+74]
	imul	edx, 92					; 0000005cH
	add	edx, DWORD PTR _size$[ebp]
	mov	DWORD PTR _size$[ebp], edx

; 104  : 
; 105  : 		World.Cube[i].Model.AllocPtr = malloc(size);

	push	OFFSET FLAT:??_C@_0IK@HDNGGFNG@c?3?2documents?5and?5settings?2jarhea@
	mov	eax, DWORD PTR ?__LINE__Var@?1??LoadWorld@@YA_NPAD@Z@4JA
	add	eax, 66					; 00000042H
	push	eax
	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	call	?DebugMalloc@@YAPAXIHPAD@Z		; DebugMalloc
	add	esp, 12					; 0000000cH
	mov	edx, DWORD PTR _i$[ebp]
	shl	edx, 7
	mov	ecx, DWORD PTR ?World@@3UWORLD@@A+8
	mov	DWORD PTR [ecx+edx+68], eax

; 106  : 		if (World.Cube[i].Model.AllocPtr == NULL)

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 7
	mov	ecx, DWORD PTR ?World@@3UWORLD@@A+8
	cmp	DWORD PTR [ecx+eax+68], 0
	jne	SHORT $L81322

; 107  : 		{
; 108  : 			Box("ERROR", "Can't alloc memory for world mesh!", MB_OK);

	push	0
	push	OFFSET FLAT:??_C@_0CD@FJOACDPG@Can?8t?5alloc?5memory?5for?5world?5mes@
	push	OFFSET FLAT:??_C@_05MBDEGLCK@ERROR?$AA@
	call	?Box@@YAJPAD0J@Z			; Box
	add	esp, 12					; 0000000cH

; 109  : 			QuitGame = TRUE;

	mov	BYTE PTR ?QuitGame@@3DA, 1		; QuitGame

; 110  : 			return FALSE;

	xor	al, al
	jmp	$L81283
$L81322:

; 111  : 		}
; 112  : 		World.Cube[i].Model.PolyPtr = (WORLD_POLY*)World.Cube[i].Model.AllocPtr;

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 7
	mov	ecx, DWORD PTR _i$[ebp]
	shl	ecx, 7
	mov	edx, DWORD PTR ?World@@3UWORLD@@A+8
	mov	esi, DWORD PTR ?World@@3UWORLD@@A+8
	mov	eax, DWORD PTR [esi+eax+68]
	mov	DWORD PTR [edx+ecx+100], eax

; 113  : 		World.Cube[i].Model.VertPtr = (WORLD_VERTEX*)(World.Cube[i].Model.PolyPtr + World.Cube[i].Model.PolyNum);

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 7
	mov	ecx, DWORD PTR _i$[ebp]
	shl	ecx, 7
	mov	edx, DWORD PTR ?World@@3UWORLD@@A+8
	movsx	ecx, WORD PTR [edx+ecx+72]
	imul	ecx, 80					; 00000050H
	mov	edx, DWORD PTR ?World@@3UWORLD@@A+8
	add	ecx, DWORD PTR [edx+eax+100]
	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 7
	mov	edx, DWORD PTR ?World@@3UWORLD@@A+8
	mov	DWORD PTR [edx+eax+104], ecx

; 114  : 
; 115  : // load polys - count textured / rgb + quads / tris's
; 116  : 
; 117  : 		mp = World.Cube[i].Model.PolyPtr;

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 7
	mov	ecx, DWORD PTR ?World@@3UWORLD@@A+8
	mov	edx, DWORD PTR [ecx+eax+100]
	mov	DWORD PTR _mp$[ebp], edx

; 118  : 
; 119  : 		World.Cube[i].Model.QuadNumTex = 0;

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 7
	mov	ecx, DWORD PTR ?World@@3UWORLD@@A+8
	mov	WORD PTR [ecx+eax+76], 0

; 120  : 		World.Cube[i].Model.TriNumTex = 0;

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 7
	mov	ecx, DWORD PTR ?World@@3UWORLD@@A+8
	mov	WORD PTR [ecx+eax+78], 0

; 121  : 		World.Cube[i].Model.QuadNumRGB = 0;

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 7
	mov	ecx, DWORD PTR ?World@@3UWORLD@@A+8
	mov	WORD PTR [ecx+eax+80], 0

; 122  : 		World.Cube[i].Model.TriNumRGB = 0;

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 7
	mov	ecx, DWORD PTR ?World@@3UWORLD@@A+8
	mov	WORD PTR [ecx+eax+82], 0

; 123  : 
; 124  : 		for (j = 0 ; j < World.Cube[i].Model.PolyNum ; j++, mp++)

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $L81326
$L81327:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
	mov	ecx, DWORD PTR _mp$[ebp]
	add	ecx, 80					; 00000050H
	mov	DWORD PTR _mp$[ebp], ecx
$L81326:
	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 7
	mov	ecx, DWORD PTR ?World@@3UWORLD@@A+8
	movsx	edx, WORD PTR [ecx+eax+72]
	cmp	DWORD PTR _j$[ebp], edx
	jge	$L81328

; 125  : 		{
; 126  : 			fread(&mpl, sizeof(mpl), 1, fp);

	mov	eax, DWORD PTR _fp$[ebp]
	push	eax
	push	1
	push	60					; 0000003cH
	lea	ecx, DWORD PTR _mpl$[ebp]
	push	ecx
	call	_fread
	add	esp, 16					; 00000010H

; 127  : 
; 128  : 			mp->Type = mpl.Type;

	mov	eax, DWORD PTR _mp$[ebp]
	mov	cx, WORD PTR _mpl$[ebp]
	mov	WORD PTR [eax], cx

; 129  : 			mp->Tpage = mpl.Tpage;

	mov	eax, DWORD PTR _mp$[ebp]
	mov	cx, WORD PTR _mpl$[ebp+2]
	mov	WORD PTR [eax+2], cx

; 130  : 
; 131  : 			if (GameSettings.Mirrored)

	cmp	DWORD PTR ?GameSettings@@3UGAME_SETTINGS@@A+16, 0
	je	$L81329

; 132  : 			{
; 133  : 				if (mp->Type & POLY_QUAD)

	mov	eax, DWORD PTR _mp$[ebp]
	movsx	ecx, WORD PTR [eax]
	and	ecx, 1
	je	$L81330

; 134  : 				{
; 135  : 					mp->rgb0 = mpl.c3;

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR _mpl$[ebp+24]
	mov	DWORD PTR [eax+16], ecx

; 136  : 					mp->rgb1 = mpl.c2;

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR _mpl$[ebp+20]
	mov	DWORD PTR [eax+20], ecx

; 137  : 					mp->rgb2 = mpl.c1;

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR _mpl$[ebp+16]
	mov	DWORD PTR [eax+24], ecx

; 138  : 					mp->rgb3 = mpl.c0;

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR _mpl$[ebp+12]
	mov	DWORD PTR [eax+28], ecx

; 139  : 
; 140  : 					mp->tu0 = mpl.u3;

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR _mpl$[ebp+52]
	mov	DWORD PTR [eax+32], ecx

; 141  : 					mp->tv0 = mpl.v3;

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR _mpl$[ebp+56]
	mov	DWORD PTR [eax+36], ecx

; 142  : 					mp->tu1 = mpl.u2;

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR _mpl$[ebp+44]
	mov	DWORD PTR [eax+40], ecx

; 143  : 					mp->tv1 = mpl.v2;

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR _mpl$[ebp+48]
	mov	DWORD PTR [eax+44], ecx

; 144  : 					mp->tu2 = mpl.u1;

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR _mpl$[ebp+36]
	mov	DWORD PTR [eax+48], ecx

; 145  : 					mp->tv2 = mpl.v1;

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR _mpl$[ebp+40]
	mov	DWORD PTR [eax+52], ecx

; 146  : 					mp->tu3 = mpl.u0;

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR _mpl$[ebp+28]
	mov	DWORD PTR [eax+56], ecx

; 147  : 					mp->tv3 = mpl.v0;

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR _mpl$[ebp+32]
	mov	DWORD PTR [eax+60], ecx

; 148  : 
; 149  : 					mp->v0 = World.Cube[i].Model.VertPtr + mpl.vi3;

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 7
	movsx	ecx, WORD PTR _mpl$[ebp+10]
	imul	ecx, 92					; 0000005cH
	mov	edx, DWORD PTR ?World@@3UWORLD@@A+8
	add	ecx, DWORD PTR [edx+eax+104]
	mov	eax, DWORD PTR _mp$[ebp]
	mov	DWORD PTR [eax+64], ecx

; 150  : 					mp->v1 = World.Cube[i].Model.VertPtr + mpl.vi2;

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 7
	movsx	ecx, WORD PTR _mpl$[ebp+8]
	imul	ecx, 92					; 0000005cH
	mov	edx, DWORD PTR ?World@@3UWORLD@@A+8
	add	ecx, DWORD PTR [edx+eax+104]
	mov	eax, DWORD PTR _mp$[ebp]
	mov	DWORD PTR [eax+68], ecx

; 151  : 					mp->v2 = World.Cube[i].Model.VertPtr + mpl.vi1;

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 7
	movsx	ecx, WORD PTR _mpl$[ebp+6]
	imul	ecx, 92					; 0000005cH
	mov	edx, DWORD PTR ?World@@3UWORLD@@A+8
	add	ecx, DWORD PTR [edx+eax+104]
	mov	eax, DWORD PTR _mp$[ebp]
	mov	DWORD PTR [eax+72], ecx

; 152  : 					mp->v3 = World.Cube[i].Model.VertPtr + mpl.vi0;

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 7
	movsx	ecx, WORD PTR _mpl$[ebp+4]
	imul	ecx, 92					; 0000005cH
	mov	edx, DWORD PTR ?World@@3UWORLD@@A+8
	add	ecx, DWORD PTR [edx+eax+104]
	mov	eax, DWORD PTR _mp$[ebp]
	mov	DWORD PTR [eax+76], ecx

; 153  : 				}
; 154  : 				else

	jmp	$L81331
$L81330:

; 155  : 				{
; 156  : 					mp->rgb0 = mpl.c2;

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR _mpl$[ebp+20]
	mov	DWORD PTR [eax+16], ecx

; 157  : 					mp->rgb1 = mpl.c1;

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR _mpl$[ebp+16]
	mov	DWORD PTR [eax+20], ecx

; 158  : 					mp->rgb2 = mpl.c0;

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR _mpl$[ebp+12]
	mov	DWORD PTR [eax+24], ecx

; 159  : 
; 160  : 					mp->tu0 = mpl.u2;

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR _mpl$[ebp+44]
	mov	DWORD PTR [eax+32], ecx

; 161  : 					mp->tv0 = mpl.v2;

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR _mpl$[ebp+48]
	mov	DWORD PTR [eax+36], ecx

; 162  : 					mp->tu1 = mpl.u1;

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR _mpl$[ebp+36]
	mov	DWORD PTR [eax+40], ecx

; 163  : 					mp->tv1 = mpl.v1;

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR _mpl$[ebp+40]
	mov	DWORD PTR [eax+44], ecx

; 164  : 					mp->tu2 = mpl.u0;

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR _mpl$[ebp+28]
	mov	DWORD PTR [eax+48], ecx

; 165  : 					mp->tv2 = mpl.v0;

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR _mpl$[ebp+32]
	mov	DWORD PTR [eax+52], ecx

; 166  : 
; 167  : 					mp->v0 = World.Cube[i].Model.VertPtr + mpl.vi2;

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 7
	movsx	ecx, WORD PTR _mpl$[ebp+8]
	imul	ecx, 92					; 0000005cH
	mov	edx, DWORD PTR ?World@@3UWORLD@@A+8
	add	ecx, DWORD PTR [edx+eax+104]
	mov	eax, DWORD PTR _mp$[ebp]
	mov	DWORD PTR [eax+64], ecx

; 168  : 					mp->v1 = World.Cube[i].Model.VertPtr + mpl.vi1;

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 7
	movsx	ecx, WORD PTR _mpl$[ebp+6]
	imul	ecx, 92					; 0000005cH
	mov	edx, DWORD PTR ?World@@3UWORLD@@A+8
	add	ecx, DWORD PTR [edx+eax+104]
	mov	eax, DWORD PTR _mp$[ebp]
	mov	DWORD PTR [eax+68], ecx

; 169  : 					mp->v2 = World.Cube[i].Model.VertPtr + mpl.vi0;

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 7
	movsx	ecx, WORD PTR _mpl$[ebp+4]
	imul	ecx, 92					; 0000005cH
	mov	edx, DWORD PTR ?World@@3UWORLD@@A+8
	add	ecx, DWORD PTR [edx+eax+104]
	mov	eax, DWORD PTR _mp$[ebp]
	mov	DWORD PTR [eax+72], ecx
$L81331:

; 170  : 				}
; 171  : 			}
; 172  : 			else

	jmp	$L81332
$L81329:

; 173  : 			{
; 174  : 				mp->rgb0 = mpl.c0;

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR _mpl$[ebp+12]
	mov	DWORD PTR [eax+16], ecx

; 175  : 				mp->rgb1 = mpl.c1;

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR _mpl$[ebp+16]
	mov	DWORD PTR [eax+20], ecx

; 176  : 				mp->rgb2 = mpl.c2;

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR _mpl$[ebp+20]
	mov	DWORD PTR [eax+24], ecx

; 177  : 				mp->rgb3 = mpl.c3;

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR _mpl$[ebp+24]
	mov	DWORD PTR [eax+28], ecx

; 178  : 
; 179  : 				mp->tu0 = mpl.u0;

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR _mpl$[ebp+28]
	mov	DWORD PTR [eax+32], ecx

; 180  : 				mp->tv0 = mpl.v0;

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR _mpl$[ebp+32]
	mov	DWORD PTR [eax+36], ecx

; 181  : 				mp->tu1 = mpl.u1;

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR _mpl$[ebp+36]
	mov	DWORD PTR [eax+40], ecx

; 182  : 				mp->tv1 = mpl.v1;

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR _mpl$[ebp+40]
	mov	DWORD PTR [eax+44], ecx

; 183  : 				mp->tu2 = mpl.u2;

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR _mpl$[ebp+44]
	mov	DWORD PTR [eax+48], ecx

; 184  : 				mp->tv2 = mpl.v2;

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR _mpl$[ebp+48]
	mov	DWORD PTR [eax+52], ecx

; 185  : 				mp->tu3 = mpl.u3;

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR _mpl$[ebp+52]
	mov	DWORD PTR [eax+56], ecx

; 186  : 				mp->tv3 = mpl.v3;

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR _mpl$[ebp+56]
	mov	DWORD PTR [eax+60], ecx

; 187  : 
; 188  : 				mp->v0 = World.Cube[i].Model.VertPtr + mpl.vi0;

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 7
	movsx	ecx, WORD PTR _mpl$[ebp+4]
	imul	ecx, 92					; 0000005cH
	mov	edx, DWORD PTR ?World@@3UWORLD@@A+8
	add	ecx, DWORD PTR [edx+eax+104]
	mov	eax, DWORD PTR _mp$[ebp]
	mov	DWORD PTR [eax+64], ecx

; 189  : 				mp->v1 = World.Cube[i].Model.VertPtr + mpl.vi1;

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 7
	movsx	ecx, WORD PTR _mpl$[ebp+6]
	imul	ecx, 92					; 0000005cH
	mov	edx, DWORD PTR ?World@@3UWORLD@@A+8
	add	ecx, DWORD PTR [edx+eax+104]
	mov	eax, DWORD PTR _mp$[ebp]
	mov	DWORD PTR [eax+68], ecx

; 190  : 				mp->v2 = World.Cube[i].Model.VertPtr + mpl.vi2;

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 7
	movsx	ecx, WORD PTR _mpl$[ebp+8]
	imul	ecx, 92					; 0000005cH
	mov	edx, DWORD PTR ?World@@3UWORLD@@A+8
	add	ecx, DWORD PTR [edx+eax+104]
	mov	eax, DWORD PTR _mp$[ebp]
	mov	DWORD PTR [eax+72], ecx

; 191  : 				mp->v3 = World.Cube[i].Model.VertPtr + mpl.vi3;

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 7
	movsx	ecx, WORD PTR _mpl$[ebp+10]
	imul	ecx, 92					; 0000005cH
	mov	edx, DWORD PTR ?World@@3UWORLD@@A+8
	add	ecx, DWORD PTR [edx+eax+104]
	mov	eax, DWORD PTR _mp$[ebp]
	mov	DWORD PTR [eax+76], ecx
$L81332:

; 192  : 			}
; 193  : 
; 194  : 			ModelChangeGouraud((MODEL_RGB*)&mp->rgb0, LevelInf[GameSettings.Level].WorldRGBper);

	mov	eax, DWORD PTR ?GameSettings@@3UGAME_SETTINGS@@A+4
	imul	eax, 232				; 000000e8H
	mov	ecx, DWORD PTR ?LevelInf@@3PAULEVELINFO@@A ; LevelInf
	cmp	DWORD PTR [ecx+eax+204], 100		; 00000064H
	je	$L81333
	mov	eax, DWORD PTR _mp$[ebp]
	movzx	eax, BYTE PTR [eax+18]
	add	eax, 1
	mov	ecx, DWORD PTR ?GameSettings@@3UGAME_SETTINGS@@A+4
	imul	ecx, 232				; 000000e8H
	mov	edx, DWORD PTR ?LevelInf@@3PAULEVELINFO@@A ; LevelInf
	imul	eax, DWORD PTR [edx+ecx+204]
	cdq
	mov	ecx, 100				; 00000064H
	idiv	ecx
	mov	edx, DWORD PTR _mp$[ebp]
	mov	BYTE PTR [edx+18], al
	mov	eax, DWORD PTR _mp$[ebp]
	movzx	eax, BYTE PTR [eax+17]
	add	eax, 1
	mov	ecx, DWORD PTR ?GameSettings@@3UGAME_SETTINGS@@A+4
	imul	ecx, 232				; 000000e8H
	mov	edx, DWORD PTR ?LevelInf@@3PAULEVELINFO@@A ; LevelInf
	imul	eax, DWORD PTR [edx+ecx+204]
	cdq
	mov	ecx, 100				; 00000064H
	idiv	ecx
	mov	edx, DWORD PTR _mp$[ebp]
	mov	BYTE PTR [edx+17], al
	mov	eax, DWORD PTR _mp$[ebp]
	movzx	eax, BYTE PTR [eax+16]
	add	eax, 1
	mov	ecx, DWORD PTR ?GameSettings@@3UGAME_SETTINGS@@A+4
	imul	ecx, 232				; 000000e8H
	mov	edx, DWORD PTR ?LevelInf@@3PAULEVELINFO@@A ; LevelInf
	imul	eax, DWORD PTR [edx+ecx+204]
	cdq
	mov	ecx, 100				; 00000064H
	idiv	ecx
	mov	edx, DWORD PTR _mp$[ebp]
	mov	BYTE PTR [edx+16], al
$L81333:

; 195  : 			ModelChangeGouraud((MODEL_RGB*)&mp->rgb1, LevelInf[GameSettings.Level].WorldRGBper);

	mov	eax, DWORD PTR ?GameSettings@@3UGAME_SETTINGS@@A+4
	imul	eax, 232				; 000000e8H
	mov	ecx, DWORD PTR ?LevelInf@@3PAULEVELINFO@@A ; LevelInf
	cmp	DWORD PTR [ecx+eax+204], 100		; 00000064H
	je	$L81340
	mov	eax, DWORD PTR _mp$[ebp]
	movzx	eax, BYTE PTR [eax+22]
	add	eax, 1
	mov	ecx, DWORD PTR ?GameSettings@@3UGAME_SETTINGS@@A+4
	imul	ecx, 232				; 000000e8H
	mov	edx, DWORD PTR ?LevelInf@@3PAULEVELINFO@@A ; LevelInf
	imul	eax, DWORD PTR [edx+ecx+204]
	cdq
	mov	ecx, 100				; 00000064H
	idiv	ecx
	mov	edx, DWORD PTR _mp$[ebp]
	mov	BYTE PTR [edx+22], al
	mov	eax, DWORD PTR _mp$[ebp]
	movzx	eax, BYTE PTR [eax+21]
	add	eax, 1
	mov	ecx, DWORD PTR ?GameSettings@@3UGAME_SETTINGS@@A+4
	imul	ecx, 232				; 000000e8H
	mov	edx, DWORD PTR ?LevelInf@@3PAULEVELINFO@@A ; LevelInf
	imul	eax, DWORD PTR [edx+ecx+204]
	cdq
	mov	ecx, 100				; 00000064H
	idiv	ecx
	mov	edx, DWORD PTR _mp$[ebp]
	mov	BYTE PTR [edx+21], al
	mov	eax, DWORD PTR _mp$[ebp]
	movzx	eax, BYTE PTR [eax+20]
	add	eax, 1
	mov	ecx, DWORD PTR ?GameSettings@@3UGAME_SETTINGS@@A+4
	imul	ecx, 232				; 000000e8H
	mov	edx, DWORD PTR ?LevelInf@@3PAULEVELINFO@@A ; LevelInf
	imul	eax, DWORD PTR [edx+ecx+204]
	cdq
	mov	ecx, 100				; 00000064H
	idiv	ecx
	mov	edx, DWORD PTR _mp$[ebp]
	mov	BYTE PTR [edx+20], al
$L81340:

; 196  : 			ModelChangeGouraud((MODEL_RGB*)&mp->rgb2, LevelInf[GameSettings.Level].WorldRGBper);

	mov	eax, DWORD PTR ?GameSettings@@3UGAME_SETTINGS@@A+4
	imul	eax, 232				; 000000e8H
	mov	ecx, DWORD PTR ?LevelInf@@3PAULEVELINFO@@A ; LevelInf
	cmp	DWORD PTR [ecx+eax+204], 100		; 00000064H
	je	$L81347
	mov	eax, DWORD PTR _mp$[ebp]
	movzx	eax, BYTE PTR [eax+26]
	add	eax, 1
	mov	ecx, DWORD PTR ?GameSettings@@3UGAME_SETTINGS@@A+4
	imul	ecx, 232				; 000000e8H
	mov	edx, DWORD PTR ?LevelInf@@3PAULEVELINFO@@A ; LevelInf
	imul	eax, DWORD PTR [edx+ecx+204]
	cdq
	mov	ecx, 100				; 00000064H
	idiv	ecx
	mov	edx, DWORD PTR _mp$[ebp]
	mov	BYTE PTR [edx+26], al
	mov	eax, DWORD PTR _mp$[ebp]
	movzx	eax, BYTE PTR [eax+25]
	add	eax, 1
	mov	ecx, DWORD PTR ?GameSettings@@3UGAME_SETTINGS@@A+4
	imul	ecx, 232				; 000000e8H
	mov	edx, DWORD PTR ?LevelInf@@3PAULEVELINFO@@A ; LevelInf
	imul	eax, DWORD PTR [edx+ecx+204]
	cdq
	mov	ecx, 100				; 00000064H
	idiv	ecx
	mov	edx, DWORD PTR _mp$[ebp]
	mov	BYTE PTR [edx+25], al
	mov	eax, DWORD PTR _mp$[ebp]
	movzx	eax, BYTE PTR [eax+24]
	add	eax, 1
	mov	ecx, DWORD PTR ?GameSettings@@3UGAME_SETTINGS@@A+4
	imul	ecx, 232				; 000000e8H
	mov	edx, DWORD PTR ?LevelInf@@3PAULEVELINFO@@A ; LevelInf
	imul	eax, DWORD PTR [edx+ecx+204]
	cdq
	mov	ecx, 100				; 00000064H
	idiv	ecx
	mov	edx, DWORD PTR _mp$[ebp]
	mov	BYTE PTR [edx+24], al
$L81347:

; 197  : 			ModelChangeGouraud((MODEL_RGB*)&mp->rgb3, LevelInf[GameSettings.Level].WorldRGBper);

	mov	eax, DWORD PTR ?GameSettings@@3UGAME_SETTINGS@@A+4
	imul	eax, 232				; 000000e8H
	mov	ecx, DWORD PTR ?LevelInf@@3PAULEVELINFO@@A ; LevelInf
	cmp	DWORD PTR [ecx+eax+204], 100		; 00000064H
	je	$L81354
	mov	eax, DWORD PTR _mp$[ebp]
	movzx	eax, BYTE PTR [eax+30]
	add	eax, 1
	mov	ecx, DWORD PTR ?GameSettings@@3UGAME_SETTINGS@@A+4
	imul	ecx, 232				; 000000e8H
	mov	edx, DWORD PTR ?LevelInf@@3PAULEVELINFO@@A ; LevelInf
	imul	eax, DWORD PTR [edx+ecx+204]
	cdq
	mov	ecx, 100				; 00000064H
	idiv	ecx
	mov	edx, DWORD PTR _mp$[ebp]
	mov	BYTE PTR [edx+30], al
	mov	eax, DWORD PTR _mp$[ebp]
	movzx	eax, BYTE PTR [eax+29]
	add	eax, 1
	mov	ecx, DWORD PTR ?GameSettings@@3UGAME_SETTINGS@@A+4
	imul	ecx, 232				; 000000e8H
	mov	edx, DWORD PTR ?LevelInf@@3PAULEVELINFO@@A ; LevelInf
	imul	eax, DWORD PTR [edx+ecx+204]
	cdq
	mov	ecx, 100				; 00000064H
	idiv	ecx
	mov	edx, DWORD PTR _mp$[ebp]
	mov	BYTE PTR [edx+29], al
	mov	eax, DWORD PTR _mp$[ebp]
	movzx	eax, BYTE PTR [eax+28]
	add	eax, 1
	mov	ecx, DWORD PTR ?GameSettings@@3UGAME_SETTINGS@@A+4
	imul	ecx, 232				; 000000e8H
	mov	edx, DWORD PTR ?LevelInf@@3PAULEVELINFO@@A ; LevelInf
	imul	eax, DWORD PTR [edx+ecx+204]
	cdq
	mov	ecx, 100				; 00000064H
	idiv	ecx
	mov	edx, DWORD PTR _mp$[ebp]
	mov	BYTE PTR [edx+28], al
$L81354:

; 198  : 
; 199  : 			if (mp->Type & POLY_MIRROR)

	mov	eax, DWORD PTR _mp$[ebp]
	movsx	ecx, WORD PTR [eax]
	and	ecx, 128				; 00000080H
	je	SHORT $L81361

; 200  : 			{
; 201  : 				mp->rgb0 |= MirrorAlpha;

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	or	ecx, DWORD PTR ?MirrorAlpha@@3JA	; MirrorAlpha
	mov	edx, DWORD PTR _mp$[ebp]
	mov	DWORD PTR [edx+16], ecx

; 202  : 				mp->rgb1 |= MirrorAlpha;

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	or	ecx, DWORD PTR ?MirrorAlpha@@3JA	; MirrorAlpha
	mov	edx, DWORD PTR _mp$[ebp]
	mov	DWORD PTR [edx+20], ecx

; 203  : 				mp->rgb2 |= MirrorAlpha;

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	or	ecx, DWORD PTR ?MirrorAlpha@@3JA	; MirrorAlpha
	mov	edx, DWORD PTR _mp$[ebp]
	mov	DWORD PTR [edx+24], ecx

; 204  : 				mp->rgb3 |= MirrorAlpha;

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	or	ecx, DWORD PTR ?MirrorAlpha@@3JA	; MirrorAlpha
	mov	edx, DWORD PTR _mp$[ebp]
	mov	DWORD PTR [edx+28], ecx
$L81361:

; 205  : 			}
; 206  : 
; 207  : 			if (mp->Tpage != -1)

	mov	eax, DWORD PTR _mp$[ebp]
	movsx	ecx, WORD PTR [eax+2]
	cmp	ecx, -1
	je	SHORT $L81362

; 208  : 			{
; 209  : 				if (mp->Type & POLY_QUAD) World.Cube[i].Model.QuadNumTex++;

	mov	eax, DWORD PTR _mp$[ebp]
	movsx	ecx, WORD PTR [eax]
	and	ecx, 1
	je	SHORT $L81363
	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 7
	mov	ecx, DWORD PTR ?World@@3UWORLD@@A+8
	mov	dx, WORD PTR [ecx+eax+76]
	add	dx, 1
	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 7
	mov	ecx, DWORD PTR ?World@@3UWORLD@@A+8
	mov	WORD PTR [ecx+eax+76], dx

; 210  : 				else World.Cube[i].Model.TriNumTex++;

	jmp	SHORT $L81364
$L81363:
	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 7
	mov	ecx, DWORD PTR ?World@@3UWORLD@@A+8
	mov	dx, WORD PTR [ecx+eax+78]
	add	dx, 1
	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 7
	mov	ecx, DWORD PTR ?World@@3UWORLD@@A+8
	mov	WORD PTR [ecx+eax+78], dx
$L81364:

; 211  : 			}
; 212  : 			else

	jmp	SHORT $L81365
$L81362:

; 213  : 			{
; 214  : 				if (mp->Type & POLY_QUAD) World.Cube[i].Model.QuadNumRGB++;

	mov	eax, DWORD PTR _mp$[ebp]
	movsx	ecx, WORD PTR [eax]
	and	ecx, 1
	je	SHORT $L81366
	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 7
	mov	ecx, DWORD PTR ?World@@3UWORLD@@A+8
	mov	dx, WORD PTR [ecx+eax+80]
	add	dx, 1
	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 7
	mov	ecx, DWORD PTR ?World@@3UWORLD@@A+8
	mov	WORD PTR [ecx+eax+80], dx

; 215  : 				else World.Cube[i].Model.TriNumRGB++;

	jmp	SHORT $L81365
$L81366:
	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 7
	mov	ecx, DWORD PTR ?World@@3UWORLD@@A+8
	mov	dx, WORD PTR [ecx+eax+82]
	add	dx, 1
	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 7
	mov	ecx, DWORD PTR ?World@@3UWORLD@@A+8
	mov	WORD PTR [ecx+eax+82], dx
$L81365:

; 216  : 			}
; 217  : 		}

	jmp	$L81327
$L81328:

; 218  : 
; 219  : // sort polys into textured / untextured + quads / tri's
; 220  : 
; 221  : 		mp = World.Cube[i].Model.PolyPtr;

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 7
	mov	ecx, DWORD PTR ?World@@3UWORLD@@A+8
	mov	edx, DWORD PTR [ecx+eax+100]
	mov	DWORD PTR _mp$[ebp], edx

; 222  : 
; 223  : 		j = World.Cube[i].Model.PolyNum;

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 7
	mov	ecx, DWORD PTR ?World@@3UWORLD@@A+8
	movsx	edx, WORD PTR [ecx+eax+72]
	mov	DWORD PTR _j$[ebp], edx

; 224  : 		if(j > 1)	//can only sort a list with more than one entry

	cmp	DWORD PTR _j$[ebp], 1
	jle	$L81368
$L81370:

; 225  : 		{
; 226  : 			while(--j)	//pre-decrement because we only need to scan j - 1 times

	mov	eax, DWORD PTR _j$[ebp]
	sub	eax, 1
	mov	DWORD PTR _j$[ebp], eax
	je	$L81368

; 227  : 			{
; 228  : 				for (k = 0 ; k < j ; k++)

	mov	DWORD PTR _k$[ebp], 0
	jmp	SHORT $L81372
$L81373:
	mov	eax, DWORD PTR _k$[ebp]
	add	eax, 1
	mov	DWORD PTR _k$[ebp], eax
$L81372:
	mov	eax, DWORD PTR _k$[ebp]
	cmp	eax, DWORD PTR _j$[ebp]
	jge	$L81374

; 229  : 				{
; 230  : 					a = mp[k].Type & POLY_QUAD;

	mov	eax, DWORD PTR _k$[ebp]
	imul	eax, 80					; 00000050H
	mov	ecx, DWORD PTR _mp$[ebp]
	movsx	edx, WORD PTR [ecx+eax]
	and	edx, 1
	mov	DWORD PTR _a$[ebp], edx

; 231  : 					if (mp[k].Tpage != -1) a += 256;

	mov	eax, DWORD PTR _k$[ebp]
	imul	eax, 80					; 00000050H
	mov	ecx, DWORD PTR _mp$[ebp]
	movsx	edx, WORD PTR [ecx+eax+2]
	cmp	edx, -1
	je	SHORT $L81375
	mov	eax, DWORD PTR _a$[ebp]
	add	eax, 256				; 00000100H
	mov	DWORD PTR _a$[ebp], eax
$L81375:

; 232  : 
; 233  : 					b = mp[k + 1].Type & POLY_QUAD;

	mov	eax, DWORD PTR _k$[ebp]
	add	eax, 1
	imul	eax, 80					; 00000050H
	mov	ecx, DWORD PTR _mp$[ebp]
	movsx	edx, WORD PTR [ecx+eax]
	and	edx, 1
	mov	DWORD PTR _b$[ebp], edx

; 234  : 					if (mp[k + 1].Tpage != -1) b += 256;

	mov	eax, DWORD PTR _k$[ebp]
	add	eax, 1
	imul	eax, 80					; 00000050H
	mov	ecx, DWORD PTR _mp$[ebp]
	movsx	edx, WORD PTR [ecx+eax+2]
	cmp	edx, -1
	je	SHORT $L81376
	mov	eax, DWORD PTR _b$[ebp]
	add	eax, 256				; 00000100H
	mov	DWORD PTR _b$[ebp], eax
$L81376:

; 235  : 
; 236  : 					if (b > a)

	mov	eax, DWORD PTR _b$[ebp]
	cmp	eax, DWORD PTR _a$[ebp]
	jle	SHORT $L81377

; 237  : 					{
; 238  : 						wp = mp[k];

	mov	esi, DWORD PTR _k$[ebp]
	imul	esi, 80					; 00000050H
	add	esi, DWORD PTR _mp$[ebp]
	mov	ecx, 20					; 00000014H
	lea	edi, DWORD PTR _wp$[ebp]
	rep movsd

; 239  : 						mp[k] = mp[k + 1];

	mov	esi, DWORD PTR _k$[ebp]
	add	esi, 1
	imul	esi, 80					; 00000050H
	add	esi, DWORD PTR _mp$[ebp]
	mov	edi, DWORD PTR _k$[ebp]
	imul	edi, 80					; 00000050H
	add	edi, DWORD PTR _mp$[ebp]
	mov	ecx, 20					; 00000014H
	rep movsd

; 240  : 						mp[k + 1] = wp;

	mov	edi, DWORD PTR _k$[ebp]
	add	edi, 1
	imul	edi, 80					; 00000050H
	add	edi, DWORD PTR _mp$[ebp]
	mov	ecx, 20					; 00000014H
	lea	esi, DWORD PTR _wp$[ebp]
	rep movsd
$L81377:

; 241  : 					}
; 242  : 				}

	jmp	$L81373
$L81374:

; 243  : 			}

	jmp	$L81370
$L81368:

; 244  : 		}
; 245  : 
; 246  : // load verts
; 247  : 
; 248  : 		for (j = 0 ; j < World.Cube[i].Model.VertNum ; j++)

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $L81378
$L81379:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$L81378:
	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 7
	mov	ecx, DWORD PTR ?World@@3UWORLD@@A+8
	movsx	edx, WORD PTR [ecx+eax+74]
	cmp	DWORD PTR _j$[ebp], edx
	jge	$L81380

; 249  : 		{
; 250  : 			fread(&mvl, sizeof(mvl), 1, fp);

	mov	eax, DWORD PTR _fp$[ebp]
	push	eax
	push	1
	push	24					; 00000018H
	lea	ecx, DWORD PTR _mvl$[ebp]
	push	ecx
	call	_fread
	add	esp, 16					; 00000010H

; 251  : 
; 252  : 			World.Cube[i].Model.VertPtr[j].x = mvl.x;

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 7
	mov	ecx, DWORD PTR _j$[ebp]
	imul	ecx, 92					; 0000005cH
	mov	edx, DWORD PTR ?World@@3UWORLD@@A+8
	mov	eax, DWORD PTR [edx+eax+104]
	mov	edx, DWORD PTR _mvl$[ebp]
	mov	DWORD PTR [ecx+eax], edx

; 253  : 			World.Cube[i].Model.VertPtr[j].y = mvl.y;

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 7
	mov	ecx, DWORD PTR _j$[ebp]
	imul	ecx, 92					; 0000005cH
	mov	edx, DWORD PTR ?World@@3UWORLD@@A+8
	mov	eax, DWORD PTR [edx+eax+104]
	mov	edx, DWORD PTR _mvl$[ebp+4]
	mov	DWORD PTR [eax+ecx+4], edx

; 254  : 			World.Cube[i].Model.VertPtr[j].z = mvl.z;

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 7
	mov	ecx, DWORD PTR _j$[ebp]
	imul	ecx, 92					; 0000005cH
	mov	edx, DWORD PTR ?World@@3UWORLD@@A+8
	mov	eax, DWORD PTR [edx+eax+104]
	mov	edx, DWORD PTR _mvl$[ebp+8]
	mov	DWORD PTR [eax+ecx+8], edx

; 255  : 
; 256  : 			World.Cube[i].Model.VertPtr[j].nx = mvl.nx;

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 7
	mov	ecx, DWORD PTR _j$[ebp]
	imul	ecx, 92					; 0000005cH
	mov	edx, DWORD PTR ?World@@3UWORLD@@A+8
	mov	eax, DWORD PTR [edx+eax+104]
	mov	edx, DWORD PTR _mvl$[ebp+12]
	mov	DWORD PTR [eax+ecx+24], edx

; 257  : 			World.Cube[i].Model.VertPtr[j].ny = mvl.ny;

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 7
	mov	ecx, DWORD PTR _j$[ebp]
	imul	ecx, 92					; 0000005cH
	mov	edx, DWORD PTR ?World@@3UWORLD@@A+8
	mov	eax, DWORD PTR [edx+eax+104]
	mov	edx, DWORD PTR _mvl$[ebp+16]
	mov	DWORD PTR [eax+ecx+28], edx

; 258  : 			World.Cube[i].Model.VertPtr[j].nz = mvl.nz;

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 7
	mov	ecx, DWORD PTR _j$[ebp]
	imul	ecx, 92					; 0000005cH
	mov	edx, DWORD PTR ?World@@3UWORLD@@A+8
	mov	eax, DWORD PTR [edx+eax+104]
	mov	edx, DWORD PTR _mvl$[ebp+20]
	mov	DWORD PTR [eax+ecx+32], edx

; 259  : 
; 260  : 			vf = (mvl.y - RenderSettings.VertFogStart) * RenderSettings.VertFogMul;

	fld	DWORD PTR _mvl$[ebp+4]
	fsub	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+60
	fmul	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+72
	fstp	DWORD PTR _vf$[ebp]

; 261  : 			vf -= (float)(rand() & 31);

	call	_rand
	and	eax, 31					; 0000001fH
	mov	DWORD PTR tv1714[ebp], eax
	fild	DWORD PTR tv1714[ebp]
	fsubr	DWORD PTR _vf$[ebp]
	fstp	DWORD PTR _vf$[ebp]

; 262  : 			if (vf < 0) vf = 0;

	fld	DWORD PTR _vf$[ebp]
	fcomp	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L81382
	mov	DWORD PTR _vf$[ebp], 0
$L81382:

; 263  : 			if (vf > 255) vf = 255;

	fld	DWORD PTR _vf$[ebp]
	fcomp	DWORD PTR __real@437f0000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $L81383
	mov	DWORD PTR _vf$[ebp], 1132396544		; 437f0000H
$L81383:

; 264  : 			(World.Cube[i].Model.VertPtr + j)->VertFog = vf;

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 7
	mov	ecx, DWORD PTR _j$[ebp]
	imul	ecx, 92					; 0000005cH
	mov	edx, DWORD PTR ?World@@3UWORLD@@A+8
	mov	eax, DWORD PTR [edx+eax+104]
	mov	edx, DWORD PTR _vf$[ebp]
	mov	DWORD PTR [eax+ecx+84], edx

; 265  : 
; 266  : 			rad = (float)sqrt(mvl.x * mvl.x + mvl.y * mvl.y + mvl.z * mvl.z);

	fld	DWORD PTR _mvl$[ebp]
	fmul	DWORD PTR _mvl$[ebp]
	fld	DWORD PTR _mvl$[ebp+4]
	fmul	DWORD PTR _mvl$[ebp+4]
	faddp	ST(1), ST(0)
	fld	DWORD PTR _mvl$[ebp+8]
	fmul	DWORD PTR _mvl$[ebp+8]
	faddp	ST(1), ST(0)
	push	ecx
	fstp	DWORD PTR [esp]
	call	?sqrt@@YAMM@Z				; sqrt
	add	esp, 4
	fstp	DWORD PTR _rad$[ebp]

; 267  : 			if (rad > maxrad) maxrad = rad;

	fld	DWORD PTR _rad$[ebp]
	fcomp	DWORD PTR _maxrad$[ebp]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $L81385
	mov	eax, DWORD PTR _rad$[ebp]
	mov	DWORD PTR _maxrad$[ebp], eax
$L81385:

; 268  : 		}

	jmp	$L81379
$L81380:

; 269  : 
; 270  : // setup tex anim poly list
; 271  : 
; 272  : 		World.Cube[i].Model.AnimPolyNum = 0;

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 7
	mov	ecx, DWORD PTR ?World@@3UWORLD@@A+8
	mov	WORD PTR [ecx+eax+96], 0

; 273  : 		mp = World.Cube[i].Model.PolyPtr;

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 7
	mov	ecx, DWORD PTR ?World@@3UWORLD@@A+8
	mov	edx, DWORD PTR [ecx+eax+100]
	mov	DWORD PTR _mp$[ebp], edx

; 274  : 
; 275  : 		for (j = World.Cube[i].Model.PolyNum ; j ; j--, mp++) if (mp->Type & POLY_TEXANIM)

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 7
	mov	ecx, DWORD PTR ?World@@3UWORLD@@A+8
	movsx	edx, WORD PTR [ecx+eax+72]
	mov	DWORD PTR _j$[ebp], edx
	jmp	SHORT $L81386
$L81387:
	mov	eax, DWORD PTR _j$[ebp]
	sub	eax, 1
	mov	DWORD PTR _j$[ebp], eax
	mov	ecx, DWORD PTR _mp$[ebp]
	add	ecx, 80					; 00000050H
	mov	DWORD PTR _mp$[ebp], ecx
$L81386:
	cmp	DWORD PTR _j$[ebp], 0
	je	SHORT $L81388
	mov	eax, DWORD PTR _mp$[ebp]
	movsx	ecx, WORD PTR [eax]
	and	ecx, 512				; 00000200H
	je	SHORT $L81389

; 276  : 		{
; 277  : 			World.Cube[i].Model.AnimPolyNum++;

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 7
	mov	ecx, DWORD PTR ?World@@3UWORLD@@A+8
	mov	dx, WORD PTR [ecx+eax+96]
	add	dx, 1
	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 7
	mov	ecx, DWORD PTR ?World@@3UWORLD@@A+8
	mov	WORD PTR [ecx+eax+96], dx
$L81389:

; 278  : 		}
; 279  : 
; 280  : 		if (!World.Cube[i].Model.AnimPolyNum)

	jmp	SHORT $L81387
$L81388:
	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 7
	mov	ecx, DWORD PTR ?World@@3UWORLD@@A+8
	movsx	edx, WORD PTR [ecx+eax+96]
	test	edx, edx
	jne	SHORT $L81390

; 281  : 		{
; 282  : 			World.Cube[i].Model.AnimPolyPtr = NULL;

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 7
	mov	ecx, DWORD PTR ?World@@3UWORLD@@A+8
	mov	DWORD PTR [ecx+eax+116], 0

; 283  : 		}
; 284  : 		else

	jmp	SHORT $L81391
$L81390:

; 285  : 		{
; 286  : 			World.Cube[i].Model.AnimPolyPtr = (WORLD_ANIM_POLY*)malloc(sizeof(WORLD_ANIM_POLY) * World.Cube[i].Model.AnimPolyNum);

	push	OFFSET FLAT:??_C@_0IK@HDNGGFNG@c?3?2documents?5and?5settings?2jarhea@
	mov	eax, DWORD PTR ?__LINE__Var@?1??LoadWorld@@YA_NPAD@Z@4JA
	add	eax, 247				; 000000f7H
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	shl	ecx, 7
	mov	edx, DWORD PTR ?World@@3UWORLD@@A+8
	movsx	eax, WORD PTR [edx+ecx+96]
	shl	eax, 3
	push	eax
	call	?DebugMalloc@@YAPAXIHPAD@Z		; DebugMalloc
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _i$[ebp]
	shl	ecx, 7
	mov	edx, DWORD PTR ?World@@3UWORLD@@A+8
	mov	DWORD PTR [edx+ecx+116], eax

; 287  : 			if (!World.Cube[i].Model.AnimPolyPtr) World.Cube[i].Model.AnimPolyNum = 0;

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 7
	mov	ecx, DWORD PTR ?World@@3UWORLD@@A+8
	cmp	DWORD PTR [ecx+eax+116], 0
	jne	SHORT $L81391
	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 7
	mov	ecx, DWORD PTR ?World@@3UWORLD@@A+8
	mov	WORD PTR [ecx+eax+96], 0
$L81391:

; 288  : 		}
; 289  : 
; 290  : 		if (World.Cube[i].Model.AnimPolyNum)

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 7
	mov	ecx, DWORD PTR ?World@@3UWORLD@@A+8
	movsx	edx, WORD PTR [ecx+eax+96]
	test	edx, edx
	je	$L81395

; 291  : 		{
; 292  : 			mp = World.Cube[i].Model.PolyPtr;

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 7
	mov	ecx, DWORD PTR ?World@@3UWORLD@@A+8
	mov	edx, DWORD PTR [ecx+eax+100]
	mov	DWORD PTR _mp$[ebp], edx

; 293  : 			for (j = 0 ; j < World.Cube[i].Model.AnimPolyNum ; j++)

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $L81396
$L81397:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$L81396:
	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 7
	mov	ecx, DWORD PTR ?World@@3UWORLD@@A+8
	movsx	edx, WORD PTR [ecx+eax+96]
	cmp	DWORD PTR _j$[ebp], edx
	jge	SHORT $L81395
$L81400:

; 294  : 			{
; 295  : 				while (!(mp->Type & POLY_TEXANIM)) mp++;

	mov	eax, DWORD PTR _mp$[ebp]
	movsx	ecx, WORD PTR [eax]
	and	ecx, 512				; 00000200H
	jne	SHORT $L81401
	mov	eax, DWORD PTR _mp$[ebp]
	add	eax, 80					; 00000050H
	mov	DWORD PTR _mp$[ebp], eax
	jmp	SHORT $L81400
$L81401:

; 296  : 				World.Cube[i].Model.AnimPolyPtr[j].Poly = mp;

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 7
	mov	ecx, DWORD PTR ?World@@3UWORLD@@A+8
	mov	edx, DWORD PTR [ecx+eax+116]
	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _mp$[ebp]
	mov	DWORD PTR [edx+eax*8], ecx

; 297  : 				World.Cube[i].Model.AnimPolyPtr[j].Anim = &TexAnim[mp->Tpage];

	mov	eax, DWORD PTR _mp$[ebp]
	movsx	ecx, WORD PTR [eax+2]
	imul	ecx, 20					; 00000014H
	add	ecx, OFFSET FLAT:?TexAnim@@3PAUTEXANIM_HEADER@@A
	mov	edx, DWORD PTR _i$[ebp]
	shl	edx, 7
	mov	eax, DWORD PTR ?World@@3UWORLD@@A+8
	mov	edx, DWORD PTR [eax+edx+116]
	mov	eax, DWORD PTR _j$[ebp]
	mov	DWORD PTR [edx+eax*8+4], ecx

; 298  : 				mp++;

	mov	eax, DWORD PTR _mp$[ebp]
	add	eax, 80					; 00000050H
	mov	DWORD PTR _mp$[ebp], eax

; 299  : 			}

	jmp	$L81397
$L81395:

; 300  : 		}
; 301  : 
; 302  : // setup env vert list
; 303  : 
; 304  : 		World.Cube[i].Model.EnvVertNum = 0;

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 7
	mov	ecx, DWORD PTR ?World@@3UWORLD@@A+8
	mov	WORD PTR [ecx+eax+98], 0

; 305  : 		World.Cube[i].Model.EnvVertPtr = NULL;

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 7
	mov	ecx, DWORD PTR ?World@@3UWORLD@@A+8
	mov	DWORD PTR [ecx+eax+120], 0

; 306  : 
; 307  : 		vert = (WORLD_VERTEX**)malloc(sizeof(WORLD_VERTEX*) * World.Cube[i].Model.VertNum);

	push	OFFSET FLAT:??_C@_0IK@HDNGGFNG@c?3?2documents?5and?5settings?2jarhea@
	mov	eax, DWORD PTR ?__LINE__Var@?1??LoadWorld@@YA_NPAD@Z@4JA
	add	eax, 268				; 0000010cH
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	shl	ecx, 7
	mov	edx, DWORD PTR ?World@@3UWORLD@@A+8
	movsx	eax, WORD PTR [edx+ecx+74]
	shl	eax, 2
	push	eax
	call	?DebugMalloc@@YAPAXIHPAD@Z		; DebugMalloc
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _vert$[ebp], eax

; 308  : 		if (vert)

	cmp	DWORD PTR _vert$[ebp], 0
	je	$L81404

; 309  : 		{
; 310  : 			mp = World.Cube[i].Model.PolyPtr;

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 7
	mov	ecx, DWORD PTR ?World@@3UWORLD@@A+8
	mov	edx, DWORD PTR [ecx+eax+100]
	mov	DWORD PTR _mp$[ebp], edx

; 311  : 
; 312  : 			for (j = 0 ; j < World.Cube[i].Model.PolyNum ; j++) if (mp[j].Type & POLY_ENV)

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $L81405
$L81406:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$L81405:
	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 7
	mov	ecx, DWORD PTR ?World@@3UWORLD@@A+8
	movsx	edx, WORD PTR [ecx+eax+72]
	cmp	DWORD PTR _j$[ebp], edx
	jge	$L81407
	mov	eax, DWORD PTR _j$[ebp]
	imul	eax, 80					; 00000050H
	mov	ecx, DWORD PTR _mp$[ebp]
	movsx	edx, WORD PTR [ecx+eax]
	and	edx, 2048				; 00000800H
	je	$L81408

; 313  : 			{
; 314  : 				vert2 = &mp[j].v0;

	mov	eax, DWORD PTR _j$[ebp]
	imul	eax, 80					; 00000050H
	mov	ecx, DWORD PTR _mp$[ebp]
	lea	edx, DWORD PTR [ecx+eax+64]
	mov	DWORD PTR _vert2$[ebp], edx

; 315  : 				for (k = 0 ; k < 3 + (mp[j].Type & 1) ; k++)

	mov	DWORD PTR _k$[ebp], 0
	jmp	SHORT $L81409
$L81410:
	mov	eax, DWORD PTR _k$[ebp]
	add	eax, 1
	mov	DWORD PTR _k$[ebp], eax
$L81409:
	mov	eax, DWORD PTR _j$[ebp]
	imul	eax, 80					; 00000050H
	mov	ecx, DWORD PTR _mp$[ebp]
	movsx	edx, WORD PTR [ecx+eax]
	and	edx, 1
	add	edx, 3
	cmp	DWORD PTR _k$[ebp], edx
	jge	$L81408

; 316  : 				{
; 317  : 					for (l = 0 ; l < World.Cube[i].Model.EnvVertNum ; l++)

	mov	DWORD PTR _l$[ebp], 0
	jmp	SHORT $L81412
$L81413:
	mov	eax, DWORD PTR _l$[ebp]
	add	eax, 1
	mov	DWORD PTR _l$[ebp], eax
$L81412:
	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 7
	mov	ecx, DWORD PTR ?World@@3UWORLD@@A+8
	movsx	edx, WORD PTR [ecx+eax+98]
	cmp	DWORD PTR _l$[ebp], edx
	jge	SHORT $L81414

; 318  : 					{
; 319  : 						if (vert[l] == vert2[k])

	mov	eax, DWORD PTR _l$[ebp]
	mov	ecx, DWORD PTR _vert$[ebp]
	mov	edx, DWORD PTR _k$[ebp]
	mov	esi, DWORD PTR _vert2$[ebp]
	mov	eax, DWORD PTR [ecx+eax*4]
	cmp	eax, DWORD PTR [esi+edx*4]
	jne	SHORT $L81415

; 320  : 							break;

	jmp	SHORT $L81414
$L81415:

; 321  : 					}

	jmp	SHORT $L81413
$L81414:

; 322  : 					if (l == World.Cube[i].Model.EnvVertNum)

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 7
	mov	ecx, DWORD PTR ?World@@3UWORLD@@A+8
	movsx	edx, WORD PTR [ecx+eax+98]
	cmp	DWORD PTR _l$[ebp], edx
	jne	SHORT $L81416

; 323  : 					{
; 324  : 						vert[l] = vert2[k];

	mov	eax, DWORD PTR _l$[ebp]
	mov	ecx, DWORD PTR _vert$[ebp]
	mov	edx, DWORD PTR _k$[ebp]
	mov	esi, DWORD PTR _vert2$[ebp]
	mov	edx, DWORD PTR [esi+edx*4]
	mov	DWORD PTR [ecx+eax*4], edx

; 325  : 						World.Cube[i].Model.EnvVertNum++;

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 7
	mov	ecx, DWORD PTR ?World@@3UWORLD@@A+8
	mov	dx, WORD PTR [ecx+eax+98]
	add	dx, 1
	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 7
	mov	ecx, DWORD PTR ?World@@3UWORLD@@A+8
	mov	WORD PTR [ecx+eax+98], dx
$L81416:

; 326  : 					}
; 327  : 				}

	jmp	$L81410
$L81408:

; 328  : 			}
; 329  : 
; 330  : 			if (World.Cube[i].Model.EnvVertNum)

	jmp	$L81406
$L81407:
	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 7
	mov	ecx, DWORD PTR ?World@@3UWORLD@@A+8
	movsx	edx, WORD PTR [ecx+eax+98]
	test	edx, edx
	je	$L81417

; 331  : 			{
; 332  : 				World.Cube[i].Model.EnvVertPtr = (WORLD_VERTEX**)malloc(sizeof(WORLD_VERTEX*) * World.Cube[i].Model.EnvVertNum);

	push	OFFSET FLAT:??_C@_0IK@HDNGGFNG@c?3?2documents?5and?5settings?2jarhea@
	mov	eax, DWORD PTR ?__LINE__Var@?1??LoadWorld@@YA_NPAD@Z@4JA
	add	eax, 293				; 00000125H
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	shl	ecx, 7
	mov	edx, DWORD PTR ?World@@3UWORLD@@A+8
	movsx	eax, WORD PTR [edx+ecx+98]
	shl	eax, 2
	push	eax
	call	?DebugMalloc@@YAPAXIHPAD@Z		; DebugMalloc
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _i$[ebp]
	shl	ecx, 7
	mov	edx, DWORD PTR ?World@@3UWORLD@@A+8
	mov	DWORD PTR [edx+ecx+120], eax

; 333  : 				if (!World.Cube[i].Model.EnvVertPtr) World.Cube[i].Model.EnvVertNum = 0;

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 7
	mov	ecx, DWORD PTR ?World@@3UWORLD@@A+8
	cmp	DWORD PTR [ecx+eax+120], 0
	jne	SHORT $L81420
	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 7
	mov	ecx, DWORD PTR ?World@@3UWORLD@@A+8
	mov	WORD PTR [ecx+eax+98], 0

; 334  : 				else memcpy(World.Cube[i].Model.EnvVertPtr, vert, sizeof(WORLD_VERTEX*) * World.Cube[i].Model.EnvVertNum);

	jmp	SHORT $L81417
$L81420:
	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 7
	mov	ecx, DWORD PTR ?World@@3UWORLD@@A+8
	movsx	edx, WORD PTR [ecx+eax+98]
	shl	edx, 2
	push	edx
	mov	eax, DWORD PTR _vert$[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	shl	ecx, 7
	mov	edx, DWORD PTR ?World@@3UWORLD@@A+8
	mov	eax, DWORD PTR [edx+ecx+120]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
$L81417:

; 335  : 			}
; 336  : 
; 337  : 			free(vert);

	push	OFFSET FLAT:??_C@_0IK@HDNGGFNG@c?3?2documents?5and?5settings?2jarhea@
	mov	eax, DWORD PTR ?__LINE__Var@?1??LoadWorld@@YA_NPAD@Z@4JA
	add	eax, 298				; 0000012aH
	push	eax
	mov	ecx, DWORD PTR _vert$[ebp]
	push	ecx
	call	?DebugFree@@YAXPAXHPAD@Z		; DebugFree
	add	esp, 12					; 0000000cH
$L81404:

; 338  : 		}
; 339  : 	}

	jmp	$L81318
$L81319:

; 340  : 
; 341  : // PSX warning
; 342  : 
; 343  : 	if (maxrad > 32767)

	fld	DWORD PTR _maxrad$[ebp]
	fcomp	DWORD PTR __real@46fffe00
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $L81423

; 344  : 	{
; 345  : 		wsprintf(buff, "'%s' is not PSX friendly by %ld pixels!", file, (long)maxrad - 32767);

	fld	DWORD PTR _maxrad$[ebp]
	call	__ftol2
	sub	eax, 32767				; 00007fffH
	push	eax
	mov	eax, DWORD PTR _file$[ebp]
	push	eax
	push	OFFSET FLAT:??_C@_0CI@MPLBNIHO@?8?$CFs?8?5is?5not?5PSX?5friendly?5by?5?$CFld?5@
	lea	ecx, DWORD PTR _buff$[ebp]
	push	ecx
	call	DWORD PTR __imp__wsprintfA
	add	esp, 16					; 00000010H

; 346  : 		Box("Warning!", buff, MB_OK);

	push	0
	lea	eax, DWORD PTR _buff$[ebp]
	push	eax
	push	OFFSET FLAT:??_C@_08NEFBJFKJ@Warning?$CB?$AA@
	call	?Box@@YAJPAD0J@Z			; Box
	add	esp, 12					; 0000000cH
$L81423:

; 347  : 	}
; 348  : 
; 349  : // get big cube header, alloc big cube header memory
; 350  : 
; 351  : 	if (!fread(&wh, sizeof(wh), 1, fp))

	mov	eax, DWORD PTR _fp$[ebp]
	push	eax
	push	1
	push	4
	lea	ecx, DWORD PTR _wh$[ebp]
	push	ecx
	call	_fread
	add	esp, 16					; 00000010H
	test	eax, eax
	jne	SHORT $L81427

; 352  : 	{
; 353  : 		Box("ERROR", "World file has no big cube info!", MB_OK);

	push	0
	push	OFFSET FLAT:??_C@_0CB@DMHCIOCH@World?5file?5has?5no?5big?5cube?5info?$CB@
	push	OFFSET FLAT:??_C@_05MBDEGLCK@ERROR?$AA@
	call	?Box@@YAJPAD0J@Z			; Box
	add	esp, 12					; 0000000cH

; 354  : 		QuitGame = TRUE;

	mov	BYTE PTR ?QuitGame@@3DA, 1		; QuitGame

; 355  : 		return FALSE;

	xor	al, al
	jmp	$L81283
$L81427:

; 356  : 	}
; 357  : 
; 358  : 	World.BigCubeNum = wh.CubeNum;

	mov	eax, DWORD PTR _wh$[ebp]
	mov	DWORD PTR ?World@@3UWORLD@@A+4, eax

; 359  : 	World.BigCube = (BIG_CUBE_HEADER*)malloc(World.BigCubeNum * sizeof(BIG_CUBE_HEADER));

	push	OFFSET FLAT:??_C@_0IK@HDNGGFNG@c?3?2documents?5and?5settings?2jarhea@
	mov	eax, DWORD PTR ?__LINE__Var@?1??LoadWorld@@YA_NPAD@Z@4JA
	add	eax, 320				; 00000140H
	push	eax
	mov	ecx, DWORD PTR ?World@@3UWORLD@@A+4
	imul	ecx, 24					; 00000018H
	push	ecx
	call	?DebugMalloc@@YAPAXIHPAD@Z		; DebugMalloc
	add	esp, 12					; 0000000cH
	mov	DWORD PTR ?World@@3UWORLD@@A+16, eax

; 360  : 	if (!World.BigCube)

	cmp	DWORD PTR ?World@@3UWORLD@@A+16, 0
	jne	SHORT $L81431

; 361  : 	{
; 362  : 		Box("ERROR", "Can't alloc memory for world big cubes!", MB_OK);

	push	0
	push	OFFSET FLAT:??_C@_0CI@IIKBFFCJ@Can?8t?5alloc?5memory?5for?5world?5big@
	push	OFFSET FLAT:??_C@_05MBDEGLCK@ERROR?$AA@
	call	?Box@@YAJPAD0J@Z			; Box
	add	esp, 12					; 0000000cH

; 363  : 		QuitGame = TRUE;

	mov	BYTE PTR ?QuitGame@@3DA, 1		; QuitGame

; 364  : 		return FALSE;

	xor	al, al
	jmp	$L81283
$L81431:

; 365  : 	}
; 366  : 
; 367  : // loop thru each big cube
; 368  : 
; 369  : 	for (i = 0 ; i < World.BigCubeNum ; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $L81433
$L81434:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$L81433:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR ?World@@3UWORLD@@A+4
	jge	$L81435

; 370  : 	{
; 371  : 
; 372  : // setup header
; 373  : 
; 374  : 		fread(&bchl, sizeof(bchl), 1, fp);

	mov	eax, DWORD PTR _fp$[ebp]
	push	eax
	push	1
	push	20					; 00000014H
	lea	ecx, DWORD PTR _bchl$[ebp]
	push	ecx
	call	_fread
	add	esp, 16					; 00000010H

; 375  : 
; 376  : 		World.BigCube[i].x = bchl.x;

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 24					; 00000018H
	mov	ecx, DWORD PTR ?World@@3UWORLD@@A+16
	mov	edx, DWORD PTR _bchl$[ebp]
	mov	DWORD PTR [ecx+eax], edx

; 377  : 		World.BigCube[i].y = bchl.y;

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 24					; 00000018H
	mov	ecx, DWORD PTR ?World@@3UWORLD@@A+16
	mov	edx, DWORD PTR _bchl$[ebp+4]
	mov	DWORD PTR [ecx+eax+4], edx

; 378  : 		World.BigCube[i].z = bchl.z;

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 24					; 00000018H
	mov	ecx, DWORD PTR ?World@@3UWORLD@@A+16
	mov	edx, DWORD PTR _bchl$[ebp+8]
	mov	DWORD PTR [ecx+eax+8], edx

; 379  : 		World.BigCube[i].Radius = bchl.Radius;

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 24					; 00000018H
	mov	ecx, DWORD PTR ?World@@3UWORLD@@A+16
	mov	edx, DWORD PTR _bchl$[ebp+12]
	mov	DWORD PTR [ecx+eax+12], edx

; 380  : 		World.BigCube[i].CubeNum = bchl.CubeNum;

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 24					; 00000018H
	mov	ecx, DWORD PTR ?World@@3UWORLD@@A+16
	mov	edx, DWORD PTR _bchl$[ebp+16]
	mov	DWORD PTR [ecx+eax+16], edx

; 381  : 
; 382  : // alloc memory for CUBE_HEADER pointers
; 383  : 
; 384  : 		World.BigCube[i].Cubes = (CUBE_HEADER**)malloc(sizeof(CUBE_HEADER*) * World.BigCube[i].CubeNum);

	push	OFFSET FLAT:??_C@_0IK@HDNGGFNG@c?3?2documents?5and?5settings?2jarhea@
	mov	eax, DWORD PTR ?__LINE__Var@?1??LoadWorld@@YA_NPAD@Z@4JA
	add	eax, 345				; 00000159H
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 24					; 00000018H
	mov	edx, DWORD PTR ?World@@3UWORLD@@A+16
	mov	eax, DWORD PTR [edx+ecx+16]
	shl	eax, 2
	push	eax
	call	?DebugMalloc@@YAPAXIHPAD@Z		; DebugMalloc
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 24					; 00000018H
	mov	edx, DWORD PTR ?World@@3UWORLD@@A+16
	mov	DWORD PTR [edx+ecx+20], eax

; 385  : 		if (!World.BigCube[i].Cubes)

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 24					; 00000018H
	mov	ecx, DWORD PTR ?World@@3UWORLD@@A+16
	cmp	DWORD PTR [ecx+eax+20], 0
	jne	SHORT $L81438

; 386  : 		{
; 387  : 			Box("ERROR", "Can't alloc memory for a cube list!", MB_OK);

	push	0
	push	OFFSET FLAT:??_C@_0CE@ONEFABNC@Can?8t?5alloc?5memory?5for?5a?5cube?5li@
	push	OFFSET FLAT:??_C@_05MBDEGLCK@ERROR?$AA@
	call	?Box@@YAJPAD0J@Z			; Box
	add	esp, 12					; 0000000cH

; 388  : 			return FALSE;

	xor	al, al
	jmp	$L81283
$L81438:

; 389  : 		}
; 390  : 
; 391  : // setup CUBE_HEADER pointers
; 392  : 
; 393  : 		for (j = 0 ; j < World.BigCube[i].CubeNum ; j++)

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $L81440
$L81441:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$L81440:
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 24					; 00000018H
	mov	ecx, DWORD PTR ?World@@3UWORLD@@A+16
	mov	edx, DWORD PTR _j$[ebp]
	cmp	edx, DWORD PTR [ecx+eax+16]
	jge	SHORT $L81442

; 394  : 		{
; 395  : 			fread(&idx, sizeof(idx), 1, fp);

	mov	eax, DWORD PTR _fp$[ebp]
	push	eax
	push	1
	push	4
	lea	ecx, DWORD PTR _idx$[ebp]
	push	ecx
	call	_fread
	add	esp, 16					; 00000010H

; 396  : 			World.BigCube[i].Cubes[j] = &World.Cube[idx];

	mov	eax, DWORD PTR _idx$[ebp]
	shl	eax, 7
	add	eax, DWORD PTR ?World@@3UWORLD@@A+8
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 24					; 00000018H
	mov	edx, DWORD PTR ?World@@3UWORLD@@A+16
	mov	ecx, DWORD PTR [edx+ecx+20]
	mov	edx, DWORD PTR _j$[ebp]
	mov	DWORD PTR [ecx+edx*4], eax

; 397  : 		}

	jmp	SHORT $L81441
$L81442:

; 398  : 	}

	jmp	$L81434
$L81435:

; 399  : 
; 400  : // alloc sort space
; 401  : 
; 402  : 	World.CubeList = (CUBE_HEADER**)malloc(sizeof(CUBE_HEADER*) * World.CubeNum);

	push	OFFSET FLAT:??_C@_0IK@HDNGGFNG@c?3?2documents?5and?5settings?2jarhea@
	mov	eax, DWORD PTR ?__LINE__Var@?1??LoadWorld@@YA_NPAD@Z@4JA
	add	eax, 363				; 0000016bH
	push	eax
	mov	ecx, DWORD PTR ?World@@3UWORLD@@A
	shl	ecx, 2
	push	ecx
	call	?DebugMalloc@@YAPAXIHPAD@Z		; DebugMalloc
	add	esp, 12					; 0000000cH
	mov	DWORD PTR ?World@@3UWORLD@@A+12, eax

; 403  : 	if (!World.CubeList)

	cmp	DWORD PTR ?World@@3UWORLD@@A+12, 0
	jne	SHORT $L81445

; 404  : 	{
; 405  : 		Box(NULL, "Can't alloc memory for world cube list!", MB_OK);

	push	0
	push	OFFSET FLAT:??_C@_0CI@JIAHBCJ@Can?8t?5alloc?5memory?5for?5world?5cub@
	push	0
	call	?Box@@YAJPAD0J@Z			; Box
	add	esp, 12					; 0000000cH

; 406  : 		QuitGame = TRUE;

	mov	BYTE PTR ?QuitGame@@3DA, 1		; QuitGame

; 407  : 		return FALSE;

	xor	al, al
	jmp	$L81283
$L81445:

; 408  : 	}
; 409  : 
; 410  : // get texture anim num
; 411  : 
; 412  : 	if (!fread(&TexAnimNum, sizeof(TexAnimNum), 1, fp))

	mov	eax, DWORD PTR _fp$[ebp]
	push	eax
	push	1
	push	4
	push	OFFSET FLAT:?TexAnimNum@@3JA		; TexAnimNum
	call	_fread
	add	esp, 16					; 00000010H
	test	eax, eax
	jne	SHORT $L81447

; 413  : 	{
; 414  : 		TexAnimNum = 0;

	mov	DWORD PTR ?TexAnimNum@@3JA, 0		; TexAnimNum
$L81447:

; 415  : 	}
; 416  : 
; 417  : // load texture anims
; 418  : 
; 419  : 	for (i = 0 ; i < TexAnimNum ; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $L81448
$L81449:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$L81448:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR ?TexAnimNum@@3JA		; TexAnimNum
	jge	$L81450

; 420  : 	{
; 421  : 		fread(&TexAnim[i].FrameNum, sizeof(TexAnim[i].FrameNum), 1, fp);

	mov	eax, DWORD PTR _fp$[ebp]
	push	eax
	push	1
	push	4
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 20					; 00000014H
	add	ecx, OFFSET FLAT:?TexAnim@@3PAUTEXANIM_HEADER@@A+8
	push	ecx
	call	_fread
	add	esp, 16					; 00000010H

; 422  : 		TexAnim[i].Frame = (TEXANIM_FRAME*)malloc(sizeof(TEXANIM_FRAME) * TexAnim[i].FrameNum);

	push	OFFSET FLAT:??_C@_0IK@HDNGGFNG@c?3?2documents?5and?5settings?2jarhea@
	mov	eax, DWORD PTR ?__LINE__Var@?1??LoadWorld@@YA_NPAD@Z@4JA
	add	eax, 383				; 0000017fH
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 20					; 00000014H
	mov	edx, DWORD PTR ?TexAnim@@3PAUTEXANIM_HEADER@@A[ecx+8]
	imul	edx, 40					; 00000028H
	push	edx
	call	?DebugMalloc@@YAPAXIHPAD@Z		; DebugMalloc
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 20					; 00000014H
	mov	DWORD PTR ?TexAnim@@3PAUTEXANIM_HEADER@@A[ecx], eax

; 423  : 		if (!TexAnim[i].Frame)

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 20					; 00000014H
	cmp	DWORD PTR ?TexAnim@@3PAUTEXANIM_HEADER@@A[eax], 0
	jne	SHORT $L81453

; 424  : 		{
; 425  : 			Box(NULL, "Can't alloc memory for texture animation", MB_OK);

	push	0
	push	OFFSET FLAT:??_C@_0CJ@BFELLIBE@Can?8t?5alloc?5memory?5for?5texture?5a@
	push	0
	call	?Box@@YAJPAD0J@Z			; Box
	add	esp, 12					; 0000000cH

; 426  : 			TexAnimNum = 0;

	mov	DWORD PTR ?TexAnimNum@@3JA, 0		; TexAnimNum

; 427  : 			break;

	jmp	SHORT $L81450
$L81453:

; 428  : 		}
; 429  : 
; 430  : 		fread(TexAnim[i].Frame, sizeof(TEXANIM_FRAME), TexAnim[i].FrameNum, fp);

	mov	eax, DWORD PTR _fp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 20					; 00000014H
	mov	edx, DWORD PTR ?TexAnim@@3PAUTEXANIM_HEADER@@A[ecx+8]
	push	edx
	push	40					; 00000028H
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 20					; 00000014H
	mov	ecx, DWORD PTR ?TexAnim@@3PAUTEXANIM_HEADER@@A[eax]
	push	ecx
	call	_fread
	add	esp, 16					; 00000010H

; 431  : 
; 432  : 		TexAnim[i].FrameTime = 0;

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 20					; 00000014H
	mov	DWORD PTR ?TexAnim@@3PAUTEXANIM_HEADER@@A[eax+16], 0

; 433  : 		TexAnim[i].CurrentFrameNum = 0;

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 20					; 00000014H
	mov	DWORD PTR ?TexAnim@@3PAUTEXANIM_HEADER@@A[eax+12], 0

; 434  : 		TexAnim[i].CurrentFrame = TexAnim[i].Frame;

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 20					; 00000014H
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 20					; 00000014H
	mov	edx, DWORD PTR ?TexAnim@@3PAUTEXANIM_HEADER@@A[eax]
	mov	DWORD PTR ?TexAnim@@3PAUTEXANIM_HEADER@@A[ecx+4], edx

; 435  : 	}

	jmp	$L81449
$L81450:

; 436  : 
; 437  : // load env rgb's
; 438  : 
; 439  : 	for (i = 0 ; i < World.CubeNum ; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $L81456
$L81457:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$L81456:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR ?World@@3UWORLD@@A
	jge	$L81458

; 440  : 	{
; 441  : 		mp = World.Cube[i].Model.PolyPtr;

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 7
	mov	ecx, DWORD PTR ?World@@3UWORLD@@A+8
	mov	edx, DWORD PTR [ecx+eax+100]
	mov	DWORD PTR _mp$[ebp], edx

; 442  : 		for (j = 0 ; j < World.Cube[i].Model.PolyNum ; j++, mp++) if (mp->Type & POLY_ENV)

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $L81459
$L81460:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
	mov	ecx, DWORD PTR _mp$[ebp]
	add	ecx, 80					; 00000050H
	mov	DWORD PTR _mp$[ebp], ecx
$L81459:
	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 7
	mov	ecx, DWORD PTR ?World@@3UWORLD@@A+8
	movsx	edx, WORD PTR [ecx+eax+72]
	cmp	DWORD PTR _j$[ebp], edx
	jge	SHORT $L81461
	mov	eax, DWORD PTR _mp$[ebp]
	movsx	ecx, WORD PTR [eax]
	and	ecx, 2048				; 00000800H
	je	SHORT $L81462

; 443  : 		{
; 444  : 			fread(&rgb, sizeof(long), 1, fp);

	mov	eax, DWORD PTR _fp$[ebp]
	push	eax
	push	1
	push	4
	lea	ecx, DWORD PTR _rgb$[ebp]
	push	ecx
	call	_fread
	add	esp, 16					; 00000010H

; 445  : 
; 446  : 			mp->v0->EnvRGB = rgb;

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	mov	edx, DWORD PTR _rgb$[ebp]
	mov	DWORD PTR [ecx+80], edx

; 447  : 			mp->v1->EnvRGB = rgb;

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	mov	edx, DWORD PTR _rgb$[ebp]
	mov	DWORD PTR [ecx+80], edx

; 448  : 			mp->v2->EnvRGB = rgb;

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	mov	edx, DWORD PTR _rgb$[ebp]
	mov	DWORD PTR [ecx+80], edx

; 449  : 
; 450  : 			if (mp->Type & POLY_QUAD)

	mov	eax, DWORD PTR _mp$[ebp]
	movsx	ecx, WORD PTR [eax]
	and	ecx, 1
	je	SHORT $L81462

; 451  : 				mp->v3->EnvRGB = rgb;

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	mov	edx, DWORD PTR _rgb$[ebp]
	mov	DWORD PTR [ecx+80], edx
$L81462:

; 452  : 		}
; 453  : 	}

	jmp	$L81460
$L81461:
	jmp	$L81457
$L81458:

; 454  : 
; 455  : // close file
; 456  : 
; 457  : 	fclose(fp);

	mov	eax, DWORD PTR _fp$[ebp]
	push	eax
	call	_fclose
	add	esp, 4

; 458  : 
; 459  : // return OK
; 460  : 
; 461  : 	return TRUE;

	mov	al, 1
$L81283:

; 462  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?LoadWorld@@YA_NPAD@Z ENDP				; LoadWorld
_TEXT	ENDS
PUBLIC	_sqrtf
; Function compile flags: /Odt /ZI
; File c:\program files\microsoft visual studio .net 2003\vc7\include\math.h
;	COMDAT ?sqrt@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?sqrt@@YAMM@Z PROC NEAR					; sqrt, COMDAT

; 579  :         {return (sqrtf(_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR __X$[ebp]
	push	eax
	call	_sqrtf
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?sqrt@@YAMM@Z ENDP					; sqrt
_TEXT	ENDS
EXTRN	_sqrt:NEAR
; Function compile flags: /Odt /ZI
;	COMDAT _sqrtf
_TEXT	SEGMENT
tv70 = -68						; size = 4
__X$ = 8						; size = 4
_sqrtf	PROC NEAR					; COMDAT

; 470  :         {return ((float)sqrt((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	fld	DWORD PTR __X$[ebp]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	call	_sqrt
	add	esp, 8
	fst	DWORD PTR tv70[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_sqrtf	ENDP
_TEXT	ENDS
PUBLIC	?FreeWorld@@YAXXZ				; FreeWorld
PUBLIC	?__LINE__Var@?1??FreeWorld@@YAXXZ@4JA		; `FreeWorld'::`2'::__LINE__Var
;	COMDAT ?__LINE__Var@?1??FreeWorld@@YAXXZ@4JA
; File c:\documents and settings\jarhead\desktop\shit to display my love for xbox revolt and fuck you borman-ness\revolt source\source\world.cpp
_DATA	SEGMENT
?__LINE__Var@?1??FreeWorld@@YAXXZ@4JA DD 01d5H		; `FreeWorld'::`2'::__LINE__Var
; Function compile flags: /Odt /ZI
_DATA	ENDS
;	COMDAT ?FreeWorld@@YAXXZ
_TEXT	SEGMENT
_i$ = -4						; size = 4
?FreeWorld@@YAXXZ PROC NEAR				; FreeWorld, COMDAT

; 469  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 470  : 	long i;
; 471  : 
; 472  : 	for (i = 0 ; i < World.CubeNum ; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $L81469
$L81470:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$L81469:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR ?World@@3UWORLD@@A
	jge	$L81471

; 473  : 	{
; 474  : 		free(World.Cube[i].Model.AllocPtr);

	push	OFFSET FLAT:??_C@_0IK@HDNGGFNG@c?3?2documents?5and?5settings?2jarhea@
	mov	eax, DWORD PTR ?__LINE__Var@?1??FreeWorld@@YAXXZ@4JA
	add	eax, 5
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	shl	ecx, 7
	mov	edx, DWORD PTR ?World@@3UWORLD@@A+8
	mov	eax, DWORD PTR [edx+ecx+68]
	push	eax
	call	?DebugFree@@YAXPAXHPAD@Z		; DebugFree
	add	esp, 12					; 0000000cH

; 475  : 		free(World.Cube[i].Model.MirrorPolyPtr);

	push	OFFSET FLAT:??_C@_0IK@HDNGGFNG@c?3?2documents?5and?5settings?2jarhea@
	mov	eax, DWORD PTR ?__LINE__Var@?1??FreeWorld@@YAXXZ@4JA
	add	eax, 6
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	shl	ecx, 7
	mov	edx, DWORD PTR ?World@@3UWORLD@@A+8
	mov	eax, DWORD PTR [edx+ecx+108]
	push	eax
	call	?DebugFree@@YAXPAXHPAD@Z		; DebugFree
	add	esp, 12					; 0000000cH

; 476  : 		free(World.Cube[i].Model.AnimPolyPtr);

	push	OFFSET FLAT:??_C@_0IK@HDNGGFNG@c?3?2documents?5and?5settings?2jarhea@
	mov	eax, DWORD PTR ?__LINE__Var@?1??FreeWorld@@YAXXZ@4JA
	add	eax, 7
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	shl	ecx, 7
	mov	edx, DWORD PTR ?World@@3UWORLD@@A+8
	mov	eax, DWORD PTR [edx+ecx+116]
	push	eax
	call	?DebugFree@@YAXPAXHPAD@Z		; DebugFree
	add	esp, 12					; 0000000cH

; 477  : 		free(World.Cube[i].Model.EnvVertPtr);

	push	OFFSET FLAT:??_C@_0IK@HDNGGFNG@c?3?2documents?5and?5settings?2jarhea@
	mov	eax, DWORD PTR ?__LINE__Var@?1??FreeWorld@@YAXXZ@4JA
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	shl	ecx, 7
	mov	edx, DWORD PTR ?World@@3UWORLD@@A+8
	mov	eax, DWORD PTR [edx+ecx+120]
	push	eax
	call	?DebugFree@@YAXPAXHPAD@Z		; DebugFree
	add	esp, 12					; 0000000cH

; 478  : 	}

	jmp	$L81470
$L81471:

; 479  : 
; 480  : 	for (i = 0 ; i < World.BigCubeNum ; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $L81473
$L81474:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$L81473:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR ?World@@3UWORLD@@A+4
	jge	SHORT $L81475

; 481  : 		free(World.BigCube[i].Cubes);

	push	OFFSET FLAT:??_C@_0IK@HDNGGFNG@c?3?2documents?5and?5settings?2jarhea@
	mov	eax, DWORD PTR ?__LINE__Var@?1??FreeWorld@@YAXXZ@4JA
	add	eax, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 24					; 00000018H
	mov	edx, DWORD PTR ?World@@3UWORLD@@A+16
	mov	eax, DWORD PTR [edx+ecx+20]
	push	eax
	call	?DebugFree@@YAXPAXHPAD@Z		; DebugFree
	add	esp, 12					; 0000000cH
	jmp	SHORT $L81474
$L81475:

; 482  : 
; 483  : 	free(World.Cube);

	push	OFFSET FLAT:??_C@_0IK@HDNGGFNG@c?3?2documents?5and?5settings?2jarhea@
	mov	eax, DWORD PTR ?__LINE__Var@?1??FreeWorld@@YAXXZ@4JA
	add	eax, 14					; 0000000eH
	push	eax
	mov	ecx, DWORD PTR ?World@@3UWORLD@@A+8
	push	ecx
	call	?DebugFree@@YAXPAXHPAD@Z		; DebugFree
	add	esp, 12					; 0000000cH

; 484  : 	free(World.BigCube);

	push	OFFSET FLAT:??_C@_0IK@HDNGGFNG@c?3?2documents?5and?5settings?2jarhea@
	mov	eax, DWORD PTR ?__LINE__Var@?1??FreeWorld@@YAXXZ@4JA
	add	eax, 15					; 0000000fH
	push	eax
	mov	ecx, DWORD PTR ?World@@3UWORLD@@A+16
	push	ecx
	call	?DebugFree@@YAXPAXHPAD@Z		; DebugFree
	add	esp, 12					; 0000000cH

; 485  : 	free(World.CubeList);

	push	OFFSET FLAT:??_C@_0IK@HDNGGFNG@c?3?2documents?5and?5settings?2jarhea@
	mov	eax, DWORD PTR ?__LINE__Var@?1??FreeWorld@@YAXXZ@4JA
	add	eax, 16					; 00000010H
	push	eax
	mov	ecx, DWORD PTR ?World@@3UWORLD@@A+12
	push	ecx
	call	?DebugFree@@YAXPAXHPAD@Z		; DebugFree
	add	esp, 12					; 0000000cH

; 486  : 
; 487  : 	for (i = 0 ; i < TexAnimNum ; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $L81476
$L81477:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$L81476:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR ?TexAnimNum@@3JA		; TexAnimNum
	jge	SHORT $L81467

; 488  : 		free(TexAnim[i].Frame);

	push	OFFSET FLAT:??_C@_0IK@HDNGGFNG@c?3?2documents?5and?5settings?2jarhea@
	mov	eax, DWORD PTR ?__LINE__Var@?1??FreeWorld@@YAXXZ@4JA
	add	eax, 19					; 00000013H
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 20					; 00000014H
	mov	edx, DWORD PTR ?TexAnim@@3PAUTEXANIM_HEADER@@A[ecx]
	push	edx
	call	?DebugFree@@YAXPAXHPAD@Z		; DebugFree
	add	esp, 12					; 0000000cH
	jmp	SHORT $L81477
$L81467:

; 489  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?FreeWorld@@YAXXZ ENDP					; FreeWorld
_TEXT	ENDS
PUBLIC	?MirrorWorldPolys@@YAXXZ			; MirrorWorldPolys
PUBLIC	?__LINE__Var@?1??MirrorWorldPolys@@YAXXZ@4JA	; `MirrorWorldPolys'::`2'::__LINE__Var
PUBLIC	__real@40000000
EXTRN	?MirrorPlaneNum@@3JA:DWORD			; MirrorPlaneNum
EXTRN	?MirrorPlanes@@3PAUMIRROR_PLANE@@A:DWORD	; MirrorPlanes
EXTRN	?MirrorMul@@3MA:DWORD				; MirrorMul
EXTRN	?MirrorAdd@@3MA:DWORD				; MirrorAdd
EXTRN	?MirrorDist@@3MA:DWORD				; MirrorDist
;	COMDAT ?__LINE__Var@?1??MirrorWorldPolys@@YAXXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?1??MirrorWorldPolys@@YAXXZ@4JA DD 01f0H	; `MirrorWorldPolys'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
; Function compile flags: /Odt /ZI
CONST	ENDS
;	COMDAT ?MirrorWorldPolys@@YAXXZ
_TEXT	SEGMENT
_plane$ = -72						; size = 4
_mplane$ = -68						; size = 4
_mv$ = -64						; size = 4
_mverts$ = -60						; size = 4
_mpolys$ = -56						; size = 4
_v$ = -52						; size = 4
_p$ = -48						; size = 4
_cube$ = -44						; size = 4
_offset$ = -40						; size = 4
_size$ = -36						; size = 4
_flag$ = -32						; size = 4
_vnum$ = -28						; size = 4
_l$ = -24						; size = 4
_k$ = -20						; size = 4
_j$ = -16						; size = 4
_i$ = -12						; size = 4
_mvertnum$ = -8						; size = 2
_mpolynum$ = -4						; size = 2
?MirrorWorldPolys@@YAXXZ PROC NEAR			; MirrorWorldPolys, COMDAT

; 496  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 136				; 00000088H
	push	ebx
	push	esi
	push	edi

; 497  : 	short mpolynum, mvertnum;
; 498  : 	long i, j, k, l, vnum, flag, size, offset;
; 499  : 	CUBE_HEADER *cube;
; 500  : 	WORLD_POLY *p;
; 501  : 	WORLD_VERTEX **v;
; 502  : 	WORLD_MIRROR_POLY *mpolys;
; 503  : 	WORLD_MIRROR_VERTEX *mverts, **mv;
; 504  : 	MIRROR_PLANE *mplane, *plane;
; 505  : 
; 506  : // loop thru all world cubes
; 507  : 
; 508  : 	cube = World.Cube;

	mov	eax, DWORD PTR ?World@@3UWORLD@@A+8
	mov	DWORD PTR _cube$[ebp], eax

; 509  : 	for (i = 0 ; i < World.CubeNum ; i++, cube++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $L81500
$L81501:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	mov	ecx, DWORD PTR _cube$[ebp]
	add	ecx, 128				; 00000080H
	mov	DWORD PTR _cube$[ebp], ecx
$L81500:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR ?World@@3UWORLD@@A
	jge	$L81481

; 510  : 	{
; 511  : 
; 512  : // zero misc
; 513  : 
; 514  : 		cube->Model.MirrorPolyNum = 0;

	mov	eax, DWORD PTR _cube$[ebp]
	mov	WORD PTR [eax+84], 0

; 515  : 		cube->Model.MirrorVertNum = 0;

	mov	eax, DWORD PTR _cube$[ebp]
	mov	WORD PTR [eax+86], 0

; 516  : 
; 517  : 		cube->Model.MirrorQuadNumTex = 0;

	mov	eax, DWORD PTR _cube$[ebp]
	mov	WORD PTR [eax+88], 0

; 518  : 		cube->Model.MirrorTriNumTex = 0;

	mov	eax, DWORD PTR _cube$[ebp]
	mov	WORD PTR [eax+90], 0

; 519  : 		cube->Model.MirrorQuadNumRGB = 0;

	mov	eax, DWORD PTR _cube$[ebp]
	mov	WORD PTR [eax+92], 0

; 520  : 		cube->Model.MirrorTriNumRGB = 0;

	mov	eax, DWORD PTR _cube$[ebp]
	mov	WORD PTR [eax+94], 0

; 521  : 
; 522  : 		cube->Model.MirrorPolyPtr = NULL;

	mov	eax, DWORD PTR _cube$[ebp]
	mov	DWORD PTR [eax+108], 0

; 523  : 
; 524  : 		cube->MirrorHeight = -99999;

	mov	eax, DWORD PTR _cube$[ebp]
	mov	DWORD PTR [eax+64], -943501440		; c7c34f80H

; 525  : 
; 526  : // skip if no planes
; 527  : 
; 528  : 		if (!MirrorPlaneNum)

	cmp	DWORD PTR ?MirrorPlaneNum@@3JA, 0	; MirrorPlaneNum
	jne	SHORT $L81503

; 529  : 			continue;

	jmp	SHORT $L81501
$L81503:

; 530  : 
; 531  : // alloc max polys + verts
; 532  : 
; 533  : 		mpolys = (WORLD_MIRROR_POLY*)malloc(sizeof(WORLD_MIRROR_POLY) * cube->Model.PolyNum);

	push	OFFSET FLAT:??_C@_0IK@HDNGGFNG@c?3?2documents?5and?5settings?2jarhea@
	mov	eax, DWORD PTR ?__LINE__Var@?1??MirrorWorldPolys@@YAXXZ@4JA
	add	eax, 37					; 00000025H
	push	eax
	mov	ecx, DWORD PTR _cube$[ebp]
	movsx	edx, WORD PTR [ecx+72]
	imul	edx, 80					; 00000050H
	push	edx
	call	?DebugMalloc@@YAPAXIHPAD@Z		; DebugMalloc
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _mpolys$[ebp], eax

; 534  : 		if (!mpolys)

	cmp	DWORD PTR _mpolys$[ebp], 0
	jne	SHORT $L81507

; 535  : 		{
; 536  : 			continue;

	jmp	$L81501
$L81507:

; 537  : 		}
; 538  : 		mverts = (WORLD_MIRROR_VERTEX*)malloc(sizeof(WORLD_MIRROR_VERTEX) * cube->Model.VertNum);

	push	OFFSET FLAT:??_C@_0IK@HDNGGFNG@c?3?2documents?5and?5settings?2jarhea@
	mov	eax, DWORD PTR ?__LINE__Var@?1??MirrorWorldPolys@@YAXXZ@4JA
	add	eax, 42					; 0000002aH
	push	eax
	mov	ecx, DWORD PTR _cube$[ebp]
	movsx	edx, WORD PTR [ecx+74]
	imul	edx, 56					; 00000038H
	push	edx
	call	?DebugMalloc@@YAPAXIHPAD@Z		; DebugMalloc
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _mverts$[ebp], eax

; 539  : 		if (!mverts)

	cmp	DWORD PTR _mverts$[ebp], 0
	jne	SHORT $L81510

; 540  : 		{
; 541  : 			free(mpolys);

	push	OFFSET FLAT:??_C@_0IK@HDNGGFNG@c?3?2documents?5and?5settings?2jarhea@
	mov	eax, DWORD PTR ?__LINE__Var@?1??MirrorWorldPolys@@YAXXZ@4JA
	add	eax, 45					; 0000002dH
	push	eax
	mov	ecx, DWORD PTR _mpolys$[ebp]
	push	ecx
	call	?DebugFree@@YAXPAXHPAD@Z		; DebugFree
	add	esp, 12					; 0000000cH

; 542  : 			continue;

	jmp	$L81501
$L81510:

; 543  : 		}
; 544  : 
; 545  : 		mpolynum = 0;

	mov	WORD PTR _mpolynum$[ebp], 0

; 546  : 		mvertnum = 0;

	mov	WORD PTR _mvertnum$[ebp], 0

; 547  : 
; 548  : // loop thru cube polys
; 549  : 
; 550  : 		p = cube->Model.PolyPtr;

	mov	eax, DWORD PTR _cube$[ebp]
	mov	ecx, DWORD PTR [eax+100]
	mov	DWORD PTR _p$[ebp], ecx

; 551  : 		for (j = 0 ; j < cube->Model.PolyNum ; j++, p++)

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $L81511
$L81512:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 80					; 00000050H
	mov	DWORD PTR _p$[ebp], ecx
$L81511:
	mov	eax, DWORD PTR _cube$[ebp]
	movsx	ecx, WORD PTR [eax+72]
	cmp	DWORD PTR _j$[ebp], ecx
	jge	$L81513

; 552  : 		{
; 553  : 
; 554  : // skip if a 'mirror' poly
; 555  : 
; 556  : 			if (p->Type & POLY_MIRROR) continue;

	mov	eax, DWORD PTR _p$[ebp]
	movsx	ecx, WORD PTR [eax]
	and	ecx, 128				; 00000080H
	je	SHORT $L81514
	jmp	SHORT $L81512
$L81514:

; 557  : 
; 558  : // loop thru poly verts checking for a valid reflection against each mirror plane
; 559  : 
; 560  : 			v = &p->v0;

	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 64					; 00000040H
	mov	DWORD PTR _v$[ebp], eax

; 561  : 			vnum = p->Type & POLY_QUAD ? 4 : 3;

	mov	eax, DWORD PTR _p$[ebp]
	movsx	ecx, WORD PTR [eax]
	and	ecx, 1
	neg	ecx
	sbb	ecx, ecx
	neg	ecx
	add	ecx, 3
	mov	DWORD PTR _vnum$[ebp], ecx

; 562  : 			plane = NULL;

	mov	DWORD PTR _plane$[ebp], 0

; 563  : 			mplane = MirrorPlanes;

	mov	eax, DWORD PTR ?MirrorPlanes@@3PAUMIRROR_PLANE@@A ; MirrorPlanes
	mov	DWORD PTR _mplane$[ebp], eax

; 564  : 
; 565  : 			for (l = 0 ; l < MirrorPlaneNum ; l++, mplane++)

	mov	DWORD PTR _l$[ebp], 0
	jmp	SHORT $L81515
$L81516:
	mov	eax, DWORD PTR _l$[ebp]
	add	eax, 1
	mov	DWORD PTR _l$[ebp], eax
	mov	ecx, DWORD PTR _mplane$[ebp]
	add	ecx, 20					; 00000014H
	mov	DWORD PTR _mplane$[ebp], ecx
$L81515:
	mov	eax, DWORD PTR _l$[ebp]
	cmp	eax, DWORD PTR ?MirrorPlaneNum@@3JA	; MirrorPlaneNum
	jge	$L81517

; 566  : 			{
; 567  : 				for (k = 0 ; k < vnum ; k++)

	mov	DWORD PTR _k$[ebp], 0
	jmp	SHORT $L81518
$L81519:
	mov	eax, DWORD PTR _k$[ebp]
	add	eax, 1
	mov	DWORD PTR _k$[ebp], eax
$L81518:
	mov	eax, DWORD PTR _k$[ebp]
	cmp	eax, DWORD PTR _vnum$[ebp]
	jge	$L81520

; 568  : 				{
; 569  : 					if (v[k]->y < mplane->Height + MIRROR_OVERLAP_TOL && v[k]->y > mplane->Height - MirrorDist &&
; 570  : 						v[k]->x >= mplane->Xmin && v[k]->x <= mplane->Xmax &&
; 571  : 						v[k]->z >= mplane->Zmin && v[k]->z <= mplane->Zmax)

	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _mplane$[ebp]
	fld	DWORD PTR [eax+16]
	fadd	DWORD PTR __real@40000000
	fcomp	DWORD PTR [edx+4]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	$L81521
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _mplane$[ebp]
	fld	DWORD PTR [eax+16]
	fsub	DWORD PTR ?MirrorDist@@3MA		; MirrorDist
	fcomp	DWORD PTR [edx+4]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L81521
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _mplane$[ebp]
	fld	DWORD PTR [edx]
	fcomp	DWORD PTR [eax]
	fnstsw	ax
	test	ah, 1
	jne	SHORT $L81521
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _mplane$[ebp]
	fld	DWORD PTR [edx]
	fcomp	DWORD PTR [eax+4]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jp	SHORT $L81521
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _mplane$[ebp]
	fld	DWORD PTR [edx+8]
	fcomp	DWORD PTR [eax+8]
	fnstsw	ax
	test	ah, 1
	jne	SHORT $L81521
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _mplane$[ebp]
	fld	DWORD PTR [edx+8]
	fcomp	DWORD PTR [eax+12]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jp	SHORT $L81521

; 572  : 					{
; 573  : 						plane = mplane;

	mov	eax, DWORD PTR _mplane$[ebp]
	mov	DWORD PTR _plane$[ebp], eax

; 574  : 						break;

	jmp	SHORT $L81520
$L81521:

; 575  : 					}
; 576  : 				}

	jmp	$L81519
$L81520:

; 577  : 				if (plane) break;

	cmp	DWORD PTR _plane$[ebp], 0
	je	SHORT $L81522
	jmp	SHORT $L81517
$L81522:

; 578  : 			}

	jmp	$L81516
$L81517:

; 579  : 
; 580  : // check lowest vert if got a reflection
; 581  : 
; 582  : 			if (plane)

	cmp	DWORD PTR _plane$[ebp], 0
	je	SHORT $L81523

; 583  : 			{
; 584  : 				for (k = 0 ; k < vnum ; k++)

	mov	DWORD PTR _k$[ebp], 0
	jmp	SHORT $L81524
$L81525:
	mov	eax, DWORD PTR _k$[ebp]
	add	eax, 1
	mov	DWORD PTR _k$[ebp], eax
$L81524:
	mov	eax, DWORD PTR _k$[ebp]
	cmp	eax, DWORD PTR _vnum$[ebp]
	jge	SHORT $L81523

; 585  : 				{
; 586  : 					if (v[k]->y >= plane->Height + MIRROR_OVERLAP_TOL)

	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _plane$[ebp]
	fld	DWORD PTR [eax+16]
	fadd	DWORD PTR __real@40000000
	fcomp	DWORD PTR [edx+4]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jp	SHORT $L81527

; 587  : 					{
; 588  : 						plane = NULL;

	mov	DWORD PTR _plane$[ebp], 0

; 589  : 						break;

	jmp	SHORT $L81523
$L81527:

; 590  : 					}
; 591  : 				}

	jmp	SHORT $L81525
$L81523:

; 592  : 			}
; 593  : 
; 594  : // add mirror poly if any verts sucessfully mirrored
; 595  : 
; 596  : 			if (plane)

	cmp	DWORD PTR _plane$[ebp], 0
	je	$L81528

; 597  : 			{
; 598  : 
; 599  : // lowest mirror plane for this cube?
; 600  : 
; 601  : 				if (plane->Height > cube->MirrorHeight)

	mov	eax, DWORD PTR _plane$[ebp]
	mov	ecx, DWORD PTR _cube$[ebp]
	fld	DWORD PTR [eax+16]
	fcomp	DWORD PTR [ecx+64]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $L81529

; 602  : 					cube->MirrorHeight = plane->Height;

	mov	eax, DWORD PTR _cube$[ebp]
	mov	ecx, DWORD PTR _plane$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+64], edx
$L81529:

; 603  : 
; 604  : // loop thru each vertex
; 605  : 
; 606  : 				mv = &mpolys[mpolynum].v0;

	movsx	eax, WORD PTR _mpolynum$[ebp]
	imul	eax, 80					; 00000050H
	mov	ecx, DWORD PTR _mpolys$[ebp]
	lea	edx, DWORD PTR [ecx+eax+64]
	mov	DWORD PTR _mv$[ebp], edx

; 607  : 				for (k = 0 ; k < vnum ; k++)

	mov	DWORD PTR _k$[ebp], 0
	jmp	SHORT $L81530
$L81531:
	mov	eax, DWORD PTR _k$[ebp]
	add	eax, 1
	mov	DWORD PTR _k$[ebp], eax
$L81530:
	mov	eax, DWORD PTR _k$[ebp]
	cmp	eax, DWORD PTR _vnum$[ebp]
	jge	$L81532

; 608  : 				{
; 609  : 
; 610  : // look for existing mirrored vertex match
; 611  : 
; 612  : 					flag = FALSE;

	mov	DWORD PTR _flag$[ebp], 0

; 613  : 					for (l = 0 ; l < mvertnum ; l++)

	mov	DWORD PTR _l$[ebp], 0
	jmp	SHORT $L81533
$L81534:
	mov	eax, DWORD PTR _l$[ebp]
	add	eax, 1
	mov	DWORD PTR _l$[ebp], eax
$L81533:
	movsx	eax, WORD PTR _mvertnum$[ebp]
	cmp	DWORD PTR _l$[ebp], eax
	jge	SHORT $L81535

; 614  : 					{
; 615  : 						if (v[k] == mverts[l].RealVertex)

	mov	eax, DWORD PTR _l$[ebp]
	imul	eax, 56					; 00000038H
	mov	ecx, DWORD PTR _k$[ebp]
	mov	edx, DWORD PTR _v$[ebp]
	mov	esi, DWORD PTR _mverts$[ebp]
	mov	ecx, DWORD PTR [edx+ecx*4]
	cmp	ecx, DWORD PTR [esi+eax+52]
	jne	SHORT $L81536

; 616  : 						{
; 617  : 							mv[k] = &mverts[l];

	mov	eax, DWORD PTR _l$[ebp]
	imul	eax, 56					; 00000038H
	add	eax, DWORD PTR _mverts$[ebp]
	mov	ecx, DWORD PTR _k$[ebp]
	mov	edx, DWORD PTR _mv$[ebp]
	mov	DWORD PTR [edx+ecx*4], eax

; 618  : 							flag = TRUE;

	mov	DWORD PTR _flag$[ebp], 1

; 619  : 							break;

	jmp	SHORT $L81535
$L81536:

; 620  : 						}
; 621  : 					}

	jmp	SHORT $L81534
$L81535:

; 622  : 
; 623  : // no match, create new mirrored vertex
; 624  : 
; 625  : 					if (!flag)

	cmp	DWORD PTR _flag$[ebp], 0
	jne	$L81537

; 626  : 					{
; 627  : 						mverts[mvertnum].x = v[k]->x;

	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	movsx	eax, WORD PTR _mvertnum$[ebp]
	imul	eax, 56					; 00000038H
	mov	ecx, DWORD PTR _mverts$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	DWORD PTR [ecx+eax], edx

; 628  : 						mverts[mvertnum].y = plane->Height + (plane->Height - v[k]->y);

	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _plane$[ebp]
	fld	DWORD PTR [eax+16]
	fsub	DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _plane$[ebp]
	fadd	DWORD PTR [ecx+16]
	movsx	edx, WORD PTR _mvertnum$[ebp]
	imul	edx, 56					; 00000038H
	mov	eax, DWORD PTR _mverts$[ebp]
	fstp	DWORD PTR [eax+edx+4]

; 629  : 						mverts[mvertnum].z = v[k]->z;

	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	movsx	eax, WORD PTR _mvertnum$[ebp]
	imul	eax, 56					; 00000038H
	mov	ecx, DWORD PTR _mverts$[ebp]
	mov	edx, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+eax+8], edx

; 630  : 						mverts[mvertnum].VertFog = GET_MIRROR_FOG(mverts[mvertnum].y - plane->Height);

	movsx	eax, WORD PTR _mvertnum$[ebp]
	imul	eax, 56					; 00000038H
	mov	ecx, DWORD PTR _mverts$[ebp]
	mov	edx, DWORD PTR _plane$[ebp]
	fld	DWORD PTR [ecx+eax+4]
	fsub	DWORD PTR [edx+16]
	fmul	DWORD PTR ?MirrorMul@@3MA		; MirrorMul
	fadd	DWORD PTR ?MirrorAdd@@3MA		; MirrorAdd
	movsx	eax, WORD PTR _mvertnum$[ebp]
	imul	eax, 56					; 00000038H
	mov	ecx, DWORD PTR _mverts$[ebp]
	fstp	DWORD PTR [ecx+eax+40]

; 631  : 						mverts[mvertnum].RealVertex = v[k];

	movsx	eax, WORD PTR _mvertnum$[ebp]
	imul	eax, 56					; 00000038H
	mov	ecx, DWORD PTR _mverts$[ebp]
	mov	edx, DWORD PTR _k$[ebp]
	mov	esi, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [esi+edx*4]
	mov	DWORD PTR [ecx+eax+52], edx

; 632  : 						mv[k] = &mverts[mvertnum];

	movsx	eax, WORD PTR _mvertnum$[ebp]
	imul	eax, 56					; 00000038H
	add	eax, DWORD PTR _mverts$[ebp]
	mov	ecx, DWORD PTR _k$[ebp]
	mov	edx, DWORD PTR _mv$[ebp]
	mov	DWORD PTR [edx+ecx*4], eax

; 633  : 						mvertnum++;

	mov	ax, WORD PTR _mvertnum$[ebp]
	add	ax, 1
	mov	WORD PTR _mvertnum$[ebp], ax
$L81537:

; 634  : 					}
; 635  : 				}

	jmp	$L81531
$L81532:

; 636  : 
; 637  : // create mirrored poly
; 638  : 
; 639  : 				mpolys[mpolynum].Type = p->Type;

	movsx	eax, WORD PTR _mpolynum$[ebp]
	imul	eax, 80					; 00000050H
	mov	ecx, DWORD PTR _mpolys$[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	mov	dx, WORD PTR [edx]
	mov	WORD PTR [ecx+eax], dx

; 640  : 				mpolys[mpolynum].Tpage = p->Tpage;

	movsx	eax, WORD PTR _mpolynum$[ebp]
	imul	eax, 80					; 00000050H
	mov	ecx, DWORD PTR _mpolys$[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	mov	dx, WORD PTR [edx+2]
	mov	WORD PTR [ecx+eax+2], dx

; 641  : 				mpolys[mpolynum].VisiMask = p->VisiMask;

	movsx	eax, WORD PTR _mpolynum$[ebp]
	imul	eax, 80					; 00000050H
	mov	ecx, DWORD PTR _mpolys$[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	mov	esi, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+eax+8], esi
	mov	edx, DWORD PTR [edx+12]
	mov	DWORD PTR [ecx+eax+12], edx

; 642  : 				mpolys[mpolynum].rgb0 = p->rgb0;

	movsx	eax, WORD PTR _mpolynum$[ebp]
	imul	eax, 80					; 00000050H
	mov	ecx, DWORD PTR _mpolys$[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [edx+16]
	mov	DWORD PTR [ecx+eax+16], edx

; 643  : 				mpolys[mpolynum].rgb1 = p->rgb1;

	movsx	eax, WORD PTR _mpolynum$[ebp]
	imul	eax, 80					; 00000050H
	mov	ecx, DWORD PTR _mpolys$[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [edx+20]
	mov	DWORD PTR [ecx+eax+20], edx

; 644  : 				mpolys[mpolynum].rgb2 = p->rgb2;

	movsx	eax, WORD PTR _mpolynum$[ebp]
	imul	eax, 80					; 00000050H
	mov	ecx, DWORD PTR _mpolys$[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [edx+24]
	mov	DWORD PTR [ecx+eax+24], edx

; 645  : 				mpolys[mpolynum].rgb3 = p->rgb3;

	movsx	eax, WORD PTR _mpolynum$[ebp]
	imul	eax, 80					; 00000050H
	mov	ecx, DWORD PTR _mpolys$[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [edx+28]
	mov	DWORD PTR [ecx+eax+28], edx

; 646  : 				mpolys[mpolynum].tu0 = p->tu0;

	movsx	eax, WORD PTR _mpolynum$[ebp]
	imul	eax, 80					; 00000050H
	mov	ecx, DWORD PTR _mpolys$[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [edx+32]
	mov	DWORD PTR [ecx+eax+32], edx

; 647  : 				mpolys[mpolynum].tv0 = p->tv0;

	movsx	eax, WORD PTR _mpolynum$[ebp]
	imul	eax, 80					; 00000050H
	mov	ecx, DWORD PTR _mpolys$[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [edx+36]
	mov	DWORD PTR [ecx+eax+36], edx

; 648  : 				mpolys[mpolynum].tu1 = p->tu1;

	movsx	eax, WORD PTR _mpolynum$[ebp]
	imul	eax, 80					; 00000050H
	mov	ecx, DWORD PTR _mpolys$[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [edx+40]
	mov	DWORD PTR [ecx+eax+40], edx

; 649  : 				mpolys[mpolynum].tv1 = p->tv1;

	movsx	eax, WORD PTR _mpolynum$[ebp]
	imul	eax, 80					; 00000050H
	mov	ecx, DWORD PTR _mpolys$[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [edx+44]
	mov	DWORD PTR [ecx+eax+44], edx

; 650  : 				mpolys[mpolynum].tu2 = p->tu2;

	movsx	eax, WORD PTR _mpolynum$[ebp]
	imul	eax, 80					; 00000050H
	mov	ecx, DWORD PTR _mpolys$[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [edx+48]
	mov	DWORD PTR [ecx+eax+48], edx

; 651  : 				mpolys[mpolynum].tv2 = p->tv2;

	movsx	eax, WORD PTR _mpolynum$[ebp]
	imul	eax, 80					; 00000050H
	mov	ecx, DWORD PTR _mpolys$[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [edx+52]
	mov	DWORD PTR [ecx+eax+52], edx

; 652  : 				mpolys[mpolynum].tu3 = p->tu3;

	movsx	eax, WORD PTR _mpolynum$[ebp]
	imul	eax, 80					; 00000050H
	mov	ecx, DWORD PTR _mpolys$[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [edx+56]
	mov	DWORD PTR [ecx+eax+56], edx

; 653  : 				mpolys[mpolynum].tv3 = p->tv3;

	movsx	eax, WORD PTR _mpolynum$[ebp]
	imul	eax, 80					; 00000050H
	mov	ecx, DWORD PTR _mpolys$[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [edx+60]
	mov	DWORD PTR [ecx+eax+60], edx

; 654  : 				mpolynum++;

	mov	ax, WORD PTR _mpolynum$[ebp]
	add	ax, 1
	mov	WORD PTR _mpolynum$[ebp], ax
$L81528:

; 655  : 			}
; 656  : 		}

	jmp	$L81512
$L81513:

; 657  : 
; 658  : // alloc + copy mirrored verts + polys to real position
; 659  : 
; 660  : 		if (mpolynum)

	movsx	eax, WORD PTR _mpolynum$[ebp]
	test	eax, eax
	je	$L81538

; 661  : 		{
; 662  : 			size = sizeof(WORLD_MIRROR_POLY) * mpolynum;

	movsx	eax, WORD PTR _mpolynum$[ebp]
	imul	eax, 80					; 00000050H
	mov	DWORD PTR _size$[ebp], eax

; 663  : 			size += sizeof(WORLD_MIRROR_VERTEX) * mvertnum;

	movsx	eax, WORD PTR _mvertnum$[ebp]
	imul	eax, 56					; 00000038H
	add	eax, DWORD PTR _size$[ebp]
	mov	DWORD PTR _size$[ebp], eax

; 664  : 			cube->Model.MirrorPolyPtr = (WORLD_MIRROR_POLY*)malloc(size);

	push	OFFSET FLAT:??_C@_0IK@HDNGGFNG@c?3?2documents?5and?5settings?2jarhea@
	mov	eax, DWORD PTR ?__LINE__Var@?1??MirrorWorldPolys@@YAXXZ@4JA
	add	eax, 168				; 000000a8H
	push	eax
	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	call	?DebugMalloc@@YAPAXIHPAD@Z		; DebugMalloc
	add	esp, 12					; 0000000cH
	mov	edx, DWORD PTR _cube$[ebp]
	mov	DWORD PTR [edx+108], eax

; 665  : 
; 666  : 			if (cube->Model.MirrorPolyPtr)

	mov	eax, DWORD PTR _cube$[ebp]
	cmp	DWORD PTR [eax+108], 0
	je	$L81538

; 667  : 			{
; 668  : 				cube->Model.MirrorVertPtr = (WORLD_MIRROR_VERTEX*)(cube->Model.MirrorPolyPtr + mpolynum);

	movsx	eax, WORD PTR _mpolynum$[ebp]
	imul	eax, 80					; 00000050H
	mov	ecx, DWORD PTR _cube$[ebp]
	add	eax, DWORD PTR [ecx+108]
	mov	edx, DWORD PTR _cube$[ebp]
	mov	DWORD PTR [edx+112], eax

; 669  : 				cube->Model.MirrorPolyNum = mpolynum;

	mov	eax, DWORD PTR _cube$[ebp]
	mov	cx, WORD PTR _mpolynum$[ebp]
	mov	WORD PTR [eax+84], cx

; 670  : 				cube->Model.MirrorVertNum = mvertnum;

	mov	eax, DWORD PTR _cube$[ebp]
	mov	cx, WORD PTR _mvertnum$[ebp]
	mov	WORD PTR [eax+86], cx

; 671  : 
; 672  : 				offset = ((long)cube->Model.MirrorVertPtr) - ((long)mverts);

	mov	eax, DWORD PTR _cube$[ebp]
	mov	ecx, DWORD PTR [eax+112]
	sub	ecx, DWORD PTR _mverts$[ebp]
	mov	DWORD PTR _offset$[ebp], ecx

; 673  : 				for (j = 0 ; j < mpolynum ; j++)

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $L81546
$L81547:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$L81546:
	movsx	eax, WORD PTR _mpolynum$[ebp]
	cmp	DWORD PTR _j$[ebp], eax
	jge	$L81548

; 674  : 				{
; 675  : 					cube->Model.MirrorPolyPtr[j] = mpolys[j];

	mov	esi, DWORD PTR _j$[ebp]
	imul	esi, 80					; 00000050H
	add	esi, DWORD PTR _mpolys$[ebp]
	mov	eax, DWORD PTR _j$[ebp]
	imul	eax, 80					; 00000050H
	mov	ecx, DWORD PTR _cube$[ebp]
	mov	edi, DWORD PTR [ecx+108]
	add	edi, eax
	mov	ecx, 20					; 00000014H
	rep movsd

; 676  : 					cube->Model.MirrorPolyPtr[j].v0 = (WORLD_MIRROR_VERTEX*)(((long)cube->Model.MirrorPolyPtr[j].v0) + offset);

	mov	eax, DWORD PTR _j$[ebp]
	imul	eax, 80					; 00000050H
	mov	ecx, DWORD PTR _cube$[ebp]
	mov	edx, DWORD PTR [ecx+108]
	mov	eax, DWORD PTR [edx+eax+64]
	add	eax, DWORD PTR _offset$[ebp]
	mov	ecx, DWORD PTR _j$[ebp]
	imul	ecx, 80					; 00000050H
	mov	edx, DWORD PTR _cube$[ebp]
	mov	edx, DWORD PTR [edx+108]
	mov	DWORD PTR [edx+ecx+64], eax

; 677  : 					cube->Model.MirrorPolyPtr[j].v1 = (WORLD_MIRROR_VERTEX*)(((long)cube->Model.MirrorPolyPtr[j].v1) + offset);

	mov	eax, DWORD PTR _j$[ebp]
	imul	eax, 80					; 00000050H
	mov	ecx, DWORD PTR _cube$[ebp]
	mov	edx, DWORD PTR [ecx+108]
	mov	eax, DWORD PTR [edx+eax+68]
	add	eax, DWORD PTR _offset$[ebp]
	mov	ecx, DWORD PTR _j$[ebp]
	imul	ecx, 80					; 00000050H
	mov	edx, DWORD PTR _cube$[ebp]
	mov	edx, DWORD PTR [edx+108]
	mov	DWORD PTR [edx+ecx+68], eax

; 678  : 					cube->Model.MirrorPolyPtr[j].v2 = (WORLD_MIRROR_VERTEX*)(((long)cube->Model.MirrorPolyPtr[j].v2) + offset);

	mov	eax, DWORD PTR _j$[ebp]
	imul	eax, 80					; 00000050H
	mov	ecx, DWORD PTR _cube$[ebp]
	mov	edx, DWORD PTR [ecx+108]
	mov	eax, DWORD PTR [edx+eax+72]
	add	eax, DWORD PTR _offset$[ebp]
	mov	ecx, DWORD PTR _j$[ebp]
	imul	ecx, 80					; 00000050H
	mov	edx, DWORD PTR _cube$[ebp]
	mov	edx, DWORD PTR [edx+108]
	mov	DWORD PTR [edx+ecx+72], eax

; 679  : 					cube->Model.MirrorPolyPtr[j].v3 = (WORLD_MIRROR_VERTEX*)(((long)cube->Model.MirrorPolyPtr[j].v3) + offset);

	mov	eax, DWORD PTR _j$[ebp]
	imul	eax, 80					; 00000050H
	mov	ecx, DWORD PTR _cube$[ebp]
	mov	edx, DWORD PTR [ecx+108]
	mov	eax, DWORD PTR [edx+eax+76]
	add	eax, DWORD PTR _offset$[ebp]
	mov	ecx, DWORD PTR _j$[ebp]
	imul	ecx, 80					; 00000050H
	mov	edx, DWORD PTR _cube$[ebp]
	mov	edx, DWORD PTR [edx+108]
	mov	DWORD PTR [edx+ecx+76], eax

; 680  : 
; 681  : 					if (mpolys[j].Tpage != -1)

	mov	eax, DWORD PTR _j$[ebp]
	imul	eax, 80					; 00000050H
	mov	ecx, DWORD PTR _mpolys$[ebp]
	movsx	edx, WORD PTR [ecx+eax+2]
	cmp	edx, -1
	je	SHORT $L81557

; 682  : 					{
; 683  : 						if (mpolys[j].Type & POLY_QUAD) cube->Model.MirrorQuadNumTex++;

	mov	eax, DWORD PTR _j$[ebp]
	imul	eax, 80					; 00000050H
	mov	ecx, DWORD PTR _mpolys$[ebp]
	movsx	edx, WORD PTR [ecx+eax]
	and	edx, 1
	je	SHORT $L81558
	mov	eax, DWORD PTR _cube$[ebp]
	mov	cx, WORD PTR [eax+88]
	add	cx, 1
	mov	edx, DWORD PTR _cube$[ebp]
	mov	WORD PTR [edx+88], cx

; 684  : 						else cube->Model.MirrorTriNumTex++;

	jmp	SHORT $L81559
$L81558:
	mov	eax, DWORD PTR _cube$[ebp]
	mov	cx, WORD PTR [eax+90]
	add	cx, 1
	mov	edx, DWORD PTR _cube$[ebp]
	mov	WORD PTR [edx+90], cx
$L81559:

; 685  : 					}
; 686  : 					else

	jmp	SHORT $L81560
$L81557:

; 687  : 					{
; 688  : 						if (mpolys[j].Type & POLY_QUAD) cube->Model.MirrorQuadNumRGB++;

	mov	eax, DWORD PTR _j$[ebp]
	imul	eax, 80					; 00000050H
	mov	ecx, DWORD PTR _mpolys$[ebp]
	movsx	edx, WORD PTR [ecx+eax]
	and	edx, 1
	je	SHORT $L81561
	mov	eax, DWORD PTR _cube$[ebp]
	mov	cx, WORD PTR [eax+92]
	add	cx, 1
	mov	edx, DWORD PTR _cube$[ebp]
	mov	WORD PTR [edx+92], cx

; 689  : 						else cube->Model.MirrorTriNumRGB++;

	jmp	SHORT $L81560
$L81561:
	mov	eax, DWORD PTR _cube$[ebp]
	mov	cx, WORD PTR [eax+94]
	add	cx, 1
	mov	edx, DWORD PTR _cube$[ebp]
	mov	WORD PTR [edx+94], cx
$L81560:

; 690  : 					}
; 691  : 				}

	jmp	$L81547
$L81548:

; 692  : 
; 693  : 				for (j = 0 ; j < mvertnum ; j++)

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $L81563
$L81564:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$L81563:
	movsx	eax, WORD PTR _mvertnum$[ebp]
	cmp	DWORD PTR _j$[ebp], eax
	jge	SHORT $L81538

; 694  : 				{
; 695  : 					cube->Model.MirrorVertPtr[j] = mverts[j];

	mov	esi, DWORD PTR _j$[ebp]
	imul	esi, 56					; 00000038H
	add	esi, DWORD PTR _mverts$[ebp]
	mov	eax, DWORD PTR _j$[ebp]
	imul	eax, 56					; 00000038H
	mov	ecx, DWORD PTR _cube$[ebp]
	mov	edi, DWORD PTR [ecx+112]
	add	edi, eax
	mov	ecx, 14					; 0000000eH
	rep movsd

; 696  : 				}

	jmp	SHORT $L81564
$L81538:

; 697  : 			}
; 698  : 		}
; 699  : 
; 700  : // free temp poly + vert ram
; 701  : 
; 702  : 		free(mpolys);

	push	OFFSET FLAT:??_C@_0IK@HDNGGFNG@c?3?2documents?5and?5settings?2jarhea@
	mov	eax, DWORD PTR ?__LINE__Var@?1??MirrorWorldPolys@@YAXXZ@4JA
	add	eax, 206				; 000000ceH
	push	eax
	mov	ecx, DWORD PTR _mpolys$[ebp]
	push	ecx
	call	?DebugFree@@YAXPAXHPAD@Z		; DebugFree
	add	esp, 12					; 0000000cH

; 703  : 		free(mverts);

	push	OFFSET FLAT:??_C@_0IK@HDNGGFNG@c?3?2documents?5and?5settings?2jarhea@
	mov	eax, DWORD PTR ?__LINE__Var@?1??MirrorWorldPolys@@YAXXZ@4JA
	add	eax, 207				; 000000cfH
	push	eax
	mov	ecx, DWORD PTR _mverts$[ebp]
	push	ecx
	call	?DebugFree@@YAXPAXHPAD@Z		; DebugFree
	add	esp, 12					; 0000000cH

; 704  : 	}

	jmp	$L81501
$L81481:

; 705  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?MirrorWorldPolys@@YAXXZ ENDP				; MirrorWorldPolys
_TEXT	ENDS
PUBLIC	?SetWorldMirror@@YAXXZ				; SetWorldMirror
EXTRN	?MirrorType@@3JA:DWORD				; MirrorType
; Function compile flags: /Odt /ZI
;	COMDAT ?SetWorldMirror@@YAXXZ
_TEXT	SEGMENT
_p$ = -16						; size = 4
_cube$ = -12						; size = 4
_j$ = -8						; size = 4
_i$ = -4						; size = 4
?SetWorldMirror@@YAXXZ PROC NEAR			; SetWorldMirror, COMDAT

; 712  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi

; 713  : 	long i, j;
; 714  : 	CUBE_HEADER *cube;
; 715  : 	WORLD_POLY *p;
; 716  : 
; 717  : // loop thru all world cubes
; 718  : 
; 719  : 	cube = World.Cube;

	mov	eax, DWORD PTR ?World@@3UWORLD@@A+8
	mov	DWORD PTR _cube$[ebp], eax

; 720  : 	for (i = 0 ; i < World.CubeNum ; i++, cube++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $L81573
$L81574:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	mov	ecx, DWORD PTR _cube$[ebp]
	add	ecx, 128				; 00000080H
	mov	DWORD PTR _cube$[ebp], ecx
$L81573:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR ?World@@3UWORLD@@A
	jge	$L81568

; 721  : 	{
; 722  : 		p = cube->Model.PolyPtr;

	mov	eax, DWORD PTR _cube$[ebp]
	mov	ecx, DWORD PTR [eax+100]
	mov	DWORD PTR _p$[ebp], ecx

; 723  : 		for (j = 0 ; j < cube->Model.PolyNum ; j++, p++)

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $L81576
$L81577:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 80					; 00000050H
	mov	DWORD PTR _p$[ebp], ecx
$L81576:
	mov	eax, DWORD PTR _cube$[ebp]
	movsx	ecx, WORD PTR [eax+72]
	cmp	DWORD PTR _j$[ebp], ecx
	jge	SHORT $L81578

; 724  : 		{
; 725  : 			if (p->Type & POLY_MIRROR)

	mov	eax, DWORD PTR _p$[ebp]
	movsx	ecx, WORD PTR [eax]
	and	ecx, 128				; 00000080H
	je	SHORT $L81579

; 726  : 			{
; 727  : 				if (RenderSettings.Mirror)

	cmp	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+80, 0
	je	SHORT $L81580

; 728  : 				{
; 729  : 					if (MirrorType)

	cmp	DWORD PTR ?MirrorType@@3JA, 0		; MirrorType
	je	SHORT $L81581

; 730  : 					{
; 731  : 						p->Type |= (POLY_SEMITRANS | POLY_SEMITRANS_ONE);

	mov	eax, DWORD PTR _p$[ebp]
	movsx	ecx, WORD PTR [eax]
	or	ecx, 260				; 00000104H
	mov	edx, DWORD PTR _p$[ebp]
	mov	WORD PTR [edx], cx

; 732  : 					}
; 733  : 					else

	jmp	SHORT $L81582
$L81581:

; 734  : 					{
; 735  : 						p->Type |= POLY_SEMITRANS;

	mov	eax, DWORD PTR _p$[ebp]
	movsx	ecx, WORD PTR [eax]
	or	ecx, 4
	mov	edx, DWORD PTR _p$[ebp]
	mov	WORD PTR [edx], cx
$L81582:

; 736  : 					}
; 737  : 				}
; 738  : 				else

	jmp	SHORT $L81579
$L81580:

; 739  : 				{
; 740  : 					p->Type &= ~(POLY_SEMITRANS | POLY_SEMITRANS_ONE);

	mov	eax, DWORD PTR _p$[ebp]
	movsx	ecx, WORD PTR [eax]
	and	ecx, -261				; fffffefbH
	mov	edx, DWORD PTR _p$[ebp]
	mov	WORD PTR [edx], cx
$L81579:

; 741  : 				}
; 742  : 			}
; 743  : 		}

	jmp	SHORT $L81577
$L81578:

; 744  : 	}

	jmp	$L81574
$L81568:

; 745  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?SetWorldMirror@@YAXXZ ENDP				; SetWorldMirror
_TEXT	ENDS
PUBLIC	__real@4b000000
PUBLIC	?DrawWorld@@YAXXZ				; DrawWorld
PUBLIC	?DrawWorldCube@@YAXPAUCUBE_HEADER@@@Z		; DrawWorldCube
PUBLIC	?DrawWorldCubeMirror@@YAXPAUCUBE_HEADER@@@Z	; DrawWorldCubeMirror
EXTRN	?ViewMatrix@@3TMatrixUnion@@A:BYTE		; ViewMatrix
EXTRN	?ViewTrans@@3UVectorStruct@@A:BYTE		; ViewTrans
EXTRN	?ViewCameraPos@@3UVectorStruct@@A:BYTE		; ViewCameraPos
EXTRN	?CameraPlaneLeft@@3UPlaneStruct@@A:BYTE		; CameraPlaneLeft
EXTRN	?CameraPlaneRight@@3UPlaneStruct@@A:BYTE	; CameraPlaneRight
EXTRN	?CameraPlaneTop@@3UPlaneStruct@@A:BYTE		; CameraPlaneTop
EXTRN	?CameraPlaneBottom@@3UPlaneStruct@@A:BYTE	; CameraPlaneBottom
EXTRN	?CamVisiMask@@3_KA:QWORD			; CamVisiMask
EXTRN	?BucketEnvStill@@3UBUCKET_ENV@@A:BYTE		; BucketEnvStill
EXTRN	?BucketEnvStillFog@@3UBUCKET_ENV@@A:BYTE	; BucketEnvStillFog
EXTRN	?BucketEnvStillClip@@3UBUCKET_ENV@@A:BYTE	; BucketEnvStillClip
EXTRN	?BucketEnvStillClipFog@@3UBUCKET_ENV@@A:BYTE	; BucketEnvStillClipFog
EXTRN	?BucketRGB@@3UBUCKET_TEX0@@A:BYTE		; BucketRGB
EXTRN	?BucketFogRGB@@3UBUCKET_TEX0@@A:BYTE		; BucketFogRGB
EXTRN	?BucketClipRGB@@3UBUCKET_TEX0@@A:BYTE		; BucketClipRGB
EXTRN	?BucketClipFogRGB@@3UBUCKET_TEX0@@A:BYTE	; BucketClipFogRGB
EXTRN	?Bucket@@3PAUBUCKET_TEX1@@A:BYTE		; Bucket
EXTRN	?BucketFog@@3PAUBUCKET_TEX1@@A:BYTE		; BucketFog
EXTRN	?BucketClip@@3PAUBUCKET_TEX1@@A:BYTE		; BucketClip
EXTRN	?BucketClipFog@@3PAUBUCKET_TEX1@@A:BYTE		; BucketClipFog
EXTRN	?WorldMeshFx@@3PAUWORLD_MESH_FX@@A:BYTE		; WorldMeshFx
EXTRN	?WorldMeshFxCount@@3JA:DWORD			; WorldMeshFxCount
EXTRN	?DxState@@3UDX_STATE@@A:BYTE			; DxState
EXTRN	?D3Ddevice@@3PAUIDirect3DDevice3@@A:DWORD	; D3Ddevice
EXTRN	?RenderStateChange@@3JA:DWORD			; RenderStateChange
EXTRN	?RenderFog@@3FA:WORD				; RenderFog
_BSS	SEGMENT
	ALIGN	4

_WorldFog DW	01H DUP (?)
	ALIGN	4

_WorldBucketHeadRGB DD 01H DUP (?)
_WorldBucketHeadClipRGB DD 01H DUP (?)
_WorldBucketHead DD 01H DUP (?)
_WorldBucketHeadClip DD 01H DUP (?)
_WorldBucketHeadEnv DD 01H DUP (?)
_WorldBucketHeadEnvClip DD 01H DUP (?)
_WorldEnvMask DW 01H DUP (?)
_BSS	ENDS
;	COMDAT __real@4b000000
CONST	SEGMENT
__real@4b000000 DD 04b000000r			; 8.38861e+006
; Function compile flags: /Odt /ZI
CONST	ENDS
;	COMDAT ?DrawWorld@@YAXXZ
_TEXT	SEGMENT
tv528 = -136						; size = 8
tv307 = -132						; size = 4
__temp$81623 = -64					; size = 4
_chp$ = -60						; size = 4
_ch$ = -56						; size = 4
_bch$ = -52						; size = 4
_cubepos$ = -48						; size = 4
_camy$ = -44						; size = 4
_b$ = -40						; size = 4
_t$ = -36						; size = 4
_r$ = -32						; size = 4
_l$ = -28						; size = 4
_cuberad$ = -24						; size = 4
_z$ = -20						; size = 4
_gap$ = -16						; size = 4
_k$ = -12						; size = 4
_j$ = -8						; size = 4
_i$ = -4						; size = 4
?DrawWorld@@YAXXZ PROC NEAR				; DrawWorld, COMDAT

; 752  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 136				; 00000088H
	push	ebx
	push	esi
	push	edi

; 753  : 	long i, j, k, gap;
; 754  : 	float z, cuberad;
; 755  : 	float l, r, t, b, camy;
; 756  : 	VEC *cubepos;
; 757  : 	BIG_CUBE_HEADER *bch;
; 758  : 	CUBE_HEADER *ch, **chp;
; 759  : 
; 760  : // loop thru big cubes
; 761  : 
; 762  : 	#if SCREEN_DEBUG
; 763  : 	WorldBigCubeCount = 0;

	mov	WORD PTR ?WorldBigCubeCount@@3FA, 0	; WorldBigCubeCount

; 764  : 	#endif
; 765  : 
; 766  : 	WorldCubeCount = 0;

	mov	WORD PTR ?WorldCubeCount@@3FA, 0	; WorldCubeCount

; 767  : 	bch = World.BigCube;

	mov	eax, DWORD PTR ?World@@3UWORLD@@A+16
	mov	DWORD PTR _bch$[ebp], eax

; 768  : 
; 769  : 	for (i = 0 ; i < World.BigCubeNum ; i++, bch++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $L81602
$L81603:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	mov	ecx, DWORD PTR _bch$[ebp]
	add	ecx, 24					; 00000018H
	mov	DWORD PTR _bch$[ebp], ecx
$L81602:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR ?World@@3UWORLD@@A+4
	jge	$L81604

; 770  : 	{
; 771  : 
; 772  : // test big cube against camera view planes
; 773  : 
; 774  : 		cubepos = (VEC*)&bch->x;

	mov	eax, DWORD PTR _bch$[ebp]
	mov	DWORD PTR _cubepos$[ebp], eax

; 775  : 		cuberad = bch->Radius;

	mov	eax, DWORD PTR _bch$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _cuberad$[ebp], ecx

; 776  : 
; 777  : 		z = cubepos->v[X] * ViewMatrix.m[RZ] + cubepos->v[Y] * ViewMatrix.m[UZ] + cubepos->v[Z] * ViewMatrix.m[LZ] + ViewTrans.v[Z];

	mov	eax, DWORD PTR _cubepos$[ebp]
	fld	DWORD PTR ?ViewMatrix@@3TMatrixUnion@@A+8
	fmul	DWORD PTR [eax]
	mov	ecx, DWORD PTR _cubepos$[ebp]
	fld	DWORD PTR ?ViewMatrix@@3TMatrixUnion@@A+20
	fmul	DWORD PTR [ecx+4]
	faddp	ST(1), ST(0)
	mov	edx, DWORD PTR _cubepos$[ebp]
	fld	DWORD PTR ?ViewMatrix@@3TMatrixUnion@@A+32
	fmul	DWORD PTR [edx+8]
	faddp	ST(1), ST(0)
	fadd	DWORD PTR ?ViewTrans@@3UVectorStruct@@A+8
	fstp	DWORD PTR _z$[ebp]

; 778  : 		if (z + cuberad < RenderSettings.NearClip) continue;

	fld	DWORD PTR _z$[ebp]
	fadd	DWORD PTR _cuberad$[ebp]
	fcomp	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+28
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L81606
	jmp	SHORT $L81603
$L81606:

; 779  : 		if (z - cuberad >= RenderSettings.FarClip) continue;

	fld	DWORD PTR _z$[ebp]
	fsub	DWORD PTR _cuberad$[ebp]
	fcomp	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+32
	fnstsw	ax
	test	ah, 1
	jne	SHORT $L81607
	jmp	$L81603
$L81607:

; 780  : 
; 781  : 		if (PlaneDist(&CameraPlaneLeft, cubepos) >= cuberad) continue;

	mov	eax, DWORD PTR _cubepos$[ebp]
	fld	DWORD PTR ?CameraPlaneLeft@@3UPlaneStruct@@A
	fmul	DWORD PTR [eax]
	mov	ecx, DWORD PTR _cubepos$[ebp]
	fld	DWORD PTR ?CameraPlaneLeft@@3UPlaneStruct@@A+4
	fmul	DWORD PTR [ecx+4]
	faddp	ST(1), ST(0)
	mov	edx, DWORD PTR _cubepos$[ebp]
	fld	DWORD PTR ?CameraPlaneLeft@@3UPlaneStruct@@A+8
	fmul	DWORD PTR [edx+8]
	faddp	ST(1), ST(0)
	fadd	DWORD PTR ?CameraPlaneLeft@@3UPlaneStruct@@A+12
	fcomp	DWORD PTR _cuberad$[ebp]
	fnstsw	ax
	test	ah, 1
	jne	SHORT $L81608
	jmp	$L81603
$L81608:

; 782  : 		if (PlaneDist(&CameraPlaneRight, cubepos) >= cuberad) continue;

	mov	eax, DWORD PTR _cubepos$[ebp]
	fld	DWORD PTR ?CameraPlaneRight@@3UPlaneStruct@@A
	fmul	DWORD PTR [eax]
	mov	ecx, DWORD PTR _cubepos$[ebp]
	fld	DWORD PTR ?CameraPlaneRight@@3UPlaneStruct@@A+4
	fmul	DWORD PTR [ecx+4]
	faddp	ST(1), ST(0)
	mov	edx, DWORD PTR _cubepos$[ebp]
	fld	DWORD PTR ?CameraPlaneRight@@3UPlaneStruct@@A+8
	fmul	DWORD PTR [edx+8]
	faddp	ST(1), ST(0)
	fadd	DWORD PTR ?CameraPlaneRight@@3UPlaneStruct@@A+12
	fcomp	DWORD PTR _cuberad$[ebp]
	fnstsw	ax
	test	ah, 1
	jne	SHORT $L81609
	jmp	$L81603
$L81609:

; 783  : 		if (PlaneDist(&CameraPlaneBottom, cubepos) >= cuberad) continue;

	mov	eax, DWORD PTR _cubepos$[ebp]
	fld	DWORD PTR ?CameraPlaneBottom@@3UPlaneStruct@@A
	fmul	DWORD PTR [eax]
	mov	ecx, DWORD PTR _cubepos$[ebp]
	fld	DWORD PTR ?CameraPlaneBottom@@3UPlaneStruct@@A+4
	fmul	DWORD PTR [ecx+4]
	faddp	ST(1), ST(0)
	mov	edx, DWORD PTR _cubepos$[ebp]
	fld	DWORD PTR ?CameraPlaneBottom@@3UPlaneStruct@@A+8
	fmul	DWORD PTR [edx+8]
	faddp	ST(1), ST(0)
	fadd	DWORD PTR ?CameraPlaneBottom@@3UPlaneStruct@@A+12
	fcomp	DWORD PTR _cuberad$[ebp]
	fnstsw	ax
	test	ah, 1
	jne	SHORT $L81610
	jmp	$L81603
$L81610:

; 784  : 		if (PlaneDist(&CameraPlaneTop, cubepos) >= cuberad) continue;

	mov	eax, DWORD PTR _cubepos$[ebp]
	fld	DWORD PTR ?CameraPlaneTop@@3UPlaneStruct@@A
	fmul	DWORD PTR [eax]
	mov	ecx, DWORD PTR _cubepos$[ebp]
	fld	DWORD PTR ?CameraPlaneTop@@3UPlaneStruct@@A+4
	fmul	DWORD PTR [ecx+4]
	faddp	ST(1), ST(0)
	mov	edx, DWORD PTR _cubepos$[ebp]
	fld	DWORD PTR ?CameraPlaneTop@@3UPlaneStruct@@A+8
	fmul	DWORD PTR [edx+8]
	faddp	ST(1), ST(0)
	fadd	DWORD PTR ?CameraPlaneTop@@3UPlaneStruct@@A+12
	fcomp	DWORD PTR _cuberad$[ebp]
	fnstsw	ax
	test	ah, 1
	jne	SHORT $L81611
	jmp	$L81603
$L81611:

; 785  : 
; 786  : // big cube passed, test it's sub-cubes
; 787  : 
; 788  : 		#if SCREEN_DEBUG
; 789  : 		WorldBigCubeCount++;

	mov	ax, WORD PTR ?WorldBigCubeCount@@3FA	; WorldBigCubeCount
	add	ax, 1
	mov	WORD PTR ?WorldBigCubeCount@@3FA, ax	; WorldBigCubeCount

; 790  : 		#endif
; 791  : 
; 792  : 		chp = bch->Cubes;

	mov	eax, DWORD PTR _bch$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR _chp$[ebp], ecx

; 793  : 
; 794  : 		for (j = 0 ; j < bch->CubeNum ; j++)

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $L81612
$L81613:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$L81612:
	mov	eax, DWORD PTR _bch$[ebp]
	mov	ecx, DWORD PTR _j$[ebp]
	cmp	ecx, DWORD PTR [eax+16]
	jge	$L81614

; 795  : 		{
; 796  : 
; 797  : // visibox test
; 798  : 
; 799  : 			if (chp[j]->VisiMask & CamVisiMask)

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _chp$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [edx+40]
	and	eax, DWORD PTR ?CamVisiMask@@3_KA
	mov	ecx, DWORD PTR [edx+44]
	and	ecx, DWORD PTR ?CamVisiMask@@3_KA+4
	mov	DWORD PTR tv528[ebp], eax
	mov	DWORD PTR tv528[ebp+4], ecx
	mov	edx, DWORD PTR tv528[ebp]
	or	edx, DWORD PTR tv528[ebp+4]
	je	SHORT $L81615

; 800  : 			{
; 801  : 				continue;

	jmp	SHORT $L81613
$L81615:

; 802  : 			}
; 803  : 
; 804  : // test cube against camera view planes
; 805  : 
; 806  : 			cubepos = (VEC*)&chp[j]->CentreX;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _chp$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _cubepos$[ebp], edx

; 807  : 			cuberad = chp[j]->Radius;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _chp$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR _cuberad$[ebp], eax

; 808  : 
; 809  : 			z = cubepos->v[X] * ViewMatrix.m[RZ] + cubepos->v[Y] * ViewMatrix.m[UZ] + cubepos->v[Z] * ViewMatrix.m[LZ] + ViewTrans.v[Z];

	mov	eax, DWORD PTR _cubepos$[ebp]
	fld	DWORD PTR ?ViewMatrix@@3TMatrixUnion@@A+8
	fmul	DWORD PTR [eax]
	mov	ecx, DWORD PTR _cubepos$[ebp]
	fld	DWORD PTR ?ViewMatrix@@3TMatrixUnion@@A+20
	fmul	DWORD PTR [ecx+4]
	faddp	ST(1), ST(0)
	mov	edx, DWORD PTR _cubepos$[ebp]
	fld	DWORD PTR ?ViewMatrix@@3TMatrixUnion@@A+32
	fmul	DWORD PTR [edx+8]
	faddp	ST(1), ST(0)
	fadd	DWORD PTR ?ViewTrans@@3UVectorStruct@@A+8
	fstp	DWORD PTR _z$[ebp]

; 810  : 			if (z + cuberad < RenderSettings.NearClip) continue;

	fld	DWORD PTR _z$[ebp]
	fadd	DWORD PTR _cuberad$[ebp]
	fcomp	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+28
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L81617
	jmp	$L81613
$L81617:

; 811  : 			if (z - cuberad >= RenderSettings.FarClip) continue;

	fld	DWORD PTR _z$[ebp]
	fsub	DWORD PTR _cuberad$[ebp]
	fcomp	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+32
	fnstsw	ax
	test	ah, 1
	jne	SHORT $L81618
	jmp	$L81613
$L81618:

; 812  : 
; 813  : 			if ((l = PlaneDist(&CameraPlaneLeft, cubepos)) >= cuberad) continue;

	mov	eax, DWORD PTR _cubepos$[ebp]
	fld	DWORD PTR ?CameraPlaneLeft@@3UPlaneStruct@@A
	fmul	DWORD PTR [eax]
	mov	ecx, DWORD PTR _cubepos$[ebp]
	fld	DWORD PTR ?CameraPlaneLeft@@3UPlaneStruct@@A+4
	fmul	DWORD PTR [ecx+4]
	faddp	ST(1), ST(0)
	mov	edx, DWORD PTR _cubepos$[ebp]
	fld	DWORD PTR ?CameraPlaneLeft@@3UPlaneStruct@@A+8
	fmul	DWORD PTR [edx+8]
	faddp	ST(1), ST(0)
	fadd	DWORD PTR ?CameraPlaneLeft@@3UPlaneStruct@@A+12
	fst	DWORD PTR _l$[ebp]
	fcomp	DWORD PTR _cuberad$[ebp]
	fnstsw	ax
	test	ah, 1
	jne	SHORT $L81619
	jmp	$L81613
$L81619:

; 814  : 			if ((r = PlaneDist(&CameraPlaneRight, cubepos)) >= cuberad) continue;

	mov	eax, DWORD PTR _cubepos$[ebp]
	fld	DWORD PTR ?CameraPlaneRight@@3UPlaneStruct@@A
	fmul	DWORD PTR [eax]
	mov	ecx, DWORD PTR _cubepos$[ebp]
	fld	DWORD PTR ?CameraPlaneRight@@3UPlaneStruct@@A+4
	fmul	DWORD PTR [ecx+4]
	faddp	ST(1), ST(0)
	mov	edx, DWORD PTR _cubepos$[ebp]
	fld	DWORD PTR ?CameraPlaneRight@@3UPlaneStruct@@A+8
	fmul	DWORD PTR [edx+8]
	faddp	ST(1), ST(0)
	fadd	DWORD PTR ?CameraPlaneRight@@3UPlaneStruct@@A+12
	fst	DWORD PTR _r$[ebp]
	fcomp	DWORD PTR _cuberad$[ebp]
	fnstsw	ax
	test	ah, 1
	jne	SHORT $L81620
	jmp	$L81613
$L81620:

; 815  : 			if ((b = PlaneDist(&CameraPlaneBottom, cubepos)) >= cuberad) continue;

	mov	eax, DWORD PTR _cubepos$[ebp]
	fld	DWORD PTR ?CameraPlaneBottom@@3UPlaneStruct@@A
	fmul	DWORD PTR [eax]
	mov	ecx, DWORD PTR _cubepos$[ebp]
	fld	DWORD PTR ?CameraPlaneBottom@@3UPlaneStruct@@A+4
	fmul	DWORD PTR [ecx+4]
	faddp	ST(1), ST(0)
	mov	edx, DWORD PTR _cubepos$[ebp]
	fld	DWORD PTR ?CameraPlaneBottom@@3UPlaneStruct@@A+8
	fmul	DWORD PTR [edx+8]
	faddp	ST(1), ST(0)
	fadd	DWORD PTR ?CameraPlaneBottom@@3UPlaneStruct@@A+12
	fst	DWORD PTR _b$[ebp]
	fcomp	DWORD PTR _cuberad$[ebp]
	fnstsw	ax
	test	ah, 1
	jne	SHORT $L81621
	jmp	$L81613
$L81621:

; 816  : 			if ((t = PlaneDist(&CameraPlaneTop, cubepos)) >= cuberad) continue;

	mov	eax, DWORD PTR _cubepos$[ebp]
	fld	DWORD PTR ?CameraPlaneTop@@3UPlaneStruct@@A
	fmul	DWORD PTR [eax]
	mov	ecx, DWORD PTR _cubepos$[ebp]
	fld	DWORD PTR ?CameraPlaneTop@@3UPlaneStruct@@A+4
	fmul	DWORD PTR [ecx+4]
	faddp	ST(1), ST(0)
	mov	edx, DWORD PTR _cubepos$[ebp]
	fld	DWORD PTR ?CameraPlaneTop@@3UPlaneStruct@@A+8
	fmul	DWORD PTR [edx+8]
	faddp	ST(1), ST(0)
	fadd	DWORD PTR ?CameraPlaneTop@@3UPlaneStruct@@A+12
	fst	DWORD PTR _t$[ebp]
	fcomp	DWORD PTR _cuberad$[ebp]
	fnstsw	ax
	test	ah, 1
	jne	SHORT $L81622
	jmp	$L81613
$L81622:

; 817  : 
; 818  : // cube passed, add to 'in view' list
; 819  : 
; 820  : 			World.CubeList[WorldCubeCount] = chp[j];

	movsx	eax, WORD PTR ?WorldCubeCount@@3FA	; WorldCubeCount
	mov	ecx, DWORD PTR ?World@@3UWORLD@@A+12
	mov	edx, DWORD PTR _j$[ebp]
	mov	esi, DWORD PTR _chp$[ebp]
	mov	edx, DWORD PTR [esi+edx*4]
	mov	DWORD PTR [ecx+eax*4], edx

; 821  : 			chp[j]->Clip = (l > -cuberad || r > -cuberad || b > -cuberad || t > -cuberad || z - cuberad < RenderSettings.NearClip || z + cuberad >= RenderSettings.FarClip);

	fld	DWORD PTR _cuberad$[ebp]
	fchs
	fcomp	DWORD PTR _l$[ebp]
	fnstsw	ax
	test	ah, 5
	jnp	SHORT $L83973
	fld	DWORD PTR _cuberad$[ebp]
	fchs
	fcomp	DWORD PTR _r$[ebp]
	fnstsw	ax
	test	ah, 5
	jnp	SHORT $L83973
	fld	DWORD PTR _cuberad$[ebp]
	fchs
	fcomp	DWORD PTR _b$[ebp]
	fnstsw	ax
	test	ah, 5
	jnp	SHORT $L83973
	fld	DWORD PTR _cuberad$[ebp]
	fchs
	fcomp	DWORD PTR _t$[ebp]
	fnstsw	ax
	test	ah, 5
	jnp	SHORT $L83973
	fld	DWORD PTR _z$[ebp]
	fsub	DWORD PTR _cuberad$[ebp]
	fcomp	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+28
	fnstsw	ax
	test	ah, 5
	jnp	SHORT $L83973
	fld	DWORD PTR _z$[ebp]
	fadd	DWORD PTR _cuberad$[ebp]
	fcomp	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+32
	fnstsw	ax
	test	ah, 1
	je	SHORT $L83973
	mov	DWORD PTR tv307[ebp], 0
	jmp	SHORT $L83974
$L83973:
	mov	DWORD PTR tv307[ebp], 1
$L83974:
	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _chp$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR tv307[ebp]
	mov	DWORD PTR [edx+48], eax

; 822  : 			FTOL(z + cuberad, chp[j]->z);

	fld	DWORD PTR _z$[ebp]
	fadd	DWORD PTR _cuberad$[ebp]
	fadd	DWORD PTR __real@4b000000
	fstp	DWORD PTR __temp$81623[ebp]
	mov	eax, DWORD PTR __temp$81623[ebp]
	and	eax, 16777215				; 00ffffffH
	mov	ecx, DWORD PTR _j$[ebp]
	mov	edx, DWORD PTR _chp$[ebp]
	mov	ecx, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR [ecx+52], eax

; 823  : 			chp[j]->MeshFxFlag = 0;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _chp$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR [edx+60], 0

; 824  : 			WorldCubeCount++;

	mov	ax, WORD PTR ?WorldCubeCount@@3FA	; WorldCubeCount
	add	ax, 1
	mov	WORD PTR ?WorldCubeCount@@3FA, ax	; WorldCubeCount

; 825  : 		}

	jmp	$L81613
$L81614:

; 826  : 	}

	jmp	$L81603
$L81604:

; 827  : 
; 828  : // quit if nothing to render
; 829  : 
; 830  : 	if (!WorldCubeCount) return;

	movsx	eax, WORD PTR ?WorldCubeCount@@3FA	; WorldCubeCount
	test	eax, eax
	jne	SHORT $L81626
	jmp	$L81586
$L81626:

; 831  : 
; 832  : // shell sort 'in view' cubes
; 833  : 
; 834  : 	chp = World.CubeList;

	mov	eax, DWORD PTR ?World@@3UWORLD@@A+12
	mov	DWORD PTR _chp$[ebp], eax

; 835  : 
; 836  : 	for (k = 0 ; k < 3 ; k++)

	mov	DWORD PTR _k$[ebp], 0
	jmp	SHORT $L81627
$L81628:
	mov	eax, DWORD PTR _k$[ebp]
	add	eax, 1
	mov	DWORD PTR _k$[ebp], eax
$L81627:
	cmp	DWORD PTR _k$[ebp], 3
	jge	$L81629

; 837  : 	{
; 838  : 		gap = ShellGap[k];

	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _ShellGap[eax*4]
	mov	DWORD PTR _gap$[ebp], ecx

; 839  : 		for (i = gap ; i < WorldCubeCount ; i++)

	mov	eax, DWORD PTR _gap$[ebp]
	mov	DWORD PTR _i$[ebp], eax
	jmp	SHORT $L81630
$L81631:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$L81630:
	movsx	eax, WORD PTR ?WorldCubeCount@@3FA	; WorldCubeCount
	cmp	DWORD PTR _i$[ebp], eax
	jge	SHORT $L81632

; 840  : 		{
; 841  : 			ch = chp[i];

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _chp$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _ch$[ebp], edx

; 842  : 			for (j = i - gap ; j >= 0 && ch->z < chp[j]->z ; j -= gap)

	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, DWORD PTR _gap$[ebp]
	mov	DWORD PTR _j$[ebp], eax
	jmp	SHORT $L81633
$L81634:
	mov	eax, DWORD PTR _j$[ebp]
	sub	eax, DWORD PTR _gap$[ebp]
	mov	DWORD PTR _j$[ebp], eax
$L81633:
	cmp	DWORD PTR _j$[ebp], 0
	jl	SHORT $L81635
	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _chp$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _ch$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	cmp	ecx, DWORD PTR [edx+52]
	jge	SHORT $L81635

; 843  : 			{
; 844  : 				chp[j + gap] = chp[j];

	mov	eax, DWORD PTR _j$[ebp]
	add	eax, DWORD PTR _gap$[ebp]
	mov	ecx, DWORD PTR _chp$[ebp]
	mov	edx, DWORD PTR _j$[ebp]
	mov	esi, DWORD PTR _chp$[ebp]
	mov	edx, DWORD PTR [esi+edx*4]
	mov	DWORD PTR [ecx+eax*4], edx

; 845  : 			}

	jmp	SHORT $L81634
$L81635:

; 846  : 			chp[j + gap] = ch;

	mov	eax, DWORD PTR _j$[ebp]
	add	eax, DWORD PTR _gap$[ebp]
	mov	ecx, DWORD PTR _chp$[ebp]
	mov	edx, DWORD PTR _ch$[ebp]
	mov	DWORD PTR [ecx+eax*4], edx

; 847  : 		}

	jmp	SHORT $L81631
$L81632:

; 848  : 	}

	jmp	$L81628
$L81629:

; 849  : 
; 850  : // check mesh fx
; 851  : 
; 852  : 	for (i = 0 ; i < WorldMeshFxCount ; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $L81636
$L81637:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$L81636:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR ?WorldMeshFxCount@@3JA	; WorldMeshFxCount
	jge	SHORT $L81638

; 853  : 		WorldMeshFx[i].Checker(WorldMeshFx[i].Data);

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR ?WorldMeshFx@@3PAUWORLD_MESH_FX@@A[eax*8+4]
	push	ecx
	mov	edx, DWORD PTR _i$[ebp]
	call	DWORD PTR ?WorldMeshFx@@3PAUWORLD_MESH_FX@@A[edx*8]
	add	esp, 4
	jmp	SHORT $L81637
$L81638:

; 854  : 
; 855  : // set env mask
; 856  : 
; 857  : 	if (RenderSettings.Env)

	cmp	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+76, 0
	je	SHORT $L81639

; 858  : 		WorldEnvMask = POLY_ENV;

	mov	WORD PTR _WorldEnvMask, 2048		; 00000800H

; 859  : 	else

	jmp	SHORT $L81640
$L81639:

; 860  : 		WorldEnvMask = 0;

	mov	WORD PTR _WorldEnvMask, 0
$L81640:

; 861  : 
; 862  : // draw unfogged cubes
; 863  : 
; 864  : 	WorldFog = FALSE;

	mov	WORD PTR _WorldFog, 0

; 865  : 	WorldBucketHead = Bucket;

	mov	DWORD PTR _WorldBucketHead, OFFSET FLAT:?Bucket@@3PAUBUCKET_TEX1@@A ; Bucket

; 866  : 	WorldBucketHeadRGB = &BucketRGB;

	mov	DWORD PTR _WorldBucketHeadRGB, OFFSET FLAT:?BucketRGB@@3UBUCKET_TEX0@@A ; BucketRGB

; 867  : 	WorldBucketHeadClip = BucketClip;

	mov	DWORD PTR _WorldBucketHeadClip, OFFSET FLAT:?BucketClip@@3PAUBUCKET_TEX1@@A ; BucketClip

; 868  : 	WorldBucketHeadClipRGB = &BucketClipRGB;

	mov	DWORD PTR _WorldBucketHeadClipRGB, OFFSET FLAT:?BucketClipRGB@@3UBUCKET_TEX0@@A ; BucketClipRGB

; 869  : 	WorldBucketHeadEnv = &BucketEnvStill;

	mov	DWORD PTR _WorldBucketHeadEnv, OFFSET FLAT:?BucketEnvStill@@3UBUCKET_ENV@@A ; BucketEnvStill

; 870  : 	WorldBucketHeadEnvClip = &BucketEnvStillClip;

	mov	DWORD PTR _WorldBucketHeadEnvClip, OFFSET FLAT:?BucketEnvStillClip@@3UBUCKET_ENV@@A ; BucketEnvStillClip

; 871  : 
; 872  : 	for (i = 0 ; i < WorldCubeCount ; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $L81641
$L81642:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$L81641:
	movsx	eax, WORD PTR ?WorldCubeCount@@3FA	; WorldCubeCount
	cmp	DWORD PTR _i$[ebp], eax
	jge	SHORT $L81643

; 873  : 	{
; 874  : 		if (DxState.Fog && chp[i]->z >= RenderSettings.FogStart) break;

	cmp	DWORD PTR ?DxState@@3UDX_STATE@@A+36, 0
	je	SHORT $L81644
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _chp$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	fild	DWORD PTR [edx+52]
	fcomp	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+48
	fnstsw	ax
	test	ah, 1
	jne	SHORT $L81644
	jmp	SHORT $L81643
$L81644:

; 875  : 		DrawWorldCube(chp[i]);

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _chp$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	push	edx
	call	?DrawWorldCube@@YAXPAUCUBE_HEADER@@@Z	; DrawWorldCube
	add	esp, 4

; 876  : 	}

	jmp	SHORT $L81642
$L81643:

; 877  : 
; 878  : // draw fogged cubes
; 879  : 
; 880  : 	if (i < WorldCubeCount)

	movsx	eax, WORD PTR ?WorldCubeCount@@3FA	; WorldCubeCount
	cmp	DWORD PTR _i$[ebp], eax
	jge	$L81645

; 881  : 	{
; 882  : 		WorldFog = TRUE;

	mov	WORD PTR _WorldFog, 1

; 883  : 		WorldBucketHead = BucketFog;

	mov	DWORD PTR _WorldBucketHead, OFFSET FLAT:?BucketFog@@3PAUBUCKET_TEX1@@A ; BucketFog

; 884  : 		WorldBucketHeadRGB = &BucketFogRGB;

	mov	DWORD PTR _WorldBucketHeadRGB, OFFSET FLAT:?BucketFogRGB@@3UBUCKET_TEX0@@A ; BucketFogRGB

; 885  : 		WorldBucketHeadClip = BucketClipFog;

	mov	DWORD PTR _WorldBucketHeadClip, OFFSET FLAT:?BucketClipFog@@3PAUBUCKET_TEX1@@A ; BucketClipFog

; 886  : 		WorldBucketHeadClipRGB = &BucketClipFogRGB;

	mov	DWORD PTR _WorldBucketHeadClipRGB, OFFSET FLAT:?BucketClipFogRGB@@3UBUCKET_TEX0@@A ; BucketClipFogRGB

; 887  : 		WorldBucketHeadEnv = &BucketEnvStillFog;

	mov	DWORD PTR _WorldBucketHeadEnv, OFFSET FLAT:?BucketEnvStillFog@@3UBUCKET_ENV@@A ; BucketEnvStillFog

; 888  : 		WorldBucketHeadEnvClip = &BucketEnvStillClipFog;

	mov	DWORD PTR _WorldBucketHeadEnvClip, OFFSET FLAT:?BucketEnvStillClipFog@@3UBUCKET_ENV@@A ; BucketEnvStillClipFog

; 889  : 
; 890  : 		FOG_ON();

	movsx	eax, WORD PTR ?RenderFog@@3FA		; RenderFog
	test	eax, eax
	jne	SHORT $L81646
	mov	WORD PTR ?RenderFog@@3FA, 1		; RenderFog
	movsx	eax, WORD PTR ?RenderFog@@3FA		; RenderFog
	push	eax
	push	28					; 0000001cH
	mov	ecx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	eax
	call	DWORD PTR [edx+88]
	mov	eax, DWORD PTR ?RenderStateChange@@3JA	; RenderStateChange
	add	eax, 1
	mov	DWORD PTR ?RenderStateChange@@3JA, eax	; RenderStateChange
$L81646:

; 891  : 		for ( ; i < WorldCubeCount ; i++)

	jmp	SHORT $L81647
$L81648:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$L81647:
	movsx	eax, WORD PTR ?WorldCubeCount@@3FA	; WorldCubeCount
	cmp	DWORD PTR _i$[ebp], eax
	jge	SHORT $L81645

; 892  : 		{
; 893  : 			DrawWorldCube(chp[i]);

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _chp$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	push	edx
	call	?DrawWorldCube@@YAXPAUCUBE_HEADER@@@Z	; DrawWorldCube
	add	esp, 4

; 894  : 		}

	jmp	SHORT $L81648
$L81645:

; 895  : 	}
; 896  : 
; 897  : // draw mirrored cubes?
; 898  : 
; 899  : 	if (RenderSettings.Mirror && MirrorPlaneNum)

	cmp	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+80, 0
	je	$L81650
	cmp	DWORD PTR ?MirrorPlaneNum@@3JA, 0	; MirrorPlaneNum
	je	$L81650

; 900  : 	{
; 901  : 		FOG_ON();

	movsx	eax, WORD PTR ?RenderFog@@3FA		; RenderFog
	test	eax, eax
	jne	SHORT $L81651
	mov	WORD PTR ?RenderFog@@3FA, 1		; RenderFog
	movsx	eax, WORD PTR ?RenderFog@@3FA		; RenderFog
	push	eax
	push	28					; 0000001cH
	mov	ecx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	eax
	call	DWORD PTR [edx+88]
	mov	eax, DWORD PTR ?RenderStateChange@@3JA	; RenderStateChange
	add	eax, 1
	mov	DWORD PTR ?RenderStateChange@@3JA, eax	; RenderStateChange
$L81651:

; 902  : 		camy = ViewCameraPos.v[Y];

	mov	eax, DWORD PTR ?ViewCameraPos@@3UVectorStruct@@A+4
	mov	DWORD PTR _camy$[ebp], eax

; 903  : 		for (i = 0 ; i < WorldCubeCount ; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $L81652
$L81653:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$L81652:
	movsx	eax, WORD PTR ?WorldCubeCount@@3FA	; WorldCubeCount
	cmp	DWORD PTR _i$[ebp], eax
	jge	SHORT $L81650

; 904  : 		{
; 905  : 			if (camy < chp[i]->MirrorHeight)

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _chp$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	fld	DWORD PTR _camy$[ebp]
	fcomp	DWORD PTR [edx+64]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L81655

; 906  : 				DrawWorldCubeMirror(chp[i]);

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _chp$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	push	edx
	call	?DrawWorldCubeMirror@@YAXPAUCUBE_HEADER@@@Z ; DrawWorldCubeMirror
	add	esp, 4
$L81655:

; 907  : 		}

	jmp	SHORT $L81653
$L81650:

; 908  : 	}
; 909  : 
; 910  : // fog off
; 911  : 
; 912  : 	FOG_OFF();

	movsx	eax, WORD PTR ?RenderFog@@3FA		; RenderFog
	test	eax, eax
	je	SHORT $L81586
	mov	WORD PTR ?RenderFog@@3FA, 0		; RenderFog
	movsx	eax, WORD PTR ?RenderFog@@3FA		; RenderFog
	push	eax
	push	28					; 0000001cH
	mov	ecx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	eax
	call	DWORD PTR [edx+88]
	mov	eax, DWORD PTR ?RenderStateChange@@3JA	; RenderStateChange
	add	eax, 1
	mov	DWORD PTR ?RenderStateChange@@3JA, eax	; RenderStateChange
$L81586:

; 913  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?DrawWorld@@YAXXZ ENDP					; DrawWorld
_TEXT	ENDS
PUBLIC	__real@3f800000
PUBLIC	__real@3f000000
PUBLIC	?TransCubeVertsClip@@YAXPAUWORLD_MODEL@@@Z	; TransCubeVertsClip
PUBLIC	?TransCubeVertsFogClip@@YAXPAUWORLD_MODEL@@@Z	; TransCubeVertsFogClip
PUBLIC	?TransCubeVerts@@YAXPAUWORLD_MODEL@@@Z		; TransCubeVerts
PUBLIC	?TransCubeVertsFog@@YAXPAUWORLD_MODEL@@@Z	; TransCubeVertsFog
PUBLIC	?TransCubeVertsClipNewVerts@@YAXPAUWORLD_MODEL@@@Z ; TransCubeVertsClipNewVerts
PUBLIC	?TransCubeVertsFogClipNewVerts@@YAXPAUWORLD_MODEL@@@Z ; TransCubeVertsFogClipNewVerts
PUBLIC	?TransCubeVertsNewVerts@@YAXPAUWORLD_MODEL@@@Z	; TransCubeVertsNewVerts
PUBLIC	?TransCubeVertsFogNewVerts@@YAXPAUWORLD_MODEL@@@Z ; TransCubeVertsFogNewVerts
PUBLIC	?DrawCubePolysClip@@YAXPAUWORLD_MODEL@@J@Z	; DrawCubePolysClip
PUBLIC	?DrawCubePolys@@YAXPAUWORLD_MODEL@@J@Z		; DrawCubePolys
EXTRN	?ViewCameraMatrix@@3TMatrixUnion@@A:BYTE	; ViewCameraMatrix
EXTRN	?CheckCubeLight@@YADPAUCUBE_HEADER@@@Z:NEAR	; CheckCubeLight
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
; Function compile flags: /Odt /ZI
CONST	ENDS
;	COMDAT ?DrawWorldCube@@YAXPAUCUBE_HEADER@@@Z
_TEXT	SEGMENT
__i$81682 = -56						; size = 4
__mul$81673 = -52					; size = 4
_vecz$ = -48						; size = 12
_vecy$ = -36						; size = 12
_vecx$ = -24						; size = 12
_v$ = -12						; size = 4
_wap$ = -8						; size = 4
_i$ = -4						; size = 4
_cube$ = 8						; size = 4
?DrawWorldCube@@YAXPAUCUBE_HEADER@@@Z PROC NEAR		; DrawWorldCube, COMDAT

; 920  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 120				; 00000078H
	push	ebx
	push	esi
	push	edi

; 921  : 	long i;
; 922  : 	WORLD_ANIM_POLY *wap;
; 923  : 	WORLD_VERTEX *v;
; 924  : 	VEC vecx, vecy, vecz;
; 925  : 
; 926  : // get lit flag
; 927  : 
; 928  : 	cube->Lit = CheckCubeLight(cube);

	mov	eax, DWORD PTR _cube$[ebp]
	push	eax
	call	?CheckCubeLight@@YADPAUCUBE_HEADER@@@Z	; CheckCubeLight
	add	esp, 4
	movsx	ecx, al
	mov	edx, DWORD PTR _cube$[ebp]
	mov	DWORD PTR [edx+56], ecx

; 929  : 
; 930  : // set env verts
; 931  : 
; 932  : 	if (RenderSettings.Env)

	cmp	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+76, 0
	je	$L81666

; 933  : 	{
; 934  : 		for (i = 0 ; i < cube->Model.EnvVertNum ; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $L81667
$L81668:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$L81667:
	mov	eax, DWORD PTR _cube$[ebp]
	movsx	ecx, WORD PTR [eax+98]
	cmp	DWORD PTR _i$[ebp], ecx
	jge	$L81666

; 935  : 		{
; 936  : 			v = cube->Model.EnvVertPtr[i];

	mov	eax, DWORD PTR _cube$[ebp]
	mov	ecx, DWORD PTR [eax+120]
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR _v$[ebp], eax

; 937  : 
; 938  : 			SubVector((VEC*)&v->x, &ViewCameraPos, &vecz);

	mov	eax, DWORD PTR _v$[ebp]
	fld	DWORD PTR [eax]
	fsub	DWORD PTR ?ViewCameraPos@@3UVectorStruct@@A
	fstp	DWORD PTR _vecz$[ebp]
	mov	eax, DWORD PTR _v$[ebp]
	fld	DWORD PTR [eax+4]
	fsub	DWORD PTR ?ViewCameraPos@@3UVectorStruct@@A+4
	fstp	DWORD PTR _vecz$[ebp+4]
	mov	eax, DWORD PTR _v$[ebp]
	fld	DWORD PTR [eax+8]
	fsub	DWORD PTR ?ViewCameraPos@@3UVectorStruct@@A+8
	fstp	DWORD PTR _vecz$[ebp+8]

; 939  : 			NormalizeVector(&vecz);

	fld	DWORD PTR _vecz$[ebp]
	fmul	DWORD PTR _vecz$[ebp]
	fld	DWORD PTR _vecz$[ebp+4]
	fmul	DWORD PTR _vecz$[ebp+4]
	faddp	ST(1), ST(0)
	fld	DWORD PTR _vecz$[ebp+8]
	fmul	DWORD PTR _vecz$[ebp+8]
	faddp	ST(1), ST(0)
	push	ecx
	fstp	DWORD PTR [esp]
	call	?sqrt@@YAMM@Z				; sqrt
	add	esp, 4
	fdivr	DWORD PTR __real@3f800000
	fstp	DWORD PTR __mul$81673[ebp]
	fld	DWORD PTR _vecz$[ebp]
	fmul	DWORD PTR __mul$81673[ebp]
	fstp	DWORD PTR _vecz$[ebp]
	fld	DWORD PTR _vecz$[ebp+4]
	fmul	DWORD PTR __mul$81673[ebp]
	fstp	DWORD PTR _vecz$[ebp+4]
	fld	DWORD PTR _vecz$[ebp+8]
	fmul	DWORD PTR __mul$81673[ebp]
	fstp	DWORD PTR _vecz$[ebp+8]

; 940  : 			CrossProduct(&ViewCameraMatrix.mv[U], &vecz, &vecx)

	fld	DWORD PTR ?ViewCameraMatrix@@3TMatrixUnion@@A+16
	fmul	DWORD PTR _vecz$[ebp+8]
	fld	DWORD PTR ?ViewCameraMatrix@@3TMatrixUnion@@A+20
	fmul	DWORD PTR _vecz$[ebp+4]
	fsubp	ST(1), ST(0)
	fstp	DWORD PTR _vecx$[ebp]
	fld	DWORD PTR ?ViewCameraMatrix@@3TMatrixUnion@@A+20
	fmul	DWORD PTR _vecz$[ebp]
	fld	DWORD PTR ?ViewCameraMatrix@@3TMatrixUnion@@A+12
	fmul	DWORD PTR _vecz$[ebp+8]
	fsubp	ST(1), ST(0)
	fstp	DWORD PTR _vecx$[ebp+4]
	fld	DWORD PTR ?ViewCameraMatrix@@3TMatrixUnion@@A+12
	fmul	DWORD PTR _vecz$[ebp+4]
	fld	DWORD PTR ?ViewCameraMatrix@@3TMatrixUnion@@A+16
	fmul	DWORD PTR _vecz$[ebp]
	fsubp	ST(1), ST(0)
	fstp	DWORD PTR _vecx$[ebp+8]

; 941  : 			CrossProduct(&vecz, &vecx, &vecy);

	fld	DWORD PTR _vecz$[ebp+4]
	fmul	DWORD PTR _vecx$[ebp+8]
	fld	DWORD PTR _vecz$[ebp+8]
	fmul	DWORD PTR _vecx$[ebp+4]
	fsubp	ST(1), ST(0)
	fstp	DWORD PTR _vecy$[ebp]
	fld	DWORD PTR _vecz$[ebp+8]
	fmul	DWORD PTR _vecx$[ebp]
	fld	DWORD PTR _vecz$[ebp]
	fmul	DWORD PTR _vecx$[ebp+8]
	fsubp	ST(1), ST(0)
	fstp	DWORD PTR _vecy$[ebp+4]
	fld	DWORD PTR _vecz$[ebp]
	fmul	DWORD PTR _vecx$[ebp+4]
	fld	DWORD PTR _vecz$[ebp+4]
	fmul	DWORD PTR _vecx$[ebp]
	fsubp	ST(1), ST(0)
	fstp	DWORD PTR _vecy$[ebp+8]

; 942  : 
; 943  : 			v->tu = DotProduct((VEC*)&v->nx, &vecx) * 0.5f + 0.5f;

	mov	eax, DWORD PTR _v$[ebp]
	fld	DWORD PTR _vecx$[ebp]
	fmul	DWORD PTR [eax+24]
	mov	ecx, DWORD PTR _v$[ebp]
	fld	DWORD PTR _vecx$[ebp+4]
	fmul	DWORD PTR [ecx+28]
	faddp	ST(1), ST(0)
	mov	edx, DWORD PTR _v$[ebp]
	fld	DWORD PTR _vecx$[ebp+8]
	fmul	DWORD PTR [edx+32]
	faddp	ST(1), ST(0)
	fmul	DWORD PTR __real@3f000000
	fadd	DWORD PTR __real@3f000000
	mov	eax, DWORD PTR _v$[ebp]
	fstp	DWORD PTR [eax+60]

; 944  : 			v->tv = DotProduct((VEC*)&v->nx, &vecy) * 0.5f + 0.5f;

	mov	eax, DWORD PTR _v$[ebp]
	fld	DWORD PTR _vecy$[ebp]
	fmul	DWORD PTR [eax+24]
	mov	ecx, DWORD PTR _v$[ebp]
	fld	DWORD PTR _vecy$[ebp+4]
	fmul	DWORD PTR [ecx+28]
	faddp	ST(1), ST(0)
	mov	edx, DWORD PTR _v$[ebp]
	fld	DWORD PTR _vecy$[ebp+8]
	fmul	DWORD PTR [edx+32]
	faddp	ST(1), ST(0)
	fmul	DWORD PTR __real@3f000000
	fadd	DWORD PTR __real@3f000000
	mov	eax, DWORD PTR _v$[ebp]
	fstp	DWORD PTR [eax+64]

; 945  : 
; 946  : 			if (cube->Lit)

	mov	eax, DWORD PTR _cube$[ebp]
	cmp	DWORD PTR [eax+56], 0
	je	$L81681

; 947  : 			{
; 948  : 				ModelAddGouraud((MODEL_RGB*)&v->EnvRGB, &v->r, (MODEL_RGB*)&v->color);

	mov	eax, DWORD PTR _v$[ebp]
	movzx	ecx, BYTE PTR [eax+82]
	mov	edx, DWORD PTR _v$[ebp]
	add	ecx, DWORD PTR [edx+68]
	mov	DWORD PTR __i$81682[ebp], ecx
	cmp	DWORD PTR __i$81682[ebp], 255		; 000000ffH
	jle	SHORT $L81685
	mov	eax, DWORD PTR _v$[ebp]
	mov	BYTE PTR [eax+54], 255			; 000000ffH
	jmp	SHORT $L81687
$L81685:
	cmp	DWORD PTR __i$81682[ebp], 0
	jge	SHORT $L81688
	mov	eax, DWORD PTR _v$[ebp]
	mov	BYTE PTR [eax+54], 0
	jmp	SHORT $L81687
$L81688:
	mov	eax, DWORD PTR _v$[ebp]
	mov	cl, BYTE PTR __i$81682[ebp]
	mov	BYTE PTR [eax+54], cl
$L81687:
	mov	eax, DWORD PTR _v$[ebp]
	movzx	ecx, BYTE PTR [eax+81]
	mov	edx, DWORD PTR _v$[ebp]
	add	ecx, DWORD PTR [edx+72]
	mov	DWORD PTR __i$81682[ebp], ecx
	cmp	DWORD PTR __i$81682[ebp], 255		; 000000ffH
	jle	SHORT $L81695
	mov	eax, DWORD PTR _v$[ebp]
	mov	BYTE PTR [eax+53], 255			; 000000ffH
	jmp	SHORT $L81697
$L81695:
	cmp	DWORD PTR __i$81682[ebp], 0
	jge	SHORT $L81698
	mov	eax, DWORD PTR _v$[ebp]
	mov	BYTE PTR [eax+53], 0
	jmp	SHORT $L81697
$L81698:
	mov	eax, DWORD PTR _v$[ebp]
	mov	cl, BYTE PTR __i$81682[ebp]
	mov	BYTE PTR [eax+53], cl
$L81697:
	mov	eax, DWORD PTR _v$[ebp]
	movzx	ecx, BYTE PTR [eax+80]
	mov	edx, DWORD PTR _v$[ebp]
	add	ecx, DWORD PTR [edx+76]
	mov	DWORD PTR __i$81682[ebp], ecx
	cmp	DWORD PTR __i$81682[ebp], 255		; 000000ffH
	jle	SHORT $L81705
	mov	eax, DWORD PTR _v$[ebp]
	mov	BYTE PTR [eax+52], 255			; 000000ffH
	jmp	SHORT $L81707
$L81705:
	cmp	DWORD PTR __i$81682[ebp], 0
	jge	SHORT $L81708
	mov	eax, DWORD PTR _v$[ebp]
	mov	BYTE PTR [eax+52], 0
	jmp	SHORT $L81707
$L81708:
	mov	eax, DWORD PTR _v$[ebp]
	mov	cl, BYTE PTR __i$81682[ebp]
	mov	BYTE PTR [eax+52], cl
$L81707:

; 949  : 			}
; 950  : 			else

	jmp	SHORT $L81713
$L81681:

; 951  : 			{
; 952  : 				v->color = v->EnvRGB;

	mov	eax, DWORD PTR _v$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [ecx+80]
	mov	DWORD PTR [eax+52], edx
$L81713:

; 953  : 			}
; 954  : 		}

	jmp	$L81668
$L81666:

; 955  : 	}
; 956  : 
; 957  : // get anim poly tpages + uv's
; 958  : 
; 959  : 	if (cube->Model.AnimPolyNum)

	mov	eax, DWORD PTR _cube$[ebp]
	movsx	ecx, WORD PTR [eax+96]
	test	ecx, ecx
	je	SHORT $L81714

; 960  : 	{
; 961  : 		wap = cube->Model.AnimPolyPtr;

	mov	eax, DWORD PTR _cube$[ebp]
	mov	ecx, DWORD PTR [eax+116]
	mov	DWORD PTR _wap$[ebp], ecx

; 962  : 
; 963  : 		for (i = cube->Model.AnimPolyNum ; i ; i--, wap++)

	mov	eax, DWORD PTR _cube$[ebp]
	movsx	ecx, WORD PTR [eax+96]
	mov	DWORD PTR _i$[ebp], ecx
	jmp	SHORT $L81715
$L81716:
	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	mov	ecx, DWORD PTR _wap$[ebp]
	add	ecx, 8
	mov	DWORD PTR _wap$[ebp], ecx
$L81715:
	cmp	DWORD PTR _i$[ebp], 0
	je	SHORT $L81714

; 964  : 		{
; 965  : 			if ((wap->Anim - TexAnim) < TexAnimNum)

	mov	eax, DWORD PTR _wap$[ebp]
	mov	eax, DWORD PTR [eax+4]
	sub	eax, OFFSET FLAT:?TexAnim@@3PAUTEXANIM_HEADER@@A ; TexAnim
	cdq
	mov	ecx, 20					; 00000014H
	idiv	ecx
	cmp	eax, DWORD PTR ?TexAnimNum@@3JA		; TexAnimNum
	jge	SHORT $L81718

; 966  : 			{
; 967  : 				wap->Poly->Tpage = (short)wap->Anim->CurrentFrame->Tpage;

	mov	eax, DWORD PTR _wap$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _wap$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	dx, WORD PTR [edx]
	mov	WORD PTR [ecx+2], dx

; 968  : 				*(MEM32*)&wap->Poly->tu0 = *(MEM32*)&wap->Anim->CurrentFrame->u0;

	mov	eax, DWORD PTR _wap$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	esi, DWORD PTR [ecx+4]
	add	esi, 8
	mov	edx, DWORD PTR _wap$[ebp]
	mov	edi, DWORD PTR [edx]
	add	edi, 32					; 00000020H
	mov	ecx, 8
	rep movsd
$L81718:

; 969  : 			}
; 970  : 		}

	jmp	SHORT $L81716
$L81714:

; 971  : 	}
; 972  : 
; 973  : // new verts?
; 974  : 
; 975  : 	if (cube->MeshFxFlag & MESHFX_USENEWVERTS)

	mov	eax, DWORD PTR _cube$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	and	ecx, 1
	je	$L81722

; 976  : 	{
; 977  : 
; 978  : // clip
; 979  : 
; 980  : 		if (cube->Clip)

	mov	eax, DWORD PTR _cube$[ebp]
	cmp	DWORD PTR [eax+48], 0
	je	SHORT $L81723

; 981  : 		{
; 982  : 			if (WorldFog) TransCubeVertsFogClipNewVerts(&cube->Model);

	movsx	eax, WORD PTR _WorldFog
	test	eax, eax
	je	SHORT $L81724
	mov	eax, DWORD PTR _cube$[ebp]
	add	eax, 68					; 00000044H
	push	eax
	call	?TransCubeVertsFogClipNewVerts@@YAXPAUWORLD_MODEL@@@Z ; TransCubeVertsFogClipNewVerts
	add	esp, 4

; 983  : 			else TransCubeVertsClipNewVerts(&cube->Model);

	jmp	SHORT $L81725
$L81724:
	mov	eax, DWORD PTR _cube$[ebp]
	add	eax, 68					; 00000044H
	push	eax
	call	?TransCubeVertsClipNewVerts@@YAXPAUWORLD_MODEL@@@Z ; TransCubeVertsClipNewVerts
	add	esp, 4
$L81725:

; 984  : 			DrawCubePolysClip(&cube->Model, cube->Lit);

	mov	eax, DWORD PTR _cube$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	push	ecx
	mov	edx, DWORD PTR _cube$[ebp]
	add	edx, 68					; 00000044H
	push	edx
	call	?DrawCubePolysClip@@YAXPAUWORLD_MODEL@@J@Z ; DrawCubePolysClip
	add	esp, 8

; 985  : 		}
; 986  : 
; 987  : // don't clip
; 988  : 
; 989  : 		else

	jmp	SHORT $L81726
$L81723:

; 990  : 		{
; 991  : 			if (WorldFog) TransCubeVertsFogNewVerts(&cube->Model);

	movsx	eax, WORD PTR _WorldFog
	test	eax, eax
	je	SHORT $L81727
	mov	eax, DWORD PTR _cube$[ebp]
	add	eax, 68					; 00000044H
	push	eax
	call	?TransCubeVertsFogNewVerts@@YAXPAUWORLD_MODEL@@@Z ; TransCubeVertsFogNewVerts
	add	esp, 4

; 992  : 			else TransCubeVertsNewVerts(&cube->Model);

	jmp	SHORT $L81728
$L81727:
	mov	eax, DWORD PTR _cube$[ebp]
	add	eax, 68					; 00000044H
	push	eax
	call	?TransCubeVertsNewVerts@@YAXPAUWORLD_MODEL@@@Z ; TransCubeVertsNewVerts
	add	esp, 4
$L81728:

; 993  : 			DrawCubePolys(&cube->Model, cube->Lit);

	mov	eax, DWORD PTR _cube$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	push	ecx
	mov	edx, DWORD PTR _cube$[ebp]
	add	edx, 68					; 00000044H
	push	edx
	call	?DrawCubePolys@@YAXPAUWORLD_MODEL@@J@Z	; DrawCubePolys
	add	esp, 8
$L81726:

; 994  : 		}
; 995  : 	}
; 996  : 
; 997  : // normal
; 998  : 
; 999  : 	else

	jmp	$L81729
$L81722:

; 1000 : 	{
; 1001 : 
; 1002 : // clip
; 1003 : 
; 1004 : 		if (cube->Clip)

	mov	eax, DWORD PTR _cube$[ebp]
	cmp	DWORD PTR [eax+48], 0
	je	SHORT $L81730

; 1005 : 		{
; 1006 : 			if (WorldFog) TransCubeVertsFogClip(&cube->Model);

	movsx	eax, WORD PTR _WorldFog
	test	eax, eax
	je	SHORT $L81731
	mov	eax, DWORD PTR _cube$[ebp]
	add	eax, 68					; 00000044H
	push	eax
	call	?TransCubeVertsFogClip@@YAXPAUWORLD_MODEL@@@Z ; TransCubeVertsFogClip
	add	esp, 4

; 1007 : 			else TransCubeVertsClip(&cube->Model);

	jmp	SHORT $L81732
$L81731:
	mov	eax, DWORD PTR _cube$[ebp]
	add	eax, 68					; 00000044H
	push	eax
	call	?TransCubeVertsClip@@YAXPAUWORLD_MODEL@@@Z ; TransCubeVertsClip
	add	esp, 4
$L81732:

; 1008 : 			DrawCubePolysClip(&cube->Model, cube->Lit);

	mov	eax, DWORD PTR _cube$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	push	ecx
	mov	edx, DWORD PTR _cube$[ebp]
	add	edx, 68					; 00000044H
	push	edx
	call	?DrawCubePolysClip@@YAXPAUWORLD_MODEL@@J@Z ; DrawCubePolysClip
	add	esp, 8

; 1009 : 		}
; 1010 : 
; 1011 : // don't clip
; 1012 : 
; 1013 : 		else

	jmp	SHORT $L81729
$L81730:

; 1014 : 		{
; 1015 : 			if (WorldFog) TransCubeVertsFog(&cube->Model);

	movsx	eax, WORD PTR _WorldFog
	test	eax, eax
	je	SHORT $L81734
	mov	eax, DWORD PTR _cube$[ebp]
	add	eax, 68					; 00000044H
	push	eax
	call	?TransCubeVertsFog@@YAXPAUWORLD_MODEL@@@Z ; TransCubeVertsFog
	add	esp, 4

; 1016 : 			else TransCubeVerts(&cube->Model);

	jmp	SHORT $L81735
$L81734:
	mov	eax, DWORD PTR _cube$[ebp]
	add	eax, 68					; 00000044H
	push	eax
	call	?TransCubeVerts@@YAXPAUWORLD_MODEL@@@Z	; TransCubeVerts
	add	esp, 4
$L81735:

; 1017 : 			DrawCubePolys(&cube->Model, cube->Lit);

	mov	eax, DWORD PTR _cube$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	push	ecx
	mov	edx, DWORD PTR _cube$[ebp]
	add	edx, 68					; 00000044H
	push	edx
	call	?DrawCubePolys@@YAXPAUWORLD_MODEL@@J@Z	; DrawCubePolys
	add	esp, 8
$L81729:

; 1018 : 		}
; 1019 : 	}
; 1020 : 
; 1021 : // add to poly count
; 1022 : 
; 1023 : 	#if SCREEN_DEBUG
; 1024 : 	WorldPolyCount += cube->Model.QuadNumTex * 2;

	mov	eax, DWORD PTR _cube$[ebp]
	movsx	ecx, WORD PTR [eax+76]
	movsx	edx, WORD PTR ?WorldPolyCount@@3FA	; WorldPolyCount
	lea	eax, DWORD PTR [edx+ecx*2]
	mov	WORD PTR ?WorldPolyCount@@3FA, ax	; WorldPolyCount

; 1025 : 	WorldPolyCount += cube->Model.TriNumTex;

	mov	eax, DWORD PTR _cube$[ebp]
	movsx	ecx, WORD PTR [eax+78]
	movsx	edx, WORD PTR ?WorldPolyCount@@3FA	; WorldPolyCount
	add	edx, ecx
	mov	WORD PTR ?WorldPolyCount@@3FA, dx	; WorldPolyCount

; 1026 : 	WorldPolyCount += cube->Model.QuadNumRGB * 2;

	mov	eax, DWORD PTR _cube$[ebp]
	movsx	ecx, WORD PTR [eax+80]
	movsx	edx, WORD PTR ?WorldPolyCount@@3FA	; WorldPolyCount
	lea	eax, DWORD PTR [edx+ecx*2]
	mov	WORD PTR ?WorldPolyCount@@3FA, ax	; WorldPolyCount

; 1027 : 	WorldPolyCount += cube->Model.TriNumRGB;

	mov	eax, DWORD PTR _cube$[ebp]
	movsx	ecx, WORD PTR [eax+82]
	movsx	edx, WORD PTR ?WorldPolyCount@@3FA	; WorldPolyCount
	add	edx, ecx
	mov	WORD PTR ?WorldPolyCount@@3FA, dx	; WorldPolyCount

; 1028 : 	#endif
; 1029 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?DrawWorldCube@@YAXPAUCUBE_HEADER@@@Z ENDP		; DrawWorldCube
_TEXT	ENDS
PUBLIC	?TransCubeVertsMirror@@YAXPAUWORLD_MODEL@@@Z	; TransCubeVertsMirror
PUBLIC	?TransCubeVertsMirrorNewVerts@@YAXPAUWORLD_MODEL@@@Z ; TransCubeVertsMirrorNewVerts
PUBLIC	?DrawCubePolysMirror@@YAXPAUWORLD_MODEL@@J@Z	; DrawCubePolysMirror
; Function compile flags: /Odt /ZI
;	COMDAT ?DrawWorldCubeMirror@@YAXPAUCUBE_HEADER@@@Z
_TEXT	SEGMENT
_cube$ = 8						; size = 4
?DrawWorldCubeMirror@@YAXPAUCUBE_HEADER@@@Z PROC NEAR	; DrawWorldCubeMirror, COMDAT

; 1036 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 1037 : 	if (cube->MeshFxFlag & MESHFX_USENEWVERTS)

	mov	eax, DWORD PTR _cube$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	and	ecx, 1
	je	SHORT $L81739

; 1038 : 	{
; 1039 : 		TransCubeVertsMirrorNewVerts(&cube->Model);

	mov	eax, DWORD PTR _cube$[ebp]
	add	eax, 68					; 00000044H
	push	eax
	call	?TransCubeVertsMirrorNewVerts@@YAXPAUWORLD_MODEL@@@Z ; TransCubeVertsMirrorNewVerts
	add	esp, 4

; 1040 : 		DrawCubePolysMirror(&cube->Model, cube->Lit);

	mov	eax, DWORD PTR _cube$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	push	ecx
	mov	edx, DWORD PTR _cube$[ebp]
	add	edx, 68					; 00000044H
	push	edx
	call	?DrawCubePolysMirror@@YAXPAUWORLD_MODEL@@J@Z ; DrawCubePolysMirror
	add	esp, 8

; 1041 : 	}
; 1042 : 	else

	jmp	SHORT $L81740
$L81739:

; 1043 : 	{
; 1044 : 		TransCubeVertsMirror(&cube->Model);

	mov	eax, DWORD PTR _cube$[ebp]
	add	eax, 68					; 00000044H
	push	eax
	call	?TransCubeVertsMirror@@YAXPAUWORLD_MODEL@@@Z ; TransCubeVertsMirror
	add	esp, 4

; 1045 : 		DrawCubePolysMirror(&cube->Model, cube->Lit);

	mov	eax, DWORD PTR _cube$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	push	ecx
	mov	edx, DWORD PTR _cube$[ebp]
	add	edx, 68					; 00000044H
	push	edx
	call	?DrawCubePolysMirror@@YAXPAUWORLD_MODEL@@J@Z ; DrawCubePolysMirror
	add	esp, 8
$L81740:

; 1046 : 	}
; 1047 : 
; 1048 : 	#if SCREEN_DEBUG
; 1049 : 	WorldPolyCount += cube->Model.MirrorQuadNumTex * 2;

	mov	eax, DWORD PTR _cube$[ebp]
	movsx	ecx, WORD PTR [eax+88]
	movsx	edx, WORD PTR ?WorldPolyCount@@3FA	; WorldPolyCount
	lea	eax, DWORD PTR [edx+ecx*2]
	mov	WORD PTR ?WorldPolyCount@@3FA, ax	; WorldPolyCount

; 1050 : 	WorldPolyCount += cube->Model.MirrorTriNumTex;

	mov	eax, DWORD PTR _cube$[ebp]
	movsx	ecx, WORD PTR [eax+90]
	movsx	edx, WORD PTR ?WorldPolyCount@@3FA	; WorldPolyCount
	add	edx, ecx
	mov	WORD PTR ?WorldPolyCount@@3FA, dx	; WorldPolyCount

; 1051 : 	WorldPolyCount += cube->Model.MirrorQuadNumRGB * 2;

	mov	eax, DWORD PTR _cube$[ebp]
	movsx	ecx, WORD PTR [eax+92]
	movsx	edx, WORD PTR ?WorldPolyCount@@3FA	; WorldPolyCount
	lea	eax, DWORD PTR [edx+ecx*2]
	mov	WORD PTR ?WorldPolyCount@@3FA, ax	; WorldPolyCount

; 1052 : 	WorldPolyCount += cube->Model.MirrorTriNumRGB;

	mov	eax, DWORD PTR _cube$[ebp]
	movsx	ecx, WORD PTR [eax+94]
	movsx	edx, WORD PTR ?WorldPolyCount@@3FA	; WorldPolyCount
	add	edx, ecx
	mov	WORD PTR ?WorldPolyCount@@3FA, dx	; WorldPolyCount

; 1053 : 	#endif
; 1054 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?DrawWorldCubeMirror@@YAXPAUCUBE_HEADER@@@Z ENDP	; DrawWorldCubeMirror
_TEXT	ENDS
EXTRN	?ViewMatrixScaled@@3TMatrixUnion@@A:BYTE	; ViewMatrixScaled
EXTRN	?ViewTransScaled@@3UVectorStruct@@A:BYTE	; ViewTransScaled
EXTRN	?ScreenLeftClipGuard@@3MA:DWORD			; ScreenLeftClipGuard
EXTRN	?ScreenRightClipGuard@@3MA:DWORD		; ScreenRightClipGuard
EXTRN	?ScreenTopClipGuard@@3MA:DWORD			; ScreenTopClipGuard
EXTRN	?ScreenBottomClipGuard@@3MA:DWORD		; ScreenBottomClipGuard
; Function compile flags: /Odt /ZI
;	COMDAT ?TransCubeVertsClip@@YAXPAUWORLD_MODEL@@@Z
_TEXT	SEGMENT
_mv$ = -12						; size = 4
_z$ = -8						; size = 4
_i$ = -4						; size = 2
_m$ = 8							; size = 4
?TransCubeVertsClip@@YAXPAUWORLD_MODEL@@@Z PROC NEAR	; TransCubeVertsClip, COMDAT

; 1061 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi

; 1062 : 	short i;
; 1063 : 	float z;
; 1064 : 	WORLD_VERTEX *mv;
; 1065 : 
; 1066 : 	mv = m->VertPtr;

	mov	eax, DWORD PTR _m$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	DWORD PTR _mv$[ebp], ecx

; 1067 : 
; 1068 : 	for (i = 0 ; i < m->VertNum ; i++, mv++)

	mov	WORD PTR _i$[ebp], 0
	jmp	SHORT $L81747
$L81748:
	mov	ax, WORD PTR _i$[ebp]
	add	ax, 1
	mov	WORD PTR _i$[ebp], ax
	mov	ecx, DWORD PTR _mv$[ebp]
	add	ecx, 92					; 0000005cH
	mov	DWORD PTR _mv$[ebp], ecx
$L81747:
	movsx	eax, WORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _m$[ebp]
	movsx	edx, WORD PTR [ecx+6]
	cmp	eax, edx
	jge	$L81743

; 1069 : 	{
; 1070 : 		z = mv->x * ViewMatrixScaled.m[RZ] + mv->y * ViewMatrixScaled.m[UZ] + mv->z * ViewMatrixScaled.m[LZ] + ViewTransScaled.v[Z];

	mov	eax, DWORD PTR _mv$[ebp]
	fld	DWORD PTR ?ViewMatrixScaled@@3TMatrixUnion@@A+8
	fmul	DWORD PTR [eax]
	mov	ecx, DWORD PTR _mv$[ebp]
	fld	DWORD PTR ?ViewMatrixScaled@@3TMatrixUnion@@A+20
	fmul	DWORD PTR [ecx+4]
	faddp	ST(1), ST(0)
	mov	edx, DWORD PTR _mv$[ebp]
	fld	DWORD PTR ?ViewMatrixScaled@@3TMatrixUnion@@A+32
	fmul	DWORD PTR [edx+8]
	faddp	ST(1), ST(0)
	fadd	DWORD PTR ?ViewTransScaled@@3UVectorStruct@@A+8
	fstp	DWORD PTR _z$[ebp]

; 1071 : 		if (z < 1) z = 1;

	fld	DWORD PTR _z$[ebp]
	fcomp	DWORD PTR __real@3f800000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L81750
	mov	DWORD PTR _z$[ebp], 1065353216		; 3f800000H
$L81750:

; 1072 : 
; 1073 : 		mv->sx = (mv->x * ViewMatrixScaled.m[RX] + mv->y * ViewMatrixScaled.m[UX] + mv->z * ViewMatrixScaled.m[LX] + ViewTransScaled.v[X]) / z + RenderSettings.GeomCentreX;

	mov	eax, DWORD PTR _mv$[ebp]
	fld	DWORD PTR ?ViewMatrixScaled@@3TMatrixUnion@@A
	fmul	DWORD PTR [eax]
	mov	ecx, DWORD PTR _mv$[ebp]
	fld	DWORD PTR ?ViewMatrixScaled@@3TMatrixUnion@@A+12
	fmul	DWORD PTR [ecx+4]
	faddp	ST(1), ST(0)
	mov	edx, DWORD PTR _mv$[ebp]
	fld	DWORD PTR ?ViewMatrixScaled@@3TMatrixUnion@@A+24
	fmul	DWORD PTR [edx+8]
	faddp	ST(1), ST(0)
	fadd	DWORD PTR ?ViewTransScaled@@3UVectorStruct@@A
	fdiv	DWORD PTR _z$[ebp]
	fadd	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+4
	mov	eax, DWORD PTR _mv$[ebp]
	fstp	DWORD PTR [eax+36]

; 1074 : 		mv->sy = (mv->x * ViewMatrixScaled.m[RY] + mv->y * ViewMatrixScaled.m[UY] + mv->z * ViewMatrixScaled.m[LY] + ViewTransScaled.v[Y]) / z + RenderSettings.GeomCentreY;

	mov	eax, DWORD PTR _mv$[ebp]
	fld	DWORD PTR ?ViewMatrixScaled@@3TMatrixUnion@@A+4
	fmul	DWORD PTR [eax]
	mov	ecx, DWORD PTR _mv$[ebp]
	fld	DWORD PTR ?ViewMatrixScaled@@3TMatrixUnion@@A+16
	fmul	DWORD PTR [ecx+4]
	faddp	ST(1), ST(0)
	mov	edx, DWORD PTR _mv$[ebp]
	fld	DWORD PTR ?ViewMatrixScaled@@3TMatrixUnion@@A+28
	fmul	DWORD PTR [edx+8]
	faddp	ST(1), ST(0)
	fadd	DWORD PTR ?ViewTransScaled@@3UVectorStruct@@A+4
	fdiv	DWORD PTR _z$[ebp]
	fadd	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+8
	mov	eax, DWORD PTR _mv$[ebp]
	fstp	DWORD PTR [eax+40]

; 1075 : 
; 1076 : 		mv->rhw = 1 / z;

	fld	DWORD PTR __real@3f800000
	fdiv	DWORD PTR _z$[ebp]
	mov	eax, DWORD PTR _mv$[ebp]
	fstp	DWORD PTR [eax+48]

; 1077 : 		mv->sz = GET_ZBUFFER(z);

	fld	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+36
	fmul	DWORD PTR _z$[ebp]
	fdivr	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+44
	fsubr	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+40
	mov	eax, DWORD PTR _mv$[ebp]
	fstp	DWORD PTR [eax+44]

; 1078 : 
; 1079 : 		mv->Clip = 0;

	mov	eax, DWORD PTR _mv$[ebp]
	mov	BYTE PTR [eax+88], 0

; 1080 : 		if (mv->sx < ScreenLeftClipGuard) mv->Clip |= 1;

	mov	eax, DWORD PTR _mv$[ebp]
	fld	DWORD PTR [eax+36]
	fcomp	DWORD PTR ?ScreenLeftClipGuard@@3MA	; ScreenLeftClipGuard
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L81751
	mov	eax, DWORD PTR _mv$[ebp]
	movzx	ecx, BYTE PTR [eax+88]
	or	ecx, 1
	mov	edx, DWORD PTR _mv$[ebp]
	mov	BYTE PTR [edx+88], cl

; 1081 : 		else if (mv->sx > ScreenRightClipGuard) mv->Clip |= 2;

	jmp	SHORT $L81752
$L81751:
	mov	eax, DWORD PTR _mv$[ebp]
	fld	DWORD PTR [eax+36]
	fcomp	DWORD PTR ?ScreenRightClipGuard@@3MA	; ScreenRightClipGuard
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $L81752
	mov	eax, DWORD PTR _mv$[ebp]
	movzx	ecx, BYTE PTR [eax+88]
	or	ecx, 2
	mov	edx, DWORD PTR _mv$[ebp]
	mov	BYTE PTR [edx+88], cl
$L81752:

; 1082 : 		if (mv->sy < ScreenTopClipGuard) mv->Clip |= 4;

	mov	eax, DWORD PTR _mv$[ebp]
	fld	DWORD PTR [eax+40]
	fcomp	DWORD PTR ?ScreenTopClipGuard@@3MA	; ScreenTopClipGuard
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L81754
	mov	eax, DWORD PTR _mv$[ebp]
	movzx	ecx, BYTE PTR [eax+88]
	or	ecx, 4
	mov	edx, DWORD PTR _mv$[ebp]
	mov	BYTE PTR [edx+88], cl

; 1083 : 		else if (mv->sy > ScreenBottomClipGuard) mv->Clip |= 8;

	jmp	SHORT $L81755
$L81754:
	mov	eax, DWORD PTR _mv$[ebp]
	fld	DWORD PTR [eax+40]
	fcomp	DWORD PTR ?ScreenBottomClipGuard@@3MA	; ScreenBottomClipGuard
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $L81755
	mov	eax, DWORD PTR _mv$[ebp]
	movzx	ecx, BYTE PTR [eax+88]
	or	ecx, 8
	mov	edx, DWORD PTR _mv$[ebp]
	mov	BYTE PTR [edx+88], cl
$L81755:

; 1084 : 		if (mv->sz < 0) mv->Clip |= 16;

	mov	eax, DWORD PTR _mv$[ebp]
	fld	DWORD PTR [eax+44]
	fcomp	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L81757
	mov	eax, DWORD PTR _mv$[ebp]
	movzx	ecx, BYTE PTR [eax+88]
	or	ecx, 16					; 00000010H
	mov	edx, DWORD PTR _mv$[ebp]
	mov	BYTE PTR [edx+88], cl

; 1085 : 		else if (mv->sz >= 1) mv->Clip |= 32;

	jmp	SHORT $L81758
$L81757:
	mov	eax, DWORD PTR _mv$[ebp]
	fld	DWORD PTR [eax+44]
	fcomp	DWORD PTR __real@3f800000
	fnstsw	ax
	test	ah, 1
	jne	SHORT $L81758
	mov	eax, DWORD PTR _mv$[ebp]
	movzx	ecx, BYTE PTR [eax+88]
	or	ecx, 32					; 00000020H
	mov	edx, DWORD PTR _mv$[ebp]
	mov	BYTE PTR [edx+88], cl
$L81758:

; 1086 : 	}

	jmp	$L81748
$L81743:

; 1087 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?TransCubeVertsClip@@YAXPAUWORLD_MODEL@@@Z ENDP		; TransCubeVertsClip
; Function compile flags: /Odt /ZI
_TEXT	ENDS
;	COMDAT ?TransCubeVertsFogClip@@YAXPAUWORLD_MODEL@@@Z
_TEXT	SEGMENT
_mv$ = -16						; size = 4
_fog$ = -12						; size = 4
_z$ = -8						; size = 4
_i$ = -4						; size = 2
_m$ = 8							; size = 4
?TransCubeVertsFogClip@@YAXPAUWORLD_MODEL@@@Z PROC NEAR	; TransCubeVertsFogClip, COMDAT

; 1094 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi

; 1095 : 	short i;
; 1096 : 	float z;
; 1097 : 	float fog;
; 1098 : 	WORLD_VERTEX *mv;
; 1099 : 
; 1100 : 	mv = m->VertPtr;

	mov	eax, DWORD PTR _m$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	DWORD PTR _mv$[ebp], ecx

; 1101 : 
; 1102 : 	for (i = 0 ; i < m->VertNum ; i++, mv++)

	mov	WORD PTR _i$[ebp], 0
	jmp	SHORT $L81767
$L81768:
	mov	ax, WORD PTR _i$[ebp]
	add	ax, 1
	mov	WORD PTR _i$[ebp], ax
	mov	ecx, DWORD PTR _mv$[ebp]
	add	ecx, 92					; 0000005cH
	mov	DWORD PTR _mv$[ebp], ecx
$L81767:
	movsx	eax, WORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _m$[ebp]
	movsx	edx, WORD PTR [ecx+6]
	cmp	eax, edx
	jge	$L81762

; 1103 : 	{
; 1104 : 		z = mv->x * ViewMatrixScaled.m[RZ] + mv->y * ViewMatrixScaled.m[UZ] + mv->z * ViewMatrixScaled.m[LZ] + ViewTransScaled.v[Z];

	mov	eax, DWORD PTR _mv$[ebp]
	fld	DWORD PTR ?ViewMatrixScaled@@3TMatrixUnion@@A+8
	fmul	DWORD PTR [eax]
	mov	ecx, DWORD PTR _mv$[ebp]
	fld	DWORD PTR ?ViewMatrixScaled@@3TMatrixUnion@@A+20
	fmul	DWORD PTR [ecx+4]
	faddp	ST(1), ST(0)
	mov	edx, DWORD PTR _mv$[ebp]
	fld	DWORD PTR ?ViewMatrixScaled@@3TMatrixUnion@@A+32
	fmul	DWORD PTR [edx+8]
	faddp	ST(1), ST(0)
	fadd	DWORD PTR ?ViewTransScaled@@3UVectorStruct@@A+8
	fstp	DWORD PTR _z$[ebp]

; 1105 : 		if (z < 1) z = 1;

	fld	DWORD PTR _z$[ebp]
	fcomp	DWORD PTR __real@3f800000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L81770
	mov	DWORD PTR _z$[ebp], 1065353216		; 3f800000H
$L81770:

; 1106 : 
; 1107 : 		mv->sx = (mv->x * ViewMatrixScaled.m[RX] + mv->y * ViewMatrixScaled.m[UX] + mv->z * ViewMatrixScaled.m[LX] + ViewTransScaled.v[X]) / z + RenderSettings.GeomCentreX;

	mov	eax, DWORD PTR _mv$[ebp]
	fld	DWORD PTR ?ViewMatrixScaled@@3TMatrixUnion@@A
	fmul	DWORD PTR [eax]
	mov	ecx, DWORD PTR _mv$[ebp]
	fld	DWORD PTR ?ViewMatrixScaled@@3TMatrixUnion@@A+12
	fmul	DWORD PTR [ecx+4]
	faddp	ST(1), ST(0)
	mov	edx, DWORD PTR _mv$[ebp]
	fld	DWORD PTR ?ViewMatrixScaled@@3TMatrixUnion@@A+24
	fmul	DWORD PTR [edx+8]
	faddp	ST(1), ST(0)
	fadd	DWORD PTR ?ViewTransScaled@@3UVectorStruct@@A
	fdiv	DWORD PTR _z$[ebp]
	fadd	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+4
	mov	eax, DWORD PTR _mv$[ebp]
	fstp	DWORD PTR [eax+36]

; 1108 : 		mv->sy = (mv->x * ViewMatrixScaled.m[RY] + mv->y * ViewMatrixScaled.m[UY] + mv->z * ViewMatrixScaled.m[LY] + ViewTransScaled.v[Y]) / z + RenderSettings.GeomCentreY;

	mov	eax, DWORD PTR _mv$[ebp]
	fld	DWORD PTR ?ViewMatrixScaled@@3TMatrixUnion@@A+4
	fmul	DWORD PTR [eax]
	mov	ecx, DWORD PTR _mv$[ebp]
	fld	DWORD PTR ?ViewMatrixScaled@@3TMatrixUnion@@A+16
	fmul	DWORD PTR [ecx+4]
	faddp	ST(1), ST(0)
	mov	edx, DWORD PTR _mv$[ebp]
	fld	DWORD PTR ?ViewMatrixScaled@@3TMatrixUnion@@A+28
	fmul	DWORD PTR [edx+8]
	faddp	ST(1), ST(0)
	fadd	DWORD PTR ?ViewTransScaled@@3UVectorStruct@@A+4
	fdiv	DWORD PTR _z$[ebp]
	fadd	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+8
	mov	eax, DWORD PTR _mv$[ebp]
	fstp	DWORD PTR [eax+40]

; 1109 : 
; 1110 : 		mv->rhw = 1 / z;

	fld	DWORD PTR __real@3f800000
	fdiv	DWORD PTR _z$[ebp]
	mov	eax, DWORD PTR _mv$[ebp]
	fstp	DWORD PTR [eax+48]

; 1111 : 		mv->sz = GET_ZBUFFER(z);

	fld	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+36
	fmul	DWORD PTR _z$[ebp]
	fdivr	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+44
	fsubr	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+40
	mov	eax, DWORD PTR _mv$[ebp]
	fstp	DWORD PTR [eax+44]

; 1112 : 
; 1113 : 		fog = (RenderSettings.FarClip - z) * RenderSettings.FogMul;

	fld	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+32
	fsub	DWORD PTR _z$[ebp]
	fmul	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+56
	fstp	DWORD PTR _fog$[ebp]

; 1114 : 		if (fog > 255) fog = 255;

	fld	DWORD PTR _fog$[ebp]
	fcomp	DWORD PTR __real@437f0000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $L81771
	mov	DWORD PTR _fog$[ebp], 1132396544	; 437f0000H
$L81771:

; 1115 : 		fog -= mv->VertFog;

	mov	eax, DWORD PTR _mv$[ebp]
	fld	DWORD PTR _fog$[ebp]
	fsub	DWORD PTR [eax+84]
	fstp	DWORD PTR _fog$[ebp]

; 1116 : 		if (fog < 0) fog = 0;

	fld	DWORD PTR _fog$[ebp]
	fcomp	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L81772
	mov	DWORD PTR _fog$[ebp], 0
$L81772:

; 1117 : 		mv->specular = FTOL3(fog) << 24;

	fld	DWORD PTR _fog$[ebp]
	fadd	DWORD PTR __real@4b000000
	fstp	DWORD PTR _fog$[ebp]
	mov	eax, DWORD PTR _fog$[ebp]
	shl	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _mv$[ebp]
	mov	DWORD PTR [ecx+56], eax

; 1118 : 
; 1119 : 		mv->Clip = 0;

	mov	eax, DWORD PTR _mv$[ebp]
	mov	BYTE PTR [eax+88], 0

; 1120 : 		if (mv->sx < ScreenLeftClipGuard) mv->Clip |= 1;

	mov	eax, DWORD PTR _mv$[ebp]
	fld	DWORD PTR [eax+36]
	fcomp	DWORD PTR ?ScreenLeftClipGuard@@3MA	; ScreenLeftClipGuard
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L81775
	mov	eax, DWORD PTR _mv$[ebp]
	movzx	ecx, BYTE PTR [eax+88]
	or	ecx, 1
	mov	edx, DWORD PTR _mv$[ebp]
	mov	BYTE PTR [edx+88], cl

; 1121 : 		else if (mv->sx > ScreenRightClipGuard) mv->Clip |= 2;

	jmp	SHORT $L81776
$L81775:
	mov	eax, DWORD PTR _mv$[ebp]
	fld	DWORD PTR [eax+36]
	fcomp	DWORD PTR ?ScreenRightClipGuard@@3MA	; ScreenRightClipGuard
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $L81776
	mov	eax, DWORD PTR _mv$[ebp]
	movzx	ecx, BYTE PTR [eax+88]
	or	ecx, 2
	mov	edx, DWORD PTR _mv$[ebp]
	mov	BYTE PTR [edx+88], cl
$L81776:

; 1122 : 		if (mv->sy < ScreenTopClipGuard) mv->Clip |= 4;

	mov	eax, DWORD PTR _mv$[ebp]
	fld	DWORD PTR [eax+40]
	fcomp	DWORD PTR ?ScreenTopClipGuard@@3MA	; ScreenTopClipGuard
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L81778
	mov	eax, DWORD PTR _mv$[ebp]
	movzx	ecx, BYTE PTR [eax+88]
	or	ecx, 4
	mov	edx, DWORD PTR _mv$[ebp]
	mov	BYTE PTR [edx+88], cl

; 1123 : 		else if (mv->sy > ScreenBottomClipGuard) mv->Clip |= 8;

	jmp	SHORT $L81779
$L81778:
	mov	eax, DWORD PTR _mv$[ebp]
	fld	DWORD PTR [eax+40]
	fcomp	DWORD PTR ?ScreenBottomClipGuard@@3MA	; ScreenBottomClipGuard
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $L81779
	mov	eax, DWORD PTR _mv$[ebp]
	movzx	ecx, BYTE PTR [eax+88]
	or	ecx, 8
	mov	edx, DWORD PTR _mv$[ebp]
	mov	BYTE PTR [edx+88], cl
$L81779:

; 1124 : 		if (mv->sz < 0) mv->Clip |= 16;

	mov	eax, DWORD PTR _mv$[ebp]
	fld	DWORD PTR [eax+44]
	fcomp	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L81781
	mov	eax, DWORD PTR _mv$[ebp]
	movzx	ecx, BYTE PTR [eax+88]
	or	ecx, 16					; 00000010H
	mov	edx, DWORD PTR _mv$[ebp]
	mov	BYTE PTR [edx+88], cl

; 1125 : 		else if (mv->sz >= 1) mv->Clip |= 32;

	jmp	SHORT $L81782
$L81781:
	mov	eax, DWORD PTR _mv$[ebp]
	fld	DWORD PTR [eax+44]
	fcomp	DWORD PTR __real@3f800000
	fnstsw	ax
	test	ah, 1
	jne	SHORT $L81782
	mov	eax, DWORD PTR _mv$[ebp]
	movzx	ecx, BYTE PTR [eax+88]
	or	ecx, 32					; 00000020H
	mov	edx, DWORD PTR _mv$[ebp]
	mov	BYTE PTR [edx+88], cl
$L81782:

; 1126 : 	}

	jmp	$L81768
$L81762:

; 1127 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?TransCubeVertsFogClip@@YAXPAUWORLD_MODEL@@@Z ENDP	; TransCubeVertsFogClip
; Function compile flags: /Odt /ZI
_TEXT	ENDS
;	COMDAT ?TransCubeVerts@@YAXPAUWORLD_MODEL@@@Z
_TEXT	SEGMENT
_mv$ = -12						; size = 4
_z$ = -8						; size = 4
_i$ = -4						; size = 2
_m$ = 8							; size = 4
?TransCubeVerts@@YAXPAUWORLD_MODEL@@@Z PROC NEAR	; TransCubeVerts, COMDAT

; 1134 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi

; 1135 : 	short i;
; 1136 : 	float z;
; 1137 : 	WORLD_VERTEX *mv;
; 1138 : 
; 1139 : 	mv = m->VertPtr;

	mov	eax, DWORD PTR _m$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	DWORD PTR _mv$[ebp], ecx

; 1140 : 
; 1141 : 	for (i = 0 ; i < m->VertNum ; i++, mv++)

	mov	WORD PTR _i$[ebp], 0
	jmp	SHORT $L81790
$L81791:
	mov	ax, WORD PTR _i$[ebp]
	add	ax, 1
	mov	WORD PTR _i$[ebp], ax
	mov	ecx, DWORD PTR _mv$[ebp]
	add	ecx, 92					; 0000005cH
	mov	DWORD PTR _mv$[ebp], ecx
$L81790:
	movsx	eax, WORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _m$[ebp]
	movsx	edx, WORD PTR [ecx+6]
	cmp	eax, edx
	jge	$L81786

; 1142 : 	{
; 1143 : 		z = mv->x * ViewMatrixScaled.m[RZ] + mv->y * ViewMatrixScaled.m[UZ] + mv->z * ViewMatrixScaled.m[LZ] + ViewTransScaled.v[Z];

	mov	eax, DWORD PTR _mv$[ebp]
	fld	DWORD PTR ?ViewMatrixScaled@@3TMatrixUnion@@A+8
	fmul	DWORD PTR [eax]
	mov	ecx, DWORD PTR _mv$[ebp]
	fld	DWORD PTR ?ViewMatrixScaled@@3TMatrixUnion@@A+20
	fmul	DWORD PTR [ecx+4]
	faddp	ST(1), ST(0)
	mov	edx, DWORD PTR _mv$[ebp]
	fld	DWORD PTR ?ViewMatrixScaled@@3TMatrixUnion@@A+32
	fmul	DWORD PTR [edx+8]
	faddp	ST(1), ST(0)
	fadd	DWORD PTR ?ViewTransScaled@@3UVectorStruct@@A+8
	fstp	DWORD PTR _z$[ebp]

; 1144 : 		mv->rhw = 1 / z;

	fld	DWORD PTR __real@3f800000
	fdiv	DWORD PTR _z$[ebp]
	mov	eax, DWORD PTR _mv$[ebp]
	fstp	DWORD PTR [eax+48]

; 1145 : 
; 1146 : 		mv->sx = (mv->x * ViewMatrixScaled.m[RX] + mv->y * ViewMatrixScaled.m[UX] + mv->z * ViewMatrixScaled.m[LX] + ViewTransScaled.v[X]) / z + RenderSettings.GeomCentreX;

	mov	eax, DWORD PTR _mv$[ebp]
	fld	DWORD PTR ?ViewMatrixScaled@@3TMatrixUnion@@A
	fmul	DWORD PTR [eax]
	mov	ecx, DWORD PTR _mv$[ebp]
	fld	DWORD PTR ?ViewMatrixScaled@@3TMatrixUnion@@A+12
	fmul	DWORD PTR [ecx+4]
	faddp	ST(1), ST(0)
	mov	edx, DWORD PTR _mv$[ebp]
	fld	DWORD PTR ?ViewMatrixScaled@@3TMatrixUnion@@A+24
	fmul	DWORD PTR [edx+8]
	faddp	ST(1), ST(0)
	fadd	DWORD PTR ?ViewTransScaled@@3UVectorStruct@@A
	fdiv	DWORD PTR _z$[ebp]
	fadd	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+4
	mov	eax, DWORD PTR _mv$[ebp]
	fstp	DWORD PTR [eax+36]

; 1147 : 		mv->sy = (mv->x * ViewMatrixScaled.m[RY] + mv->y * ViewMatrixScaled.m[UY] + mv->z * ViewMatrixScaled.m[LY] + ViewTransScaled.v[Y]) / z + RenderSettings.GeomCentreY;

	mov	eax, DWORD PTR _mv$[ebp]
	fld	DWORD PTR ?ViewMatrixScaled@@3TMatrixUnion@@A+4
	fmul	DWORD PTR [eax]
	mov	ecx, DWORD PTR _mv$[ebp]
	fld	DWORD PTR ?ViewMatrixScaled@@3TMatrixUnion@@A+16
	fmul	DWORD PTR [ecx+4]
	faddp	ST(1), ST(0)
	mov	edx, DWORD PTR _mv$[ebp]
	fld	DWORD PTR ?ViewMatrixScaled@@3TMatrixUnion@@A+28
	fmul	DWORD PTR [edx+8]
	faddp	ST(1), ST(0)
	fadd	DWORD PTR ?ViewTransScaled@@3UVectorStruct@@A+4
	fdiv	DWORD PTR _z$[ebp]
	fadd	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+8
	mov	eax, DWORD PTR _mv$[ebp]
	fstp	DWORD PTR [eax+40]

; 1148 : 
; 1149 : 		mv->sz = GET_ZBUFFER(z);

	fld	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+36
	fmul	DWORD PTR _z$[ebp]
	fdivr	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+44
	fsubr	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+40
	mov	eax, DWORD PTR _mv$[ebp]
	fstp	DWORD PTR [eax+44]

; 1150 : 	}

	jmp	$L81791
$L81786:

; 1151 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?TransCubeVerts@@YAXPAUWORLD_MODEL@@@Z ENDP		; TransCubeVerts
; Function compile flags: /Odt /ZI
_TEXT	ENDS
;	COMDAT ?TransCubeVertsFog@@YAXPAUWORLD_MODEL@@@Z
_TEXT	SEGMENT
_mv$ = -16						; size = 4
_fog$ = -12						; size = 4
_z$ = -8						; size = 4
_i$ = -4						; size = 2
_m$ = 8							; size = 4
?TransCubeVertsFog@@YAXPAUWORLD_MODEL@@@Z PROC NEAR	; TransCubeVertsFog, COMDAT

; 1158 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi

; 1159 : 	short i;
; 1160 : 	float z;
; 1161 : 	float fog;
; 1162 : 	WORLD_VERTEX *mv;
; 1163 : 
; 1164 : 	mv = m->VertPtr;

	mov	eax, DWORD PTR _m$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	DWORD PTR _mv$[ebp], ecx

; 1165 : 
; 1166 : 	for (i = 0 ; i < m->VertNum ; i++, mv++)

	mov	WORD PTR _i$[ebp], 0
	jmp	SHORT $L81800
$L81801:
	mov	ax, WORD PTR _i$[ebp]
	add	ax, 1
	mov	WORD PTR _i$[ebp], ax
	mov	ecx, DWORD PTR _mv$[ebp]
	add	ecx, 92					; 0000005cH
	mov	DWORD PTR _mv$[ebp], ecx
$L81800:
	movsx	eax, WORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _m$[ebp]
	movsx	edx, WORD PTR [ecx+6]
	cmp	eax, edx
	jge	$L81795

; 1167 : 	{
; 1168 : 		z = mv->x * ViewMatrixScaled.m[RZ] + mv->y * ViewMatrixScaled.m[UZ] + mv->z * ViewMatrixScaled.m[LZ] + ViewTransScaled.v[Z];

	mov	eax, DWORD PTR _mv$[ebp]
	fld	DWORD PTR ?ViewMatrixScaled@@3TMatrixUnion@@A+8
	fmul	DWORD PTR [eax]
	mov	ecx, DWORD PTR _mv$[ebp]
	fld	DWORD PTR ?ViewMatrixScaled@@3TMatrixUnion@@A+20
	fmul	DWORD PTR [ecx+4]
	faddp	ST(1), ST(0)
	mov	edx, DWORD PTR _mv$[ebp]
	fld	DWORD PTR ?ViewMatrixScaled@@3TMatrixUnion@@A+32
	fmul	DWORD PTR [edx+8]
	faddp	ST(1), ST(0)
	fadd	DWORD PTR ?ViewTransScaled@@3UVectorStruct@@A+8
	fstp	DWORD PTR _z$[ebp]

; 1169 : 		mv->rhw = 1 / z;

	fld	DWORD PTR __real@3f800000
	fdiv	DWORD PTR _z$[ebp]
	mov	eax, DWORD PTR _mv$[ebp]
	fstp	DWORD PTR [eax+48]

; 1170 : 
; 1171 : 		mv->sx = (mv->x * ViewMatrixScaled.m[RX] + mv->y * ViewMatrixScaled.m[UX] + mv->z * ViewMatrixScaled.m[LX] + ViewTransScaled.v[X]) / z + RenderSettings.GeomCentreX;

	mov	eax, DWORD PTR _mv$[ebp]
	fld	DWORD PTR ?ViewMatrixScaled@@3TMatrixUnion@@A
	fmul	DWORD PTR [eax]
	mov	ecx, DWORD PTR _mv$[ebp]
	fld	DWORD PTR ?ViewMatrixScaled@@3TMatrixUnion@@A+12
	fmul	DWORD PTR [ecx+4]
	faddp	ST(1), ST(0)
	mov	edx, DWORD PTR _mv$[ebp]
	fld	DWORD PTR ?ViewMatrixScaled@@3TMatrixUnion@@A+24
	fmul	DWORD PTR [edx+8]
	faddp	ST(1), ST(0)
	fadd	DWORD PTR ?ViewTransScaled@@3UVectorStruct@@A
	fdiv	DWORD PTR _z$[ebp]
	fadd	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+4
	mov	eax, DWORD PTR _mv$[ebp]
	fstp	DWORD PTR [eax+36]

; 1172 : 		mv->sy = (mv->x * ViewMatrixScaled.m[RY] + mv->y * ViewMatrixScaled.m[UY] + mv->z * ViewMatrixScaled.m[LY] + ViewTransScaled.v[Y]) / z + RenderSettings.GeomCentreY;

	mov	eax, DWORD PTR _mv$[ebp]
	fld	DWORD PTR ?ViewMatrixScaled@@3TMatrixUnion@@A+4
	fmul	DWORD PTR [eax]
	mov	ecx, DWORD PTR _mv$[ebp]
	fld	DWORD PTR ?ViewMatrixScaled@@3TMatrixUnion@@A+16
	fmul	DWORD PTR [ecx+4]
	faddp	ST(1), ST(0)
	mov	edx, DWORD PTR _mv$[ebp]
	fld	DWORD PTR ?ViewMatrixScaled@@3TMatrixUnion@@A+28
	fmul	DWORD PTR [edx+8]
	faddp	ST(1), ST(0)
	fadd	DWORD PTR ?ViewTransScaled@@3UVectorStruct@@A+4
	fdiv	DWORD PTR _z$[ebp]
	fadd	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+8
	mov	eax, DWORD PTR _mv$[ebp]
	fstp	DWORD PTR [eax+40]

; 1173 : 
; 1174 : 		mv->sz = GET_ZBUFFER(z);

	fld	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+36
	fmul	DWORD PTR _z$[ebp]
	fdivr	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+44
	fsubr	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+40
	mov	eax, DWORD PTR _mv$[ebp]
	fstp	DWORD PTR [eax+44]

; 1175 : 
; 1176 : 		fog = (RenderSettings.FarClip - z) * RenderSettings.FogMul;

	fld	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+32
	fsub	DWORD PTR _z$[ebp]
	fmul	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+56
	fstp	DWORD PTR _fog$[ebp]

; 1177 : 		if (fog > 255) fog = 255;

	fld	DWORD PTR _fog$[ebp]
	fcomp	DWORD PTR __real@437f0000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $L81803
	mov	DWORD PTR _fog$[ebp], 1132396544	; 437f0000H
$L81803:

; 1178 : 		fog -= mv->VertFog;

	mov	eax, DWORD PTR _mv$[ebp]
	fld	DWORD PTR _fog$[ebp]
	fsub	DWORD PTR [eax+84]
	fstp	DWORD PTR _fog$[ebp]

; 1179 : 		if (fog < 0) fog = 0;

	fld	DWORD PTR _fog$[ebp]
	fcomp	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L81804
	mov	DWORD PTR _fog$[ebp], 0
$L81804:

; 1180 : 		mv->specular = FTOL3(fog) << 24;

	fld	DWORD PTR _fog$[ebp]
	fadd	DWORD PTR __real@4b000000
	fstp	DWORD PTR _fog$[ebp]
	mov	eax, DWORD PTR _fog$[ebp]
	shl	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _mv$[ebp]
	mov	DWORD PTR [ecx+56], eax

; 1181 : 	}

	jmp	$L81801
$L81795:

; 1182 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?TransCubeVertsFog@@YAXPAUWORLD_MODEL@@@Z ENDP		; TransCubeVertsFog
; Function compile flags: /Odt /ZI
_TEXT	ENDS
;	COMDAT ?TransCubeVertsClipNewVerts@@YAXPAUWORLD_MODEL@@@Z
_TEXT	SEGMENT
_mv$ = -12						; size = 4
_z$ = -8						; size = 4
_i$ = -4						; size = 2
_m$ = 8							; size = 4
?TransCubeVertsClipNewVerts@@YAXPAUWORLD_MODEL@@@Z PROC NEAR ; TransCubeVertsClipNewVerts, COMDAT

; 1189 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi

; 1190 : 	short i;
; 1191 : 	float z;
; 1192 : 	WORLD_VERTEX *mv;
; 1193 : 
; 1194 : 	mv = m->VertPtr;

	mov	eax, DWORD PTR _m$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	DWORD PTR _mv$[ebp], ecx

; 1195 : 
; 1196 : 	for (i = 0 ; i < m->VertNum ; i++, mv++)

	mov	WORD PTR _i$[ebp], 0
	jmp	SHORT $L81813
$L81814:
	mov	ax, WORD PTR _i$[ebp]
	add	ax, 1
	mov	WORD PTR _i$[ebp], ax
	mov	ecx, DWORD PTR _mv$[ebp]
	add	ecx, 92					; 0000005cH
	mov	DWORD PTR _mv$[ebp], ecx
$L81813:
	movsx	eax, WORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _m$[ebp]
	movsx	edx, WORD PTR [ecx+6]
	cmp	eax, edx
	jge	$L81809

; 1197 : 	{
; 1198 : 		z = mv->x2 * ViewMatrixScaled.m[RZ] + mv->y2 * ViewMatrixScaled.m[UZ] + mv->z2 * ViewMatrixScaled.m[LZ] + ViewTransScaled.v[Z];

	mov	eax, DWORD PTR _mv$[ebp]
	fld	DWORD PTR ?ViewMatrixScaled@@3TMatrixUnion@@A+8
	fmul	DWORD PTR [eax+12]
	mov	ecx, DWORD PTR _mv$[ebp]
	fld	DWORD PTR ?ViewMatrixScaled@@3TMatrixUnion@@A+20
	fmul	DWORD PTR [ecx+16]
	faddp	ST(1), ST(0)
	mov	edx, DWORD PTR _mv$[ebp]
	fld	DWORD PTR ?ViewMatrixScaled@@3TMatrixUnion@@A+32
	fmul	DWORD PTR [edx+20]
	faddp	ST(1), ST(0)
	fadd	DWORD PTR ?ViewTransScaled@@3UVectorStruct@@A+8
	fstp	DWORD PTR _z$[ebp]

; 1199 : 		if (z < 1) z = 1;

	fld	DWORD PTR _z$[ebp]
	fcomp	DWORD PTR __real@3f800000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L81816
	mov	DWORD PTR _z$[ebp], 1065353216		; 3f800000H
$L81816:

; 1200 : 
; 1201 : 		mv->sx = (mv->x2 * ViewMatrixScaled.m[RX] + mv->y2 * ViewMatrixScaled.m[UX] + mv->z2 * ViewMatrixScaled.m[LX] + ViewTransScaled.v[X]) / z + RenderSettings.GeomCentreX;

	mov	eax, DWORD PTR _mv$[ebp]
	fld	DWORD PTR ?ViewMatrixScaled@@3TMatrixUnion@@A
	fmul	DWORD PTR [eax+12]
	mov	ecx, DWORD PTR _mv$[ebp]
	fld	DWORD PTR ?ViewMatrixScaled@@3TMatrixUnion@@A+12
	fmul	DWORD PTR [ecx+16]
	faddp	ST(1), ST(0)
	mov	edx, DWORD PTR _mv$[ebp]
	fld	DWORD PTR ?ViewMatrixScaled@@3TMatrixUnion@@A+24
	fmul	DWORD PTR [edx+20]
	faddp	ST(1), ST(0)
	fadd	DWORD PTR ?ViewTransScaled@@3UVectorStruct@@A
	fdiv	DWORD PTR _z$[ebp]
	fadd	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+4
	mov	eax, DWORD PTR _mv$[ebp]
	fstp	DWORD PTR [eax+36]

; 1202 : 		mv->sy = (mv->x2 * ViewMatrixScaled.m[RY] + mv->y2 * ViewMatrixScaled.m[UY] + mv->z2 * ViewMatrixScaled.m[LY] + ViewTransScaled.v[Y]) / z + RenderSettings.GeomCentreY;

	mov	eax, DWORD PTR _mv$[ebp]
	fld	DWORD PTR ?ViewMatrixScaled@@3TMatrixUnion@@A+4
	fmul	DWORD PTR [eax+12]
	mov	ecx, DWORD PTR _mv$[ebp]
	fld	DWORD PTR ?ViewMatrixScaled@@3TMatrixUnion@@A+16
	fmul	DWORD PTR [ecx+16]
	faddp	ST(1), ST(0)
	mov	edx, DWORD PTR _mv$[ebp]
	fld	DWORD PTR ?ViewMatrixScaled@@3TMatrixUnion@@A+28
	fmul	DWORD PTR [edx+20]
	faddp	ST(1), ST(0)
	fadd	DWORD PTR ?ViewTransScaled@@3UVectorStruct@@A+4
	fdiv	DWORD PTR _z$[ebp]
	fadd	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+8
	mov	eax, DWORD PTR _mv$[ebp]
	fstp	DWORD PTR [eax+40]

; 1203 : 
; 1204 : 		mv->rhw = 1 / z;

	fld	DWORD PTR __real@3f800000
	fdiv	DWORD PTR _z$[ebp]
	mov	eax, DWORD PTR _mv$[ebp]
	fstp	DWORD PTR [eax+48]

; 1205 : 		mv->sz = GET_ZBUFFER(z);

	fld	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+36
	fmul	DWORD PTR _z$[ebp]
	fdivr	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+44
	fsubr	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+40
	mov	eax, DWORD PTR _mv$[ebp]
	fstp	DWORD PTR [eax+44]

; 1206 : 
; 1207 : 		mv->Clip = 0;

	mov	eax, DWORD PTR _mv$[ebp]
	mov	BYTE PTR [eax+88], 0

; 1208 : 		if (mv->sx < ScreenLeftClipGuard) mv->Clip |= 1;

	mov	eax, DWORD PTR _mv$[ebp]
	fld	DWORD PTR [eax+36]
	fcomp	DWORD PTR ?ScreenLeftClipGuard@@3MA	; ScreenLeftClipGuard
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L81817
	mov	eax, DWORD PTR _mv$[ebp]
	movzx	ecx, BYTE PTR [eax+88]
	or	ecx, 1
	mov	edx, DWORD PTR _mv$[ebp]
	mov	BYTE PTR [edx+88], cl

; 1209 : 		else if (mv->sx > ScreenRightClipGuard) mv->Clip |= 2;

	jmp	SHORT $L81818
$L81817:
	mov	eax, DWORD PTR _mv$[ebp]
	fld	DWORD PTR [eax+36]
	fcomp	DWORD PTR ?ScreenRightClipGuard@@3MA	; ScreenRightClipGuard
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $L81818
	mov	eax, DWORD PTR _mv$[ebp]
	movzx	ecx, BYTE PTR [eax+88]
	or	ecx, 2
	mov	edx, DWORD PTR _mv$[ebp]
	mov	BYTE PTR [edx+88], cl
$L81818:

; 1210 : 		if (mv->sy < ScreenTopClipGuard) mv->Clip |= 4;

	mov	eax, DWORD PTR _mv$[ebp]
	fld	DWORD PTR [eax+40]
	fcomp	DWORD PTR ?ScreenTopClipGuard@@3MA	; ScreenTopClipGuard
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L81820
	mov	eax, DWORD PTR _mv$[ebp]
	movzx	ecx, BYTE PTR [eax+88]
	or	ecx, 4
	mov	edx, DWORD PTR _mv$[ebp]
	mov	BYTE PTR [edx+88], cl

; 1211 : 		else if (mv->sy > ScreenBottomClipGuard) mv->Clip |= 8;

	jmp	SHORT $L81821
$L81820:
	mov	eax, DWORD PTR _mv$[ebp]
	fld	DWORD PTR [eax+40]
	fcomp	DWORD PTR ?ScreenBottomClipGuard@@3MA	; ScreenBottomClipGuard
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $L81821
	mov	eax, DWORD PTR _mv$[ebp]
	movzx	ecx, BYTE PTR [eax+88]
	or	ecx, 8
	mov	edx, DWORD PTR _mv$[ebp]
	mov	BYTE PTR [edx+88], cl
$L81821:

; 1212 : 		if (mv->sz < 0) mv->Clip |= 16;

	mov	eax, DWORD PTR _mv$[ebp]
	fld	DWORD PTR [eax+44]
	fcomp	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L81823
	mov	eax, DWORD PTR _mv$[ebp]
	movzx	ecx, BYTE PTR [eax+88]
	or	ecx, 16					; 00000010H
	mov	edx, DWORD PTR _mv$[ebp]
	mov	BYTE PTR [edx+88], cl

; 1213 : 		else if (mv->sz >= 1) mv->Clip |= 32;

	jmp	SHORT $L81824
$L81823:
	mov	eax, DWORD PTR _mv$[ebp]
	fld	DWORD PTR [eax+44]
	fcomp	DWORD PTR __real@3f800000
	fnstsw	ax
	test	ah, 1
	jne	SHORT $L81824
	mov	eax, DWORD PTR _mv$[ebp]
	movzx	ecx, BYTE PTR [eax+88]
	or	ecx, 32					; 00000020H
	mov	edx, DWORD PTR _mv$[ebp]
	mov	BYTE PTR [edx+88], cl
$L81824:

; 1214 : 	}

	jmp	$L81814
$L81809:

; 1215 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?TransCubeVertsClipNewVerts@@YAXPAUWORLD_MODEL@@@Z ENDP	; TransCubeVertsClipNewVerts
; Function compile flags: /Odt /ZI
_TEXT	ENDS
;	COMDAT ?TransCubeVertsFogClipNewVerts@@YAXPAUWORLD_MODEL@@@Z
_TEXT	SEGMENT
_mv$ = -16						; size = 4
_fog$ = -12						; size = 4
_z$ = -8						; size = 4
_i$ = -4						; size = 2
_m$ = 8							; size = 4
?TransCubeVertsFogClipNewVerts@@YAXPAUWORLD_MODEL@@@Z PROC NEAR ; TransCubeVertsFogClipNewVerts, COMDAT

; 1222 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi

; 1223 : 	short i;
; 1224 : 	float z;
; 1225 : 	float fog;
; 1226 : 	WORLD_VERTEX *mv;
; 1227 : 
; 1228 : 	mv = m->VertPtr;

	mov	eax, DWORD PTR _m$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	DWORD PTR _mv$[ebp], ecx

; 1229 : 
; 1230 : 	for (i = 0 ; i < m->VertNum ; i++, mv++)

	mov	WORD PTR _i$[ebp], 0
	jmp	SHORT $L81833
$L81834:
	mov	ax, WORD PTR _i$[ebp]
	add	ax, 1
	mov	WORD PTR _i$[ebp], ax
	mov	ecx, DWORD PTR _mv$[ebp]
	add	ecx, 92					; 0000005cH
	mov	DWORD PTR _mv$[ebp], ecx
$L81833:
	movsx	eax, WORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _m$[ebp]
	movsx	edx, WORD PTR [ecx+6]
	cmp	eax, edx
	jge	$L81828

; 1231 : 	{
; 1232 : 		z = mv->x2 * ViewMatrixScaled.m[RZ] + mv->y2 * ViewMatrixScaled.m[UZ] + mv->z2 * ViewMatrixScaled.m[LZ] + ViewTransScaled.v[Z];

	mov	eax, DWORD PTR _mv$[ebp]
	fld	DWORD PTR ?ViewMatrixScaled@@3TMatrixUnion@@A+8
	fmul	DWORD PTR [eax+12]
	mov	ecx, DWORD PTR _mv$[ebp]
	fld	DWORD PTR ?ViewMatrixScaled@@3TMatrixUnion@@A+20
	fmul	DWORD PTR [ecx+16]
	faddp	ST(1), ST(0)
	mov	edx, DWORD PTR _mv$[ebp]
	fld	DWORD PTR ?ViewMatrixScaled@@3TMatrixUnion@@A+32
	fmul	DWORD PTR [edx+20]
	faddp	ST(1), ST(0)
	fadd	DWORD PTR ?ViewTransScaled@@3UVectorStruct@@A+8
	fstp	DWORD PTR _z$[ebp]

; 1233 : 		if (z < 1) z = 1;

	fld	DWORD PTR _z$[ebp]
	fcomp	DWORD PTR __real@3f800000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L81836
	mov	DWORD PTR _z$[ebp], 1065353216		; 3f800000H
$L81836:

; 1234 : 
; 1235 : 		mv->sx = (mv->x2 * ViewMatrixScaled.m[RX] + mv->y2 * ViewMatrixScaled.m[UX] + mv->z2 * ViewMatrixScaled.m[LX] + ViewTransScaled.v[X]) / z + RenderSettings.GeomCentreX;

	mov	eax, DWORD PTR _mv$[ebp]
	fld	DWORD PTR ?ViewMatrixScaled@@3TMatrixUnion@@A
	fmul	DWORD PTR [eax+12]
	mov	ecx, DWORD PTR _mv$[ebp]
	fld	DWORD PTR ?ViewMatrixScaled@@3TMatrixUnion@@A+12
	fmul	DWORD PTR [ecx+16]
	faddp	ST(1), ST(0)
	mov	edx, DWORD PTR _mv$[ebp]
	fld	DWORD PTR ?ViewMatrixScaled@@3TMatrixUnion@@A+24
	fmul	DWORD PTR [edx+20]
	faddp	ST(1), ST(0)
	fadd	DWORD PTR ?ViewTransScaled@@3UVectorStruct@@A
	fdiv	DWORD PTR _z$[ebp]
	fadd	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+4
	mov	eax, DWORD PTR _mv$[ebp]
	fstp	DWORD PTR [eax+36]

; 1236 : 		mv->sy = (mv->x2 * ViewMatrixScaled.m[RY] + mv->y2 * ViewMatrixScaled.m[UY] + mv->z2 * ViewMatrixScaled.m[LY] + ViewTransScaled.v[Y]) / z + RenderSettings.GeomCentreY;

	mov	eax, DWORD PTR _mv$[ebp]
	fld	DWORD PTR ?ViewMatrixScaled@@3TMatrixUnion@@A+4
	fmul	DWORD PTR [eax+12]
	mov	ecx, DWORD PTR _mv$[ebp]
	fld	DWORD PTR ?ViewMatrixScaled@@3TMatrixUnion@@A+16
	fmul	DWORD PTR [ecx+16]
	faddp	ST(1), ST(0)
	mov	edx, DWORD PTR _mv$[ebp]
	fld	DWORD PTR ?ViewMatrixScaled@@3TMatrixUnion@@A+28
	fmul	DWORD PTR [edx+20]
	faddp	ST(1), ST(0)
	fadd	DWORD PTR ?ViewTransScaled@@3UVectorStruct@@A+4
	fdiv	DWORD PTR _z$[ebp]
	fadd	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+8
	mov	eax, DWORD PTR _mv$[ebp]
	fstp	DWORD PTR [eax+40]

; 1237 : 
; 1238 : 		mv->rhw = 1 / z;

	fld	DWORD PTR __real@3f800000
	fdiv	DWORD PTR _z$[ebp]
	mov	eax, DWORD PTR _mv$[ebp]
	fstp	DWORD PTR [eax+48]

; 1239 : 		mv->sz = GET_ZBUFFER(z);

	fld	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+36
	fmul	DWORD PTR _z$[ebp]
	fdivr	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+44
	fsubr	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+40
	mov	eax, DWORD PTR _mv$[ebp]
	fstp	DWORD PTR [eax+44]

; 1240 : 
; 1241 : 		fog = (RenderSettings.FarClip - z) * RenderSettings.FogMul;

	fld	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+32
	fsub	DWORD PTR _z$[ebp]
	fmul	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+56
	fstp	DWORD PTR _fog$[ebp]

; 1242 : 		if (fog > 255) fog = 255;

	fld	DWORD PTR _fog$[ebp]
	fcomp	DWORD PTR __real@437f0000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $L81837
	mov	DWORD PTR _fog$[ebp], 1132396544	; 437f0000H
$L81837:

; 1243 : 		fog -= mv->VertFog;

	mov	eax, DWORD PTR _mv$[ebp]
	fld	DWORD PTR _fog$[ebp]
	fsub	DWORD PTR [eax+84]
	fstp	DWORD PTR _fog$[ebp]

; 1244 : 		if (fog < 0) fog = 0;

	fld	DWORD PTR _fog$[ebp]
	fcomp	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L81838
	mov	DWORD PTR _fog$[ebp], 0
$L81838:

; 1245 : 		mv->specular = FTOL3(fog) << 24;

	fld	DWORD PTR _fog$[ebp]
	fadd	DWORD PTR __real@4b000000
	fstp	DWORD PTR _fog$[ebp]
	mov	eax, DWORD PTR _fog$[ebp]
	shl	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _mv$[ebp]
	mov	DWORD PTR [ecx+56], eax

; 1246 : 
; 1247 : 		mv->Clip = 0;

	mov	eax, DWORD PTR _mv$[ebp]
	mov	BYTE PTR [eax+88], 0

; 1248 : 		if (mv->sx < ScreenLeftClipGuard) mv->Clip |= 1;

	mov	eax, DWORD PTR _mv$[ebp]
	fld	DWORD PTR [eax+36]
	fcomp	DWORD PTR ?ScreenLeftClipGuard@@3MA	; ScreenLeftClipGuard
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L81841
	mov	eax, DWORD PTR _mv$[ebp]
	movzx	ecx, BYTE PTR [eax+88]
	or	ecx, 1
	mov	edx, DWORD PTR _mv$[ebp]
	mov	BYTE PTR [edx+88], cl

; 1249 : 		else if (mv->sx > ScreenRightClipGuard) mv->Clip |= 2;

	jmp	SHORT $L81842
$L81841:
	mov	eax, DWORD PTR _mv$[ebp]
	fld	DWORD PTR [eax+36]
	fcomp	DWORD PTR ?ScreenRightClipGuard@@3MA	; ScreenRightClipGuard
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $L81842
	mov	eax, DWORD PTR _mv$[ebp]
	movzx	ecx, BYTE PTR [eax+88]
	or	ecx, 2
	mov	edx, DWORD PTR _mv$[ebp]
	mov	BYTE PTR [edx+88], cl
$L81842:

; 1250 : 		if (mv->sy < ScreenTopClipGuard) mv->Clip |= 4;

	mov	eax, DWORD PTR _mv$[ebp]
	fld	DWORD PTR [eax+40]
	fcomp	DWORD PTR ?ScreenTopClipGuard@@3MA	; ScreenTopClipGuard
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L81844
	mov	eax, DWORD PTR _mv$[ebp]
	movzx	ecx, BYTE PTR [eax+88]
	or	ecx, 4
	mov	edx, DWORD PTR _mv$[ebp]
	mov	BYTE PTR [edx+88], cl

; 1251 : 		else if (mv->sy > ScreenBottomClipGuard) mv->Clip |= 8;

	jmp	SHORT $L81845
$L81844:
	mov	eax, DWORD PTR _mv$[ebp]
	fld	DWORD PTR [eax+40]
	fcomp	DWORD PTR ?ScreenBottomClipGuard@@3MA	; ScreenBottomClipGuard
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $L81845
	mov	eax, DWORD PTR _mv$[ebp]
	movzx	ecx, BYTE PTR [eax+88]
	or	ecx, 8
	mov	edx, DWORD PTR _mv$[ebp]
	mov	BYTE PTR [edx+88], cl
$L81845:

; 1252 : 		if (mv->sz < 0) mv->Clip |= 16;

	mov	eax, DWORD PTR _mv$[ebp]
	fld	DWORD PTR [eax+44]
	fcomp	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L81847
	mov	eax, DWORD PTR _mv$[ebp]
	movzx	ecx, BYTE PTR [eax+88]
	or	ecx, 16					; 00000010H
	mov	edx, DWORD PTR _mv$[ebp]
	mov	BYTE PTR [edx+88], cl

; 1253 : 		else if (mv->sz >= 1) mv->Clip |= 32;

	jmp	SHORT $L81848
$L81847:
	mov	eax, DWORD PTR _mv$[ebp]
	fld	DWORD PTR [eax+44]
	fcomp	DWORD PTR __real@3f800000
	fnstsw	ax
	test	ah, 1
	jne	SHORT $L81848
	mov	eax, DWORD PTR _mv$[ebp]
	movzx	ecx, BYTE PTR [eax+88]
	or	ecx, 32					; 00000020H
	mov	edx, DWORD PTR _mv$[ebp]
	mov	BYTE PTR [edx+88], cl
$L81848:

; 1254 : 	}

	jmp	$L81834
$L81828:

; 1255 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?TransCubeVertsFogClipNewVerts@@YAXPAUWORLD_MODEL@@@Z ENDP ; TransCubeVertsFogClipNewVerts
; Function compile flags: /Odt /ZI
_TEXT	ENDS
;	COMDAT ?TransCubeVertsNewVerts@@YAXPAUWORLD_MODEL@@@Z
_TEXT	SEGMENT
_mv$ = -12						; size = 4
_z$ = -8						; size = 4
_i$ = -4						; size = 2
_m$ = 8							; size = 4
?TransCubeVertsNewVerts@@YAXPAUWORLD_MODEL@@@Z PROC NEAR ; TransCubeVertsNewVerts, COMDAT

; 1262 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi

; 1263 : 	short i;
; 1264 : 	float z;
; 1265 : 	WORLD_VERTEX *mv;
; 1266 : 
; 1267 : 	mv = m->VertPtr;

	mov	eax, DWORD PTR _m$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	DWORD PTR _mv$[ebp], ecx

; 1268 : 
; 1269 : 	for (i = 0 ; i < m->VertNum ; i++, mv++)

	mov	WORD PTR _i$[ebp], 0
	jmp	SHORT $L81856
$L81857:
	mov	ax, WORD PTR _i$[ebp]
	add	ax, 1
	mov	WORD PTR _i$[ebp], ax
	mov	ecx, DWORD PTR _mv$[ebp]
	add	ecx, 92					; 0000005cH
	mov	DWORD PTR _mv$[ebp], ecx
$L81856:
	movsx	eax, WORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _m$[ebp]
	movsx	edx, WORD PTR [ecx+6]
	cmp	eax, edx
	jge	$L81852

; 1270 : 	{
; 1271 : 		z = mv->x2 * ViewMatrixScaled.m[RZ] + mv->y2 * ViewMatrixScaled.m[UZ] + mv->z2 * ViewMatrixScaled.m[LZ] + ViewTransScaled.v[Z];

	mov	eax, DWORD PTR _mv$[ebp]
	fld	DWORD PTR ?ViewMatrixScaled@@3TMatrixUnion@@A+8
	fmul	DWORD PTR [eax+12]
	mov	ecx, DWORD PTR _mv$[ebp]
	fld	DWORD PTR ?ViewMatrixScaled@@3TMatrixUnion@@A+20
	fmul	DWORD PTR [ecx+16]
	faddp	ST(1), ST(0)
	mov	edx, DWORD PTR _mv$[ebp]
	fld	DWORD PTR ?ViewMatrixScaled@@3TMatrixUnion@@A+32
	fmul	DWORD PTR [edx+20]
	faddp	ST(1), ST(0)
	fadd	DWORD PTR ?ViewTransScaled@@3UVectorStruct@@A+8
	fstp	DWORD PTR _z$[ebp]

; 1272 : 		mv->rhw = 1 / z;

	fld	DWORD PTR __real@3f800000
	fdiv	DWORD PTR _z$[ebp]
	mov	eax, DWORD PTR _mv$[ebp]
	fstp	DWORD PTR [eax+48]

; 1273 : 
; 1274 : 		mv->sx = (mv->x2 * ViewMatrixScaled.m[RX] + mv->y2 * ViewMatrixScaled.m[UX] + mv->z2 * ViewMatrixScaled.m[LX] + ViewTransScaled.v[X]) / z + RenderSettings.GeomCentreX;

	mov	eax, DWORD PTR _mv$[ebp]
	fld	DWORD PTR ?ViewMatrixScaled@@3TMatrixUnion@@A
	fmul	DWORD PTR [eax+12]
	mov	ecx, DWORD PTR _mv$[ebp]
	fld	DWORD PTR ?ViewMatrixScaled@@3TMatrixUnion@@A+12
	fmul	DWORD PTR [ecx+16]
	faddp	ST(1), ST(0)
	mov	edx, DWORD PTR _mv$[ebp]
	fld	DWORD PTR ?ViewMatrixScaled@@3TMatrixUnion@@A+24
	fmul	DWORD PTR [edx+20]
	faddp	ST(1), ST(0)
	fadd	DWORD PTR ?ViewTransScaled@@3UVectorStruct@@A
	fdiv	DWORD PTR _z$[ebp]
	fadd	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+4
	mov	eax, DWORD PTR _mv$[ebp]
	fstp	DWORD PTR [eax+36]

; 1275 : 		mv->sy = (mv->x2 * ViewMatrixScaled.m[RY] + mv->y2 * ViewMatrixScaled.m[UY] + mv->z2 * ViewMatrixScaled.m[LY] + ViewTransScaled.v[Y]) / z + RenderSettings.GeomCentreY;

	mov	eax, DWORD PTR _mv$[ebp]
	fld	DWORD PTR ?ViewMatrixScaled@@3TMatrixUnion@@A+4
	fmul	DWORD PTR [eax+12]
	mov	ecx, DWORD PTR _mv$[ebp]
	fld	DWORD PTR ?ViewMatrixScaled@@3TMatrixUnion@@A+16
	fmul	DWORD PTR [ecx+16]
	faddp	ST(1), ST(0)
	mov	edx, DWORD PTR _mv$[ebp]
	fld	DWORD PTR ?ViewMatrixScaled@@3TMatrixUnion@@A+28
	fmul	DWORD PTR [edx+20]
	faddp	ST(1), ST(0)
	fadd	DWORD PTR ?ViewTransScaled@@3UVectorStruct@@A+4
	fdiv	DWORD PTR _z$[ebp]
	fadd	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+8
	mov	eax, DWORD PTR _mv$[ebp]
	fstp	DWORD PTR [eax+40]

; 1276 : 
; 1277 : 		mv->sz = GET_ZBUFFER(z);

	fld	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+36
	fmul	DWORD PTR _z$[ebp]
	fdivr	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+44
	fsubr	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+40
	mov	eax, DWORD PTR _mv$[ebp]
	fstp	DWORD PTR [eax+44]

; 1278 : 	}

	jmp	$L81857
$L81852:

; 1279 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?TransCubeVertsNewVerts@@YAXPAUWORLD_MODEL@@@Z ENDP	; TransCubeVertsNewVerts
; Function compile flags: /Odt /ZI
_TEXT	ENDS
;	COMDAT ?TransCubeVertsFogNewVerts@@YAXPAUWORLD_MODEL@@@Z
_TEXT	SEGMENT
_mv$ = -16						; size = 4
_fog$ = -12						; size = 4
_z$ = -8						; size = 4
_i$ = -4						; size = 2
_m$ = 8							; size = 4
?TransCubeVertsFogNewVerts@@YAXPAUWORLD_MODEL@@@Z PROC NEAR ; TransCubeVertsFogNewVerts, COMDAT

; 1286 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi

; 1287 : 	short i;
; 1288 : 	float z;
; 1289 : 	float fog;
; 1290 : 	WORLD_VERTEX *mv;
; 1291 : 
; 1292 : 	mv = m->VertPtr;

	mov	eax, DWORD PTR _m$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	DWORD PTR _mv$[ebp], ecx

; 1293 : 
; 1294 : 	for (i = 0 ; i < m->VertNum ; i++, mv++)

	mov	WORD PTR _i$[ebp], 0
	jmp	SHORT $L81866
$L81867:
	mov	ax, WORD PTR _i$[ebp]
	add	ax, 1
	mov	WORD PTR _i$[ebp], ax
	mov	ecx, DWORD PTR _mv$[ebp]
	add	ecx, 92					; 0000005cH
	mov	DWORD PTR _mv$[ebp], ecx
$L81866:
	movsx	eax, WORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _m$[ebp]
	movsx	edx, WORD PTR [ecx+6]
	cmp	eax, edx
	jge	$L81861

; 1295 : 	{
; 1296 : 		z = mv->x2 * ViewMatrixScaled.m[RZ] + mv->y2 * ViewMatrixScaled.m[UZ] + mv->z2 * ViewMatrixScaled.m[LZ] + ViewTransScaled.v[Z];

	mov	eax, DWORD PTR _mv$[ebp]
	fld	DWORD PTR ?ViewMatrixScaled@@3TMatrixUnion@@A+8
	fmul	DWORD PTR [eax+12]
	mov	ecx, DWORD PTR _mv$[ebp]
	fld	DWORD PTR ?ViewMatrixScaled@@3TMatrixUnion@@A+20
	fmul	DWORD PTR [ecx+16]
	faddp	ST(1), ST(0)
	mov	edx, DWORD PTR _mv$[ebp]
	fld	DWORD PTR ?ViewMatrixScaled@@3TMatrixUnion@@A+32
	fmul	DWORD PTR [edx+20]
	faddp	ST(1), ST(0)
	fadd	DWORD PTR ?ViewTransScaled@@3UVectorStruct@@A+8
	fstp	DWORD PTR _z$[ebp]

; 1297 : 		mv->rhw = 1 / z;

	fld	DWORD PTR __real@3f800000
	fdiv	DWORD PTR _z$[ebp]
	mov	eax, DWORD PTR _mv$[ebp]
	fstp	DWORD PTR [eax+48]

; 1298 : 
; 1299 : 		mv->sx = (mv->x2 * ViewMatrixScaled.m[RX] + mv->y2 * ViewMatrixScaled.m[UX] + mv->z2 * ViewMatrixScaled.m[LX] + ViewTransScaled.v[X]) / z + RenderSettings.GeomCentreX;

	mov	eax, DWORD PTR _mv$[ebp]
	fld	DWORD PTR ?ViewMatrixScaled@@3TMatrixUnion@@A
	fmul	DWORD PTR [eax+12]
	mov	ecx, DWORD PTR _mv$[ebp]
	fld	DWORD PTR ?ViewMatrixScaled@@3TMatrixUnion@@A+12
	fmul	DWORD PTR [ecx+16]
	faddp	ST(1), ST(0)
	mov	edx, DWORD PTR _mv$[ebp]
	fld	DWORD PTR ?ViewMatrixScaled@@3TMatrixUnion@@A+24
	fmul	DWORD PTR [edx+20]
	faddp	ST(1), ST(0)
	fadd	DWORD PTR ?ViewTransScaled@@3UVectorStruct@@A
	fdiv	DWORD PTR _z$[ebp]
	fadd	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+4
	mov	eax, DWORD PTR _mv$[ebp]
	fstp	DWORD PTR [eax+36]

; 1300 : 		mv->sy = (mv->x2 * ViewMatrixScaled.m[RY] + mv->y2 * ViewMatrixScaled.m[UY] + mv->z2 * ViewMatrixScaled.m[LY] + ViewTransScaled.v[Y]) / z + RenderSettings.GeomCentreY;

	mov	eax, DWORD PTR _mv$[ebp]
	fld	DWORD PTR ?ViewMatrixScaled@@3TMatrixUnion@@A+4
	fmul	DWORD PTR [eax+12]
	mov	ecx, DWORD PTR _mv$[ebp]
	fld	DWORD PTR ?ViewMatrixScaled@@3TMatrixUnion@@A+16
	fmul	DWORD PTR [ecx+16]
	faddp	ST(1), ST(0)
	mov	edx, DWORD PTR _mv$[ebp]
	fld	DWORD PTR ?ViewMatrixScaled@@3TMatrixUnion@@A+28
	fmul	DWORD PTR [edx+20]
	faddp	ST(1), ST(0)
	fadd	DWORD PTR ?ViewTransScaled@@3UVectorStruct@@A+4
	fdiv	DWORD PTR _z$[ebp]
	fadd	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+8
	mov	eax, DWORD PTR _mv$[ebp]
	fstp	DWORD PTR [eax+40]

; 1301 : 
; 1302 : 		mv->sz = GET_ZBUFFER(z);

	fld	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+36
	fmul	DWORD PTR _z$[ebp]
	fdivr	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+44
	fsubr	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+40
	mov	eax, DWORD PTR _mv$[ebp]
	fstp	DWORD PTR [eax+44]

; 1303 : 
; 1304 : 		fog = (RenderSettings.FarClip - z) * RenderSettings.FogMul;

	fld	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+32
	fsub	DWORD PTR _z$[ebp]
	fmul	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+56
	fstp	DWORD PTR _fog$[ebp]

; 1305 : 		if (fog > 255) fog = 255;

	fld	DWORD PTR _fog$[ebp]
	fcomp	DWORD PTR __real@437f0000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $L81869
	mov	DWORD PTR _fog$[ebp], 1132396544	; 437f0000H
$L81869:

; 1306 : 		fog -= mv->VertFog;

	mov	eax, DWORD PTR _mv$[ebp]
	fld	DWORD PTR _fog$[ebp]
	fsub	DWORD PTR [eax+84]
	fstp	DWORD PTR _fog$[ebp]

; 1307 : 		if (fog < 0) fog = 0;

	fld	DWORD PTR _fog$[ebp]
	fcomp	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L81870
	mov	DWORD PTR _fog$[ebp], 0
$L81870:

; 1308 : 		mv->specular = FTOL3(fog) << 24;

	fld	DWORD PTR _fog$[ebp]
	fadd	DWORD PTR __real@4b000000
	fstp	DWORD PTR _fog$[ebp]
	mov	eax, DWORD PTR _fog$[ebp]
	shl	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _mv$[ebp]
	mov	DWORD PTR [ecx+56], eax

; 1309 : 	}

	jmp	$L81867
$L81861:

; 1310 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?TransCubeVertsFogNewVerts@@YAXPAUWORLD_MODEL@@@Z ENDP	; TransCubeVertsFogNewVerts
; Function compile flags: /Odt /ZI
_TEXT	ENDS
;	COMDAT ?TransCubeVertsMirror@@YAXPAUWORLD_MODEL@@@Z
_TEXT	SEGMENT
_mv$ = -16						; size = 4
_fog$ = -12						; size = 4
_z$ = -8						; size = 4
_i$ = -4						; size = 2
_m$ = 8							; size = 4
?TransCubeVertsMirror@@YAXPAUWORLD_MODEL@@@Z PROC NEAR	; TransCubeVertsMirror, COMDAT

; 1317 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi

; 1318 : 	short i;
; 1319 : 	float z;
; 1320 : 	float fog;
; 1321 : 	WORLD_MIRROR_VERTEX *mv;
; 1322 : 
; 1323 : 	mv = m->MirrorVertPtr;

	mov	eax, DWORD PTR _m$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	mov	DWORD PTR _mv$[ebp], ecx

; 1324 : 
; 1325 : 	for (i = 0 ; i < m->MirrorVertNum ; i++, mv++)

	mov	WORD PTR _i$[ebp], 0
	jmp	SHORT $L81880
$L81881:
	mov	ax, WORD PTR _i$[ebp]
	add	ax, 1
	mov	WORD PTR _i$[ebp], ax
	mov	ecx, DWORD PTR _mv$[ebp]
	add	ecx, 56					; 00000038H
	mov	DWORD PTR _mv$[ebp], ecx
$L81880:
	movsx	eax, WORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _m$[ebp]
	movsx	edx, WORD PTR [ecx+18]
	cmp	eax, edx
	jge	$L81875

; 1326 : 	{
; 1327 : 		z = mv->x * ViewMatrixScaled.m[RZ] + mv->y * ViewMatrixScaled.m[UZ] + mv->z * ViewMatrixScaled.m[LZ] + ViewTransScaled.v[Z];

	mov	eax, DWORD PTR _mv$[ebp]
	fld	DWORD PTR ?ViewMatrixScaled@@3TMatrixUnion@@A+8
	fmul	DWORD PTR [eax]
	mov	ecx, DWORD PTR _mv$[ebp]
	fld	DWORD PTR ?ViewMatrixScaled@@3TMatrixUnion@@A+20
	fmul	DWORD PTR [ecx+4]
	faddp	ST(1), ST(0)
	mov	edx, DWORD PTR _mv$[ebp]
	fld	DWORD PTR ?ViewMatrixScaled@@3TMatrixUnion@@A+32
	fmul	DWORD PTR [edx+8]
	faddp	ST(1), ST(0)
	fadd	DWORD PTR ?ViewTransScaled@@3UVectorStruct@@A+8
	fstp	DWORD PTR _z$[ebp]

; 1328 : 		if (z < 1) z = 1;

	fld	DWORD PTR _z$[ebp]
	fcomp	DWORD PTR __real@3f800000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L81883
	mov	DWORD PTR _z$[ebp], 1065353216		; 3f800000H
$L81883:

; 1329 : 
; 1330 : 		mv->sx = (mv->x * ViewMatrixScaled.m[RX] + mv->y * ViewMatrixScaled.m[UX] + mv->z * ViewMatrixScaled.m[LX] + ViewTransScaled.v[X]) / z + RenderSettings.GeomCentreX;

	mov	eax, DWORD PTR _mv$[ebp]
	fld	DWORD PTR ?ViewMatrixScaled@@3TMatrixUnion@@A
	fmul	DWORD PTR [eax]
	mov	ecx, DWORD PTR _mv$[ebp]
	fld	DWORD PTR ?ViewMatrixScaled@@3TMatrixUnion@@A+12
	fmul	DWORD PTR [ecx+4]
	faddp	ST(1), ST(0)
	mov	edx, DWORD PTR _mv$[ebp]
	fld	DWORD PTR ?ViewMatrixScaled@@3TMatrixUnion@@A+24
	fmul	DWORD PTR [edx+8]
	faddp	ST(1), ST(0)
	fadd	DWORD PTR ?ViewTransScaled@@3UVectorStruct@@A
	fdiv	DWORD PTR _z$[ebp]
	fadd	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+4
	mov	eax, DWORD PTR _mv$[ebp]
	fstp	DWORD PTR [eax+24]

; 1331 : 		mv->sy = (mv->x * ViewMatrixScaled.m[RY] + mv->y * ViewMatrixScaled.m[UY] + mv->z * ViewMatrixScaled.m[LY] + ViewTransScaled.v[Y]) / z + RenderSettings.GeomCentreY;

	mov	eax, DWORD PTR _mv$[ebp]
	fld	DWORD PTR ?ViewMatrixScaled@@3TMatrixUnion@@A+4
	fmul	DWORD PTR [eax]
	mov	ecx, DWORD PTR _mv$[ebp]
	fld	DWORD PTR ?ViewMatrixScaled@@3TMatrixUnion@@A+16
	fmul	DWORD PTR [ecx+4]
	faddp	ST(1), ST(0)
	mov	edx, DWORD PTR _mv$[ebp]
	fld	DWORD PTR ?ViewMatrixScaled@@3TMatrixUnion@@A+28
	fmul	DWORD PTR [edx+8]
	faddp	ST(1), ST(0)
	fadd	DWORD PTR ?ViewTransScaled@@3UVectorStruct@@A+4
	fdiv	DWORD PTR _z$[ebp]
	fadd	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+8
	mov	eax, DWORD PTR _mv$[ebp]
	fstp	DWORD PTR [eax+28]

; 1332 : 
; 1333 : 		mv->rhw = 1 / z;

	fld	DWORD PTR __real@3f800000
	fdiv	DWORD PTR _z$[ebp]
	mov	eax, DWORD PTR _mv$[ebp]
	fstp	DWORD PTR [eax+36]

; 1334 : 		mv->sz = GET_ZBUFFER(z);

	fld	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+36
	fmul	DWORD PTR _z$[ebp]
	fdivr	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+44
	fsubr	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+40
	mov	eax, DWORD PTR _mv$[ebp]
	fstp	DWORD PTR [eax+32]

; 1335 : 
; 1336 : 		fog = (RenderSettings.FarClip - z) * RenderSettings.FogMul;

	fld	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+32
	fsub	DWORD PTR _z$[ebp]
	fmul	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+56
	fstp	DWORD PTR _fog$[ebp]

; 1337 : 		if (fog > 255) fog = 255;

	fld	DWORD PTR _fog$[ebp]
	fcomp	DWORD PTR __real@437f0000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $L81884
	mov	DWORD PTR _fog$[ebp], 1132396544	; 437f0000H
$L81884:

; 1338 : 		fog -= mv->VertFog;

	mov	eax, DWORD PTR _mv$[ebp]
	fld	DWORD PTR _fog$[ebp]
	fsub	DWORD PTR [eax+40]
	fstp	DWORD PTR _fog$[ebp]

; 1339 : 		if (fog < 0) fog = 0;

	fld	DWORD PTR _fog$[ebp]
	fcomp	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L81885
	mov	DWORD PTR _fog$[ebp], 0
$L81885:

; 1340 : 		mv->specular = FTOL3(fog) << 24;

	fld	DWORD PTR _fog$[ebp]
	fadd	DWORD PTR __real@4b000000
	fstp	DWORD PTR _fog$[ebp]
	mov	eax, DWORD PTR _fog$[ebp]
	shl	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _mv$[ebp]
	mov	DWORD PTR [ecx+44], eax

; 1341 : 
; 1342 : 		mv->Clip = 0;

	mov	eax, DWORD PTR _mv$[ebp]
	mov	BYTE PTR [eax+48], 0

; 1343 : 		if (mv->sx < ScreenLeftClipGuard) mv->Clip |= 1;

	mov	eax, DWORD PTR _mv$[ebp]
	fld	DWORD PTR [eax+24]
	fcomp	DWORD PTR ?ScreenLeftClipGuard@@3MA	; ScreenLeftClipGuard
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L81888
	mov	eax, DWORD PTR _mv$[ebp]
	movzx	ecx, BYTE PTR [eax+48]
	or	ecx, 1
	mov	edx, DWORD PTR _mv$[ebp]
	mov	BYTE PTR [edx+48], cl

; 1344 : 		else if (mv->sx > ScreenRightClipGuard) mv->Clip |= 2;

	jmp	SHORT $L81889
$L81888:
	mov	eax, DWORD PTR _mv$[ebp]
	fld	DWORD PTR [eax+24]
	fcomp	DWORD PTR ?ScreenRightClipGuard@@3MA	; ScreenRightClipGuard
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $L81889
	mov	eax, DWORD PTR _mv$[ebp]
	movzx	ecx, BYTE PTR [eax+48]
	or	ecx, 2
	mov	edx, DWORD PTR _mv$[ebp]
	mov	BYTE PTR [edx+48], cl
$L81889:

; 1345 : 		if (mv->sy < ScreenTopClipGuard) mv->Clip |= 4;

	mov	eax, DWORD PTR _mv$[ebp]
	fld	DWORD PTR [eax+28]
	fcomp	DWORD PTR ?ScreenTopClipGuard@@3MA	; ScreenTopClipGuard
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L81891
	mov	eax, DWORD PTR _mv$[ebp]
	movzx	ecx, BYTE PTR [eax+48]
	or	ecx, 4
	mov	edx, DWORD PTR _mv$[ebp]
	mov	BYTE PTR [edx+48], cl

; 1346 : 		else if (mv->sy > ScreenBottomClipGuard) mv->Clip |= 8;

	jmp	SHORT $L81892
$L81891:
	mov	eax, DWORD PTR _mv$[ebp]
	fld	DWORD PTR [eax+28]
	fcomp	DWORD PTR ?ScreenBottomClipGuard@@3MA	; ScreenBottomClipGuard
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $L81892
	mov	eax, DWORD PTR _mv$[ebp]
	movzx	ecx, BYTE PTR [eax+48]
	or	ecx, 8
	mov	edx, DWORD PTR _mv$[ebp]
	mov	BYTE PTR [edx+48], cl
$L81892:

; 1347 : 		if (mv->sz < 0) mv->Clip |= 16;

	mov	eax, DWORD PTR _mv$[ebp]
	fld	DWORD PTR [eax+32]
	fcomp	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L81894
	mov	eax, DWORD PTR _mv$[ebp]
	movzx	ecx, BYTE PTR [eax+48]
	or	ecx, 16					; 00000010H
	mov	edx, DWORD PTR _mv$[ebp]
	mov	BYTE PTR [edx+48], cl

; 1348 : 		else if (mv->sz >= 1) mv->Clip |= 32;

	jmp	SHORT $L81895
$L81894:
	mov	eax, DWORD PTR _mv$[ebp]
	fld	DWORD PTR [eax+32]
	fcomp	DWORD PTR __real@3f800000
	fnstsw	ax
	test	ah, 1
	jne	SHORT $L81895
	mov	eax, DWORD PTR _mv$[ebp]
	movzx	ecx, BYTE PTR [eax+48]
	or	ecx, 32					; 00000020H
	mov	edx, DWORD PTR _mv$[ebp]
	mov	BYTE PTR [edx+48], cl
$L81895:

; 1349 : 	}

	jmp	$L81881
$L81875:

; 1350 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?TransCubeVertsMirror@@YAXPAUWORLD_MODEL@@@Z ENDP	; TransCubeVertsMirror
; Function compile flags: /Odt /ZI
_TEXT	ENDS
;	COMDAT ?TransCubeVertsMirrorNewVerts@@YAXPAUWORLD_MODEL@@@Z
_TEXT	SEGMENT
_mv$ = -16						; size = 4
_fog$ = -12						; size = 4
_z$ = -8						; size = 4
_i$ = -4						; size = 2
_m$ = 8							; size = 4
?TransCubeVertsMirrorNewVerts@@YAXPAUWORLD_MODEL@@@Z PROC NEAR ; TransCubeVertsMirrorNewVerts, COMDAT

; 1357 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi

; 1358 : 	short i;
; 1359 : 	float z;
; 1360 : 	float fog;
; 1361 : 	WORLD_MIRROR_VERTEX *mv;
; 1362 : 
; 1363 : 	mv = m->MirrorVertPtr;

	mov	eax, DWORD PTR _m$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	mov	DWORD PTR _mv$[ebp], ecx

; 1364 : 
; 1365 : 	for (i = 0 ; i < m->MirrorVertNum ; i++, mv++)

	mov	WORD PTR _i$[ebp], 0
	jmp	SHORT $L81904
$L81905:
	mov	ax, WORD PTR _i$[ebp]
	add	ax, 1
	mov	WORD PTR _i$[ebp], ax
	mov	ecx, DWORD PTR _mv$[ebp]
	add	ecx, 56					; 00000038H
	mov	DWORD PTR _mv$[ebp], ecx
$L81904:
	movsx	eax, WORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _m$[ebp]
	movsx	edx, WORD PTR [ecx+18]
	cmp	eax, edx
	jge	$L81899

; 1366 : 	{
; 1367 : 		z = mv->x2 * ViewMatrixScaled.m[RZ] + mv->y2 * ViewMatrixScaled.m[UZ] + mv->z2 * ViewMatrixScaled.m[LZ] + ViewTransScaled.v[Z];

	mov	eax, DWORD PTR _mv$[ebp]
	fld	DWORD PTR ?ViewMatrixScaled@@3TMatrixUnion@@A+8
	fmul	DWORD PTR [eax+12]
	mov	ecx, DWORD PTR _mv$[ebp]
	fld	DWORD PTR ?ViewMatrixScaled@@3TMatrixUnion@@A+20
	fmul	DWORD PTR [ecx+16]
	faddp	ST(1), ST(0)
	mov	edx, DWORD PTR _mv$[ebp]
	fld	DWORD PTR ?ViewMatrixScaled@@3TMatrixUnion@@A+32
	fmul	DWORD PTR [edx+20]
	faddp	ST(1), ST(0)
	fadd	DWORD PTR ?ViewTransScaled@@3UVectorStruct@@A+8
	fstp	DWORD PTR _z$[ebp]

; 1368 : 		if (z < 1) z = 1;

	fld	DWORD PTR _z$[ebp]
	fcomp	DWORD PTR __real@3f800000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L81907
	mov	DWORD PTR _z$[ebp], 1065353216		; 3f800000H
$L81907:

; 1369 : 
; 1370 : 		mv->sx = (mv->x2 * ViewMatrixScaled.m[RX] + mv->y2 * ViewMatrixScaled.m[UX] + mv->z2 * ViewMatrixScaled.m[LX] + ViewTransScaled.v[X]) / z + RenderSettings.GeomCentreX;

	mov	eax, DWORD PTR _mv$[ebp]
	fld	DWORD PTR ?ViewMatrixScaled@@3TMatrixUnion@@A
	fmul	DWORD PTR [eax+12]
	mov	ecx, DWORD PTR _mv$[ebp]
	fld	DWORD PTR ?ViewMatrixScaled@@3TMatrixUnion@@A+12
	fmul	DWORD PTR [ecx+16]
	faddp	ST(1), ST(0)
	mov	edx, DWORD PTR _mv$[ebp]
	fld	DWORD PTR ?ViewMatrixScaled@@3TMatrixUnion@@A+24
	fmul	DWORD PTR [edx+20]
	faddp	ST(1), ST(0)
	fadd	DWORD PTR ?ViewTransScaled@@3UVectorStruct@@A
	fdiv	DWORD PTR _z$[ebp]
	fadd	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+4
	mov	eax, DWORD PTR _mv$[ebp]
	fstp	DWORD PTR [eax+24]

; 1371 : 		mv->sy = (mv->x2 * ViewMatrixScaled.m[RY] + mv->y2 * ViewMatrixScaled.m[UY] + mv->z2 * ViewMatrixScaled.m[LY] + ViewTransScaled.v[Y]) / z + RenderSettings.GeomCentreY;

	mov	eax, DWORD PTR _mv$[ebp]
	fld	DWORD PTR ?ViewMatrixScaled@@3TMatrixUnion@@A+4
	fmul	DWORD PTR [eax+12]
	mov	ecx, DWORD PTR _mv$[ebp]
	fld	DWORD PTR ?ViewMatrixScaled@@3TMatrixUnion@@A+16
	fmul	DWORD PTR [ecx+16]
	faddp	ST(1), ST(0)
	mov	edx, DWORD PTR _mv$[ebp]
	fld	DWORD PTR ?ViewMatrixScaled@@3TMatrixUnion@@A+28
	fmul	DWORD PTR [edx+20]
	faddp	ST(1), ST(0)
	fadd	DWORD PTR ?ViewTransScaled@@3UVectorStruct@@A+4
	fdiv	DWORD PTR _z$[ebp]
	fadd	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+8
	mov	eax, DWORD PTR _mv$[ebp]
	fstp	DWORD PTR [eax+28]

; 1372 : 
; 1373 : 		mv->rhw = 1 / z;

	fld	DWORD PTR __real@3f800000
	fdiv	DWORD PTR _z$[ebp]
	mov	eax, DWORD PTR _mv$[ebp]
	fstp	DWORD PTR [eax+36]

; 1374 : 		mv->sz = GET_ZBUFFER(z);

	fld	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+36
	fmul	DWORD PTR _z$[ebp]
	fdivr	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+44
	fsubr	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+40
	mov	eax, DWORD PTR _mv$[ebp]
	fstp	DWORD PTR [eax+32]

; 1375 : 
; 1376 : 		fog = (RenderSettings.FarClip - z) * RenderSettings.FogMul;

	fld	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+32
	fsub	DWORD PTR _z$[ebp]
	fmul	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+56
	fstp	DWORD PTR _fog$[ebp]

; 1377 : 		if (fog > 255) fog = 255;

	fld	DWORD PTR _fog$[ebp]
	fcomp	DWORD PTR __real@437f0000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $L81908
	mov	DWORD PTR _fog$[ebp], 1132396544	; 437f0000H
$L81908:

; 1378 : 		fog -= mv->VertFog;

	mov	eax, DWORD PTR _mv$[ebp]
	fld	DWORD PTR _fog$[ebp]
	fsub	DWORD PTR [eax+40]
	fstp	DWORD PTR _fog$[ebp]

; 1379 : 		if (fog < 0) fog = 0;

	fld	DWORD PTR _fog$[ebp]
	fcomp	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L81909
	mov	DWORD PTR _fog$[ebp], 0
$L81909:

; 1380 : 		mv->specular = FTOL3(fog) << 24;

	fld	DWORD PTR _fog$[ebp]
	fadd	DWORD PTR __real@4b000000
	fstp	DWORD PTR _fog$[ebp]
	mov	eax, DWORD PTR _fog$[ebp]
	shl	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _mv$[ebp]
	mov	DWORD PTR [ecx+44], eax

; 1381 : 
; 1382 : 		mv->Clip = 0;

	mov	eax, DWORD PTR _mv$[ebp]
	mov	BYTE PTR [eax+48], 0

; 1383 : 		if (mv->sx < ScreenLeftClipGuard) mv->Clip |= 1;

	mov	eax, DWORD PTR _mv$[ebp]
	fld	DWORD PTR [eax+24]
	fcomp	DWORD PTR ?ScreenLeftClipGuard@@3MA	; ScreenLeftClipGuard
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L81912
	mov	eax, DWORD PTR _mv$[ebp]
	movzx	ecx, BYTE PTR [eax+48]
	or	ecx, 1
	mov	edx, DWORD PTR _mv$[ebp]
	mov	BYTE PTR [edx+48], cl

; 1384 : 		else if (mv->sx > ScreenRightClipGuard) mv->Clip |= 2;

	jmp	SHORT $L81913
$L81912:
	mov	eax, DWORD PTR _mv$[ebp]
	fld	DWORD PTR [eax+24]
	fcomp	DWORD PTR ?ScreenRightClipGuard@@3MA	; ScreenRightClipGuard
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $L81913
	mov	eax, DWORD PTR _mv$[ebp]
	movzx	ecx, BYTE PTR [eax+48]
	or	ecx, 2
	mov	edx, DWORD PTR _mv$[ebp]
	mov	BYTE PTR [edx+48], cl
$L81913:

; 1385 : 		if (mv->sy < ScreenTopClipGuard) mv->Clip |= 4;

	mov	eax, DWORD PTR _mv$[ebp]
	fld	DWORD PTR [eax+28]
	fcomp	DWORD PTR ?ScreenTopClipGuard@@3MA	; ScreenTopClipGuard
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L81915
	mov	eax, DWORD PTR _mv$[ebp]
	movzx	ecx, BYTE PTR [eax+48]
	or	ecx, 4
	mov	edx, DWORD PTR _mv$[ebp]
	mov	BYTE PTR [edx+48], cl

; 1386 : 		else if (mv->sy > ScreenBottomClipGuard) mv->Clip |= 8;

	jmp	SHORT $L81916
$L81915:
	mov	eax, DWORD PTR _mv$[ebp]
	fld	DWORD PTR [eax+28]
	fcomp	DWORD PTR ?ScreenBottomClipGuard@@3MA	; ScreenBottomClipGuard
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $L81916
	mov	eax, DWORD PTR _mv$[ebp]
	movzx	ecx, BYTE PTR [eax+48]
	or	ecx, 8
	mov	edx, DWORD PTR _mv$[ebp]
	mov	BYTE PTR [edx+48], cl
$L81916:

; 1387 : 		if (mv->sz < 0) mv->Clip |= 16;

	mov	eax, DWORD PTR _mv$[ebp]
	fld	DWORD PTR [eax+32]
	fcomp	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L81918
	mov	eax, DWORD PTR _mv$[ebp]
	movzx	ecx, BYTE PTR [eax+48]
	or	ecx, 16					; 00000010H
	mov	edx, DWORD PTR _mv$[ebp]
	mov	BYTE PTR [edx+48], cl

; 1388 : 		else if (mv->sz >= 1) mv->Clip |= 32;

	jmp	SHORT $L81919
$L81918:
	mov	eax, DWORD PTR _mv$[ebp]
	fld	DWORD PTR [eax+32]
	fcomp	DWORD PTR __real@3f800000
	fnstsw	ax
	test	ah, 1
	jne	SHORT $L81919
	mov	eax, DWORD PTR _mv$[ebp]
	movzx	ecx, BYTE PTR [eax+48]
	or	ecx, 32					; 00000020H
	mov	edx, DWORD PTR _mv$[ebp]
	mov	BYTE PTR [edx+48], cl
$L81919:

; 1389 : 	}

	jmp	$L81905
$L81899:

; 1390 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?TransCubeVertsMirrorNewVerts@@YAXPAUWORLD_MODEL@@@Z ENDP ; TransCubeVertsMirrorNewVerts
_TEXT	ENDS
EXTRN	?FlushOneBucketTEX0@@YAXPAUBUCKET_TEX0@@J@Z:NEAR ; FlushOneBucketTEX0
EXTRN	?FlushOneBucketTEX1@@YAXPAUBUCKET_TEX1@@J@Z:NEAR ; FlushOneBucketTEX1
EXTRN	?SemiPoly@@3PAUDRAW_SEMI_POLY@@A:BYTE		; SemiPoly
EXTRN	?SemiCount@@3JA:DWORD				; SemiCount
EXTRN	?TexInfo@@3PAUTEXINFO@@A:DWORD			; TexInfo
EXTRN	?TextureStateChange@@3JA:DWORD			; TextureStateChange
EXTRN	?RenderTP@@3FA:WORD				; RenderTP
; Function compile flags: /Odt /ZI
;	COMDAT ?DrawCubePolysClip@@YAXPAUWORLD_MODEL@@J@Z
_TEXT	SEGMENT
tv3128 = -164						; size = 8
tv2831 = -164						; size = 8
tv2575 = -164						; size = 8
tv2256 = -164						; size = 8
__i$82528 = -92						; size = 4
__i$82495 = -88						; size = 4
__i$82462 = -84						; size = 4
__i$82388 = -80						; size = 4
__i$82355 = -76						; size = 4
__i$82322 = -72						; size = 4
__i$82289 = -68						; size = 4
__i$82215 = -64						; size = 4
__i$82182 = -60						; size = 4
__i$82149 = -56						; size = 4
__i$82069 = -52						; size = 4
__i$82036 = -48						; size = 4
__i$82003 = -44						; size = 4
__i$81970 = -40						; size = 4
_count$ = -36						; size = 2
_envbucket$ = -32					; size = 4
_bucketrgb$ = -28					; size = 4
_vertrgb$ = -24						; size = 4
_bucket$ = -20						; size = 4
_vert$ = -16						; size = 4
_mp$ = -12						; size = 4
_clip$ = -8						; size = 4
_i$ = -4						; size = 4
_m$ = 8							; size = 4
_lit$ = 12						; size = 4
?DrawCubePolysClip@@YAXPAUWORLD_MODEL@@J@Z PROC NEAR	; DrawCubePolysClip, COMDAT

; 1397 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 164				; 000000a4H
	push	ebx
	push	esi
	push	edi

; 1398 : 	long i, clip;
; 1399 : 	WORLD_POLY *mp;
; 1400 : 	VERTEX_TEX1 *vert;
; 1401 : 	BUCKET_TEX1 *bucket;
; 1402 : 	VERTEX_TEX0 *vertrgb;
; 1403 : 	BUCKET_TEX0 *bucketrgb;
; 1404 : 	BUCKET_ENV *envbucket;
; 1405 : 	short count;
; 1406 : 
; 1407 : // draw textured quads
; 1408 : 
; 1409 : 	mp = m->PolyPtr;

	mov	eax, DWORD PTR _m$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	DWORD PTR _mp$[ebp], ecx

; 1410 : 
; 1411 : 	for (i = m->QuadNumTex ; i ; i--, mp++)

	mov	eax, DWORD PTR _m$[ebp]
	movsx	ecx, WORD PTR [eax+8]
	mov	DWORD PTR _i$[ebp], ecx
	jmp	SHORT $L81934
$L81935:
	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	mov	ecx, DWORD PTR _mp$[ebp]
	add	ecx, 80					; 00000050H
	mov	DWORD PTR _mp$[ebp], ecx
$L81934:
	cmp	DWORD PTR _i$[ebp], 0
	je	$L81936

; 1412 : 	{
; 1413 : 
; 1414 : // reject?
; 1415 : 
; 1416 : 		REJECT_WORLD_POLY();

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	and	ecx, DWORD PTR ?CamVisiMask@@3_KA
	mov	edx, DWORD PTR [eax+12]
	and	edx, DWORD PTR ?CamVisiMask@@3_KA+4
	mov	DWORD PTR tv2256[ebp], ecx
	mov	DWORD PTR tv2256[ebp+4], edx
	mov	eax, DWORD PTR tv2256[ebp]
	or	eax, DWORD PTR tv2256[ebp+4]
	je	SHORT $L81937
	jmp	SHORT $L81935
$L81937:
	mov	eax, DWORD PTR _mp$[ebp]
	movsx	ecx, WORD PTR [eax]
	and	ecx, 2
	jne	SHORT $L81938
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	fld	DWORD PTR [ecx+36]
	mov	edx, DWORD PTR _mp$[ebp]
	mov	eax, DWORD PTR [edx+68]
	fsub	DWORD PTR [eax+36]
	mov	ecx, DWORD PTR _mp$[ebp]
	mov	edx, DWORD PTR [ecx+72]
	fld	DWORD PTR [edx+40]
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	fsub	DWORD PTR [ecx+40]
	fmulp	ST(1), ST(0)
	mov	edx, DWORD PTR _mp$[ebp]
	mov	eax, DWORD PTR [edx+64]
	fld	DWORD PTR [eax+40]
	mov	ecx, DWORD PTR _mp$[ebp]
	mov	edx, DWORD PTR [ecx+68]
	fsub	DWORD PTR [edx+40]
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	fld	DWORD PTR [ecx+36]
	mov	edx, DWORD PTR _mp$[ebp]
	mov	eax, DWORD PTR [edx+68]
	fsub	DWORD PTR [eax+36]
	fmulp	ST(1), ST(0)
	fsubp	ST(1), ST(0)
	fcomp	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $L81938
	jmp	$L81935
$L81938:

; 1417 : 		CLIP_QUAD();

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	movzx	edx, BYTE PTR [ecx+88]
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	movzx	eax, BYTE PTR [ecx+88]
	and	edx, eax
	mov	ecx, DWORD PTR _mp$[ebp]
	mov	eax, DWORD PTR [ecx+72]
	movzx	ecx, BYTE PTR [eax+88]
	and	edx, ecx
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	movzx	eax, BYTE PTR [ecx+88]
	and	edx, eax
	je	SHORT $L81940
	jmp	$L81935
$L81940:
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	movzx	edx, BYTE PTR [ecx+88]
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	movzx	eax, BYTE PTR [ecx+88]
	or	edx, eax
	mov	ecx, DWORD PTR _mp$[ebp]
	mov	eax, DWORD PTR [ecx+72]
	movzx	ecx, BYTE PTR [eax+88]
	or	edx, ecx
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	movzx	eax, BYTE PTR [ecx+88]
	or	edx, eax
	mov	DWORD PTR _clip$[ebp], edx

; 1418 : 		INC_POLY_COUNT(WorldDrawnCount, 2);

	movsx	eax, WORD PTR ?WorldDrawnCount@@3FA	; WorldDrawnCount
	add	eax, 2
	mov	WORD PTR ?WorldDrawnCount@@3FA, ax	; WorldDrawnCount

; 1419 : 
; 1420 : // get vert ptr
; 1421 : 
; 1422 : 		if (mp->Type & POLY_SEMITRANS)

	mov	eax, DWORD PTR _mp$[ebp]
	movsx	ecx, WORD PTR [eax]
	and	ecx, 4
	je	$L81941

; 1423 : 		{
; 1424 : 			if (!SEMI_POLY_FREE()) continue;

	cmp	DWORD PTR ?SemiCount@@3JA, 800		; SemiCount, 00000320H
	jl	SHORT $L81942
	jmp	$L81935
$L81942:

; 1425 : 			SEMI_POLY_SETUP(vert, WorldFog, 4, mp->Tpage, clip, (mp->Type & POLY_SEMITRANS_ONE) != 0);

	movsx	eax, WORD PTR _WorldFog
	mov	ecx, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	ecx, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[ecx+12], eax
	mov	eax, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	eax, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[eax+4], 4
	mov	eax, DWORD PTR _mp$[ebp]
	movsx	ecx, WORD PTR [eax+2]
	mov	edx, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	edx, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[edx+8], ecx
	cmp	DWORD PTR _clip$[ebp], 0
	je	SHORT $L81943
	mov	eax, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	eax, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[eax], 8
	jmp	SHORT $L81944
$L81943:
	mov	eax, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	eax, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[eax], 12 ; 0000000cH
$L81944:
	mov	eax, DWORD PTR _mp$[ebp]
	movsx	ecx, WORD PTR [eax]
	and	ecx, 256				; 00000100H
	neg	ecx
	sbb	ecx, ecx
	neg	ecx
	mov	edx, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	edx, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[edx+16], ecx
	mov	eax, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	eax, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[eax+20], 0
	mov	eax, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	eax, 152				; 00000098H
	add	eax, OFFSET FLAT:?SemiPoly@@3PAUDRAW_SEMI_POLY@@A+24
	mov	DWORD PTR _vert$[ebp], eax
	mov	ecx, DWORD PTR ?SemiCount@@3JA		; SemiCount
	add	ecx, 1
	mov	DWORD PTR ?SemiCount@@3JA, ecx		; SemiCount

; 1426 : 		}
; 1427 : 		else

	jmp	$L81945
$L81941:

; 1428 : 		{
; 1429 : 			if (clip) bucket = &WorldBucketHeadClip[mp->Tpage];

	cmp	DWORD PTR _clip$[ebp], 0
	je	SHORT $L81946
	mov	eax, DWORD PTR _mp$[ebp]
	movsx	ecx, WORD PTR [eax+2]
	imul	ecx, 7208				; 00001c28H
	add	ecx, DWORD PTR _WorldBucketHeadClip
	mov	DWORD PTR _bucket$[ebp], ecx

; 1430 : 			else bucket = &WorldBucketHead[mp->Tpage];

	jmp	SHORT $L81947
$L81946:
	mov	eax, DWORD PTR _mp$[ebp]
	movsx	ecx, WORD PTR [eax+2]
	imul	ecx, 7208				; 00001c28H
	add	ecx, DWORD PTR _WorldBucketHead
	mov	DWORD PTR _bucket$[ebp], ecx
$L81947:

; 1431 : 			count = (short)(bucket->CurrentVerts - bucket->Verts);

	mov	eax, DWORD PTR _bucket$[ebp]
	add	eax, 808				; 00000328H
	mov	ecx, DWORD PTR _bucket$[ebp]
	mov	edx, DWORD PTR [ecx+804]
	sub	edx, eax
	sar	edx, 5
	mov	WORD PTR _count$[ebp], dx

; 1432 : 
; 1433 : 			if (count > BUCKET_VERT_END)

	movsx	eax, WORD PTR _count$[ebp]
	cmp	eax, 196				; 000000c4H
	jle	$L81949

; 1434 : 			{
; 1435 : 				SET_TPAGE(mp->Tpage);

	movsx	eax, WORD PTR ?RenderTP@@3FA		; RenderTP
	mov	ecx, DWORD PTR _mp$[ebp]
	movsx	edx, WORD PTR [ecx+2]
	cmp	eax, edx
	je	SHORT $L81950
	mov	eax, DWORD PTR _mp$[ebp]
	mov	cx, WORD PTR [eax+2]
	mov	WORD PTR ?RenderTP@@3FA, cx		; RenderTP
	movsx	edx, WORD PTR ?RenderTP@@3FA		; RenderTP
	cmp	edx, -1
	jne	SHORT $L81951
	push	0
	push	0
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	edx
	call	DWORD PTR [ecx+152]
	mov	eax, DWORD PTR ?TextureStateChange@@3JA	; TextureStateChange
	add	eax, 1
	mov	DWORD PTR ?TextureStateChange@@3JA, eax	; TextureStateChange
	jmp	SHORT $L81950
$L81951:
	movsx	eax, WORD PTR ?RenderTP@@3FA		; RenderTP
	shl	eax, 6
	mov	ecx, DWORD PTR ?TexInfo@@3PAUTEXINFO@@A	; TexInfo
	mov	edx, DWORD PTR [ecx+eax+52]
	push	edx
	push	0
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	edx
	call	DWORD PTR [ecx+152]
	mov	eax, DWORD PTR ?TextureStateChange@@3JA	; TextureStateChange
	add	eax, 1
	mov	DWORD PTR ?TextureStateChange@@3JA, eax	; TextureStateChange
$L81950:

; 1436 : 				FlushOneBucketTEX1(bucket, clip);

	mov	eax, DWORD PTR _clip$[ebp]
	push	eax
	mov	ecx, DWORD PTR _bucket$[ebp]
	push	ecx
	call	?FlushOneBucketTEX1@@YAXPAUBUCKET_TEX1@@J@Z ; FlushOneBucketTEX1
	add	esp, 8

; 1437 : 				count = 0;

	mov	WORD PTR _count$[ebp], 0
$L81949:

; 1438 : 			}
; 1439 : 
; 1440 : 			bucket->CurrentIndex[0] = count;

	mov	eax, DWORD PTR _bucket$[ebp]
	mov	ecx, DWORD PTR [eax+800]
	mov	dx, WORD PTR _count$[ebp]
	mov	WORD PTR [ecx], dx

; 1441 : 			bucket->CurrentIndex[1] = count + 1;

	movsx	eax, WORD PTR _count$[ebp]
	add	eax, 1
	mov	ecx, DWORD PTR _bucket$[ebp]
	mov	edx, DWORD PTR [ecx+800]
	mov	WORD PTR [edx+2], ax

; 1442 : 			bucket->CurrentIndex[2] = count + 2;

	movsx	eax, WORD PTR _count$[ebp]
	add	eax, 2
	mov	ecx, DWORD PTR _bucket$[ebp]
	mov	edx, DWORD PTR [ecx+800]
	mov	WORD PTR [edx+4], ax

; 1443 : 			bucket->CurrentIndex[3] = count;

	mov	eax, DWORD PTR _bucket$[ebp]
	mov	ecx, DWORD PTR [eax+800]
	mov	dx, WORD PTR _count$[ebp]
	mov	WORD PTR [ecx+6], dx

; 1444 : 			bucket->CurrentIndex[4] = count + 2;

	movsx	eax, WORD PTR _count$[ebp]
	add	eax, 2
	mov	ecx, DWORD PTR _bucket$[ebp]
	mov	edx, DWORD PTR [ecx+800]
	mov	WORD PTR [edx+8], ax

; 1445 : 			bucket->CurrentIndex[5] = count + 3;

	movsx	eax, WORD PTR _count$[ebp]
	add	eax, 3
	mov	ecx, DWORD PTR _bucket$[ebp]
	mov	edx, DWORD PTR [ecx+800]
	mov	WORD PTR [edx+10], ax

; 1446 : 			bucket->CurrentIndex += 6;

	mov	eax, DWORD PTR _bucket$[ebp]
	mov	ecx, DWORD PTR [eax+800]
	add	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR _bucket$[ebp]
	mov	DWORD PTR [edx+800], ecx

; 1447 : 
; 1448 : 			vert = bucket->CurrentVerts;

	mov	eax, DWORD PTR _bucket$[ebp]
	mov	ecx, DWORD PTR [eax+804]
	mov	DWORD PTR _vert$[ebp], ecx

; 1449 : 			bucket->CurrentVerts += 4;

	mov	eax, DWORD PTR _bucket$[ebp]
	mov	ecx, DWORD PTR [eax+804]
	add	ecx, 128				; 00000080H
	mov	edx, DWORD PTR _bucket$[ebp]
	mov	DWORD PTR [edx+804], ecx
$L81945:

; 1450 : 		}
; 1451 : 
; 1452 : // copy vert info
; 1453 : 
; 1454 : 		COPY_QUAD_XYZRHW(vert);

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	add	ecx, 36					; 00000024H
	mov	edx, DWORD PTR _vert$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], ecx
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	add	ecx, 36					; 00000024H
	mov	edx, DWORD PTR _vert$[ebp]
	add	edx, 32					; 00000020H
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], ecx
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	add	ecx, 36					; 00000024H
	mov	edx, DWORD PTR _vert$[ebp]
	add	edx, 64					; 00000040H
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], ecx
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	add	ecx, 36					; 00000024H
	mov	edx, DWORD PTR _vert$[ebp]
	add	edx, 96					; 00000060H
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], ecx

; 1455 : 		COPY_QUAD_UV(vert);

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	edx, DWORD PTR [eax+36]
	mov	eax, DWORD PTR _vert$[ebp]
	mov	DWORD PTR [eax+24], ecx
	mov	DWORD PTR [eax+28], edx
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	edx, DWORD PTR [eax+44]
	mov	eax, DWORD PTR _vert$[ebp]
	mov	DWORD PTR [eax+56], ecx
	mov	DWORD PTR [eax+60], edx
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	mov	edx, DWORD PTR [eax+52]
	mov	eax, DWORD PTR _vert$[ebp]
	mov	DWORD PTR [eax+88], ecx
	mov	DWORD PTR [eax+92], edx
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	edx, DWORD PTR [eax+60]
	mov	eax, DWORD PTR _vert$[ebp]
	mov	DWORD PTR [eax+120], ecx
	mov	DWORD PTR [eax+124], edx

; 1456 : 
; 1457 : 		if (lit)

	cmp	DWORD PTR _lit$[ebp], 0
	je	$L81969

; 1458 : 		{
; 1459 : 			COPY_WORLD_QUAD_COLOR_LIT(vert);

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	mov	edx, DWORD PTR _mp$[ebp]
	movzx	eax, BYTE PTR [edx+18]
	add	eax, DWORD PTR [ecx+68]
	mov	DWORD PTR __i$81970[ebp], eax
	cmp	DWORD PTR __i$81970[ebp], 255		; 000000ffH
	jle	SHORT $L81973
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+18], 255			; 000000ffH
	jmp	SHORT $L81975
$L81973:
	cmp	DWORD PTR __i$81970[ebp], 0
	jge	SHORT $L81976
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+18], 0
	jmp	SHORT $L81975
$L81976:
	mov	eax, DWORD PTR _vert$[ebp]
	mov	cl, BYTE PTR __i$81970[ebp]
	mov	BYTE PTR [eax+18], cl
$L81975:
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	mov	edx, DWORD PTR _mp$[ebp]
	movzx	eax, BYTE PTR [edx+17]
	add	eax, DWORD PTR [ecx+72]
	mov	DWORD PTR __i$81970[ebp], eax
	cmp	DWORD PTR __i$81970[ebp], 255		; 000000ffH
	jle	SHORT $L81983
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+17], 255			; 000000ffH
	jmp	SHORT $L81985
$L81983:
	cmp	DWORD PTR __i$81970[ebp], 0
	jge	SHORT $L81986
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+17], 0
	jmp	SHORT $L81985
$L81986:
	mov	eax, DWORD PTR _vert$[ebp]
	mov	cl, BYTE PTR __i$81970[ebp]
	mov	BYTE PTR [eax+17], cl
$L81985:
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	mov	edx, DWORD PTR _mp$[ebp]
	movzx	eax, BYTE PTR [edx+16]
	add	eax, DWORD PTR [ecx+76]
	mov	DWORD PTR __i$81970[ebp], eax
	cmp	DWORD PTR __i$81970[ebp], 255		; 000000ffH
	jle	SHORT $L81993
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+16], 255			; 000000ffH
	jmp	SHORT $L81995
$L81993:
	cmp	DWORD PTR __i$81970[ebp], 0
	jge	SHORT $L81996
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+16], 0
	jmp	SHORT $L81995
$L81996:
	mov	eax, DWORD PTR _vert$[ebp]
	mov	cl, BYTE PTR __i$81970[ebp]
	mov	BYTE PTR [eax+16], cl
$L81995:
	mov	eax, DWORD PTR _vert$[ebp]
	mov	ecx, DWORD PTR _mp$[ebp]
	mov	dl, BYTE PTR [ecx+19]
	mov	BYTE PTR [eax+19], dl
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	mov	edx, DWORD PTR _mp$[ebp]
	movzx	eax, BYTE PTR [edx+22]
	add	eax, DWORD PTR [ecx+68]
	mov	DWORD PTR __i$82003[ebp], eax
	cmp	DWORD PTR __i$82003[ebp], 255		; 000000ffH
	jle	SHORT $L82006
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+50], 255			; 000000ffH
	jmp	SHORT $L82008
$L82006:
	cmp	DWORD PTR __i$82003[ebp], 0
	jge	SHORT $L82009
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+50], 0
	jmp	SHORT $L82008
$L82009:
	mov	eax, DWORD PTR _vert$[ebp]
	mov	cl, BYTE PTR __i$82003[ebp]
	mov	BYTE PTR [eax+50], cl
$L82008:
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	mov	edx, DWORD PTR _mp$[ebp]
	movzx	eax, BYTE PTR [edx+21]
	add	eax, DWORD PTR [ecx+72]
	mov	DWORD PTR __i$82003[ebp], eax
	cmp	DWORD PTR __i$82003[ebp], 255		; 000000ffH
	jle	SHORT $L82016
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+49], 255			; 000000ffH
	jmp	SHORT $L82018
$L82016:
	cmp	DWORD PTR __i$82003[ebp], 0
	jge	SHORT $L82019
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+49], 0
	jmp	SHORT $L82018
$L82019:
	mov	eax, DWORD PTR _vert$[ebp]
	mov	cl, BYTE PTR __i$82003[ebp]
	mov	BYTE PTR [eax+49], cl
$L82018:
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	mov	edx, DWORD PTR _mp$[ebp]
	movzx	eax, BYTE PTR [edx+20]
	add	eax, DWORD PTR [ecx+76]
	mov	DWORD PTR __i$82003[ebp], eax
	cmp	DWORD PTR __i$82003[ebp], 255		; 000000ffH
	jle	SHORT $L82026
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+48], 255			; 000000ffH
	jmp	SHORT $L82028
$L82026:
	cmp	DWORD PTR __i$82003[ebp], 0
	jge	SHORT $L82029
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+48], 0
	jmp	SHORT $L82028
$L82029:
	mov	eax, DWORD PTR _vert$[ebp]
	mov	cl, BYTE PTR __i$82003[ebp]
	mov	BYTE PTR [eax+48], cl
$L82028:
	mov	eax, DWORD PTR _vert$[ebp]
	mov	ecx, DWORD PTR _mp$[ebp]
	mov	dl, BYTE PTR [ecx+23]
	mov	BYTE PTR [eax+51], dl
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	mov	edx, DWORD PTR _mp$[ebp]
	movzx	eax, BYTE PTR [edx+26]
	add	eax, DWORD PTR [ecx+68]
	mov	DWORD PTR __i$82036[ebp], eax
	cmp	DWORD PTR __i$82036[ebp], 255		; 000000ffH
	jle	SHORT $L82039
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+82], 255			; 000000ffH
	jmp	SHORT $L82041
$L82039:
	cmp	DWORD PTR __i$82036[ebp], 0
	jge	SHORT $L82042
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+82], 0
	jmp	SHORT $L82041
$L82042:
	mov	eax, DWORD PTR _vert$[ebp]
	mov	cl, BYTE PTR __i$82036[ebp]
	mov	BYTE PTR [eax+82], cl
$L82041:
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	mov	edx, DWORD PTR _mp$[ebp]
	movzx	eax, BYTE PTR [edx+25]
	add	eax, DWORD PTR [ecx+72]
	mov	DWORD PTR __i$82036[ebp], eax
	cmp	DWORD PTR __i$82036[ebp], 255		; 000000ffH
	jle	SHORT $L82049
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+81], 255			; 000000ffH
	jmp	SHORT $L82051
$L82049:
	cmp	DWORD PTR __i$82036[ebp], 0
	jge	SHORT $L82052
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+81], 0
	jmp	SHORT $L82051
$L82052:
	mov	eax, DWORD PTR _vert$[ebp]
	mov	cl, BYTE PTR __i$82036[ebp]
	mov	BYTE PTR [eax+81], cl
$L82051:
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	mov	edx, DWORD PTR _mp$[ebp]
	movzx	eax, BYTE PTR [edx+24]
	add	eax, DWORD PTR [ecx+76]
	mov	DWORD PTR __i$82036[ebp], eax
	cmp	DWORD PTR __i$82036[ebp], 255		; 000000ffH
	jle	SHORT $L82059
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+80], 255			; 000000ffH
	jmp	SHORT $L82061
$L82059:
	cmp	DWORD PTR __i$82036[ebp], 0
	jge	SHORT $L82062
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+80], 0
	jmp	SHORT $L82061
$L82062:
	mov	eax, DWORD PTR _vert$[ebp]
	mov	cl, BYTE PTR __i$82036[ebp]
	mov	BYTE PTR [eax+80], cl
$L82061:
	mov	eax, DWORD PTR _vert$[ebp]
	mov	ecx, DWORD PTR _mp$[ebp]
	mov	dl, BYTE PTR [ecx+27]
	mov	BYTE PTR [eax+83], dl
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	mov	edx, DWORD PTR _mp$[ebp]
	movzx	eax, BYTE PTR [edx+30]
	add	eax, DWORD PTR [ecx+68]
	mov	DWORD PTR __i$82069[ebp], eax
	cmp	DWORD PTR __i$82069[ebp], 255		; 000000ffH
	jle	SHORT $L82072
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+114], 255			; 000000ffH
	jmp	SHORT $L82074
$L82072:
	cmp	DWORD PTR __i$82069[ebp], 0
	jge	SHORT $L82075
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+114], 0
	jmp	SHORT $L82074
$L82075:
	mov	eax, DWORD PTR _vert$[ebp]
	mov	cl, BYTE PTR __i$82069[ebp]
	mov	BYTE PTR [eax+114], cl
$L82074:
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	mov	edx, DWORD PTR _mp$[ebp]
	movzx	eax, BYTE PTR [edx+29]
	add	eax, DWORD PTR [ecx+72]
	mov	DWORD PTR __i$82069[ebp], eax
	cmp	DWORD PTR __i$82069[ebp], 255		; 000000ffH
	jle	SHORT $L82082
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+113], 255			; 000000ffH
	jmp	SHORT $L82084
$L82082:
	cmp	DWORD PTR __i$82069[ebp], 0
	jge	SHORT $L82085
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+113], 0
	jmp	SHORT $L82084
$L82085:
	mov	eax, DWORD PTR _vert$[ebp]
	mov	cl, BYTE PTR __i$82069[ebp]
	mov	BYTE PTR [eax+113], cl
$L82084:
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	mov	edx, DWORD PTR _mp$[ebp]
	movzx	eax, BYTE PTR [edx+28]
	add	eax, DWORD PTR [ecx+76]
	mov	DWORD PTR __i$82069[ebp], eax
	cmp	DWORD PTR __i$82069[ebp], 255		; 000000ffH
	jle	SHORT $L82092
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+112], 255			; 000000ffH
	jmp	SHORT $L82094
$L82092:
	cmp	DWORD PTR __i$82069[ebp], 0
	jge	SHORT $L82095
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+112], 0
	jmp	SHORT $L82094
$L82095:
	mov	eax, DWORD PTR _vert$[ebp]
	mov	cl, BYTE PTR __i$82069[ebp]
	mov	BYTE PTR [eax+112], cl
$L82094:
	mov	eax, DWORD PTR _vert$[ebp]
	mov	ecx, DWORD PTR _mp$[ebp]
	mov	dl, BYTE PTR [ecx+31]
	mov	BYTE PTR [eax+115], dl

; 1460 : 		}
; 1461 : 		else

	jmp	SHORT $L82102
$L81969:

; 1462 : 		{
; 1463 : 			COPY_WORLD_QUAD_COLOR(vert);

	mov	eax, DWORD PTR _vert$[ebp]
	mov	ecx, DWORD PTR _mp$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+16], edx
	mov	eax, DWORD PTR _vert$[ebp]
	mov	ecx, DWORD PTR _mp$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR [eax+48], edx
	mov	eax, DWORD PTR _vert$[ebp]
	mov	ecx, DWORD PTR _mp$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR [eax+80], edx
	mov	eax, DWORD PTR _vert$[ebp]
	mov	ecx, DWORD PTR _mp$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR [eax+112], edx
$L82102:

; 1464 : 		}
; 1465 : 
; 1466 : 		if (WorldFog)

	movsx	eax, WORD PTR _WorldFog
	test	eax, eax
	je	SHORT $L82103

; 1467 : 			COPY_QUAD_SPECULAR(vert);

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	mov	edx, DWORD PTR _vert$[ebp]
	mov	eax, DWORD PTR [ecx+56]
	mov	DWORD PTR [edx+20], eax
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	mov	edx, DWORD PTR _vert$[ebp]
	mov	eax, DWORD PTR [ecx+56]
	mov	DWORD PTR [edx+52], eax
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	mov	edx, DWORD PTR _vert$[ebp]
	mov	eax, DWORD PTR [ecx+56]
	mov	DWORD PTR [edx+84], eax
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	mov	edx, DWORD PTR _vert$[ebp]
	mov	eax, DWORD PTR [ecx+56]
	mov	DWORD PTR [edx+116], eax
$L82103:

; 1468 : 
; 1469 : // env?
; 1470 : 
; 1471 : 		if (mp->Type & WorldEnvMask)

	mov	eax, DWORD PTR _mp$[ebp]
	movsx	ecx, WORD PTR [eax]
	movsx	edx, WORD PTR _WorldEnvMask
	and	ecx, edx
	je	$L82104

; 1472 : 		{
; 1473 : 			INC_POLY_COUNT(WorldDrawnCount, 2);

	movsx	eax, WORD PTR ?WorldDrawnCount@@3FA	; WorldDrawnCount
	add	eax, 2
	mov	WORD PTR ?WorldDrawnCount@@3FA, ax	; WorldDrawnCount

; 1474 : 
; 1475 : // get env vert ptr
; 1476 : 
; 1477 : 			if (clip) envbucket = WorldBucketHeadEnvClip;

	cmp	DWORD PTR _clip$[ebp], 0
	je	SHORT $L82105
	mov	eax, DWORD PTR _WorldBucketHeadEnvClip
	mov	DWORD PTR _envbucket$[ebp], eax

; 1478 : 			else envbucket = WorldBucketHeadEnv;

	jmp	SHORT $L82106
$L82105:
	mov	eax, DWORD PTR _WorldBucketHeadEnv
	mov	DWORD PTR _envbucket$[ebp], eax
$L82106:

; 1479 : 			count = (short)(envbucket->CurrentVerts - envbucket->Verts);

	mov	eax, DWORD PTR _envbucket$[ebp]
	add	eax, 8008				; 00001f48H
	mov	ecx, DWORD PTR _envbucket$[ebp]
	mov	edx, DWORD PTR [ecx+8004]
	sub	edx, eax
	sar	edx, 5
	mov	WORD PTR _count$[ebp], dx

; 1480 : 
; 1481 : 			if (count > ENV_VERT_END)

	movsx	eax, WORD PTR _count$[ebp]
	cmp	eax, 1996				; 000007ccH
	jle	SHORT $L82108

; 1482 : 				continue;

	jmp	$L81935
$L82108:

; 1483 : 
; 1484 : 			envbucket->CurrentIndex[0] = count;

	mov	eax, DWORD PTR _envbucket$[ebp]
	mov	ecx, DWORD PTR [eax+8000]
	mov	dx, WORD PTR _count$[ebp]
	mov	WORD PTR [ecx], dx

; 1485 : 			envbucket->CurrentIndex[1] = count + 1;

	movsx	eax, WORD PTR _count$[ebp]
	add	eax, 1
	mov	ecx, DWORD PTR _envbucket$[ebp]
	mov	edx, DWORD PTR [ecx+8000]
	mov	WORD PTR [edx+2], ax

; 1486 : 			envbucket->CurrentIndex[2] = count + 2;

	movsx	eax, WORD PTR _count$[ebp]
	add	eax, 2
	mov	ecx, DWORD PTR _envbucket$[ebp]
	mov	edx, DWORD PTR [ecx+8000]
	mov	WORD PTR [edx+4], ax

; 1487 : 			envbucket->CurrentIndex[3] = count;

	mov	eax, DWORD PTR _envbucket$[ebp]
	mov	ecx, DWORD PTR [eax+8000]
	mov	dx, WORD PTR _count$[ebp]
	mov	WORD PTR [ecx+6], dx

; 1488 : 			envbucket->CurrentIndex[4] = count + 2;

	movsx	eax, WORD PTR _count$[ebp]
	add	eax, 2
	mov	ecx, DWORD PTR _envbucket$[ebp]
	mov	edx, DWORD PTR [ecx+8000]
	mov	WORD PTR [edx+8], ax

; 1489 : 			envbucket->CurrentIndex[5] = count + 3;

	movsx	eax, WORD PTR _count$[ebp]
	add	eax, 3
	mov	ecx, DWORD PTR _envbucket$[ebp]
	mov	edx, DWORD PTR [ecx+8000]
	mov	WORD PTR [edx+10], ax

; 1490 : 			envbucket->CurrentIndex += 6;

	mov	eax, DWORD PTR _envbucket$[ebp]
	mov	ecx, DWORD PTR [eax+8000]
	add	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR _envbucket$[ebp]
	mov	DWORD PTR [edx+8000], ecx

; 1491 : 
; 1492 : 			vert = envbucket->CurrentVerts;

	mov	eax, DWORD PTR _envbucket$[ebp]
	mov	ecx, DWORD PTR [eax+8004]
	mov	DWORD PTR _vert$[ebp], ecx

; 1493 : 			envbucket->CurrentVerts += 4;

	mov	eax, DWORD PTR _envbucket$[ebp]
	mov	ecx, DWORD PTR [eax+8004]
	add	ecx, 128				; 00000080H
	mov	edx, DWORD PTR _envbucket$[ebp]
	mov	DWORD PTR [edx+8004], ecx

; 1494 : 
; 1495 : // copy env vert info
; 1496 : 
; 1497 : 			*(MEM32*)&vert[0] = *(MEM32*)&mp->v0->sx;

	mov	eax, DWORD PTR _mp$[ebp]
	mov	esi, DWORD PTR [eax+64]
	add	esi, 36					; 00000024H
	mov	ecx, 8
	mov	edi, DWORD PTR _vert$[ebp]
	rep movsd

; 1498 : 			*(MEM32*)&vert[1] = *(MEM32*)&mp->v1->sx;

	mov	eax, DWORD PTR _mp$[ebp]
	mov	esi, DWORD PTR [eax+68]
	add	esi, 36					; 00000024H
	mov	edi, DWORD PTR _vert$[ebp]
	add	edi, 32					; 00000020H
	mov	ecx, 8
	rep movsd

; 1499 : 			*(MEM32*)&vert[2] = *(MEM32*)&mp->v2->sx;

	mov	eax, DWORD PTR _mp$[ebp]
	mov	esi, DWORD PTR [eax+72]
	add	esi, 36					; 00000024H
	mov	edi, DWORD PTR _vert$[ebp]
	add	edi, 64					; 00000040H
	mov	ecx, 8
	rep movsd

; 1500 : 			*(MEM32*)&vert[3] = *(MEM32*)&mp->v3->sx;

	mov	eax, DWORD PTR _mp$[ebp]
	mov	esi, DWORD PTR [eax+76]
	add	esi, 36					; 00000024H
	mov	edi, DWORD PTR _vert$[ebp]
	add	edi, 96					; 00000060H
	mov	ecx, 8
	rep movsd
$L82104:

; 1501 : 		}
; 1502 : 	}

	jmp	$L81935
$L81936:

; 1503 : 
; 1504 : // draw textured tri's
; 1505 : 
; 1506 : 	for (i = m->TriNumTex ; i ; i--, mp++)

	mov	eax, DWORD PTR _m$[ebp]
	movsx	ecx, WORD PTR [eax+10]
	mov	DWORD PTR _i$[ebp], ecx
	jmp	SHORT $L82117
$L82118:
	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	mov	ecx, DWORD PTR _mp$[ebp]
	add	ecx, 80					; 00000050H
	mov	DWORD PTR _mp$[ebp], ecx
$L82117:
	cmp	DWORD PTR _i$[ebp], 0
	je	$L82119

; 1507 : 	{
; 1508 : 
; 1509 : // reject?
; 1510 : 
; 1511 : 		REJECT_WORLD_POLY();

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	and	ecx, DWORD PTR ?CamVisiMask@@3_KA
	mov	edx, DWORD PTR [eax+12]
	and	edx, DWORD PTR ?CamVisiMask@@3_KA+4
	mov	DWORD PTR tv2575[ebp], ecx
	mov	DWORD PTR tv2575[ebp+4], edx
	mov	eax, DWORD PTR tv2575[ebp]
	or	eax, DWORD PTR tv2575[ebp+4]
	je	SHORT $L82120
	jmp	SHORT $L82118
$L82120:
	mov	eax, DWORD PTR _mp$[ebp]
	movsx	ecx, WORD PTR [eax]
	and	ecx, 2
	jne	SHORT $L82121
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	fld	DWORD PTR [ecx+36]
	mov	edx, DWORD PTR _mp$[ebp]
	mov	eax, DWORD PTR [edx+68]
	fsub	DWORD PTR [eax+36]
	mov	ecx, DWORD PTR _mp$[ebp]
	mov	edx, DWORD PTR [ecx+72]
	fld	DWORD PTR [edx+40]
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	fsub	DWORD PTR [ecx+40]
	fmulp	ST(1), ST(0)
	mov	edx, DWORD PTR _mp$[ebp]
	mov	eax, DWORD PTR [edx+64]
	fld	DWORD PTR [eax+40]
	mov	ecx, DWORD PTR _mp$[ebp]
	mov	edx, DWORD PTR [ecx+68]
	fsub	DWORD PTR [edx+40]
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	fld	DWORD PTR [ecx+36]
	mov	edx, DWORD PTR _mp$[ebp]
	mov	eax, DWORD PTR [edx+68]
	fsub	DWORD PTR [eax+36]
	fmulp	ST(1), ST(0)
	fsubp	ST(1), ST(0)
	fcomp	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $L82121
	jmp	$L82118
$L82121:

; 1512 : 		CLIP_TRI();

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	movzx	edx, BYTE PTR [ecx+88]
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	movzx	eax, BYTE PTR [ecx+88]
	and	edx, eax
	mov	ecx, DWORD PTR _mp$[ebp]
	mov	eax, DWORD PTR [ecx+72]
	movzx	ecx, BYTE PTR [eax+88]
	and	edx, ecx
	je	SHORT $L82123
	jmp	$L82118
$L82123:
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	movzx	edx, BYTE PTR [ecx+88]
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	movzx	eax, BYTE PTR [ecx+88]
	or	edx, eax
	mov	ecx, DWORD PTR _mp$[ebp]
	mov	eax, DWORD PTR [ecx+72]
	movzx	ecx, BYTE PTR [eax+88]
	or	edx, ecx
	mov	DWORD PTR _clip$[ebp], edx

; 1513 : 		INC_POLY_COUNT(WorldDrawnCount, 1);

	movsx	eax, WORD PTR ?WorldDrawnCount@@3FA	; WorldDrawnCount
	add	eax, 1
	mov	WORD PTR ?WorldDrawnCount@@3FA, ax	; WorldDrawnCount

; 1514 : 
; 1515 : // get vert ptr
; 1516 : 
; 1517 : 		if (mp->Type & POLY_SEMITRANS)

	mov	eax, DWORD PTR _mp$[ebp]
	movsx	ecx, WORD PTR [eax]
	and	ecx, 4
	je	$L82124

; 1518 : 		{
; 1519 : 			if (!SEMI_POLY_FREE()) continue;

	cmp	DWORD PTR ?SemiCount@@3JA, 800		; SemiCount, 00000320H
	jl	SHORT $L82125
	jmp	$L82118
$L82125:

; 1520 : 			SEMI_POLY_SETUP(vert, WorldFog, 3, mp->Tpage, clip, (mp->Type & POLY_SEMITRANS_ONE) != 0);

	movsx	eax, WORD PTR _WorldFog
	mov	ecx, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	ecx, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[ecx+12], eax
	mov	eax, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	eax, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[eax+4], 3
	mov	eax, DWORD PTR _mp$[ebp]
	movsx	ecx, WORD PTR [eax+2]
	mov	edx, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	edx, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[edx+8], ecx
	cmp	DWORD PTR _clip$[ebp], 0
	je	SHORT $L82126
	mov	eax, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	eax, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[eax], 8
	jmp	SHORT $L82127
$L82126:
	mov	eax, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	eax, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[eax], 12 ; 0000000cH
$L82127:
	mov	eax, DWORD PTR _mp$[ebp]
	movsx	ecx, WORD PTR [eax]
	and	ecx, 256				; 00000100H
	neg	ecx
	sbb	ecx, ecx
	neg	ecx
	mov	edx, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	edx, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[edx+16], ecx
	mov	eax, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	eax, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[eax+20], 0
	mov	eax, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	eax, 152				; 00000098H
	add	eax, OFFSET FLAT:?SemiPoly@@3PAUDRAW_SEMI_POLY@@A+24
	mov	DWORD PTR _vert$[ebp], eax
	mov	ecx, DWORD PTR ?SemiCount@@3JA		; SemiCount
	add	ecx, 1
	mov	DWORD PTR ?SemiCount@@3JA, ecx		; SemiCount

; 1521 : 		}
; 1522 : 		else

	jmp	$L82128
$L82124:

; 1523 : 		{
; 1524 : 			if (clip) bucket = &WorldBucketHeadClip[mp->Tpage];

	cmp	DWORD PTR _clip$[ebp], 0
	je	SHORT $L82129
	mov	eax, DWORD PTR _mp$[ebp]
	movsx	ecx, WORD PTR [eax+2]
	imul	ecx, 7208				; 00001c28H
	add	ecx, DWORD PTR _WorldBucketHeadClip
	mov	DWORD PTR _bucket$[ebp], ecx

; 1525 : 			else bucket = &WorldBucketHead[mp->Tpage];

	jmp	SHORT $L82130
$L82129:
	mov	eax, DWORD PTR _mp$[ebp]
	movsx	ecx, WORD PTR [eax+2]
	imul	ecx, 7208				; 00001c28H
	add	ecx, DWORD PTR _WorldBucketHead
	mov	DWORD PTR _bucket$[ebp], ecx
$L82130:

; 1526 : 			count = (short)(bucket->CurrentVerts - bucket->Verts);

	mov	eax, DWORD PTR _bucket$[ebp]
	add	eax, 808				; 00000328H
	mov	ecx, DWORD PTR _bucket$[ebp]
	mov	edx, DWORD PTR [ecx+804]
	sub	edx, eax
	sar	edx, 5
	mov	WORD PTR _count$[ebp], dx

; 1527 : 
; 1528 : 			if (count > BUCKET_VERT_END)

	movsx	eax, WORD PTR _count$[ebp]
	cmp	eax, 196				; 000000c4H
	jle	$L82132

; 1529 : 			{
; 1530 : 				SET_TPAGE(mp->Tpage);

	movsx	eax, WORD PTR ?RenderTP@@3FA		; RenderTP
	mov	ecx, DWORD PTR _mp$[ebp]
	movsx	edx, WORD PTR [ecx+2]
	cmp	eax, edx
	je	SHORT $L82133
	mov	eax, DWORD PTR _mp$[ebp]
	mov	cx, WORD PTR [eax+2]
	mov	WORD PTR ?RenderTP@@3FA, cx		; RenderTP
	movsx	edx, WORD PTR ?RenderTP@@3FA		; RenderTP
	cmp	edx, -1
	jne	SHORT $L82134
	push	0
	push	0
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	edx
	call	DWORD PTR [ecx+152]
	mov	eax, DWORD PTR ?TextureStateChange@@3JA	; TextureStateChange
	add	eax, 1
	mov	DWORD PTR ?TextureStateChange@@3JA, eax	; TextureStateChange
	jmp	SHORT $L82133
$L82134:
	movsx	eax, WORD PTR ?RenderTP@@3FA		; RenderTP
	shl	eax, 6
	mov	ecx, DWORD PTR ?TexInfo@@3PAUTEXINFO@@A	; TexInfo
	mov	edx, DWORD PTR [ecx+eax+52]
	push	edx
	push	0
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	edx
	call	DWORD PTR [ecx+152]
	mov	eax, DWORD PTR ?TextureStateChange@@3JA	; TextureStateChange
	add	eax, 1
	mov	DWORD PTR ?TextureStateChange@@3JA, eax	; TextureStateChange
$L82133:

; 1531 : 				FlushOneBucketTEX1(bucket, clip);

	mov	eax, DWORD PTR _clip$[ebp]
	push	eax
	mov	ecx, DWORD PTR _bucket$[ebp]
	push	ecx
	call	?FlushOneBucketTEX1@@YAXPAUBUCKET_TEX1@@J@Z ; FlushOneBucketTEX1
	add	esp, 8

; 1532 : 				count = 0;

	mov	WORD PTR _count$[ebp], 0
$L82132:

; 1533 : 			}
; 1534 : 
; 1535 : 			bucket->CurrentIndex[0] = count;

	mov	eax, DWORD PTR _bucket$[ebp]
	mov	ecx, DWORD PTR [eax+800]
	mov	dx, WORD PTR _count$[ebp]
	mov	WORD PTR [ecx], dx

; 1536 : 			bucket->CurrentIndex[1] = count + 1;

	movsx	eax, WORD PTR _count$[ebp]
	add	eax, 1
	mov	ecx, DWORD PTR _bucket$[ebp]
	mov	edx, DWORD PTR [ecx+800]
	mov	WORD PTR [edx+2], ax

; 1537 : 			bucket->CurrentIndex[2] = count + 2;

	movsx	eax, WORD PTR _count$[ebp]
	add	eax, 2
	mov	ecx, DWORD PTR _bucket$[ebp]
	mov	edx, DWORD PTR [ecx+800]
	mov	WORD PTR [edx+4], ax

; 1538 : 			bucket->CurrentIndex += 3;

	mov	eax, DWORD PTR _bucket$[ebp]
	mov	ecx, DWORD PTR [eax+800]
	add	ecx, 6
	mov	edx, DWORD PTR _bucket$[ebp]
	mov	DWORD PTR [edx+800], ecx

; 1539 : 
; 1540 : 			vert = bucket->CurrentVerts;

	mov	eax, DWORD PTR _bucket$[ebp]
	mov	ecx, DWORD PTR [eax+804]
	mov	DWORD PTR _vert$[ebp], ecx

; 1541 : 			bucket->CurrentVerts += 3;

	mov	eax, DWORD PTR _bucket$[ebp]
	mov	ecx, DWORD PTR [eax+804]
	add	ecx, 96					; 00000060H
	mov	edx, DWORD PTR _bucket$[ebp]
	mov	DWORD PTR [edx+804], ecx
$L82128:

; 1542 : 		}
; 1543 : 
; 1544 : // copy vert info
; 1545 : 
; 1546 : 		COPY_TRI_XYZRHW(vert);

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	add	ecx, 36					; 00000024H
	mov	edx, DWORD PTR _vert$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], ecx
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	add	ecx, 36					; 00000024H
	mov	edx, DWORD PTR _vert$[ebp]
	add	edx, 32					; 00000020H
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], ecx
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	add	ecx, 36					; 00000024H
	mov	edx, DWORD PTR _vert$[ebp]
	add	edx, 64					; 00000040H
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], ecx

; 1547 : 		COPY_TRI_UV(vert);

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	edx, DWORD PTR [eax+36]
	mov	eax, DWORD PTR _vert$[ebp]
	mov	DWORD PTR [eax+24], ecx
	mov	DWORD PTR [eax+28], edx
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	edx, DWORD PTR [eax+44]
	mov	eax, DWORD PTR _vert$[ebp]
	mov	DWORD PTR [eax+56], ecx
	mov	DWORD PTR [eax+60], edx
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	mov	edx, DWORD PTR [eax+52]
	mov	eax, DWORD PTR _vert$[ebp]
	mov	DWORD PTR [eax+88], ecx
	mov	DWORD PTR [eax+92], edx

; 1548 : 
; 1549 : 		if (lit)

	cmp	DWORD PTR _lit$[ebp], 0
	je	$L82148

; 1550 : 		{
; 1551 : 			COPY_WORLD_TRI_COLOR_LIT(vert);

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	mov	edx, DWORD PTR _mp$[ebp]
	movzx	eax, BYTE PTR [edx+18]
	add	eax, DWORD PTR [ecx+68]
	mov	DWORD PTR __i$82149[ebp], eax
	cmp	DWORD PTR __i$82149[ebp], 255		; 000000ffH
	jle	SHORT $L82152
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+18], 255			; 000000ffH
	jmp	SHORT $L82154
$L82152:
	cmp	DWORD PTR __i$82149[ebp], 0
	jge	SHORT $L82155
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+18], 0
	jmp	SHORT $L82154
$L82155:
	mov	eax, DWORD PTR _vert$[ebp]
	mov	cl, BYTE PTR __i$82149[ebp]
	mov	BYTE PTR [eax+18], cl
$L82154:
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	mov	edx, DWORD PTR _mp$[ebp]
	movzx	eax, BYTE PTR [edx+17]
	add	eax, DWORD PTR [ecx+72]
	mov	DWORD PTR __i$82149[ebp], eax
	cmp	DWORD PTR __i$82149[ebp], 255		; 000000ffH
	jle	SHORT $L82162
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+17], 255			; 000000ffH
	jmp	SHORT $L82164
$L82162:
	cmp	DWORD PTR __i$82149[ebp], 0
	jge	SHORT $L82165
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+17], 0
	jmp	SHORT $L82164
$L82165:
	mov	eax, DWORD PTR _vert$[ebp]
	mov	cl, BYTE PTR __i$82149[ebp]
	mov	BYTE PTR [eax+17], cl
$L82164:
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	mov	edx, DWORD PTR _mp$[ebp]
	movzx	eax, BYTE PTR [edx+16]
	add	eax, DWORD PTR [ecx+76]
	mov	DWORD PTR __i$82149[ebp], eax
	cmp	DWORD PTR __i$82149[ebp], 255		; 000000ffH
	jle	SHORT $L82172
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+16], 255			; 000000ffH
	jmp	SHORT $L82174
$L82172:
	cmp	DWORD PTR __i$82149[ebp], 0
	jge	SHORT $L82175
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+16], 0
	jmp	SHORT $L82174
$L82175:
	mov	eax, DWORD PTR _vert$[ebp]
	mov	cl, BYTE PTR __i$82149[ebp]
	mov	BYTE PTR [eax+16], cl
$L82174:
	mov	eax, DWORD PTR _vert$[ebp]
	mov	ecx, DWORD PTR _mp$[ebp]
	mov	dl, BYTE PTR [ecx+19]
	mov	BYTE PTR [eax+19], dl
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	mov	edx, DWORD PTR _mp$[ebp]
	movzx	eax, BYTE PTR [edx+22]
	add	eax, DWORD PTR [ecx+68]
	mov	DWORD PTR __i$82182[ebp], eax
	cmp	DWORD PTR __i$82182[ebp], 255		; 000000ffH
	jle	SHORT $L82185
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+50], 255			; 000000ffH
	jmp	SHORT $L82187
$L82185:
	cmp	DWORD PTR __i$82182[ebp], 0
	jge	SHORT $L82188
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+50], 0
	jmp	SHORT $L82187
$L82188:
	mov	eax, DWORD PTR _vert$[ebp]
	mov	cl, BYTE PTR __i$82182[ebp]
	mov	BYTE PTR [eax+50], cl
$L82187:
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	mov	edx, DWORD PTR _mp$[ebp]
	movzx	eax, BYTE PTR [edx+21]
	add	eax, DWORD PTR [ecx+72]
	mov	DWORD PTR __i$82182[ebp], eax
	cmp	DWORD PTR __i$82182[ebp], 255		; 000000ffH
	jle	SHORT $L82195
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+49], 255			; 000000ffH
	jmp	SHORT $L82197
$L82195:
	cmp	DWORD PTR __i$82182[ebp], 0
	jge	SHORT $L82198
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+49], 0
	jmp	SHORT $L82197
$L82198:
	mov	eax, DWORD PTR _vert$[ebp]
	mov	cl, BYTE PTR __i$82182[ebp]
	mov	BYTE PTR [eax+49], cl
$L82197:
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	mov	edx, DWORD PTR _mp$[ebp]
	movzx	eax, BYTE PTR [edx+20]
	add	eax, DWORD PTR [ecx+76]
	mov	DWORD PTR __i$82182[ebp], eax
	cmp	DWORD PTR __i$82182[ebp], 255		; 000000ffH
	jle	SHORT $L82205
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+48], 255			; 000000ffH
	jmp	SHORT $L82207
$L82205:
	cmp	DWORD PTR __i$82182[ebp], 0
	jge	SHORT $L82208
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+48], 0
	jmp	SHORT $L82207
$L82208:
	mov	eax, DWORD PTR _vert$[ebp]
	mov	cl, BYTE PTR __i$82182[ebp]
	mov	BYTE PTR [eax+48], cl
$L82207:
	mov	eax, DWORD PTR _vert$[ebp]
	mov	ecx, DWORD PTR _mp$[ebp]
	mov	dl, BYTE PTR [ecx+23]
	mov	BYTE PTR [eax+51], dl
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	mov	edx, DWORD PTR _mp$[ebp]
	movzx	eax, BYTE PTR [edx+26]
	add	eax, DWORD PTR [ecx+68]
	mov	DWORD PTR __i$82215[ebp], eax
	cmp	DWORD PTR __i$82215[ebp], 255		; 000000ffH
	jle	SHORT $L82218
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+82], 255			; 000000ffH
	jmp	SHORT $L82220
$L82218:
	cmp	DWORD PTR __i$82215[ebp], 0
	jge	SHORT $L82221
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+82], 0
	jmp	SHORT $L82220
$L82221:
	mov	eax, DWORD PTR _vert$[ebp]
	mov	cl, BYTE PTR __i$82215[ebp]
	mov	BYTE PTR [eax+82], cl
$L82220:
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	mov	edx, DWORD PTR _mp$[ebp]
	movzx	eax, BYTE PTR [edx+25]
	add	eax, DWORD PTR [ecx+72]
	mov	DWORD PTR __i$82215[ebp], eax
	cmp	DWORD PTR __i$82215[ebp], 255		; 000000ffH
	jle	SHORT $L82228
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+81], 255			; 000000ffH
	jmp	SHORT $L82230
$L82228:
	cmp	DWORD PTR __i$82215[ebp], 0
	jge	SHORT $L82231
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+81], 0
	jmp	SHORT $L82230
$L82231:
	mov	eax, DWORD PTR _vert$[ebp]
	mov	cl, BYTE PTR __i$82215[ebp]
	mov	BYTE PTR [eax+81], cl
$L82230:
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	mov	edx, DWORD PTR _mp$[ebp]
	movzx	eax, BYTE PTR [edx+24]
	add	eax, DWORD PTR [ecx+76]
	mov	DWORD PTR __i$82215[ebp], eax
	cmp	DWORD PTR __i$82215[ebp], 255		; 000000ffH
	jle	SHORT $L82238
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+80], 255			; 000000ffH
	jmp	SHORT $L82240
$L82238:
	cmp	DWORD PTR __i$82215[ebp], 0
	jge	SHORT $L82241
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+80], 0
	jmp	SHORT $L82240
$L82241:
	mov	eax, DWORD PTR _vert$[ebp]
	mov	cl, BYTE PTR __i$82215[ebp]
	mov	BYTE PTR [eax+80], cl
$L82240:
	mov	eax, DWORD PTR _vert$[ebp]
	mov	ecx, DWORD PTR _mp$[ebp]
	mov	dl, BYTE PTR [ecx+27]
	mov	BYTE PTR [eax+83], dl

; 1552 : 		}
; 1553 : 		else

	jmp	SHORT $L82248
$L82148:

; 1554 : 		{
; 1555 : 			COPY_WORLD_TRI_COLOR(vert);

	mov	eax, DWORD PTR _vert$[ebp]
	mov	ecx, DWORD PTR _mp$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+16], edx
	mov	eax, DWORD PTR _vert$[ebp]
	mov	ecx, DWORD PTR _mp$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR [eax+48], edx
	mov	eax, DWORD PTR _vert$[ebp]
	mov	ecx, DWORD PTR _mp$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR [eax+80], edx
$L82248:

; 1556 : 		}
; 1557 : 
; 1558 : 		if (WorldFog)

	movsx	eax, WORD PTR _WorldFog
	test	eax, eax
	je	SHORT $L82249

; 1559 : 			COPY_TRI_SPECULAR(vert);

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	mov	edx, DWORD PTR _vert$[ebp]
	mov	eax, DWORD PTR [ecx+56]
	mov	DWORD PTR [edx+20], eax
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	mov	edx, DWORD PTR _vert$[ebp]
	mov	eax, DWORD PTR [ecx+56]
	mov	DWORD PTR [edx+52], eax
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	mov	edx, DWORD PTR _vert$[ebp]
	mov	eax, DWORD PTR [ecx+56]
	mov	DWORD PTR [edx+84], eax
$L82249:

; 1560 : 
; 1561 : // env?
; 1562 : 
; 1563 : 		if (mp->Type & WorldEnvMask)

	mov	eax, DWORD PTR _mp$[ebp]
	movsx	ecx, WORD PTR [eax]
	movsx	edx, WORD PTR _WorldEnvMask
	and	ecx, edx
	je	$L82250

; 1564 : 		{
; 1565 : 			INC_POLY_COUNT(WorldDrawnCount, 1);

	movsx	eax, WORD PTR ?WorldDrawnCount@@3FA	; WorldDrawnCount
	add	eax, 1
	mov	WORD PTR ?WorldDrawnCount@@3FA, ax	; WorldDrawnCount

; 1566 : 
; 1567 : // get env vert ptr
; 1568 : 
; 1569 : 			if (clip) envbucket = WorldBucketHeadEnvClip;

	cmp	DWORD PTR _clip$[ebp], 0
	je	SHORT $L82251
	mov	eax, DWORD PTR _WorldBucketHeadEnvClip
	mov	DWORD PTR _envbucket$[ebp], eax

; 1570 : 			else envbucket = WorldBucketHeadEnv;

	jmp	SHORT $L82252
$L82251:
	mov	eax, DWORD PTR _WorldBucketHeadEnv
	mov	DWORD PTR _envbucket$[ebp], eax
$L82252:

; 1571 : 			count = (short)(envbucket->CurrentVerts - envbucket->Verts);

	mov	eax, DWORD PTR _envbucket$[ebp]
	add	eax, 8008				; 00001f48H
	mov	ecx, DWORD PTR _envbucket$[ebp]
	mov	edx, DWORD PTR [ecx+8004]
	sub	edx, eax
	sar	edx, 5
	mov	WORD PTR _count$[ebp], dx

; 1572 : 
; 1573 : 			if (count > ENV_VERT_END)

	movsx	eax, WORD PTR _count$[ebp]
	cmp	eax, 1996				; 000007ccH
	jle	SHORT $L82254

; 1574 : 				continue;

	jmp	$L82118
$L82254:

; 1575 : 
; 1576 : 			envbucket->CurrentIndex[0] = count;

	mov	eax, DWORD PTR _envbucket$[ebp]
	mov	ecx, DWORD PTR [eax+8000]
	mov	dx, WORD PTR _count$[ebp]
	mov	WORD PTR [ecx], dx

; 1577 : 			envbucket->CurrentIndex[1] = count + 1;

	movsx	eax, WORD PTR _count$[ebp]
	add	eax, 1
	mov	ecx, DWORD PTR _envbucket$[ebp]
	mov	edx, DWORD PTR [ecx+8000]
	mov	WORD PTR [edx+2], ax

; 1578 : 			envbucket->CurrentIndex[2] = count + 2;

	movsx	eax, WORD PTR _count$[ebp]
	add	eax, 2
	mov	ecx, DWORD PTR _envbucket$[ebp]
	mov	edx, DWORD PTR [ecx+8000]
	mov	WORD PTR [edx+4], ax

; 1579 : 			envbucket->CurrentIndex += 3;

	mov	eax, DWORD PTR _envbucket$[ebp]
	mov	ecx, DWORD PTR [eax+8000]
	add	ecx, 6
	mov	edx, DWORD PTR _envbucket$[ebp]
	mov	DWORD PTR [edx+8000], ecx

; 1580 : 
; 1581 : 			vert = envbucket->CurrentVerts;

	mov	eax, DWORD PTR _envbucket$[ebp]
	mov	ecx, DWORD PTR [eax+8004]
	mov	DWORD PTR _vert$[ebp], ecx

; 1582 : 			envbucket->CurrentVerts += 3;

	mov	eax, DWORD PTR _envbucket$[ebp]
	mov	ecx, DWORD PTR [eax+8004]
	add	ecx, 96					; 00000060H
	mov	edx, DWORD PTR _envbucket$[ebp]
	mov	DWORD PTR [edx+8004], ecx

; 1583 : 
; 1584 : // copy env vert info
; 1585 : 
; 1586 : 			*(MEM32*)&vert[0] = *(MEM32*)&mp->v0->sx;

	mov	eax, DWORD PTR _mp$[ebp]
	mov	esi, DWORD PTR [eax+64]
	add	esi, 36					; 00000024H
	mov	ecx, 8
	mov	edi, DWORD PTR _vert$[ebp]
	rep movsd

; 1587 : 			*(MEM32*)&vert[1] = *(MEM32*)&mp->v1->sx;

	mov	eax, DWORD PTR _mp$[ebp]
	mov	esi, DWORD PTR [eax+68]
	add	esi, 36					; 00000024H
	mov	edi, DWORD PTR _vert$[ebp]
	add	edi, 32					; 00000020H
	mov	ecx, 8
	rep movsd

; 1588 : 			*(MEM32*)&vert[2] = *(MEM32*)&mp->v2->sx;

	mov	eax, DWORD PTR _mp$[ebp]
	mov	esi, DWORD PTR [eax+72]
	add	esi, 36					; 00000024H
	mov	edi, DWORD PTR _vert$[ebp]
	add	edi, 64					; 00000040H
	mov	ecx, 8
	rep movsd
$L82250:

; 1589 : 		}
; 1590 : 	}

	jmp	$L82118
$L82119:

; 1591 : 
; 1592 : // draw rgb quads
; 1593 : 
; 1594 : 	for (i = m->QuadNumRGB ; i ; i--, mp++)

	mov	eax, DWORD PTR _m$[ebp]
	movsx	ecx, WORD PTR [eax+12]
	mov	DWORD PTR _i$[ebp], ecx
	jmp	SHORT $L82261
$L82262:
	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	mov	ecx, DWORD PTR _mp$[ebp]
	add	ecx, 80					; 00000050H
	mov	DWORD PTR _mp$[ebp], ecx
$L82261:
	cmp	DWORD PTR _i$[ebp], 0
	je	$L82263

; 1595 : 	{
; 1596 : 
; 1597 : // reject?
; 1598 : 
; 1599 : 		REJECT_WORLD_POLY();

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	and	ecx, DWORD PTR ?CamVisiMask@@3_KA
	mov	edx, DWORD PTR [eax+12]
	and	edx, DWORD PTR ?CamVisiMask@@3_KA+4
	mov	DWORD PTR tv2831[ebp], ecx
	mov	DWORD PTR tv2831[ebp+4], edx
	mov	eax, DWORD PTR tv2831[ebp]
	or	eax, DWORD PTR tv2831[ebp+4]
	je	SHORT $L82264
	jmp	SHORT $L82262
$L82264:
	mov	eax, DWORD PTR _mp$[ebp]
	movsx	ecx, WORD PTR [eax]
	and	ecx, 2
	jne	SHORT $L82265
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	fld	DWORD PTR [ecx+36]
	mov	edx, DWORD PTR _mp$[ebp]
	mov	eax, DWORD PTR [edx+68]
	fsub	DWORD PTR [eax+36]
	mov	ecx, DWORD PTR _mp$[ebp]
	mov	edx, DWORD PTR [ecx+72]
	fld	DWORD PTR [edx+40]
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	fsub	DWORD PTR [ecx+40]
	fmulp	ST(1), ST(0)
	mov	edx, DWORD PTR _mp$[ebp]
	mov	eax, DWORD PTR [edx+64]
	fld	DWORD PTR [eax+40]
	mov	ecx, DWORD PTR _mp$[ebp]
	mov	edx, DWORD PTR [ecx+68]
	fsub	DWORD PTR [edx+40]
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	fld	DWORD PTR [ecx+36]
	mov	edx, DWORD PTR _mp$[ebp]
	mov	eax, DWORD PTR [edx+68]
	fsub	DWORD PTR [eax+36]
	fmulp	ST(1), ST(0)
	fsubp	ST(1), ST(0)
	fcomp	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $L82265
	jmp	$L82262
$L82265:

; 1600 : 		CLIP_QUAD();

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	movzx	edx, BYTE PTR [ecx+88]
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	movzx	eax, BYTE PTR [ecx+88]
	and	edx, eax
	mov	ecx, DWORD PTR _mp$[ebp]
	mov	eax, DWORD PTR [ecx+72]
	movzx	ecx, BYTE PTR [eax+88]
	and	edx, ecx
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	movzx	eax, BYTE PTR [ecx+88]
	and	edx, eax
	je	SHORT $L82267
	jmp	$L82262
$L82267:
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	movzx	edx, BYTE PTR [ecx+88]
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	movzx	eax, BYTE PTR [ecx+88]
	or	edx, eax
	mov	ecx, DWORD PTR _mp$[ebp]
	mov	eax, DWORD PTR [ecx+72]
	movzx	ecx, BYTE PTR [eax+88]
	or	edx, ecx
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	movzx	eax, BYTE PTR [ecx+88]
	or	edx, eax
	mov	DWORD PTR _clip$[ebp], edx

; 1601 : 		INC_POLY_COUNT(WorldDrawnCount, 2);

	movsx	eax, WORD PTR ?WorldDrawnCount@@3FA	; WorldDrawnCount
	add	eax, 2
	mov	WORD PTR ?WorldDrawnCount@@3FA, ax	; WorldDrawnCount

; 1602 : 
; 1603 : // get vert ptr
; 1604 : 
; 1605 : 		if (mp->Type & POLY_SEMITRANS)

	mov	eax, DWORD PTR _mp$[ebp]
	movsx	ecx, WORD PTR [eax]
	and	ecx, 4
	je	$L82268

; 1606 : 		{
; 1607 : 			if (!SEMI_POLY_FREE()) continue;

	cmp	DWORD PTR ?SemiCount@@3JA, 800		; SemiCount, 00000320H
	jl	SHORT $L82269
	jmp	$L82262
$L82269:

; 1608 : 			SEMI_POLY_SETUP_RGB(vertrgb, WorldFog, 4, clip, (mp->Type & POLY_SEMITRANS_ONE) != 0);

	movsx	eax, WORD PTR _WorldFog
	mov	ecx, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	ecx, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[ecx+12], eax
	mov	eax, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	eax, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[eax+4], 4
	mov	eax, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	eax, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[eax+8], -1
	cmp	DWORD PTR _clip$[ebp], 0
	je	SHORT $L82270
	mov	eax, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	eax, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[eax], 8
	jmp	SHORT $L82271
$L82270:
	mov	eax, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	eax, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[eax], 12 ; 0000000cH
$L82271:
	mov	eax, DWORD PTR _mp$[ebp]
	movsx	ecx, WORD PTR [eax]
	and	ecx, 256				; 00000100H
	neg	ecx
	sbb	ecx, ecx
	neg	ecx
	mov	edx, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	edx, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[edx+16], ecx
	mov	eax, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	eax, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[eax+20], 0
	mov	eax, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	eax, 152				; 00000098H
	add	eax, OFFSET FLAT:?SemiPoly@@3PAUDRAW_SEMI_POLY@@A+24
	mov	DWORD PTR _vertrgb$[ebp], eax
	mov	ecx, DWORD PTR ?SemiCount@@3JA		; SemiCount
	add	ecx, 1
	mov	DWORD PTR ?SemiCount@@3JA, ecx		; SemiCount

; 1609 : 		}
; 1610 : 		else

	jmp	$L82272
$L82268:

; 1611 : 		{
; 1612 : 			if (clip) bucketrgb = WorldBucketHeadClipRGB;

	cmp	DWORD PTR _clip$[ebp], 0
	je	SHORT $L82273
	mov	eax, DWORD PTR _WorldBucketHeadClipRGB
	mov	DWORD PTR _bucketrgb$[ebp], eax

; 1613 : 			else bucketrgb = WorldBucketHeadRGB;

	jmp	SHORT $L82274
$L82273:
	mov	eax, DWORD PTR _WorldBucketHeadRGB
	mov	DWORD PTR _bucketrgb$[ebp], eax
$L82274:

; 1614 : 			count = (short)(bucketrgb->CurrentVerts - bucketrgb->Verts);

	mov	eax, DWORD PTR _bucketrgb$[ebp]
	add	eax, 808				; 00000328H
	mov	ecx, DWORD PTR _bucketrgb$[ebp]
	mov	edx, DWORD PTR [ecx+804]
	sub	edx, eax
	mov	eax, edx
	cdq
	mov	ecx, 24					; 00000018H
	idiv	ecx
	mov	WORD PTR _count$[ebp], ax

; 1615 : 
; 1616 : 			if (count > BUCKET_VERT_END)

	movsx	eax, WORD PTR _count$[ebp]
	cmp	eax, 196				; 000000c4H
	jle	$L82276

; 1617 : 			{
; 1618 : 				SET_TPAGE(-1);

	movsx	eax, WORD PTR ?RenderTP@@3FA		; RenderTP
	cmp	eax, -1
	je	SHORT $L82277
	mov	WORD PTR ?RenderTP@@3FA, -1		; RenderTP
	movsx	eax, WORD PTR ?RenderTP@@3FA		; RenderTP
	cmp	eax, -1
	jne	SHORT $L82278
	push	0
	push	0
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	edx
	call	DWORD PTR [ecx+152]
	mov	eax, DWORD PTR ?TextureStateChange@@3JA	; TextureStateChange
	add	eax, 1
	mov	DWORD PTR ?TextureStateChange@@3JA, eax	; TextureStateChange
	jmp	SHORT $L82277
$L82278:
	movsx	eax, WORD PTR ?RenderTP@@3FA		; RenderTP
	shl	eax, 6
	mov	ecx, DWORD PTR ?TexInfo@@3PAUTEXINFO@@A	; TexInfo
	mov	edx, DWORD PTR [ecx+eax+52]
	push	edx
	push	0
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	edx
	call	DWORD PTR [ecx+152]
	mov	eax, DWORD PTR ?TextureStateChange@@3JA	; TextureStateChange
	add	eax, 1
	mov	DWORD PTR ?TextureStateChange@@3JA, eax	; TextureStateChange
$L82277:

; 1619 : 				FlushOneBucketTEX0(bucketrgb, clip);

	mov	eax, DWORD PTR _clip$[ebp]
	push	eax
	mov	ecx, DWORD PTR _bucketrgb$[ebp]
	push	ecx
	call	?FlushOneBucketTEX0@@YAXPAUBUCKET_TEX0@@J@Z ; FlushOneBucketTEX0
	add	esp, 8

; 1620 : 				count = 0;

	mov	WORD PTR _count$[ebp], 0
$L82276:

; 1621 : 			}
; 1622 : 
; 1623 : 			bucketrgb->CurrentIndex[0] = count;

	mov	eax, DWORD PTR _bucketrgb$[ebp]
	mov	ecx, DWORD PTR [eax+800]
	mov	dx, WORD PTR _count$[ebp]
	mov	WORD PTR [ecx], dx

; 1624 : 			bucketrgb->CurrentIndex[1] = count + 1;

	movsx	eax, WORD PTR _count$[ebp]
	add	eax, 1
	mov	ecx, DWORD PTR _bucketrgb$[ebp]
	mov	edx, DWORD PTR [ecx+800]
	mov	WORD PTR [edx+2], ax

; 1625 : 			bucketrgb->CurrentIndex[2] = count + 2;

	movsx	eax, WORD PTR _count$[ebp]
	add	eax, 2
	mov	ecx, DWORD PTR _bucketrgb$[ebp]
	mov	edx, DWORD PTR [ecx+800]
	mov	WORD PTR [edx+4], ax

; 1626 : 			bucketrgb->CurrentIndex[3] = count;

	mov	eax, DWORD PTR _bucketrgb$[ebp]
	mov	ecx, DWORD PTR [eax+800]
	mov	dx, WORD PTR _count$[ebp]
	mov	WORD PTR [ecx+6], dx

; 1627 : 			bucketrgb->CurrentIndex[4] = count + 2;

	movsx	eax, WORD PTR _count$[ebp]
	add	eax, 2
	mov	ecx, DWORD PTR _bucketrgb$[ebp]
	mov	edx, DWORD PTR [ecx+800]
	mov	WORD PTR [edx+8], ax

; 1628 : 			bucketrgb->CurrentIndex[5] = count + 3;

	movsx	eax, WORD PTR _count$[ebp]
	add	eax, 3
	mov	ecx, DWORD PTR _bucketrgb$[ebp]
	mov	edx, DWORD PTR [ecx+800]
	mov	WORD PTR [edx+10], ax

; 1629 : 			bucketrgb->CurrentIndex += 6;

	mov	eax, DWORD PTR _bucketrgb$[ebp]
	mov	ecx, DWORD PTR [eax+800]
	add	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR _bucketrgb$[ebp]
	mov	DWORD PTR [edx+800], ecx

; 1630 : 
; 1631 : 			vertrgb = bucketrgb->CurrentVerts;

	mov	eax, DWORD PTR _bucketrgb$[ebp]
	mov	ecx, DWORD PTR [eax+804]
	mov	DWORD PTR _vertrgb$[ebp], ecx

; 1632 : 			bucketrgb->CurrentVerts += 4;

	mov	eax, DWORD PTR _bucketrgb$[ebp]
	mov	ecx, DWORD PTR [eax+804]
	add	ecx, 96					; 00000060H
	mov	edx, DWORD PTR _bucketrgb$[ebp]
	mov	DWORD PTR [edx+804], ecx
$L82272:

; 1633 : 		}
; 1634 : 
; 1635 : // copy vert info
; 1636 : 
; 1637 : 		COPY_QUAD_XYZRHW(vertrgb);

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	add	ecx, 36					; 00000024H
	mov	edx, DWORD PTR _vertrgb$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], ecx
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	add	ecx, 36					; 00000024H
	mov	edx, DWORD PTR _vertrgb$[ebp]
	add	edx, 24					; 00000018H
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], ecx
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	add	ecx, 36					; 00000024H
	mov	edx, DWORD PTR _vertrgb$[ebp]
	add	edx, 48					; 00000030H
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], ecx
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	add	ecx, 36					; 00000024H
	mov	edx, DWORD PTR _vertrgb$[ebp]
	add	edx, 72					; 00000048H
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], ecx

; 1638 : 
; 1639 : 		if (lit)

	cmp	DWORD PTR _lit$[ebp], 0
	je	$L82288

; 1640 : 		{
; 1641 : 			COPY_WORLD_QUAD_COLOR_LIT(vertrgb);

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	mov	edx, DWORD PTR _mp$[ebp]
	movzx	eax, BYTE PTR [edx+18]
	add	eax, DWORD PTR [ecx+68]
	mov	DWORD PTR __i$82289[ebp], eax
	cmp	DWORD PTR __i$82289[ebp], 255		; 000000ffH
	jle	SHORT $L82292
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+18], 255			; 000000ffH
	jmp	SHORT $L82294
$L82292:
	cmp	DWORD PTR __i$82289[ebp], 0
	jge	SHORT $L82295
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+18], 0
	jmp	SHORT $L82294
$L82295:
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	cl, BYTE PTR __i$82289[ebp]
	mov	BYTE PTR [eax+18], cl
$L82294:
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	mov	edx, DWORD PTR _mp$[ebp]
	movzx	eax, BYTE PTR [edx+17]
	add	eax, DWORD PTR [ecx+72]
	mov	DWORD PTR __i$82289[ebp], eax
	cmp	DWORD PTR __i$82289[ebp], 255		; 000000ffH
	jle	SHORT $L82302
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+17], 255			; 000000ffH
	jmp	SHORT $L82304
$L82302:
	cmp	DWORD PTR __i$82289[ebp], 0
	jge	SHORT $L82305
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+17], 0
	jmp	SHORT $L82304
$L82305:
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	cl, BYTE PTR __i$82289[ebp]
	mov	BYTE PTR [eax+17], cl
$L82304:
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	mov	edx, DWORD PTR _mp$[ebp]
	movzx	eax, BYTE PTR [edx+16]
	add	eax, DWORD PTR [ecx+76]
	mov	DWORD PTR __i$82289[ebp], eax
	cmp	DWORD PTR __i$82289[ebp], 255		; 000000ffH
	jle	SHORT $L82312
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+16], 255			; 000000ffH
	jmp	SHORT $L82314
$L82312:
	cmp	DWORD PTR __i$82289[ebp], 0
	jge	SHORT $L82315
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+16], 0
	jmp	SHORT $L82314
$L82315:
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	cl, BYTE PTR __i$82289[ebp]
	mov	BYTE PTR [eax+16], cl
$L82314:
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	ecx, DWORD PTR _mp$[ebp]
	mov	dl, BYTE PTR [ecx+19]
	mov	BYTE PTR [eax+19], dl
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	mov	edx, DWORD PTR _mp$[ebp]
	movzx	eax, BYTE PTR [edx+22]
	add	eax, DWORD PTR [ecx+68]
	mov	DWORD PTR __i$82322[ebp], eax
	cmp	DWORD PTR __i$82322[ebp], 255		; 000000ffH
	jle	SHORT $L82325
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+42], 255			; 000000ffH
	jmp	SHORT $L82327
$L82325:
	cmp	DWORD PTR __i$82322[ebp], 0
	jge	SHORT $L82328
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+42], 0
	jmp	SHORT $L82327
$L82328:
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	cl, BYTE PTR __i$82322[ebp]
	mov	BYTE PTR [eax+42], cl
$L82327:
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	mov	edx, DWORD PTR _mp$[ebp]
	movzx	eax, BYTE PTR [edx+21]
	add	eax, DWORD PTR [ecx+72]
	mov	DWORD PTR __i$82322[ebp], eax
	cmp	DWORD PTR __i$82322[ebp], 255		; 000000ffH
	jle	SHORT $L82335
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+41], 255			; 000000ffH
	jmp	SHORT $L82337
$L82335:
	cmp	DWORD PTR __i$82322[ebp], 0
	jge	SHORT $L82338
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+41], 0
	jmp	SHORT $L82337
$L82338:
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	cl, BYTE PTR __i$82322[ebp]
	mov	BYTE PTR [eax+41], cl
$L82337:
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	mov	edx, DWORD PTR _mp$[ebp]
	movzx	eax, BYTE PTR [edx+20]
	add	eax, DWORD PTR [ecx+76]
	mov	DWORD PTR __i$82322[ebp], eax
	cmp	DWORD PTR __i$82322[ebp], 255		; 000000ffH
	jle	SHORT $L82345
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+40], 255			; 000000ffH
	jmp	SHORT $L82347
$L82345:
	cmp	DWORD PTR __i$82322[ebp], 0
	jge	SHORT $L82348
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+40], 0
	jmp	SHORT $L82347
$L82348:
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	cl, BYTE PTR __i$82322[ebp]
	mov	BYTE PTR [eax+40], cl
$L82347:
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	ecx, DWORD PTR _mp$[ebp]
	mov	dl, BYTE PTR [ecx+23]
	mov	BYTE PTR [eax+43], dl
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	mov	edx, DWORD PTR _mp$[ebp]
	movzx	eax, BYTE PTR [edx+26]
	add	eax, DWORD PTR [ecx+68]
	mov	DWORD PTR __i$82355[ebp], eax
	cmp	DWORD PTR __i$82355[ebp], 255		; 000000ffH
	jle	SHORT $L82358
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+66], 255			; 000000ffH
	jmp	SHORT $L82360
$L82358:
	cmp	DWORD PTR __i$82355[ebp], 0
	jge	SHORT $L82361
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+66], 0
	jmp	SHORT $L82360
$L82361:
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	cl, BYTE PTR __i$82355[ebp]
	mov	BYTE PTR [eax+66], cl
$L82360:
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	mov	edx, DWORD PTR _mp$[ebp]
	movzx	eax, BYTE PTR [edx+25]
	add	eax, DWORD PTR [ecx+72]
	mov	DWORD PTR __i$82355[ebp], eax
	cmp	DWORD PTR __i$82355[ebp], 255		; 000000ffH
	jle	SHORT $L82368
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+65], 255			; 000000ffH
	jmp	SHORT $L82370
$L82368:
	cmp	DWORD PTR __i$82355[ebp], 0
	jge	SHORT $L82371
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+65], 0
	jmp	SHORT $L82370
$L82371:
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	cl, BYTE PTR __i$82355[ebp]
	mov	BYTE PTR [eax+65], cl
$L82370:
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	mov	edx, DWORD PTR _mp$[ebp]
	movzx	eax, BYTE PTR [edx+24]
	add	eax, DWORD PTR [ecx+76]
	mov	DWORD PTR __i$82355[ebp], eax
	cmp	DWORD PTR __i$82355[ebp], 255		; 000000ffH
	jle	SHORT $L82378
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+64], 255			; 000000ffH
	jmp	SHORT $L82380
$L82378:
	cmp	DWORD PTR __i$82355[ebp], 0
	jge	SHORT $L82381
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+64], 0
	jmp	SHORT $L82380
$L82381:
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	cl, BYTE PTR __i$82355[ebp]
	mov	BYTE PTR [eax+64], cl
$L82380:
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	ecx, DWORD PTR _mp$[ebp]
	mov	dl, BYTE PTR [ecx+27]
	mov	BYTE PTR [eax+67], dl
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	mov	edx, DWORD PTR _mp$[ebp]
	movzx	eax, BYTE PTR [edx+30]
	add	eax, DWORD PTR [ecx+68]
	mov	DWORD PTR __i$82388[ebp], eax
	cmp	DWORD PTR __i$82388[ebp], 255		; 000000ffH
	jle	SHORT $L82391
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+90], 255			; 000000ffH
	jmp	SHORT $L82393
$L82391:
	cmp	DWORD PTR __i$82388[ebp], 0
	jge	SHORT $L82394
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+90], 0
	jmp	SHORT $L82393
$L82394:
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	cl, BYTE PTR __i$82388[ebp]
	mov	BYTE PTR [eax+90], cl
$L82393:
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	mov	edx, DWORD PTR _mp$[ebp]
	movzx	eax, BYTE PTR [edx+29]
	add	eax, DWORD PTR [ecx+72]
	mov	DWORD PTR __i$82388[ebp], eax
	cmp	DWORD PTR __i$82388[ebp], 255		; 000000ffH
	jle	SHORT $L82401
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+89], 255			; 000000ffH
	jmp	SHORT $L82403
$L82401:
	cmp	DWORD PTR __i$82388[ebp], 0
	jge	SHORT $L82404
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+89], 0
	jmp	SHORT $L82403
$L82404:
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	cl, BYTE PTR __i$82388[ebp]
	mov	BYTE PTR [eax+89], cl
$L82403:
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	mov	edx, DWORD PTR _mp$[ebp]
	movzx	eax, BYTE PTR [edx+28]
	add	eax, DWORD PTR [ecx+76]
	mov	DWORD PTR __i$82388[ebp], eax
	cmp	DWORD PTR __i$82388[ebp], 255		; 000000ffH
	jle	SHORT $L82411
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+88], 255			; 000000ffH
	jmp	SHORT $L82413
$L82411:
	cmp	DWORD PTR __i$82388[ebp], 0
	jge	SHORT $L82414
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+88], 0
	jmp	SHORT $L82413
$L82414:
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	cl, BYTE PTR __i$82388[ebp]
	mov	BYTE PTR [eax+88], cl
$L82413:
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	ecx, DWORD PTR _mp$[ebp]
	mov	dl, BYTE PTR [ecx+31]
	mov	BYTE PTR [eax+91], dl

; 1642 : 		}
; 1643 : 		else

	jmp	SHORT $L82421
$L82288:

; 1644 : 		{
; 1645 : 			COPY_WORLD_QUAD_COLOR(vertrgb);

	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	ecx, DWORD PTR _mp$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+16], edx
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	ecx, DWORD PTR _mp$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR [eax+40], edx
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	ecx, DWORD PTR _mp$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR [eax+64], edx
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	ecx, DWORD PTR _mp$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR [eax+88], edx
$L82421:

; 1646 : 		}
; 1647 : 
; 1648 : 		if (WorldFog)

	movsx	eax, WORD PTR _WorldFog
	test	eax, eax
	je	SHORT $L82422

; 1649 : 			COPY_QUAD_SPECULAR(vertrgb);

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	mov	edx, DWORD PTR _vertrgb$[ebp]
	mov	eax, DWORD PTR [ecx+56]
	mov	DWORD PTR [edx+20], eax
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	mov	edx, DWORD PTR _vertrgb$[ebp]
	mov	eax, DWORD PTR [ecx+56]
	mov	DWORD PTR [edx+44], eax
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	mov	edx, DWORD PTR _vertrgb$[ebp]
	mov	eax, DWORD PTR [ecx+56]
	mov	DWORD PTR [edx+68], eax
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	mov	edx, DWORD PTR _vertrgb$[ebp]
	mov	eax, DWORD PTR [ecx+56]
	mov	DWORD PTR [edx+92], eax
$L82422:

; 1650 : 
; 1651 : // env?
; 1652 : 
; 1653 : 		if (mp->Type & WorldEnvMask)

	mov	eax, DWORD PTR _mp$[ebp]
	movsx	ecx, WORD PTR [eax]
	movsx	edx, WORD PTR _WorldEnvMask
	and	ecx, edx
	je	$L82423

; 1654 : 		{
; 1655 : 			INC_POLY_COUNT(WorldDrawnCount, 2);

	movsx	eax, WORD PTR ?WorldDrawnCount@@3FA	; WorldDrawnCount
	add	eax, 2
	mov	WORD PTR ?WorldDrawnCount@@3FA, ax	; WorldDrawnCount

; 1656 : 
; 1657 : // get env vert ptr
; 1658 : 
; 1659 : 			if (clip) envbucket = WorldBucketHeadEnvClip;

	cmp	DWORD PTR _clip$[ebp], 0
	je	SHORT $L82424
	mov	eax, DWORD PTR _WorldBucketHeadEnvClip
	mov	DWORD PTR _envbucket$[ebp], eax

; 1660 : 			else envbucket = WorldBucketHeadEnv;

	jmp	SHORT $L82425
$L82424:
	mov	eax, DWORD PTR _WorldBucketHeadEnv
	mov	DWORD PTR _envbucket$[ebp], eax
$L82425:

; 1661 : 			count = (short)(envbucket->CurrentVerts - envbucket->Verts);

	mov	eax, DWORD PTR _envbucket$[ebp]
	add	eax, 8008				; 00001f48H
	mov	ecx, DWORD PTR _envbucket$[ebp]
	mov	edx, DWORD PTR [ecx+8004]
	sub	edx, eax
	sar	edx, 5
	mov	WORD PTR _count$[ebp], dx

; 1662 : 
; 1663 : 			if (count > ENV_VERT_END)

	movsx	eax, WORD PTR _count$[ebp]
	cmp	eax, 1996				; 000007ccH
	jle	SHORT $L82427

; 1664 : 				continue;

	jmp	$L82262
$L82427:

; 1665 : 
; 1666 : 			envbucket->CurrentIndex[0] = count;

	mov	eax, DWORD PTR _envbucket$[ebp]
	mov	ecx, DWORD PTR [eax+8000]
	mov	dx, WORD PTR _count$[ebp]
	mov	WORD PTR [ecx], dx

; 1667 : 			envbucket->CurrentIndex[1] = count + 1;

	movsx	eax, WORD PTR _count$[ebp]
	add	eax, 1
	mov	ecx, DWORD PTR _envbucket$[ebp]
	mov	edx, DWORD PTR [ecx+8000]
	mov	WORD PTR [edx+2], ax

; 1668 : 			envbucket->CurrentIndex[2] = count + 2;

	movsx	eax, WORD PTR _count$[ebp]
	add	eax, 2
	mov	ecx, DWORD PTR _envbucket$[ebp]
	mov	edx, DWORD PTR [ecx+8000]
	mov	WORD PTR [edx+4], ax

; 1669 : 			envbucket->CurrentIndex[3] = count;

	mov	eax, DWORD PTR _envbucket$[ebp]
	mov	ecx, DWORD PTR [eax+8000]
	mov	dx, WORD PTR _count$[ebp]
	mov	WORD PTR [ecx+6], dx

; 1670 : 			envbucket->CurrentIndex[4] = count + 2;

	movsx	eax, WORD PTR _count$[ebp]
	add	eax, 2
	mov	ecx, DWORD PTR _envbucket$[ebp]
	mov	edx, DWORD PTR [ecx+8000]
	mov	WORD PTR [edx+8], ax

; 1671 : 			envbucket->CurrentIndex[5] = count + 3;

	movsx	eax, WORD PTR _count$[ebp]
	add	eax, 3
	mov	ecx, DWORD PTR _envbucket$[ebp]
	mov	edx, DWORD PTR [ecx+8000]
	mov	WORD PTR [edx+10], ax

; 1672 : 			envbucket->CurrentIndex += 6;

	mov	eax, DWORD PTR _envbucket$[ebp]
	mov	ecx, DWORD PTR [eax+8000]
	add	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR _envbucket$[ebp]
	mov	DWORD PTR [edx+8000], ecx

; 1673 : 
; 1674 : 			vert = envbucket->CurrentVerts;

	mov	eax, DWORD PTR _envbucket$[ebp]
	mov	ecx, DWORD PTR [eax+8004]
	mov	DWORD PTR _vert$[ebp], ecx

; 1675 : 			envbucket->CurrentVerts += 4;

	mov	eax, DWORD PTR _envbucket$[ebp]
	mov	ecx, DWORD PTR [eax+8004]
	add	ecx, 128				; 00000080H
	mov	edx, DWORD PTR _envbucket$[ebp]
	mov	DWORD PTR [edx+8004], ecx

; 1676 : 
; 1677 : // copy env vert info
; 1678 : 
; 1679 : 			*(MEM32*)&vert[0] = *(MEM32*)&mp->v0->sx;

	mov	eax, DWORD PTR _mp$[ebp]
	mov	esi, DWORD PTR [eax+64]
	add	esi, 36					; 00000024H
	mov	ecx, 8
	mov	edi, DWORD PTR _vert$[ebp]
	rep movsd

; 1680 : 			*(MEM32*)&vert[1] = *(MEM32*)&mp->v1->sx;

	mov	eax, DWORD PTR _mp$[ebp]
	mov	esi, DWORD PTR [eax+68]
	add	esi, 36					; 00000024H
	mov	edi, DWORD PTR _vert$[ebp]
	add	edi, 32					; 00000020H
	mov	ecx, 8
	rep movsd

; 1681 : 			*(MEM32*)&vert[2] = *(MEM32*)&mp->v2->sx;

	mov	eax, DWORD PTR _mp$[ebp]
	mov	esi, DWORD PTR [eax+72]
	add	esi, 36					; 00000024H
	mov	edi, DWORD PTR _vert$[ebp]
	add	edi, 64					; 00000040H
	mov	ecx, 8
	rep movsd

; 1682 : 			*(MEM32*)&vert[3] = *(MEM32*)&mp->v3->sx;

	mov	eax, DWORD PTR _mp$[ebp]
	mov	esi, DWORD PTR [eax+76]
	add	esi, 36					; 00000024H
	mov	edi, DWORD PTR _vert$[ebp]
	add	edi, 96					; 00000060H
	mov	ecx, 8
	rep movsd
$L82423:

; 1683 : 		}
; 1684 : 	}

	jmp	$L82262
$L82263:

; 1685 : 
; 1686 : // draw rgb tri's
; 1687 : 
; 1688 : 	for (i = m->TriNumRGB ; i ; i--, mp++)

	mov	eax, DWORD PTR _m$[ebp]
	movsx	ecx, WORD PTR [eax+14]
	mov	DWORD PTR _i$[ebp], ecx
	jmp	SHORT $L82436
$L82437:
	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	mov	ecx, DWORD PTR _mp$[ebp]
	add	ecx, 80					; 00000050H
	mov	DWORD PTR _mp$[ebp], ecx
$L82436:
	cmp	DWORD PTR _i$[ebp], 0
	je	$L81924

; 1689 : 	{
; 1690 : 
; 1691 : // reject?
; 1692 : 
; 1693 : 		REJECT_WORLD_POLY();

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	and	ecx, DWORD PTR ?CamVisiMask@@3_KA
	mov	edx, DWORD PTR [eax+12]
	and	edx, DWORD PTR ?CamVisiMask@@3_KA+4
	mov	DWORD PTR tv3128[ebp], ecx
	mov	DWORD PTR tv3128[ebp+4], edx
	mov	eax, DWORD PTR tv3128[ebp]
	or	eax, DWORD PTR tv3128[ebp+4]
	je	SHORT $L82439
	jmp	SHORT $L82437
$L82439:
	mov	eax, DWORD PTR _mp$[ebp]
	movsx	ecx, WORD PTR [eax]
	and	ecx, 2
	jne	SHORT $L82440
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	fld	DWORD PTR [ecx+36]
	mov	edx, DWORD PTR _mp$[ebp]
	mov	eax, DWORD PTR [edx+68]
	fsub	DWORD PTR [eax+36]
	mov	ecx, DWORD PTR _mp$[ebp]
	mov	edx, DWORD PTR [ecx+72]
	fld	DWORD PTR [edx+40]
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	fsub	DWORD PTR [ecx+40]
	fmulp	ST(1), ST(0)
	mov	edx, DWORD PTR _mp$[ebp]
	mov	eax, DWORD PTR [edx+64]
	fld	DWORD PTR [eax+40]
	mov	ecx, DWORD PTR _mp$[ebp]
	mov	edx, DWORD PTR [ecx+68]
	fsub	DWORD PTR [edx+40]
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	fld	DWORD PTR [ecx+36]
	mov	edx, DWORD PTR _mp$[ebp]
	mov	eax, DWORD PTR [edx+68]
	fsub	DWORD PTR [eax+36]
	fmulp	ST(1), ST(0)
	fsubp	ST(1), ST(0)
	fcomp	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $L82440
	jmp	$L82437
$L82440:

; 1694 : 		CLIP_TRI();

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	movzx	edx, BYTE PTR [ecx+88]
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	movzx	eax, BYTE PTR [ecx+88]
	and	edx, eax
	mov	ecx, DWORD PTR _mp$[ebp]
	mov	eax, DWORD PTR [ecx+72]
	movzx	ecx, BYTE PTR [eax+88]
	and	edx, ecx
	je	SHORT $L82442
	jmp	$L82437
$L82442:
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	movzx	edx, BYTE PTR [ecx+88]
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	movzx	eax, BYTE PTR [ecx+88]
	or	edx, eax
	mov	ecx, DWORD PTR _mp$[ebp]
	mov	eax, DWORD PTR [ecx+72]
	movzx	ecx, BYTE PTR [eax+88]
	or	edx, ecx
	mov	DWORD PTR _clip$[ebp], edx

; 1695 : 		INC_POLY_COUNT(WorldDrawnCount, 1);

	movsx	eax, WORD PTR ?WorldDrawnCount@@3FA	; WorldDrawnCount
	add	eax, 1
	mov	WORD PTR ?WorldDrawnCount@@3FA, ax	; WorldDrawnCount

; 1696 : 
; 1697 : // get vert ptr
; 1698 : 
; 1699 : 		if (mp->Type & POLY_SEMITRANS)

	mov	eax, DWORD PTR _mp$[ebp]
	movsx	ecx, WORD PTR [eax]
	and	ecx, 4
	je	$L82443

; 1700 : 		{
; 1701 : 			if (!SEMI_POLY_FREE()) continue;

	cmp	DWORD PTR ?SemiCount@@3JA, 800		; SemiCount, 00000320H
	jl	SHORT $L82444
	jmp	$L82437
$L82444:

; 1702 : 			SEMI_POLY_SETUP_RGB(vertrgb, WorldFog, 3, clip, (mp->Type & POLY_SEMITRANS_ONE) != 0);

	movsx	eax, WORD PTR _WorldFog
	mov	ecx, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	ecx, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[ecx+12], eax
	mov	eax, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	eax, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[eax+4], 3
	mov	eax, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	eax, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[eax+8], -1
	cmp	DWORD PTR _clip$[ebp], 0
	je	SHORT $L82445
	mov	eax, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	eax, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[eax], 8
	jmp	SHORT $L82446
$L82445:
	mov	eax, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	eax, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[eax], 12 ; 0000000cH
$L82446:
	mov	eax, DWORD PTR _mp$[ebp]
	movsx	ecx, WORD PTR [eax]
	and	ecx, 256				; 00000100H
	neg	ecx
	sbb	ecx, ecx
	neg	ecx
	mov	edx, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	edx, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[edx+16], ecx
	mov	eax, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	eax, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[eax+20], 0
	mov	eax, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	eax, 152				; 00000098H
	add	eax, OFFSET FLAT:?SemiPoly@@3PAUDRAW_SEMI_POLY@@A+24
	mov	DWORD PTR _vertrgb$[ebp], eax
	mov	ecx, DWORD PTR ?SemiCount@@3JA		; SemiCount
	add	ecx, 1
	mov	DWORD PTR ?SemiCount@@3JA, ecx		; SemiCount

; 1703 : 		}
; 1704 : 		else

	jmp	$L82447
$L82443:

; 1705 : 		{
; 1706 : 			if (clip) bucketrgb = WorldBucketHeadClipRGB;

	cmp	DWORD PTR _clip$[ebp], 0
	je	SHORT $L82448
	mov	eax, DWORD PTR _WorldBucketHeadClipRGB
	mov	DWORD PTR _bucketrgb$[ebp], eax

; 1707 : 			else bucketrgb = WorldBucketHeadRGB;

	jmp	SHORT $L82449
$L82448:
	mov	eax, DWORD PTR _WorldBucketHeadRGB
	mov	DWORD PTR _bucketrgb$[ebp], eax
$L82449:

; 1708 : 			count = (short)(bucketrgb->CurrentVerts - bucketrgb->Verts);

	mov	eax, DWORD PTR _bucketrgb$[ebp]
	add	eax, 808				; 00000328H
	mov	ecx, DWORD PTR _bucketrgb$[ebp]
	mov	edx, DWORD PTR [ecx+804]
	sub	edx, eax
	mov	eax, edx
	cdq
	mov	ecx, 24					; 00000018H
	idiv	ecx
	mov	WORD PTR _count$[ebp], ax

; 1709 : 
; 1710 : 			if (count > BUCKET_VERT_END)

	movsx	eax, WORD PTR _count$[ebp]
	cmp	eax, 196				; 000000c4H
	jle	$L82451

; 1711 : 			{
; 1712 : 				SET_TPAGE(-1);

	movsx	eax, WORD PTR ?RenderTP@@3FA		; RenderTP
	cmp	eax, -1
	je	SHORT $L82452
	mov	WORD PTR ?RenderTP@@3FA, -1		; RenderTP
	movsx	eax, WORD PTR ?RenderTP@@3FA		; RenderTP
	cmp	eax, -1
	jne	SHORT $L82453
	push	0
	push	0
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	edx
	call	DWORD PTR [ecx+152]
	mov	eax, DWORD PTR ?TextureStateChange@@3JA	; TextureStateChange
	add	eax, 1
	mov	DWORD PTR ?TextureStateChange@@3JA, eax	; TextureStateChange
	jmp	SHORT $L82452
$L82453:
	movsx	eax, WORD PTR ?RenderTP@@3FA		; RenderTP
	shl	eax, 6
	mov	ecx, DWORD PTR ?TexInfo@@3PAUTEXINFO@@A	; TexInfo
	mov	edx, DWORD PTR [ecx+eax+52]
	push	edx
	push	0
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	edx
	call	DWORD PTR [ecx+152]
	mov	eax, DWORD PTR ?TextureStateChange@@3JA	; TextureStateChange
	add	eax, 1
	mov	DWORD PTR ?TextureStateChange@@3JA, eax	; TextureStateChange
$L82452:

; 1713 : 				FlushOneBucketTEX0(bucketrgb, clip);

	mov	eax, DWORD PTR _clip$[ebp]
	push	eax
	mov	ecx, DWORD PTR _bucketrgb$[ebp]
	push	ecx
	call	?FlushOneBucketTEX0@@YAXPAUBUCKET_TEX0@@J@Z ; FlushOneBucketTEX0
	add	esp, 8

; 1714 : 				count = 0;

	mov	WORD PTR _count$[ebp], 0
$L82451:

; 1715 : 			}
; 1716 : 
; 1717 : 			bucketrgb->CurrentIndex[0] = count;

	mov	eax, DWORD PTR _bucketrgb$[ebp]
	mov	ecx, DWORD PTR [eax+800]
	mov	dx, WORD PTR _count$[ebp]
	mov	WORD PTR [ecx], dx

; 1718 : 			bucketrgb->CurrentIndex[1] = count + 1;

	movsx	eax, WORD PTR _count$[ebp]
	add	eax, 1
	mov	ecx, DWORD PTR _bucketrgb$[ebp]
	mov	edx, DWORD PTR [ecx+800]
	mov	WORD PTR [edx+2], ax

; 1719 : 			bucketrgb->CurrentIndex[2] = count + 2;

	movsx	eax, WORD PTR _count$[ebp]
	add	eax, 2
	mov	ecx, DWORD PTR _bucketrgb$[ebp]
	mov	edx, DWORD PTR [ecx+800]
	mov	WORD PTR [edx+4], ax

; 1720 : 			bucketrgb->CurrentIndex += 3;

	mov	eax, DWORD PTR _bucketrgb$[ebp]
	mov	ecx, DWORD PTR [eax+800]
	add	ecx, 6
	mov	edx, DWORD PTR _bucketrgb$[ebp]
	mov	DWORD PTR [edx+800], ecx

; 1721 : 
; 1722 : 			vertrgb = bucketrgb->CurrentVerts;

	mov	eax, DWORD PTR _bucketrgb$[ebp]
	mov	ecx, DWORD PTR [eax+804]
	mov	DWORD PTR _vertrgb$[ebp], ecx

; 1723 : 			bucketrgb->CurrentVerts += 3;

	mov	eax, DWORD PTR _bucketrgb$[ebp]
	mov	ecx, DWORD PTR [eax+804]
	add	ecx, 72					; 00000048H
	mov	edx, DWORD PTR _bucketrgb$[ebp]
	mov	DWORD PTR [edx+804], ecx
$L82447:

; 1724 : 		}
; 1725 : 
; 1726 : // copy vert info
; 1727 : 
; 1728 : 		COPY_TRI_XYZRHW(vertrgb);

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	add	ecx, 36					; 00000024H
	mov	edx, DWORD PTR _vertrgb$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], ecx
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	add	ecx, 36					; 00000024H
	mov	edx, DWORD PTR _vertrgb$[ebp]
	add	edx, 24					; 00000018H
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], ecx
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	add	ecx, 36					; 00000024H
	mov	edx, DWORD PTR _vertrgb$[ebp]
	add	edx, 48					; 00000030H
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], ecx

; 1729 : 
; 1730 : 		if (lit)

	cmp	DWORD PTR _lit$[ebp], 0
	je	$L82461

; 1731 : 		{
; 1732 : 			COPY_WORLD_TRI_COLOR_LIT(vertrgb);

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	mov	edx, DWORD PTR _mp$[ebp]
	movzx	eax, BYTE PTR [edx+18]
	add	eax, DWORD PTR [ecx+68]
	mov	DWORD PTR __i$82462[ebp], eax
	cmp	DWORD PTR __i$82462[ebp], 255		; 000000ffH
	jle	SHORT $L82465
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+18], 255			; 000000ffH
	jmp	SHORT $L82467
$L82465:
	cmp	DWORD PTR __i$82462[ebp], 0
	jge	SHORT $L82468
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+18], 0
	jmp	SHORT $L82467
$L82468:
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	cl, BYTE PTR __i$82462[ebp]
	mov	BYTE PTR [eax+18], cl
$L82467:
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	mov	edx, DWORD PTR _mp$[ebp]
	movzx	eax, BYTE PTR [edx+17]
	add	eax, DWORD PTR [ecx+72]
	mov	DWORD PTR __i$82462[ebp], eax
	cmp	DWORD PTR __i$82462[ebp], 255		; 000000ffH
	jle	SHORT $L82475
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+17], 255			; 000000ffH
	jmp	SHORT $L82477
$L82475:
	cmp	DWORD PTR __i$82462[ebp], 0
	jge	SHORT $L82478
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+17], 0
	jmp	SHORT $L82477
$L82478:
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	cl, BYTE PTR __i$82462[ebp]
	mov	BYTE PTR [eax+17], cl
$L82477:
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	mov	edx, DWORD PTR _mp$[ebp]
	movzx	eax, BYTE PTR [edx+16]
	add	eax, DWORD PTR [ecx+76]
	mov	DWORD PTR __i$82462[ebp], eax
	cmp	DWORD PTR __i$82462[ebp], 255		; 000000ffH
	jle	SHORT $L82485
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+16], 255			; 000000ffH
	jmp	SHORT $L82487
$L82485:
	cmp	DWORD PTR __i$82462[ebp], 0
	jge	SHORT $L82488
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+16], 0
	jmp	SHORT $L82487
$L82488:
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	cl, BYTE PTR __i$82462[ebp]
	mov	BYTE PTR [eax+16], cl
$L82487:
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	ecx, DWORD PTR _mp$[ebp]
	mov	dl, BYTE PTR [ecx+19]
	mov	BYTE PTR [eax+19], dl
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	mov	edx, DWORD PTR _mp$[ebp]
	movzx	eax, BYTE PTR [edx+22]
	add	eax, DWORD PTR [ecx+68]
	mov	DWORD PTR __i$82495[ebp], eax
	cmp	DWORD PTR __i$82495[ebp], 255		; 000000ffH
	jle	SHORT $L82498
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+42], 255			; 000000ffH
	jmp	SHORT $L82500
$L82498:
	cmp	DWORD PTR __i$82495[ebp], 0
	jge	SHORT $L82501
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+42], 0
	jmp	SHORT $L82500
$L82501:
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	cl, BYTE PTR __i$82495[ebp]
	mov	BYTE PTR [eax+42], cl
$L82500:
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	mov	edx, DWORD PTR _mp$[ebp]
	movzx	eax, BYTE PTR [edx+21]
	add	eax, DWORD PTR [ecx+72]
	mov	DWORD PTR __i$82495[ebp], eax
	cmp	DWORD PTR __i$82495[ebp], 255		; 000000ffH
	jle	SHORT $L82508
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+41], 255			; 000000ffH
	jmp	SHORT $L82510
$L82508:
	cmp	DWORD PTR __i$82495[ebp], 0
	jge	SHORT $L82511
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+41], 0
	jmp	SHORT $L82510
$L82511:
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	cl, BYTE PTR __i$82495[ebp]
	mov	BYTE PTR [eax+41], cl
$L82510:
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	mov	edx, DWORD PTR _mp$[ebp]
	movzx	eax, BYTE PTR [edx+20]
	add	eax, DWORD PTR [ecx+76]
	mov	DWORD PTR __i$82495[ebp], eax
	cmp	DWORD PTR __i$82495[ebp], 255		; 000000ffH
	jle	SHORT $L82518
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+40], 255			; 000000ffH
	jmp	SHORT $L82520
$L82518:
	cmp	DWORD PTR __i$82495[ebp], 0
	jge	SHORT $L82521
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+40], 0
	jmp	SHORT $L82520
$L82521:
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	cl, BYTE PTR __i$82495[ebp]
	mov	BYTE PTR [eax+40], cl
$L82520:
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	ecx, DWORD PTR _mp$[ebp]
	mov	dl, BYTE PTR [ecx+23]
	mov	BYTE PTR [eax+43], dl
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	mov	edx, DWORD PTR _mp$[ebp]
	movzx	eax, BYTE PTR [edx+26]
	add	eax, DWORD PTR [ecx+68]
	mov	DWORD PTR __i$82528[ebp], eax
	cmp	DWORD PTR __i$82528[ebp], 255		; 000000ffH
	jle	SHORT $L82531
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+66], 255			; 000000ffH
	jmp	SHORT $L82533
$L82531:
	cmp	DWORD PTR __i$82528[ebp], 0
	jge	SHORT $L82534
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+66], 0
	jmp	SHORT $L82533
$L82534:
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	cl, BYTE PTR __i$82528[ebp]
	mov	BYTE PTR [eax+66], cl
$L82533:
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	mov	edx, DWORD PTR _mp$[ebp]
	movzx	eax, BYTE PTR [edx+25]
	add	eax, DWORD PTR [ecx+72]
	mov	DWORD PTR __i$82528[ebp], eax
	cmp	DWORD PTR __i$82528[ebp], 255		; 000000ffH
	jle	SHORT $L82541
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+65], 255			; 000000ffH
	jmp	SHORT $L82543
$L82541:
	cmp	DWORD PTR __i$82528[ebp], 0
	jge	SHORT $L82544
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+65], 0
	jmp	SHORT $L82543
$L82544:
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	cl, BYTE PTR __i$82528[ebp]
	mov	BYTE PTR [eax+65], cl
$L82543:
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	mov	edx, DWORD PTR _mp$[ebp]
	movzx	eax, BYTE PTR [edx+24]
	add	eax, DWORD PTR [ecx+76]
	mov	DWORD PTR __i$82528[ebp], eax
	cmp	DWORD PTR __i$82528[ebp], 255		; 000000ffH
	jle	SHORT $L82551
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+64], 255			; 000000ffH
	jmp	SHORT $L82553
$L82551:
	cmp	DWORD PTR __i$82528[ebp], 0
	jge	SHORT $L82554
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+64], 0
	jmp	SHORT $L82553
$L82554:
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	cl, BYTE PTR __i$82528[ebp]
	mov	BYTE PTR [eax+64], cl
$L82553:
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	ecx, DWORD PTR _mp$[ebp]
	mov	dl, BYTE PTR [ecx+27]
	mov	BYTE PTR [eax+67], dl

; 1733 : 		}
; 1734 : 		else

	jmp	SHORT $L82561
$L82461:

; 1735 : 		{
; 1736 : 			COPY_WORLD_TRI_COLOR(vertrgb);

	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	ecx, DWORD PTR _mp$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+16], edx
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	ecx, DWORD PTR _mp$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR [eax+40], edx
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	ecx, DWORD PTR _mp$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR [eax+64], edx
$L82561:

; 1737 : 		}
; 1738 : 
; 1739 : 		if (WorldFog)

	movsx	eax, WORD PTR _WorldFog
	test	eax, eax
	je	SHORT $L82562

; 1740 : 			COPY_TRI_SPECULAR(vertrgb);

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	mov	edx, DWORD PTR _vertrgb$[ebp]
	mov	eax, DWORD PTR [ecx+56]
	mov	DWORD PTR [edx+20], eax
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	mov	edx, DWORD PTR _vertrgb$[ebp]
	mov	eax, DWORD PTR [ecx+56]
	mov	DWORD PTR [edx+44], eax
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	mov	edx, DWORD PTR _vertrgb$[ebp]
	mov	eax, DWORD PTR [ecx+56]
	mov	DWORD PTR [edx+68], eax
$L82562:

; 1741 : 
; 1742 : // env?
; 1743 : 
; 1744 : 		if (mp->Type & WorldEnvMask)

	mov	eax, DWORD PTR _mp$[ebp]
	movsx	ecx, WORD PTR [eax]
	movsx	edx, WORD PTR _WorldEnvMask
	and	ecx, edx
	je	$L82563

; 1745 : 		{
; 1746 : 			INC_POLY_COUNT(WorldDrawnCount, 1);

	movsx	eax, WORD PTR ?WorldDrawnCount@@3FA	; WorldDrawnCount
	add	eax, 1
	mov	WORD PTR ?WorldDrawnCount@@3FA, ax	; WorldDrawnCount

; 1747 : 
; 1748 : // get env vert ptr
; 1749 : 
; 1750 : 			if (clip) envbucket = WorldBucketHeadEnvClip;

	cmp	DWORD PTR _clip$[ebp], 0
	je	SHORT $L82564
	mov	eax, DWORD PTR _WorldBucketHeadEnvClip
	mov	DWORD PTR _envbucket$[ebp], eax

; 1751 : 			else envbucket = WorldBucketHeadEnv;

	jmp	SHORT $L82565
$L82564:
	mov	eax, DWORD PTR _WorldBucketHeadEnv
	mov	DWORD PTR _envbucket$[ebp], eax
$L82565:

; 1752 : 			count = (short)(envbucket->CurrentVerts - envbucket->Verts);

	mov	eax, DWORD PTR _envbucket$[ebp]
	add	eax, 8008				; 00001f48H
	mov	ecx, DWORD PTR _envbucket$[ebp]
	mov	edx, DWORD PTR [ecx+8004]
	sub	edx, eax
	sar	edx, 5
	mov	WORD PTR _count$[ebp], dx

; 1753 : 
; 1754 : 			if (count > ENV_VERT_END)

	movsx	eax, WORD PTR _count$[ebp]
	cmp	eax, 1996				; 000007ccH
	jle	SHORT $L82567

; 1755 : 				continue;

	jmp	$L82437
$L82567:

; 1756 : 
; 1757 : 			envbucket->CurrentIndex[0] = count;

	mov	eax, DWORD PTR _envbucket$[ebp]
	mov	ecx, DWORD PTR [eax+8000]
	mov	dx, WORD PTR _count$[ebp]
	mov	WORD PTR [ecx], dx

; 1758 : 			envbucket->CurrentIndex[1] = count + 1;

	movsx	eax, WORD PTR _count$[ebp]
	add	eax, 1
	mov	ecx, DWORD PTR _envbucket$[ebp]
	mov	edx, DWORD PTR [ecx+8000]
	mov	WORD PTR [edx+2], ax

; 1759 : 			envbucket->CurrentIndex[2] = count + 2;

	movsx	eax, WORD PTR _count$[ebp]
	add	eax, 2
	mov	ecx, DWORD PTR _envbucket$[ebp]
	mov	edx, DWORD PTR [ecx+8000]
	mov	WORD PTR [edx+4], ax

; 1760 : 			envbucket->CurrentIndex += 3;

	mov	eax, DWORD PTR _envbucket$[ebp]
	mov	ecx, DWORD PTR [eax+8000]
	add	ecx, 6
	mov	edx, DWORD PTR _envbucket$[ebp]
	mov	DWORD PTR [edx+8000], ecx

; 1761 : 
; 1762 : 			vert = envbucket->CurrentVerts;

	mov	eax, DWORD PTR _envbucket$[ebp]
	mov	ecx, DWORD PTR [eax+8004]
	mov	DWORD PTR _vert$[ebp], ecx

; 1763 : 			envbucket->CurrentVerts += 3;

	mov	eax, DWORD PTR _envbucket$[ebp]
	mov	ecx, DWORD PTR [eax+8004]
	add	ecx, 96					; 00000060H
	mov	edx, DWORD PTR _envbucket$[ebp]
	mov	DWORD PTR [edx+8004], ecx

; 1764 : 
; 1765 : // copy env vert info
; 1766 : 
; 1767 : 			*(MEM32*)&vert[0] = *(MEM32*)&mp->v0->sx;

	mov	eax, DWORD PTR _mp$[ebp]
	mov	esi, DWORD PTR [eax+64]
	add	esi, 36					; 00000024H
	mov	ecx, 8
	mov	edi, DWORD PTR _vert$[ebp]
	rep movsd

; 1768 : 			*(MEM32*)&vert[1] = *(MEM32*)&mp->v1->sx;

	mov	eax, DWORD PTR _mp$[ebp]
	mov	esi, DWORD PTR [eax+68]
	add	esi, 36					; 00000024H
	mov	edi, DWORD PTR _vert$[ebp]
	add	edi, 32					; 00000020H
	mov	ecx, 8
	rep movsd

; 1769 : 			*(MEM32*)&vert[2] = *(MEM32*)&mp->v2->sx;

	mov	eax, DWORD PTR _mp$[ebp]
	mov	esi, DWORD PTR [eax+72]
	add	esi, 36					; 00000024H
	mov	edi, DWORD PTR _vert$[ebp]
	add	edi, 64					; 00000040H
	mov	ecx, 8
	rep movsd
$L82563:

; 1770 : 		}
; 1771 : 	}

	jmp	$L82437
$L81924:

; 1772 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?DrawCubePolysClip@@YAXPAUWORLD_MODEL@@J@Z ENDP		; DrawCubePolysClip
; Function compile flags: /Odt /ZI
_TEXT	ENDS
;	COMDAT ?DrawCubePolys@@YAXPAUWORLD_MODEL@@J@Z
_TEXT	SEGMENT
tv2946 = -160						; size = 8
tv2660 = -160						; size = 8
tv2413 = -160						; size = 8
tv2105 = -160						; size = 8
__i$83162 = -88						; size = 4
__i$83129 = -84						; size = 4
__i$83096 = -80						; size = 4
__i$83027 = -76						; size = 4
__i$82994 = -72						; size = 4
__i$82961 = -68						; size = 4
__i$82928 = -64						; size = 4
__i$82859 = -60						; size = 4
__i$82826 = -56						; size = 4
__i$82793 = -52						; size = 4
__i$82718 = -48						; size = 4
__i$82685 = -44						; size = 4
__i$82652 = -40						; size = 4
__i$82619 = -36						; size = 4
_count$ = -32						; size = 2
_envbucket$ = -28					; size = 4
_bucketrgb$ = -24					; size = 4
_vertrgb$ = -20						; size = 4
_bucket$ = -16						; size = 4
_vert$ = -12						; size = 4
_mp$ = -8						; size = 4
_i$ = -4						; size = 4
_m$ = 8							; size = 4
_lit$ = 12						; size = 4
?DrawCubePolys@@YAXPAUWORLD_MODEL@@J@Z PROC NEAR	; DrawCubePolys, COMDAT

; 1779 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 160				; 000000a0H
	push	ebx
	push	esi
	push	edi

; 1780 : 	long i;
; 1781 : 	WORLD_POLY *mp;
; 1782 : 	VERTEX_TEX1 *vert;
; 1783 : 	BUCKET_TEX1 *bucket;
; 1784 : 	VERTEX_TEX0 *vertrgb;
; 1785 : 	BUCKET_TEX0 *bucketrgb;
; 1786 : 	BUCKET_ENV *envbucket = WorldBucketHeadEnv;

	mov	eax, DWORD PTR _WorldBucketHeadEnv
	mov	DWORD PTR _envbucket$[ebp], eax

; 1787 : 	short count;
; 1788 : 
; 1789 : // draw textured quads
; 1790 : 
; 1791 : 	mp = m->PolyPtr;

	mov	eax, DWORD PTR _m$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	DWORD PTR _mp$[ebp], ecx

; 1792 : 
; 1793 : 	for (i = m->QuadNumTex ; i ; i--, mp++)

	mov	eax, DWORD PTR _m$[ebp]
	movsx	ecx, WORD PTR [eax+8]
	mov	DWORD PTR _i$[ebp], ecx
	jmp	SHORT $L82586
$L82587:
	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	mov	ecx, DWORD PTR _mp$[ebp]
	add	ecx, 80					; 00000050H
	mov	DWORD PTR _mp$[ebp], ecx
$L82586:
	cmp	DWORD PTR _i$[ebp], 0
	je	$L82588

; 1794 : 	{
; 1795 : 
; 1796 : // reject?
; 1797 : 
; 1798 : 		REJECT_WORLD_POLY();

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	and	ecx, DWORD PTR ?CamVisiMask@@3_KA
	mov	edx, DWORD PTR [eax+12]
	and	edx, DWORD PTR ?CamVisiMask@@3_KA+4
	mov	DWORD PTR tv2105[ebp], ecx
	mov	DWORD PTR tv2105[ebp+4], edx
	mov	eax, DWORD PTR tv2105[ebp]
	or	eax, DWORD PTR tv2105[ebp+4]
	je	SHORT $L82589
	jmp	SHORT $L82587
$L82589:
	mov	eax, DWORD PTR _mp$[ebp]
	movsx	ecx, WORD PTR [eax]
	and	ecx, 2
	jne	SHORT $L82590
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	fld	DWORD PTR [ecx+36]
	mov	edx, DWORD PTR _mp$[ebp]
	mov	eax, DWORD PTR [edx+68]
	fsub	DWORD PTR [eax+36]
	mov	ecx, DWORD PTR _mp$[ebp]
	mov	edx, DWORD PTR [ecx+72]
	fld	DWORD PTR [edx+40]
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	fsub	DWORD PTR [ecx+40]
	fmulp	ST(1), ST(0)
	mov	edx, DWORD PTR _mp$[ebp]
	mov	eax, DWORD PTR [edx+64]
	fld	DWORD PTR [eax+40]
	mov	ecx, DWORD PTR _mp$[ebp]
	mov	edx, DWORD PTR [ecx+68]
	fsub	DWORD PTR [edx+40]
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	fld	DWORD PTR [ecx+36]
	mov	edx, DWORD PTR _mp$[ebp]
	mov	eax, DWORD PTR [edx+68]
	fsub	DWORD PTR [eax+36]
	fmulp	ST(1), ST(0)
	fsubp	ST(1), ST(0)
	fcomp	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $L82590
	jmp	$L82587
$L82590:

; 1799 : 		INC_POLY_COUNT(WorldDrawnCount, 2);

	movsx	eax, WORD PTR ?WorldDrawnCount@@3FA	; WorldDrawnCount
	add	eax, 2
	mov	WORD PTR ?WorldDrawnCount@@3FA, ax	; WorldDrawnCount

; 1800 : 
; 1801 : // get vert ptr
; 1802 : 
; 1803 : 		if (mp->Type & POLY_SEMITRANS)

	mov	eax, DWORD PTR _mp$[ebp]
	movsx	ecx, WORD PTR [eax]
	and	ecx, 4
	je	$L82592

; 1804 : 		{
; 1805 : 			if (!SEMI_POLY_FREE()) continue;

	cmp	DWORD PTR ?SemiCount@@3JA, 800		; SemiCount, 00000320H
	jl	SHORT $L82593
	jmp	$L82587
$L82593:

; 1806 : 			SEMI_POLY_SETUP(vert, WorldFog, 4, mp->Tpage, FALSE, (mp->Type & POLY_SEMITRANS_ONE) != 0);

	movsx	eax, WORD PTR _WorldFog
	mov	ecx, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	ecx, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[ecx+12], eax
	mov	eax, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	eax, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[eax+4], 4
	mov	eax, DWORD PTR _mp$[ebp]
	movsx	ecx, WORD PTR [eax+2]
	mov	edx, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	edx, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[edx+8], ecx
	xor	eax, eax
	je	SHORT $L82594
	mov	eax, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	eax, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[eax], 8
	jmp	SHORT $L82595
$L82594:
	mov	eax, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	eax, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[eax], 12 ; 0000000cH
$L82595:
	mov	eax, DWORD PTR _mp$[ebp]
	movsx	ecx, WORD PTR [eax]
	and	ecx, 256				; 00000100H
	neg	ecx
	sbb	ecx, ecx
	neg	ecx
	mov	edx, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	edx, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[edx+16], ecx
	mov	eax, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	eax, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[eax+20], 0
	mov	eax, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	eax, 152				; 00000098H
	add	eax, OFFSET FLAT:?SemiPoly@@3PAUDRAW_SEMI_POLY@@A+24
	mov	DWORD PTR _vert$[ebp], eax
	mov	ecx, DWORD PTR ?SemiCount@@3JA		; SemiCount
	add	ecx, 1
	mov	DWORD PTR ?SemiCount@@3JA, ecx		; SemiCount

; 1807 : 		}
; 1808 : 		else

	jmp	$L82596
$L82592:

; 1809 : 		{
; 1810 : 			bucket = &WorldBucketHead[mp->Tpage];

	mov	eax, DWORD PTR _mp$[ebp]
	movsx	ecx, WORD PTR [eax+2]
	imul	ecx, 7208				; 00001c28H
	add	ecx, DWORD PTR _WorldBucketHead
	mov	DWORD PTR _bucket$[ebp], ecx

; 1811 : 			count = (short)(bucket->CurrentVerts - bucket->Verts);

	mov	eax, DWORD PTR _bucket$[ebp]
	add	eax, 808				; 00000328H
	mov	ecx, DWORD PTR _bucket$[ebp]
	mov	edx, DWORD PTR [ecx+804]
	sub	edx, eax
	sar	edx, 5
	mov	WORD PTR _count$[ebp], dx

; 1812 : 
; 1813 : 			if (count > BUCKET_VERT_END)

	movsx	eax, WORD PTR _count$[ebp]
	cmp	eax, 196				; 000000c4H
	jle	$L82598

; 1814 : 			{
; 1815 : 				SET_TPAGE(mp->Tpage);

	movsx	eax, WORD PTR ?RenderTP@@3FA		; RenderTP
	mov	ecx, DWORD PTR _mp$[ebp]
	movsx	edx, WORD PTR [ecx+2]
	cmp	eax, edx
	je	SHORT $L82599
	mov	eax, DWORD PTR _mp$[ebp]
	mov	cx, WORD PTR [eax+2]
	mov	WORD PTR ?RenderTP@@3FA, cx		; RenderTP
	movsx	edx, WORD PTR ?RenderTP@@3FA		; RenderTP
	cmp	edx, -1
	jne	SHORT $L82600
	push	0
	push	0
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	edx
	call	DWORD PTR [ecx+152]
	mov	eax, DWORD PTR ?TextureStateChange@@3JA	; TextureStateChange
	add	eax, 1
	mov	DWORD PTR ?TextureStateChange@@3JA, eax	; TextureStateChange
	jmp	SHORT $L82599
$L82600:
	movsx	eax, WORD PTR ?RenderTP@@3FA		; RenderTP
	shl	eax, 6
	mov	ecx, DWORD PTR ?TexInfo@@3PAUTEXINFO@@A	; TexInfo
	mov	edx, DWORD PTR [ecx+eax+52]
	push	edx
	push	0
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	edx
	call	DWORD PTR [ecx+152]
	mov	eax, DWORD PTR ?TextureStateChange@@3JA	; TextureStateChange
	add	eax, 1
	mov	DWORD PTR ?TextureStateChange@@3JA, eax	; TextureStateChange
$L82599:

; 1816 : 				FlushOneBucketTEX1(bucket, FALSE);

	push	0
	mov	eax, DWORD PTR _bucket$[ebp]
	push	eax
	call	?FlushOneBucketTEX1@@YAXPAUBUCKET_TEX1@@J@Z ; FlushOneBucketTEX1
	add	esp, 8

; 1817 : 				count = 0;

	mov	WORD PTR _count$[ebp], 0
$L82598:

; 1818 : 			}
; 1819 : 
; 1820 : 			bucket->CurrentIndex[0] = count;

	mov	eax, DWORD PTR _bucket$[ebp]
	mov	ecx, DWORD PTR [eax+800]
	mov	dx, WORD PTR _count$[ebp]
	mov	WORD PTR [ecx], dx

; 1821 : 			bucket->CurrentIndex[1] = count + 1;

	movsx	eax, WORD PTR _count$[ebp]
	add	eax, 1
	mov	ecx, DWORD PTR _bucket$[ebp]
	mov	edx, DWORD PTR [ecx+800]
	mov	WORD PTR [edx+2], ax

; 1822 : 			bucket->CurrentIndex[2] = count + 2;

	movsx	eax, WORD PTR _count$[ebp]
	add	eax, 2
	mov	ecx, DWORD PTR _bucket$[ebp]
	mov	edx, DWORD PTR [ecx+800]
	mov	WORD PTR [edx+4], ax

; 1823 : 			bucket->CurrentIndex[3] = count;

	mov	eax, DWORD PTR _bucket$[ebp]
	mov	ecx, DWORD PTR [eax+800]
	mov	dx, WORD PTR _count$[ebp]
	mov	WORD PTR [ecx+6], dx

; 1824 : 			bucket->CurrentIndex[4] = count + 2;

	movsx	eax, WORD PTR _count$[ebp]
	add	eax, 2
	mov	ecx, DWORD PTR _bucket$[ebp]
	mov	edx, DWORD PTR [ecx+800]
	mov	WORD PTR [edx+8], ax

; 1825 : 			bucket->CurrentIndex[5] = count + 3;

	movsx	eax, WORD PTR _count$[ebp]
	add	eax, 3
	mov	ecx, DWORD PTR _bucket$[ebp]
	mov	edx, DWORD PTR [ecx+800]
	mov	WORD PTR [edx+10], ax

; 1826 : 			bucket->CurrentIndex += 6;

	mov	eax, DWORD PTR _bucket$[ebp]
	mov	ecx, DWORD PTR [eax+800]
	add	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR _bucket$[ebp]
	mov	DWORD PTR [edx+800], ecx

; 1827 : 
; 1828 : 			vert = bucket->CurrentVerts;

	mov	eax, DWORD PTR _bucket$[ebp]
	mov	ecx, DWORD PTR [eax+804]
	mov	DWORD PTR _vert$[ebp], ecx

; 1829 : 			bucket->CurrentVerts += 4;

	mov	eax, DWORD PTR _bucket$[ebp]
	mov	ecx, DWORD PTR [eax+804]
	add	ecx, 128				; 00000080H
	mov	edx, DWORD PTR _bucket$[ebp]
	mov	DWORD PTR [edx+804], ecx
$L82596:

; 1830 : 		}
; 1831 : 
; 1832 : // copy vert info
; 1833 : 
; 1834 : 		COPY_QUAD_XYZRHW(vert);

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	add	ecx, 36					; 00000024H
	mov	edx, DWORD PTR _vert$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], ecx
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	add	ecx, 36					; 00000024H
	mov	edx, DWORD PTR _vert$[ebp]
	add	edx, 32					; 00000020H
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], ecx
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	add	ecx, 36					; 00000024H
	mov	edx, DWORD PTR _vert$[ebp]
	add	edx, 64					; 00000040H
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], ecx
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	add	ecx, 36					; 00000024H
	mov	edx, DWORD PTR _vert$[ebp]
	add	edx, 96					; 00000060H
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], ecx

; 1835 : 		COPY_QUAD_UV(vert);

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	edx, DWORD PTR [eax+36]
	mov	eax, DWORD PTR _vert$[ebp]
	mov	DWORD PTR [eax+24], ecx
	mov	DWORD PTR [eax+28], edx
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	edx, DWORD PTR [eax+44]
	mov	eax, DWORD PTR _vert$[ebp]
	mov	DWORD PTR [eax+56], ecx
	mov	DWORD PTR [eax+60], edx
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	mov	edx, DWORD PTR [eax+52]
	mov	eax, DWORD PTR _vert$[ebp]
	mov	DWORD PTR [eax+88], ecx
	mov	DWORD PTR [eax+92], edx
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	edx, DWORD PTR [eax+60]
	mov	eax, DWORD PTR _vert$[ebp]
	mov	DWORD PTR [eax+120], ecx
	mov	DWORD PTR [eax+124], edx

; 1836 : 
; 1837 : 		if (lit)

	cmp	DWORD PTR _lit$[ebp], 0
	je	$L82618

; 1838 : 		{
; 1839 : 			COPY_WORLD_QUAD_COLOR_LIT(vert);

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	mov	edx, DWORD PTR _mp$[ebp]
	movzx	eax, BYTE PTR [edx+18]
	add	eax, DWORD PTR [ecx+68]
	mov	DWORD PTR __i$82619[ebp], eax
	cmp	DWORD PTR __i$82619[ebp], 255		; 000000ffH
	jle	SHORT $L82622
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+18], 255			; 000000ffH
	jmp	SHORT $L82624
$L82622:
	cmp	DWORD PTR __i$82619[ebp], 0
	jge	SHORT $L82625
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+18], 0
	jmp	SHORT $L82624
$L82625:
	mov	eax, DWORD PTR _vert$[ebp]
	mov	cl, BYTE PTR __i$82619[ebp]
	mov	BYTE PTR [eax+18], cl
$L82624:
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	mov	edx, DWORD PTR _mp$[ebp]
	movzx	eax, BYTE PTR [edx+17]
	add	eax, DWORD PTR [ecx+72]
	mov	DWORD PTR __i$82619[ebp], eax
	cmp	DWORD PTR __i$82619[ebp], 255		; 000000ffH
	jle	SHORT $L82632
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+17], 255			; 000000ffH
	jmp	SHORT $L82634
$L82632:
	cmp	DWORD PTR __i$82619[ebp], 0
	jge	SHORT $L82635
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+17], 0
	jmp	SHORT $L82634
$L82635:
	mov	eax, DWORD PTR _vert$[ebp]
	mov	cl, BYTE PTR __i$82619[ebp]
	mov	BYTE PTR [eax+17], cl
$L82634:
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	mov	edx, DWORD PTR _mp$[ebp]
	movzx	eax, BYTE PTR [edx+16]
	add	eax, DWORD PTR [ecx+76]
	mov	DWORD PTR __i$82619[ebp], eax
	cmp	DWORD PTR __i$82619[ebp], 255		; 000000ffH
	jle	SHORT $L82642
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+16], 255			; 000000ffH
	jmp	SHORT $L82644
$L82642:
	cmp	DWORD PTR __i$82619[ebp], 0
	jge	SHORT $L82645
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+16], 0
	jmp	SHORT $L82644
$L82645:
	mov	eax, DWORD PTR _vert$[ebp]
	mov	cl, BYTE PTR __i$82619[ebp]
	mov	BYTE PTR [eax+16], cl
$L82644:
	mov	eax, DWORD PTR _vert$[ebp]
	mov	ecx, DWORD PTR _mp$[ebp]
	mov	dl, BYTE PTR [ecx+19]
	mov	BYTE PTR [eax+19], dl
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	mov	edx, DWORD PTR _mp$[ebp]
	movzx	eax, BYTE PTR [edx+22]
	add	eax, DWORD PTR [ecx+68]
	mov	DWORD PTR __i$82652[ebp], eax
	cmp	DWORD PTR __i$82652[ebp], 255		; 000000ffH
	jle	SHORT $L82655
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+50], 255			; 000000ffH
	jmp	SHORT $L82657
$L82655:
	cmp	DWORD PTR __i$82652[ebp], 0
	jge	SHORT $L82658
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+50], 0
	jmp	SHORT $L82657
$L82658:
	mov	eax, DWORD PTR _vert$[ebp]
	mov	cl, BYTE PTR __i$82652[ebp]
	mov	BYTE PTR [eax+50], cl
$L82657:
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	mov	edx, DWORD PTR _mp$[ebp]
	movzx	eax, BYTE PTR [edx+21]
	add	eax, DWORD PTR [ecx+72]
	mov	DWORD PTR __i$82652[ebp], eax
	cmp	DWORD PTR __i$82652[ebp], 255		; 000000ffH
	jle	SHORT $L82665
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+49], 255			; 000000ffH
	jmp	SHORT $L82667
$L82665:
	cmp	DWORD PTR __i$82652[ebp], 0
	jge	SHORT $L82668
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+49], 0
	jmp	SHORT $L82667
$L82668:
	mov	eax, DWORD PTR _vert$[ebp]
	mov	cl, BYTE PTR __i$82652[ebp]
	mov	BYTE PTR [eax+49], cl
$L82667:
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	mov	edx, DWORD PTR _mp$[ebp]
	movzx	eax, BYTE PTR [edx+20]
	add	eax, DWORD PTR [ecx+76]
	mov	DWORD PTR __i$82652[ebp], eax
	cmp	DWORD PTR __i$82652[ebp], 255		; 000000ffH
	jle	SHORT $L82675
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+48], 255			; 000000ffH
	jmp	SHORT $L82677
$L82675:
	cmp	DWORD PTR __i$82652[ebp], 0
	jge	SHORT $L82678
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+48], 0
	jmp	SHORT $L82677
$L82678:
	mov	eax, DWORD PTR _vert$[ebp]
	mov	cl, BYTE PTR __i$82652[ebp]
	mov	BYTE PTR [eax+48], cl
$L82677:
	mov	eax, DWORD PTR _vert$[ebp]
	mov	ecx, DWORD PTR _mp$[ebp]
	mov	dl, BYTE PTR [ecx+23]
	mov	BYTE PTR [eax+51], dl
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	mov	edx, DWORD PTR _mp$[ebp]
	movzx	eax, BYTE PTR [edx+26]
	add	eax, DWORD PTR [ecx+68]
	mov	DWORD PTR __i$82685[ebp], eax
	cmp	DWORD PTR __i$82685[ebp], 255		; 000000ffH
	jle	SHORT $L82688
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+82], 255			; 000000ffH
	jmp	SHORT $L82690
$L82688:
	cmp	DWORD PTR __i$82685[ebp], 0
	jge	SHORT $L82691
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+82], 0
	jmp	SHORT $L82690
$L82691:
	mov	eax, DWORD PTR _vert$[ebp]
	mov	cl, BYTE PTR __i$82685[ebp]
	mov	BYTE PTR [eax+82], cl
$L82690:
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	mov	edx, DWORD PTR _mp$[ebp]
	movzx	eax, BYTE PTR [edx+25]
	add	eax, DWORD PTR [ecx+72]
	mov	DWORD PTR __i$82685[ebp], eax
	cmp	DWORD PTR __i$82685[ebp], 255		; 000000ffH
	jle	SHORT $L82698
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+81], 255			; 000000ffH
	jmp	SHORT $L82700
$L82698:
	cmp	DWORD PTR __i$82685[ebp], 0
	jge	SHORT $L82701
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+81], 0
	jmp	SHORT $L82700
$L82701:
	mov	eax, DWORD PTR _vert$[ebp]
	mov	cl, BYTE PTR __i$82685[ebp]
	mov	BYTE PTR [eax+81], cl
$L82700:
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	mov	edx, DWORD PTR _mp$[ebp]
	movzx	eax, BYTE PTR [edx+24]
	add	eax, DWORD PTR [ecx+76]
	mov	DWORD PTR __i$82685[ebp], eax
	cmp	DWORD PTR __i$82685[ebp], 255		; 000000ffH
	jle	SHORT $L82708
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+80], 255			; 000000ffH
	jmp	SHORT $L82710
$L82708:
	cmp	DWORD PTR __i$82685[ebp], 0
	jge	SHORT $L82711
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+80], 0
	jmp	SHORT $L82710
$L82711:
	mov	eax, DWORD PTR _vert$[ebp]
	mov	cl, BYTE PTR __i$82685[ebp]
	mov	BYTE PTR [eax+80], cl
$L82710:
	mov	eax, DWORD PTR _vert$[ebp]
	mov	ecx, DWORD PTR _mp$[ebp]
	mov	dl, BYTE PTR [ecx+27]
	mov	BYTE PTR [eax+83], dl
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	mov	edx, DWORD PTR _mp$[ebp]
	movzx	eax, BYTE PTR [edx+30]
	add	eax, DWORD PTR [ecx+68]
	mov	DWORD PTR __i$82718[ebp], eax
	cmp	DWORD PTR __i$82718[ebp], 255		; 000000ffH
	jle	SHORT $L82721
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+114], 255			; 000000ffH
	jmp	SHORT $L82723
$L82721:
	cmp	DWORD PTR __i$82718[ebp], 0
	jge	SHORT $L82724
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+114], 0
	jmp	SHORT $L82723
$L82724:
	mov	eax, DWORD PTR _vert$[ebp]
	mov	cl, BYTE PTR __i$82718[ebp]
	mov	BYTE PTR [eax+114], cl
$L82723:
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	mov	edx, DWORD PTR _mp$[ebp]
	movzx	eax, BYTE PTR [edx+29]
	add	eax, DWORD PTR [ecx+72]
	mov	DWORD PTR __i$82718[ebp], eax
	cmp	DWORD PTR __i$82718[ebp], 255		; 000000ffH
	jle	SHORT $L82731
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+113], 255			; 000000ffH
	jmp	SHORT $L82733
$L82731:
	cmp	DWORD PTR __i$82718[ebp], 0
	jge	SHORT $L82734
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+113], 0
	jmp	SHORT $L82733
$L82734:
	mov	eax, DWORD PTR _vert$[ebp]
	mov	cl, BYTE PTR __i$82718[ebp]
	mov	BYTE PTR [eax+113], cl
$L82733:
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	mov	edx, DWORD PTR _mp$[ebp]
	movzx	eax, BYTE PTR [edx+28]
	add	eax, DWORD PTR [ecx+76]
	mov	DWORD PTR __i$82718[ebp], eax
	cmp	DWORD PTR __i$82718[ebp], 255		; 000000ffH
	jle	SHORT $L82741
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+112], 255			; 000000ffH
	jmp	SHORT $L82743
$L82741:
	cmp	DWORD PTR __i$82718[ebp], 0
	jge	SHORT $L82744
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+112], 0
	jmp	SHORT $L82743
$L82744:
	mov	eax, DWORD PTR _vert$[ebp]
	mov	cl, BYTE PTR __i$82718[ebp]
	mov	BYTE PTR [eax+112], cl
$L82743:
	mov	eax, DWORD PTR _vert$[ebp]
	mov	ecx, DWORD PTR _mp$[ebp]
	mov	dl, BYTE PTR [ecx+31]
	mov	BYTE PTR [eax+115], dl

; 1840 : 		}
; 1841 : 		else

	jmp	SHORT $L82751
$L82618:

; 1842 : 		{
; 1843 : 			COPY_WORLD_QUAD_COLOR(vert);

	mov	eax, DWORD PTR _vert$[ebp]
	mov	ecx, DWORD PTR _mp$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+16], edx
	mov	eax, DWORD PTR _vert$[ebp]
	mov	ecx, DWORD PTR _mp$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR [eax+48], edx
	mov	eax, DWORD PTR _vert$[ebp]
	mov	ecx, DWORD PTR _mp$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR [eax+80], edx
	mov	eax, DWORD PTR _vert$[ebp]
	mov	ecx, DWORD PTR _mp$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR [eax+112], edx
$L82751:

; 1844 : 		}
; 1845 : 
; 1846 : 		if (WorldFog)

	movsx	eax, WORD PTR _WorldFog
	test	eax, eax
	je	SHORT $L82752

; 1847 : 			COPY_QUAD_SPECULAR(vert);

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	mov	edx, DWORD PTR _vert$[ebp]
	mov	eax, DWORD PTR [ecx+56]
	mov	DWORD PTR [edx+20], eax
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	mov	edx, DWORD PTR _vert$[ebp]
	mov	eax, DWORD PTR [ecx+56]
	mov	DWORD PTR [edx+52], eax
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	mov	edx, DWORD PTR _vert$[ebp]
	mov	eax, DWORD PTR [ecx+56]
	mov	DWORD PTR [edx+84], eax
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	mov	edx, DWORD PTR _vert$[ebp]
	mov	eax, DWORD PTR [ecx+56]
	mov	DWORD PTR [edx+116], eax
$L82752:

; 1848 : 
; 1849 : // env?
; 1850 : 
; 1851 : 		if (mp->Type & WorldEnvMask)

	mov	eax, DWORD PTR _mp$[ebp]
	movsx	ecx, WORD PTR [eax]
	movsx	edx, WORD PTR _WorldEnvMask
	and	ecx, edx
	je	$L82753

; 1852 : 		{
; 1853 : 			INC_POLY_COUNT(WorldDrawnCount, 2);

	movsx	eax, WORD PTR ?WorldDrawnCount@@3FA	; WorldDrawnCount
	add	eax, 2
	mov	WORD PTR ?WorldDrawnCount@@3FA, ax	; WorldDrawnCount

; 1854 : 
; 1855 : // get env vert ptr
; 1856 : 
; 1857 : 			count = (short)(envbucket->CurrentVerts - envbucket->Verts);

	mov	eax, DWORD PTR _envbucket$[ebp]
	add	eax, 8008				; 00001f48H
	mov	ecx, DWORD PTR _envbucket$[ebp]
	mov	edx, DWORD PTR [ecx+8004]
	sub	edx, eax
	sar	edx, 5
	mov	WORD PTR _count$[ebp], dx

; 1858 : 
; 1859 : 			if (count > ENV_VERT_END)

	movsx	eax, WORD PTR _count$[ebp]
	cmp	eax, 1996				; 000007ccH
	jle	SHORT $L82755

; 1860 : 				continue;

	jmp	$L82587
$L82755:

; 1861 : 
; 1862 : 			envbucket->CurrentIndex[0] = count;

	mov	eax, DWORD PTR _envbucket$[ebp]
	mov	ecx, DWORD PTR [eax+8000]
	mov	dx, WORD PTR _count$[ebp]
	mov	WORD PTR [ecx], dx

; 1863 : 			envbucket->CurrentIndex[1] = count + 1;

	movsx	eax, WORD PTR _count$[ebp]
	add	eax, 1
	mov	ecx, DWORD PTR _envbucket$[ebp]
	mov	edx, DWORD PTR [ecx+8000]
	mov	WORD PTR [edx+2], ax

; 1864 : 			envbucket->CurrentIndex[2] = count + 2;

	movsx	eax, WORD PTR _count$[ebp]
	add	eax, 2
	mov	ecx, DWORD PTR _envbucket$[ebp]
	mov	edx, DWORD PTR [ecx+8000]
	mov	WORD PTR [edx+4], ax

; 1865 : 			envbucket->CurrentIndex[3] = count;

	mov	eax, DWORD PTR _envbucket$[ebp]
	mov	ecx, DWORD PTR [eax+8000]
	mov	dx, WORD PTR _count$[ebp]
	mov	WORD PTR [ecx+6], dx

; 1866 : 			envbucket->CurrentIndex[4] = count + 2;

	movsx	eax, WORD PTR _count$[ebp]
	add	eax, 2
	mov	ecx, DWORD PTR _envbucket$[ebp]
	mov	edx, DWORD PTR [ecx+8000]
	mov	WORD PTR [edx+8], ax

; 1867 : 			envbucket->CurrentIndex[5] = count + 3;

	movsx	eax, WORD PTR _count$[ebp]
	add	eax, 3
	mov	ecx, DWORD PTR _envbucket$[ebp]
	mov	edx, DWORD PTR [ecx+8000]
	mov	WORD PTR [edx+10], ax

; 1868 : 			envbucket->CurrentIndex += 6;

	mov	eax, DWORD PTR _envbucket$[ebp]
	mov	ecx, DWORD PTR [eax+8000]
	add	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR _envbucket$[ebp]
	mov	DWORD PTR [edx+8000], ecx

; 1869 : 
; 1870 : 			vert = envbucket->CurrentVerts;

	mov	eax, DWORD PTR _envbucket$[ebp]
	mov	ecx, DWORD PTR [eax+8004]
	mov	DWORD PTR _vert$[ebp], ecx

; 1871 : 			envbucket->CurrentVerts += 4;

	mov	eax, DWORD PTR _envbucket$[ebp]
	mov	ecx, DWORD PTR [eax+8004]
	add	ecx, 128				; 00000080H
	mov	edx, DWORD PTR _envbucket$[ebp]
	mov	DWORD PTR [edx+8004], ecx

; 1872 : 
; 1873 : // copy env vert info
; 1874 : 
; 1875 : 			*(MEM32*)&vert[0] = *(MEM32*)&mp->v0->sx;

	mov	eax, DWORD PTR _mp$[ebp]
	mov	esi, DWORD PTR [eax+64]
	add	esi, 36					; 00000024H
	mov	ecx, 8
	mov	edi, DWORD PTR _vert$[ebp]
	rep movsd

; 1876 : 			*(MEM32*)&vert[1] = *(MEM32*)&mp->v1->sx;

	mov	eax, DWORD PTR _mp$[ebp]
	mov	esi, DWORD PTR [eax+68]
	add	esi, 36					; 00000024H
	mov	edi, DWORD PTR _vert$[ebp]
	add	edi, 32					; 00000020H
	mov	ecx, 8
	rep movsd

; 1877 : 			*(MEM32*)&vert[2] = *(MEM32*)&mp->v2->sx;

	mov	eax, DWORD PTR _mp$[ebp]
	mov	esi, DWORD PTR [eax+72]
	add	esi, 36					; 00000024H
	mov	edi, DWORD PTR _vert$[ebp]
	add	edi, 64					; 00000040H
	mov	ecx, 8
	rep movsd

; 1878 : 			*(MEM32*)&vert[3] = *(MEM32*)&mp->v3->sx;

	mov	eax, DWORD PTR _mp$[ebp]
	mov	esi, DWORD PTR [eax+76]
	add	esi, 36					; 00000024H
	mov	edi, DWORD PTR _vert$[ebp]
	add	edi, 96					; 00000060H
	mov	ecx, 8
	rep movsd
$L82753:

; 1879 : 		}
; 1880 : 	}

	jmp	$L82587
$L82588:

; 1881 : 
; 1882 : // draw textured tri's
; 1883 : 
; 1884 : 	for (i = m->TriNumTex ; i ; i--, mp++)

	mov	eax, DWORD PTR _m$[ebp]
	movsx	ecx, WORD PTR [eax+10]
	mov	DWORD PTR _i$[ebp], ecx
	jmp	SHORT $L82764
$L82765:
	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	mov	ecx, DWORD PTR _mp$[ebp]
	add	ecx, 80					; 00000050H
	mov	DWORD PTR _mp$[ebp], ecx
$L82764:
	cmp	DWORD PTR _i$[ebp], 0
	je	$L82766

; 1885 : 	{
; 1886 : 
; 1887 : // reject?
; 1888 : 
; 1889 : 		REJECT_WORLD_POLY();

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	and	ecx, DWORD PTR ?CamVisiMask@@3_KA
	mov	edx, DWORD PTR [eax+12]
	and	edx, DWORD PTR ?CamVisiMask@@3_KA+4
	mov	DWORD PTR tv2413[ebp], ecx
	mov	DWORD PTR tv2413[ebp+4], edx
	mov	eax, DWORD PTR tv2413[ebp]
	or	eax, DWORD PTR tv2413[ebp+4]
	je	SHORT $L82767
	jmp	SHORT $L82765
$L82767:
	mov	eax, DWORD PTR _mp$[ebp]
	movsx	ecx, WORD PTR [eax]
	and	ecx, 2
	jne	SHORT $L82768
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	fld	DWORD PTR [ecx+36]
	mov	edx, DWORD PTR _mp$[ebp]
	mov	eax, DWORD PTR [edx+68]
	fsub	DWORD PTR [eax+36]
	mov	ecx, DWORD PTR _mp$[ebp]
	mov	edx, DWORD PTR [ecx+72]
	fld	DWORD PTR [edx+40]
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	fsub	DWORD PTR [ecx+40]
	fmulp	ST(1), ST(0)
	mov	edx, DWORD PTR _mp$[ebp]
	mov	eax, DWORD PTR [edx+64]
	fld	DWORD PTR [eax+40]
	mov	ecx, DWORD PTR _mp$[ebp]
	mov	edx, DWORD PTR [ecx+68]
	fsub	DWORD PTR [edx+40]
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	fld	DWORD PTR [ecx+36]
	mov	edx, DWORD PTR _mp$[ebp]
	mov	eax, DWORD PTR [edx+68]
	fsub	DWORD PTR [eax+36]
	fmulp	ST(1), ST(0)
	fsubp	ST(1), ST(0)
	fcomp	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $L82768
	jmp	$L82765
$L82768:

; 1890 : 		INC_POLY_COUNT(WorldDrawnCount, 1);

	movsx	eax, WORD PTR ?WorldDrawnCount@@3FA	; WorldDrawnCount
	add	eax, 1
	mov	WORD PTR ?WorldDrawnCount@@3FA, ax	; WorldDrawnCount

; 1891 : 
; 1892 : // get vert ptr
; 1893 : 
; 1894 : 		if (mp->Type & POLY_SEMITRANS)

	mov	eax, DWORD PTR _mp$[ebp]
	movsx	ecx, WORD PTR [eax]
	and	ecx, 4
	je	$L82770

; 1895 : 		{
; 1896 : 			if (!SEMI_POLY_FREE()) continue;

	cmp	DWORD PTR ?SemiCount@@3JA, 800		; SemiCount, 00000320H
	jl	SHORT $L82771
	jmp	$L82765
$L82771:

; 1897 : 			SEMI_POLY_SETUP(vert, WorldFog, 3, mp->Tpage, FALSE, (mp->Type & POLY_SEMITRANS_ONE) != 0);

	movsx	eax, WORD PTR _WorldFog
	mov	ecx, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	ecx, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[ecx+12], eax
	mov	eax, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	eax, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[eax+4], 3
	mov	eax, DWORD PTR _mp$[ebp]
	movsx	ecx, WORD PTR [eax+2]
	mov	edx, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	edx, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[edx+8], ecx
	xor	eax, eax
	je	SHORT $L82772
	mov	eax, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	eax, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[eax], 8
	jmp	SHORT $L82773
$L82772:
	mov	eax, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	eax, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[eax], 12 ; 0000000cH
$L82773:
	mov	eax, DWORD PTR _mp$[ebp]
	movsx	ecx, WORD PTR [eax]
	and	ecx, 256				; 00000100H
	neg	ecx
	sbb	ecx, ecx
	neg	ecx
	mov	edx, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	edx, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[edx+16], ecx
	mov	eax, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	eax, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[eax+20], 0
	mov	eax, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	eax, 152				; 00000098H
	add	eax, OFFSET FLAT:?SemiPoly@@3PAUDRAW_SEMI_POLY@@A+24
	mov	DWORD PTR _vert$[ebp], eax
	mov	ecx, DWORD PTR ?SemiCount@@3JA		; SemiCount
	add	ecx, 1
	mov	DWORD PTR ?SemiCount@@3JA, ecx		; SemiCount

; 1898 : 		}
; 1899 : 		else

	jmp	$L82774
$L82770:

; 1900 : 		{
; 1901 : 			bucket = &WorldBucketHead[mp->Tpage];

	mov	eax, DWORD PTR _mp$[ebp]
	movsx	ecx, WORD PTR [eax+2]
	imul	ecx, 7208				; 00001c28H
	add	ecx, DWORD PTR _WorldBucketHead
	mov	DWORD PTR _bucket$[ebp], ecx

; 1902 : 			count = (short)(bucket->CurrentVerts - bucket->Verts);

	mov	eax, DWORD PTR _bucket$[ebp]
	add	eax, 808				; 00000328H
	mov	ecx, DWORD PTR _bucket$[ebp]
	mov	edx, DWORD PTR [ecx+804]
	sub	edx, eax
	sar	edx, 5
	mov	WORD PTR _count$[ebp], dx

; 1903 : 
; 1904 : 			if (count > BUCKET_VERT_END)

	movsx	eax, WORD PTR _count$[ebp]
	cmp	eax, 196				; 000000c4H
	jle	$L82776

; 1905 : 			{
; 1906 : 				SET_TPAGE(mp->Tpage);

	movsx	eax, WORD PTR ?RenderTP@@3FA		; RenderTP
	mov	ecx, DWORD PTR _mp$[ebp]
	movsx	edx, WORD PTR [ecx+2]
	cmp	eax, edx
	je	SHORT $L82777
	mov	eax, DWORD PTR _mp$[ebp]
	mov	cx, WORD PTR [eax+2]
	mov	WORD PTR ?RenderTP@@3FA, cx		; RenderTP
	movsx	edx, WORD PTR ?RenderTP@@3FA		; RenderTP
	cmp	edx, -1
	jne	SHORT $L82778
	push	0
	push	0
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	edx
	call	DWORD PTR [ecx+152]
	mov	eax, DWORD PTR ?TextureStateChange@@3JA	; TextureStateChange
	add	eax, 1
	mov	DWORD PTR ?TextureStateChange@@3JA, eax	; TextureStateChange
	jmp	SHORT $L82777
$L82778:
	movsx	eax, WORD PTR ?RenderTP@@3FA		; RenderTP
	shl	eax, 6
	mov	ecx, DWORD PTR ?TexInfo@@3PAUTEXINFO@@A	; TexInfo
	mov	edx, DWORD PTR [ecx+eax+52]
	push	edx
	push	0
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	edx
	call	DWORD PTR [ecx+152]
	mov	eax, DWORD PTR ?TextureStateChange@@3JA	; TextureStateChange
	add	eax, 1
	mov	DWORD PTR ?TextureStateChange@@3JA, eax	; TextureStateChange
$L82777:

; 1907 : 				FlushOneBucketTEX1(bucket, FALSE);

	push	0
	mov	eax, DWORD PTR _bucket$[ebp]
	push	eax
	call	?FlushOneBucketTEX1@@YAXPAUBUCKET_TEX1@@J@Z ; FlushOneBucketTEX1
	add	esp, 8

; 1908 : 				count = 0;

	mov	WORD PTR _count$[ebp], 0
$L82776:

; 1909 : 			}
; 1910 : 
; 1911 : 			bucket->CurrentIndex[0] = count;

	mov	eax, DWORD PTR _bucket$[ebp]
	mov	ecx, DWORD PTR [eax+800]
	mov	dx, WORD PTR _count$[ebp]
	mov	WORD PTR [ecx], dx

; 1912 : 			bucket->CurrentIndex[1] = count + 1;

	movsx	eax, WORD PTR _count$[ebp]
	add	eax, 1
	mov	ecx, DWORD PTR _bucket$[ebp]
	mov	edx, DWORD PTR [ecx+800]
	mov	WORD PTR [edx+2], ax

; 1913 : 			bucket->CurrentIndex[2] = count + 2;

	movsx	eax, WORD PTR _count$[ebp]
	add	eax, 2
	mov	ecx, DWORD PTR _bucket$[ebp]
	mov	edx, DWORD PTR [ecx+800]
	mov	WORD PTR [edx+4], ax

; 1914 : 			bucket->CurrentIndex += 3;

	mov	eax, DWORD PTR _bucket$[ebp]
	mov	ecx, DWORD PTR [eax+800]
	add	ecx, 6
	mov	edx, DWORD PTR _bucket$[ebp]
	mov	DWORD PTR [edx+800], ecx

; 1915 : 
; 1916 : 			vert = bucket->CurrentVerts;

	mov	eax, DWORD PTR _bucket$[ebp]
	mov	ecx, DWORD PTR [eax+804]
	mov	DWORD PTR _vert$[ebp], ecx

; 1917 : 			bucket->CurrentVerts += 3;

	mov	eax, DWORD PTR _bucket$[ebp]
	mov	ecx, DWORD PTR [eax+804]
	add	ecx, 96					; 00000060H
	mov	edx, DWORD PTR _bucket$[ebp]
	mov	DWORD PTR [edx+804], ecx
$L82774:

; 1918 : 		}
; 1919 : 
; 1920 : // copy vert info
; 1921 : 
; 1922 : 		COPY_TRI_XYZRHW(vert);

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	add	ecx, 36					; 00000024H
	mov	edx, DWORD PTR _vert$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], ecx
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	add	ecx, 36					; 00000024H
	mov	edx, DWORD PTR _vert$[ebp]
	add	edx, 32					; 00000020H
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], ecx
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	add	ecx, 36					; 00000024H
	mov	edx, DWORD PTR _vert$[ebp]
	add	edx, 64					; 00000040H
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], ecx

; 1923 : 		COPY_TRI_UV(vert);

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	edx, DWORD PTR [eax+36]
	mov	eax, DWORD PTR _vert$[ebp]
	mov	DWORD PTR [eax+24], ecx
	mov	DWORD PTR [eax+28], edx
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	edx, DWORD PTR [eax+44]
	mov	eax, DWORD PTR _vert$[ebp]
	mov	DWORD PTR [eax+56], ecx
	mov	DWORD PTR [eax+60], edx
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	mov	edx, DWORD PTR [eax+52]
	mov	eax, DWORD PTR _vert$[ebp]
	mov	DWORD PTR [eax+88], ecx
	mov	DWORD PTR [eax+92], edx

; 1924 : 
; 1925 : 		if (lit)

	cmp	DWORD PTR _lit$[ebp], 0
	je	$L82792

; 1926 : 		{
; 1927 : 			COPY_WORLD_TRI_COLOR_LIT(vert);

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	mov	edx, DWORD PTR _mp$[ebp]
	movzx	eax, BYTE PTR [edx+18]
	add	eax, DWORD PTR [ecx+68]
	mov	DWORD PTR __i$82793[ebp], eax
	cmp	DWORD PTR __i$82793[ebp], 255		; 000000ffH
	jle	SHORT $L82796
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+18], 255			; 000000ffH
	jmp	SHORT $L82798
$L82796:
	cmp	DWORD PTR __i$82793[ebp], 0
	jge	SHORT $L82799
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+18], 0
	jmp	SHORT $L82798
$L82799:
	mov	eax, DWORD PTR _vert$[ebp]
	mov	cl, BYTE PTR __i$82793[ebp]
	mov	BYTE PTR [eax+18], cl
$L82798:
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	mov	edx, DWORD PTR _mp$[ebp]
	movzx	eax, BYTE PTR [edx+17]
	add	eax, DWORD PTR [ecx+72]
	mov	DWORD PTR __i$82793[ebp], eax
	cmp	DWORD PTR __i$82793[ebp], 255		; 000000ffH
	jle	SHORT $L82806
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+17], 255			; 000000ffH
	jmp	SHORT $L82808
$L82806:
	cmp	DWORD PTR __i$82793[ebp], 0
	jge	SHORT $L82809
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+17], 0
	jmp	SHORT $L82808
$L82809:
	mov	eax, DWORD PTR _vert$[ebp]
	mov	cl, BYTE PTR __i$82793[ebp]
	mov	BYTE PTR [eax+17], cl
$L82808:
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	mov	edx, DWORD PTR _mp$[ebp]
	movzx	eax, BYTE PTR [edx+16]
	add	eax, DWORD PTR [ecx+76]
	mov	DWORD PTR __i$82793[ebp], eax
	cmp	DWORD PTR __i$82793[ebp], 255		; 000000ffH
	jle	SHORT $L82816
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+16], 255			; 000000ffH
	jmp	SHORT $L82818
$L82816:
	cmp	DWORD PTR __i$82793[ebp], 0
	jge	SHORT $L82819
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+16], 0
	jmp	SHORT $L82818
$L82819:
	mov	eax, DWORD PTR _vert$[ebp]
	mov	cl, BYTE PTR __i$82793[ebp]
	mov	BYTE PTR [eax+16], cl
$L82818:
	mov	eax, DWORD PTR _vert$[ebp]
	mov	ecx, DWORD PTR _mp$[ebp]
	mov	dl, BYTE PTR [ecx+19]
	mov	BYTE PTR [eax+19], dl
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	mov	edx, DWORD PTR _mp$[ebp]
	movzx	eax, BYTE PTR [edx+22]
	add	eax, DWORD PTR [ecx+68]
	mov	DWORD PTR __i$82826[ebp], eax
	cmp	DWORD PTR __i$82826[ebp], 255		; 000000ffH
	jle	SHORT $L82829
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+50], 255			; 000000ffH
	jmp	SHORT $L82831
$L82829:
	cmp	DWORD PTR __i$82826[ebp], 0
	jge	SHORT $L82832
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+50], 0
	jmp	SHORT $L82831
$L82832:
	mov	eax, DWORD PTR _vert$[ebp]
	mov	cl, BYTE PTR __i$82826[ebp]
	mov	BYTE PTR [eax+50], cl
$L82831:
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	mov	edx, DWORD PTR _mp$[ebp]
	movzx	eax, BYTE PTR [edx+21]
	add	eax, DWORD PTR [ecx+72]
	mov	DWORD PTR __i$82826[ebp], eax
	cmp	DWORD PTR __i$82826[ebp], 255		; 000000ffH
	jle	SHORT $L82839
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+49], 255			; 000000ffH
	jmp	SHORT $L82841
$L82839:
	cmp	DWORD PTR __i$82826[ebp], 0
	jge	SHORT $L82842
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+49], 0
	jmp	SHORT $L82841
$L82842:
	mov	eax, DWORD PTR _vert$[ebp]
	mov	cl, BYTE PTR __i$82826[ebp]
	mov	BYTE PTR [eax+49], cl
$L82841:
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	mov	edx, DWORD PTR _mp$[ebp]
	movzx	eax, BYTE PTR [edx+20]
	add	eax, DWORD PTR [ecx+76]
	mov	DWORD PTR __i$82826[ebp], eax
	cmp	DWORD PTR __i$82826[ebp], 255		; 000000ffH
	jle	SHORT $L82849
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+48], 255			; 000000ffH
	jmp	SHORT $L82851
$L82849:
	cmp	DWORD PTR __i$82826[ebp], 0
	jge	SHORT $L82852
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+48], 0
	jmp	SHORT $L82851
$L82852:
	mov	eax, DWORD PTR _vert$[ebp]
	mov	cl, BYTE PTR __i$82826[ebp]
	mov	BYTE PTR [eax+48], cl
$L82851:
	mov	eax, DWORD PTR _vert$[ebp]
	mov	ecx, DWORD PTR _mp$[ebp]
	mov	dl, BYTE PTR [ecx+23]
	mov	BYTE PTR [eax+51], dl
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	mov	edx, DWORD PTR _mp$[ebp]
	movzx	eax, BYTE PTR [edx+26]
	add	eax, DWORD PTR [ecx+68]
	mov	DWORD PTR __i$82859[ebp], eax
	cmp	DWORD PTR __i$82859[ebp], 255		; 000000ffH
	jle	SHORT $L82862
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+82], 255			; 000000ffH
	jmp	SHORT $L82864
$L82862:
	cmp	DWORD PTR __i$82859[ebp], 0
	jge	SHORT $L82865
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+82], 0
	jmp	SHORT $L82864
$L82865:
	mov	eax, DWORD PTR _vert$[ebp]
	mov	cl, BYTE PTR __i$82859[ebp]
	mov	BYTE PTR [eax+82], cl
$L82864:
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	mov	edx, DWORD PTR _mp$[ebp]
	movzx	eax, BYTE PTR [edx+25]
	add	eax, DWORD PTR [ecx+72]
	mov	DWORD PTR __i$82859[ebp], eax
	cmp	DWORD PTR __i$82859[ebp], 255		; 000000ffH
	jle	SHORT $L82872
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+81], 255			; 000000ffH
	jmp	SHORT $L82874
$L82872:
	cmp	DWORD PTR __i$82859[ebp], 0
	jge	SHORT $L82875
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+81], 0
	jmp	SHORT $L82874
$L82875:
	mov	eax, DWORD PTR _vert$[ebp]
	mov	cl, BYTE PTR __i$82859[ebp]
	mov	BYTE PTR [eax+81], cl
$L82874:
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	mov	edx, DWORD PTR _mp$[ebp]
	movzx	eax, BYTE PTR [edx+24]
	add	eax, DWORD PTR [ecx+76]
	mov	DWORD PTR __i$82859[ebp], eax
	cmp	DWORD PTR __i$82859[ebp], 255		; 000000ffH
	jle	SHORT $L82882
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+80], 255			; 000000ffH
	jmp	SHORT $L82884
$L82882:
	cmp	DWORD PTR __i$82859[ebp], 0
	jge	SHORT $L82885
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+80], 0
	jmp	SHORT $L82884
$L82885:
	mov	eax, DWORD PTR _vert$[ebp]
	mov	cl, BYTE PTR __i$82859[ebp]
	mov	BYTE PTR [eax+80], cl
$L82884:
	mov	eax, DWORD PTR _vert$[ebp]
	mov	ecx, DWORD PTR _mp$[ebp]
	mov	dl, BYTE PTR [ecx+27]
	mov	BYTE PTR [eax+83], dl

; 1928 : 		}
; 1929 : 		else

	jmp	SHORT $L82892
$L82792:

; 1930 : 		{
; 1931 : 			COPY_WORLD_TRI_COLOR(vert);

	mov	eax, DWORD PTR _vert$[ebp]
	mov	ecx, DWORD PTR _mp$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+16], edx
	mov	eax, DWORD PTR _vert$[ebp]
	mov	ecx, DWORD PTR _mp$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR [eax+48], edx
	mov	eax, DWORD PTR _vert$[ebp]
	mov	ecx, DWORD PTR _mp$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR [eax+80], edx
$L82892:

; 1932 : 		}
; 1933 : 
; 1934 : 		if (WorldFog)

	movsx	eax, WORD PTR _WorldFog
	test	eax, eax
	je	SHORT $L82893

; 1935 : 			COPY_TRI_SPECULAR(vert);

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	mov	edx, DWORD PTR _vert$[ebp]
	mov	eax, DWORD PTR [ecx+56]
	mov	DWORD PTR [edx+20], eax
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	mov	edx, DWORD PTR _vert$[ebp]
	mov	eax, DWORD PTR [ecx+56]
	mov	DWORD PTR [edx+52], eax
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	mov	edx, DWORD PTR _vert$[ebp]
	mov	eax, DWORD PTR [ecx+56]
	mov	DWORD PTR [edx+84], eax
$L82893:

; 1936 : 
; 1937 : // env?
; 1938 : 
; 1939 : 		if (mp->Type & WorldEnvMask)

	mov	eax, DWORD PTR _mp$[ebp]
	movsx	ecx, WORD PTR [eax]
	movsx	edx, WORD PTR _WorldEnvMask
	and	ecx, edx
	je	$L82894

; 1940 : 		{
; 1941 : 			INC_POLY_COUNT(WorldDrawnCount, 1);

	movsx	eax, WORD PTR ?WorldDrawnCount@@3FA	; WorldDrawnCount
	add	eax, 1
	mov	WORD PTR ?WorldDrawnCount@@3FA, ax	; WorldDrawnCount

; 1942 : 
; 1943 : // get env vert ptr
; 1944 : 
; 1945 : 			count = (short)(envbucket->CurrentVerts - envbucket->Verts);

	mov	eax, DWORD PTR _envbucket$[ebp]
	add	eax, 8008				; 00001f48H
	mov	ecx, DWORD PTR _envbucket$[ebp]
	mov	edx, DWORD PTR [ecx+8004]
	sub	edx, eax
	sar	edx, 5
	mov	WORD PTR _count$[ebp], dx

; 1946 : 
; 1947 : 			if (count > ENV_VERT_END)

	movsx	eax, WORD PTR _count$[ebp]
	cmp	eax, 1996				; 000007ccH
	jle	SHORT $L82896

; 1948 : 				continue;

	jmp	$L82765
$L82896:

; 1949 : 
; 1950 : 			envbucket->CurrentIndex[0] = count;

	mov	eax, DWORD PTR _envbucket$[ebp]
	mov	ecx, DWORD PTR [eax+8000]
	mov	dx, WORD PTR _count$[ebp]
	mov	WORD PTR [ecx], dx

; 1951 : 			envbucket->CurrentIndex[1] = count + 1;

	movsx	eax, WORD PTR _count$[ebp]
	add	eax, 1
	mov	ecx, DWORD PTR _envbucket$[ebp]
	mov	edx, DWORD PTR [ecx+8000]
	mov	WORD PTR [edx+2], ax

; 1952 : 			envbucket->CurrentIndex[2] = count + 2;

	movsx	eax, WORD PTR _count$[ebp]
	add	eax, 2
	mov	ecx, DWORD PTR _envbucket$[ebp]
	mov	edx, DWORD PTR [ecx+8000]
	mov	WORD PTR [edx+4], ax

; 1953 : 			envbucket->CurrentIndex += 3;

	mov	eax, DWORD PTR _envbucket$[ebp]
	mov	ecx, DWORD PTR [eax+8000]
	add	ecx, 6
	mov	edx, DWORD PTR _envbucket$[ebp]
	mov	DWORD PTR [edx+8000], ecx

; 1954 : 
; 1955 : 			vert = envbucket->CurrentVerts;

	mov	eax, DWORD PTR _envbucket$[ebp]
	mov	ecx, DWORD PTR [eax+8004]
	mov	DWORD PTR _vert$[ebp], ecx

; 1956 : 			envbucket->CurrentVerts += 3;

	mov	eax, DWORD PTR _envbucket$[ebp]
	mov	ecx, DWORD PTR [eax+8004]
	add	ecx, 96					; 00000060H
	mov	edx, DWORD PTR _envbucket$[ebp]
	mov	DWORD PTR [edx+8004], ecx

; 1957 : 
; 1958 : // copy env vert info
; 1959 : 
; 1960 : 			*(MEM32*)&vert[0] = *(MEM32*)&mp->v0->sx;

	mov	eax, DWORD PTR _mp$[ebp]
	mov	esi, DWORD PTR [eax+64]
	add	esi, 36					; 00000024H
	mov	ecx, 8
	mov	edi, DWORD PTR _vert$[ebp]
	rep movsd

; 1961 : 			*(MEM32*)&vert[1] = *(MEM32*)&mp->v1->sx;

	mov	eax, DWORD PTR _mp$[ebp]
	mov	esi, DWORD PTR [eax+68]
	add	esi, 36					; 00000024H
	mov	edi, DWORD PTR _vert$[ebp]
	add	edi, 32					; 00000020H
	mov	ecx, 8
	rep movsd

; 1962 : 			*(MEM32*)&vert[2] = *(MEM32*)&mp->v2->sx;

	mov	eax, DWORD PTR _mp$[ebp]
	mov	esi, DWORD PTR [eax+72]
	add	esi, 36					; 00000024H
	mov	edi, DWORD PTR _vert$[ebp]
	add	edi, 64					; 00000040H
	mov	ecx, 8
	rep movsd
$L82894:

; 1963 : 		}
; 1964 : 	}

	jmp	$L82765
$L82766:

; 1965 : 
; 1966 : // draw rgb quads
; 1967 : 
; 1968 : 	for (i = m->QuadNumRGB ; i ; i--, mp++)

	mov	eax, DWORD PTR _m$[ebp]
	movsx	ecx, WORD PTR [eax+12]
	mov	DWORD PTR _i$[ebp], ecx
	jmp	SHORT $L82903
$L82904:
	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	mov	ecx, DWORD PTR _mp$[ebp]
	add	ecx, 80					; 00000050H
	mov	DWORD PTR _mp$[ebp], ecx
$L82903:
	cmp	DWORD PTR _i$[ebp], 0
	je	$L82905

; 1969 : 	{
; 1970 : 
; 1971 : // reject?
; 1972 : 
; 1973 : 		REJECT_WORLD_POLY();

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	and	ecx, DWORD PTR ?CamVisiMask@@3_KA
	mov	edx, DWORD PTR [eax+12]
	and	edx, DWORD PTR ?CamVisiMask@@3_KA+4
	mov	DWORD PTR tv2660[ebp], ecx
	mov	DWORD PTR tv2660[ebp+4], edx
	mov	eax, DWORD PTR tv2660[ebp]
	or	eax, DWORD PTR tv2660[ebp+4]
	je	SHORT $L82906
	jmp	SHORT $L82904
$L82906:
	mov	eax, DWORD PTR _mp$[ebp]
	movsx	ecx, WORD PTR [eax]
	and	ecx, 2
	jne	SHORT $L82907
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	fld	DWORD PTR [ecx+36]
	mov	edx, DWORD PTR _mp$[ebp]
	mov	eax, DWORD PTR [edx+68]
	fsub	DWORD PTR [eax+36]
	mov	ecx, DWORD PTR _mp$[ebp]
	mov	edx, DWORD PTR [ecx+72]
	fld	DWORD PTR [edx+40]
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	fsub	DWORD PTR [ecx+40]
	fmulp	ST(1), ST(0)
	mov	edx, DWORD PTR _mp$[ebp]
	mov	eax, DWORD PTR [edx+64]
	fld	DWORD PTR [eax+40]
	mov	ecx, DWORD PTR _mp$[ebp]
	mov	edx, DWORD PTR [ecx+68]
	fsub	DWORD PTR [edx+40]
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	fld	DWORD PTR [ecx+36]
	mov	edx, DWORD PTR _mp$[ebp]
	mov	eax, DWORD PTR [edx+68]
	fsub	DWORD PTR [eax+36]
	fmulp	ST(1), ST(0)
	fsubp	ST(1), ST(0)
	fcomp	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $L82907
	jmp	$L82904
$L82907:

; 1974 : 		INC_POLY_COUNT(WorldDrawnCount, 2);

	movsx	eax, WORD PTR ?WorldDrawnCount@@3FA	; WorldDrawnCount
	add	eax, 2
	mov	WORD PTR ?WorldDrawnCount@@3FA, ax	; WorldDrawnCount

; 1975 : 
; 1976 : // get vert ptr
; 1977 : 
; 1978 : 		if (mp->Type & POLY_SEMITRANS)

	mov	eax, DWORD PTR _mp$[ebp]
	movsx	ecx, WORD PTR [eax]
	and	ecx, 4
	je	$L82909

; 1979 : 		{
; 1980 : 			if (!SEMI_POLY_FREE()) continue;

	cmp	DWORD PTR ?SemiCount@@3JA, 800		; SemiCount, 00000320H
	jl	SHORT $L82910
	jmp	$L82904
$L82910:

; 1981 : 			SEMI_POLY_SETUP_RGB(vertrgb, WorldFog, 4, FALSE, (mp->Type & POLY_SEMITRANS_ONE) != 0);

	movsx	eax, WORD PTR _WorldFog
	mov	ecx, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	ecx, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[ecx+12], eax
	mov	eax, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	eax, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[eax+4], 4
	mov	eax, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	eax, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[eax+8], -1
	xor	eax, eax
	je	SHORT $L82911
	mov	eax, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	eax, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[eax], 8
	jmp	SHORT $L82912
$L82911:
	mov	eax, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	eax, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[eax], 12 ; 0000000cH
$L82912:
	mov	eax, DWORD PTR _mp$[ebp]
	movsx	ecx, WORD PTR [eax]
	and	ecx, 256				; 00000100H
	neg	ecx
	sbb	ecx, ecx
	neg	ecx
	mov	edx, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	edx, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[edx+16], ecx
	mov	eax, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	eax, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[eax+20], 0
	mov	eax, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	eax, 152				; 00000098H
	add	eax, OFFSET FLAT:?SemiPoly@@3PAUDRAW_SEMI_POLY@@A+24
	mov	DWORD PTR _vertrgb$[ebp], eax
	mov	ecx, DWORD PTR ?SemiCount@@3JA		; SemiCount
	add	ecx, 1
	mov	DWORD PTR ?SemiCount@@3JA, ecx		; SemiCount

; 1982 : 		}
; 1983 : 		else

	jmp	$L82913
$L82909:

; 1984 : 		{
; 1985 : 			bucketrgb = WorldBucketHeadRGB;

	mov	eax, DWORD PTR _WorldBucketHeadRGB
	mov	DWORD PTR _bucketrgb$[ebp], eax

; 1986 : 			count = (short)(bucketrgb->CurrentVerts - bucketrgb->Verts);

	mov	eax, DWORD PTR _bucketrgb$[ebp]
	add	eax, 808				; 00000328H
	mov	ecx, DWORD PTR _bucketrgb$[ebp]
	mov	edx, DWORD PTR [ecx+804]
	sub	edx, eax
	mov	eax, edx
	cdq
	mov	ecx, 24					; 00000018H
	idiv	ecx
	mov	WORD PTR _count$[ebp], ax

; 1987 : 
; 1988 : 			if (count > BUCKET_VERT_END)

	movsx	eax, WORD PTR _count$[ebp]
	cmp	eax, 196				; 000000c4H
	jle	$L82915

; 1989 : 			{
; 1990 : 				SET_TPAGE(-1);

	movsx	eax, WORD PTR ?RenderTP@@3FA		; RenderTP
	cmp	eax, -1
	je	SHORT $L82916
	mov	WORD PTR ?RenderTP@@3FA, -1		; RenderTP
	movsx	eax, WORD PTR ?RenderTP@@3FA		; RenderTP
	cmp	eax, -1
	jne	SHORT $L82917
	push	0
	push	0
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	edx
	call	DWORD PTR [ecx+152]
	mov	eax, DWORD PTR ?TextureStateChange@@3JA	; TextureStateChange
	add	eax, 1
	mov	DWORD PTR ?TextureStateChange@@3JA, eax	; TextureStateChange
	jmp	SHORT $L82916
$L82917:
	movsx	eax, WORD PTR ?RenderTP@@3FA		; RenderTP
	shl	eax, 6
	mov	ecx, DWORD PTR ?TexInfo@@3PAUTEXINFO@@A	; TexInfo
	mov	edx, DWORD PTR [ecx+eax+52]
	push	edx
	push	0
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	edx
	call	DWORD PTR [ecx+152]
	mov	eax, DWORD PTR ?TextureStateChange@@3JA	; TextureStateChange
	add	eax, 1
	mov	DWORD PTR ?TextureStateChange@@3JA, eax	; TextureStateChange
$L82916:

; 1991 : 				FlushOneBucketTEX0(bucketrgb, FALSE);

	push	0
	mov	eax, DWORD PTR _bucketrgb$[ebp]
	push	eax
	call	?FlushOneBucketTEX0@@YAXPAUBUCKET_TEX0@@J@Z ; FlushOneBucketTEX0
	add	esp, 8

; 1992 : 				count = 0;

	mov	WORD PTR _count$[ebp], 0
$L82915:

; 1993 : 			}
; 1994 : 
; 1995 : 			bucketrgb->CurrentIndex[0] = count;

	mov	eax, DWORD PTR _bucketrgb$[ebp]
	mov	ecx, DWORD PTR [eax+800]
	mov	dx, WORD PTR _count$[ebp]
	mov	WORD PTR [ecx], dx

; 1996 : 			bucketrgb->CurrentIndex[1] = count + 1;

	movsx	eax, WORD PTR _count$[ebp]
	add	eax, 1
	mov	ecx, DWORD PTR _bucketrgb$[ebp]
	mov	edx, DWORD PTR [ecx+800]
	mov	WORD PTR [edx+2], ax

; 1997 : 			bucketrgb->CurrentIndex[2] = count + 2;

	movsx	eax, WORD PTR _count$[ebp]
	add	eax, 2
	mov	ecx, DWORD PTR _bucketrgb$[ebp]
	mov	edx, DWORD PTR [ecx+800]
	mov	WORD PTR [edx+4], ax

; 1998 : 			bucketrgb->CurrentIndex[3] = count;

	mov	eax, DWORD PTR _bucketrgb$[ebp]
	mov	ecx, DWORD PTR [eax+800]
	mov	dx, WORD PTR _count$[ebp]
	mov	WORD PTR [ecx+6], dx

; 1999 : 			bucketrgb->CurrentIndex[4] = count + 2;

	movsx	eax, WORD PTR _count$[ebp]
	add	eax, 2
	mov	ecx, DWORD PTR _bucketrgb$[ebp]
	mov	edx, DWORD PTR [ecx+800]
	mov	WORD PTR [edx+8], ax

; 2000 : 			bucketrgb->CurrentIndex[5] = count + 3;

	movsx	eax, WORD PTR _count$[ebp]
	add	eax, 3
	mov	ecx, DWORD PTR _bucketrgb$[ebp]
	mov	edx, DWORD PTR [ecx+800]
	mov	WORD PTR [edx+10], ax

; 2001 : 			bucketrgb->CurrentIndex += 6;

	mov	eax, DWORD PTR _bucketrgb$[ebp]
	mov	ecx, DWORD PTR [eax+800]
	add	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR _bucketrgb$[ebp]
	mov	DWORD PTR [edx+800], ecx

; 2002 : 
; 2003 : 			vertrgb = bucketrgb->CurrentVerts;

	mov	eax, DWORD PTR _bucketrgb$[ebp]
	mov	ecx, DWORD PTR [eax+804]
	mov	DWORD PTR _vertrgb$[ebp], ecx

; 2004 : 			bucketrgb->CurrentVerts += 4;

	mov	eax, DWORD PTR _bucketrgb$[ebp]
	mov	ecx, DWORD PTR [eax+804]
	add	ecx, 96					; 00000060H
	mov	edx, DWORD PTR _bucketrgb$[ebp]
	mov	DWORD PTR [edx+804], ecx
$L82913:

; 2005 : 		}
; 2006 : 
; 2007 : // copy vert info
; 2008 : 
; 2009 : 		COPY_QUAD_XYZRHW(vertrgb);

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	add	ecx, 36					; 00000024H
	mov	edx, DWORD PTR _vertrgb$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], ecx
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	add	ecx, 36					; 00000024H
	mov	edx, DWORD PTR _vertrgb$[ebp]
	add	edx, 24					; 00000018H
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], ecx
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	add	ecx, 36					; 00000024H
	mov	edx, DWORD PTR _vertrgb$[ebp]
	add	edx, 48					; 00000030H
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], ecx
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	add	ecx, 36					; 00000024H
	mov	edx, DWORD PTR _vertrgb$[ebp]
	add	edx, 72					; 00000048H
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], ecx

; 2010 : 
; 2011 : 		if (lit)

	cmp	DWORD PTR _lit$[ebp], 0
	je	$L82927

; 2012 : 		{
; 2013 : 			COPY_WORLD_QUAD_COLOR_LIT(vertrgb);

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	mov	edx, DWORD PTR _mp$[ebp]
	movzx	eax, BYTE PTR [edx+18]
	add	eax, DWORD PTR [ecx+68]
	mov	DWORD PTR __i$82928[ebp], eax
	cmp	DWORD PTR __i$82928[ebp], 255		; 000000ffH
	jle	SHORT $L82931
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+18], 255			; 000000ffH
	jmp	SHORT $L82933
$L82931:
	cmp	DWORD PTR __i$82928[ebp], 0
	jge	SHORT $L82934
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+18], 0
	jmp	SHORT $L82933
$L82934:
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	cl, BYTE PTR __i$82928[ebp]
	mov	BYTE PTR [eax+18], cl
$L82933:
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	mov	edx, DWORD PTR _mp$[ebp]
	movzx	eax, BYTE PTR [edx+17]
	add	eax, DWORD PTR [ecx+72]
	mov	DWORD PTR __i$82928[ebp], eax
	cmp	DWORD PTR __i$82928[ebp], 255		; 000000ffH
	jle	SHORT $L82941
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+17], 255			; 000000ffH
	jmp	SHORT $L82943
$L82941:
	cmp	DWORD PTR __i$82928[ebp], 0
	jge	SHORT $L82944
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+17], 0
	jmp	SHORT $L82943
$L82944:
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	cl, BYTE PTR __i$82928[ebp]
	mov	BYTE PTR [eax+17], cl
$L82943:
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	mov	edx, DWORD PTR _mp$[ebp]
	movzx	eax, BYTE PTR [edx+16]
	add	eax, DWORD PTR [ecx+76]
	mov	DWORD PTR __i$82928[ebp], eax
	cmp	DWORD PTR __i$82928[ebp], 255		; 000000ffH
	jle	SHORT $L82951
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+16], 255			; 000000ffH
	jmp	SHORT $L82953
$L82951:
	cmp	DWORD PTR __i$82928[ebp], 0
	jge	SHORT $L82954
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+16], 0
	jmp	SHORT $L82953
$L82954:
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	cl, BYTE PTR __i$82928[ebp]
	mov	BYTE PTR [eax+16], cl
$L82953:
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	ecx, DWORD PTR _mp$[ebp]
	mov	dl, BYTE PTR [ecx+19]
	mov	BYTE PTR [eax+19], dl
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	mov	edx, DWORD PTR _mp$[ebp]
	movzx	eax, BYTE PTR [edx+22]
	add	eax, DWORD PTR [ecx+68]
	mov	DWORD PTR __i$82961[ebp], eax
	cmp	DWORD PTR __i$82961[ebp], 255		; 000000ffH
	jle	SHORT $L82964
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+42], 255			; 000000ffH
	jmp	SHORT $L82966
$L82964:
	cmp	DWORD PTR __i$82961[ebp], 0
	jge	SHORT $L82967
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+42], 0
	jmp	SHORT $L82966
$L82967:
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	cl, BYTE PTR __i$82961[ebp]
	mov	BYTE PTR [eax+42], cl
$L82966:
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	mov	edx, DWORD PTR _mp$[ebp]
	movzx	eax, BYTE PTR [edx+21]
	add	eax, DWORD PTR [ecx+72]
	mov	DWORD PTR __i$82961[ebp], eax
	cmp	DWORD PTR __i$82961[ebp], 255		; 000000ffH
	jle	SHORT $L82974
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+41], 255			; 000000ffH
	jmp	SHORT $L82976
$L82974:
	cmp	DWORD PTR __i$82961[ebp], 0
	jge	SHORT $L82977
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+41], 0
	jmp	SHORT $L82976
$L82977:
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	cl, BYTE PTR __i$82961[ebp]
	mov	BYTE PTR [eax+41], cl
$L82976:
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	mov	edx, DWORD PTR _mp$[ebp]
	movzx	eax, BYTE PTR [edx+20]
	add	eax, DWORD PTR [ecx+76]
	mov	DWORD PTR __i$82961[ebp], eax
	cmp	DWORD PTR __i$82961[ebp], 255		; 000000ffH
	jle	SHORT $L82984
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+40], 255			; 000000ffH
	jmp	SHORT $L82986
$L82984:
	cmp	DWORD PTR __i$82961[ebp], 0
	jge	SHORT $L82987
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+40], 0
	jmp	SHORT $L82986
$L82987:
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	cl, BYTE PTR __i$82961[ebp]
	mov	BYTE PTR [eax+40], cl
$L82986:
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	ecx, DWORD PTR _mp$[ebp]
	mov	dl, BYTE PTR [ecx+23]
	mov	BYTE PTR [eax+43], dl
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	mov	edx, DWORD PTR _mp$[ebp]
	movzx	eax, BYTE PTR [edx+26]
	add	eax, DWORD PTR [ecx+68]
	mov	DWORD PTR __i$82994[ebp], eax
	cmp	DWORD PTR __i$82994[ebp], 255		; 000000ffH
	jle	SHORT $L82997
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+66], 255			; 000000ffH
	jmp	SHORT $L82999
$L82997:
	cmp	DWORD PTR __i$82994[ebp], 0
	jge	SHORT $L83000
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+66], 0
	jmp	SHORT $L82999
$L83000:
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	cl, BYTE PTR __i$82994[ebp]
	mov	BYTE PTR [eax+66], cl
$L82999:
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	mov	edx, DWORD PTR _mp$[ebp]
	movzx	eax, BYTE PTR [edx+25]
	add	eax, DWORD PTR [ecx+72]
	mov	DWORD PTR __i$82994[ebp], eax
	cmp	DWORD PTR __i$82994[ebp], 255		; 000000ffH
	jle	SHORT $L83007
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+65], 255			; 000000ffH
	jmp	SHORT $L83009
$L83007:
	cmp	DWORD PTR __i$82994[ebp], 0
	jge	SHORT $L83010
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+65], 0
	jmp	SHORT $L83009
$L83010:
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	cl, BYTE PTR __i$82994[ebp]
	mov	BYTE PTR [eax+65], cl
$L83009:
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	mov	edx, DWORD PTR _mp$[ebp]
	movzx	eax, BYTE PTR [edx+24]
	add	eax, DWORD PTR [ecx+76]
	mov	DWORD PTR __i$82994[ebp], eax
	cmp	DWORD PTR __i$82994[ebp], 255		; 000000ffH
	jle	SHORT $L83017
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+64], 255			; 000000ffH
	jmp	SHORT $L83019
$L83017:
	cmp	DWORD PTR __i$82994[ebp], 0
	jge	SHORT $L83020
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+64], 0
	jmp	SHORT $L83019
$L83020:
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	cl, BYTE PTR __i$82994[ebp]
	mov	BYTE PTR [eax+64], cl
$L83019:
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	ecx, DWORD PTR _mp$[ebp]
	mov	dl, BYTE PTR [ecx+27]
	mov	BYTE PTR [eax+67], dl
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	mov	edx, DWORD PTR _mp$[ebp]
	movzx	eax, BYTE PTR [edx+30]
	add	eax, DWORD PTR [ecx+68]
	mov	DWORD PTR __i$83027[ebp], eax
	cmp	DWORD PTR __i$83027[ebp], 255		; 000000ffH
	jle	SHORT $L83030
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+90], 255			; 000000ffH
	jmp	SHORT $L83032
$L83030:
	cmp	DWORD PTR __i$83027[ebp], 0
	jge	SHORT $L83033
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+90], 0
	jmp	SHORT $L83032
$L83033:
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	cl, BYTE PTR __i$83027[ebp]
	mov	BYTE PTR [eax+90], cl
$L83032:
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	mov	edx, DWORD PTR _mp$[ebp]
	movzx	eax, BYTE PTR [edx+29]
	add	eax, DWORD PTR [ecx+72]
	mov	DWORD PTR __i$83027[ebp], eax
	cmp	DWORD PTR __i$83027[ebp], 255		; 000000ffH
	jle	SHORT $L83040
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+89], 255			; 000000ffH
	jmp	SHORT $L83042
$L83040:
	cmp	DWORD PTR __i$83027[ebp], 0
	jge	SHORT $L83043
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+89], 0
	jmp	SHORT $L83042
$L83043:
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	cl, BYTE PTR __i$83027[ebp]
	mov	BYTE PTR [eax+89], cl
$L83042:
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	mov	edx, DWORD PTR _mp$[ebp]
	movzx	eax, BYTE PTR [edx+28]
	add	eax, DWORD PTR [ecx+76]
	mov	DWORD PTR __i$83027[ebp], eax
	cmp	DWORD PTR __i$83027[ebp], 255		; 000000ffH
	jle	SHORT $L83050
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+88], 255			; 000000ffH
	jmp	SHORT $L83052
$L83050:
	cmp	DWORD PTR __i$83027[ebp], 0
	jge	SHORT $L83053
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+88], 0
	jmp	SHORT $L83052
$L83053:
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	cl, BYTE PTR __i$83027[ebp]
	mov	BYTE PTR [eax+88], cl
$L83052:
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	ecx, DWORD PTR _mp$[ebp]
	mov	dl, BYTE PTR [ecx+31]
	mov	BYTE PTR [eax+91], dl

; 2014 : 		}
; 2015 : 		else

	jmp	SHORT $L83060
$L82927:

; 2016 : 		{
; 2017 : 			COPY_WORLD_QUAD_COLOR(vertrgb);

	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	ecx, DWORD PTR _mp$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+16], edx
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	ecx, DWORD PTR _mp$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR [eax+40], edx
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	ecx, DWORD PTR _mp$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR [eax+64], edx
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	ecx, DWORD PTR _mp$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR [eax+88], edx
$L83060:

; 2018 : 		}
; 2019 : 
; 2020 : 		if (WorldFog)

	movsx	eax, WORD PTR _WorldFog
	test	eax, eax
	je	SHORT $L83061

; 2021 : 			COPY_QUAD_SPECULAR(vertrgb);

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	mov	edx, DWORD PTR _vertrgb$[ebp]
	mov	eax, DWORD PTR [ecx+56]
	mov	DWORD PTR [edx+20], eax
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	mov	edx, DWORD PTR _vertrgb$[ebp]
	mov	eax, DWORD PTR [ecx+56]
	mov	DWORD PTR [edx+44], eax
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	mov	edx, DWORD PTR _vertrgb$[ebp]
	mov	eax, DWORD PTR [ecx+56]
	mov	DWORD PTR [edx+68], eax
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	mov	edx, DWORD PTR _vertrgb$[ebp]
	mov	eax, DWORD PTR [ecx+56]
	mov	DWORD PTR [edx+92], eax
$L83061:

; 2022 : 
; 2023 : // env?
; 2024 : 
; 2025 : 		if (mp->Type & WorldEnvMask)

	mov	eax, DWORD PTR _mp$[ebp]
	movsx	ecx, WORD PTR [eax]
	movsx	edx, WORD PTR _WorldEnvMask
	and	ecx, edx
	je	$L83062

; 2026 : 		{
; 2027 : 			INC_POLY_COUNT(WorldDrawnCount, 2);

	movsx	eax, WORD PTR ?WorldDrawnCount@@3FA	; WorldDrawnCount
	add	eax, 2
	mov	WORD PTR ?WorldDrawnCount@@3FA, ax	; WorldDrawnCount

; 2028 : 
; 2029 : // get env vert ptr
; 2030 : 
; 2031 : 			count = (short)(envbucket->CurrentVerts - envbucket->Verts);

	mov	eax, DWORD PTR _envbucket$[ebp]
	add	eax, 8008				; 00001f48H
	mov	ecx, DWORD PTR _envbucket$[ebp]
	mov	edx, DWORD PTR [ecx+8004]
	sub	edx, eax
	sar	edx, 5
	mov	WORD PTR _count$[ebp], dx

; 2032 : 
; 2033 : 			if (count > ENV_VERT_END)

	movsx	eax, WORD PTR _count$[ebp]
	cmp	eax, 1996				; 000007ccH
	jle	SHORT $L83064

; 2034 : 				continue;

	jmp	$L82904
$L83064:

; 2035 : 
; 2036 : 			envbucket->CurrentIndex[0] = count;

	mov	eax, DWORD PTR _envbucket$[ebp]
	mov	ecx, DWORD PTR [eax+8000]
	mov	dx, WORD PTR _count$[ebp]
	mov	WORD PTR [ecx], dx

; 2037 : 			envbucket->CurrentIndex[1] = count + 1;

	movsx	eax, WORD PTR _count$[ebp]
	add	eax, 1
	mov	ecx, DWORD PTR _envbucket$[ebp]
	mov	edx, DWORD PTR [ecx+8000]
	mov	WORD PTR [edx+2], ax

; 2038 : 			envbucket->CurrentIndex[2] = count + 2;

	movsx	eax, WORD PTR _count$[ebp]
	add	eax, 2
	mov	ecx, DWORD PTR _envbucket$[ebp]
	mov	edx, DWORD PTR [ecx+8000]
	mov	WORD PTR [edx+4], ax

; 2039 : 			envbucket->CurrentIndex[3] = count;

	mov	eax, DWORD PTR _envbucket$[ebp]
	mov	ecx, DWORD PTR [eax+8000]
	mov	dx, WORD PTR _count$[ebp]
	mov	WORD PTR [ecx+6], dx

; 2040 : 			envbucket->CurrentIndex[4] = count + 2;

	movsx	eax, WORD PTR _count$[ebp]
	add	eax, 2
	mov	ecx, DWORD PTR _envbucket$[ebp]
	mov	edx, DWORD PTR [ecx+8000]
	mov	WORD PTR [edx+8], ax

; 2041 : 			envbucket->CurrentIndex[5] = count + 3;

	movsx	eax, WORD PTR _count$[ebp]
	add	eax, 3
	mov	ecx, DWORD PTR _envbucket$[ebp]
	mov	edx, DWORD PTR [ecx+8000]
	mov	WORD PTR [edx+10], ax

; 2042 : 			envbucket->CurrentIndex += 6;

	mov	eax, DWORD PTR _envbucket$[ebp]
	mov	ecx, DWORD PTR [eax+8000]
	add	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR _envbucket$[ebp]
	mov	DWORD PTR [edx+8000], ecx

; 2043 : 
; 2044 : 			vert = envbucket->CurrentVerts;

	mov	eax, DWORD PTR _envbucket$[ebp]
	mov	ecx, DWORD PTR [eax+8004]
	mov	DWORD PTR _vert$[ebp], ecx

; 2045 : 			envbucket->CurrentVerts += 4;

	mov	eax, DWORD PTR _envbucket$[ebp]
	mov	ecx, DWORD PTR [eax+8004]
	add	ecx, 128				; 00000080H
	mov	edx, DWORD PTR _envbucket$[ebp]
	mov	DWORD PTR [edx+8004], ecx

; 2046 : 
; 2047 : // copy env vert info
; 2048 : 
; 2049 : 			*(MEM32*)&vert[0] = *(MEM32*)&mp->v0->sx;

	mov	eax, DWORD PTR _mp$[ebp]
	mov	esi, DWORD PTR [eax+64]
	add	esi, 36					; 00000024H
	mov	ecx, 8
	mov	edi, DWORD PTR _vert$[ebp]
	rep movsd

; 2050 : 			*(MEM32*)&vert[1] = *(MEM32*)&mp->v1->sx;

	mov	eax, DWORD PTR _mp$[ebp]
	mov	esi, DWORD PTR [eax+68]
	add	esi, 36					; 00000024H
	mov	edi, DWORD PTR _vert$[ebp]
	add	edi, 32					; 00000020H
	mov	ecx, 8
	rep movsd

; 2051 : 			*(MEM32*)&vert[2] = *(MEM32*)&mp->v2->sx;

	mov	eax, DWORD PTR _mp$[ebp]
	mov	esi, DWORD PTR [eax+72]
	add	esi, 36					; 00000024H
	mov	edi, DWORD PTR _vert$[ebp]
	add	edi, 64					; 00000040H
	mov	ecx, 8
	rep movsd

; 2052 : 			*(MEM32*)&vert[3] = *(MEM32*)&mp->v3->sx;

	mov	eax, DWORD PTR _mp$[ebp]
	mov	esi, DWORD PTR [eax+76]
	add	esi, 36					; 00000024H
	mov	edi, DWORD PTR _vert$[ebp]
	add	edi, 96					; 00000060H
	mov	ecx, 8
	rep movsd
$L83062:

; 2053 : 		}
; 2054 : 	}

	jmp	$L82904
$L82905:

; 2055 : 
; 2056 : // draw rgb tri's
; 2057 : 
; 2058 : 	for (i = m->TriNumRGB ; i ; i--, mp++)

	mov	eax, DWORD PTR _m$[ebp]
	movsx	ecx, WORD PTR [eax+14]
	mov	DWORD PTR _i$[ebp], ecx
	jmp	SHORT $L83073
$L83074:
	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	mov	ecx, DWORD PTR _mp$[ebp]
	add	ecx, 80					; 00000050H
	mov	DWORD PTR _mp$[ebp], ecx
$L83073:
	cmp	DWORD PTR _i$[ebp], 0
	je	$L82577

; 2059 : 	{
; 2060 : 
; 2061 : // reject?
; 2062 : 
; 2063 : 		REJECT_WORLD_POLY();

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	and	ecx, DWORD PTR ?CamVisiMask@@3_KA
	mov	edx, DWORD PTR [eax+12]
	and	edx, DWORD PTR ?CamVisiMask@@3_KA+4
	mov	DWORD PTR tv2946[ebp], ecx
	mov	DWORD PTR tv2946[ebp+4], edx
	mov	eax, DWORD PTR tv2946[ebp]
	or	eax, DWORD PTR tv2946[ebp+4]
	je	SHORT $L83076
	jmp	SHORT $L83074
$L83076:
	mov	eax, DWORD PTR _mp$[ebp]
	movsx	ecx, WORD PTR [eax]
	and	ecx, 2
	jne	SHORT $L83077
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	fld	DWORD PTR [ecx+36]
	mov	edx, DWORD PTR _mp$[ebp]
	mov	eax, DWORD PTR [edx+68]
	fsub	DWORD PTR [eax+36]
	mov	ecx, DWORD PTR _mp$[ebp]
	mov	edx, DWORD PTR [ecx+72]
	fld	DWORD PTR [edx+40]
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	fsub	DWORD PTR [ecx+40]
	fmulp	ST(1), ST(0)
	mov	edx, DWORD PTR _mp$[ebp]
	mov	eax, DWORD PTR [edx+64]
	fld	DWORD PTR [eax+40]
	mov	ecx, DWORD PTR _mp$[ebp]
	mov	edx, DWORD PTR [ecx+68]
	fsub	DWORD PTR [edx+40]
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	fld	DWORD PTR [ecx+36]
	mov	edx, DWORD PTR _mp$[ebp]
	mov	eax, DWORD PTR [edx+68]
	fsub	DWORD PTR [eax+36]
	fmulp	ST(1), ST(0)
	fsubp	ST(1), ST(0)
	fcomp	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $L83077
	jmp	$L83074
$L83077:

; 2064 : 		INC_POLY_COUNT(WorldDrawnCount, 1);

	movsx	eax, WORD PTR ?WorldDrawnCount@@3FA	; WorldDrawnCount
	add	eax, 1
	mov	WORD PTR ?WorldDrawnCount@@3FA, ax	; WorldDrawnCount

; 2065 : 
; 2066 : // get vert ptr
; 2067 : 
; 2068 : 		if (mp->Type & POLY_SEMITRANS)

	mov	eax, DWORD PTR _mp$[ebp]
	movsx	ecx, WORD PTR [eax]
	and	ecx, 4
	je	$L83079

; 2069 : 		{
; 2070 : 			if (!SEMI_POLY_FREE()) continue;

	cmp	DWORD PTR ?SemiCount@@3JA, 800		; SemiCount, 00000320H
	jl	SHORT $L83080
	jmp	$L83074
$L83080:

; 2071 : 			SEMI_POLY_SETUP_RGB(vertrgb, WorldFog, 3, FALSE, (mp->Type & POLY_SEMITRANS_ONE) != 0);

	movsx	eax, WORD PTR _WorldFog
	mov	ecx, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	ecx, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[ecx+12], eax
	mov	eax, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	eax, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[eax+4], 3
	mov	eax, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	eax, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[eax+8], -1
	xor	eax, eax
	je	SHORT $L83081
	mov	eax, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	eax, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[eax], 8
	jmp	SHORT $L83082
$L83081:
	mov	eax, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	eax, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[eax], 12 ; 0000000cH
$L83082:
	mov	eax, DWORD PTR _mp$[ebp]
	movsx	ecx, WORD PTR [eax]
	and	ecx, 256				; 00000100H
	neg	ecx
	sbb	ecx, ecx
	neg	ecx
	mov	edx, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	edx, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[edx+16], ecx
	mov	eax, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	eax, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[eax+20], 0
	mov	eax, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	eax, 152				; 00000098H
	add	eax, OFFSET FLAT:?SemiPoly@@3PAUDRAW_SEMI_POLY@@A+24
	mov	DWORD PTR _vertrgb$[ebp], eax
	mov	ecx, DWORD PTR ?SemiCount@@3JA		; SemiCount
	add	ecx, 1
	mov	DWORD PTR ?SemiCount@@3JA, ecx		; SemiCount

; 2072 : 		}
; 2073 : 		else

	jmp	$L83083
$L83079:

; 2074 : 		{
; 2075 : 			bucketrgb = WorldBucketHeadRGB;

	mov	eax, DWORD PTR _WorldBucketHeadRGB
	mov	DWORD PTR _bucketrgb$[ebp], eax

; 2076 : 			count = (short)(bucketrgb->CurrentVerts - bucketrgb->Verts);

	mov	eax, DWORD PTR _bucketrgb$[ebp]
	add	eax, 808				; 00000328H
	mov	ecx, DWORD PTR _bucketrgb$[ebp]
	mov	edx, DWORD PTR [ecx+804]
	sub	edx, eax
	mov	eax, edx
	cdq
	mov	ecx, 24					; 00000018H
	idiv	ecx
	mov	WORD PTR _count$[ebp], ax

; 2077 : 
; 2078 : 			if (count > BUCKET_VERT_END)

	movsx	eax, WORD PTR _count$[ebp]
	cmp	eax, 196				; 000000c4H
	jle	$L83085

; 2079 : 			{
; 2080 : 				SET_TPAGE(-1);

	movsx	eax, WORD PTR ?RenderTP@@3FA		; RenderTP
	cmp	eax, -1
	je	SHORT $L83086
	mov	WORD PTR ?RenderTP@@3FA, -1		; RenderTP
	movsx	eax, WORD PTR ?RenderTP@@3FA		; RenderTP
	cmp	eax, -1
	jne	SHORT $L83087
	push	0
	push	0
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	edx
	call	DWORD PTR [ecx+152]
	mov	eax, DWORD PTR ?TextureStateChange@@3JA	; TextureStateChange
	add	eax, 1
	mov	DWORD PTR ?TextureStateChange@@3JA, eax	; TextureStateChange
	jmp	SHORT $L83086
$L83087:
	movsx	eax, WORD PTR ?RenderTP@@3FA		; RenderTP
	shl	eax, 6
	mov	ecx, DWORD PTR ?TexInfo@@3PAUTEXINFO@@A	; TexInfo
	mov	edx, DWORD PTR [ecx+eax+52]
	push	edx
	push	0
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	edx
	call	DWORD PTR [ecx+152]
	mov	eax, DWORD PTR ?TextureStateChange@@3JA	; TextureStateChange
	add	eax, 1
	mov	DWORD PTR ?TextureStateChange@@3JA, eax	; TextureStateChange
$L83086:

; 2081 : 				FlushOneBucketTEX0(bucketrgb, FALSE);

	push	0
	mov	eax, DWORD PTR _bucketrgb$[ebp]
	push	eax
	call	?FlushOneBucketTEX0@@YAXPAUBUCKET_TEX0@@J@Z ; FlushOneBucketTEX0
	add	esp, 8

; 2082 : 				count = 0;

	mov	WORD PTR _count$[ebp], 0
$L83085:

; 2083 : 			}
; 2084 : 
; 2085 : 			bucketrgb->CurrentIndex[0] = count;

	mov	eax, DWORD PTR _bucketrgb$[ebp]
	mov	ecx, DWORD PTR [eax+800]
	mov	dx, WORD PTR _count$[ebp]
	mov	WORD PTR [ecx], dx

; 2086 : 			bucketrgb->CurrentIndex[1] = count + 1;

	movsx	eax, WORD PTR _count$[ebp]
	add	eax, 1
	mov	ecx, DWORD PTR _bucketrgb$[ebp]
	mov	edx, DWORD PTR [ecx+800]
	mov	WORD PTR [edx+2], ax

; 2087 : 			bucketrgb->CurrentIndex[2] = count + 2;

	movsx	eax, WORD PTR _count$[ebp]
	add	eax, 2
	mov	ecx, DWORD PTR _bucketrgb$[ebp]
	mov	edx, DWORD PTR [ecx+800]
	mov	WORD PTR [edx+4], ax

; 2088 : 			bucketrgb->CurrentIndex += 3;

	mov	eax, DWORD PTR _bucketrgb$[ebp]
	mov	ecx, DWORD PTR [eax+800]
	add	ecx, 6
	mov	edx, DWORD PTR _bucketrgb$[ebp]
	mov	DWORD PTR [edx+800], ecx

; 2089 : 
; 2090 : 			vertrgb = bucketrgb->CurrentVerts;

	mov	eax, DWORD PTR _bucketrgb$[ebp]
	mov	ecx, DWORD PTR [eax+804]
	mov	DWORD PTR _vertrgb$[ebp], ecx

; 2091 : 			bucketrgb->CurrentVerts += 3;

	mov	eax, DWORD PTR _bucketrgb$[ebp]
	mov	ecx, DWORD PTR [eax+804]
	add	ecx, 72					; 00000048H
	mov	edx, DWORD PTR _bucketrgb$[ebp]
	mov	DWORD PTR [edx+804], ecx
$L83083:

; 2092 : 		}
; 2093 : 
; 2094 : // copy vert info
; 2095 : 
; 2096 : 		COPY_TRI_XYZRHW(vertrgb);

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	add	ecx, 36					; 00000024H
	mov	edx, DWORD PTR _vertrgb$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], ecx
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	add	ecx, 36					; 00000024H
	mov	edx, DWORD PTR _vertrgb$[ebp]
	add	edx, 24					; 00000018H
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], ecx
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	add	ecx, 36					; 00000024H
	mov	edx, DWORD PTR _vertrgb$[ebp]
	add	edx, 48					; 00000030H
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], ecx

; 2097 : 
; 2098 : 		if (lit)

	cmp	DWORD PTR _lit$[ebp], 0
	je	$L83095

; 2099 : 		{
; 2100 : 			COPY_WORLD_TRI_COLOR_LIT(vertrgb);

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	mov	edx, DWORD PTR _mp$[ebp]
	movzx	eax, BYTE PTR [edx+18]
	add	eax, DWORD PTR [ecx+68]
	mov	DWORD PTR __i$83096[ebp], eax
	cmp	DWORD PTR __i$83096[ebp], 255		; 000000ffH
	jle	SHORT $L83099
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+18], 255			; 000000ffH
	jmp	SHORT $L83101
$L83099:
	cmp	DWORD PTR __i$83096[ebp], 0
	jge	SHORT $L83102
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+18], 0
	jmp	SHORT $L83101
$L83102:
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	cl, BYTE PTR __i$83096[ebp]
	mov	BYTE PTR [eax+18], cl
$L83101:
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	mov	edx, DWORD PTR _mp$[ebp]
	movzx	eax, BYTE PTR [edx+17]
	add	eax, DWORD PTR [ecx+72]
	mov	DWORD PTR __i$83096[ebp], eax
	cmp	DWORD PTR __i$83096[ebp], 255		; 000000ffH
	jle	SHORT $L83109
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+17], 255			; 000000ffH
	jmp	SHORT $L83111
$L83109:
	cmp	DWORD PTR __i$83096[ebp], 0
	jge	SHORT $L83112
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+17], 0
	jmp	SHORT $L83111
$L83112:
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	cl, BYTE PTR __i$83096[ebp]
	mov	BYTE PTR [eax+17], cl
$L83111:
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	mov	edx, DWORD PTR _mp$[ebp]
	movzx	eax, BYTE PTR [edx+16]
	add	eax, DWORD PTR [ecx+76]
	mov	DWORD PTR __i$83096[ebp], eax
	cmp	DWORD PTR __i$83096[ebp], 255		; 000000ffH
	jle	SHORT $L83119
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+16], 255			; 000000ffH
	jmp	SHORT $L83121
$L83119:
	cmp	DWORD PTR __i$83096[ebp], 0
	jge	SHORT $L83122
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+16], 0
	jmp	SHORT $L83121
$L83122:
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	cl, BYTE PTR __i$83096[ebp]
	mov	BYTE PTR [eax+16], cl
$L83121:
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	ecx, DWORD PTR _mp$[ebp]
	mov	dl, BYTE PTR [ecx+19]
	mov	BYTE PTR [eax+19], dl
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	mov	edx, DWORD PTR _mp$[ebp]
	movzx	eax, BYTE PTR [edx+22]
	add	eax, DWORD PTR [ecx+68]
	mov	DWORD PTR __i$83129[ebp], eax
	cmp	DWORD PTR __i$83129[ebp], 255		; 000000ffH
	jle	SHORT $L83132
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+42], 255			; 000000ffH
	jmp	SHORT $L83134
$L83132:
	cmp	DWORD PTR __i$83129[ebp], 0
	jge	SHORT $L83135
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+42], 0
	jmp	SHORT $L83134
$L83135:
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	cl, BYTE PTR __i$83129[ebp]
	mov	BYTE PTR [eax+42], cl
$L83134:
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	mov	edx, DWORD PTR _mp$[ebp]
	movzx	eax, BYTE PTR [edx+21]
	add	eax, DWORD PTR [ecx+72]
	mov	DWORD PTR __i$83129[ebp], eax
	cmp	DWORD PTR __i$83129[ebp], 255		; 000000ffH
	jle	SHORT $L83142
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+41], 255			; 000000ffH
	jmp	SHORT $L83144
$L83142:
	cmp	DWORD PTR __i$83129[ebp], 0
	jge	SHORT $L83145
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+41], 0
	jmp	SHORT $L83144
$L83145:
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	cl, BYTE PTR __i$83129[ebp]
	mov	BYTE PTR [eax+41], cl
$L83144:
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	mov	edx, DWORD PTR _mp$[ebp]
	movzx	eax, BYTE PTR [edx+20]
	add	eax, DWORD PTR [ecx+76]
	mov	DWORD PTR __i$83129[ebp], eax
	cmp	DWORD PTR __i$83129[ebp], 255		; 000000ffH
	jle	SHORT $L83152
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+40], 255			; 000000ffH
	jmp	SHORT $L83154
$L83152:
	cmp	DWORD PTR __i$83129[ebp], 0
	jge	SHORT $L83155
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+40], 0
	jmp	SHORT $L83154
$L83155:
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	cl, BYTE PTR __i$83129[ebp]
	mov	BYTE PTR [eax+40], cl
$L83154:
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	ecx, DWORD PTR _mp$[ebp]
	mov	dl, BYTE PTR [ecx+23]
	mov	BYTE PTR [eax+43], dl
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	mov	edx, DWORD PTR _mp$[ebp]
	movzx	eax, BYTE PTR [edx+26]
	add	eax, DWORD PTR [ecx+68]
	mov	DWORD PTR __i$83162[ebp], eax
	cmp	DWORD PTR __i$83162[ebp], 255		; 000000ffH
	jle	SHORT $L83165
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+66], 255			; 000000ffH
	jmp	SHORT $L83167
$L83165:
	cmp	DWORD PTR __i$83162[ebp], 0
	jge	SHORT $L83168
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+66], 0
	jmp	SHORT $L83167
$L83168:
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	cl, BYTE PTR __i$83162[ebp]
	mov	BYTE PTR [eax+66], cl
$L83167:
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	mov	edx, DWORD PTR _mp$[ebp]
	movzx	eax, BYTE PTR [edx+25]
	add	eax, DWORD PTR [ecx+72]
	mov	DWORD PTR __i$83162[ebp], eax
	cmp	DWORD PTR __i$83162[ebp], 255		; 000000ffH
	jle	SHORT $L83175
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+65], 255			; 000000ffH
	jmp	SHORT $L83177
$L83175:
	cmp	DWORD PTR __i$83162[ebp], 0
	jge	SHORT $L83178
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+65], 0
	jmp	SHORT $L83177
$L83178:
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	cl, BYTE PTR __i$83162[ebp]
	mov	BYTE PTR [eax+65], cl
$L83177:
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	mov	edx, DWORD PTR _mp$[ebp]
	movzx	eax, BYTE PTR [edx+24]
	add	eax, DWORD PTR [ecx+76]
	mov	DWORD PTR __i$83162[ebp], eax
	cmp	DWORD PTR __i$83162[ebp], 255		; 000000ffH
	jle	SHORT $L83185
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+64], 255			; 000000ffH
	jmp	SHORT $L83187
$L83185:
	cmp	DWORD PTR __i$83162[ebp], 0
	jge	SHORT $L83188
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+64], 0
	jmp	SHORT $L83187
$L83188:
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	cl, BYTE PTR __i$83162[ebp]
	mov	BYTE PTR [eax+64], cl
$L83187:
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	ecx, DWORD PTR _mp$[ebp]
	mov	dl, BYTE PTR [ecx+27]
	mov	BYTE PTR [eax+67], dl

; 2101 : 		}
; 2102 : 		else

	jmp	SHORT $L83195
$L83095:

; 2103 : 		{
; 2104 : 			COPY_WORLD_TRI_COLOR(vertrgb);

	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	ecx, DWORD PTR _mp$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+16], edx
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	ecx, DWORD PTR _mp$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR [eax+40], edx
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	ecx, DWORD PTR _mp$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR [eax+64], edx
$L83195:

; 2105 : 		}
; 2106 : 
; 2107 : 		if (WorldFog)

	movsx	eax, WORD PTR _WorldFog
	test	eax, eax
	je	SHORT $L83196

; 2108 : 			COPY_TRI_SPECULAR(vertrgb);

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	mov	edx, DWORD PTR _vertrgb$[ebp]
	mov	eax, DWORD PTR [ecx+56]
	mov	DWORD PTR [edx+20], eax
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	mov	edx, DWORD PTR _vertrgb$[ebp]
	mov	eax, DWORD PTR [ecx+56]
	mov	DWORD PTR [edx+44], eax
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	mov	edx, DWORD PTR _vertrgb$[ebp]
	mov	eax, DWORD PTR [ecx+56]
	mov	DWORD PTR [edx+68], eax
$L83196:

; 2109 : 
; 2110 : // env?
; 2111 : 
; 2112 : 		if (mp->Type & WorldEnvMask)

	mov	eax, DWORD PTR _mp$[ebp]
	movsx	ecx, WORD PTR [eax]
	movsx	edx, WORD PTR _WorldEnvMask
	and	ecx, edx
	je	$L83197

; 2113 : 		{
; 2114 : 			INC_POLY_COUNT(WorldDrawnCount, 1);

	movsx	eax, WORD PTR ?WorldDrawnCount@@3FA	; WorldDrawnCount
	add	eax, 1
	mov	WORD PTR ?WorldDrawnCount@@3FA, ax	; WorldDrawnCount

; 2115 : 
; 2116 : // get env vert ptr
; 2117 : 
; 2118 : 			count = (short)(envbucket->CurrentVerts - envbucket->Verts);

	mov	eax, DWORD PTR _envbucket$[ebp]
	add	eax, 8008				; 00001f48H
	mov	ecx, DWORD PTR _envbucket$[ebp]
	mov	edx, DWORD PTR [ecx+8004]
	sub	edx, eax
	sar	edx, 5
	mov	WORD PTR _count$[ebp], dx

; 2119 : 
; 2120 : 			if (count > ENV_VERT_END)

	movsx	eax, WORD PTR _count$[ebp]
	cmp	eax, 1996				; 000007ccH
	jle	SHORT $L83199

; 2121 : 				continue;

	jmp	$L83074
$L83199:

; 2122 : 
; 2123 : 			envbucket->CurrentIndex[0] = count;

	mov	eax, DWORD PTR _envbucket$[ebp]
	mov	ecx, DWORD PTR [eax+8000]
	mov	dx, WORD PTR _count$[ebp]
	mov	WORD PTR [ecx], dx

; 2124 : 			envbucket->CurrentIndex[1] = count + 1;

	movsx	eax, WORD PTR _count$[ebp]
	add	eax, 1
	mov	ecx, DWORD PTR _envbucket$[ebp]
	mov	edx, DWORD PTR [ecx+8000]
	mov	WORD PTR [edx+2], ax

; 2125 : 			envbucket->CurrentIndex[2] = count + 2;

	movsx	eax, WORD PTR _count$[ebp]
	add	eax, 2
	mov	ecx, DWORD PTR _envbucket$[ebp]
	mov	edx, DWORD PTR [ecx+8000]
	mov	WORD PTR [edx+4], ax

; 2126 : 			envbucket->CurrentIndex += 3;

	mov	eax, DWORD PTR _envbucket$[ebp]
	mov	ecx, DWORD PTR [eax+8000]
	add	ecx, 6
	mov	edx, DWORD PTR _envbucket$[ebp]
	mov	DWORD PTR [edx+8000], ecx

; 2127 : 
; 2128 : 			vert = envbucket->CurrentVerts;

	mov	eax, DWORD PTR _envbucket$[ebp]
	mov	ecx, DWORD PTR [eax+8004]
	mov	DWORD PTR _vert$[ebp], ecx

; 2129 : 			envbucket->CurrentVerts += 3;

	mov	eax, DWORD PTR _envbucket$[ebp]
	mov	ecx, DWORD PTR [eax+8004]
	add	ecx, 96					; 00000060H
	mov	edx, DWORD PTR _envbucket$[ebp]
	mov	DWORD PTR [edx+8004], ecx

; 2130 : 
; 2131 : // copy env vert info
; 2132 : 
; 2133 : 			*(MEM32*)&vert[0] = *(MEM32*)&mp->v0->sx;

	mov	eax, DWORD PTR _mp$[ebp]
	mov	esi, DWORD PTR [eax+64]
	add	esi, 36					; 00000024H
	mov	ecx, 8
	mov	edi, DWORD PTR _vert$[ebp]
	rep movsd

; 2134 : 			*(MEM32*)&vert[1] = *(MEM32*)&mp->v1->sx;

	mov	eax, DWORD PTR _mp$[ebp]
	mov	esi, DWORD PTR [eax+68]
	add	esi, 36					; 00000024H
	mov	edi, DWORD PTR _vert$[ebp]
	add	edi, 32					; 00000020H
	mov	ecx, 8
	rep movsd

; 2135 : 			*(MEM32*)&vert[2] = *(MEM32*)&mp->v2->sx;

	mov	eax, DWORD PTR _mp$[ebp]
	mov	esi, DWORD PTR [eax+72]
	add	esi, 36					; 00000024H
	mov	edi, DWORD PTR _vert$[ebp]
	add	edi, 64					; 00000040H
	mov	ecx, 8
	rep movsd
$L83197:

; 2136 : 		}
; 2137 : 	}

	jmp	$L83074
$L82577:

; 2138 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?DrawCubePolys@@YAXPAUWORLD_MODEL@@J@Z ENDP		; DrawCubePolys
; Function compile flags: /Odt /ZI
_TEXT	ENDS
;	COMDAT ?DrawCubePolysMirror@@YAXPAUWORLD_MODEL@@J@Z
_TEXT	SEGMENT
tv2842 = -160						; size = 8
tv2586 = -160						; size = 8
tv2360 = -160						; size = 8
tv2080 = -160						; size = 8
__i$83772 = -88						; size = 4
__i$83739 = -84						; size = 4
__i$83706 = -80						; size = 4
__i$83646 = -76						; size = 4
__i$83613 = -72						; size = 4
__i$83580 = -68						; size = 4
__i$83547 = -64						; size = 4
__i$83485 = -60						; size = 4
__i$83452 = -56						; size = 4
__i$83419 = -52						; size = 4
__i$83353 = -48						; size = 4
__i$83320 = -44						; size = 4
__i$83287 = -40						; size = 4
__i$83254 = -36						; size = 4
_bucketrgb$ = -32					; size = 4
_vertrgb$ = -28						; size = 4
_bucket$ = -24						; size = 4
_vert$ = -20						; size = 4
_mp$ = -16						; size = 4
_clip$ = -12						; size = 4
_i$ = -8						; size = 4
_count$ = -4						; size = 2
_m$ = 8							; size = 4
_lit$ = 12						; size = 4
?DrawCubePolysMirror@@YAXPAUWORLD_MODEL@@J@Z PROC NEAR	; DrawCubePolysMirror, COMDAT

; 2145 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 160				; 000000a0H
	push	ebx
	push	esi
	push	edi

; 2146 : 	short count;
; 2147 : 	long i, clip;
; 2148 : 	WORLD_MIRROR_POLY *mp;
; 2149 : 	VERTEX_TEX1 *vert;
; 2150 : 	BUCKET_TEX1 *bucket;
; 2151 : 	VERTEX_TEX0 *vertrgb;
; 2152 : 	BUCKET_TEX0 *bucketrgb;
; 2153 : 
; 2154 : // draw textured quads
; 2155 : 
; 2156 : 	mp = m->MirrorPolyPtr;

	mov	eax, DWORD PTR _m$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR _mp$[ebp], ecx

; 2157 : 
; 2158 : 	for (i = m->MirrorQuadNumTex ; i ; i--, mp++)

	mov	eax, DWORD PTR _m$[ebp]
	movsx	ecx, WORD PTR [eax+20]
	mov	DWORD PTR _i$[ebp], ecx
	jmp	SHORT $L83218
$L83219:
	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	mov	ecx, DWORD PTR _mp$[ebp]
	add	ecx, 80					; 00000050H
	mov	DWORD PTR _mp$[ebp], ecx
$L83218:
	cmp	DWORD PTR _i$[ebp], 0
	je	$L83220

; 2159 : 	{
; 2160 : 
; 2161 : // reject?
; 2162 : 
; 2163 : 		REJECT_WORLD_POLY_MIRROR();

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	and	ecx, DWORD PTR ?CamVisiMask@@3_KA
	mov	edx, DWORD PTR [eax+12]
	and	edx, DWORD PTR ?CamVisiMask@@3_KA+4
	mov	DWORD PTR tv2080[ebp], ecx
	mov	DWORD PTR tv2080[ebp+4], edx
	mov	eax, DWORD PTR tv2080[ebp]
	or	eax, DWORD PTR tv2080[ebp+4]
	je	SHORT $L83221
	jmp	SHORT $L83219
$L83221:
	mov	eax, DWORD PTR _mp$[ebp]
	movsx	ecx, WORD PTR [eax]
	and	ecx, 2
	jne	SHORT $L83222
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	fld	DWORD PTR [ecx+24]
	mov	edx, DWORD PTR _mp$[ebp]
	mov	eax, DWORD PTR [edx+68]
	fsub	DWORD PTR [eax+24]
	mov	ecx, DWORD PTR _mp$[ebp]
	mov	edx, DWORD PTR [ecx+72]
	fld	DWORD PTR [edx+28]
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	fsub	DWORD PTR [ecx+28]
	fmulp	ST(1), ST(0)
	mov	edx, DWORD PTR _mp$[ebp]
	mov	eax, DWORD PTR [edx+64]
	fld	DWORD PTR [eax+28]
	mov	ecx, DWORD PTR _mp$[ebp]
	mov	edx, DWORD PTR [ecx+68]
	fsub	DWORD PTR [edx+28]
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	fld	DWORD PTR [ecx+24]
	mov	edx, DWORD PTR _mp$[ebp]
	mov	eax, DWORD PTR [edx+68]
	fsub	DWORD PTR [eax+24]
	fmulp	ST(1), ST(0)
	fsubp	ST(1), ST(0)
	fcomp	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L83222
	jmp	$L83219
$L83222:

; 2164 : 		CLIP_QUAD();

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	movzx	edx, BYTE PTR [ecx+48]
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	movzx	eax, BYTE PTR [ecx+48]
	and	edx, eax
	mov	ecx, DWORD PTR _mp$[ebp]
	mov	eax, DWORD PTR [ecx+72]
	movzx	ecx, BYTE PTR [eax+48]
	and	edx, ecx
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	movzx	eax, BYTE PTR [ecx+48]
	and	edx, eax
	je	SHORT $L83224
	jmp	$L83219
$L83224:
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	movzx	edx, BYTE PTR [ecx+48]
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	movzx	eax, BYTE PTR [ecx+48]
	or	edx, eax
	mov	ecx, DWORD PTR _mp$[ebp]
	mov	eax, DWORD PTR [ecx+72]
	movzx	ecx, BYTE PTR [eax+48]
	or	edx, ecx
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	movzx	eax, BYTE PTR [ecx+48]
	or	edx, eax
	mov	DWORD PTR _clip$[ebp], edx

; 2165 : 		INC_POLY_COUNT(WorldDrawnCount, 2);

	movsx	eax, WORD PTR ?WorldDrawnCount@@3FA	; WorldDrawnCount
	add	eax, 2
	mov	WORD PTR ?WorldDrawnCount@@3FA, ax	; WorldDrawnCount

; 2166 : 
; 2167 : // get vert ptr
; 2168 : 
; 2169 : 		if (mp->Type & POLY_SEMITRANS)

	mov	eax, DWORD PTR _mp$[ebp]
	movsx	ecx, WORD PTR [eax]
	and	ecx, 4
	je	$L83225

; 2170 : 		{
; 2171 : 			if (!SEMI_POLY_FREE()) continue;

	cmp	DWORD PTR ?SemiCount@@3JA, 800		; SemiCount, 00000320H
	jl	SHORT $L83226
	jmp	$L83219
$L83226:

; 2172 : 			SEMI_POLY_SETUP(vert, FALSE, 4, mp->Tpage, clip, (mp->Type & POLY_SEMITRANS_ONE) != 0);

	mov	eax, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	eax, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[eax+12], 0
	mov	eax, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	eax, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[eax+4], 4
	mov	eax, DWORD PTR _mp$[ebp]
	movsx	ecx, WORD PTR [eax+2]
	mov	edx, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	edx, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[edx+8], ecx
	cmp	DWORD PTR _clip$[ebp], 0
	je	SHORT $L83227
	mov	eax, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	eax, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[eax], 8
	jmp	SHORT $L83228
$L83227:
	mov	eax, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	eax, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[eax], 12 ; 0000000cH
$L83228:
	mov	eax, DWORD PTR _mp$[ebp]
	movsx	ecx, WORD PTR [eax]
	and	ecx, 256				; 00000100H
	neg	ecx
	sbb	ecx, ecx
	neg	ecx
	mov	edx, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	edx, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[edx+16], ecx
	mov	eax, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	eax, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[eax+20], 0
	mov	eax, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	eax, 152				; 00000098H
	add	eax, OFFSET FLAT:?SemiPoly@@3PAUDRAW_SEMI_POLY@@A+24
	mov	DWORD PTR _vert$[ebp], eax
	mov	ecx, DWORD PTR ?SemiCount@@3JA		; SemiCount
	add	ecx, 1
	mov	DWORD PTR ?SemiCount@@3JA, ecx		; SemiCount

; 2173 : 		}
; 2174 : 		else

	jmp	$L83229
$L83225:

; 2175 : 		{
; 2176 : 			if (clip) bucket = &BucketClipFog[mp->Tpage];

	cmp	DWORD PTR _clip$[ebp], 0
	je	SHORT $L83230
	mov	eax, DWORD PTR _mp$[ebp]
	movsx	ecx, WORD PTR [eax+2]
	imul	ecx, 7208				; 00001c28H
	add	ecx, OFFSET FLAT:?BucketClipFog@@3PAUBUCKET_TEX1@@A ; BucketClipFog
	mov	DWORD PTR _bucket$[ebp], ecx

; 2177 : 			else bucket = &BucketFog[mp->Tpage];

	jmp	SHORT $L83231
$L83230:
	mov	eax, DWORD PTR _mp$[ebp]
	movsx	ecx, WORD PTR [eax+2]
	imul	ecx, 7208				; 00001c28H
	add	ecx, OFFSET FLAT:?BucketFog@@3PAUBUCKET_TEX1@@A ; BucketFog
	mov	DWORD PTR _bucket$[ebp], ecx
$L83231:

; 2178 : 			count = (short)(bucket->CurrentVerts - bucket->Verts);

	mov	eax, DWORD PTR _bucket$[ebp]
	add	eax, 808				; 00000328H
	mov	ecx, DWORD PTR _bucket$[ebp]
	mov	edx, DWORD PTR [ecx+804]
	sub	edx, eax
	sar	edx, 5
	mov	WORD PTR _count$[ebp], dx

; 2179 : 
; 2180 : 			if (count > BUCKET_VERT_END)

	movsx	eax, WORD PTR _count$[ebp]
	cmp	eax, 196				; 000000c4H
	jle	$L83233

; 2181 : 			{
; 2182 : 				SET_TPAGE(mp->Tpage);

	movsx	eax, WORD PTR ?RenderTP@@3FA		; RenderTP
	mov	ecx, DWORD PTR _mp$[ebp]
	movsx	edx, WORD PTR [ecx+2]
	cmp	eax, edx
	je	SHORT $L83234
	mov	eax, DWORD PTR _mp$[ebp]
	mov	cx, WORD PTR [eax+2]
	mov	WORD PTR ?RenderTP@@3FA, cx		; RenderTP
	movsx	edx, WORD PTR ?RenderTP@@3FA		; RenderTP
	cmp	edx, -1
	jne	SHORT $L83235
	push	0
	push	0
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	edx
	call	DWORD PTR [ecx+152]
	mov	eax, DWORD PTR ?TextureStateChange@@3JA	; TextureStateChange
	add	eax, 1
	mov	DWORD PTR ?TextureStateChange@@3JA, eax	; TextureStateChange
	jmp	SHORT $L83234
$L83235:
	movsx	eax, WORD PTR ?RenderTP@@3FA		; RenderTP
	shl	eax, 6
	mov	ecx, DWORD PTR ?TexInfo@@3PAUTEXINFO@@A	; TexInfo
	mov	edx, DWORD PTR [ecx+eax+52]
	push	edx
	push	0
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	edx
	call	DWORD PTR [ecx+152]
	mov	eax, DWORD PTR ?TextureStateChange@@3JA	; TextureStateChange
	add	eax, 1
	mov	DWORD PTR ?TextureStateChange@@3JA, eax	; TextureStateChange
$L83234:

; 2183 : 				FlushOneBucketTEX1(bucket, clip);

	mov	eax, DWORD PTR _clip$[ebp]
	push	eax
	mov	ecx, DWORD PTR _bucket$[ebp]
	push	ecx
	call	?FlushOneBucketTEX1@@YAXPAUBUCKET_TEX1@@J@Z ; FlushOneBucketTEX1
	add	esp, 8

; 2184 : 				count = 0;

	mov	WORD PTR _count$[ebp], 0
$L83233:

; 2185 : 			}
; 2186 : 
; 2187 : 			bucket->CurrentIndex[0] = count;

	mov	eax, DWORD PTR _bucket$[ebp]
	mov	ecx, DWORD PTR [eax+800]
	mov	dx, WORD PTR _count$[ebp]
	mov	WORD PTR [ecx], dx

; 2188 : 			bucket->CurrentIndex[1] = count + 1;

	movsx	eax, WORD PTR _count$[ebp]
	add	eax, 1
	mov	ecx, DWORD PTR _bucket$[ebp]
	mov	edx, DWORD PTR [ecx+800]
	mov	WORD PTR [edx+2], ax

; 2189 : 			bucket->CurrentIndex[2] = count + 2;

	movsx	eax, WORD PTR _count$[ebp]
	add	eax, 2
	mov	ecx, DWORD PTR _bucket$[ebp]
	mov	edx, DWORD PTR [ecx+800]
	mov	WORD PTR [edx+4], ax

; 2190 : 			bucket->CurrentIndex[3] = count;

	mov	eax, DWORD PTR _bucket$[ebp]
	mov	ecx, DWORD PTR [eax+800]
	mov	dx, WORD PTR _count$[ebp]
	mov	WORD PTR [ecx+6], dx

; 2191 : 			bucket->CurrentIndex[4] = count + 2;

	movsx	eax, WORD PTR _count$[ebp]
	add	eax, 2
	mov	ecx, DWORD PTR _bucket$[ebp]
	mov	edx, DWORD PTR [ecx+800]
	mov	WORD PTR [edx+8], ax

; 2192 : 			bucket->CurrentIndex[5] = count + 3;

	movsx	eax, WORD PTR _count$[ebp]
	add	eax, 3
	mov	ecx, DWORD PTR _bucket$[ebp]
	mov	edx, DWORD PTR [ecx+800]
	mov	WORD PTR [edx+10], ax

; 2193 : 			bucket->CurrentIndex += 6;

	mov	eax, DWORD PTR _bucket$[ebp]
	mov	ecx, DWORD PTR [eax+800]
	add	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR _bucket$[ebp]
	mov	DWORD PTR [edx+800], ecx

; 2194 : 
; 2195 : 			vert = bucket->CurrentVerts;

	mov	eax, DWORD PTR _bucket$[ebp]
	mov	ecx, DWORD PTR [eax+804]
	mov	DWORD PTR _vert$[ebp], ecx

; 2196 : 			bucket->CurrentVerts += 4;

	mov	eax, DWORD PTR _bucket$[ebp]
	mov	ecx, DWORD PTR [eax+804]
	add	ecx, 128				; 00000080H
	mov	edx, DWORD PTR _bucket$[ebp]
	mov	DWORD PTR [edx+804], ecx
$L83229:

; 2197 : 		}
; 2198 : 
; 2199 : // copy vert info
; 2200 : 
; 2201 : 		COPY_QUAD_XYZRHW(vert);

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	add	ecx, 24					; 00000018H
	mov	edx, DWORD PTR _vert$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], ecx
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	add	ecx, 24					; 00000018H
	mov	edx, DWORD PTR _vert$[ebp]
	add	edx, 32					; 00000020H
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], ecx
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	add	ecx, 24					; 00000018H
	mov	edx, DWORD PTR _vert$[ebp]
	add	edx, 64					; 00000040H
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], ecx
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	add	ecx, 24					; 00000018H
	mov	edx, DWORD PTR _vert$[ebp]
	add	edx, 96					; 00000060H
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], ecx

; 2202 : 		COPY_QUAD_UV(vert);

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	edx, DWORD PTR [eax+36]
	mov	eax, DWORD PTR _vert$[ebp]
	mov	DWORD PTR [eax+24], ecx
	mov	DWORD PTR [eax+28], edx
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	edx, DWORD PTR [eax+44]
	mov	eax, DWORD PTR _vert$[ebp]
	mov	DWORD PTR [eax+56], ecx
	mov	DWORD PTR [eax+60], edx
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	mov	edx, DWORD PTR [eax+52]
	mov	eax, DWORD PTR _vert$[ebp]
	mov	DWORD PTR [eax+88], ecx
	mov	DWORD PTR [eax+92], edx
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	edx, DWORD PTR [eax+60]
	mov	eax, DWORD PTR _vert$[ebp]
	mov	DWORD PTR [eax+120], ecx
	mov	DWORD PTR [eax+124], edx

; 2203 : 
; 2204 : 		if (lit)

	cmp	DWORD PTR _lit$[ebp], 0
	je	$L83253

; 2205 : 		{
; 2206 : 			COPY_WORLD_QUAD_COLOR_LIT_MIRROR(vert);

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	mov	edx, DWORD PTR [ecx+52]
	mov	eax, DWORD PTR _mp$[ebp]
	movzx	ecx, BYTE PTR [eax+18]
	add	ecx, DWORD PTR [edx+68]
	mov	DWORD PTR __i$83254[ebp], ecx
	cmp	DWORD PTR __i$83254[ebp], 255		; 000000ffH
	jle	SHORT $L83257
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+18], 255			; 000000ffH
	jmp	SHORT $L83259
$L83257:
	cmp	DWORD PTR __i$83254[ebp], 0
	jge	SHORT $L83260
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+18], 0
	jmp	SHORT $L83259
$L83260:
	mov	eax, DWORD PTR _vert$[ebp]
	mov	cl, BYTE PTR __i$83254[ebp]
	mov	BYTE PTR [eax+18], cl
$L83259:
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	mov	edx, DWORD PTR [ecx+52]
	mov	eax, DWORD PTR _mp$[ebp]
	movzx	ecx, BYTE PTR [eax+17]
	add	ecx, DWORD PTR [edx+72]
	mov	DWORD PTR __i$83254[ebp], ecx
	cmp	DWORD PTR __i$83254[ebp], 255		; 000000ffH
	jle	SHORT $L83267
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+17], 255			; 000000ffH
	jmp	SHORT $L83269
$L83267:
	cmp	DWORD PTR __i$83254[ebp], 0
	jge	SHORT $L83270
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+17], 0
	jmp	SHORT $L83269
$L83270:
	mov	eax, DWORD PTR _vert$[ebp]
	mov	cl, BYTE PTR __i$83254[ebp]
	mov	BYTE PTR [eax+17], cl
$L83269:
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	mov	edx, DWORD PTR [ecx+52]
	mov	eax, DWORD PTR _mp$[ebp]
	movzx	ecx, BYTE PTR [eax+16]
	add	ecx, DWORD PTR [edx+76]
	mov	DWORD PTR __i$83254[ebp], ecx
	cmp	DWORD PTR __i$83254[ebp], 255		; 000000ffH
	jle	SHORT $L83277
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+16], 255			; 000000ffH
	jmp	SHORT $L83279
$L83277:
	cmp	DWORD PTR __i$83254[ebp], 0
	jge	SHORT $L83280
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+16], 0
	jmp	SHORT $L83279
$L83280:
	mov	eax, DWORD PTR _vert$[ebp]
	mov	cl, BYTE PTR __i$83254[ebp]
	mov	BYTE PTR [eax+16], cl
$L83279:
	mov	eax, DWORD PTR _vert$[ebp]
	mov	ecx, DWORD PTR _mp$[ebp]
	mov	dl, BYTE PTR [ecx+19]
	mov	BYTE PTR [eax+19], dl
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	mov	edx, DWORD PTR [ecx+52]
	mov	eax, DWORD PTR _mp$[ebp]
	movzx	ecx, BYTE PTR [eax+22]
	add	ecx, DWORD PTR [edx+68]
	mov	DWORD PTR __i$83287[ebp], ecx
	cmp	DWORD PTR __i$83287[ebp], 255		; 000000ffH
	jle	SHORT $L83290
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+50], 255			; 000000ffH
	jmp	SHORT $L83292
$L83290:
	cmp	DWORD PTR __i$83287[ebp], 0
	jge	SHORT $L83293
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+50], 0
	jmp	SHORT $L83292
$L83293:
	mov	eax, DWORD PTR _vert$[ebp]
	mov	cl, BYTE PTR __i$83287[ebp]
	mov	BYTE PTR [eax+50], cl
$L83292:
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	mov	edx, DWORD PTR [ecx+52]
	mov	eax, DWORD PTR _mp$[ebp]
	movzx	ecx, BYTE PTR [eax+21]
	add	ecx, DWORD PTR [edx+72]
	mov	DWORD PTR __i$83287[ebp], ecx
	cmp	DWORD PTR __i$83287[ebp], 255		; 000000ffH
	jle	SHORT $L83300
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+49], 255			; 000000ffH
	jmp	SHORT $L83302
$L83300:
	cmp	DWORD PTR __i$83287[ebp], 0
	jge	SHORT $L83303
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+49], 0
	jmp	SHORT $L83302
$L83303:
	mov	eax, DWORD PTR _vert$[ebp]
	mov	cl, BYTE PTR __i$83287[ebp]
	mov	BYTE PTR [eax+49], cl
$L83302:
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	mov	edx, DWORD PTR [ecx+52]
	mov	eax, DWORD PTR _mp$[ebp]
	movzx	ecx, BYTE PTR [eax+20]
	add	ecx, DWORD PTR [edx+76]
	mov	DWORD PTR __i$83287[ebp], ecx
	cmp	DWORD PTR __i$83287[ebp], 255		; 000000ffH
	jle	SHORT $L83310
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+48], 255			; 000000ffH
	jmp	SHORT $L83312
$L83310:
	cmp	DWORD PTR __i$83287[ebp], 0
	jge	SHORT $L83313
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+48], 0
	jmp	SHORT $L83312
$L83313:
	mov	eax, DWORD PTR _vert$[ebp]
	mov	cl, BYTE PTR __i$83287[ebp]
	mov	BYTE PTR [eax+48], cl
$L83312:
	mov	eax, DWORD PTR _vert$[ebp]
	mov	ecx, DWORD PTR _mp$[ebp]
	mov	dl, BYTE PTR [ecx+23]
	mov	BYTE PTR [eax+51], dl
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	mov	edx, DWORD PTR [ecx+52]
	mov	eax, DWORD PTR _mp$[ebp]
	movzx	ecx, BYTE PTR [eax+26]
	add	ecx, DWORD PTR [edx+68]
	mov	DWORD PTR __i$83320[ebp], ecx
	cmp	DWORD PTR __i$83320[ebp], 255		; 000000ffH
	jle	SHORT $L83323
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+82], 255			; 000000ffH
	jmp	SHORT $L83325
$L83323:
	cmp	DWORD PTR __i$83320[ebp], 0
	jge	SHORT $L83326
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+82], 0
	jmp	SHORT $L83325
$L83326:
	mov	eax, DWORD PTR _vert$[ebp]
	mov	cl, BYTE PTR __i$83320[ebp]
	mov	BYTE PTR [eax+82], cl
$L83325:
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	mov	edx, DWORD PTR [ecx+52]
	mov	eax, DWORD PTR _mp$[ebp]
	movzx	ecx, BYTE PTR [eax+25]
	add	ecx, DWORD PTR [edx+72]
	mov	DWORD PTR __i$83320[ebp], ecx
	cmp	DWORD PTR __i$83320[ebp], 255		; 000000ffH
	jle	SHORT $L83333
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+81], 255			; 000000ffH
	jmp	SHORT $L83335
$L83333:
	cmp	DWORD PTR __i$83320[ebp], 0
	jge	SHORT $L83336
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+81], 0
	jmp	SHORT $L83335
$L83336:
	mov	eax, DWORD PTR _vert$[ebp]
	mov	cl, BYTE PTR __i$83320[ebp]
	mov	BYTE PTR [eax+81], cl
$L83335:
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	mov	edx, DWORD PTR [ecx+52]
	mov	eax, DWORD PTR _mp$[ebp]
	movzx	ecx, BYTE PTR [eax+24]
	add	ecx, DWORD PTR [edx+76]
	mov	DWORD PTR __i$83320[ebp], ecx
	cmp	DWORD PTR __i$83320[ebp], 255		; 000000ffH
	jle	SHORT $L83343
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+80], 255			; 000000ffH
	jmp	SHORT $L83345
$L83343:
	cmp	DWORD PTR __i$83320[ebp], 0
	jge	SHORT $L83346
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+80], 0
	jmp	SHORT $L83345
$L83346:
	mov	eax, DWORD PTR _vert$[ebp]
	mov	cl, BYTE PTR __i$83320[ebp]
	mov	BYTE PTR [eax+80], cl
$L83345:
	mov	eax, DWORD PTR _vert$[ebp]
	mov	ecx, DWORD PTR _mp$[ebp]
	mov	dl, BYTE PTR [ecx+27]
	mov	BYTE PTR [eax+83], dl
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	mov	edx, DWORD PTR [ecx+52]
	mov	eax, DWORD PTR _mp$[ebp]
	movzx	ecx, BYTE PTR [eax+30]
	add	ecx, DWORD PTR [edx+68]
	mov	DWORD PTR __i$83353[ebp], ecx
	cmp	DWORD PTR __i$83353[ebp], 255		; 000000ffH
	jle	SHORT $L83356
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+114], 255			; 000000ffH
	jmp	SHORT $L83358
$L83356:
	cmp	DWORD PTR __i$83353[ebp], 0
	jge	SHORT $L83359
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+114], 0
	jmp	SHORT $L83358
$L83359:
	mov	eax, DWORD PTR _vert$[ebp]
	mov	cl, BYTE PTR __i$83353[ebp]
	mov	BYTE PTR [eax+114], cl
$L83358:
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	mov	edx, DWORD PTR [ecx+52]
	mov	eax, DWORD PTR _mp$[ebp]
	movzx	ecx, BYTE PTR [eax+29]
	add	ecx, DWORD PTR [edx+72]
	mov	DWORD PTR __i$83353[ebp], ecx
	cmp	DWORD PTR __i$83353[ebp], 255		; 000000ffH
	jle	SHORT $L83366
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+113], 255			; 000000ffH
	jmp	SHORT $L83368
$L83366:
	cmp	DWORD PTR __i$83353[ebp], 0
	jge	SHORT $L83369
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+113], 0
	jmp	SHORT $L83368
$L83369:
	mov	eax, DWORD PTR _vert$[ebp]
	mov	cl, BYTE PTR __i$83353[ebp]
	mov	BYTE PTR [eax+113], cl
$L83368:
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	mov	edx, DWORD PTR [ecx+52]
	mov	eax, DWORD PTR _mp$[ebp]
	movzx	ecx, BYTE PTR [eax+28]
	add	ecx, DWORD PTR [edx+76]
	mov	DWORD PTR __i$83353[ebp], ecx
	cmp	DWORD PTR __i$83353[ebp], 255		; 000000ffH
	jle	SHORT $L83376
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+112], 255			; 000000ffH
	jmp	SHORT $L83378
$L83376:
	cmp	DWORD PTR __i$83353[ebp], 0
	jge	SHORT $L83379
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+112], 0
	jmp	SHORT $L83378
$L83379:
	mov	eax, DWORD PTR _vert$[ebp]
	mov	cl, BYTE PTR __i$83353[ebp]
	mov	BYTE PTR [eax+112], cl
$L83378:
	mov	eax, DWORD PTR _vert$[ebp]
	mov	ecx, DWORD PTR _mp$[ebp]
	mov	dl, BYTE PTR [ecx+31]
	mov	BYTE PTR [eax+115], dl

; 2207 : 		}
; 2208 : 		else

	jmp	SHORT $L83386
$L83253:

; 2209 : 		{
; 2210 : 			COPY_WORLD_QUAD_COLOR(vert);

	mov	eax, DWORD PTR _vert$[ebp]
	mov	ecx, DWORD PTR _mp$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+16], edx
	mov	eax, DWORD PTR _vert$[ebp]
	mov	ecx, DWORD PTR _mp$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR [eax+48], edx
	mov	eax, DWORD PTR _vert$[ebp]
	mov	ecx, DWORD PTR _mp$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR [eax+80], edx
	mov	eax, DWORD PTR _vert$[ebp]
	mov	ecx, DWORD PTR _mp$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR [eax+112], edx
$L83386:

; 2211 : 		}
; 2212 : 
; 2213 : 		COPY_QUAD_SPECULAR(vert);

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	mov	edx, DWORD PTR _vert$[ebp]
	mov	eax, DWORD PTR [ecx+44]
	mov	DWORD PTR [edx+20], eax
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	mov	edx, DWORD PTR _vert$[ebp]
	mov	eax, DWORD PTR [ecx+44]
	mov	DWORD PTR [edx+52], eax
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	mov	edx, DWORD PTR _vert$[ebp]
	mov	eax, DWORD PTR [ecx+44]
	mov	DWORD PTR [edx+84], eax
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	mov	edx, DWORD PTR _vert$[ebp]
	mov	eax, DWORD PTR [ecx+44]
	mov	DWORD PTR [edx+116], eax

; 2214 : 	}

	jmp	$L83219
$L83220:

; 2215 : 
; 2216 : // draw textured tri's
; 2217 : 
; 2218 : 	for (i = m->MirrorTriNumTex ; i ; i--, mp++)

	mov	eax, DWORD PTR _m$[ebp]
	movsx	ecx, WORD PTR [eax+22]
	mov	DWORD PTR _i$[ebp], ecx
	jmp	SHORT $L83387
$L83388:
	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	mov	ecx, DWORD PTR _mp$[ebp]
	add	ecx, 80					; 00000050H
	mov	DWORD PTR _mp$[ebp], ecx
$L83387:
	cmp	DWORD PTR _i$[ebp], 0
	je	$L83389

; 2219 : 	{
; 2220 : 
; 2221 : // reject?
; 2222 : 
; 2223 : 		REJECT_WORLD_POLY_MIRROR();

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	and	ecx, DWORD PTR ?CamVisiMask@@3_KA
	mov	edx, DWORD PTR [eax+12]
	and	edx, DWORD PTR ?CamVisiMask@@3_KA+4
	mov	DWORD PTR tv2360[ebp], ecx
	mov	DWORD PTR tv2360[ebp+4], edx
	mov	eax, DWORD PTR tv2360[ebp]
	or	eax, DWORD PTR tv2360[ebp+4]
	je	SHORT $L83390
	jmp	SHORT $L83388
$L83390:
	mov	eax, DWORD PTR _mp$[ebp]
	movsx	ecx, WORD PTR [eax]
	and	ecx, 2
	jne	SHORT $L83391
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	fld	DWORD PTR [ecx+24]
	mov	edx, DWORD PTR _mp$[ebp]
	mov	eax, DWORD PTR [edx+68]
	fsub	DWORD PTR [eax+24]
	mov	ecx, DWORD PTR _mp$[ebp]
	mov	edx, DWORD PTR [ecx+72]
	fld	DWORD PTR [edx+28]
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	fsub	DWORD PTR [ecx+28]
	fmulp	ST(1), ST(0)
	mov	edx, DWORD PTR _mp$[ebp]
	mov	eax, DWORD PTR [edx+64]
	fld	DWORD PTR [eax+28]
	mov	ecx, DWORD PTR _mp$[ebp]
	mov	edx, DWORD PTR [ecx+68]
	fsub	DWORD PTR [edx+28]
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	fld	DWORD PTR [ecx+24]
	mov	edx, DWORD PTR _mp$[ebp]
	mov	eax, DWORD PTR [edx+68]
	fsub	DWORD PTR [eax+24]
	fmulp	ST(1), ST(0)
	fsubp	ST(1), ST(0)
	fcomp	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L83391
	jmp	$L83388
$L83391:

; 2224 : 		CLIP_TRI();

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	movzx	edx, BYTE PTR [ecx+48]
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	movzx	eax, BYTE PTR [ecx+48]
	and	edx, eax
	mov	ecx, DWORD PTR _mp$[ebp]
	mov	eax, DWORD PTR [ecx+72]
	movzx	ecx, BYTE PTR [eax+48]
	and	edx, ecx
	je	SHORT $L83393
	jmp	$L83388
$L83393:
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	movzx	edx, BYTE PTR [ecx+48]
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	movzx	eax, BYTE PTR [ecx+48]
	or	edx, eax
	mov	ecx, DWORD PTR _mp$[ebp]
	mov	eax, DWORD PTR [ecx+72]
	movzx	ecx, BYTE PTR [eax+48]
	or	edx, ecx
	mov	DWORD PTR _clip$[ebp], edx

; 2225 : 		INC_POLY_COUNT(WorldDrawnCount, 1);

	movsx	eax, WORD PTR ?WorldDrawnCount@@3FA	; WorldDrawnCount
	add	eax, 1
	mov	WORD PTR ?WorldDrawnCount@@3FA, ax	; WorldDrawnCount

; 2226 : 
; 2227 : // get vert ptr
; 2228 : 
; 2229 : 		if (mp->Type & POLY_SEMITRANS)

	mov	eax, DWORD PTR _mp$[ebp]
	movsx	ecx, WORD PTR [eax]
	and	ecx, 4
	je	$L83394

; 2230 : 		{
; 2231 : 			if (!SEMI_POLY_FREE()) continue;

	cmp	DWORD PTR ?SemiCount@@3JA, 800		; SemiCount, 00000320H
	jl	SHORT $L83395
	jmp	$L83388
$L83395:

; 2232 : 			SEMI_POLY_SETUP(vert, FALSE, 3, mp->Tpage, clip, (mp->Type & POLY_SEMITRANS_ONE) != 0);

	mov	eax, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	eax, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[eax+12], 0
	mov	eax, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	eax, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[eax+4], 3
	mov	eax, DWORD PTR _mp$[ebp]
	movsx	ecx, WORD PTR [eax+2]
	mov	edx, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	edx, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[edx+8], ecx
	cmp	DWORD PTR _clip$[ebp], 0
	je	SHORT $L83396
	mov	eax, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	eax, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[eax], 8
	jmp	SHORT $L83397
$L83396:
	mov	eax, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	eax, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[eax], 12 ; 0000000cH
$L83397:
	mov	eax, DWORD PTR _mp$[ebp]
	movsx	ecx, WORD PTR [eax]
	and	ecx, 256				; 00000100H
	neg	ecx
	sbb	ecx, ecx
	neg	ecx
	mov	edx, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	edx, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[edx+16], ecx
	mov	eax, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	eax, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[eax+20], 0
	mov	eax, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	eax, 152				; 00000098H
	add	eax, OFFSET FLAT:?SemiPoly@@3PAUDRAW_SEMI_POLY@@A+24
	mov	DWORD PTR _vert$[ebp], eax
	mov	ecx, DWORD PTR ?SemiCount@@3JA		; SemiCount
	add	ecx, 1
	mov	DWORD PTR ?SemiCount@@3JA, ecx		; SemiCount

; 2233 : 		}
; 2234 : 		else

	jmp	$L83398
$L83394:

; 2235 : 		{
; 2236 : 			if (clip) bucket = &BucketClipFog[mp->Tpage];

	cmp	DWORD PTR _clip$[ebp], 0
	je	SHORT $L83399
	mov	eax, DWORD PTR _mp$[ebp]
	movsx	ecx, WORD PTR [eax+2]
	imul	ecx, 7208				; 00001c28H
	add	ecx, OFFSET FLAT:?BucketClipFog@@3PAUBUCKET_TEX1@@A ; BucketClipFog
	mov	DWORD PTR _bucket$[ebp], ecx

; 2237 : 			else bucket = &BucketFog[mp->Tpage];

	jmp	SHORT $L83400
$L83399:
	mov	eax, DWORD PTR _mp$[ebp]
	movsx	ecx, WORD PTR [eax+2]
	imul	ecx, 7208				; 00001c28H
	add	ecx, OFFSET FLAT:?BucketFog@@3PAUBUCKET_TEX1@@A ; BucketFog
	mov	DWORD PTR _bucket$[ebp], ecx
$L83400:

; 2238 : 			count = (short)(bucket->CurrentVerts - bucket->Verts);

	mov	eax, DWORD PTR _bucket$[ebp]
	add	eax, 808				; 00000328H
	mov	ecx, DWORD PTR _bucket$[ebp]
	mov	edx, DWORD PTR [ecx+804]
	sub	edx, eax
	sar	edx, 5
	mov	WORD PTR _count$[ebp], dx

; 2239 : 
; 2240 : 			if (count > BUCKET_VERT_END)

	movsx	eax, WORD PTR _count$[ebp]
	cmp	eax, 196				; 000000c4H
	jle	$L83402

; 2241 : 			{
; 2242 : 				SET_TPAGE(mp->Tpage);

	movsx	eax, WORD PTR ?RenderTP@@3FA		; RenderTP
	mov	ecx, DWORD PTR _mp$[ebp]
	movsx	edx, WORD PTR [ecx+2]
	cmp	eax, edx
	je	SHORT $L83403
	mov	eax, DWORD PTR _mp$[ebp]
	mov	cx, WORD PTR [eax+2]
	mov	WORD PTR ?RenderTP@@3FA, cx		; RenderTP
	movsx	edx, WORD PTR ?RenderTP@@3FA		; RenderTP
	cmp	edx, -1
	jne	SHORT $L83404
	push	0
	push	0
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	edx
	call	DWORD PTR [ecx+152]
	mov	eax, DWORD PTR ?TextureStateChange@@3JA	; TextureStateChange
	add	eax, 1
	mov	DWORD PTR ?TextureStateChange@@3JA, eax	; TextureStateChange
	jmp	SHORT $L83403
$L83404:
	movsx	eax, WORD PTR ?RenderTP@@3FA		; RenderTP
	shl	eax, 6
	mov	ecx, DWORD PTR ?TexInfo@@3PAUTEXINFO@@A	; TexInfo
	mov	edx, DWORD PTR [ecx+eax+52]
	push	edx
	push	0
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	edx
	call	DWORD PTR [ecx+152]
	mov	eax, DWORD PTR ?TextureStateChange@@3JA	; TextureStateChange
	add	eax, 1
	mov	DWORD PTR ?TextureStateChange@@3JA, eax	; TextureStateChange
$L83403:

; 2243 : 				FlushOneBucketTEX1(bucket, clip);

	mov	eax, DWORD PTR _clip$[ebp]
	push	eax
	mov	ecx, DWORD PTR _bucket$[ebp]
	push	ecx
	call	?FlushOneBucketTEX1@@YAXPAUBUCKET_TEX1@@J@Z ; FlushOneBucketTEX1
	add	esp, 8

; 2244 : 				count = 0;

	mov	WORD PTR _count$[ebp], 0
$L83402:

; 2245 : 			}
; 2246 : 
; 2247 : 			bucket->CurrentIndex[0] = count;

	mov	eax, DWORD PTR _bucket$[ebp]
	mov	ecx, DWORD PTR [eax+800]
	mov	dx, WORD PTR _count$[ebp]
	mov	WORD PTR [ecx], dx

; 2248 : 			bucket->CurrentIndex[1] = count + 1;

	movsx	eax, WORD PTR _count$[ebp]
	add	eax, 1
	mov	ecx, DWORD PTR _bucket$[ebp]
	mov	edx, DWORD PTR [ecx+800]
	mov	WORD PTR [edx+2], ax

; 2249 : 			bucket->CurrentIndex[2] = count + 2;

	movsx	eax, WORD PTR _count$[ebp]
	add	eax, 2
	mov	ecx, DWORD PTR _bucket$[ebp]
	mov	edx, DWORD PTR [ecx+800]
	mov	WORD PTR [edx+4], ax

; 2250 : 			bucket->CurrentIndex += 3;

	mov	eax, DWORD PTR _bucket$[ebp]
	mov	ecx, DWORD PTR [eax+800]
	add	ecx, 6
	mov	edx, DWORD PTR _bucket$[ebp]
	mov	DWORD PTR [edx+800], ecx

; 2251 : 
; 2252 : 			vert = bucket->CurrentVerts;

	mov	eax, DWORD PTR _bucket$[ebp]
	mov	ecx, DWORD PTR [eax+804]
	mov	DWORD PTR _vert$[ebp], ecx

; 2253 : 			bucket->CurrentVerts += 3;

	mov	eax, DWORD PTR _bucket$[ebp]
	mov	ecx, DWORD PTR [eax+804]
	add	ecx, 96					; 00000060H
	mov	edx, DWORD PTR _bucket$[ebp]
	mov	DWORD PTR [edx+804], ecx
$L83398:

; 2254 : 		}
; 2255 : 
; 2256 : // copy vert info
; 2257 : 
; 2258 : 		COPY_TRI_XYZRHW(vert);

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	add	ecx, 24					; 00000018H
	mov	edx, DWORD PTR _vert$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], ecx
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	add	ecx, 24					; 00000018H
	mov	edx, DWORD PTR _vert$[ebp]
	add	edx, 32					; 00000020H
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], ecx
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	add	ecx, 24					; 00000018H
	mov	edx, DWORD PTR _vert$[ebp]
	add	edx, 64					; 00000040H
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], ecx

; 2259 : 		COPY_TRI_UV(vert);

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	edx, DWORD PTR [eax+36]
	mov	eax, DWORD PTR _vert$[ebp]
	mov	DWORD PTR [eax+24], ecx
	mov	DWORD PTR [eax+28], edx
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	edx, DWORD PTR [eax+44]
	mov	eax, DWORD PTR _vert$[ebp]
	mov	DWORD PTR [eax+56], ecx
	mov	DWORD PTR [eax+60], edx
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	mov	edx, DWORD PTR [eax+52]
	mov	eax, DWORD PTR _vert$[ebp]
	mov	DWORD PTR [eax+88], ecx
	mov	DWORD PTR [eax+92], edx

; 2260 : 
; 2261 : 		if (lit)

	cmp	DWORD PTR _lit$[ebp], 0
	je	$L83418

; 2262 : 		{
; 2263 : 			COPY_WORLD_TRI_COLOR_LIT_MIRROR(vert);

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	mov	edx, DWORD PTR [ecx+52]
	mov	eax, DWORD PTR _mp$[ebp]
	movzx	ecx, BYTE PTR [eax+18]
	add	ecx, DWORD PTR [edx+68]
	mov	DWORD PTR __i$83419[ebp], ecx
	cmp	DWORD PTR __i$83419[ebp], 255		; 000000ffH
	jle	SHORT $L83422
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+18], 255			; 000000ffH
	jmp	SHORT $L83424
$L83422:
	cmp	DWORD PTR __i$83419[ebp], 0
	jge	SHORT $L83425
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+18], 0
	jmp	SHORT $L83424
$L83425:
	mov	eax, DWORD PTR _vert$[ebp]
	mov	cl, BYTE PTR __i$83419[ebp]
	mov	BYTE PTR [eax+18], cl
$L83424:
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	mov	edx, DWORD PTR [ecx+52]
	mov	eax, DWORD PTR _mp$[ebp]
	movzx	ecx, BYTE PTR [eax+17]
	add	ecx, DWORD PTR [edx+72]
	mov	DWORD PTR __i$83419[ebp], ecx
	cmp	DWORD PTR __i$83419[ebp], 255		; 000000ffH
	jle	SHORT $L83432
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+17], 255			; 000000ffH
	jmp	SHORT $L83434
$L83432:
	cmp	DWORD PTR __i$83419[ebp], 0
	jge	SHORT $L83435
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+17], 0
	jmp	SHORT $L83434
$L83435:
	mov	eax, DWORD PTR _vert$[ebp]
	mov	cl, BYTE PTR __i$83419[ebp]
	mov	BYTE PTR [eax+17], cl
$L83434:
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	mov	edx, DWORD PTR [ecx+52]
	mov	eax, DWORD PTR _mp$[ebp]
	movzx	ecx, BYTE PTR [eax+16]
	add	ecx, DWORD PTR [edx+76]
	mov	DWORD PTR __i$83419[ebp], ecx
	cmp	DWORD PTR __i$83419[ebp], 255		; 000000ffH
	jle	SHORT $L83442
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+16], 255			; 000000ffH
	jmp	SHORT $L83444
$L83442:
	cmp	DWORD PTR __i$83419[ebp], 0
	jge	SHORT $L83445
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+16], 0
	jmp	SHORT $L83444
$L83445:
	mov	eax, DWORD PTR _vert$[ebp]
	mov	cl, BYTE PTR __i$83419[ebp]
	mov	BYTE PTR [eax+16], cl
$L83444:
	mov	eax, DWORD PTR _vert$[ebp]
	mov	ecx, DWORD PTR _mp$[ebp]
	mov	dl, BYTE PTR [ecx+19]
	mov	BYTE PTR [eax+19], dl
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	mov	edx, DWORD PTR [ecx+52]
	mov	eax, DWORD PTR _mp$[ebp]
	movzx	ecx, BYTE PTR [eax+22]
	add	ecx, DWORD PTR [edx+68]
	mov	DWORD PTR __i$83452[ebp], ecx
	cmp	DWORD PTR __i$83452[ebp], 255		; 000000ffH
	jle	SHORT $L83455
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+50], 255			; 000000ffH
	jmp	SHORT $L83457
$L83455:
	cmp	DWORD PTR __i$83452[ebp], 0
	jge	SHORT $L83458
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+50], 0
	jmp	SHORT $L83457
$L83458:
	mov	eax, DWORD PTR _vert$[ebp]
	mov	cl, BYTE PTR __i$83452[ebp]
	mov	BYTE PTR [eax+50], cl
$L83457:
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	mov	edx, DWORD PTR [ecx+52]
	mov	eax, DWORD PTR _mp$[ebp]
	movzx	ecx, BYTE PTR [eax+21]
	add	ecx, DWORD PTR [edx+72]
	mov	DWORD PTR __i$83452[ebp], ecx
	cmp	DWORD PTR __i$83452[ebp], 255		; 000000ffH
	jle	SHORT $L83465
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+49], 255			; 000000ffH
	jmp	SHORT $L83467
$L83465:
	cmp	DWORD PTR __i$83452[ebp], 0
	jge	SHORT $L83468
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+49], 0
	jmp	SHORT $L83467
$L83468:
	mov	eax, DWORD PTR _vert$[ebp]
	mov	cl, BYTE PTR __i$83452[ebp]
	mov	BYTE PTR [eax+49], cl
$L83467:
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	mov	edx, DWORD PTR [ecx+52]
	mov	eax, DWORD PTR _mp$[ebp]
	movzx	ecx, BYTE PTR [eax+20]
	add	ecx, DWORD PTR [edx+76]
	mov	DWORD PTR __i$83452[ebp], ecx
	cmp	DWORD PTR __i$83452[ebp], 255		; 000000ffH
	jle	SHORT $L83475
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+48], 255			; 000000ffH
	jmp	SHORT $L83477
$L83475:
	cmp	DWORD PTR __i$83452[ebp], 0
	jge	SHORT $L83478
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+48], 0
	jmp	SHORT $L83477
$L83478:
	mov	eax, DWORD PTR _vert$[ebp]
	mov	cl, BYTE PTR __i$83452[ebp]
	mov	BYTE PTR [eax+48], cl
$L83477:
	mov	eax, DWORD PTR _vert$[ebp]
	mov	ecx, DWORD PTR _mp$[ebp]
	mov	dl, BYTE PTR [ecx+23]
	mov	BYTE PTR [eax+51], dl
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	mov	edx, DWORD PTR [ecx+52]
	mov	eax, DWORD PTR _mp$[ebp]
	movzx	ecx, BYTE PTR [eax+26]
	add	ecx, DWORD PTR [edx+68]
	mov	DWORD PTR __i$83485[ebp], ecx
	cmp	DWORD PTR __i$83485[ebp], 255		; 000000ffH
	jle	SHORT $L83488
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+82], 255			; 000000ffH
	jmp	SHORT $L83490
$L83488:
	cmp	DWORD PTR __i$83485[ebp], 0
	jge	SHORT $L83491
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+82], 0
	jmp	SHORT $L83490
$L83491:
	mov	eax, DWORD PTR _vert$[ebp]
	mov	cl, BYTE PTR __i$83485[ebp]
	mov	BYTE PTR [eax+82], cl
$L83490:
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	mov	edx, DWORD PTR [ecx+52]
	mov	eax, DWORD PTR _mp$[ebp]
	movzx	ecx, BYTE PTR [eax+25]
	add	ecx, DWORD PTR [edx+72]
	mov	DWORD PTR __i$83485[ebp], ecx
	cmp	DWORD PTR __i$83485[ebp], 255		; 000000ffH
	jle	SHORT $L83498
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+81], 255			; 000000ffH
	jmp	SHORT $L83500
$L83498:
	cmp	DWORD PTR __i$83485[ebp], 0
	jge	SHORT $L83501
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+81], 0
	jmp	SHORT $L83500
$L83501:
	mov	eax, DWORD PTR _vert$[ebp]
	mov	cl, BYTE PTR __i$83485[ebp]
	mov	BYTE PTR [eax+81], cl
$L83500:
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	mov	edx, DWORD PTR [ecx+52]
	mov	eax, DWORD PTR _mp$[ebp]
	movzx	ecx, BYTE PTR [eax+24]
	add	ecx, DWORD PTR [edx+76]
	mov	DWORD PTR __i$83485[ebp], ecx
	cmp	DWORD PTR __i$83485[ebp], 255		; 000000ffH
	jle	SHORT $L83508
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+80], 255			; 000000ffH
	jmp	SHORT $L83510
$L83508:
	cmp	DWORD PTR __i$83485[ebp], 0
	jge	SHORT $L83511
	mov	eax, DWORD PTR _vert$[ebp]
	mov	BYTE PTR [eax+80], 0
	jmp	SHORT $L83510
$L83511:
	mov	eax, DWORD PTR _vert$[ebp]
	mov	cl, BYTE PTR __i$83485[ebp]
	mov	BYTE PTR [eax+80], cl
$L83510:
	mov	eax, DWORD PTR _vert$[ebp]
	mov	ecx, DWORD PTR _mp$[ebp]
	mov	dl, BYTE PTR [ecx+27]
	mov	BYTE PTR [eax+83], dl

; 2264 : 		}
; 2265 : 		else

	jmp	SHORT $L83518
$L83418:

; 2266 : 		{
; 2267 : 			COPY_WORLD_TRI_COLOR(vert);

	mov	eax, DWORD PTR _vert$[ebp]
	mov	ecx, DWORD PTR _mp$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+16], edx
	mov	eax, DWORD PTR _vert$[ebp]
	mov	ecx, DWORD PTR _mp$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR [eax+48], edx
	mov	eax, DWORD PTR _vert$[ebp]
	mov	ecx, DWORD PTR _mp$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR [eax+80], edx
$L83518:

; 2268 : 		}
; 2269 : 
; 2270 : 		COPY_TRI_SPECULAR(vert);

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	mov	edx, DWORD PTR _vert$[ebp]
	mov	eax, DWORD PTR [ecx+44]
	mov	DWORD PTR [edx+20], eax
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	mov	edx, DWORD PTR _vert$[ebp]
	mov	eax, DWORD PTR [ecx+44]
	mov	DWORD PTR [edx+52], eax
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	mov	edx, DWORD PTR _vert$[ebp]
	mov	eax, DWORD PTR [ecx+44]
	mov	DWORD PTR [edx+84], eax

; 2271 : 	}

	jmp	$L83388
$L83389:

; 2272 : 
; 2273 : // draw rgb quads
; 2274 : 
; 2275 : 	for (i = m->MirrorQuadNumRGB ; i ; i--, mp++)

	mov	eax, DWORD PTR _m$[ebp]
	movsx	ecx, WORD PTR [eax+24]
	mov	DWORD PTR _i$[ebp], ecx
	jmp	SHORT $L83519
$L83520:
	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	mov	ecx, DWORD PTR _mp$[ebp]
	add	ecx, 80					; 00000050H
	mov	DWORD PTR _mp$[ebp], ecx
$L83519:
	cmp	DWORD PTR _i$[ebp], 0
	je	$L83521

; 2276 : 	{
; 2277 : 
; 2278 : // reject?
; 2279 : 
; 2280 : 		REJECT_WORLD_POLY_MIRROR();

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	and	ecx, DWORD PTR ?CamVisiMask@@3_KA
	mov	edx, DWORD PTR [eax+12]
	and	edx, DWORD PTR ?CamVisiMask@@3_KA+4
	mov	DWORD PTR tv2586[ebp], ecx
	mov	DWORD PTR tv2586[ebp+4], edx
	mov	eax, DWORD PTR tv2586[ebp]
	or	eax, DWORD PTR tv2586[ebp+4]
	je	SHORT $L83522
	jmp	SHORT $L83520
$L83522:
	mov	eax, DWORD PTR _mp$[ebp]
	movsx	ecx, WORD PTR [eax]
	and	ecx, 2
	jne	SHORT $L83523
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	fld	DWORD PTR [ecx+24]
	mov	edx, DWORD PTR _mp$[ebp]
	mov	eax, DWORD PTR [edx+68]
	fsub	DWORD PTR [eax+24]
	mov	ecx, DWORD PTR _mp$[ebp]
	mov	edx, DWORD PTR [ecx+72]
	fld	DWORD PTR [edx+28]
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	fsub	DWORD PTR [ecx+28]
	fmulp	ST(1), ST(0)
	mov	edx, DWORD PTR _mp$[ebp]
	mov	eax, DWORD PTR [edx+64]
	fld	DWORD PTR [eax+28]
	mov	ecx, DWORD PTR _mp$[ebp]
	mov	edx, DWORD PTR [ecx+68]
	fsub	DWORD PTR [edx+28]
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	fld	DWORD PTR [ecx+24]
	mov	edx, DWORD PTR _mp$[ebp]
	mov	eax, DWORD PTR [edx+68]
	fsub	DWORD PTR [eax+24]
	fmulp	ST(1), ST(0)
	fsubp	ST(1), ST(0)
	fcomp	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L83523
	jmp	$L83520
$L83523:

; 2281 : 		CLIP_QUAD();

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	movzx	edx, BYTE PTR [ecx+48]
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	movzx	eax, BYTE PTR [ecx+48]
	and	edx, eax
	mov	ecx, DWORD PTR _mp$[ebp]
	mov	eax, DWORD PTR [ecx+72]
	movzx	ecx, BYTE PTR [eax+48]
	and	edx, ecx
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	movzx	eax, BYTE PTR [ecx+48]
	and	edx, eax
	je	SHORT $L83525
	jmp	$L83520
$L83525:
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	movzx	edx, BYTE PTR [ecx+48]
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	movzx	eax, BYTE PTR [ecx+48]
	or	edx, eax
	mov	ecx, DWORD PTR _mp$[ebp]
	mov	eax, DWORD PTR [ecx+72]
	movzx	ecx, BYTE PTR [eax+48]
	or	edx, ecx
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	movzx	eax, BYTE PTR [ecx+48]
	or	edx, eax
	mov	DWORD PTR _clip$[ebp], edx

; 2282 : 		INC_POLY_COUNT(WorldDrawnCount, 2);

	movsx	eax, WORD PTR ?WorldDrawnCount@@3FA	; WorldDrawnCount
	add	eax, 2
	mov	WORD PTR ?WorldDrawnCount@@3FA, ax	; WorldDrawnCount

; 2283 : 
; 2284 : // get vert ptr
; 2285 : 
; 2286 : 		if (mp->Type & POLY_SEMITRANS)

	mov	eax, DWORD PTR _mp$[ebp]
	movsx	ecx, WORD PTR [eax]
	and	ecx, 4
	je	$L83526

; 2287 : 		{
; 2288 : 			if (!SEMI_POLY_FREE()) continue;

	cmp	DWORD PTR ?SemiCount@@3JA, 800		; SemiCount, 00000320H
	jl	SHORT $L83527
	jmp	$L83520
$L83527:

; 2289 : 			SEMI_POLY_SETUP_RGB(vertrgb, FALSE, 4, clip, (mp->Type & POLY_SEMITRANS_ONE) != 0);

	mov	eax, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	eax, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[eax+12], 0
	mov	eax, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	eax, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[eax+4], 4
	mov	eax, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	eax, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[eax+8], -1
	cmp	DWORD PTR _clip$[ebp], 0
	je	SHORT $L83528
	mov	eax, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	eax, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[eax], 8
	jmp	SHORT $L83529
$L83528:
	mov	eax, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	eax, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[eax], 12 ; 0000000cH
$L83529:
	mov	eax, DWORD PTR _mp$[ebp]
	movsx	ecx, WORD PTR [eax]
	and	ecx, 256				; 00000100H
	neg	ecx
	sbb	ecx, ecx
	neg	ecx
	mov	edx, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	edx, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[edx+16], ecx
	mov	eax, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	eax, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[eax+20], 0
	mov	eax, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	eax, 152				; 00000098H
	add	eax, OFFSET FLAT:?SemiPoly@@3PAUDRAW_SEMI_POLY@@A+24
	mov	DWORD PTR _vertrgb$[ebp], eax
	mov	ecx, DWORD PTR ?SemiCount@@3JA		; SemiCount
	add	ecx, 1
	mov	DWORD PTR ?SemiCount@@3JA, ecx		; SemiCount

; 2290 : 		}
; 2291 : 		else

	jmp	$L83530
$L83526:

; 2292 : 		{
; 2293 : 			if (clip) bucketrgb = &BucketClipFogRGB;

	cmp	DWORD PTR _clip$[ebp], 0
	je	SHORT $L83531
	mov	DWORD PTR _bucketrgb$[ebp], OFFSET FLAT:?BucketClipFogRGB@@3UBUCKET_TEX0@@A ; BucketClipFogRGB

; 2294 : 			else bucketrgb = &BucketFogRGB;

	jmp	SHORT $L83532
$L83531:
	mov	DWORD PTR _bucketrgb$[ebp], OFFSET FLAT:?BucketFogRGB@@3UBUCKET_TEX0@@A ; BucketFogRGB
$L83532:

; 2295 : 			count = (short)(bucketrgb->CurrentVerts - bucketrgb->Verts);

	mov	eax, DWORD PTR _bucketrgb$[ebp]
	add	eax, 808				; 00000328H
	mov	ecx, DWORD PTR _bucketrgb$[ebp]
	mov	edx, DWORD PTR [ecx+804]
	sub	edx, eax
	mov	eax, edx
	cdq
	mov	ecx, 24					; 00000018H
	idiv	ecx
	mov	WORD PTR _count$[ebp], ax

; 2296 : 
; 2297 : 			if (count > BUCKET_VERT_END)

	movsx	eax, WORD PTR _count$[ebp]
	cmp	eax, 196				; 000000c4H
	jle	$L83534

; 2298 : 			{
; 2299 : 				SET_TPAGE(-1);

	movsx	eax, WORD PTR ?RenderTP@@3FA		; RenderTP
	cmp	eax, -1
	je	SHORT $L83535
	mov	WORD PTR ?RenderTP@@3FA, -1		; RenderTP
	movsx	eax, WORD PTR ?RenderTP@@3FA		; RenderTP
	cmp	eax, -1
	jne	SHORT $L83536
	push	0
	push	0
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	edx
	call	DWORD PTR [ecx+152]
	mov	eax, DWORD PTR ?TextureStateChange@@3JA	; TextureStateChange
	add	eax, 1
	mov	DWORD PTR ?TextureStateChange@@3JA, eax	; TextureStateChange
	jmp	SHORT $L83535
$L83536:
	movsx	eax, WORD PTR ?RenderTP@@3FA		; RenderTP
	shl	eax, 6
	mov	ecx, DWORD PTR ?TexInfo@@3PAUTEXINFO@@A	; TexInfo
	mov	edx, DWORD PTR [ecx+eax+52]
	push	edx
	push	0
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	edx
	call	DWORD PTR [ecx+152]
	mov	eax, DWORD PTR ?TextureStateChange@@3JA	; TextureStateChange
	add	eax, 1
	mov	DWORD PTR ?TextureStateChange@@3JA, eax	; TextureStateChange
$L83535:

; 2300 : 				FlushOneBucketTEX0(bucketrgb, clip);

	mov	eax, DWORD PTR _clip$[ebp]
	push	eax
	mov	ecx, DWORD PTR _bucketrgb$[ebp]
	push	ecx
	call	?FlushOneBucketTEX0@@YAXPAUBUCKET_TEX0@@J@Z ; FlushOneBucketTEX0
	add	esp, 8

; 2301 : 				count = 0;

	mov	WORD PTR _count$[ebp], 0
$L83534:

; 2302 : 			}
; 2303 : 
; 2304 : 			bucketrgb->CurrentIndex[0] = count;

	mov	eax, DWORD PTR _bucketrgb$[ebp]
	mov	ecx, DWORD PTR [eax+800]
	mov	dx, WORD PTR _count$[ebp]
	mov	WORD PTR [ecx], dx

; 2305 : 			bucketrgb->CurrentIndex[1] = count + 1;

	movsx	eax, WORD PTR _count$[ebp]
	add	eax, 1
	mov	ecx, DWORD PTR _bucketrgb$[ebp]
	mov	edx, DWORD PTR [ecx+800]
	mov	WORD PTR [edx+2], ax

; 2306 : 			bucketrgb->CurrentIndex[2] = count + 2;

	movsx	eax, WORD PTR _count$[ebp]
	add	eax, 2
	mov	ecx, DWORD PTR _bucketrgb$[ebp]
	mov	edx, DWORD PTR [ecx+800]
	mov	WORD PTR [edx+4], ax

; 2307 : 			bucketrgb->CurrentIndex[3] = count;

	mov	eax, DWORD PTR _bucketrgb$[ebp]
	mov	ecx, DWORD PTR [eax+800]
	mov	dx, WORD PTR _count$[ebp]
	mov	WORD PTR [ecx+6], dx

; 2308 : 			bucketrgb->CurrentIndex[4] = count + 2;

	movsx	eax, WORD PTR _count$[ebp]
	add	eax, 2
	mov	ecx, DWORD PTR _bucketrgb$[ebp]
	mov	edx, DWORD PTR [ecx+800]
	mov	WORD PTR [edx+8], ax

; 2309 : 			bucketrgb->CurrentIndex[5] = count + 3;

	movsx	eax, WORD PTR _count$[ebp]
	add	eax, 3
	mov	ecx, DWORD PTR _bucketrgb$[ebp]
	mov	edx, DWORD PTR [ecx+800]
	mov	WORD PTR [edx+10], ax

; 2310 : 			bucketrgb->CurrentIndex += 6;

	mov	eax, DWORD PTR _bucketrgb$[ebp]
	mov	ecx, DWORD PTR [eax+800]
	add	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR _bucketrgb$[ebp]
	mov	DWORD PTR [edx+800], ecx

; 2311 : 
; 2312 : 			vertrgb = bucketrgb->CurrentVerts;

	mov	eax, DWORD PTR _bucketrgb$[ebp]
	mov	ecx, DWORD PTR [eax+804]
	mov	DWORD PTR _vertrgb$[ebp], ecx

; 2313 : 			bucketrgb->CurrentVerts += 4;

	mov	eax, DWORD PTR _bucketrgb$[ebp]
	mov	ecx, DWORD PTR [eax+804]
	add	ecx, 96					; 00000060H
	mov	edx, DWORD PTR _bucketrgb$[ebp]
	mov	DWORD PTR [edx+804], ecx
$L83530:

; 2314 : 		}
; 2315 : 
; 2316 : // copy vert info
; 2317 : 
; 2318 : 		COPY_QUAD_XYZRHW(vertrgb);

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	add	ecx, 24					; 00000018H
	mov	edx, DWORD PTR _vertrgb$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], ecx
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	add	ecx, 24					; 00000018H
	mov	edx, DWORD PTR _vertrgb$[ebp]
	add	edx, 24					; 00000018H
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], ecx
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	add	ecx, 24					; 00000018H
	mov	edx, DWORD PTR _vertrgb$[ebp]
	add	edx, 48					; 00000030H
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], ecx
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	add	ecx, 24					; 00000018H
	mov	edx, DWORD PTR _vertrgb$[ebp]
	add	edx, 72					; 00000048H
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], ecx

; 2319 : 
; 2320 : 		if (lit)

	cmp	DWORD PTR _lit$[ebp], 0
	je	$L83546

; 2321 : 		{
; 2322 : 			COPY_WORLD_QUAD_COLOR_LIT_MIRROR(vertrgb);

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	mov	edx, DWORD PTR [ecx+52]
	mov	eax, DWORD PTR _mp$[ebp]
	movzx	ecx, BYTE PTR [eax+18]
	add	ecx, DWORD PTR [edx+68]
	mov	DWORD PTR __i$83547[ebp], ecx
	cmp	DWORD PTR __i$83547[ebp], 255		; 000000ffH
	jle	SHORT $L83550
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+18], 255			; 000000ffH
	jmp	SHORT $L83552
$L83550:
	cmp	DWORD PTR __i$83547[ebp], 0
	jge	SHORT $L83553
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+18], 0
	jmp	SHORT $L83552
$L83553:
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	cl, BYTE PTR __i$83547[ebp]
	mov	BYTE PTR [eax+18], cl
$L83552:
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	mov	edx, DWORD PTR [ecx+52]
	mov	eax, DWORD PTR _mp$[ebp]
	movzx	ecx, BYTE PTR [eax+17]
	add	ecx, DWORD PTR [edx+72]
	mov	DWORD PTR __i$83547[ebp], ecx
	cmp	DWORD PTR __i$83547[ebp], 255		; 000000ffH
	jle	SHORT $L83560
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+17], 255			; 000000ffH
	jmp	SHORT $L83562
$L83560:
	cmp	DWORD PTR __i$83547[ebp], 0
	jge	SHORT $L83563
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+17], 0
	jmp	SHORT $L83562
$L83563:
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	cl, BYTE PTR __i$83547[ebp]
	mov	BYTE PTR [eax+17], cl
$L83562:
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	mov	edx, DWORD PTR [ecx+52]
	mov	eax, DWORD PTR _mp$[ebp]
	movzx	ecx, BYTE PTR [eax+16]
	add	ecx, DWORD PTR [edx+76]
	mov	DWORD PTR __i$83547[ebp], ecx
	cmp	DWORD PTR __i$83547[ebp], 255		; 000000ffH
	jle	SHORT $L83570
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+16], 255			; 000000ffH
	jmp	SHORT $L83572
$L83570:
	cmp	DWORD PTR __i$83547[ebp], 0
	jge	SHORT $L83573
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+16], 0
	jmp	SHORT $L83572
$L83573:
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	cl, BYTE PTR __i$83547[ebp]
	mov	BYTE PTR [eax+16], cl
$L83572:
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	ecx, DWORD PTR _mp$[ebp]
	mov	dl, BYTE PTR [ecx+19]
	mov	BYTE PTR [eax+19], dl
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	mov	edx, DWORD PTR [ecx+52]
	mov	eax, DWORD PTR _mp$[ebp]
	movzx	ecx, BYTE PTR [eax+22]
	add	ecx, DWORD PTR [edx+68]
	mov	DWORD PTR __i$83580[ebp], ecx
	cmp	DWORD PTR __i$83580[ebp], 255		; 000000ffH
	jle	SHORT $L83583
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+42], 255			; 000000ffH
	jmp	SHORT $L83585
$L83583:
	cmp	DWORD PTR __i$83580[ebp], 0
	jge	SHORT $L83586
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+42], 0
	jmp	SHORT $L83585
$L83586:
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	cl, BYTE PTR __i$83580[ebp]
	mov	BYTE PTR [eax+42], cl
$L83585:
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	mov	edx, DWORD PTR [ecx+52]
	mov	eax, DWORD PTR _mp$[ebp]
	movzx	ecx, BYTE PTR [eax+21]
	add	ecx, DWORD PTR [edx+72]
	mov	DWORD PTR __i$83580[ebp], ecx
	cmp	DWORD PTR __i$83580[ebp], 255		; 000000ffH
	jle	SHORT $L83593
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+41], 255			; 000000ffH
	jmp	SHORT $L83595
$L83593:
	cmp	DWORD PTR __i$83580[ebp], 0
	jge	SHORT $L83596
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+41], 0
	jmp	SHORT $L83595
$L83596:
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	cl, BYTE PTR __i$83580[ebp]
	mov	BYTE PTR [eax+41], cl
$L83595:
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	mov	edx, DWORD PTR [ecx+52]
	mov	eax, DWORD PTR _mp$[ebp]
	movzx	ecx, BYTE PTR [eax+20]
	add	ecx, DWORD PTR [edx+76]
	mov	DWORD PTR __i$83580[ebp], ecx
	cmp	DWORD PTR __i$83580[ebp], 255		; 000000ffH
	jle	SHORT $L83603
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+40], 255			; 000000ffH
	jmp	SHORT $L83605
$L83603:
	cmp	DWORD PTR __i$83580[ebp], 0
	jge	SHORT $L83606
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+40], 0
	jmp	SHORT $L83605
$L83606:
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	cl, BYTE PTR __i$83580[ebp]
	mov	BYTE PTR [eax+40], cl
$L83605:
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	ecx, DWORD PTR _mp$[ebp]
	mov	dl, BYTE PTR [ecx+23]
	mov	BYTE PTR [eax+43], dl
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	mov	edx, DWORD PTR [ecx+52]
	mov	eax, DWORD PTR _mp$[ebp]
	movzx	ecx, BYTE PTR [eax+26]
	add	ecx, DWORD PTR [edx+68]
	mov	DWORD PTR __i$83613[ebp], ecx
	cmp	DWORD PTR __i$83613[ebp], 255		; 000000ffH
	jle	SHORT $L83616
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+66], 255			; 000000ffH
	jmp	SHORT $L83618
$L83616:
	cmp	DWORD PTR __i$83613[ebp], 0
	jge	SHORT $L83619
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+66], 0
	jmp	SHORT $L83618
$L83619:
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	cl, BYTE PTR __i$83613[ebp]
	mov	BYTE PTR [eax+66], cl
$L83618:
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	mov	edx, DWORD PTR [ecx+52]
	mov	eax, DWORD PTR _mp$[ebp]
	movzx	ecx, BYTE PTR [eax+25]
	add	ecx, DWORD PTR [edx+72]
	mov	DWORD PTR __i$83613[ebp], ecx
	cmp	DWORD PTR __i$83613[ebp], 255		; 000000ffH
	jle	SHORT $L83626
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+65], 255			; 000000ffH
	jmp	SHORT $L83628
$L83626:
	cmp	DWORD PTR __i$83613[ebp], 0
	jge	SHORT $L83629
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+65], 0
	jmp	SHORT $L83628
$L83629:
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	cl, BYTE PTR __i$83613[ebp]
	mov	BYTE PTR [eax+65], cl
$L83628:
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	mov	edx, DWORD PTR [ecx+52]
	mov	eax, DWORD PTR _mp$[ebp]
	movzx	ecx, BYTE PTR [eax+24]
	add	ecx, DWORD PTR [edx+76]
	mov	DWORD PTR __i$83613[ebp], ecx
	cmp	DWORD PTR __i$83613[ebp], 255		; 000000ffH
	jle	SHORT $L83636
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+64], 255			; 000000ffH
	jmp	SHORT $L83638
$L83636:
	cmp	DWORD PTR __i$83613[ebp], 0
	jge	SHORT $L83639
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+64], 0
	jmp	SHORT $L83638
$L83639:
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	cl, BYTE PTR __i$83613[ebp]
	mov	BYTE PTR [eax+64], cl
$L83638:
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	ecx, DWORD PTR _mp$[ebp]
	mov	dl, BYTE PTR [ecx+27]
	mov	BYTE PTR [eax+67], dl
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	mov	edx, DWORD PTR [ecx+52]
	mov	eax, DWORD PTR _mp$[ebp]
	movzx	ecx, BYTE PTR [eax+30]
	add	ecx, DWORD PTR [edx+68]
	mov	DWORD PTR __i$83646[ebp], ecx
	cmp	DWORD PTR __i$83646[ebp], 255		; 000000ffH
	jle	SHORT $L83649
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+90], 255			; 000000ffH
	jmp	SHORT $L83651
$L83649:
	cmp	DWORD PTR __i$83646[ebp], 0
	jge	SHORT $L83652
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+90], 0
	jmp	SHORT $L83651
$L83652:
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	cl, BYTE PTR __i$83646[ebp]
	mov	BYTE PTR [eax+90], cl
$L83651:
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	mov	edx, DWORD PTR [ecx+52]
	mov	eax, DWORD PTR _mp$[ebp]
	movzx	ecx, BYTE PTR [eax+29]
	add	ecx, DWORD PTR [edx+72]
	mov	DWORD PTR __i$83646[ebp], ecx
	cmp	DWORD PTR __i$83646[ebp], 255		; 000000ffH
	jle	SHORT $L83659
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+89], 255			; 000000ffH
	jmp	SHORT $L83661
$L83659:
	cmp	DWORD PTR __i$83646[ebp], 0
	jge	SHORT $L83662
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+89], 0
	jmp	SHORT $L83661
$L83662:
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	cl, BYTE PTR __i$83646[ebp]
	mov	BYTE PTR [eax+89], cl
$L83661:
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	mov	edx, DWORD PTR [ecx+52]
	mov	eax, DWORD PTR _mp$[ebp]
	movzx	ecx, BYTE PTR [eax+28]
	add	ecx, DWORD PTR [edx+76]
	mov	DWORD PTR __i$83646[ebp], ecx
	cmp	DWORD PTR __i$83646[ebp], 255		; 000000ffH
	jle	SHORT $L83669
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+88], 255			; 000000ffH
	jmp	SHORT $L83671
$L83669:
	cmp	DWORD PTR __i$83646[ebp], 0
	jge	SHORT $L83672
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+88], 0
	jmp	SHORT $L83671
$L83672:
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	cl, BYTE PTR __i$83646[ebp]
	mov	BYTE PTR [eax+88], cl
$L83671:
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	ecx, DWORD PTR _mp$[ebp]
	mov	dl, BYTE PTR [ecx+31]
	mov	BYTE PTR [eax+91], dl

; 2323 : 		}
; 2324 : 		else

	jmp	SHORT $L83679
$L83546:

; 2325 : 		{
; 2326 : 			COPY_WORLD_QUAD_COLOR(vertrgb);

	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	ecx, DWORD PTR _mp$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+16], edx
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	ecx, DWORD PTR _mp$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR [eax+40], edx
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	ecx, DWORD PTR _mp$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR [eax+64], edx
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	ecx, DWORD PTR _mp$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR [eax+88], edx
$L83679:

; 2327 : 		}
; 2328 : 
; 2329 : 		COPY_QUAD_SPECULAR(vertrgb);

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	mov	edx, DWORD PTR _vertrgb$[ebp]
	mov	eax, DWORD PTR [ecx+44]
	mov	DWORD PTR [edx+20], eax
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	mov	edx, DWORD PTR _vertrgb$[ebp]
	mov	eax, DWORD PTR [ecx+44]
	mov	DWORD PTR [edx+44], eax
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	mov	edx, DWORD PTR _vertrgb$[ebp]
	mov	eax, DWORD PTR [ecx+44]
	mov	DWORD PTR [edx+68], eax
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	mov	edx, DWORD PTR _vertrgb$[ebp]
	mov	eax, DWORD PTR [ecx+44]
	mov	DWORD PTR [edx+92], eax

; 2330 : 	}

	jmp	$L83520
$L83521:

; 2331 : 
; 2332 : // draw rgb tri's
; 2333 : 
; 2334 : 	for (i = m->MirrorTriNumRGB ; i ; i--, mp++)

	mov	eax, DWORD PTR _m$[ebp]
	movsx	ecx, WORD PTR [eax+26]
	mov	DWORD PTR _i$[ebp], ecx
	jmp	SHORT $L83680
$L83681:
	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	mov	ecx, DWORD PTR _mp$[ebp]
	add	ecx, 80					; 00000050H
	mov	DWORD PTR _mp$[ebp], ecx
$L83680:
	cmp	DWORD PTR _i$[ebp], 0
	je	$L83209

; 2335 : 	{
; 2336 : 
; 2337 : // reject?
; 2338 : 
; 2339 : 		REJECT_WORLD_POLY_MIRROR();

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	and	ecx, DWORD PTR ?CamVisiMask@@3_KA
	mov	edx, DWORD PTR [eax+12]
	and	edx, DWORD PTR ?CamVisiMask@@3_KA+4
	mov	DWORD PTR tv2842[ebp], ecx
	mov	DWORD PTR tv2842[ebp+4], edx
	mov	eax, DWORD PTR tv2842[ebp]
	or	eax, DWORD PTR tv2842[ebp+4]
	je	SHORT $L83683
	jmp	SHORT $L83681
$L83683:
	mov	eax, DWORD PTR _mp$[ebp]
	movsx	ecx, WORD PTR [eax]
	and	ecx, 2
	jne	SHORT $L83684
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	fld	DWORD PTR [ecx+24]
	mov	edx, DWORD PTR _mp$[ebp]
	mov	eax, DWORD PTR [edx+68]
	fsub	DWORD PTR [eax+24]
	mov	ecx, DWORD PTR _mp$[ebp]
	mov	edx, DWORD PTR [ecx+72]
	fld	DWORD PTR [edx+28]
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	fsub	DWORD PTR [ecx+28]
	fmulp	ST(1), ST(0)
	mov	edx, DWORD PTR _mp$[ebp]
	mov	eax, DWORD PTR [edx+64]
	fld	DWORD PTR [eax+28]
	mov	ecx, DWORD PTR _mp$[ebp]
	mov	edx, DWORD PTR [ecx+68]
	fsub	DWORD PTR [edx+28]
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	fld	DWORD PTR [ecx+24]
	mov	edx, DWORD PTR _mp$[ebp]
	mov	eax, DWORD PTR [edx+68]
	fsub	DWORD PTR [eax+24]
	fmulp	ST(1), ST(0)
	fsubp	ST(1), ST(0)
	fcomp	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L83684
	jmp	$L83681
$L83684:

; 2340 : 		CLIP_TRI();

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	movzx	edx, BYTE PTR [ecx+48]
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	movzx	eax, BYTE PTR [ecx+48]
	and	edx, eax
	mov	ecx, DWORD PTR _mp$[ebp]
	mov	eax, DWORD PTR [ecx+72]
	movzx	ecx, BYTE PTR [eax+48]
	and	edx, ecx
	je	SHORT $L83686
	jmp	$L83681
$L83686:
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	movzx	edx, BYTE PTR [ecx+48]
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	movzx	eax, BYTE PTR [ecx+48]
	or	edx, eax
	mov	ecx, DWORD PTR _mp$[ebp]
	mov	eax, DWORD PTR [ecx+72]
	movzx	ecx, BYTE PTR [eax+48]
	or	edx, ecx
	mov	DWORD PTR _clip$[ebp], edx

; 2341 : 		INC_POLY_COUNT(WorldDrawnCount, 1);

	movsx	eax, WORD PTR ?WorldDrawnCount@@3FA	; WorldDrawnCount
	add	eax, 1
	mov	WORD PTR ?WorldDrawnCount@@3FA, ax	; WorldDrawnCount

; 2342 : 
; 2343 : // get vert ptr
; 2344 : 
; 2345 : 		if (mp->Type & POLY_SEMITRANS)

	mov	eax, DWORD PTR _mp$[ebp]
	movsx	ecx, WORD PTR [eax]
	and	ecx, 4
	je	$L83687

; 2346 : 		{
; 2347 : 			if (!SEMI_POLY_FREE()) continue;

	cmp	DWORD PTR ?SemiCount@@3JA, 800		; SemiCount, 00000320H
	jl	SHORT $L83688
	jmp	$L83681
$L83688:

; 2348 : 			SEMI_POLY_SETUP_RGB(vertrgb, FALSE, 3, clip, (mp->Type & POLY_SEMITRANS_ONE) != 0);

	mov	eax, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	eax, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[eax+12], 0
	mov	eax, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	eax, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[eax+4], 3
	mov	eax, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	eax, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[eax+8], -1
	cmp	DWORD PTR _clip$[ebp], 0
	je	SHORT $L83689
	mov	eax, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	eax, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[eax], 8
	jmp	SHORT $L83690
$L83689:
	mov	eax, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	eax, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[eax], 12 ; 0000000cH
$L83690:
	mov	eax, DWORD PTR _mp$[ebp]
	movsx	ecx, WORD PTR [eax]
	and	ecx, 256				; 00000100H
	neg	ecx
	sbb	ecx, ecx
	neg	ecx
	mov	edx, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	edx, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[edx+16], ecx
	mov	eax, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	eax, 152				; 00000098H
	mov	DWORD PTR ?SemiPoly@@3PAUDRAW_SEMI_POLY@@A[eax+20], 0
	mov	eax, DWORD PTR ?SemiCount@@3JA		; SemiCount
	imul	eax, 152				; 00000098H
	add	eax, OFFSET FLAT:?SemiPoly@@3PAUDRAW_SEMI_POLY@@A+24
	mov	DWORD PTR _vertrgb$[ebp], eax
	mov	ecx, DWORD PTR ?SemiCount@@3JA		; SemiCount
	add	ecx, 1
	mov	DWORD PTR ?SemiCount@@3JA, ecx		; SemiCount

; 2349 : 		}
; 2350 : 		else

	jmp	$L83691
$L83687:

; 2351 : 		{
; 2352 : 			if (clip) bucketrgb = &BucketClipFogRGB;

	cmp	DWORD PTR _clip$[ebp], 0
	je	SHORT $L83692
	mov	DWORD PTR _bucketrgb$[ebp], OFFSET FLAT:?BucketClipFogRGB@@3UBUCKET_TEX0@@A ; BucketClipFogRGB

; 2353 : 			else bucketrgb = &BucketFogRGB;

	jmp	SHORT $L83693
$L83692:
	mov	DWORD PTR _bucketrgb$[ebp], OFFSET FLAT:?BucketFogRGB@@3UBUCKET_TEX0@@A ; BucketFogRGB
$L83693:

; 2354 : 			count = (short)(bucketrgb->CurrentVerts - bucketrgb->Verts);

	mov	eax, DWORD PTR _bucketrgb$[ebp]
	add	eax, 808				; 00000328H
	mov	ecx, DWORD PTR _bucketrgb$[ebp]
	mov	edx, DWORD PTR [ecx+804]
	sub	edx, eax
	mov	eax, edx
	cdq
	mov	ecx, 24					; 00000018H
	idiv	ecx
	mov	WORD PTR _count$[ebp], ax

; 2355 : 
; 2356 : 			if (count > BUCKET_VERT_END)

	movsx	eax, WORD PTR _count$[ebp]
	cmp	eax, 196				; 000000c4H
	jle	$L83695

; 2357 : 			{
; 2358 : 				SET_TPAGE(-1);

	movsx	eax, WORD PTR ?RenderTP@@3FA		; RenderTP
	cmp	eax, -1
	je	SHORT $L83696
	mov	WORD PTR ?RenderTP@@3FA, -1		; RenderTP
	movsx	eax, WORD PTR ?RenderTP@@3FA		; RenderTP
	cmp	eax, -1
	jne	SHORT $L83697
	push	0
	push	0
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	edx
	call	DWORD PTR [ecx+152]
	mov	eax, DWORD PTR ?TextureStateChange@@3JA	; TextureStateChange
	add	eax, 1
	mov	DWORD PTR ?TextureStateChange@@3JA, eax	; TextureStateChange
	jmp	SHORT $L83696
$L83697:
	movsx	eax, WORD PTR ?RenderTP@@3FA		; RenderTP
	shl	eax, 6
	mov	ecx, DWORD PTR ?TexInfo@@3PAUTEXINFO@@A	; TexInfo
	mov	edx, DWORD PTR [ecx+eax+52]
	push	edx
	push	0
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	edx
	call	DWORD PTR [ecx+152]
	mov	eax, DWORD PTR ?TextureStateChange@@3JA	; TextureStateChange
	add	eax, 1
	mov	DWORD PTR ?TextureStateChange@@3JA, eax	; TextureStateChange
$L83696:

; 2359 : 				FlushOneBucketTEX0(bucketrgb, clip);

	mov	eax, DWORD PTR _clip$[ebp]
	push	eax
	mov	ecx, DWORD PTR _bucketrgb$[ebp]
	push	ecx
	call	?FlushOneBucketTEX0@@YAXPAUBUCKET_TEX0@@J@Z ; FlushOneBucketTEX0
	add	esp, 8

; 2360 : 				count = 0;

	mov	WORD PTR _count$[ebp], 0
$L83695:

; 2361 : 			}
; 2362 : 
; 2363 : 			bucketrgb->CurrentIndex[0] = count;

	mov	eax, DWORD PTR _bucketrgb$[ebp]
	mov	ecx, DWORD PTR [eax+800]
	mov	dx, WORD PTR _count$[ebp]
	mov	WORD PTR [ecx], dx

; 2364 : 			bucketrgb->CurrentIndex[1] = count + 1;

	movsx	eax, WORD PTR _count$[ebp]
	add	eax, 1
	mov	ecx, DWORD PTR _bucketrgb$[ebp]
	mov	edx, DWORD PTR [ecx+800]
	mov	WORD PTR [edx+2], ax

; 2365 : 			bucketrgb->CurrentIndex[2] = count + 2;

	movsx	eax, WORD PTR _count$[ebp]
	add	eax, 2
	mov	ecx, DWORD PTR _bucketrgb$[ebp]
	mov	edx, DWORD PTR [ecx+800]
	mov	WORD PTR [edx+4], ax

; 2366 : 			bucketrgb->CurrentIndex += 3;

	mov	eax, DWORD PTR _bucketrgb$[ebp]
	mov	ecx, DWORD PTR [eax+800]
	add	ecx, 6
	mov	edx, DWORD PTR _bucketrgb$[ebp]
	mov	DWORD PTR [edx+800], ecx

; 2367 : 
; 2368 : 			vertrgb = bucketrgb->CurrentVerts;

	mov	eax, DWORD PTR _bucketrgb$[ebp]
	mov	ecx, DWORD PTR [eax+804]
	mov	DWORD PTR _vertrgb$[ebp], ecx

; 2369 : 			bucketrgb->CurrentVerts += 3;

	mov	eax, DWORD PTR _bucketrgb$[ebp]
	mov	ecx, DWORD PTR [eax+804]
	add	ecx, 72					; 00000048H
	mov	edx, DWORD PTR _bucketrgb$[ebp]
	mov	DWORD PTR [edx+804], ecx
$L83691:

; 2370 : 		}
; 2371 : 
; 2372 : // copy vert info
; 2373 : 
; 2374 : 		COPY_TRI_XYZRHW(vertrgb);

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	add	ecx, 24					; 00000018H
	mov	edx, DWORD PTR _vertrgb$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], ecx
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	add	ecx, 24					; 00000018H
	mov	edx, DWORD PTR _vertrgb$[ebp]
	add	edx, 24					; 00000018H
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], ecx
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	add	ecx, 24					; 00000018H
	mov	edx, DWORD PTR _vertrgb$[ebp]
	add	edx, 48					; 00000030H
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], ecx

; 2375 : 
; 2376 : 		if (lit)

	cmp	DWORD PTR _lit$[ebp], 0
	je	$L83705

; 2377 : 		{
; 2378 : 			COPY_WORLD_TRI_COLOR_LIT_MIRROR(vertrgb);

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	mov	edx, DWORD PTR [ecx+52]
	mov	eax, DWORD PTR _mp$[ebp]
	movzx	ecx, BYTE PTR [eax+18]
	add	ecx, DWORD PTR [edx+68]
	mov	DWORD PTR __i$83706[ebp], ecx
	cmp	DWORD PTR __i$83706[ebp], 255		; 000000ffH
	jle	SHORT $L83709
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+18], 255			; 000000ffH
	jmp	SHORT $L83711
$L83709:
	cmp	DWORD PTR __i$83706[ebp], 0
	jge	SHORT $L83712
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+18], 0
	jmp	SHORT $L83711
$L83712:
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	cl, BYTE PTR __i$83706[ebp]
	mov	BYTE PTR [eax+18], cl
$L83711:
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	mov	edx, DWORD PTR [ecx+52]
	mov	eax, DWORD PTR _mp$[ebp]
	movzx	ecx, BYTE PTR [eax+17]
	add	ecx, DWORD PTR [edx+72]
	mov	DWORD PTR __i$83706[ebp], ecx
	cmp	DWORD PTR __i$83706[ebp], 255		; 000000ffH
	jle	SHORT $L83719
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+17], 255			; 000000ffH
	jmp	SHORT $L83721
$L83719:
	cmp	DWORD PTR __i$83706[ebp], 0
	jge	SHORT $L83722
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+17], 0
	jmp	SHORT $L83721
$L83722:
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	cl, BYTE PTR __i$83706[ebp]
	mov	BYTE PTR [eax+17], cl
$L83721:
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	mov	edx, DWORD PTR [ecx+52]
	mov	eax, DWORD PTR _mp$[ebp]
	movzx	ecx, BYTE PTR [eax+16]
	add	ecx, DWORD PTR [edx+76]
	mov	DWORD PTR __i$83706[ebp], ecx
	cmp	DWORD PTR __i$83706[ebp], 255		; 000000ffH
	jle	SHORT $L83729
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+16], 255			; 000000ffH
	jmp	SHORT $L83731
$L83729:
	cmp	DWORD PTR __i$83706[ebp], 0
	jge	SHORT $L83732
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+16], 0
	jmp	SHORT $L83731
$L83732:
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	cl, BYTE PTR __i$83706[ebp]
	mov	BYTE PTR [eax+16], cl
$L83731:
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	ecx, DWORD PTR _mp$[ebp]
	mov	dl, BYTE PTR [ecx+19]
	mov	BYTE PTR [eax+19], dl
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	mov	edx, DWORD PTR [ecx+52]
	mov	eax, DWORD PTR _mp$[ebp]
	movzx	ecx, BYTE PTR [eax+22]
	add	ecx, DWORD PTR [edx+68]
	mov	DWORD PTR __i$83739[ebp], ecx
	cmp	DWORD PTR __i$83739[ebp], 255		; 000000ffH
	jle	SHORT $L83742
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+42], 255			; 000000ffH
	jmp	SHORT $L83744
$L83742:
	cmp	DWORD PTR __i$83739[ebp], 0
	jge	SHORT $L83745
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+42], 0
	jmp	SHORT $L83744
$L83745:
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	cl, BYTE PTR __i$83739[ebp]
	mov	BYTE PTR [eax+42], cl
$L83744:
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	mov	edx, DWORD PTR [ecx+52]
	mov	eax, DWORD PTR _mp$[ebp]
	movzx	ecx, BYTE PTR [eax+21]
	add	ecx, DWORD PTR [edx+72]
	mov	DWORD PTR __i$83739[ebp], ecx
	cmp	DWORD PTR __i$83739[ebp], 255		; 000000ffH
	jle	SHORT $L83752
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+41], 255			; 000000ffH
	jmp	SHORT $L83754
$L83752:
	cmp	DWORD PTR __i$83739[ebp], 0
	jge	SHORT $L83755
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+41], 0
	jmp	SHORT $L83754
$L83755:
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	cl, BYTE PTR __i$83739[ebp]
	mov	BYTE PTR [eax+41], cl
$L83754:
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	mov	edx, DWORD PTR [ecx+52]
	mov	eax, DWORD PTR _mp$[ebp]
	movzx	ecx, BYTE PTR [eax+20]
	add	ecx, DWORD PTR [edx+76]
	mov	DWORD PTR __i$83739[ebp], ecx
	cmp	DWORD PTR __i$83739[ebp], 255		; 000000ffH
	jle	SHORT $L83762
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+40], 255			; 000000ffH
	jmp	SHORT $L83764
$L83762:
	cmp	DWORD PTR __i$83739[ebp], 0
	jge	SHORT $L83765
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+40], 0
	jmp	SHORT $L83764
$L83765:
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	cl, BYTE PTR __i$83739[ebp]
	mov	BYTE PTR [eax+40], cl
$L83764:
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	ecx, DWORD PTR _mp$[ebp]
	mov	dl, BYTE PTR [ecx+23]
	mov	BYTE PTR [eax+43], dl
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	mov	edx, DWORD PTR [ecx+52]
	mov	eax, DWORD PTR _mp$[ebp]
	movzx	ecx, BYTE PTR [eax+26]
	add	ecx, DWORD PTR [edx+68]
	mov	DWORD PTR __i$83772[ebp], ecx
	cmp	DWORD PTR __i$83772[ebp], 255		; 000000ffH
	jle	SHORT $L83775
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+66], 255			; 000000ffH
	jmp	SHORT $L83777
$L83775:
	cmp	DWORD PTR __i$83772[ebp], 0
	jge	SHORT $L83778
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+66], 0
	jmp	SHORT $L83777
$L83778:
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	cl, BYTE PTR __i$83772[ebp]
	mov	BYTE PTR [eax+66], cl
$L83777:
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	mov	edx, DWORD PTR [ecx+52]
	mov	eax, DWORD PTR _mp$[ebp]
	movzx	ecx, BYTE PTR [eax+25]
	add	ecx, DWORD PTR [edx+72]
	mov	DWORD PTR __i$83772[ebp], ecx
	cmp	DWORD PTR __i$83772[ebp], 255		; 000000ffH
	jle	SHORT $L83785
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+65], 255			; 000000ffH
	jmp	SHORT $L83787
$L83785:
	cmp	DWORD PTR __i$83772[ebp], 0
	jge	SHORT $L83788
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+65], 0
	jmp	SHORT $L83787
$L83788:
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	cl, BYTE PTR __i$83772[ebp]
	mov	BYTE PTR [eax+65], cl
$L83787:
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	mov	edx, DWORD PTR [ecx+52]
	mov	eax, DWORD PTR _mp$[ebp]
	movzx	ecx, BYTE PTR [eax+24]
	add	ecx, DWORD PTR [edx+76]
	mov	DWORD PTR __i$83772[ebp], ecx
	cmp	DWORD PTR __i$83772[ebp], 255		; 000000ffH
	jle	SHORT $L83795
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+64], 255			; 000000ffH
	jmp	SHORT $L83797
$L83795:
	cmp	DWORD PTR __i$83772[ebp], 0
	jge	SHORT $L83798
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	BYTE PTR [eax+64], 0
	jmp	SHORT $L83797
$L83798:
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	cl, BYTE PTR __i$83772[ebp]
	mov	BYTE PTR [eax+64], cl
$L83797:
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	ecx, DWORD PTR _mp$[ebp]
	mov	dl, BYTE PTR [ecx+27]
	mov	BYTE PTR [eax+67], dl

; 2379 : 		}
; 2380 : 		else

	jmp	SHORT $L83805
$L83705:

; 2381 : 		{
; 2382 : 			COPY_WORLD_TRI_COLOR(vertrgb);

	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	ecx, DWORD PTR _mp$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+16], edx
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	ecx, DWORD PTR _mp$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR [eax+40], edx
	mov	eax, DWORD PTR _vertrgb$[ebp]
	mov	ecx, DWORD PTR _mp$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR [eax+64], edx
$L83805:

; 2383 : 		}
; 2384 : 
; 2385 : 		COPY_TRI_SPECULAR(vertrgb);

	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	mov	edx, DWORD PTR _vertrgb$[ebp]
	mov	eax, DWORD PTR [ecx+44]
	mov	DWORD PTR [edx+20], eax
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	mov	edx, DWORD PTR _vertrgb$[ebp]
	mov	eax, DWORD PTR [ecx+44]
	mov	DWORD PTR [edx+44], eax
	mov	eax, DWORD PTR _mp$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	mov	edx, DWORD PTR _vertrgb$[ebp]
	mov	eax, DWORD PTR [ecx+44]
	mov	DWORD PTR [edx+68], eax

; 2386 : 	}

	jmp	$L83681
$L83209:

; 2387 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?DrawCubePolysMirror@@YAXPAUWORLD_MODEL@@J@Z ENDP	; DrawCubePolysMirror
_TEXT	ENDS
PUBLIC	?ProcessTextureAnimations@@YAXXZ		; ProcessTextureAnimations
EXTRN	?TimeStep@@3MA:DWORD				; TimeStep
; Function compile flags: /Odt /ZI
;	COMDAT ?ProcessTextureAnimations@@YAXXZ
_TEXT	SEGMENT
_i$ = -4						; size = 4
?ProcessTextureAnimations@@YAXXZ PROC NEAR		; ProcessTextureAnimations, COMDAT

; 2394 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 2395 : 	long i;
; 2396 : 
; 2397 : 	for (i = 0 ; i < TexAnimNum ; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $L83810
$L83811:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$L83810:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR ?TexAnimNum@@3JA		; TexAnimNum
	jge	$L83808

; 2398 : 	{
; 2399 : 		TexAnim[i].FrameTime += TimeStep;

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 20					; 00000014H
	fld	DWORD PTR ?TimeStep@@3MA		; TimeStep
	fadd	DWORD PTR ?TexAnim@@3PAUTEXANIM_HEADER@@A[eax+16]
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 20					; 00000014H
	fstp	DWORD PTR ?TexAnim@@3PAUTEXANIM_HEADER@@A[ecx+16]

; 2400 : 		if (TexAnim[i].FrameTime >= TexAnim[i].CurrentFrame->Time)

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 20					; 00000014H
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 20					; 00000014H
	mov	edx, DWORD PTR ?TexAnim@@3PAUTEXANIM_HEADER@@A[ecx+4]
	fld	DWORD PTR ?TexAnim@@3PAUTEXANIM_HEADER@@A[eax+16]
	fcomp	DWORD PTR [edx+4]
	fnstsw	ax
	test	ah, 1
	jne	SHORT $L83813

; 2401 : 		{
; 2402 : 			TexAnim[i].FrameTime -= TexAnim[i].CurrentFrame->Time;

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 20					; 00000014H
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 20					; 00000014H
	mov	edx, DWORD PTR ?TexAnim@@3PAUTEXANIM_HEADER@@A[ecx+4]
	fld	DWORD PTR ?TexAnim@@3PAUTEXANIM_HEADER@@A[eax+16]
	fsub	DWORD PTR [edx+4]
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 20					; 00000014H
	fstp	DWORD PTR ?TexAnim@@3PAUTEXANIM_HEADER@@A[eax+16]

; 2403 : 			TexAnim[i].CurrentFrameNum = (TexAnim[i].CurrentFrameNum + 1) % TexAnim[i].FrameNum;

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 20					; 00000014H
	mov	eax, DWORD PTR ?TexAnim@@3PAUTEXANIM_HEADER@@A[eax+12]
	add	eax, 1
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 20					; 00000014H
	cdq
	idiv	DWORD PTR ?TexAnim@@3PAUTEXANIM_HEADER@@A[ecx+8]
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 20					; 00000014H
	mov	DWORD PTR ?TexAnim@@3PAUTEXANIM_HEADER@@A[eax+12], edx

; 2404 : 			TexAnim[i].CurrentFrame = &TexAnim[i].Frame[TexAnim[i].CurrentFrameNum];

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 20					; 00000014H
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 20					; 00000014H
	mov	edx, DWORD PTR ?TexAnim@@3PAUTEXANIM_HEADER@@A[ecx+12]
	imul	edx, 40					; 00000028H
	add	edx, DWORD PTR ?TexAnim@@3PAUTEXANIM_HEADER@@A[eax]
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 20					; 00000014H
	mov	DWORD PTR ?TexAnim@@3PAUTEXANIM_HEADER@@A[eax+4], edx
$L83813:

; 2405 : 		}
; 2406 : 	}

	jmp	$L83811
$L83808:

; 2407 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?ProcessTextureAnimations@@YAXXZ ENDP			; ProcessTextureAnimations
_TEXT	ENDS
END
