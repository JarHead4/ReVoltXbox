; Listing generated by Microsoft (R) Optimizing Compiler Version 13.10.3077 

	TITLE	.\source\player.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT PARA USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_0IL@BMBCJALI@c?3?2documents?5and?5settings?2jarhea@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _IsEqualGUID
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _==
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _acosl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _asinl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _atanl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _atan2l
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _ceill
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _cosl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _coshl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _expl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _fabsl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _floorl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _fmodl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _frexpl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _ldexpl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _logl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _log10l
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _modfl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _powl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _sinl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _sinhl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _sqrtl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _tanl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _tanhl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _frexpf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _ldexpf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _acosf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _asinf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _atanf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _atan2f
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _ceilf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _cosf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _coshf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _expf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _fabsf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _floorf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _fmodf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _logf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _log10f
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _modff
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _powf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _sinf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _sinhf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _sqrtf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _tanf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _tanhf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?PLR_InitPlayers@@YAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?PLR_CreatePlayer@@YAPAUPlayerStruct@@W4PLAYER_TYPE@@W4CTRL_TYPE@@JPAUVectorStruct@@PATMatrixUnion@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?PLR_SetPlayerType@@YAXPAUPlayerStruct@@W4PLAYER_TYPE@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?PLR_KillPlayer@@YAXPAUPlayerStruct@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?PLR_KillAllPlayers@@YAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CreatePlayerForceField@@YAXPAUPlayerStruct@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Pow_int@N@@YANNH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Pow_int@H@@YAHHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Pow_int@M@@YAMMH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Pow_int@O@@YAOOH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?__LINE__Var@?1??PLR_CreatePlayer@@YAPAUPlayerStruct@@W4PLAYER_TYPE@@W4CTRL_TYPE@@JPAUVectorStruct@@PATMatrixUnion@@@Z@4JA
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
sxdata	SEGMENT DWORD USE32 'SXDATA'
sxdata	ENDS
FLAT	GROUP _DATA, CONST, _BSS
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBCD
INCLUDELIB OLDNAMES

PUBLIC	?Players@@3PAUPlayerStruct@@A			; Players
PUBLIC	?PLR_PlayerHead@@3PAUPlayerStruct@@A		; PLR_PlayerHead
PUBLIC	?PLR_PlayerTail@@3PAUPlayerStruct@@A		; PLR_PlayerTail
PUBLIC	?NumPlayers@@3JA				; NumPlayers
PUBLIC	?PLR_LocalPlayer@@3PAUPlayerStruct@@A		; PLR_LocalPlayer
PUBLIC	?PLR_LocalCtrlType@@3W4CTRL_TYPE@@A		; PLR_LocalCtrlType
PUBLIC	?s_NextFreePlayer@@3PAUPlayerStruct@@A		; s_NextFreePlayer
_BSS	SEGMENT
?Players@@3PAUPlayerStruct@@A DB 01e3c0H DUP (?)	; Players
?PLR_PlayerHead@@3PAUPlayerStruct@@A DD 01H DUP (?)	; PLR_PlayerHead
?PLR_PlayerTail@@3PAUPlayerStruct@@A DD 01H DUP (?)	; PLR_PlayerTail
?NumPlayers@@3JA DD 01H DUP (?)				; NumPlayers
?PLR_LocalPlayer@@3PAUPlayerStruct@@A DD 01H DUP (?)	; PLR_LocalPlayer
?PLR_LocalCtrlType@@3W4CTRL_TYPE@@A DD 01H DUP (?)	; PLR_LocalCtrlType
?s_NextFreePlayer@@3PAUPlayerStruct@@A DD 01H DUP (?)	; s_NextFreePlayer
_BSS	ENDS
PUBLIC	?PLR_InitPlayers@@YAXXZ				; PLR_InitPlayers
; Function compile flags: /Odt /ZI
; File c:\documents and settings\jarhead\desktop\shit to display my love for xbox revolt and fuck you borman-ness\revolt source\source\player.cpp
;	COMDAT ?PLR_InitPlayers@@YAXXZ
_TEXT	SEGMENT
_ii$ = -4						; size = 4
?PLR_InitPlayers@@YAXXZ PROC NEAR			; PLR_InitPlayers, COMDAT

; 74   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 75   : 	long	ii;
; 76   : 
; 77   : 	for (ii = 0; ii < MAX_NUM_PLAYERS; ii++)

	mov	DWORD PTR _ii$[ebp], 0
	jmp	SHORT $L81377
$L81378:
	mov	eax, DWORD PTR _ii$[ebp]
	add	eax, 1
	mov	DWORD PTR _ii$[ebp], eax
$L81377:
	cmp	DWORD PTR _ii$[ebp], 12			; 0000000cH
	jge	$L81379

; 78   : 	{
; 79   : 		Players[ii].type = PLAYER_NONE;

	mov	eax, DWORD PTR _ii$[ebp]
	imul	eax, 10320				; 00002850H
	mov	DWORD PTR ?Players@@3PAUPlayerStruct@@A[eax+4], 0

; 80   : 		Players[ii].score = 0;

	mov	eax, DWORD PTR _ii$[ebp]
	imul	eax, 10320				; 00002850H
	mov	DWORD PTR ?Players@@3PAUPlayerStruct@@A[eax+10208], 0

; 81   : 		Players[ii].lastscore = 0;

	mov	eax, DWORD PTR _ii$[ebp]
	imul	eax, 10320				; 00002850H
	mov	DWORD PTR ?Players@@3PAUPlayerStruct@@A[eax+10212], 0

; 82   : 		Players[ii].raceswon = 0;

	mov	eax, DWORD PTR _ii$[ebp]
	imul	eax, 10320				; 00002850H
	mov	DWORD PTR ?Players@@3PAUPlayerStruct@@A[eax+10216], 0

; 83   : 		Players[ii].ctrlhandler = NULL;

	mov	eax, DWORD PTR _ii$[ebp]
	imul	eax, 10320				; 00002850H
	mov	DWORD PTR ?Players@@3PAUPlayerStruct@@A[eax+20], 0

; 84   : 		Players[ii].conhandler = NULL;

	mov	eax, DWORD PTR _ii$[ebp]
	imul	eax, 10320				; 00002850H
	mov	DWORD PTR ?Players@@3PAUPlayerStruct@@A[eax+24], 0

; 85   : 		Players[ii].Slot = ii;

	mov	eax, DWORD PTR _ii$[ebp]
	imul	eax, 10320				; 00002850H
	mov	ecx, DWORD PTR _ii$[ebp]
	mov	DWORD PTR ?Players@@3PAUPlayerStruct@@A[eax], ecx

; 86   : 	}

	jmp	$L81378
$L81379:

; 87   : 
; 88   : 	NumPlayers = 0;

	mov	DWORD PTR ?NumPlayers@@3JA, 0		; NumPlayers

; 89   : 	s_NextFreePlayer = Players;

	mov	DWORD PTR ?s_NextFreePlayer@@3PAUPlayerStruct@@A, OFFSET FLAT:?Players@@3PAUPlayerStruct@@A ; s_NextFreePlayer, Players

; 90   : 
; 91   : 	Players[0].prev = NULL;

	mov	DWORD PTR ?Players@@3PAUPlayerStruct@@A+8, 0

; 92   : 	Players[0].next = &(Players[1]);

	mov	DWORD PTR ?Players@@3PAUPlayerStruct@@A+12, OFFSET FLAT:?Players@@3PAUPlayerStruct@@A+10320

; 93   : 
; 94   : 	for (ii = 1; ii < (MAX_NUM_PLAYERS - 1); ii++)

	mov	DWORD PTR _ii$[ebp], 1
	jmp	SHORT $L81380
$L81381:
	mov	eax, DWORD PTR _ii$[ebp]
	add	eax, 1
	mov	DWORD PTR _ii$[ebp], eax
$L81380:
	cmp	DWORD PTR _ii$[ebp], 11			; 0000000bH
	jge	SHORT $L81382

; 95   : 	{
; 96   : 		Players[ii].prev = &(Players[ii - 1]);

	mov	eax, DWORD PTR _ii$[ebp]
	sub	eax, 1
	imul	eax, 10320				; 00002850H
	add	eax, OFFSET FLAT:?Players@@3PAUPlayerStruct@@A ; Players
	mov	ecx, DWORD PTR _ii$[ebp]
	imul	ecx, 10320				; 00002850H
	mov	DWORD PTR ?Players@@3PAUPlayerStruct@@A[ecx+8], eax

; 97   : 		Players[ii].next = &(Players[ii + 1]);

	mov	eax, DWORD PTR _ii$[ebp]
	add	eax, 1
	imul	eax, 10320				; 00002850H
	add	eax, OFFSET FLAT:?Players@@3PAUPlayerStruct@@A ; Players
	mov	ecx, DWORD PTR _ii$[ebp]
	imul	ecx, 10320				; 00002850H
	mov	DWORD PTR ?Players@@3PAUPlayerStruct@@A[ecx+12], eax

; 98   : 	}

	jmp	SHORT $L81381
$L81382:

; 99   : 
; 100  : 	Players[MAX_NUM_PLAYERS - 1].prev = &(Players[MAX_NUM_PLAYERS - 2]);

	mov	DWORD PTR ?Players@@3PAUPlayerStruct@@A+113528, OFFSET FLAT:?Players@@3PAUPlayerStruct@@A+103200

; 101  : 	Players[MAX_NUM_PLAYERS - 1].next = NULL;

	mov	DWORD PTR ?Players@@3PAUPlayerStruct@@A+113532, 0

; 102  : 
; 103  : 	PLR_PlayerHead = NULL;

	mov	DWORD PTR ?PLR_PlayerHead@@3PAUPlayerStruct@@A, 0 ; PLR_PlayerHead

; 104  : 	PLR_PlayerTail = NULL;

	mov	DWORD PTR ?PLR_PlayerTail@@3PAUPlayerStruct@@A, 0 ; PLR_PlayerTail

; 105  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?PLR_InitPlayers@@YAXXZ ENDP				; PLR_InitPlayers
_TEXT	ENDS
PUBLIC	?PLR_CreatePlayer@@YAPAUPlayerStruct@@W4PLAYER_TYPE@@W4CTRL_TYPE@@JPAUVectorStruct@@PATMatrixUnion@@@Z ; PLR_CreatePlayer
PUBLIC	?__LINE__Var@?1??PLR_CreatePlayer@@YAPAUPlayerStruct@@W4PLAYER_TYPE@@W4CTRL_TYPE@@JPAUVectorStruct@@PATMatrixUnion@@@Z@4JA ; `PLR_CreatePlayer'::`2'::__LINE__Var
PUBLIC	??_C@_0IL@BMBCJALI@c?3?2documents?5and?5settings?2jarhea@ ; `string'
EXTRN	?MOV_MoveCarNew@@YAXPAUobject_def@@@Z:NEAR	; MOV_MoveCarNew
EXTRN	?AI_CarAiHandler@@YAXPAUobject_def@@@Z:NEAR	; AI_CarAiHandler
EXTRN	?AI_RemoteAiHandler@@YAXPAUobject_def@@@Z:NEAR	; AI_RemoteAiHandler
EXTRN	?AI_GhostCarAiHandler@@YAXPAUobject_def@@@Z:NEAR ; AI_GhostCarAiHandler
EXTRN	?AI_InitPlayerAI@@YA_NPAUPlayerStruct@@@Z:NEAR	; AI_InitPlayerAI
EXTRN	?InitCar@@YAXPAUCarStruct@@@Z:NEAR		; InitCar
EXTRN	?SetupCar@@YAXPAUPlayerStruct@@H@Z:NEAR		; SetupCar
EXTRN	?SetCarPos@@YAXPAUCarStruct@@PAUVectorStruct@@PATMatrixUnion@@@Z:NEAR ; SetCarPos
EXTRN	?CON_LocalCarControl@@YAXPAUCtrlStruct@@PAUobject_def@@@Z:NEAR ; CON_LocalCarControl
EXTRN	?CRD_InitPlayerControl@@YAXPAUPlayerStruct@@W4CTRL_TYPE@@@Z:NEAR ; CRD_InitPlayerControl
EXTRN	__fltused:NEAR
EXTRN	?DebugAssert@@YAX_NHPAD@Z:NEAR			; DebugAssert
EXTRN	?COL_CarCollHandler@@YAXPAUobject_def@@@Z:NEAR	; COL_CarCollHandler
EXTRN	?OBJ_AllocObject@@YAPAUobject_def@@XZ:NEAR	; OBJ_AllocObject
EXTRN	?CAI_InitCarAI@@YAXPAUPlayerStruct@@J@Z:NEAR	; CAI_InitCarAI
;	COMDAT ??_C@_0IL@BMBCJALI@c?3?2documents?5and?5settings?2jarhea@
CONST	SEGMENT
??_C@_0IL@BMBCJALI@c?3?2documents?5and?5settings?2jarhea@ DB 'c:\document'
	DB	's and settings\jarhead\desktop\shit to display my love for xb'
	DB	'ox revolt and fuck you borman-ness\revolt source\source\playe'
	DB	'r.cpp', 00H					; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??PLR_CreatePlayer@@YAPAUPlayerStruct@@W4PLAYER_TYPE@@W4CTRL_TYPE@@JPAUVectorStruct@@PATMatrixUnion@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??PLR_CreatePlayer@@YAPAUPlayerStruct@@W4PLAYER_TYPE@@W4CTRL_TYPE@@JPAUVectorStruct@@PATMatrixUnion@@@Z@4JA DD 06eH ; `PLR_CreatePlayer'::`2'::__LINE__Var
; Function compile flags: /Odt /ZI
_DATA	ENDS
;	COMDAT ?PLR_CreatePlayer@@YAPAUPlayerStruct@@W4PLAYER_TYPE@@W4CTRL_TYPE@@JPAUVectorStruct@@PATMatrixUnion@@@Z
_TEXT	SEGMENT
_newobj$ = -8						; size = 4
_newplayer$ = -4					; size = 4
_Type$ = 8						; size = 4
_CtrlType$ = 12						; size = 4
_CarType$ = 16						; size = 4
_Pos$ = 20						; size = 4
_Mat$ = 24						; size = 4
?PLR_CreatePlayer@@YAPAUPlayerStruct@@W4PLAYER_TYPE@@W4CTRL_TYPE@@JPAUVectorStruct@@PATMatrixUnion@@@Z PROC NEAR ; PLR_CreatePlayer, COMDAT

; 110  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi

; 111  : 	PLAYER  *newplayer;
; 112  : 	OBJECT	*newobj;
; 113  : 
; 114  : 	// Make sure there are some spare player slots (huh huh....I think I'm gay...!)
; 115  : 	if (s_NextFreePlayer == NULL) {

	cmp	DWORD PTR ?s_NextFreePlayer@@3PAUPlayerStruct@@A, 0 ; s_NextFreePlayer
	jne	SHORT $L81392

; 116  : 		return NULL;

	xor	eax, eax
	jmp	$L81389
$L81392:

; 117  : 	}
; 118  : #ifdef _PC
; 119  : 	Assert(NumPlayers <= MAX_NUM_PLAYERS);

	push	OFFSET FLAT:??_C@_0IL@BMBCJALI@c?3?2documents?5and?5settings?2jarhea@
	mov	eax, DWORD PTR ?__LINE__Var@?1??PLR_CreatePlayer@@YAPAUPlayerStruct@@W4PLAYER_TYPE@@W4CTRL_TYPE@@JPAUVectorStruct@@PATMatrixUnion@@@Z@4JA
	add	eax, 9
	push	eax
	cmp	DWORD PTR ?NumPlayers@@3JA, 12		; NumPlayers, 0000000cH
	setle	cl
	push	ecx
	call	?DebugAssert@@YAX_NHPAD@Z		; DebugAssert
	add	esp, 12					; 0000000cH

; 120  : #endif
; 121  : 
; 122  : 	newobj = OBJ_AllocObject();

	call	?OBJ_AllocObject@@YAPAUobject_def@@XZ	; OBJ_AllocObject
	mov	DWORD PTR _newobj$[ebp], eax

; 123  : 	if (newobj == NULL)

	cmp	DWORD PTR _newobj$[ebp], 0
	jne	SHORT $L81395

; 124  : 	{
; 125  : 		return(NULL);									// Could not allocate object for player

	xor	eax, eax
	jmp	$L81389
$L81395:

; 126  : 	}
; 127  : 
; 128  : 	newplayer = s_NextFreePlayer;						// Get next empty player

	mov	eax, DWORD PTR ?s_NextFreePlayer@@3PAUPlayerStruct@@A ; s_NextFreePlayer
	mov	DWORD PTR _newplayer$[ebp], eax

; 129  : 
; 130  : 	s_NextFreePlayer = s_NextFreePlayer->next;

	mov	eax, DWORD PTR ?s_NextFreePlayer@@3PAUPlayerStruct@@A ; s_NextFreePlayer
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR ?s_NextFreePlayer@@3PAUPlayerStruct@@A, ecx ; s_NextFreePlayer

; 131  : 	if (s_NextFreePlayer != NULL)

	cmp	DWORD PTR ?s_NextFreePlayer@@3PAUPlayerStruct@@A, 0 ; s_NextFreePlayer
	je	SHORT $L81396

; 132  : 	{
; 133  : 		s_NextFreePlayer->prev = NULL;

	mov	eax, DWORD PTR ?s_NextFreePlayer@@3PAUPlayerStruct@@A ; s_NextFreePlayer
	mov	DWORD PTR [eax+8], 0
$L81396:

; 134  : 	}
; 135  : 
; 136  : 	newplayer->prev = PLR_PlayerTail;

	mov	eax, DWORD PTR _newplayer$[ebp]
	mov	ecx, DWORD PTR ?PLR_PlayerTail@@3PAUPlayerStruct@@A ; PLR_PlayerTail
	mov	DWORD PTR [eax+8], ecx

; 137  : 
; 138  : 	if (PLR_PlayerHead == NULL)

	cmp	DWORD PTR ?PLR_PlayerHead@@3PAUPlayerStruct@@A, 0 ; PLR_PlayerHead
	jne	SHORT $L81397

; 139  : 	{
; 140  : 		PLR_PlayerHead = newplayer;

	mov	eax, DWORD PTR _newplayer$[ebp]
	mov	DWORD PTR ?PLR_PlayerHead@@3PAUPlayerStruct@@A, eax ; PLR_PlayerHead

; 141  : 	}
; 142  : 	else

	jmp	SHORT $L81398
$L81397:

; 143  : 	{
; 144  :         PLR_PlayerTail->next = newplayer;

	mov	eax, DWORD PTR ?PLR_PlayerTail@@3PAUPlayerStruct@@A ; PLR_PlayerTail
	mov	ecx, DWORD PTR _newplayer$[ebp]
	mov	DWORD PTR [eax+12], ecx
$L81398:

; 145  : 	}
; 146  : 	PLR_PlayerTail = newplayer;

	mov	eax, DWORD PTR _newplayer$[ebp]
	mov	DWORD PTR ?PLR_PlayerTail@@3PAUPlayerStruct@@A, eax ; PLR_PlayerTail

; 147  : 	
; 148  : 	newplayer->next = NULL;

	mov	eax, DWORD PTR _newplayer$[ebp]
	mov	DWORD PTR [eax+12], 0

; 149  : 
; 150  : 	newplayer->ownobj = newobj;

	mov	eax, DWORD PTR _newplayer$[ebp]
	mov	ecx, DWORD PTR _newobj$[ebp]
	mov	DWORD PTR [eax+40], ecx

; 151  : 	newplayer->ownobj->player = newplayer;

	mov	eax, DWORD PTR _newplayer$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	edx, DWORD PTR _newplayer$[ebp]
	mov	DWORD PTR [ecx+588], edx

; 152  : 	newplayer->car.Body = &newplayer->ownobj->body;

	mov	eax, DWORD PTR _newplayer$[ebp]
	mov	ecx, DWORD PTR _newplayer$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	DWORD PTR [eax+900], edx

; 153  : 	newplayer->type = Type;

	mov	eax, DWORD PTR _newplayer$[ebp]
	mov	ecx, DWORD PTR _Type$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 154  : 
; 155  : 	newplayer->ctrltype = CtrlType;							// Set up controller used by player

	mov	eax, DWORD PTR _newplayer$[ebp]
	mov	ecx, DWORD PTR _CtrlType$[ebp]
	mov	DWORD PTR [eax+16], ecx

; 156  : 	newplayer->conhandler = NULL;

	mov	eax, DWORD PTR _newplayer$[ebp]
	mov	DWORD PTR [eax+24], 0

; 157  : #ifndef _PSX
; 158  : 	CRD_InitPlayerControl(newplayer, CtrlType);

	mov	eax, DWORD PTR _CtrlType$[ebp]
	push	eax
	mov	ecx, DWORD PTR _newplayer$[ebp]
	push	ecx
	call	?CRD_InitPlayerControl@@YAXPAUPlayerStruct@@W4CTRL_TYPE@@@Z ; CRD_InitPlayerControl
	add	esp, 8

; 159  : #endif
; 160  : 
; 161  : 	newplayer->ownobj->flag.Draw = FALSE;

	mov	eax, DWORD PTR _newplayer$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	edx, DWORD PTR [ecx+580]
	and	edx, -2					; fffffffeH
	mov	eax, DWORD PTR _newplayer$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR [ecx+580], edx

; 162  : 	newplayer->ownobj->flag.Move = TRUE;

	mov	eax, DWORD PTR _newplayer$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	edx, DWORD PTR [ecx+580]
	or	edx, 2
	mov	eax, DWORD PTR _newplayer$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR [ecx+580], edx

; 163  : 	newplayer->ownobj->renderhandler = NULL;

	mov	eax, DWORD PTR _newplayer$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR [ecx+700], 0

; 164  : 	newplayer->ownobj->freehandler = NULL;

	mov	eax, DWORD PTR _newplayer$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR [ecx+704], 0

; 165  : 	newplayer->ownobj->Type = OBJECT_TYPE_CAR;

	mov	eax, DWORD PTR _newplayer$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR [ecx+568], -1

; 166  : 	newplayer->ownobj->Field = NULL;

	mov	eax, DWORD PTR _newplayer$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR [ecx+664], 0

; 167  : 
; 168  : 	if (Type == PLAYER_LOCAL)

	cmp	DWORD PTR _Type$[ebp], 1
	jne	SHORT $L81399

; 169  : 	{
; 170  : #ifndef _PSX
; 171  : 		newplayer->conhandler = (CON_HANDLER)CON_LocalCarControl;

	mov	eax, DWORD PTR _newplayer$[ebp]
	mov	DWORD PTR [eax+24], OFFSET FLAT:?CON_LocalCarControl@@YAXPAUCtrlStruct@@PAUobject_def@@@Z ; CON_LocalCarControl

; 172  : #endif
; 173  : 		newplayer->ownobj->aihandler = (AI_HANDLER)AI_CarAiHandler;

	mov	eax, DWORD PTR _newplayer$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR [ecx+696], OFFSET FLAT:?AI_CarAiHandler@@YAXPAUobject_def@@@Z ; AI_CarAiHandler

; 174  : 		newplayer->ownobj->CollType = COLL_TYPE_CAR;

	mov	eax, DWORD PTR _newplayer$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR [ecx+660], 2

; 175  : 		newplayer->ownobj->movehandler = (MOVE_HANDLER)MOV_MoveCarNew;

	mov	eax, DWORD PTR _newplayer$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR [ecx+688], OFFSET FLAT:?MOV_MoveCarNew@@YAXPAUobject_def@@@Z ; MOV_MoveCarNew

; 176  : 		newplayer->ownobj->collhandler = (COLL_HANDLER)COL_CarCollHandler;

	mov	eax, DWORD PTR _newplayer$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR [ecx+692], OFFSET FLAT:?COL_CarCollHandler@@YAXPAUobject_def@@@Z ; COL_CarCollHandler

; 177  : 	}
; 178  : 	else if (Type == PLAYER_CPU)

	jmp	$L81404
$L81399:
	cmp	DWORD PTR _Type$[ebp], 3
	jne	SHORT $L81405

; 179  : 	{
; 180  : 		newplayer->ownobj->aihandler = (AI_HANDLER)AI_CarAiHandler;

	mov	eax, DWORD PTR _newplayer$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR [ecx+696], OFFSET FLAT:?AI_CarAiHandler@@YAXPAUobject_def@@@Z ; AI_CarAiHandler

; 181  : 		newplayer->ownobj->CollType = COLL_TYPE_CAR;

	mov	eax, DWORD PTR _newplayer$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR [ecx+660], 2

; 182  : 		newplayer->ownobj->movehandler = (MOVE_HANDLER)MOV_MoveCarNew;

	mov	eax, DWORD PTR _newplayer$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR [ecx+688], OFFSET FLAT:?MOV_MoveCarNew@@YAXPAUobject_def@@@Z ; MOV_MoveCarNew

; 183  : 		newplayer->ownobj->collhandler = (COLL_HANDLER)COL_CarCollHandler;

	mov	eax, DWORD PTR _newplayer$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR [ecx+692], OFFSET FLAT:?COL_CarCollHandler@@YAXPAUobject_def@@@Z ; COL_CarCollHandler

; 184  : 	}
; 185  : #ifdef _PC
; 186  : 	else if (Type == PLAYER_GHOST)

	jmp	$L81404
$L81405:
	cmp	DWORD PTR _Type$[ebp], 4
	jne	SHORT $L81410

; 187  : 	{
; 188  : 		newplayer->ownobj->CollType = COLL_TYPE_NONE;

	mov	eax, DWORD PTR _newplayer$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR [ecx+660], 0

; 189  : 		newplayer->ownobj->movehandler = NULL;

	mov	eax, DWORD PTR _newplayer$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR [ecx+688], 0

; 190  : 		newplayer->ownobj->collhandler = NULL;

	mov	eax, DWORD PTR _newplayer$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR [ecx+692], 0

; 191  : 		newplayer->ownobj->aihandler = (AI_HANDLER)AI_GhostCarAiHandler;

	mov	eax, DWORD PTR _newplayer$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR [ecx+696], OFFSET FLAT:?AI_GhostCarAiHandler@@YAXPAUobject_def@@@Z ; AI_GhostCarAiHandler

; 192  : 	}
; 193  : 	else if (Type == PLAYER_REMOTE)

	jmp	$L81404
$L81410:
	cmp	DWORD PTR _Type$[ebp], 2
	jne	SHORT $L81413

; 194  : 	{
; 195  : 		newplayer->conhandler = (CON_HANDLER)CON_LocalCarControl;

	mov	eax, DWORD PTR _newplayer$[ebp]
	mov	DWORD PTR [eax+24], OFFSET FLAT:?CON_LocalCarControl@@YAXPAUCtrlStruct@@PAUobject_def@@@Z ; CON_LocalCarControl

; 196  : 		newplayer->ownobj->CollType = COLL_TYPE_CAR;

	mov	eax, DWORD PTR _newplayer$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR [ecx+660], 2

; 197  : 		newplayer->ownobj->movehandler = (MOVE_HANDLER)MOV_MoveCarNew;

	mov	eax, DWORD PTR _newplayer$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR [ecx+688], OFFSET FLAT:?MOV_MoveCarNew@@YAXPAUobject_def@@@Z ; MOV_MoveCarNew

; 198  : 		newplayer->ownobj->collhandler = (COLL_HANDLER)COL_CarCollHandler;

	mov	eax, DWORD PTR _newplayer$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR [ecx+692], OFFSET FLAT:?COL_CarCollHandler@@YAXPAUobject_def@@@Z ; COL_CarCollHandler

; 199  : 		newplayer->ownobj->aihandler = (AI_HANDLER)AI_RemoteAiHandler;

	mov	eax, DWORD PTR _newplayer$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR [ecx+696], OFFSET FLAT:?AI_RemoteAiHandler@@YAXPAUobject_def@@@Z ; AI_RemoteAiHandler

; 200  : 	}
; 201  : 
; 202  : #endif
; 203  : 	else 

	jmp	SHORT $L81404
$L81413:

; 204  : 	{
; 205  : 		newplayer->ownobj->CollType = COLL_TYPE_NONE;

	mov	eax, DWORD PTR _newplayer$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR [ecx+660], 0

; 206  : 		newplayer->ownobj->movehandler = NULL;

	mov	eax, DWORD PTR _newplayer$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR [ecx+688], 0

; 207  : 		newplayer->ownobj->collhandler = NULL;

	mov	eax, DWORD PTR _newplayer$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR [ecx+692], 0

; 208  : 		newplayer->ownobj->aihandler = NULL;

	mov	eax, DWORD PTR _newplayer$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR [ecx+696], 0
$L81404:

; 209  : 	}
; 210  : 
; 211  : 	AI_InitPlayerAI(newplayer);

	mov	eax, DWORD PTR _newplayer$[ebp]
	push	eax
	call	?AI_InitPlayerAI@@YA_NPAUPlayerStruct@@@Z ; AI_InitPlayerAI
	add	esp, 4

; 212  : 
; 213  : 	InitCar(&newplayer->car);

	mov	eax, DWORD PTR _newplayer$[ebp]
	add	eax, 44					; 0000002cH
	push	eax
	call	?InitCar@@YAXPAUCarStruct@@@Z		; InitCar
	add	esp, 4

; 214  : 	SetupCar(newplayer, CarType);

	mov	eax, DWORD PTR _CarType$[ebp]
	push	eax
	mov	ecx, DWORD PTR _newplayer$[ebp]
	push	ecx
	call	?SetupCar@@YAXPAUPlayerStruct@@H@Z	; SetupCar
	add	esp, 8

; 215  : 	SetCarPos(&newplayer->car, Pos, Mat);

	mov	eax, DWORD PTR _Mat$[ebp]
	push	eax
	mov	ecx, DWORD PTR _Pos$[ebp]
	push	ecx
	mov	edx, DWORD PTR _newplayer$[ebp]
	add	edx, 44					; 0000002cH
	push	edx
	call	?SetCarPos@@YAXPAUCarStruct@@PAUVectorStruct@@PATMatrixUnion@@@Z ; SetCarPos
	add	esp, 12					; 0000000cH

; 216  : 
; 217  : #ifndef _PSX
; 218  : 	CAI_InitCarAI(newplayer, 0);

	push	0
	mov	eax, DWORD PTR _newplayer$[ebp]
	push	eax
	call	?CAI_InitCarAI@@YAXPAUPlayerStruct@@J@Z	; CAI_InitCarAI
	add	esp, 8

; 219  : #endif
; 220  : 
; 221  : 	NumPlayers++;

	mov	eax, DWORD PTR ?NumPlayers@@3JA		; NumPlayers
	add	eax, 1
	mov	DWORD PTR ?NumPlayers@@3JA, eax		; NumPlayers

; 222  : 
; 223  : 	newplayer->PickupCycleSpeed = 0;

	mov	eax, DWORD PTR _newplayer$[ebp]
	mov	DWORD PTR [eax+10224], 0

; 224  : 	newplayer->PickupNum = 0;

	mov	eax, DWORD PTR _newplayer$[ebp]
	mov	DWORD PTR [eax+10232], 0

; 225  : 	newplayer->ValidRailCamNode = -1;

	mov	eax, DWORD PTR _newplayer$[ebp]
	mov	DWORD PTR [eax+10312], -1

; 226  : 	newplayer->LastValidRailCamNode = -1;

	mov	eax, DWORD PTR _newplayer$[ebp]
	mov	DWORD PTR [eax+10316], -1

; 227  : 
; 228  : 	return(newplayer);				// Success

	mov	eax, DWORD PTR _newplayer$[ebp]
$L81389:

; 229  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?PLR_CreatePlayer@@YAPAUPlayerStruct@@W4PLAYER_TYPE@@W4CTRL_TYPE@@JPAUVectorStruct@@PATMatrixUnion@@@Z ENDP ; PLR_CreatePlayer
_TEXT	ENDS
PUBLIC	?PLR_SetPlayerType@@YAXPAUPlayerStruct@@W4PLAYER_TYPE@@@Z ; PLR_SetPlayerType
; Function compile flags: /Odt /ZI
;	COMDAT ?PLR_SetPlayerType@@YAXPAUPlayerStruct@@W4PLAYER_TYPE@@@Z
_TEXT	SEGMENT
_player$ = 8						; size = 4
_type$ = 12						; size = 4
?PLR_SetPlayerType@@YAXPAUPlayerStruct@@W4PLAYER_TYPE@@@Z PROC NEAR ; PLR_SetPlayerType, COMDAT

; 234  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 235  : 	player->type = type;

	mov	eax, DWORD PTR _player$[ebp]
	mov	ecx, DWORD PTR _type$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 236  : 
; 237  : 	if (type == PLAYER_LOCAL)

	cmp	DWORD PTR _type$[ebp], 1
	jne	SHORT $L81423

; 238  : 	{
; 239  : #if defined(_N64)
; 240  : 		player->ctrltype = CTRL_TYPE_STD;
; 241  : 		CRD_InitPlayerControl(player, CTRL_TYPE_STD);
; 242  : 		player->conhandler = (CON_HANDLER)CON_LocalCarControl;
; 243  : #elif defined(_PC)
; 244  : 		player->ctrltype = PLR_LocalCtrlType;

	mov	eax, DWORD PTR _player$[ebp]
	mov	ecx, DWORD PTR ?PLR_LocalCtrlType@@3W4CTRL_TYPE@@A ; PLR_LocalCtrlType
	mov	DWORD PTR [eax+16], ecx

; 245  : 		CRD_InitPlayerControl(player, player->ctrltype);

	mov	eax, DWORD PTR _player$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR _player$[ebp]
	push	edx
	call	?CRD_InitPlayerControl@@YAXPAUPlayerStruct@@W4CTRL_TYPE@@@Z ; CRD_InitPlayerControl
	add	esp, 8

; 246  : 		player->conhandler = (CON_HANDLER)CON_LocalCarControl;

	mov	eax, DWORD PTR _player$[ebp]
	mov	DWORD PTR [eax+24], OFFSET FLAT:?CON_LocalCarControl@@YAXPAUCtrlStruct@@PAUobject_def@@@Z ; CON_LocalCarControl

; 247  : #elif defined(_PSX)
; 248  : 		player->ctrltype = PLR_LocalCtrlType;
; 249  : #endif
; 250  : 	}
; 251  : 	else if (type == PLAYER_CPU)

	jmp	SHORT $L81422
$L81423:
	cmp	DWORD PTR _type$[ebp], 3
	jne	SHORT $L81422

; 252  : 	{
; 253  : 		player->ctrltype = CTRL_TYPE_NONE;

	mov	eax, DWORD PTR _player$[ebp]
	mov	DWORD PTR [eax+16], 0

; 254  : #ifndef _PSX
; 255  : 		CRD_InitPlayerControl(player, player->ctrltype);

	mov	eax, DWORD PTR _player$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR _player$[ebp]
	push	edx
	call	?CRD_InitPlayerControl@@YAXPAUPlayerStruct@@W4CTRL_TYPE@@@Z ; CRD_InitPlayerControl
	add	esp, 8

; 256  : #endif
; 257  : 		player->conhandler = NULL;

	mov	eax, DWORD PTR _player$[ebp]
	mov	DWORD PTR [eax+24], 0
$L81422:

; 258  : 	}
; 259  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?PLR_SetPlayerType@@YAXPAUPlayerStruct@@W4PLAYER_TYPE@@@Z ENDP ; PLR_SetPlayerType
_TEXT	ENDS
PUBLIC	?PLR_KillPlayer@@YAXPAUPlayerStruct@@@Z		; PLR_KillPlayer
EXTRN	?FreeCar@@YAXPAUPlayerStruct@@@Z:NEAR		; FreeCar
EXTRN	?OBJ_FreeObject@@YAJPAUobject_def@@@Z:NEAR	; OBJ_FreeObject
; Function compile flags: /Odt /ZI
;	COMDAT ?PLR_KillPlayer@@YAXPAUPlayerStruct@@@Z
_TEXT	SEGMENT
_Player$ = 8						; size = 4
?PLR_KillPlayer@@YAXPAUPlayerStruct@@@Z PROC NEAR	; PLR_KillPlayer, COMDAT

; 264  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 265  : 	FreeCar(Player);

	mov	eax, DWORD PTR _Player$[ebp]
	push	eax
	call	?FreeCar@@YAXPAUPlayerStruct@@@Z	; FreeCar
	add	esp, 4

; 266  : 	OBJ_FreeObject(Player->ownobj);

	mov	eax, DWORD PTR _Player$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	push	ecx
	call	?OBJ_FreeObject@@YAJPAUobject_def@@@Z	; OBJ_FreeObject
	add	esp, 4

; 267  : 
; 268  : 	if (Player->prev != NULL)

	mov	eax, DWORD PTR _Player$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $L81430

; 269  : 	{						 
; 270  : 		(Player->prev)->next = Player->next;

	mov	eax, DWORD PTR _Player$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _Player$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR [ecx+12], eax

; 271  : 	}
; 272  : 	else

	jmp	SHORT $L81431
$L81430:

; 273  :     {
; 274  :         PLR_PlayerHead = Player->next;

	mov	eax, DWORD PTR _Player$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR ?PLR_PlayerHead@@3PAUPlayerStruct@@A, ecx ; PLR_PlayerHead
$L81431:

; 275  : 	}
; 276  : 
; 277  : 	if (Player->next != NULL)

	mov	eax, DWORD PTR _Player$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $L81432

; 278  : 	{
; 279  : 		(Player->next)->prev = Player->prev;

	mov	eax, DWORD PTR _Player$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _Player$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax

; 280  : 	}
; 281  : 	else 

	jmp	SHORT $L81433
$L81432:

; 282  : 	{
; 283  : 		PLR_PlayerTail = Player->prev;

	mov	eax, DWORD PTR _Player$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR ?PLR_PlayerTail@@3PAUPlayerStruct@@A, ecx ; PLR_PlayerTail
$L81433:

; 284  : 	}
; 285  : 
; 286  : 
; 287  : 	if (s_NextFreePlayer != NULL)

	cmp	DWORD PTR ?s_NextFreePlayer@@3PAUPlayerStruct@@A, 0 ; s_NextFreePlayer
	je	SHORT $L81434

; 288  : 	{
; 289  : 		s_NextFreePlayer->prev = Player;

	mov	eax, DWORD PTR ?s_NextFreePlayer@@3PAUPlayerStruct@@A ; s_NextFreePlayer
	mov	ecx, DWORD PTR _Player$[ebp]
	mov	DWORD PTR [eax+8], ecx
$L81434:

; 290  : 	}
; 291  : 
; 292  : 	Player->next = s_NextFreePlayer;

	mov	eax, DWORD PTR _Player$[ebp]
	mov	ecx, DWORD PTR ?s_NextFreePlayer@@3PAUPlayerStruct@@A ; s_NextFreePlayer
	mov	DWORD PTR [eax+12], ecx

; 293  : 	Player->prev = NULL;

	mov	eax, DWORD PTR _Player$[ebp]
	mov	DWORD PTR [eax+8], 0

; 294  : 	s_NextFreePlayer = Player;

	mov	eax, DWORD PTR _Player$[ebp]
	mov	DWORD PTR ?s_NextFreePlayer@@3PAUPlayerStruct@@A, eax ; s_NextFreePlayer

; 295  : 	
; 296  : 
; 297  : 	// Reinitialise
; 298  : 	Player->type = PLAYER_NONE;

	mov	eax, DWORD PTR _Player$[ebp]
	mov	DWORD PTR [eax+4], 0

; 299  : 	Player->ownobj = NULL;

	mov	eax, DWORD PTR _Player$[ebp]
	mov	DWORD PTR [eax+40], 0

; 300  : 
; 301  : 	// Keep count
; 302  : 	NumPlayers--;

	mov	eax, DWORD PTR ?NumPlayers@@3JA		; NumPlayers
	sub	eax, 1
	mov	DWORD PTR ?NumPlayers@@3JA, eax		; NumPlayers

; 303  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?PLR_KillPlayer@@YAXPAUPlayerStruct@@@Z ENDP		; PLR_KillPlayer
_TEXT	ENDS
PUBLIC	?PLR_KillAllPlayers@@YAXXZ			; PLR_KillAllPlayers
; Function compile flags: /Odt /ZI
;	COMDAT ?PLR_KillAllPlayers@@YAXXZ
_TEXT	SEGMENT
_iP$ = -4						; size = 4
?PLR_KillAllPlayers@@YAXXZ PROC NEAR			; PLR_KillAllPlayers, COMDAT

; 308  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 309  : 	int iP;
; 310  : 
; 311  : 	for (iP = 0; iP < MAX_NUM_PLAYERS; iP++)

	mov	DWORD PTR _iP$[ebp], 0
	jmp	SHORT $L81439
$L81440:
	mov	eax, DWORD PTR _iP$[ebp]
	add	eax, 1
	mov	DWORD PTR _iP$[ebp], eax
$L81439:
	cmp	DWORD PTR _iP$[ebp], 12			; 0000000cH
	jge	SHORT $L81437

; 312  : 	{
; 313  : 		if (Players[iP].type != PLAYER_NONE)

	mov	eax, DWORD PTR _iP$[ebp]
	imul	eax, 10320				; 00002850H
	cmp	DWORD PTR ?Players@@3PAUPlayerStruct@@A[eax+4], 0
	je	SHORT $L81442

; 314  : 		{
; 315  : 			PLR_KillPlayer(&Players[iP]);

	mov	eax, DWORD PTR _iP$[ebp]
	imul	eax, 10320				; 00002850H
	add	eax, OFFSET FLAT:?Players@@3PAUPlayerStruct@@A ; Players
	push	eax
	call	?PLR_KillPlayer@@YAXPAUPlayerStruct@@@Z	; PLR_KillPlayer
	add	esp, 4
$L81442:

; 316  : 		}
; 317  : 	}

	jmp	SHORT $L81440
$L81437:

; 318  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?PLR_KillAllPlayers@@YAXXZ ENDP				; PLR_KillAllPlayers
_TEXT	ENDS
PUBLIC	?CreatePlayerForceField@@YAXPAUPlayerStruct@@@Z	; CreatePlayerForceField
EXTRN	?AddLocalField@@YAPAUForceFieldStruct@@JJPAUVectorStruct@@PATMatrixUnion@@PAUBBOX@@00MM@Z:NEAR ; AddLocalField
; Function compile flags: /Odt /ZI
;	COMDAT ?CreatePlayerForceField@@YAXPAUPlayerStruct@@@Z
_TEXT	SEGMENT
_size$ = -36						; size = 12
_bBox$ = -24						; size = 24
_player$ = 8						; size = 4
?CreatePlayerForceField@@YAXPAUPlayerStruct@@@Z PROC NEAR ; CreatePlayerForceField, COMDAT

; 328  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 100				; 00000064H
	push	ebx
	push	esi
	push	edi

; 329  : 	BBOX bBox;
; 330  : 	VEC size;
; 331  : 
; 332  : 	SetBBox(&bBox, -1.73f * CAR_RADIUS, 1.73f * CAR_RADIUS, -1.73f * CAR_RADIUS, 1.73f * CAR_RADIUS, -1.73f * CAR_RADIUS, 1.73f * CAR_RADIUS);

	mov	DWORD PTR _bBox$[ebp], -1024314573	; c2f23333H
	mov	DWORD PTR _bBox$[ebp+4], 1123169075	; 42f23333H
	mov	DWORD PTR _bBox$[ebp+8], -1024314573	; c2f23333H
	mov	DWORD PTR _bBox$[ebp+12], 1123169075	; 42f23333H
	mov	DWORD PTR _bBox$[ebp+16], -1024314573	; c2f23333H
	mov	DWORD PTR _bBox$[ebp+20], 1123169075	; 42f23333H

; 333  : 	SetVec(&size, CAR_RADIUS, CAR_RADIUS, CAR_RADIUS);

	mov	DWORD PTR _size$[ebp], 1116471296	; 428c0000H
	mov	DWORD PTR _size$[ebp+4], 1116471296	; 428c0000H
	mov	DWORD PTR _size$[ebp+8], 1116471296	; 428c0000H

; 334  : 
; 335  : 	player->ownobj->Field = AddLocalField(
; 336  : 		player->ownobj->ObjID,
; 337  : 		FIELD_PRIORITY_MAX, 
; 338  : 		&player->car.Body->Centre.Pos,
; 339  : 		&player->car.Body->Centre.WMatrix,
; 340  : 		&bBox, 
; 341  : 		&size,
; 342  : 		&player->car.FieldVec,
; 343  : 		ONE,
; 344  : 		ZERO);

	push	0
	push	1065353216				; 3f800000H
	mov	eax, DWORD PTR _player$[ebp]
	add	eax, 3608				; 00000e18H
	push	eax
	lea	ecx, DWORD PTR _size$[ebp]
	push	ecx
	lea	edx, DWORD PTR _bBox$[ebp]
	push	edx
	mov	eax, DWORD PTR _player$[ebp]
	mov	ecx, DWORD PTR [eax+900]
	add	ecx, 100				; 00000064H
	push	ecx
	mov	edx, DWORD PTR _player$[ebp]
	mov	eax, DWORD PTR [edx+900]
	add	eax, 20					; 00000014H
	push	eax
	push	0
	mov	ecx, DWORD PTR _player$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	eax, DWORD PTR [edx+576]
	push	eax
	call	?AddLocalField@@YAPAUForceFieldStruct@@JJPAUVectorStruct@@PATMatrixUnion@@PAUBBOX@@00MM@Z ; AddLocalField
	add	esp, 36					; 00000024H
	mov	ecx, DWORD PTR _player$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	DWORD PTR [edx+664], eax

; 345  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?CreatePlayerForceField@@YAXPAUPlayerStruct@@@Z ENDP	; CreatePlayerForceField
_TEXT	ENDS
END
