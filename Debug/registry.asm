; Listing generated by Microsoft (R) Optimizing Compiler Version 13.10.3077 

	TITLE	.\source\registry.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT PARA USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_05GELMOPIA@MUSE1?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_06JBKJDKHK@Revolt?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BI@JDPEGFEI@software?2Acclaim?2Revolt?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_07DILIIMFO@EnvFlag?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0L@GKIIGBBM@MirrorFlag?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_09JMMNONGG@AutoBrake?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0L@GJODCEE@ShadowFlag?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_09FPBNBKIK@LightFlag?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0N@DKGGNKOC@InstanceFlag?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_08JHAJNHFA@SkidFlag?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_05EJMLCMDK@CarID?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0M@GOACCFHI@ScreenWidth?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0N@EJILFHEF@ScreenHeight?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_09CIKLDENJ@ScreenBpp?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0L@GHACPEEL@DrawDevice?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0L@JCLLFKLB@Brightness?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_08KBHEFHNJ@Contrast?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0L@OLALPLEN@TextureBpp?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0L@HMKCBGMC@PlayerName?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_08HMGBHAJI@LevelDir?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _IsEqualGUID
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _==
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _acosl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _asinl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _atanl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _atan2l
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _ceill
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _cosl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _coshl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _expl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _fabsl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _floorl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _fmodl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _frexpl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _ldexpl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _logl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _log10l
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _modfl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _powl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _sinl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _sinhl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _sqrtl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _tanl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _tanhl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _frexpf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _ldexpf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _acosf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _asinf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _atanf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _atan2f
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _ceilf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _cosf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _coshf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _expf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _fabsf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _floorf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _fmodf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _logf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _log10f
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _modff
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _powf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _sinf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _sinhf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _sqrtf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _tanf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _tanhf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetRegistrySettings@@YAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetRegistrySettings@@YAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Pow_int@N@@YANNH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Pow_int@H@@YAHHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Pow_int@M@@YAMMH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Pow_int@O@@YAOOH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
sxdata	SEGMENT DWORD USE32 'SXDATA'
sxdata	ENDS
FLAT	GROUP _DATA, CONST, _BSS
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBCD
INCLUDELIB OLDNAMES

PUBLIC	?RegistrySettings@@3UREGISTRY_SETTINGS@@A	; RegistrySettings
_BSS	SEGMENT
?RegistrySettings@@3UREGISTRY_SETTINGS@@A DB 08cH DUP (?) ; RegistrySettings
_BSS	ENDS
PUBLIC	?GetRegistrySettings@@YAXXZ			; GetRegistrySettings
PUBLIC	??_C@_05GELMOPIA@MUSE1?$AA@			; `string'
PUBLIC	??_C@_06JBKJDKHK@Revolt?$AA@			; `string'
PUBLIC	??_C@_0BI@JDPEGFEI@software?2Acclaim?2Revolt?$AA@ ; `string'
PUBLIC	??_C@_07DILIIMFO@EnvFlag?$AA@			; `string'
PUBLIC	??_C@_0L@GKIIGBBM@MirrorFlag?$AA@		; `string'
PUBLIC	??_C@_09JMMNONGG@AutoBrake?$AA@			; `string'
PUBLIC	??_C@_0L@GJODCEE@ShadowFlag?$AA@		; `string'
PUBLIC	??_C@_09FPBNBKIK@LightFlag?$AA@			; `string'
PUBLIC	??_C@_0N@DKGGNKOC@InstanceFlag?$AA@		; `string'
PUBLIC	??_C@_08JHAJNHFA@SkidFlag?$AA@			; `string'
PUBLIC	??_C@_05EJMLCMDK@CarID?$AA@			; `string'
PUBLIC	??_C@_0M@GOACCFHI@ScreenWidth?$AA@		; `string'
PUBLIC	??_C@_0N@EJILFHEF@ScreenHeight?$AA@		; `string'
PUBLIC	??_C@_09CIKLDENJ@ScreenBpp?$AA@			; `string'
PUBLIC	??_C@_0L@GHACPEEL@DrawDevice?$AA@		; `string'
PUBLIC	??_C@_0L@JCLLFKLB@Brightness?$AA@		; `string'
PUBLIC	??_C@_08KBHEFHNJ@Contrast?$AA@			; `string'
PUBLIC	??_C@_0L@OLALPLEN@TextureBpp?$AA@		; `string'
PUBLIC	??_C@_0L@HMKCBGMC@PlayerName?$AA@		; `string'
PUBLIC	??_C@_08HMGBHAJI@LevelDir?$AA@			; `string'
EXTRN	__imp__GetUserNameA@8:NEAR
EXTRN	__imp__RegCloseKey@4:NEAR
EXTRN	__imp__RegCreateKeyExA@36:NEAR
EXTRN	__imp__RegQueryValueExA@24:NEAR
EXTRN	?GameSettings@@3UGAME_SETTINGS@@A:BYTE		; GameSettings
EXTRN	?RenderSettings@@3URENDER_SETTINGS@@A:BYTE	; RenderSettings
EXTRN	__imp__wsprintfA:NEAR
;	COMDAT ??_C@_05GELMOPIA@MUSE1?$AA@
; File c:\documents and settings\jarhead\desktop\shit to display my love for xbox revolt and fuck you borman-ness\revolt source\source\registry.cpp
CONST	SEGMENT
??_C@_05GELMOPIA@MUSE1?$AA@ DB 'MUSE1', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06JBKJDKHK@Revolt?$AA@
CONST	SEGMENT
??_C@_06JBKJDKHK@Revolt?$AA@ DB 'Revolt', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@JDPEGFEI@software?2Acclaim?2Revolt?$AA@
CONST	SEGMENT
??_C@_0BI@JDPEGFEI@software?2Acclaim?2Revolt?$AA@ DB 'software\Acclaim\Re'
	DB	'volt', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_07DILIIMFO@EnvFlag?$AA@
CONST	SEGMENT
??_C@_07DILIIMFO@EnvFlag?$AA@ DB 'EnvFlag', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@GKIIGBBM@MirrorFlag?$AA@
CONST	SEGMENT
??_C@_0L@GKIIGBBM@MirrorFlag?$AA@ DB 'MirrorFlag', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09JMMNONGG@AutoBrake?$AA@
CONST	SEGMENT
??_C@_09JMMNONGG@AutoBrake?$AA@ DB 'AutoBrake', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@GJODCEE@ShadowFlag?$AA@
CONST	SEGMENT
??_C@_0L@GJODCEE@ShadowFlag?$AA@ DB 'ShadowFlag', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09FPBNBKIK@LightFlag?$AA@
CONST	SEGMENT
??_C@_09FPBNBKIK@LightFlag?$AA@ DB 'LightFlag', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@DKGGNKOC@InstanceFlag?$AA@
CONST	SEGMENT
??_C@_0N@DKGGNKOC@InstanceFlag?$AA@ DB 'InstanceFlag', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08JHAJNHFA@SkidFlag?$AA@
CONST	SEGMENT
??_C@_08JHAJNHFA@SkidFlag?$AA@ DB 'SkidFlag', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05EJMLCMDK@CarID?$AA@
CONST	SEGMENT
??_C@_05EJMLCMDK@CarID?$AA@ DB 'CarID', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@GOACCFHI@ScreenWidth?$AA@
CONST	SEGMENT
??_C@_0M@GOACCFHI@ScreenWidth?$AA@ DB 'ScreenWidth', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@EJILFHEF@ScreenHeight?$AA@
CONST	SEGMENT
??_C@_0N@EJILFHEF@ScreenHeight?$AA@ DB 'ScreenHeight', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09CIKLDENJ@ScreenBpp?$AA@
CONST	SEGMENT
??_C@_09CIKLDENJ@ScreenBpp?$AA@ DB 'ScreenBpp', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@GHACPEEL@DrawDevice?$AA@
CONST	SEGMENT
??_C@_0L@GHACPEEL@DrawDevice?$AA@ DB 'DrawDevice', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@JCLLFKLB@Brightness?$AA@
CONST	SEGMENT
??_C@_0L@JCLLFKLB@Brightness?$AA@ DB 'Brightness', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08KBHEFHNJ@Contrast?$AA@
CONST	SEGMENT
??_C@_08KBHEFHNJ@Contrast?$AA@ DB 'Contrast', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@OLALPLEN@TextureBpp?$AA@
CONST	SEGMENT
??_C@_0L@OLALPLEN@TextureBpp?$AA@ DB 'TextureBpp', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@HMKCBGMC@PlayerName?$AA@
CONST	SEGMENT
??_C@_0L@HMKCBGMC@PlayerName?$AA@ DB 'PlayerName', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08HMGBHAJI@LevelDir?$AA@
CONST	SEGMENT
??_C@_08HMGBHAJI@LevelDir?$AA@ DB 'LevelDir', 00H	; `string'
; Function compile flags: /Odt /ZI
CONST	ENDS
;	COMDAT ?GetRegistrySettings@@YAXXZ
_TEXT	SEGMENT
__s$80002 = -84						; size = 4
__s$79999 = -80						; size = 4
__s$79996 = -76						; size = 4
__s$79993 = -72						; size = 4
__s$79990 = -68						; size = 4
__s$79987 = -64						; size = 4
__s$79984 = -60						; size = 4
__s$79981 = -56						; size = 4
__s$79978 = -52						; size = 4
__s$79975 = -48						; size = 4
__s$79972 = -44						; size = 4
__s$79969 = -40						; size = 4
__s$79966 = -36						; size = 4
__s$79963 = -32						; size = 4
__s$79960 = -28						; size = 4
__s$79957 = -24						; size = 4
__s$79954 = -20						; size = 4
_flag$ = -16						; size = 4
_size$ = -12						; size = 4
_key$ = -8						; size = 4
_r$ = -4						; size = 4
?GetRegistrySettings@@YAXXZ PROC NEAR			; GetRegistrySettings, COMDAT

; 14   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 148				; 00000094H
	push	ebx
	push	esi
	push	edi

; 15   : 	long r;
; 16   : 	HKEY key;
; 17   : 	DWORD size, flag;
; 18   : 
; 19   : // set defaults
; 20   : 
; 21   : 	RegistrySettings.EnvFlag = TRUE;

	mov	DWORD PTR ?RegistrySettings@@3UREGISTRY_SETTINGS@@A, 1

; 22   : 	RegistrySettings.MirrorFlag = TRUE;

	mov	DWORD PTR ?RegistrySettings@@3UREGISTRY_SETTINGS@@A+4, 1

; 23   : 	RegistrySettings.AutoBrake = FALSE;

	mov	DWORD PTR ?RegistrySettings@@3UREGISTRY_SETTINGS@@A+8, 0

; 24   : 	RegistrySettings.ShadowFlag = TRUE;

	mov	DWORD PTR ?RegistrySettings@@3UREGISTRY_SETTINGS@@A+12, 1

; 25   : 
; 26   : 	RegistrySettings.LightFlag = TRUE;

	mov	DWORD PTR ?RegistrySettings@@3UREGISTRY_SETTINGS@@A+16, 1

; 27   : 	RegistrySettings.InstanceFlag = TRUE;

	mov	DWORD PTR ?RegistrySettings@@3UREGISTRY_SETTINGS@@A+20, 1

; 28   : 	RegistrySettings.SkidFlag = TRUE;

	mov	DWORD PTR ?RegistrySettings@@3UREGISTRY_SETTINGS@@A+24, 1

; 29   : 	RegistrySettings.CarID = 0;

	mov	DWORD PTR ?RegistrySettings@@3UREGISTRY_SETTINGS@@A+28, 0

; 30   : 
; 31   : 	RegistrySettings.ScreenWidth = 640;

	mov	DWORD PTR ?RegistrySettings@@3UREGISTRY_SETTINGS@@A+32, 640 ; 00000280H

; 32   : 	RegistrySettings.ScreenHeight = 480;

	mov	DWORD PTR ?RegistrySettings@@3UREGISTRY_SETTINGS@@A+36, 480 ; 000001e0H

; 33   : 	RegistrySettings.ScreenBpp = 16;

	mov	DWORD PTR ?RegistrySettings@@3UREGISTRY_SETTINGS@@A+40, 16 ; 00000010H

; 34   : 	RegistrySettings.DrawDevice = 0;

	mov	DWORD PTR ?RegistrySettings@@3UREGISTRY_SETTINGS@@A+44, 0

; 35   : 
; 36   : 	RegistrySettings.Brightness = 256;

	mov	DWORD PTR ?RegistrySettings@@3UREGISTRY_SETTINGS@@A+48, 256 ; 00000100H

; 37   : 	RegistrySettings.Contrast = 256;

	mov	DWORD PTR ?RegistrySettings@@3UREGISTRY_SETTINGS@@A+52, 256 ; 00000100H

; 38   : 	RegistrySettings.TextureBpp = 16;

	mov	DWORD PTR ?RegistrySettings@@3UREGISTRY_SETTINGS@@A+56, 16 ; 00000010H

; 39   : 
; 40   : 	size = MAX_PLAYER_NAME;

	mov	DWORD PTR _size$[ebp], 64		; 00000040H

; 41   : 	GetUserName(RegistrySettings.PlayerName, &size);

	lea	eax, DWORD PTR _size$[ebp]
	push	eax
	push	OFFSET FLAT:?RegistrySettings@@3UREGISTRY_SETTINGS@@A+60
	call	DWORD PTR __imp__GetUserNameA@8

; 42   : 
; 43   : 	wsprintf(RegistrySettings.LevelDir, "MUSE1");

	push	OFFSET FLAT:??_C@_05GELMOPIA@MUSE1?$AA@
	push	OFFSET FLAT:?RegistrySettings@@3UREGISTRY_SETTINGS@@A+124
	call	DWORD PTR __imp__wsprintfA
	add	esp, 8

; 44   : 
; 45   : // create or open key
; 46   : 
; 47   : 	r = RegCreateKeyEx(REGISTRY_ROOT, REGISTRY_KEY, 0, "Revolt", REG_OPTION_NON_VOLATILE, KEY_ALL_ACCESS, NULL, &key, &flag);

	lea	eax, DWORD PTR _flag$[ebp]
	push	eax
	lea	ecx, DWORD PTR _key$[ebp]
	push	ecx
	push	0
	push	983103					; 000f003fH
	push	0
	push	OFFSET FLAT:??_C@_06JBKJDKHK@Revolt?$AA@
	push	0
	push	OFFSET FLAT:??_C@_0BI@JDPEGFEI@software?2Acclaim?2Revolt?$AA@
	push	-2147483646				; 80000002H
	call	DWORD PTR __imp__RegCreateKeyExA@36
	mov	DWORD PTR _r$[ebp], eax

; 48   : 	if (r != ERROR_SUCCESS)	return;

	cmp	DWORD PTR _r$[ebp], 0
	je	SHORT $L79953
	jmp	$L79942
$L79953:

; 49   : 
; 50   : // attempt to overwrite defaults
; 51   : 
; 52   : 	GET_REGISTRY_VALUE(key, "EnvFlag", &RegistrySettings.EnvFlag, 4);

	mov	DWORD PTR __s$79954[ebp], 4
	lea	eax, DWORD PTR __s$79954[ebp]
	push	eax
	push	OFFSET FLAT:?RegistrySettings@@3UREGISTRY_SETTINGS@@A ; RegistrySettings
	push	0
	push	0
	push	OFFSET FLAT:??_C@_07DILIIMFO@EnvFlag?$AA@
	mov	ecx, DWORD PTR _key$[ebp]
	push	ecx
	call	DWORD PTR __imp__RegQueryValueExA@24

; 53   : 	GET_REGISTRY_VALUE(key, "MirrorFlag", &RegistrySettings.MirrorFlag, 4);

	mov	DWORD PTR __s$79957[ebp], 4
	lea	eax, DWORD PTR __s$79957[ebp]
	push	eax
	push	OFFSET FLAT:?RegistrySettings@@3UREGISTRY_SETTINGS@@A+4
	push	0
	push	0
	push	OFFSET FLAT:??_C@_0L@GKIIGBBM@MirrorFlag?$AA@
	mov	ecx, DWORD PTR _key$[ebp]
	push	ecx
	call	DWORD PTR __imp__RegQueryValueExA@24

; 54   : 	GET_REGISTRY_VALUE(key, "AutoBrake", &RegistrySettings.AutoBrake, 4);

	mov	DWORD PTR __s$79960[ebp], 4
	lea	eax, DWORD PTR __s$79960[ebp]
	push	eax
	push	OFFSET FLAT:?RegistrySettings@@3UREGISTRY_SETTINGS@@A+8
	push	0
	push	0
	push	OFFSET FLAT:??_C@_09JMMNONGG@AutoBrake?$AA@
	mov	ecx, DWORD PTR _key$[ebp]
	push	ecx
	call	DWORD PTR __imp__RegQueryValueExA@24

; 55   : 	GET_REGISTRY_VALUE(key, "ShadowFlag", &RegistrySettings.ShadowFlag, 4);

	mov	DWORD PTR __s$79963[ebp], 4
	lea	eax, DWORD PTR __s$79963[ebp]
	push	eax
	push	OFFSET FLAT:?RegistrySettings@@3UREGISTRY_SETTINGS@@A+12
	push	0
	push	0
	push	OFFSET FLAT:??_C@_0L@GJODCEE@ShadowFlag?$AA@
	mov	ecx, DWORD PTR _key$[ebp]
	push	ecx
	call	DWORD PTR __imp__RegQueryValueExA@24

; 56   : 
; 57   : 	GET_REGISTRY_VALUE(key, "LightFlag", &RegistrySettings.LightFlag, 4);

	mov	DWORD PTR __s$79966[ebp], 4
	lea	eax, DWORD PTR __s$79966[ebp]
	push	eax
	push	OFFSET FLAT:?RegistrySettings@@3UREGISTRY_SETTINGS@@A+16
	push	0
	push	0
	push	OFFSET FLAT:??_C@_09FPBNBKIK@LightFlag?$AA@
	mov	ecx, DWORD PTR _key$[ebp]
	push	ecx
	call	DWORD PTR __imp__RegQueryValueExA@24

; 58   : 	GET_REGISTRY_VALUE(key, "InstanceFlag", &RegistrySettings.InstanceFlag, 4);

	mov	DWORD PTR __s$79969[ebp], 4
	lea	eax, DWORD PTR __s$79969[ebp]
	push	eax
	push	OFFSET FLAT:?RegistrySettings@@3UREGISTRY_SETTINGS@@A+20
	push	0
	push	0
	push	OFFSET FLAT:??_C@_0N@DKGGNKOC@InstanceFlag?$AA@
	mov	ecx, DWORD PTR _key$[ebp]
	push	ecx
	call	DWORD PTR __imp__RegQueryValueExA@24

; 59   : 	GET_REGISTRY_VALUE(key, "SkidFlag", &RegistrySettings.SkidFlag, 4);

	mov	DWORD PTR __s$79972[ebp], 4
	lea	eax, DWORD PTR __s$79972[ebp]
	push	eax
	push	OFFSET FLAT:?RegistrySettings@@3UREGISTRY_SETTINGS@@A+24
	push	0
	push	0
	push	OFFSET FLAT:??_C@_08JHAJNHFA@SkidFlag?$AA@
	mov	ecx, DWORD PTR _key$[ebp]
	push	ecx
	call	DWORD PTR __imp__RegQueryValueExA@24

; 60   : 	GET_REGISTRY_VALUE(key, "CarID", &RegistrySettings.CarID, 4);

	mov	DWORD PTR __s$79975[ebp], 4
	lea	eax, DWORD PTR __s$79975[ebp]
	push	eax
	push	OFFSET FLAT:?RegistrySettings@@3UREGISTRY_SETTINGS@@A+28
	push	0
	push	0
	push	OFFSET FLAT:??_C@_05EJMLCMDK@CarID?$AA@
	mov	ecx, DWORD PTR _key$[ebp]
	push	ecx
	call	DWORD PTR __imp__RegQueryValueExA@24

; 61   : 
; 62   : 	GET_REGISTRY_VALUE(key, "ScreenWidth", &RegistrySettings.ScreenWidth, 4);

	mov	DWORD PTR __s$79978[ebp], 4
	lea	eax, DWORD PTR __s$79978[ebp]
	push	eax
	push	OFFSET FLAT:?RegistrySettings@@3UREGISTRY_SETTINGS@@A+32
	push	0
	push	0
	push	OFFSET FLAT:??_C@_0M@GOACCFHI@ScreenWidth?$AA@
	mov	ecx, DWORD PTR _key$[ebp]
	push	ecx
	call	DWORD PTR __imp__RegQueryValueExA@24

; 63   : 	GET_REGISTRY_VALUE(key, "ScreenHeight", &RegistrySettings.ScreenHeight, 4);

	mov	DWORD PTR __s$79981[ebp], 4
	lea	eax, DWORD PTR __s$79981[ebp]
	push	eax
	push	OFFSET FLAT:?RegistrySettings@@3UREGISTRY_SETTINGS@@A+36
	push	0
	push	0
	push	OFFSET FLAT:??_C@_0N@EJILFHEF@ScreenHeight?$AA@
	mov	ecx, DWORD PTR _key$[ebp]
	push	ecx
	call	DWORD PTR __imp__RegQueryValueExA@24

; 64   : 	GET_REGISTRY_VALUE(key, "ScreenBpp", &RegistrySettings.ScreenBpp, 4);

	mov	DWORD PTR __s$79984[ebp], 4
	lea	eax, DWORD PTR __s$79984[ebp]
	push	eax
	push	OFFSET FLAT:?RegistrySettings@@3UREGISTRY_SETTINGS@@A+40
	push	0
	push	0
	push	OFFSET FLAT:??_C@_09CIKLDENJ@ScreenBpp?$AA@
	mov	ecx, DWORD PTR _key$[ebp]
	push	ecx
	call	DWORD PTR __imp__RegQueryValueExA@24

; 65   : 	GET_REGISTRY_VALUE(key, "DrawDevice", &RegistrySettings.DrawDevice, 4);

	mov	DWORD PTR __s$79987[ebp], 4
	lea	eax, DWORD PTR __s$79987[ebp]
	push	eax
	push	OFFSET FLAT:?RegistrySettings@@3UREGISTRY_SETTINGS@@A+44
	push	0
	push	0
	push	OFFSET FLAT:??_C@_0L@GHACPEEL@DrawDevice?$AA@
	mov	ecx, DWORD PTR _key$[ebp]
	push	ecx
	call	DWORD PTR __imp__RegQueryValueExA@24

; 66   : 
; 67   : 	GET_REGISTRY_VALUE(key, "Brightness", &RegistrySettings.Brightness, 4);

	mov	DWORD PTR __s$79990[ebp], 4
	lea	eax, DWORD PTR __s$79990[ebp]
	push	eax
	push	OFFSET FLAT:?RegistrySettings@@3UREGISTRY_SETTINGS@@A+48
	push	0
	push	0
	push	OFFSET FLAT:??_C@_0L@JCLLFKLB@Brightness?$AA@
	mov	ecx, DWORD PTR _key$[ebp]
	push	ecx
	call	DWORD PTR __imp__RegQueryValueExA@24

; 68   : 	GET_REGISTRY_VALUE(key, "Contrast", &RegistrySettings.Contrast, 4);

	mov	DWORD PTR __s$79993[ebp], 4
	lea	eax, DWORD PTR __s$79993[ebp]
	push	eax
	push	OFFSET FLAT:?RegistrySettings@@3UREGISTRY_SETTINGS@@A+52
	push	0
	push	0
	push	OFFSET FLAT:??_C@_08KBHEFHNJ@Contrast?$AA@
	mov	ecx, DWORD PTR _key$[ebp]
	push	ecx
	call	DWORD PTR __imp__RegQueryValueExA@24

; 69   : 	GET_REGISTRY_VALUE(key, "TextureBpp", &RegistrySettings.TextureBpp, 4);

	mov	DWORD PTR __s$79996[ebp], 4
	lea	eax, DWORD PTR __s$79996[ebp]
	push	eax
	push	OFFSET FLAT:?RegistrySettings@@3UREGISTRY_SETTINGS@@A+56
	push	0
	push	0
	push	OFFSET FLAT:??_C@_0L@OLALPLEN@TextureBpp?$AA@
	mov	ecx, DWORD PTR _key$[ebp]
	push	ecx
	call	DWORD PTR __imp__RegQueryValueExA@24

; 70   : 
; 71   : 	GET_REGISTRY_VALUE(key, "PlayerName", RegistrySettings.PlayerName, MAX_PLAYER_NAME);

	mov	DWORD PTR __s$79999[ebp], 64		; 00000040H
	lea	eax, DWORD PTR __s$79999[ebp]
	push	eax
	push	OFFSET FLAT:?RegistrySettings@@3UREGISTRY_SETTINGS@@A+60
	push	0
	push	0
	push	OFFSET FLAT:??_C@_0L@HMKCBGMC@PlayerName?$AA@
	mov	ecx, DWORD PTR _key$[ebp]
	push	ecx
	call	DWORD PTR __imp__RegQueryValueExA@24

; 72   : 	GET_REGISTRY_VALUE(key, "LevelDir", RegistrySettings.LevelDir, MAX_LEVEL_DIR_NAME);

	mov	DWORD PTR __s$80002[ebp], 16		; 00000010H
	lea	eax, DWORD PTR __s$80002[ebp]
	push	eax
	push	OFFSET FLAT:?RegistrySettings@@3UREGISTRY_SETTINGS@@A+124
	push	0
	push	0
	push	OFFSET FLAT:??_C@_08HMGBHAJI@LevelDir?$AA@
	mov	ecx, DWORD PTR _key$[ebp]
	push	ecx
	call	DWORD PTR __imp__RegQueryValueExA@24

; 73   : 
; 74   : 	RenderSettings.Env = RegistrySettings.EnvFlag;

	mov	eax, DWORD PTR ?RegistrySettings@@3UREGISTRY_SETTINGS@@A
	mov	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+76, eax

; 75   : 	RenderSettings.Mirror = RegistrySettings.MirrorFlag;

	mov	eax, DWORD PTR ?RegistrySettings@@3UREGISTRY_SETTINGS@@A+4
	mov	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+80, eax

; 76   : 	GameSettings.AutoBrake = RegistrySettings.AutoBrake;

	mov	eax, DWORD PTR ?RegistrySettings@@3UREGISTRY_SETTINGS@@A+8
	mov	DWORD PTR ?GameSettings@@3UGAME_SETTINGS@@A+20, eax

; 77   : 	RenderSettings.Shadow = RegistrySettings.ShadowFlag;

	mov	eax, DWORD PTR ?RegistrySettings@@3UREGISTRY_SETTINGS@@A+12
	mov	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+84, eax

; 78   : 
; 79   : 	RenderSettings.Light = RegistrySettings.LightFlag;

	mov	eax, DWORD PTR ?RegistrySettings@@3UREGISTRY_SETTINGS@@A+16
	mov	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+88, eax

; 80   : 	RenderSettings.Instance = RegistrySettings.InstanceFlag;

	mov	eax, DWORD PTR ?RegistrySettings@@3UREGISTRY_SETTINGS@@A+20
	mov	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+92, eax

; 81   : 	RenderSettings.Skid = RegistrySettings.SkidFlag;

	mov	eax, DWORD PTR ?RegistrySettings@@3UREGISTRY_SETTINGS@@A+24
	mov	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+96, eax

; 82   : 	GameSettings.CarID = RegistrySettings.CarID;

	mov	eax, DWORD PTR ?RegistrySettings@@3UREGISTRY_SETTINGS@@A+28
	mov	DWORD PTR ?GameSettings@@3UGAME_SETTINGS@@A+24, eax

; 83   : 
; 84   : // security check?
; 85   : 
; 86   : #if REGISTRY_SECURITY_CHECK
; 87   : 	flag = 0;
; 88   : 	GET_REGISTRY_VALUE(key, "WindowType", &flag, 4);
; 89   : 	if (!flag)
; 90   : 	{
; 91   : 		Box(NULL, "Illegal copy of Revolt!", MB_OK);
; 92   : 		QuitGame = TRUE;
; 93   : 		return;
; 94   : 	}
; 95   : #endif
; 96   : 
; 97   : // close key
; 98   : 
; 99   : 	RegCloseKey(key);

	mov	eax, DWORD PTR _key$[ebp]
	push	eax
	call	DWORD PTR __imp__RegCloseKey@4
$L79942:

; 100  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetRegistrySettings@@YAXXZ ENDP			; GetRegistrySettings
_TEXT	ENDS
PUBLIC	?SetRegistrySettings@@YAXXZ			; SetRegistrySettings
EXTRN	__imp__RegOpenKeyExA@20:NEAR
EXTRN	__imp__RegSetValueExA@24:NEAR
; Function compile flags: /Odt /ZI
;	COMDAT ?SetRegistrySettings@@YAXXZ
_TEXT	SEGMENT
_key$ = -8						; size = 4
_r$ = -4						; size = 4
?SetRegistrySettings@@YAXXZ PROC NEAR			; SetRegistrySettings, COMDAT

; 107  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi

; 108  : 	long r;
; 109  : 	HKEY key;
; 110  : 
; 111  : // open key
; 112  : 
; 113  : 	r = RegOpenKeyEx(REGISTRY_ROOT, REGISTRY_KEY, 0, KEY_ALL_ACCESS, &key);

	lea	eax, DWORD PTR _key$[ebp]
	push	eax
	push	983103					; 000f003fH
	push	0
	push	OFFSET FLAT:??_C@_0BI@JDPEGFEI@software?2Acclaim?2Revolt?$AA@
	push	-2147483646				; 80000002H
	call	DWORD PTR __imp__RegOpenKeyExA@20
	mov	DWORD PTR _r$[ebp], eax

; 114  : 	if (r != ERROR_SUCCESS) return;

	cmp	DWORD PTR _r$[ebp], 0
	je	SHORT $L80013
	jmp	$L80007
$L80013:

; 115  : 
; 116  : // write registry settings
; 117  : 
; 118  : 	RegistrySettings.EnvFlag = RenderSettings.Env;

	mov	eax, DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+76
	mov	DWORD PTR ?RegistrySettings@@3UREGISTRY_SETTINGS@@A, eax

; 119  : 	RegistrySettings.MirrorFlag = RenderSettings.Mirror;

	mov	eax, DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+80
	mov	DWORD PTR ?RegistrySettings@@3UREGISTRY_SETTINGS@@A+4, eax

; 120  : 	RegistrySettings.AutoBrake = GameSettings.AutoBrake;

	mov	eax, DWORD PTR ?GameSettings@@3UGAME_SETTINGS@@A+20
	mov	DWORD PTR ?RegistrySettings@@3UREGISTRY_SETTINGS@@A+8, eax

; 121  : 	RegistrySettings.ShadowFlag = RenderSettings.Shadow;

	mov	eax, DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+84
	mov	DWORD PTR ?RegistrySettings@@3UREGISTRY_SETTINGS@@A+12, eax

; 122  : 
; 123  : 	RegistrySettings.LightFlag = RenderSettings.Light;

	mov	eax, DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+88
	mov	DWORD PTR ?RegistrySettings@@3UREGISTRY_SETTINGS@@A+16, eax

; 124  : 	RegistrySettings.InstanceFlag = RenderSettings.Instance;

	mov	eax, DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+92
	mov	DWORD PTR ?RegistrySettings@@3UREGISTRY_SETTINGS@@A+20, eax

; 125  : 	RegistrySettings.SkidFlag = RenderSettings.Skid;

	mov	eax, DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+96
	mov	DWORD PTR ?RegistrySettings@@3UREGISTRY_SETTINGS@@A+24, eax

; 126  : 	RegistrySettings.CarID = GameSettings.CarID;

	mov	eax, DWORD PTR ?GameSettings@@3UGAME_SETTINGS@@A+24
	mov	DWORD PTR ?RegistrySettings@@3UREGISTRY_SETTINGS@@A+28, eax

; 127  : 
; 128  : 	SET_REGISTRY_VALUE(key, "EnvFlag", REG_DWORD, &RegistrySettings.EnvFlag, 4);

	push	4
	push	OFFSET FLAT:?RegistrySettings@@3UREGISTRY_SETTINGS@@A ; RegistrySettings
	push	4
	push	0
	push	OFFSET FLAT:??_C@_07DILIIMFO@EnvFlag?$AA@
	mov	eax, DWORD PTR _key$[ebp]
	push	eax
	call	DWORD PTR __imp__RegSetValueExA@24

; 129  : 	SET_REGISTRY_VALUE(key, "MirrorFlag", REG_DWORD, &RegistrySettings.MirrorFlag, 4);

	push	4
	push	OFFSET FLAT:?RegistrySettings@@3UREGISTRY_SETTINGS@@A+4
	push	4
	push	0
	push	OFFSET FLAT:??_C@_0L@GKIIGBBM@MirrorFlag?$AA@
	mov	eax, DWORD PTR _key$[ebp]
	push	eax
	call	DWORD PTR __imp__RegSetValueExA@24

; 130  : 	SET_REGISTRY_VALUE(key, "AutoBrake", REG_DWORD, &RegistrySettings.AutoBrake, 4);

	push	4
	push	OFFSET FLAT:?RegistrySettings@@3UREGISTRY_SETTINGS@@A+8
	push	4
	push	0
	push	OFFSET FLAT:??_C@_09JMMNONGG@AutoBrake?$AA@
	mov	eax, DWORD PTR _key$[ebp]
	push	eax
	call	DWORD PTR __imp__RegSetValueExA@24

; 131  : 	SET_REGISTRY_VALUE(key, "ShadowFlag", REG_DWORD, &RegistrySettings.ShadowFlag, 4);

	push	4
	push	OFFSET FLAT:?RegistrySettings@@3UREGISTRY_SETTINGS@@A+12
	push	4
	push	0
	push	OFFSET FLAT:??_C@_0L@GJODCEE@ShadowFlag?$AA@
	mov	eax, DWORD PTR _key$[ebp]
	push	eax
	call	DWORD PTR __imp__RegSetValueExA@24

; 132  : 
; 133  : 	SET_REGISTRY_VALUE(key, "LightFlag", REG_DWORD, &RegistrySettings.LightFlag, 4);

	push	4
	push	OFFSET FLAT:?RegistrySettings@@3UREGISTRY_SETTINGS@@A+16
	push	4
	push	0
	push	OFFSET FLAT:??_C@_09FPBNBKIK@LightFlag?$AA@
	mov	eax, DWORD PTR _key$[ebp]
	push	eax
	call	DWORD PTR __imp__RegSetValueExA@24

; 134  : 	SET_REGISTRY_VALUE(key, "InstanceFlag", REG_DWORD, &RegistrySettings.InstanceFlag, 4);

	push	4
	push	OFFSET FLAT:?RegistrySettings@@3UREGISTRY_SETTINGS@@A+20
	push	4
	push	0
	push	OFFSET FLAT:??_C@_0N@DKGGNKOC@InstanceFlag?$AA@
	mov	eax, DWORD PTR _key$[ebp]
	push	eax
	call	DWORD PTR __imp__RegSetValueExA@24

; 135  : 	SET_REGISTRY_VALUE(key, "SkidFlag", REG_DWORD, &RegistrySettings.SkidFlag, 4);

	push	4
	push	OFFSET FLAT:?RegistrySettings@@3UREGISTRY_SETTINGS@@A+24
	push	4
	push	0
	push	OFFSET FLAT:??_C@_08JHAJNHFA@SkidFlag?$AA@
	mov	eax, DWORD PTR _key$[ebp]
	push	eax
	call	DWORD PTR __imp__RegSetValueExA@24

; 136  : 	SET_REGISTRY_VALUE(key, "CarID", REG_DWORD, &RegistrySettings.CarID, 4);

	push	4
	push	OFFSET FLAT:?RegistrySettings@@3UREGISTRY_SETTINGS@@A+28
	push	4
	push	0
	push	OFFSET FLAT:??_C@_05EJMLCMDK@CarID?$AA@
	mov	eax, DWORD PTR _key$[ebp]
	push	eax
	call	DWORD PTR __imp__RegSetValueExA@24

; 137  : 
; 138  : 	SET_REGISTRY_VALUE(key, "ScreenWidth", REG_DWORD, &RegistrySettings.ScreenWidth, 4);

	push	4
	push	OFFSET FLAT:?RegistrySettings@@3UREGISTRY_SETTINGS@@A+32
	push	4
	push	0
	push	OFFSET FLAT:??_C@_0M@GOACCFHI@ScreenWidth?$AA@
	mov	eax, DWORD PTR _key$[ebp]
	push	eax
	call	DWORD PTR __imp__RegSetValueExA@24

; 139  : 	SET_REGISTRY_VALUE(key, "ScreenHeight", REG_DWORD, &RegistrySettings.ScreenHeight, 4);

	push	4
	push	OFFSET FLAT:?RegistrySettings@@3UREGISTRY_SETTINGS@@A+36
	push	4
	push	0
	push	OFFSET FLAT:??_C@_0N@EJILFHEF@ScreenHeight?$AA@
	mov	eax, DWORD PTR _key$[ebp]
	push	eax
	call	DWORD PTR __imp__RegSetValueExA@24

; 140  : 	SET_REGISTRY_VALUE(key, "ScreenBpp", REG_DWORD, &RegistrySettings.ScreenBpp, 4);

	push	4
	push	OFFSET FLAT:?RegistrySettings@@3UREGISTRY_SETTINGS@@A+40
	push	4
	push	0
	push	OFFSET FLAT:??_C@_09CIKLDENJ@ScreenBpp?$AA@
	mov	eax, DWORD PTR _key$[ebp]
	push	eax
	call	DWORD PTR __imp__RegSetValueExA@24

; 141  : 	SET_REGISTRY_VALUE(key, "DrawDevice", REG_DWORD, &RegistrySettings.DrawDevice, 4);

	push	4
	push	OFFSET FLAT:?RegistrySettings@@3UREGISTRY_SETTINGS@@A+44
	push	4
	push	0
	push	OFFSET FLAT:??_C@_0L@GHACPEEL@DrawDevice?$AA@
	mov	eax, DWORD PTR _key$[ebp]
	push	eax
	call	DWORD PTR __imp__RegSetValueExA@24

; 142  : 
; 143  : 	SET_REGISTRY_VALUE(key, "Brightness", REG_DWORD, &RegistrySettings.Brightness, 4);

	push	4
	push	OFFSET FLAT:?RegistrySettings@@3UREGISTRY_SETTINGS@@A+48
	push	4
	push	0
	push	OFFSET FLAT:??_C@_0L@JCLLFKLB@Brightness?$AA@
	mov	eax, DWORD PTR _key$[ebp]
	push	eax
	call	DWORD PTR __imp__RegSetValueExA@24

; 144  : 	SET_REGISTRY_VALUE(key, "Contrast", REG_DWORD, &RegistrySettings.Contrast, 4);

	push	4
	push	OFFSET FLAT:?RegistrySettings@@3UREGISTRY_SETTINGS@@A+52
	push	4
	push	0
	push	OFFSET FLAT:??_C@_08KBHEFHNJ@Contrast?$AA@
	mov	eax, DWORD PTR _key$[ebp]
	push	eax
	call	DWORD PTR __imp__RegSetValueExA@24

; 145  : 	SET_REGISTRY_VALUE(key, "TextureBpp", REG_DWORD, &RegistrySettings.TextureBpp, 4);

	push	4
	push	OFFSET FLAT:?RegistrySettings@@3UREGISTRY_SETTINGS@@A+56
	push	4
	push	0
	push	OFFSET FLAT:??_C@_0L@OLALPLEN@TextureBpp?$AA@
	mov	eax, DWORD PTR _key$[ebp]
	push	eax
	call	DWORD PTR __imp__RegSetValueExA@24

; 146  : 
; 147  : 	SET_REGISTRY_VALUE(key, "PlayerName", REG_SZ, RegistrySettings.PlayerName, MAX_PLAYER_NAME);

	push	64					; 00000040H
	push	OFFSET FLAT:?RegistrySettings@@3UREGISTRY_SETTINGS@@A+60
	push	1
	push	0
	push	OFFSET FLAT:??_C@_0L@HMKCBGMC@PlayerName?$AA@
	mov	eax, DWORD PTR _key$[ebp]
	push	eax
	call	DWORD PTR __imp__RegSetValueExA@24

; 148  : 	SET_REGISTRY_VALUE(key, "LevelDir", REG_SZ, RegistrySettings.LevelDir, MAX_LEVEL_DIR_NAME);

	push	16					; 00000010H
	push	OFFSET FLAT:?RegistrySettings@@3UREGISTRY_SETTINGS@@A+124
	push	1
	push	0
	push	OFFSET FLAT:??_C@_08HMGBHAJI@LevelDir?$AA@
	mov	eax, DWORD PTR _key$[ebp]
	push	eax
	call	DWORD PTR __imp__RegSetValueExA@24

; 149  : 
; 150  : // close key
; 151  : 
; 152  : 	RegCloseKey(key);

	mov	eax, DWORD PTR _key$[ebp]
	push	eax
	call	DWORD PTR __imp__RegCloseKey@4
$L80007:

; 153  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?SetRegistrySettings@@YAXXZ ENDP			; SetRegistrySettings
_TEXT	ENDS
END
