; Listing generated by Microsoft (R) Optimizing Compiler Version 13.10.3077 

	TITLE	.\source\object.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT PARA USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_0IL@CDBNPMJI@c?3?2documents?5and?5settings?2jarhea@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _IsEqualGUID
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _==
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _acosl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _asinl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _atanl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _atan2l
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _ceill
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _cosl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _coshl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _expl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _fabsl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _floorl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _fmodl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _frexpl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _ldexpl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _logl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _log10l
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _modfl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _powl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _sinl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _sinhl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _sqrtl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _tanl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _tanhl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _frexpf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _ldexpf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _acosf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _asinf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _atanf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _atan2f
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _ceilf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _cosf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _coshf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _expf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _fabsf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _floorf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _fmodf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _logf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _log10f
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _modff
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _powf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _sinf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _sinhf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _sqrtf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _tanf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _tanhf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?OBJ_InitObjSys@@YAJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?OBJ_KillObjSys@@YAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?OBJ_AllocObject@@YAPAUobject_def@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?OBJ_ReplaceObject@@YAPAUobject_def@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?OBJ_FreeObject@@YAJPAUobject_def@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ClearThisObjPairInfo@@YAXPAUobject_def@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ClearActivePairInfo@@YAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ClearAllPairInfo@@YAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Pow_int@N@@YANNH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Pow_int@H@@YAHHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Pow_int@M@@YAMMH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Pow_int@O@@YAOOH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?__LINE__Var@?1??OBJ_FreeObject@@YAJPAUobject_def@@@Z@4JA
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??OBJ_KillObjSys@@YAXXZ@4JA
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??OBJ_InitObjSys@@YAJXZ@4JA
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
sxdata	SEGMENT DWORD USE32 'SXDATA'
sxdata	ENDS
FLAT	GROUP _DATA, CONST, _BSS
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBCD
INCLUDELIB OLDNAMES

PUBLIC	?OBJ_ObjectList@@3PAUobject_def@@A		; OBJ_ObjectList
PUBLIC	?OBJ_ObjectHead@@3PAUobject_def@@A		; OBJ_ObjectHead
PUBLIC	?OBJ_ObjectTail@@3PAUobject_def@@A		; OBJ_ObjectTail
PUBLIC	?OBJ_NumObjects@@3JA				; OBJ_NumObjects
PUBLIC	?OBJ_PairCollInfo@@3PAY0IA@UPairCollInfoStruct@@A ; OBJ_PairCollInfo
_BSS	SEGMENT
?OBJ_ObjectList@@3PAUobject_def@@A DD 01H DUP (?)	; OBJ_ObjectList
?OBJ_ObjectHead@@3PAUobject_def@@A DD 01H DUP (?)	; OBJ_ObjectHead
?OBJ_ObjectTail@@3PAUobject_def@@A DD 01H DUP (?)	; OBJ_ObjectTail
?OBJ_NumObjects@@3JA DD 01H DUP (?)			; OBJ_NumObjects
?OBJ_PairCollInfo@@3PAY0IA@UPairCollInfoStruct@@A DD 04000H DUP (?) ; OBJ_PairCollInfo
_BSS	ENDS
PUBLIC	?__LINE__Var@?1??OBJ_InitObjSys@@YAJXZ@4JA	; `OBJ_InitObjSys'::`2'::__LINE__Var
PUBLIC	??_C@_0IL@CDBNPMJI@c?3?2documents?5and?5settings?2jarhea@ ; `string'
PUBLIC	?OBJ_InitObjSys@@YAJXZ				; OBJ_InitObjSys
PUBLIC	?ClearAllPairInfo@@YAXXZ			; ClearAllPairInfo
EXTRN	?DebugMalloc@@YAPAXIHPAD@Z:NEAR			; DebugMalloc
_BSS	SEGMENT
_s_NextFreeObj DD 01H DUP (?)
_BSS	ENDS
;	COMDAT ??_C@_0IL@CDBNPMJI@c?3?2documents?5and?5settings?2jarhea@
; File c:\documents and settings\jarhead\desktop\shit to display my love for xbox revolt and fuck you borman-ness\revolt source\source\object.cpp
CONST	SEGMENT
??_C@_0IL@CDBNPMJI@c?3?2documents?5and?5settings?2jarhea@ DB 'c:\document'
	DB	's and settings\jarhead\desktop\shit to display my love for xb'
	DB	'ox revolt and fuck you borman-ness\revolt source\source\objec'
	DB	't.cpp', 00H					; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??OBJ_InitObjSys@@YAJXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?1??OBJ_InitObjSys@@YAJXZ@4JA DD 04bH	; `OBJ_InitObjSys'::`2'::__LINE__Var
; Function compile flags: /Odt /ZI
_DATA	ENDS
;	COMDAT ?OBJ_InitObjSys@@YAJXZ
_TEXT	SEGMENT
_ii$ = -4						; size = 4
?OBJ_InitObjSys@@YAJXZ PROC NEAR			; OBJ_InitObjSys, COMDAT

; 75   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 76   : 	long	ii;
; 77   : 
; 78   : 	OBJ_ObjectList = (OBJECT *)malloc(sizeof(OBJECT) * MAX_OBJECTS);

	push	OFFSET FLAT:??_C@_0IL@CDBNPMJI@c?3?2documents?5and?5settings?2jarhea@
	mov	eax, DWORD PTR ?__LINE__Var@?1??OBJ_InitObjSys@@YAJXZ@4JA
	add	eax, 3
	push	eax
	push	97792					; 00017e00H
	call	?DebugMalloc@@YAPAXIHPAD@Z		; DebugMalloc
	add	esp, 12					; 0000000cH
	mov	DWORD PTR ?OBJ_ObjectList@@3PAUobject_def@@A, eax ; OBJ_ObjectList

; 79   : 	s_NextFreeObj = OBJ_ObjectList;

	mov	eax, DWORD PTR ?OBJ_ObjectList@@3PAUobject_def@@A ; OBJ_ObjectList
	mov	DWORD PTR _s_NextFreeObj, eax

; 80   : 
; 81   : 	OBJ_ObjectList[0].prev = NULL;							// Setup first object in linked list

	mov	eax, DWORD PTR ?OBJ_ObjectList@@3PAUobject_def@@A ; OBJ_ObjectList
	mov	DWORD PTR [eax+708], 0

; 82   : 	OBJ_ObjectList[0].next = &(OBJ_ObjectList[1]);

	mov	eax, DWORD PTR ?OBJ_ObjectList@@3PAUobject_def@@A ; OBJ_ObjectList
	add	eax, 764				; 000002fcH
	mov	ecx, DWORD PTR ?OBJ_ObjectList@@3PAUobject_def@@A ; OBJ_ObjectList
	mov	DWORD PTR [ecx+712], eax

; 83   : 
; 84   : 	for (ii = 1; ii < (MAX_OBJECTS - 1); ii++)				// Initialise bulk of object list links

	mov	DWORD PTR _ii$[ebp], 1
	jmp	SHORT $L81094
$L81095:
	mov	eax, DWORD PTR _ii$[ebp]
	add	eax, 1
	mov	DWORD PTR _ii$[ebp], eax
$L81094:
	cmp	DWORD PTR _ii$[ebp], 127		; 0000007fH
	jge	SHORT $L81096

; 85   : 	{
; 86   : 		OBJ_ObjectList[ii].prev = &(OBJ_ObjectList[ii - 1]);

	mov	eax, DWORD PTR _ii$[ebp]
	sub	eax, 1
	imul	eax, 764				; 000002fcH
	add	eax, DWORD PTR ?OBJ_ObjectList@@3PAUobject_def@@A ; OBJ_ObjectList
	mov	ecx, DWORD PTR _ii$[ebp]
	imul	ecx, 764				; 000002fcH
	mov	edx, DWORD PTR ?OBJ_ObjectList@@3PAUobject_def@@A ; OBJ_ObjectList
	mov	DWORD PTR [edx+ecx+708], eax

; 87   : 		OBJ_ObjectList[ii].next = &(OBJ_ObjectList[ii + 1]);

	mov	eax, DWORD PTR _ii$[ebp]
	add	eax, 1
	imul	eax, 764				; 000002fcH
	add	eax, DWORD PTR ?OBJ_ObjectList@@3PAUobject_def@@A ; OBJ_ObjectList
	mov	ecx, DWORD PTR _ii$[ebp]
	imul	ecx, 764				; 000002fcH
	mov	edx, DWORD PTR ?OBJ_ObjectList@@3PAUobject_def@@A ; OBJ_ObjectList
	mov	DWORD PTR [edx+ecx+712], eax

; 88   : 	}

	jmp	SHORT $L81095
$L81096:

; 89   : 															// Initialise last object
; 90   : 	OBJ_ObjectList[MAX_OBJECTS - 1].prev = &(OBJ_ObjectList[MAX_OBJECTS - 2]);

	mov	eax, DWORD PTR ?OBJ_ObjectList@@3PAUobject_def@@A ; OBJ_ObjectList
	add	eax, 96264				; 00017808H
	mov	ecx, DWORD PTR ?OBJ_ObjectList@@3PAUobject_def@@A ; OBJ_ObjectList
	mov	DWORD PTR [ecx+97736], eax

; 91   : 	OBJ_ObjectList[MAX_OBJECTS - 1].next = NULL;

	mov	eax, DWORD PTR ?OBJ_ObjectList@@3PAUobject_def@@A ; OBJ_ObjectList
	mov	DWORD PTR [eax+97740], 0

; 92   : 
; 93   : 	// initialise object IDs
; 94   : 	for (ii = 0; ii < MAX_OBJECTS; ii++) {

	mov	DWORD PTR _ii$[ebp], 0
	jmp	SHORT $L81097
$L81098:
	mov	eax, DWORD PTR _ii$[ebp]
	add	eax, 1
	mov	DWORD PTR _ii$[ebp], eax
$L81097:
	cmp	DWORD PTR _ii$[ebp], 128		; 00000080H
	jge	SHORT $L81099

; 95   : 		OBJ_ObjectList[ii].ObjID = ii;

	mov	eax, DWORD PTR _ii$[ebp]
	imul	eax, 764				; 000002fcH
	mov	ecx, DWORD PTR ?OBJ_ObjectList@@3PAUobject_def@@A ; OBJ_ObjectList
	mov	edx, DWORD PTR _ii$[ebp]
	mov	DWORD PTR [ecx+eax+576], edx

; 96   : 	}

	jmp	SHORT $L81098
$L81099:

; 97   : 
; 98   : 	// Initialise pair contact/ tested list
; 99   : 	ClearAllPairInfo();

	call	?ClearAllPairInfo@@YAXXZ		; ClearAllPairInfo

; 100  : 
; 101  : 
; 102  : 	OBJ_NumObjects = 0;

	mov	DWORD PTR ?OBJ_NumObjects@@3JA, 0	; OBJ_NumObjects

; 103  : 	OBJ_ObjectHead = NULL;

	mov	DWORD PTR ?OBJ_ObjectHead@@3PAUobject_def@@A, 0 ; OBJ_ObjectHead

; 104  : 	OBJ_ObjectTail = NULL;

	mov	DWORD PTR ?OBJ_ObjectTail@@3PAUobject_def@@A, 0 ; OBJ_ObjectTail

; 105  : 
; 106  : 	return(1);			// Success

	mov	eax, 1

; 107  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?OBJ_InitObjSys@@YAJXZ ENDP				; OBJ_InitObjSys
_TEXT	ENDS
PUBLIC	?__LINE__Var@?1??OBJ_KillObjSys@@YAXXZ@4JA	; `OBJ_KillObjSys'::`2'::__LINE__Var
PUBLIC	?OBJ_KillObjSys@@YAXXZ				; OBJ_KillObjSys
PUBLIC	?OBJ_FreeObject@@YAJPAUobject_def@@@Z		; OBJ_FreeObject
EXTRN	?DebugFree@@YAXPAXHPAD@Z:NEAR			; DebugFree
;	COMDAT ?__LINE__Var@?1??OBJ_KillObjSys@@YAXXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?1??OBJ_KillObjSys@@YAXXZ@4JA DD 076H	; `OBJ_KillObjSys'::`2'::__LINE__Var
; Function compile flags: /Odt /ZI
_DATA	ENDS
;	COMDAT ?OBJ_KillObjSys@@YAXXZ
_TEXT	SEGMENT
?OBJ_KillObjSys@@YAXXZ PROC NEAR			; OBJ_KillObjSys, COMDAT

; 118  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 119  :     if (OBJ_ObjectList != NULL)

	cmp	DWORD PTR ?OBJ_ObjectList@@3PAUobject_def@@A, 0 ; OBJ_ObjectList
	je	SHORT $L81103
$L81105:

; 120  : 	{
; 121  : 		while (OBJ_ObjectHead)	// free all alive objects

	cmp	DWORD PTR ?OBJ_ObjectHead@@3PAUobject_def@@A, 0 ; OBJ_ObjectHead
	je	SHORT $L81106

; 122  : 		{
; 123  : 			OBJ_FreeObject(OBJ_ObjectHead);

	mov	eax, DWORD PTR ?OBJ_ObjectHead@@3PAUobject_def@@A ; OBJ_ObjectHead
	push	eax
	call	?OBJ_FreeObject@@YAJPAUobject_def@@@Z	; OBJ_FreeObject
	add	esp, 4

; 124  : 		}

	jmp	SHORT $L81105
$L81106:

; 125  : 
; 126  :         free(OBJ_ObjectList);

	push	OFFSET FLAT:??_C@_0IL@CDBNPMJI@c?3?2documents?5and?5settings?2jarhea@
	mov	eax, DWORD PTR ?__LINE__Var@?1??OBJ_KillObjSys@@YAXXZ@4JA
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR ?OBJ_ObjectList@@3PAUobject_def@@A ; OBJ_ObjectList
	push	ecx
	call	?DebugFree@@YAXPAXHPAD@Z		; DebugFree
	add	esp, 12					; 0000000cH
$L81103:

; 127  : 	}
; 128  : 
; 129  :     OBJ_ObjectList = NULL;

	mov	DWORD PTR ?OBJ_ObjectList@@3PAUobject_def@@A, 0 ; OBJ_ObjectList

; 130  :     OBJ_ObjectHead = NULL;

	mov	DWORD PTR ?OBJ_ObjectHead@@3PAUobject_def@@A, 0 ; OBJ_ObjectHead

; 131  :     OBJ_ObjectTail = NULL;

	mov	DWORD PTR ?OBJ_ObjectTail@@3PAUobject_def@@A, 0 ; OBJ_ObjectTail

; 132  :     s_NextFreeObj = NULL;

	mov	DWORD PTR _s_NextFreeObj, 0

; 133  : 
; 134  : 	OBJ_NumObjects = 0;

	mov	DWORD PTR ?OBJ_NumObjects@@3JA, 0	; OBJ_NumObjects

; 135  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?OBJ_KillObjSys@@YAXXZ ENDP				; OBJ_KillObjSys
_TEXT	ENDS
PUBLIC	?OBJ_AllocObject@@YAPAUobject_def@@XZ		; OBJ_AllocObject
PUBLIC	?ClearThisObjPairInfo@@YAXPAUobject_def@@@Z	; ClearThisObjPairInfo
; Function compile flags: /Odt /ZI
;	COMDAT ?OBJ_AllocObject@@YAPAUobject_def@@XZ
_TEXT	SEGMENT
_newobj$ = -4						; size = 4
?OBJ_AllocObject@@YAPAUobject_def@@XZ PROC NEAR		; OBJ_AllocObject, COMDAT

; 146  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 147  : 	OBJECT *newobj;
; 148  : 
; 149  : 	newobj = s_NextFreeObj;

	mov	eax, DWORD PTR _s_NextFreeObj
	mov	DWORD PTR _newobj$[ebp], eax

; 150  : 	if (newobj == NULL)

	cmp	DWORD PTR _newobj$[ebp], 0
	jne	SHORT $L81112

; 151  : 	{
; 152  : 		return(NULL);										// Could not allocate object (buffer full)

	xor	eax, eax
	jmp	$L81110
$L81112:

; 153  : 	}
; 154  : 
; 155  : 	s_NextFreeObj = s_NextFreeObj->next;					// Update free object list

	mov	eax, DWORD PTR _s_NextFreeObj
	mov	ecx, DWORD PTR [eax+712]
	mov	DWORD PTR _s_NextFreeObj, ecx

; 156  : 	if (s_NextFreeObj != NULL)

	cmp	DWORD PTR _s_NextFreeObj, 0
	je	SHORT $L81113

; 157  : 	{
; 158  : 		s_NextFreeObj->prev = NULL;

	mov	eax, DWORD PTR _s_NextFreeObj
	mov	DWORD PTR [eax+708], 0
$L81113:

; 159  : 	}
; 160  : 
; 161  : 	newobj->prev = OBJ_ObjectTail;

	mov	eax, DWORD PTR _newobj$[ebp]
	mov	ecx, DWORD PTR ?OBJ_ObjectTail@@3PAUobject_def@@A ; OBJ_ObjectTail
	mov	DWORD PTR [eax+708], ecx

; 162  : 
; 163  : 	if (OBJ_ObjectHead == NULL)

	cmp	DWORD PTR ?OBJ_ObjectHead@@3PAUobject_def@@A, 0 ; OBJ_ObjectHead
	jne	SHORT $L81114

; 164  : 	{
; 165  : 		OBJ_ObjectHead = newobj;							// newobj is the first to be allocated

	mov	eax, DWORD PTR _newobj$[ebp]
	mov	DWORD PTR ?OBJ_ObjectHead@@3PAUobject_def@@A, eax ; OBJ_ObjectHead

; 166  : 	}
; 167  : 	else

	jmp	SHORT $L81115
$L81114:

; 168  : 	{
; 169  :         OBJ_ObjectTail->next = newobj;

	mov	eax, DWORD PTR ?OBJ_ObjectTail@@3PAUobject_def@@A ; OBJ_ObjectTail
	mov	ecx, DWORD PTR _newobj$[ebp]
	mov	DWORD PTR [eax+712], ecx
$L81115:

; 170  : 	}
; 171  : 	OBJ_ObjectTail = newobj;

	mov	eax, DWORD PTR _newobj$[ebp]
	mov	DWORD PTR ?OBJ_ObjectTail@@3PAUobject_def@@A, eax ; OBJ_ObjectTail

; 172  : 	
; 173  : 	newobj->next = NULL;

	mov	eax, DWORD PTR _newobj$[ebp]
	mov	DWORD PTR [eax+712], 0

; 174  : 
; 175  : 	// Set some defaults
; 176  : 	newobj->player = NULL;

	mov	eax, DWORD PTR _newobj$[ebp]
	mov	DWORD PTR [eax+588], 0

; 177  : 	newobj->objref = NULL;

	mov	eax, DWORD PTR _newobj$[ebp]
	mov	DWORD PTR [eax+592], 0

; 178  : 	newobj->creator = NULL;

	mov	eax, DWORD PTR _newobj$[ebp]
	mov	DWORD PTR [eax+596], 0

; 179  : 	newobj->flag.IsInGrid = 0;								// Mark object as not in grid yet

	mov	eax, DWORD PTR _newobj$[ebp]
	mov	ecx, DWORD PTR [eax+580]
	and	ecx, -5					; fffffffbH
	mov	edx, DWORD PTR _newobj$[ebp]
	mov	DWORD PTR [edx+580], ecx

; 180  : 	newobj->Data = NULL;

	mov	eax, DWORD PTR _newobj$[ebp]
	mov	DWORD PTR [eax+684], 0

; 181  : 	newobj->Field = NULL;

	mov	eax, DWORD PTR _newobj$[ebp]
	mov	DWORD PTR [eax+664], 0

; 182  : 	newobj->FieldPriority = FIELD_PRIORITY_MIN;				// Default - affected by all fields

	mov	eax, DWORD PTR _newobj$[ebp]
	mov	DWORD PTR [eax+668], 1

; 183  : #ifndef _PSX
; 184  : 	newobj->SparkGen = NULL;

	mov	eax, DWORD PTR _newobj$[ebp]
	mov	DWORD PTR [eax+676], 0

; 185  : 	newobj->Light = NULL;

	mov	eax, DWORD PTR _newobj$[ebp]
	mov	DWORD PTR [eax+672], 0

; 186  : #endif
; 187  : #ifdef _PC
; 188  : 	newobj->Sfx3D = NULL;

	mov	eax, DWORD PTR _newobj$[ebp]
	mov	DWORD PTR [eax+680], 0

; 189  : #endif
; 190  : 	newobj->movehandler = NULL;

	mov	eax, DWORD PTR _newobj$[ebp]
	mov	DWORD PTR [eax+688], 0

; 191  : 	newobj->collhandler = NULL;

	mov	eax, DWORD PTR _newobj$[ebp]
	mov	DWORD PTR [eax+692], 0

; 192  : 	newobj->aihandler = NULL;

	mov	eax, DWORD PTR _newobj$[ebp]
	mov	DWORD PTR [eax+696], 0

; 193  : 	newobj->renderhandler = NULL;

	mov	eax, DWORD PTR _newobj$[ebp]
	mov	DWORD PTR [eax+700], 0

; 194  : 	newobj->freehandler = NULL;

	mov	eax, DWORD PTR _newobj$[ebp]
	mov	DWORD PTR [eax+704], 0

; 195  : 
; 196  : 	// Clear contact testing flags
; 197  : 	ClearThisObjPairInfo(newobj);

	mov	eax, DWORD PTR _newobj$[ebp]
	push	eax
	call	?ClearThisObjPairInfo@@YAXPAUobject_def@@@Z ; ClearThisObjPairInfo
	add	esp, 4

; 198  : 
; 199  : 	OBJ_NumObjects++;

	mov	eax, DWORD PTR ?OBJ_NumObjects@@3JA	; OBJ_NumObjects
	add	eax, 1
	mov	DWORD PTR ?OBJ_NumObjects@@3JA, eax	; OBJ_NumObjects

; 200  : 	return(newobj);

	mov	eax, DWORD PTR _newobj$[ebp]
$L81110:

; 201  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?OBJ_AllocObject@@YAPAUobject_def@@XZ ENDP		; OBJ_AllocObject
_TEXT	ENDS
PUBLIC	?OBJ_ReplaceObject@@YAPAUobject_def@@XZ		; OBJ_ReplaceObject
; Function compile flags: /Odt /ZI
;	COMDAT ?OBJ_ReplaceObject@@YAPAUobject_def@@XZ
_TEXT	SEGMENT
_found$ = -8						; size = 4
_newobj$ = -4						; size = 4
?OBJ_ReplaceObject@@YAPAUobject_def@@XZ PROC NEAR	; OBJ_ReplaceObject, COMDAT

; 215  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi

; 216  : 	OBJECT *newobj = NULL;

	mov	DWORD PTR _newobj$[ebp], 0

; 217  : 	long	found = 0;

	mov	DWORD PTR _found$[ebp], 0

; 218  : 
; 219  : 	newobj = OBJ_ObjectTail;								// Start at the end of the list and work towards "newer" objects

	mov	eax, DWORD PTR ?OBJ_ObjectTail@@3PAUobject_def@@A ; OBJ_ObjectTail
	mov	DWORD PTR _newobj$[ebp], eax

; 220  : 
; 221  : #if 0	/* Examples: */
; 222  : 	while ((!found) && (newobj != NULL))
; 223  : 	{
; 224  : 		switch(newobj->type)
; 225  : 		{
; 226  : 			case TYPE_EYECANDY:
; 227  : 			case TYPE_PICKUP:
; 228  : 			found = 1;
; 229  : 			break;
; 230  : 
; 231  : 			default:
; 232  : 			newobj = newobj->prev;
; 233  : 			break
; 234  : 		}
; 235  : 	}
; 236  : 
; 237  : 	#ifndef _PSX
; 238  : 	GRD_RemoveObject(newobj);
; 239  : 	#endif
; 240  : 
; 241  : 	return(newobj);
; 242  : #else
; 243  : 	return(NULL);

	xor	eax, eax

; 244  : #endif
; 245  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?OBJ_ReplaceObject@@YAPAUobject_def@@XZ ENDP		; OBJ_ReplaceObject
_TEXT	ENDS
PUBLIC	?__LINE__Var@?1??OBJ_FreeObject@@YAJPAUobject_def@@@Z@4JA ; `OBJ_FreeObject'::`2'::__LINE__Var
EXTRN	?RemoveField@@YAXPAUForceFieldStruct@@@Z:NEAR	; RemoveField
EXTRN	?GRD_RemoveObject@@YAXPAUobject_def@@@Z:NEAR	; GRD_RemoveObject
EXTRN	?FreeSfx3D@@YAXPAUSAMPLE_3D@@@Z:NEAR		; FreeSfx3D
EXTRN	?FreeLight@@YAXPAULIGHT@@@Z:NEAR		; FreeLight
EXTRN	?FreeCollSkin@@YAXPAUCollSkinStruct@@@Z:NEAR	; FreeCollSkin
;	COMDAT ?__LINE__Var@?1??OBJ_FreeObject@@YAJPAUobject_def@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??OBJ_FreeObject@@YAJPAUobject_def@@@Z@4JA DD 0100H ; `OBJ_FreeObject'::`2'::__LINE__Var
; Function compile flags: /Odt /ZI
_DATA	ENDS
;	COMDAT ?OBJ_FreeObject@@YAJPAUobject_def@@@Z
_TEXT	SEGMENT
_Obj$ = 8						; size = 4
?OBJ_FreeObject@@YAJPAUobject_def@@@Z PROC NEAR		; OBJ_FreeObject, COMDAT

; 256  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 257  : 
; 258  : 	// Free ram allocated in object
; 259  : 	FreeCollSkin(&Obj->body.CollSkin);

	mov	eax, DWORD PTR _Obj$[ebp]
	add	eax, 380				; 0000017cH
	push	eax
	call	?FreeCollSkin@@YAXPAUCollSkinStruct@@@Z	; FreeCollSkin
	add	esp, 4

; 260  : 	if (Obj->freehandler)

	mov	eax, DWORD PTR _Obj$[ebp]
	cmp	DWORD PTR [eax+704], 0
	je	SHORT $L81124

; 261  : 	{
; 262  : 		Obj->freehandler(Obj);

	mov	eax, DWORD PTR _Obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _Obj$[ebp]
	call	DWORD PTR [ecx+704]
	add	esp, 4
$L81124:

; 263  : 	}
; 264  : 
; 265  : #ifndef _PSX
; 266  : 
; 267  : 	if (Obj->SparkGen) 

	mov	eax, DWORD PTR _Obj$[ebp]
	cmp	DWORD PTR [eax+676], 0
	je	SHORT $L81125

; 268  : 	{
; 269  : 		//FreeSparkGen(Obj->SparkGen);
; 270  : 		Obj->SparkGen = NULL;

	mov	eax, DWORD PTR _Obj$[ebp]
	mov	DWORD PTR [eax+676], 0
$L81125:

; 271  : 	}
; 272  : 
; 273  : #ifdef _PC
; 274  : 	if (Obj->Sfx3D)

	mov	eax, DWORD PTR _Obj$[ebp]
	cmp	DWORD PTR [eax+680], 0
	je	SHORT $L81126

; 275  : 	{
; 276  : 		FreeSfx3D(Obj->Sfx3D);

	mov	eax, DWORD PTR _Obj$[ebp]
	mov	ecx, DWORD PTR [eax+680]
	push	ecx
	call	?FreeSfx3D@@YAXPAUSAMPLE_3D@@@Z		; FreeSfx3D
	add	esp, 4
$L81126:

; 277  : 	}
; 278  : #endif
; 279  : 
; 280  : 	if (Obj->Light)

	mov	eax, DWORD PTR _Obj$[ebp]
	cmp	DWORD PTR [eax+672], 0
	je	SHORT $L81127

; 281  : 	{
; 282  : 		FreeLight(Obj->Light);

	mov	eax, DWORD PTR _Obj$[ebp]
	mov	ecx, DWORD PTR [eax+672]
	push	ecx
	call	?FreeLight@@YAXPAULIGHT@@@Z		; FreeLight
	add	esp, 4
$L81127:

; 283  : 	}
; 284  : 
; 285  : #endif
; 286  : 
; 287  : 	if (Obj->Data)

	mov	eax, DWORD PTR _Obj$[ebp]
	cmp	DWORD PTR [eax+684], 0
	je	SHORT $L81128

; 288  : 	{
; 289  : 		free(Obj->Data);

	push	OFFSET FLAT:??_C@_0IL@CDBNPMJI@c?3?2documents?5and?5settings?2jarhea@
	mov	eax, DWORD PTR ?__LINE__Var@?1??OBJ_FreeObject@@YAJPAUobject_def@@@Z@4JA
	add	eax, 33					; 00000021H
	push	eax
	mov	ecx, DWORD PTR _Obj$[ebp]
	mov	edx, DWORD PTR [ecx+684]
	push	edx
	call	?DebugFree@@YAXPAXHPAD@Z		; DebugFree
	add	esp, 12					; 0000000cH

; 290  : 		Obj->Data = NULL;

	mov	eax, DWORD PTR _Obj$[ebp]
	mov	DWORD PTR [eax+684], 0
$L81128:

; 291  : 	}
; 292  : 	
; 293  : 	if (Obj->Field)

	mov	eax, DWORD PTR _Obj$[ebp]
	cmp	DWORD PTR [eax+664], 0
	je	SHORT $L81130

; 294  : 	{
; 295  : 		RemoveField(Obj->Field);

	mov	eax, DWORD PTR _Obj$[ebp]
	mov	ecx, DWORD PTR [eax+664]
	push	ecx
	call	?RemoveField@@YAXPAUForceFieldStruct@@@Z ; RemoveField
	add	esp, 4

; 296  : 		Obj->Field = NULL;

	mov	eax, DWORD PTR _Obj$[ebp]
	mov	DWORD PTR [eax+664], 0
$L81130:

; 297  : 	}
; 298  : 
; 299  : 	// Free the collision skin if necessary
; 300  : 	FreeCollSkin(&Obj->body.CollSkin);

	mov	eax, DWORD PTR _Obj$[ebp]
	add	eax, 380				; 0000017cH
	push	eax
	call	?FreeCollSkin@@YAXPAUCollSkinStruct@@@Z	; FreeCollSkin
	add	esp, 4

; 301  : 	if (IsBodySphere(&Obj->body)) {

	mov	eax, DWORD PTR _Obj$[ebp]
	cmp	DWORD PTR [eax+472], 1
	jne	SHORT $L81131

; 302  : 		free(Obj->body.CollSkin.Sphere);

	push	OFFSET FLAT:??_C@_0IL@CDBNPMJI@c?3?2documents?5and?5settings?2jarhea@
	mov	eax, DWORD PTR ?__LINE__Var@?1??OBJ_FreeObject@@YAJPAUobject_def@@@Z@4JA
	add	eax, 46					; 0000002eH
	push	eax
	mov	ecx, DWORD PTR _Obj$[ebp]
	mov	edx, DWORD PTR [ecx+396]
	push	edx
	call	?DebugFree@@YAXPAXHPAD@Z		; DebugFree
	add	esp, 12					; 0000000cH

; 303  : 		Obj->body.CollSkin.Sphere = NULL;

	mov	eax, DWORD PTR _Obj$[ebp]
	mov	DWORD PTR [eax+396], 0

; 304  : 		Obj->body.CollSkin.NSpheres = 0;

	mov	eax, DWORD PTR _Obj$[ebp]
	mov	WORD PTR [eax+408], 0
$L81131:

; 305  : 	}
; 306  : 
; 307  : #ifndef _PSX
; 308  : 	GRD_RemoveObject(Obj);

	mov	eax, DWORD PTR _Obj$[ebp]
	push	eax
	call	?GRD_RemoveObject@@YAXPAUobject_def@@@Z	; GRD_RemoveObject
	add	esp, 4

; 309  : #endif
; 310  : 
; 311  : 	// Nullify all the handlers
; 312  : 	Obj->renderhandler = NULL;

	mov	eax, DWORD PTR _Obj$[ebp]
	mov	DWORD PTR [eax+700], 0

; 313  : 	Obj->movehandler = NULL;

	mov	eax, DWORD PTR _Obj$[ebp]
	mov	DWORD PTR [eax+688], 0

; 314  : 	Obj->collhandler = NULL;

	mov	eax, DWORD PTR _Obj$[ebp]
	mov	DWORD PTR [eax+692], 0

; 315  : 	Obj->aihandler = NULL;

	mov	eax, DWORD PTR _Obj$[ebp]
	mov	DWORD PTR [eax+696], 0

; 316  : 	Obj->freehandler = NULL;

	mov	eax, DWORD PTR _Obj$[ebp]
	mov	DWORD PTR [eax+704], 0

; 317  : 
; 318  : 
; 319  : 	if (Obj->prev != NULL)									// Update next and prev pointers of adjacent objects

	mov	eax, DWORD PTR _Obj$[ebp]
	cmp	DWORD PTR [eax+708], 0
	je	SHORT $L81132

; 320  : 	{														// to close up list
; 321  : 		(Obj->prev)->next = Obj->next;

	mov	eax, DWORD PTR _Obj$[ebp]
	mov	ecx, DWORD PTR [eax+708]
	mov	edx, DWORD PTR _Obj$[ebp]
	mov	eax, DWORD PTR [edx+712]
	mov	DWORD PTR [ecx+712], eax

; 322  : 	}
; 323  : 	else

	jmp	SHORT $L81133
$L81132:

; 324  :     {
; 325  :         OBJ_ObjectHead = Obj->next;

	mov	eax, DWORD PTR _Obj$[ebp]
	mov	ecx, DWORD PTR [eax+712]
	mov	DWORD PTR ?OBJ_ObjectHead@@3PAUobject_def@@A, ecx ; OBJ_ObjectHead
$L81133:

; 326  : 	}
; 327  : 
; 328  : 	if (Obj->next != NULL)

	mov	eax, DWORD PTR _Obj$[ebp]
	cmp	DWORD PTR [eax+712], 0
	je	SHORT $L81134

; 329  : 	{
; 330  : 		(Obj->next)->prev = Obj->prev;

	mov	eax, DWORD PTR _Obj$[ebp]
	mov	ecx, DWORD PTR [eax+712]
	mov	edx, DWORD PTR _Obj$[ebp]
	mov	eax, DWORD PTR [edx+708]
	mov	DWORD PTR [ecx+708], eax

; 331  : 	}
; 332  : 	else 

	jmp	SHORT $L81135
$L81134:

; 333  : 	{
; 334  : 		OBJ_ObjectTail = Obj->prev;

	mov	eax, DWORD PTR _Obj$[ebp]
	mov	ecx, DWORD PTR [eax+708]
	mov	DWORD PTR ?OBJ_ObjectTail@@3PAUobject_def@@A, ecx ; OBJ_ObjectTail
$L81135:

; 335  : 	}
; 336  : 
; 337  : 
; 338  : 	if (s_NextFreeObj != NULL)								// Add object to free list

	cmp	DWORD PTR _s_NextFreeObj, 0
	je	SHORT $L81136

; 339  : 	{
; 340  : 		s_NextFreeObj->prev = Obj;

	mov	eax, DWORD PTR _s_NextFreeObj
	mov	ecx, DWORD PTR _Obj$[ebp]
	mov	DWORD PTR [eax+708], ecx
$L81136:

; 341  : 	}
; 342  : 
; 343  : 	Obj->next = s_NextFreeObj;

	mov	eax, DWORD PTR _Obj$[ebp]
	mov	ecx, DWORD PTR _s_NextFreeObj
	mov	DWORD PTR [eax+712], ecx

; 344  : 	Obj->prev = NULL;

	mov	eax, DWORD PTR _Obj$[ebp]
	mov	DWORD PTR [eax+708], 0

; 345  : 	s_NextFreeObj = Obj;

	mov	eax, DWORD PTR _Obj$[ebp]
	mov	DWORD PTR _s_NextFreeObj, eax

; 346  : 	
; 347  : 	OBJ_NumObjects--;

	mov	eax, DWORD PTR ?OBJ_NumObjects@@3JA	; OBJ_NumObjects
	sub	eax, 1
	mov	DWORD PTR ?OBJ_NumObjects@@3JA, eax	; OBJ_NumObjects

; 348  : 
; 349  : 	return(1);

	mov	eax, 1

; 350  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?OBJ_FreeObject@@YAJPAUobject_def@@@Z ENDP		; OBJ_FreeObject
; Function compile flags: /Odt /ZI
_TEXT	ENDS
;	COMDAT ?ClearThisObjPairInfo@@YAXPAUobject_def@@@Z
_TEXT	SEGMENT
_obj1$ = -4						; size = 4
_obj2$ = 8						; size = 4
?ClearThisObjPairInfo@@YAXPAUobject_def@@@Z PROC NEAR	; ClearThisObjPairInfo, COMDAT

; 358  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 359  : 	OBJECT *obj1;
; 360  : 
; 361  : 	for (obj1 = OBJ_ObjectHead; obj1 != NULL; obj1 = obj1->next) {

	mov	eax, DWORD PTR ?OBJ_ObjectHead@@3PAUobject_def@@A ; OBJ_ObjectHead
	mov	DWORD PTR _obj1$[ebp], eax
	jmp	SHORT $L81141
$L81142:
	mov	eax, DWORD PTR _obj1$[ebp]
	mov	ecx, DWORD PTR [eax+712]
	mov	DWORD PTR _obj1$[ebp], ecx
$L81141:
	cmp	DWORD PTR _obj1$[ebp], 0
	je	$L81139

; 362  : 
; 363  : 			ClearPairInfo(obj1, obj2);

	mov	eax, DWORD PTR _obj1$[ebp]
	mov	ecx, DWORD PTR [eax+576]
	shl	ecx, 9
	mov	edx, DWORD PTR _obj2$[ebp]
	mov	eax, DWORD PTR [edx+576]
	mov	ecx, DWORD PTR ?OBJ_PairCollInfo@@3PAY0IA@UPairCollInfoStruct@@A[ecx+eax*4]
	and	ecx, -2					; fffffffeH
	mov	edx, DWORD PTR _obj2$[ebp]
	mov	eax, DWORD PTR [edx+576]
	mov	edx, DWORD PTR _obj1$[ebp]
	mov	edx, DWORD PTR [edx+576]
	shl	edx, 9
	mov	DWORD PTR ?OBJ_PairCollInfo@@3PAY0IA@UPairCollInfoStruct@@A[edx+eax*4], ecx
	mov	eax, DWORD PTR _obj1$[ebp]
	mov	ecx, DWORD PTR [eax+576]
	shl	ecx, 9
	mov	edx, DWORD PTR _obj2$[ebp]
	mov	eax, DWORD PTR [edx+576]
	mov	ecx, DWORD PTR ?OBJ_PairCollInfo@@3PAY0IA@UPairCollInfoStruct@@A[ecx+eax*4]
	and	ecx, -3					; fffffffdH
	mov	edx, DWORD PTR _obj2$[ebp]
	mov	eax, DWORD PTR [edx+576]
	mov	edx, DWORD PTR _obj1$[ebp]
	mov	edx, DWORD PTR [edx+576]
	shl	edx, 9
	mov	DWORD PTR ?OBJ_PairCollInfo@@3PAY0IA@UPairCollInfoStruct@@A[edx+eax*4], ecx
	mov	eax, DWORD PTR _obj2$[ebp]
	mov	ecx, DWORD PTR [eax+576]
	shl	ecx, 9
	mov	edx, DWORD PTR _obj1$[ebp]
	mov	eax, DWORD PTR [edx+576]
	mov	ecx, DWORD PTR ?OBJ_PairCollInfo@@3PAY0IA@UPairCollInfoStruct@@A[ecx+eax*4]
	and	ecx, -2					; fffffffeH
	mov	edx, DWORD PTR _obj1$[ebp]
	mov	eax, DWORD PTR [edx+576]
	mov	edx, DWORD PTR _obj2$[ebp]
	mov	edx, DWORD PTR [edx+576]
	shl	edx, 9
	mov	DWORD PTR ?OBJ_PairCollInfo@@3PAY0IA@UPairCollInfoStruct@@A[edx+eax*4], ecx
	mov	eax, DWORD PTR _obj2$[ebp]
	mov	ecx, DWORD PTR [eax+576]
	shl	ecx, 9
	mov	edx, DWORD PTR _obj1$[ebp]
	mov	eax, DWORD PTR [edx+576]
	mov	ecx, DWORD PTR ?OBJ_PairCollInfo@@3PAY0IA@UPairCollInfoStruct@@A[ecx+eax*4]
	and	ecx, -3					; fffffffdH
	mov	edx, DWORD PTR _obj1$[ebp]
	mov	eax, DWORD PTR [edx+576]
	mov	edx, DWORD PTR _obj2$[ebp]
	mov	edx, DWORD PTR [edx+576]
	shl	edx, 9
	mov	DWORD PTR ?OBJ_PairCollInfo@@3PAY0IA@UPairCollInfoStruct@@A[edx+eax*4], ecx

; 364  : 	
; 365  : 	}

	jmp	$L81142
$L81139:

; 366  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?ClearThisObjPairInfo@@YAXPAUobject_def@@@Z ENDP	; ClearThisObjPairInfo
_TEXT	ENDS
PUBLIC	?ClearActivePairInfo@@YAXXZ			; ClearActivePairInfo
; Function compile flags: /Odt /ZI
;	COMDAT ?ClearActivePairInfo@@YAXXZ
_TEXT	SEGMENT
_obj2$ = -8						; size = 4
_obj1$ = -4						; size = 4
?ClearActivePairInfo@@YAXXZ PROC NEAR			; ClearActivePairInfo, COMDAT

; 369  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi

; 370  : 	OBJECT *obj1, *obj2;
; 371  : 
; 372  : 	for (obj1 = OBJ_ObjectHead; obj1 != NULL; obj1 = obj1->next) {

	mov	eax, DWORD PTR ?OBJ_ObjectHead@@3PAUobject_def@@A ; OBJ_ObjectHead
	mov	DWORD PTR _obj1$[ebp], eax
	jmp	SHORT $L81148
$L81149:
	mov	eax, DWORD PTR _obj1$[ebp]
	mov	ecx, DWORD PTR [eax+712]
	mov	DWORD PTR _obj1$[ebp], ecx
$L81148:
	cmp	DWORD PTR _obj1$[ebp], 0
	je	$L81145

; 373  : 		for (obj2 = obj1->next; obj2 != NULL; obj2 = obj2->next) {

	mov	eax, DWORD PTR _obj1$[ebp]
	mov	ecx, DWORD PTR [eax+712]
	mov	DWORD PTR _obj2$[ebp], ecx
	jmp	SHORT $L81151
$L81152:
	mov	eax, DWORD PTR _obj2$[ebp]
	mov	ecx, DWORD PTR [eax+712]
	mov	DWORD PTR _obj2$[ebp], ecx
$L81151:
	cmp	DWORD PTR _obj2$[ebp], 0
	je	$L81153

; 374  : 
; 375  : 			ClearPairInfo(obj1, obj2);

	mov	eax, DWORD PTR _obj1$[ebp]
	mov	ecx, DWORD PTR [eax+576]
	shl	ecx, 9
	mov	edx, DWORD PTR _obj2$[ebp]
	mov	eax, DWORD PTR [edx+576]
	mov	ecx, DWORD PTR ?OBJ_PairCollInfo@@3PAY0IA@UPairCollInfoStruct@@A[ecx+eax*4]
	and	ecx, -2					; fffffffeH
	mov	edx, DWORD PTR _obj2$[ebp]
	mov	eax, DWORD PTR [edx+576]
	mov	edx, DWORD PTR _obj1$[ebp]
	mov	edx, DWORD PTR [edx+576]
	shl	edx, 9
	mov	DWORD PTR ?OBJ_PairCollInfo@@3PAY0IA@UPairCollInfoStruct@@A[edx+eax*4], ecx
	mov	eax, DWORD PTR _obj1$[ebp]
	mov	ecx, DWORD PTR [eax+576]
	shl	ecx, 9
	mov	edx, DWORD PTR _obj2$[ebp]
	mov	eax, DWORD PTR [edx+576]
	mov	ecx, DWORD PTR ?OBJ_PairCollInfo@@3PAY0IA@UPairCollInfoStruct@@A[ecx+eax*4]
	and	ecx, -3					; fffffffdH
	mov	edx, DWORD PTR _obj2$[ebp]
	mov	eax, DWORD PTR [edx+576]
	mov	edx, DWORD PTR _obj1$[ebp]
	mov	edx, DWORD PTR [edx+576]
	shl	edx, 9
	mov	DWORD PTR ?OBJ_PairCollInfo@@3PAY0IA@UPairCollInfoStruct@@A[edx+eax*4], ecx
	mov	eax, DWORD PTR _obj2$[ebp]
	mov	ecx, DWORD PTR [eax+576]
	shl	ecx, 9
	mov	edx, DWORD PTR _obj1$[ebp]
	mov	eax, DWORD PTR [edx+576]
	mov	ecx, DWORD PTR ?OBJ_PairCollInfo@@3PAY0IA@UPairCollInfoStruct@@A[ecx+eax*4]
	and	ecx, -2					; fffffffeH
	mov	edx, DWORD PTR _obj1$[ebp]
	mov	eax, DWORD PTR [edx+576]
	mov	edx, DWORD PTR _obj2$[ebp]
	mov	edx, DWORD PTR [edx+576]
	shl	edx, 9
	mov	DWORD PTR ?OBJ_PairCollInfo@@3PAY0IA@UPairCollInfoStruct@@A[edx+eax*4], ecx
	mov	eax, DWORD PTR _obj2$[ebp]
	mov	ecx, DWORD PTR [eax+576]
	shl	ecx, 9
	mov	edx, DWORD PTR _obj1$[ebp]
	mov	eax, DWORD PTR [edx+576]
	mov	ecx, DWORD PTR ?OBJ_PairCollInfo@@3PAY0IA@UPairCollInfoStruct@@A[ecx+eax*4]
	and	ecx, -3					; fffffffdH
	mov	edx, DWORD PTR _obj1$[ebp]
	mov	eax, DWORD PTR [edx+576]
	mov	edx, DWORD PTR _obj2$[ebp]
	mov	edx, DWORD PTR [edx+576]
	shl	edx, 9
	mov	DWORD PTR ?OBJ_PairCollInfo@@3PAY0IA@UPairCollInfoStruct@@A[edx+eax*4], ecx

; 376  : 
; 377  : 		}

	jmp	$L81152
$L81153:

; 378  : 	}

	jmp	$L81149
$L81145:

; 379  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?ClearActivePairInfo@@YAXXZ ENDP			; ClearActivePairInfo
; Function compile flags: /Odt /ZI
_TEXT	ENDS
;	COMDAT ?ClearAllPairInfo@@YAXXZ
_TEXT	SEGMENT
_jj$ = -8						; size = 4
_ii$ = -4						; size = 4
?ClearAllPairInfo@@YAXXZ PROC NEAR			; ClearAllPairInfo, COMDAT

; 382  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi

; 383  : 	int ii, jj;
; 384  : 
; 385  : 	for (ii = 0; ii < MAX_OBJECTS; ii++) {

	mov	DWORD PTR _ii$[ebp], 0
	jmp	SHORT $L81158
$L81159:
	mov	eax, DWORD PTR _ii$[ebp]
	add	eax, 1
	mov	DWORD PTR _ii$[ebp], eax
$L81158:
	cmp	DWORD PTR _ii$[ebp], 128		; 00000080H
	jge	$L81155

; 386  : 		for (jj = 0; jj < MAX_OBJECTS; jj++) {

	mov	DWORD PTR _jj$[ebp], 0
	jmp	SHORT $L81161
$L81162:
	mov	eax, DWORD PTR _jj$[ebp]
	add	eax, 1
	mov	DWORD PTR _jj$[ebp], eax
$L81161:
	cmp	DWORD PTR _jj$[ebp], 128		; 00000080H
	jge	$L81163

; 387  : 
; 388  : 			ClearPairInfo(&OBJ_ObjectList[ii], &OBJ_ObjectList[jj]);

	mov	eax, DWORD PTR _ii$[ebp]
	imul	eax, 764				; 000002fcH
	mov	ecx, DWORD PTR ?OBJ_ObjectList@@3PAUobject_def@@A ; OBJ_ObjectList
	mov	edx, DWORD PTR [ecx+eax+576]
	shl	edx, 9
	mov	eax, DWORD PTR _jj$[ebp]
	imul	eax, 764				; 000002fcH
	mov	ecx, DWORD PTR ?OBJ_ObjectList@@3PAUobject_def@@A ; OBJ_ObjectList
	mov	eax, DWORD PTR [ecx+eax+576]
	mov	ecx, DWORD PTR ?OBJ_PairCollInfo@@3PAY0IA@UPairCollInfoStruct@@A[edx+eax*4]
	and	ecx, -2					; fffffffeH
	mov	edx, DWORD PTR _jj$[ebp]
	imul	edx, 764				; 000002fcH
	mov	eax, DWORD PTR ?OBJ_ObjectList@@3PAUobject_def@@A ; OBJ_ObjectList
	mov	edx, DWORD PTR [eax+edx+576]
	mov	eax, DWORD PTR _ii$[ebp]
	imul	eax, 764				; 000002fcH
	mov	esi, DWORD PTR ?OBJ_ObjectList@@3PAUobject_def@@A ; OBJ_ObjectList
	mov	eax, DWORD PTR [esi+eax+576]
	shl	eax, 9
	mov	DWORD PTR ?OBJ_PairCollInfo@@3PAY0IA@UPairCollInfoStruct@@A[eax+edx*4], ecx
	mov	eax, DWORD PTR _ii$[ebp]
	imul	eax, 764				; 000002fcH
	mov	ecx, DWORD PTR ?OBJ_ObjectList@@3PAUobject_def@@A ; OBJ_ObjectList
	mov	edx, DWORD PTR [ecx+eax+576]
	shl	edx, 9
	mov	eax, DWORD PTR _jj$[ebp]
	imul	eax, 764				; 000002fcH
	mov	ecx, DWORD PTR ?OBJ_ObjectList@@3PAUobject_def@@A ; OBJ_ObjectList
	mov	eax, DWORD PTR [ecx+eax+576]
	mov	ecx, DWORD PTR ?OBJ_PairCollInfo@@3PAY0IA@UPairCollInfoStruct@@A[edx+eax*4]
	and	ecx, -3					; fffffffdH
	mov	edx, DWORD PTR _jj$[ebp]
	imul	edx, 764				; 000002fcH
	mov	eax, DWORD PTR ?OBJ_ObjectList@@3PAUobject_def@@A ; OBJ_ObjectList
	mov	edx, DWORD PTR [eax+edx+576]
	mov	eax, DWORD PTR _ii$[ebp]
	imul	eax, 764				; 000002fcH
	mov	esi, DWORD PTR ?OBJ_ObjectList@@3PAUobject_def@@A ; OBJ_ObjectList
	mov	eax, DWORD PTR [esi+eax+576]
	shl	eax, 9
	mov	DWORD PTR ?OBJ_PairCollInfo@@3PAY0IA@UPairCollInfoStruct@@A[eax+edx*4], ecx
	mov	eax, DWORD PTR _jj$[ebp]
	imul	eax, 764				; 000002fcH
	mov	ecx, DWORD PTR ?OBJ_ObjectList@@3PAUobject_def@@A ; OBJ_ObjectList
	mov	edx, DWORD PTR [ecx+eax+576]
	shl	edx, 9
	mov	eax, DWORD PTR _ii$[ebp]
	imul	eax, 764				; 000002fcH
	mov	ecx, DWORD PTR ?OBJ_ObjectList@@3PAUobject_def@@A ; OBJ_ObjectList
	mov	eax, DWORD PTR [ecx+eax+576]
	mov	ecx, DWORD PTR ?OBJ_PairCollInfo@@3PAY0IA@UPairCollInfoStruct@@A[edx+eax*4]
	and	ecx, -2					; fffffffeH
	mov	edx, DWORD PTR _ii$[ebp]
	imul	edx, 764				; 000002fcH
	mov	eax, DWORD PTR ?OBJ_ObjectList@@3PAUobject_def@@A ; OBJ_ObjectList
	mov	edx, DWORD PTR [eax+edx+576]
	mov	eax, DWORD PTR _jj$[ebp]
	imul	eax, 764				; 000002fcH
	mov	esi, DWORD PTR ?OBJ_ObjectList@@3PAUobject_def@@A ; OBJ_ObjectList
	mov	eax, DWORD PTR [esi+eax+576]
	shl	eax, 9
	mov	DWORD PTR ?OBJ_PairCollInfo@@3PAY0IA@UPairCollInfoStruct@@A[eax+edx*4], ecx
	mov	eax, DWORD PTR _jj$[ebp]
	imul	eax, 764				; 000002fcH
	mov	ecx, DWORD PTR ?OBJ_ObjectList@@3PAUobject_def@@A ; OBJ_ObjectList
	mov	edx, DWORD PTR [ecx+eax+576]
	shl	edx, 9
	mov	eax, DWORD PTR _ii$[ebp]
	imul	eax, 764				; 000002fcH
	mov	ecx, DWORD PTR ?OBJ_ObjectList@@3PAUobject_def@@A ; OBJ_ObjectList
	mov	eax, DWORD PTR [ecx+eax+576]
	mov	ecx, DWORD PTR ?OBJ_PairCollInfo@@3PAY0IA@UPairCollInfoStruct@@A[edx+eax*4]
	and	ecx, -3					; fffffffdH
	mov	edx, DWORD PTR _ii$[ebp]
	imul	edx, 764				; 000002fcH
	mov	eax, DWORD PTR ?OBJ_ObjectList@@3PAUobject_def@@A ; OBJ_ObjectList
	mov	edx, DWORD PTR [eax+edx+576]
	mov	eax, DWORD PTR _jj$[ebp]
	imul	eax, 764				; 000002fcH
	mov	esi, DWORD PTR ?OBJ_ObjectList@@3PAUobject_def@@A ; OBJ_ObjectList
	mov	eax, DWORD PTR [esi+eax+576]
	shl	eax, 9
	mov	DWORD PTR ?OBJ_PairCollInfo@@3PAY0IA@UPairCollInfoStruct@@A[eax+edx*4], ecx

; 389  : 
; 390  : 		}

	jmp	$L81162
$L81163:

; 391  : 	}

	jmp	$L81159
$L81155:

; 392  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?ClearAllPairInfo@@YAXXZ ENDP				; ClearAllPairInfo
_TEXT	ENDS
END
