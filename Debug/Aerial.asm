; Listing generated by Microsoft (R) Optimizing Compiler Version 13.10.3077 

	TITLE	.\source\Aerial.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_0IL@KLBKKIBO@c?3?2documents?5and?5settings?2jarhea@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _IsEqualGUID
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _==
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _acosl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _asinl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _atanl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _atan2l
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _ceill
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _cosl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _coshl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _expl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _fabsl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _floorl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _fmodl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _frexpl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _ldexpl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _logl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _log10l
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _modfl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _powl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _sinl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _sinhl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _sqrtl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _tanl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _tanhl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _frexpf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _ldexpf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _acosf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _asinf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _atanf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _atan2f
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _ceilf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _cosf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _coshf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _expf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _fabsf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _floorf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _fmodf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _logf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _log10f
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _modff
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _powf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _sinf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _sinhf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _sqrtf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _tanf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _tanhf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CreateAerial@@YAPAUAERIAL@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DestroyAerial@@YAXPAUAERIAL@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetAerialSprings@@YAXPAUAERIAL@@MMM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?InitAerial@@YAXPAUAERIAL@@PAUVectorStruct@@MMMMM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Pow_int@N@@YANNH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Pow_int@H@@YAHHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Pow_int@M@@YAMMH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Pow_int@O@@YAOOH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?__LINE__Var@?1??DestroyAerial@@YAXPAUAERIAL@@@Z@4JA
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??CreateAerial@@YAPAUAERIAL@@XZ@4JA
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
sxdata	SEGMENT DWORD USE32 'SXDATA'
sxdata	ENDS
FLAT	GROUP _DATA, CONST, _BSS
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBCD
INCLUDELIB OLDNAMES

PUBLIC	?CreateAerial@@YAPAUAERIAL@@XZ			; CreateAerial
PUBLIC	?__LINE__Var@?1??CreateAerial@@YAPAUAERIAL@@XZ@4JA ; `CreateAerial'::`2'::__LINE__Var
PUBLIC	??_C@_0IL@KLBKKIBO@c?3?2documents?5and?5settings?2jarhea@ ; `string'
EXTRN	?DebugMalloc@@YAPAXIHPAD@Z:NEAR			; DebugMalloc
;	COMDAT ??_C@_0IL@KLBKKIBO@c?3?2documents?5and?5settings?2jarhea@
; File c:\documents and settings\jarhead\desktop\shit to display my love for xbox revolt and fuck you borman-ness\revolt source\source\aerial.cpp
CONST	SEGMENT
??_C@_0IL@KLBKKIBO@c?3?2documents?5and?5settings?2jarhea@ DB 'c:\document'
	DB	's and settings\jarhead\desktop\shit to display my love for xb'
	DB	'ox revolt and fuck you borman-ness\revolt source\source\aeria'
	DB	'l.cpp', 00H					; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??CreateAerial@@YAPAUAERIAL@@XZ@4JA
_DATA	SEGMENT
?__LINE__Var@?1??CreateAerial@@YAPAUAERIAL@@XZ@4JA DD 01aH ; `CreateAerial'::`2'::__LINE__Var
; Function compile flags: /Odt /ZI
_DATA	ENDS
;	COMDAT ?CreateAerial@@YAPAUAERIAL@@XZ
_TEXT	SEGMENT
?CreateAerial@@YAPAUAERIAL@@XZ PROC NEAR		; CreateAerial, COMDAT

; 26   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 27   : 	// Allocate space for the aerial structure
; 28   : 	return (AERIAL *)malloc(sizeof(AERIAL));

	push	OFFSET FLAT:??_C@_0IL@KLBKKIBO@c?3?2documents?5and?5settings?2jarhea@
	mov	eax, DWORD PTR ?__LINE__Var@?1??CreateAerial@@YAPAUAERIAL@@XZ@4JA
	add	eax, 2
	push	eax
	push	700					; 000002bcH
	call	?DebugMalloc@@YAPAXIHPAD@Z		; DebugMalloc
	add	esp, 12					; 0000000cH

; 29   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?CreateAerial@@YAPAUAERIAL@@XZ ENDP			; CreateAerial
_TEXT	ENDS
PUBLIC	?DestroyAerial@@YAXPAUAERIAL@@@Z		; DestroyAerial
PUBLIC	?__LINE__Var@?1??DestroyAerial@@YAXPAUAERIAL@@@Z@4JA ; `DestroyAerial'::`2'::__LINE__Var
EXTRN	?DebugFree@@YAXPAXHPAD@Z:NEAR			; DebugFree
;	COMDAT ?__LINE__Var@?1??DestroyAerial@@YAXPAUAERIAL@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??DestroyAerial@@YAXPAUAERIAL@@@Z@4JA DD 027H ; `DestroyAerial'::`2'::__LINE__Var
; Function compile flags: /Odt /ZI
_DATA	ENDS
;	COMDAT ?DestroyAerial@@YAXPAUAERIAL@@@Z
_TEXT	SEGMENT
_aerial$ = 8						; size = 4
?DestroyAerial@@YAXPAUAERIAL@@@Z PROC NEAR		; DestroyAerial, COMDAT

; 39   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 40   : 	free(aerial);

	push	OFFSET FLAT:??_C@_0IL@KLBKKIBO@c?3?2documents?5and?5settings?2jarhea@
	mov	eax, DWORD PTR ?__LINE__Var@?1??DestroyAerial@@YAXPAUAERIAL@@@Z@4JA
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _aerial$[ebp]
	push	ecx
	call	?DebugFree@@YAXPAXHPAD@Z		; DebugFree
	add	esp, 12					; 0000000cH

; 41   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?DestroyAerial@@YAXPAUAERIAL@@@Z ENDP			; DestroyAerial
_TEXT	ENDS
PUBLIC	?SetAerialSprings@@YAXPAUAERIAL@@MMM@Z		; SetAerialSprings
EXTRN	__fltused:NEAR
; Function compile flags: /Odt /ZI
;	COMDAT ?SetAerialSprings@@YAXPAUAERIAL@@MMM@Z
_TEXT	SEGMENT
_aerial$ = 8						; size = 4
_stiffness$ = 12					; size = 4
_damping$ = 16						; size = 4
_antiGrav$ = 20						; size = 4
?SetAerialSprings@@YAXPAUAERIAL@@MMM@Z PROC NEAR	; SetAerialSprings, COMDAT

; 52   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 53   : 	aerial->Stiffness = stiffness;

	mov	eax, DWORD PTR _aerial$[ebp]
	mov	ecx, DWORD PTR _stiffness$[ebp]
	mov	DWORD PTR [eax+16], ecx

; 54   : 	aerial->Damping = damping;

	mov	eax, DWORD PTR _aerial$[ebp]
	mov	ecx, DWORD PTR _damping$[ebp]
	mov	DWORD PTR [eax+20], ecx

; 55   : 	aerial->AntiGrav = antiGrav;

	mov	eax, DWORD PTR _aerial$[ebp]
	mov	ecx, DWORD PTR _antiGrav$[ebp]
	mov	DWORD PTR [eax+24], ecx

; 56   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?SetAerialSprings@@YAXPAUAERIAL@@MMM@Z ENDP		; SetAerialSprings
_TEXT	ENDS
PUBLIC	?InitAerial@@YAXPAUAERIAL@@PAUVectorStruct@@MMMMM@Z ; InitAerial
EXTRN	?SetParticleMass@@YAXPAUParticleStruct@@M@Z:NEAR ; SetParticleMass
; Function compile flags: /Odt /ZI
;	COMDAT ?InitAerial@@YAXPAUAERIAL@@PAUVectorStruct@@MMMMM@Z
_TEXT	SEGMENT
_pSection$ = -8						; size = 4
_iSec$ = -4						; size = 4
_aerial$ = 8						; size = 4
_direction$ = 12					; size = 4
_secLength$ = 16					; size = 4
_mass$ = 20						; size = 4
_hardness$ = 24						; size = 4
_resistance$ = 28					; size = 4
_gravity$ = 32						; size = 4
?InitAerial@@YAXPAUAERIAL@@PAUVectorStruct@@MMMMM@Z PROC NEAR ; InitAerial, COMDAT

; 82   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi

; 83   : 	int iSec;
; 84   : 	PARTICLE *pSection;
; 85   : 
; 86   : 	aerial->Length = secLength;

	mov	eax, DWORD PTR _aerial$[ebp]
	mov	ecx, DWORD PTR _secLength$[ebp]
	mov	DWORD PTR [eax+12], ecx

; 87   : 
; 88   : 	CopyVec(direction, &aerial->Direction);

	mov	eax, DWORD PTR _aerial$[ebp]
	mov	ecx, DWORD PTR _direction$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	eax, DWORD PTR _aerial$[ebp]
	mov	ecx, DWORD PTR _direction$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _aerial$[ebp]
	mov	ecx, DWORD PTR _direction$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx

; 89   : 
; 90   : 	// Set the mass, hardness and resistance
; 91   : 	for (iSec = 0; iSec < AERIAL_NSECTIONS; iSec++) {

	mov	DWORD PTR _iSec$[ebp], 0
	jmp	SHORT $L75723
$L75724:
	mov	eax, DWORD PTR _iSec$[ebp]
	add	eax, 1
	mov	DWORD PTR _iSec$[ebp], eax
$L75723:
	cmp	DWORD PTR _iSec$[ebp], 3
	jge	SHORT $L75720

; 92   : 		// Store a pointer to the current section (avoid excessive dereferencing)
; 93   : 		pSection = &aerial->Section[iSec];

	mov	eax, DWORD PTR _iSec$[ebp]
	imul	eax, 224				; 000000e0H
	mov	ecx, DWORD PTR _aerial$[ebp]
	lea	edx, DWORD PTR [ecx+eax+28]
	mov	DWORD PTR _pSection$[ebp], edx

; 94   : 
; 95   : 		SetParticleMass(pSection, mass);

	mov	eax, DWORD PTR _mass$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pSection$[ebp]
	push	ecx
	call	?SetParticleMass@@YAXPAUParticleStruct@@M@Z ; SetParticleMass
	add	esp, 8

; 96   : 
; 97   : 		pSection->Hardness = hardness;

	mov	eax, DWORD PTR _pSection$[ebp]
	mov	ecx, DWORD PTR _hardness$[ebp]
	mov	DWORD PTR [eax+172], ecx

; 98   : 		pSection->Resistance = resistance;

	mov	eax, DWORD PTR _pSection$[ebp]
	mov	ecx, DWORD PTR _resistance$[ebp]
	mov	DWORD PTR [eax+176], ecx

; 99   : 		pSection->Gravity = gravity;

	mov	eax, DWORD PTR _pSection$[ebp]
	mov	ecx, DWORD PTR _gravity$[ebp]
	mov	DWORD PTR [eax+192], ecx

; 100  : 	}

	jmp	SHORT $L75724
$L75720:

; 101  : 
; 102  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?InitAerial@@YAXPAUAERIAL@@PAUVectorStruct@@MMMMM@Z ENDP ; InitAerial
_TEXT	ENDS
END
