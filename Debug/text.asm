; Listing generated by Microsoft (R) Optimizing Compiler Version 13.10.3077 

	TITLE	.\source\text.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT PARA USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_0L@BKMPBHO@Start?5Game?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0O@IIAOOBFG@Start?5AI?5Test?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BD@KAOLBPDC@Start?5Multi?5Player?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BC@FEJJLBNG@Join?5Multi?5Player?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_07HNCDPJCM@Track?3?5?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_08BJNAFCLI@Screen?3?5?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0L@GECKDBML@Textures?3?5?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_08MMNCOCEO@Device?3?5?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0L@EHLNCAKJ@Joystick?3?5?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_05BOONFEJA@Car?3?5?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0O@CMDOFLDO@Change?5Name?3?5?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0M@LFGAPIJB@Edit?5Mode?3?5?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0N@MKBIPBEM@Brightness?3?5?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0L@BJINFPJB@Contrast?3?5?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0L@DHHJJDKC@Reversed?3?5?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0L@PGIMAELE@Mirrored?3?5?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0O@EACHDDOG@New?5Front?5End?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0M@HMOBPHAI@Wireframe?3?5?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0M@DAELKDNM@Collision?3?5?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BG@GFNHGJFD@Perspective?5Correct?3?5?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BB@OFGADKCD@Texture?5Filter?3?5?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_09CEMPCHFN@Mip?5Map?3?5?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_05JGNHNMOP@Fog?3?5?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0M@HEEDGIMB@Dithering?3?5?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0M@DMCAKAGB@Antialias?3?5?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0M@DLHIBLOB@Draw?5Dist?3?5?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0M@PCIDMILG@Fog?5Start?3?5?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_06FKPBCDNP@Lens?3?5?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0O@CBLECGCF@Env?5Mapping?3?5?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_09KNDBDODP@Mirrors?3?5?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_09LNPHILGL@Shadows?3?5?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0L@FFIDFFDK@Lighting?3?5?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0M@EGPLPMEP@Instances?3?5?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0M@JLJCAMDJ@Skidmarks?3?5?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0N@DPFLGCIH@Car?5BBoxes?3?5?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_04OHJIHAFH@None?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_06EMKJPPBG@Lights?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_09NOJFCMHM@Visiboxes?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_07PAINMLEO@Objects?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_09FGLEONFO@Instances?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_08PJAKNEGF@AI?5Nodes?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0M@CDGOIMEM@Track?5Zones?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_08KHGPGBHF@Triggers?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0N@DCGGMKLE@Camera?5Nodes?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0N@KHPHBBBA@Force?5Fields?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BK@JIPAEAKL@Gay?5Matttt?8s?5Tony?5Portals?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_05BGOFFEGG@Point?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_06LACFBFGA@Linear?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0M@OHBPMNLF@Anisotropic?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_02JINPPBEP@No?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_03CCLAEDDF@Yes?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_03GCDBBDDL@Off?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_02IAAGKKDJ@On?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_03JALODAI@?$CFld?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_02DPKJAMEF@?$CFd?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_06OCBPDGAG@16?5bit?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_06JODPINJA@24?5bit?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_01IDAFKMJL@_?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0M@IOKPNGEC@Unavailable?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_04LBDCJOFB@Auto?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BB@OCNIMBLA@Jitter?3?5On?5?5?5?$CF1d?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0DF@PJJJGDHG@Engine?3?5?$CF3d?5?5?5Steer?3?5?$CF3d?5?5?5Revs?3@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BE@BIHFBFGO@TimeStep?3?5?$CF4d?5?$CI?$CF2d?$CJ?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BH@INBNOHCJ@Ghost?5frame?3?5?$CF8d?5?1?5?$CF8d?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CN@HFMDKHFN@NBodyCols?3?5?$CF3d?5?$CI?$CF3d?$CJ?5?5NWheelColl@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0DF@HIDMANJA@Pos?3?5?$CF5d?5?$CF5d?5?$CF5d?5?5Vel?3?5?$CF5d?5?$CF5d?5?$CF@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BI@NINGHPCH@Grid?3?5?$CF5ld?5?$CI?$CF5ld?5Polys?$CJ?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_06COEEAHF@Its?5?$CFd?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BA@DCNKNBKE@?$CF6d?5?$CF6d?5?$CF6d?5?$CF6d?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CD@HAMFNMJO@imp?3?5?$CF6d?5?$CF6d?5?$CF6d?5?5ang?3?5?$CF6d?5?$CF6d?5?$CF@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BI@IJHOFINA@SFric?3?5?$CF3d?5?5?5KFric?3?5?$CF3d?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BM@IFNIOEMO@Wheels?3?5Pos?5?$CF4d?5?$CF4d?5?$CF4d?5?$CF4d?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CN@DBMBENAN@?5?5?5?5?5?5?5?5Vel?5?$CF4d?5?$CF4d?5?$CF4d?5?$CF4d?0?5?$CF4d@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0ED@BGLCEDDD@?5?5?5?5?5?5?5?5Frc?5?$CF3d?1?$CF3d?$CI?$CF3d?$CJ?5?5?$CF3d?1?$CF3@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CP@OCDCOKHJ@?5?5?5?5?5?5?5?5C?1S?5?$CF1d?1?$CF1d?5?5?$CF1d?1?$CF1d?5?5?$CF1@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BJ@EMGMHDGM@Sparks?3?5?$CF5d?5?5Trails?3?5?$CF5d?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BB@PILJGEIA@Ghost?3?5?$CF8d?5?$CI?$CF8d?$CJ?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_03HDHPKHFC@No?5?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BJ@NDHMDNAL@Converged?3?5?$CFs?5?5?5Res?5?$DN?5?$CFd?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CB@EFNHFLME@Max?5Imp?3?5?$CF9d?5?5?5?5Max?5Ang?5Imp?3?5?$CF9d@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _IsEqualGUID
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _==
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _acosl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _asinl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _atanl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _atan2l
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _ceill
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _cosl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _coshl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _expl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _fabsl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _floorl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _fmodl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _frexpl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _ldexpl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _logl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _log10l
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _modfl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _powl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _sinl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _sinhl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _sqrtl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _tanl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _tanhl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _frexpf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _ldexpf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _acosf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _asinf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _atanf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _atan2f
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _ceilf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _cosf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _coshf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _expf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _fabsf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _floorf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _fmodf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _logf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _log10f
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _modff
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _powf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _sinf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _sinhf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _sqrtf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _tanf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _tanhf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?sqrt@@YAMM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?PrintText@@YAXFFPAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?BeginTextState@@YAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DumpText@@YAXFFFFJPAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DumpBigText@@YAXFFFFJPAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DumpText3D@@YAXPAUVectorStruct@@MMJPAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DetailMenu@@YAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?MainMenu@@YAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ShowPhysicsInfo@@YAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Pow_int@N@@YANNH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Pow_int@H@@YAHHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Pow_int@M@@YAMMH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Pow_int@O@@YAOOH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
sxdata	SEGMENT DWORD USE32 'SXDATA'
sxdata	ENDS
FLAT	GROUP _DATA, CONST, _BSS
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBCD
INCLUDELIB OLDNAMES

PUBLIC	?MipMapText@@3PAPADA				; MipMapText
PUBLIC	?NoYesText@@3PAPADA				; NoYesText
PUBLIC	??_C@_02JINPPBEP@No?$AA@			; `string'
PUBLIC	??_C@_03CCLAEDDF@Yes?$AA@			; `string'
PUBLIC	?MenuCount@@3FA					; MenuCount
PUBLIC	?MainMenuAllowed@@3PADA				; MainMenuAllowed
PUBLIC	?MainMenuText@@3PAPADA				; MainMenuText
PUBLIC	??_C@_0L@BKMPBHO@Start?5Game?$AA@		; `string'
PUBLIC	??_C@_0O@IIAOOBFG@Start?5AI?5Test?$AA@		; `string'
PUBLIC	??_C@_0BD@KAOLBPDC@Start?5Multi?5Player?$AA@	; `string'
PUBLIC	??_C@_0BC@FEJJLBNG@Join?5Multi?5Player?$AA@	; `string'
PUBLIC	??_C@_07HNCDPJCM@Track?3?5?$AA@			; `string'
PUBLIC	??_C@_08BJNAFCLI@Screen?3?5?$AA@		; `string'
PUBLIC	??_C@_0L@GECKDBML@Textures?3?5?$AA@		; `string'
PUBLIC	??_C@_08MMNCOCEO@Device?3?5?$AA@		; `string'
PUBLIC	??_C@_0L@EHLNCAKJ@Joystick?3?5?$AA@		; `string'
PUBLIC	??_C@_05BOONFEJA@Car?3?5?$AA@			; `string'
PUBLIC	??_C@_0O@CMDOFLDO@Change?5Name?3?5?$AA@		; `string'
PUBLIC	??_C@_0M@LFGAPIJB@Edit?5Mode?3?5?$AA@		; `string'
PUBLIC	??_C@_0N@MKBIPBEM@Brightness?3?5?$AA@		; `string'
PUBLIC	??_C@_0L@BJINFPJB@Contrast?3?5?$AA@		; `string'
PUBLIC	??_C@_0L@DHHJJDKC@Reversed?3?5?$AA@		; `string'
PUBLIC	??_C@_0L@PGIMAELE@Mirrored?3?5?$AA@		; `string'
PUBLIC	??_C@_0O@EACHDDOG@New?5Front?5End?$AA@		; `string'
PUBLIC	?DetailMenuText@@3PAPADA			; DetailMenuText
PUBLIC	??_C@_0M@HMOBPHAI@Wireframe?3?5?$AA@		; `string'
PUBLIC	??_C@_0M@DAELKDNM@Collision?3?5?$AA@		; `string'
PUBLIC	??_C@_0BG@GFNHGJFD@Perspective?5Correct?3?5?$AA@ ; `string'
PUBLIC	??_C@_0BB@OFGADKCD@Texture?5Filter?3?5?$AA@	; `string'
PUBLIC	??_C@_09CEMPCHFN@Mip?5Map?3?5?$AA@		; `string'
PUBLIC	??_C@_05JGNHNMOP@Fog?3?5?$AA@			; `string'
PUBLIC	??_C@_0M@HEEDGIMB@Dithering?3?5?$AA@		; `string'
PUBLIC	??_C@_0M@DMCAKAGB@Antialias?3?5?$AA@		; `string'
PUBLIC	??_C@_0M@DLHIBLOB@Draw?5Dist?3?5?$AA@		; `string'
PUBLIC	??_C@_0M@PCIDMILG@Fog?5Start?3?5?$AA@		; `string'
PUBLIC	??_C@_06FKPBCDNP@Lens?3?5?$AA@			; `string'
PUBLIC	??_C@_0O@CBLECGCF@Env?5Mapping?3?5?$AA@		; `string'
PUBLIC	??_C@_09KNDBDODP@Mirrors?3?5?$AA@		; `string'
PUBLIC	??_C@_09LNPHILGL@Shadows?3?5?$AA@		; `string'
PUBLIC	??_C@_0L@FFIDFFDK@Lighting?3?5?$AA@		; `string'
PUBLIC	??_C@_0M@EGPLPMEP@Instances?3?5?$AA@		; `string'
PUBLIC	??_C@_0M@JLJCAMDJ@Skidmarks?3?5?$AA@		; `string'
PUBLIC	??_C@_0N@DPFLGCIH@Car?5BBoxes?3?5?$AA@		; `string'
PUBLIC	?EditMenuText@@3PAPADA				; EditMenuText
PUBLIC	??_C@_04OHJIHAFH@None?$AA@			; `string'
PUBLIC	??_C@_06EMKJPPBG@Lights?$AA@			; `string'
PUBLIC	??_C@_09NOJFCMHM@Visiboxes?$AA@			; `string'
PUBLIC	??_C@_07PAINMLEO@Objects?$AA@			; `string'
PUBLIC	??_C@_09FGLEONFO@Instances?$AA@			; `string'
PUBLIC	??_C@_08PJAKNEGF@AI?5Nodes?$AA@			; `string'
PUBLIC	??_C@_0M@CDGOIMEM@Track?5Zones?$AA@		; `string'
PUBLIC	??_C@_08KHGPGBHF@Triggers?$AA@			; `string'
PUBLIC	??_C@_0N@DCGGMKLE@Camera?5Nodes?$AA@		; `string'
PUBLIC	??_C@_0N@KHPHBBBA@Force?5Fields?$AA@		; `string'
PUBLIC	??_C@_0BK@JIPAEAKL@Gay?5Matttt?8s?5Tony?5Portals?$AA@ ; `string'
PUBLIC	?TextureFilterText@@3PAPADA			; TextureFilterText
PUBLIC	??_C@_05BGOFFEGG@Point?$AA@			; `string'
PUBLIC	??_C@_06LACFBFGA@Linear?$AA@			; `string'
PUBLIC	??_C@_0M@OHBPMNLF@Anisotropic?$AA@		; `string'
_BSS	SEGMENT
?select@?1??DetailMenu@@YAXXZ@4FA DW 01H DUP (?)	; `DetailMenu'::`2'::select
	ALIGN	4

?MenuCount@@3FA DW 01H DUP (?)				; MenuCount
_BSS	ENDS
_DATA	SEGMENT
?MainMenuAllowed@@3PADA DB 01H				; MainMenuAllowed
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
_DATA	ENDS
;	COMDAT ??_C@_0L@BKMPBHO@Start?5Game?$AA@
CONST	SEGMENT
??_C@_0L@BKMPBHO@Start?5Game?$AA@ DB 'Start Game', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@IIAOOBFG@Start?5AI?5Test?$AA@
CONST	SEGMENT
??_C@_0O@IIAOOBFG@Start?5AI?5Test?$AA@ DB 'Start AI Test', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@KAOLBPDC@Start?5Multi?5Player?$AA@
CONST	SEGMENT
??_C@_0BD@KAOLBPDC@Start?5Multi?5Player?$AA@ DB 'Start Multi Player', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@FEJJLBNG@Join?5Multi?5Player?$AA@
CONST	SEGMENT
??_C@_0BC@FEJJLBNG@Join?5Multi?5Player?$AA@ DB 'Join Multi Player', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07HNCDPJCM@Track?3?5?$AA@
CONST	SEGMENT
??_C@_07HNCDPJCM@Track?3?5?$AA@ DB 'Track: ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08BJNAFCLI@Screen?3?5?$AA@
CONST	SEGMENT
??_C@_08BJNAFCLI@Screen?3?5?$AA@ DB 'Screen: ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@GECKDBML@Textures?3?5?$AA@
CONST	SEGMENT
??_C@_0L@GECKDBML@Textures?3?5?$AA@ DB 'Textures: ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08MMNCOCEO@Device?3?5?$AA@
CONST	SEGMENT
??_C@_08MMNCOCEO@Device?3?5?$AA@ DB 'Device: ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@EHLNCAKJ@Joystick?3?5?$AA@
CONST	SEGMENT
??_C@_0L@EHLNCAKJ@Joystick?3?5?$AA@ DB 'Joystick: ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05BOONFEJA@Car?3?5?$AA@
CONST	SEGMENT
??_C@_05BOONFEJA@Car?3?5?$AA@ DB 'Car: ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@CMDOFLDO@Change?5Name?3?5?$AA@
CONST	SEGMENT
??_C@_0O@CMDOFLDO@Change?5Name?3?5?$AA@ DB 'Change Name: ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@LFGAPIJB@Edit?5Mode?3?5?$AA@
CONST	SEGMENT
??_C@_0M@LFGAPIJB@Edit?5Mode?3?5?$AA@ DB 'Edit Mode: ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@MKBIPBEM@Brightness?3?5?$AA@
CONST	SEGMENT
??_C@_0N@MKBIPBEM@Brightness?3?5?$AA@ DB 'Brightness: ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@BJINFPJB@Contrast?3?5?$AA@
CONST	SEGMENT
??_C@_0L@BJINFPJB@Contrast?3?5?$AA@ DB 'Contrast: ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@DHHJJDKC@Reversed?3?5?$AA@
CONST	SEGMENT
??_C@_0L@DHHJJDKC@Reversed?3?5?$AA@ DB 'Reversed: ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@PGIMAELE@Mirrored?3?5?$AA@
CONST	SEGMENT
??_C@_0L@PGIMAELE@Mirrored?3?5?$AA@ DB 'Mirrored: ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@EACHDDOG@New?5Front?5End?$AA@
CONST	SEGMENT
??_C@_0O@EACHDDOG@New?5Front?5End?$AA@ DB 'New Front End', 00H ; `string'
CONST	ENDS
_DATA	SEGMENT
	ORG $+7
?MainMenuText@@3PAPADA DD FLAT:??_C@_0L@BKMPBHO@Start?5Game?$AA@ ; MainMenuText
	DD	FLAT:??_C@_0O@IIAOOBFG@Start?5AI?5Test?$AA@
	DD	FLAT:??_C@_0BD@KAOLBPDC@Start?5Multi?5Player?$AA@
	DD	FLAT:??_C@_0BC@FEJJLBNG@Join?5Multi?5Player?$AA@
	DD	FLAT:??_C@_07HNCDPJCM@Track?3?5?$AA@
	DD	FLAT:??_C@_08BJNAFCLI@Screen?3?5?$AA@
	DD	FLAT:??_C@_0L@GECKDBML@Textures?3?5?$AA@
	DD	FLAT:??_C@_08MMNCOCEO@Device?3?5?$AA@
	DD	FLAT:??_C@_0L@EHLNCAKJ@Joystick?3?5?$AA@
	DD	FLAT:??_C@_05BOONFEJA@Car?3?5?$AA@
	DD	FLAT:??_C@_0O@CMDOFLDO@Change?5Name?3?5?$AA@
	DD	FLAT:??_C@_0M@LFGAPIJB@Edit?5Mode?3?5?$AA@
	DD	FLAT:??_C@_0N@MKBIPBEM@Brightness?3?5?$AA@
	DD	FLAT:??_C@_0L@BJINFPJB@Contrast?3?5?$AA@
	DD	FLAT:??_C@_0L@DHHJJDKC@Reversed?3?5?$AA@
	DD	FLAT:??_C@_0L@PGIMAELE@Mirrored?3?5?$AA@
	DD	FLAT:??_C@_0O@EACHDDOG@New?5Front?5End?$AA@
_DATA	ENDS
;	COMDAT ??_C@_0M@HMOBPHAI@Wireframe?3?5?$AA@
CONST	SEGMENT
??_C@_0M@HMOBPHAI@Wireframe?3?5?$AA@ DB 'Wireframe: ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@DAELKDNM@Collision?3?5?$AA@
CONST	SEGMENT
??_C@_0M@DAELKDNM@Collision?3?5?$AA@ DB 'Collision: ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@GFNHGJFD@Perspective?5Correct?3?5?$AA@
CONST	SEGMENT
??_C@_0BG@GFNHGJFD@Perspective?5Correct?3?5?$AA@ DB 'Perspective Correct:'
	DB	' ', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@OFGADKCD@Texture?5Filter?3?5?$AA@
CONST	SEGMENT
??_C@_0BB@OFGADKCD@Texture?5Filter?3?5?$AA@ DB 'Texture Filter: ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09CEMPCHFN@Mip?5Map?3?5?$AA@
CONST	SEGMENT
??_C@_09CEMPCHFN@Mip?5Map?3?5?$AA@ DB 'Mip Map: ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05JGNHNMOP@Fog?3?5?$AA@
CONST	SEGMENT
??_C@_05JGNHNMOP@Fog?3?5?$AA@ DB 'Fog: ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@HEEDGIMB@Dithering?3?5?$AA@
CONST	SEGMENT
??_C@_0M@HEEDGIMB@Dithering?3?5?$AA@ DB 'Dithering: ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@DMCAKAGB@Antialias?3?5?$AA@
CONST	SEGMENT
??_C@_0M@DMCAKAGB@Antialias?3?5?$AA@ DB 'Antialias: ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@DLHIBLOB@Draw?5Dist?3?5?$AA@
CONST	SEGMENT
??_C@_0M@DLHIBLOB@Draw?5Dist?3?5?$AA@ DB 'Draw Dist: ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@PCIDMILG@Fog?5Start?3?5?$AA@
CONST	SEGMENT
??_C@_0M@PCIDMILG@Fog?5Start?3?5?$AA@ DB 'Fog Start: ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06FKPBCDNP@Lens?3?5?$AA@
CONST	SEGMENT
??_C@_06FKPBCDNP@Lens?3?5?$AA@ DB 'Lens: ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@CBLECGCF@Env?5Mapping?3?5?$AA@
CONST	SEGMENT
??_C@_0O@CBLECGCF@Env?5Mapping?3?5?$AA@ DB 'Env Mapping: ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09KNDBDODP@Mirrors?3?5?$AA@
CONST	SEGMENT
??_C@_09KNDBDODP@Mirrors?3?5?$AA@ DB 'Mirrors: ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09LNPHILGL@Shadows?3?5?$AA@
CONST	SEGMENT
??_C@_09LNPHILGL@Shadows?3?5?$AA@ DB 'Shadows: ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@FFIDFFDK@Lighting?3?5?$AA@
CONST	SEGMENT
??_C@_0L@FFIDFFDK@Lighting?3?5?$AA@ DB 'Lighting: ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@EGPLPMEP@Instances?3?5?$AA@
CONST	SEGMENT
??_C@_0M@EGPLPMEP@Instances?3?5?$AA@ DB 'Instances: ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@JLJCAMDJ@Skidmarks?3?5?$AA@
CONST	SEGMENT
??_C@_0M@JLJCAMDJ@Skidmarks?3?5?$AA@ DB 'Skidmarks: ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@DPFLGCIH@Car?5BBoxes?3?5?$AA@
CONST	SEGMENT
??_C@_0N@DPFLGCIH@Car?5BBoxes?3?5?$AA@ DB 'Car BBoxes: ', 00H ; `string'
CONST	ENDS
_DATA	SEGMENT
	ORG $+4
?DetailMenuText@@3PAPADA DD FLAT:??_C@_0M@HMOBPHAI@Wireframe?3?5?$AA@ ; DetailMenuText
	DD	FLAT:??_C@_0M@DAELKDNM@Collision?3?5?$AA@
	DD	FLAT:??_C@_0BG@GFNHGJFD@Perspective?5Correct?3?5?$AA@
	DD	FLAT:??_C@_0BB@OFGADKCD@Texture?5Filter?3?5?$AA@
	DD	FLAT:??_C@_09CEMPCHFN@Mip?5Map?3?5?$AA@
	DD	FLAT:??_C@_05JGNHNMOP@Fog?3?5?$AA@
	DD	FLAT:??_C@_0M@HEEDGIMB@Dithering?3?5?$AA@
	DD	FLAT:??_C@_0M@DMCAKAGB@Antialias?3?5?$AA@
	DD	FLAT:??_C@_0M@DLHIBLOB@Draw?5Dist?3?5?$AA@
	DD	FLAT:??_C@_0M@PCIDMILG@Fog?5Start?3?5?$AA@
	DD	FLAT:??_C@_06FKPBCDNP@Lens?3?5?$AA@
	DD	FLAT:??_C@_0O@CBLECGCF@Env?5Mapping?3?5?$AA@
	DD	FLAT:??_C@_09KNDBDODP@Mirrors?3?5?$AA@
	DD	FLAT:??_C@_09LNPHILGL@Shadows?3?5?$AA@
	DD	FLAT:??_C@_0L@FFIDFFDK@Lighting?3?5?$AA@
	DD	FLAT:??_C@_0M@EGPLPMEP@Instances?3?5?$AA@
	DD	FLAT:??_C@_0M@JLJCAMDJ@Skidmarks?3?5?$AA@
	DD	FLAT:??_C@_0N@DPFLGCIH@Car?5BBoxes?3?5?$AA@
_DATA	ENDS
;	COMDAT ??_C@_04OHJIHAFH@None?$AA@
CONST	SEGMENT
??_C@_04OHJIHAFH@None?$AA@ DB 'None', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06EMKJPPBG@Lights?$AA@
CONST	SEGMENT
??_C@_06EMKJPPBG@Lights?$AA@ DB 'Lights', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09NOJFCMHM@Visiboxes?$AA@
CONST	SEGMENT
??_C@_09NOJFCMHM@Visiboxes?$AA@ DB 'Visiboxes', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07PAINMLEO@Objects?$AA@
CONST	SEGMENT
??_C@_07PAINMLEO@Objects?$AA@ DB 'Objects', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09FGLEONFO@Instances?$AA@
CONST	SEGMENT
??_C@_09FGLEONFO@Instances?$AA@ DB 'Instances', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08PJAKNEGF@AI?5Nodes?$AA@
CONST	SEGMENT
??_C@_08PJAKNEGF@AI?5Nodes?$AA@ DB 'AI Nodes', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@CDGOIMEM@Track?5Zones?$AA@
CONST	SEGMENT
??_C@_0M@CDGOIMEM@Track?5Zones?$AA@ DB 'Track Zones', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08KHGPGBHF@Triggers?$AA@
CONST	SEGMENT
??_C@_08KHGPGBHF@Triggers?$AA@ DB 'Triggers', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@DCGGMKLE@Camera?5Nodes?$AA@
CONST	SEGMENT
??_C@_0N@DCGGMKLE@Camera?5Nodes?$AA@ DB 'Camera Nodes', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@KHPHBBBA@Force?5Fields?$AA@
CONST	SEGMENT
??_C@_0N@KHPHBBBA@Force?5Fields?$AA@ DB 'Force Fields', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@JIPAEAKL@Gay?5Matttt?8s?5Tony?5Portals?$AA@
CONST	SEGMENT
??_C@_0BK@JIPAEAKL@Gay?5Matttt?8s?5Tony?5Portals?$AA@ DB 'Gay Matttt''s T'
	DB	'ony Portals', 00H				; `string'
CONST	ENDS
_DATA	SEGMENT
?EditMenuText@@3PAPADA DD FLAT:??_C@_04OHJIHAFH@None?$AA@ ; EditMenuText
	DD	FLAT:??_C@_06EMKJPPBG@Lights?$AA@
	DD	FLAT:??_C@_09NOJFCMHM@Visiboxes?$AA@
	DD	FLAT:??_C@_07PAINMLEO@Objects?$AA@
	DD	FLAT:??_C@_09FGLEONFO@Instances?$AA@
	DD	FLAT:??_C@_08PJAKNEGF@AI?5Nodes?$AA@
	DD	FLAT:??_C@_0M@CDGOIMEM@Track?5Zones?$AA@
	DD	FLAT:??_C@_08KHGPGBHF@Triggers?$AA@
	DD	FLAT:??_C@_0N@DCGGMKLE@Camera?5Nodes?$AA@
	DD	FLAT:??_C@_0N@KHPHBBBA@Force?5Fields?$AA@
	DD	FLAT:??_C@_0BK@JIPAEAKL@Gay?5Matttt?8s?5Tony?5Portals?$AA@
_DATA	ENDS
;	COMDAT ??_C@_05BGOFFEGG@Point?$AA@
CONST	SEGMENT
??_C@_05BGOFFEGG@Point?$AA@ DB 'Point', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06LACFBFGA@Linear?$AA@
CONST	SEGMENT
??_C@_06LACFBFGA@Linear?$AA@ DB 'Linear', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@OHBPMNLF@Anisotropic?$AA@
CONST	SEGMENT
??_C@_0M@OHBPMNLF@Anisotropic?$AA@ DB 'Anisotropic', 00H ; `string'
CONST	ENDS
_DATA	SEGMENT
?TextureFilterText@@3PAPADA DD FLAT:??_C@_05BGOFFEGG@Point?$AA@ ; TextureFilterText
	DD	FLAT:??_C@_06LACFBFGA@Linear?$AA@
	DD	FLAT:??_C@_0M@OHBPMNLF@Anisotropic?$AA@
?MipMapText@@3PAPADA DD FLAT:??_C@_04OHJIHAFH@None?$AA@	; MipMapText
	DD	FLAT:??_C@_05BGOFFEGG@Point?$AA@
	DD	FLAT:??_C@_06LACFBFGA@Linear?$AA@
_DATA	ENDS
;	COMDAT ??_C@_02JINPPBEP@No?$AA@
CONST	SEGMENT
??_C@_02JINPPBEP@No?$AA@ DB 'No', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03CCLAEDDF@Yes?$AA@
CONST	SEGMENT
??_C@_03CCLAEDDF@Yes?$AA@ DB 'Yes', 00H			; `string'
CONST	ENDS
_DATA	SEGMENT
?NoYesText@@3PAPADA DD FLAT:??_C@_02JINPPBEP@No?$AA@	; NoYesText
	DD	FLAT:??_C@_03CCLAEDDF@Yes?$AA@
_DATA	ENDS
PUBLIC	?PrintText@@YAXFFPAD@Z				; PrintText
EXTRN	__imp__TextOutA@20:NEAR
EXTRN	?BackBuffer@@3PAUIDirectDrawSurface4@@A:DWORD	; BackBuffer
EXTRN	__imp__SetBkColor@8:NEAR
EXTRN	__imp__SetTextColor@8:NEAR
EXTRN	_strlen:NEAR
; Function compile flags: /Odt /ZI
; File c:\documents and settings\jarhead\desktop\shit to display my love for xbox revolt and fuck you borman-ness\revolt source\source\text.cpp
;	COMDAT ?PrintText@@YAXFFPAD@Z
_TEXT	SEGMENT
_hdc$ = -4						; size = 4
_x$ = 8							; size = 2
_y$ = 12						; size = 2
_text$ = 16						; size = 4
?PrintText@@YAXFFPAD@Z PROC NEAR			; PrintText, COMDAT

; 140  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 141  : 	HDC hdc;
; 142  : 
; 143  : 	if (BackBuffer->GetDC(&hdc) == DD_OK)

	lea	eax, DWORD PTR _hdc$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?BackBuffer@@3PAUIDirectDrawSurface4@@A ; BackBuffer
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?BackBuffer@@3PAUIDirectDrawSurface4@@A ; BackBuffer
	push	eax
	call	DWORD PTR [edx+68]
	test	eax, eax
	jne	SHORT $L81928

; 144  : 	{
; 145  : 		SetBkColor(hdc, RGB(0, 0, 0));

	push	0
	mov	eax, DWORD PTR _hdc$[ebp]
	push	eax
	call	DWORD PTR __imp__SetBkColor@8

; 146  : 		SetTextColor(hdc, RGB(255, 255, 255));

	push	16777215				; 00ffffffH
	mov	eax, DWORD PTR _hdc$[ebp]
	push	eax
	call	DWORD PTR __imp__SetTextColor@8

; 147  : 		TextOut(hdc, x, y, text, strlen(text));

	mov	eax, DWORD PTR _text$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _text$[ebp]
	push	ecx
	movsx	edx, WORD PTR _y$[ebp]
	push	edx
	movsx	eax, WORD PTR _x$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hdc$[ebp]
	push	ecx
	call	DWORD PTR __imp__TextOutA@20

; 148  : 		BackBuffer->ReleaseDC(hdc);

	mov	eax, DWORD PTR _hdc$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?BackBuffer@@3PAUIDirectDrawSurface4@@A ; BackBuffer
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?BackBuffer@@3PAUIDirectDrawSurface4@@A ; BackBuffer
	push	eax
	call	DWORD PTR [edx+104]
$L81928:

; 149  : 	}
; 150  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?PrintText@@YAXFFPAD@Z ENDP				; PrintText
_TEXT	ENDS
PUBLIC	?BeginTextState@@YAXXZ				; BeginTextState
EXTRN	?D3Ddevice@@3PAUIDirect3DDevice3@@A:DWORD	; D3Ddevice
EXTRN	?RenderStateChange@@3JA:DWORD			; RenderStateChange
EXTRN	?TextureStateChange@@3JA:DWORD			; TextureStateChange
EXTRN	?RenderTP@@3FA:WORD				; RenderTP
EXTRN	?RenderFog@@3FA:WORD				; RenderFog
EXTRN	?RenderAlpha@@3FA:WORD				; RenderAlpha
EXTRN	?RenderZbuffer@@3FA:WORD			; RenderZbuffer
EXTRN	?TexInfo@@3PAUTEXINFO@@A:DWORD			; TexInfo
; Function compile flags: /Odt /ZI
;	COMDAT ?BeginTextState@@YAXXZ
_TEXT	SEGMENT
?BeginTextState@@YAXXZ PROC NEAR			; BeginTextState, COMDAT

; 157  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 158  : 	ZBUFFER_OFF();

	movsx	eax, WORD PTR ?RenderZbuffer@@3FA	; RenderZbuffer
	test	eax, eax
	je	SHORT $L81946
	mov	WORD PTR ?RenderZbuffer@@3FA, 0		; RenderZbuffer
	movsx	eax, WORD PTR ?RenderZbuffer@@3FA	; RenderZbuffer
	push	eax
	push	7
	mov	ecx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	eax
	call	DWORD PTR [edx+88]
	mov	eax, DWORD PTR ?RenderStateChange@@3JA	; RenderStateChange
	add	eax, 1
	mov	DWORD PTR ?RenderStateChange@@3JA, eax	; RenderStateChange
$L81946:

; 159  : 	ALPHA_OFF();

	movsx	eax, WORD PTR ?RenderAlpha@@3FA		; RenderAlpha
	test	eax, eax
	je	SHORT $L81947
	mov	WORD PTR ?RenderAlpha@@3FA, 0		; RenderAlpha
	movsx	eax, WORD PTR ?RenderAlpha@@3FA		; RenderAlpha
	push	eax
	push	27					; 0000001bH
	mov	ecx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	eax
	call	DWORD PTR [edx+88]
	mov	eax, DWORD PTR ?RenderStateChange@@3JA	; RenderStateChange
	add	eax, 1
	mov	DWORD PTR ?RenderStateChange@@3JA, eax	; RenderStateChange
$L81947:

; 160  : 	FOG_OFF();

	movsx	eax, WORD PTR ?RenderFog@@3FA		; RenderFog
	test	eax, eax
	je	SHORT $L81948
	mov	WORD PTR ?RenderFog@@3FA, 0		; RenderFog
	movsx	eax, WORD PTR ?RenderFog@@3FA		; RenderFog
	push	eax
	push	28					; 0000001cH
	mov	ecx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	eax
	call	DWORD PTR [edx+88]
	mov	eax, DWORD PTR ?RenderStateChange@@3JA	; RenderStateChange
	add	eax, 1
	mov	DWORD PTR ?RenderStateChange@@3JA, eax	; RenderStateChange
$L81948:

; 161  : 	WIREFRAME_OFF();

	push	3
	push	8
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	edx
	call	DWORD PTR [ecx+88]
	mov	eax, DWORD PTR ?RenderStateChange@@3JA	; RenderStateChange
	add	eax, 1
	mov	DWORD PTR ?RenderStateChange@@3JA, eax	; RenderStateChange

; 162  : 	SET_TPAGE(TPAGE_FONT);

	movsx	eax, WORD PTR ?RenderTP@@3FA		; RenderTP
	cmp	eax, 22					; 00000016H
	je	SHORT $L81945
	mov	WORD PTR ?RenderTP@@3FA, 22		; RenderTP, 00000016H
	movsx	eax, WORD PTR ?RenderTP@@3FA		; RenderTP
	cmp	eax, -1
	jne	SHORT $L81950
	push	0
	push	0
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	edx
	call	DWORD PTR [ecx+152]
	mov	eax, DWORD PTR ?TextureStateChange@@3JA	; TextureStateChange
	add	eax, 1
	mov	DWORD PTR ?TextureStateChange@@3JA, eax	; TextureStateChange
	jmp	SHORT $L81945
$L81950:
	movsx	eax, WORD PTR ?RenderTP@@3FA		; RenderTP
	shl	eax, 6
	mov	ecx, DWORD PTR ?TexInfo@@3PAUTEXINFO@@A	; TexInfo
	mov	edx, DWORD PTR [ecx+eax+52]
	push	edx
	push	0
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	edx
	call	DWORD PTR [ecx+152]
	mov	eax, DWORD PTR ?TextureStateChange@@3JA	; TextureStateChange
	add	eax, 1
	mov	DWORD PTR ?TextureStateChange@@3JA, eax	; TextureStateChange
$L81945:

; 163  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?BeginTextState@@YAXXZ ENDP				; BeginTextState
_TEXT	ENDS
PUBLIC	?DumpText@@YAXFFFFJPAD@Z			; DumpText
PUBLIC	__real@41500000
PUBLIC	__real@41880000
PUBLIC	__real@43800000
PUBLIC	__real@41400000
PUBLIC	__real@41800000
EXTRN	?RenderSettings@@3URENDER_SETTINGS@@A:BYTE	; RenderSettings
EXTRN	?ScreenLeftClip@@3MA:DWORD			; ScreenLeftClip
EXTRN	?ScreenTopClip@@3MA:DWORD			; ScreenTopClip
EXTRN	__fltused:NEAR
_BSS	SEGMENT
	ALIGN	4

_TextVert DB	080H DUP (?)
_BSS	ENDS
;	COMDAT __real@41500000
CONST	SEGMENT
__real@41500000 DD 041500000r			; 13
CONST	ENDS
;	COMDAT __real@41880000
CONST	SEGMENT
__real@41880000 DD 041880000r			; 17
CONST	ENDS
;	COMDAT __real@43800000
CONST	SEGMENT
__real@43800000 DD 043800000r			; 256
CONST	ENDS
;	COMDAT __real@41400000
CONST	SEGMENT
__real@41400000 DD 041400000r			; 12
CONST	ENDS
;	COMDAT __real@41800000
CONST	SEGMENT
__real@41800000 DD 041800000r			; 16
; Function compile flags: /Odt /ZI
CONST	ENDS
;	COMDAT ?DumpText@@YAXFFFFJPAD@Z
_TEXT	SEGMENT
tv190 = -108						; size = 4
tv189 = -108						; size = 4
tv188 = -108						; size = 4
tv187 = -108						; size = 4
_ch$ = -40						; size = 4
_lv$ = -36						; size = 4
_lu$ = -32						; size = 4
_ysize$ = -28						; size = 4
_xsize$ = -24						; size = 4
_ystart$ = -20						; size = 4
_xstart$ = -16						; size = 4
_tv$ = -12						; size = 4
_tu$ = -8						; size = 4
_i$ = -1						; size = 1
_x$ = 8							; size = 2
_y$ = 12						; size = 2
_xs$ = 16						; size = 2
_ys$ = 20						; size = 2
_color$ = 24						; size = 4
_text$ = 28						; size = 4
?DumpText@@YAXFFFFJPAD@Z PROC NEAR			; DumpText, COMDAT

; 170  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 108				; 0000006cH
	push	ebx
	push	esi
	push	edi

; 171  : 	char i;
; 172  : 	float tu, tv;
; 173  : 	float xstart, ystart, xsize, ysize;
; 174  : 	long lu, lv, ch;
; 175  : 
; 176  : // calc size / pos
; 177  : 
; 178  : 	xstart = (float)x * RenderSettings.GeomScaleX + ScreenLeftClip;

	movsx	eax, WORD PTR _x$[ebp]
	mov	DWORD PTR tv187[ebp], eax
	fild	DWORD PTR tv187[ebp]
	fmul	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+12
	fadd	DWORD PTR ?ScreenLeftClip@@3MA		; ScreenLeftClip
	fstp	DWORD PTR _xstart$[ebp]

; 179  : 	ystart = (float)y * RenderSettings.GeomScaleY + ScreenTopClip;

	movsx	eax, WORD PTR _y$[ebp]
	mov	DWORD PTR tv188[ebp], eax
	fild	DWORD PTR tv188[ebp]
	fmul	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+16
	fadd	DWORD PTR ?ScreenTopClip@@3MA		; ScreenTopClip
	fstp	DWORD PTR _ystart$[ebp]

; 180  : 
; 181  : 	xsize = (float)xs * RenderSettings.GeomScaleX;

	movsx	eax, WORD PTR _xs$[ebp]
	mov	DWORD PTR tv189[ebp], eax
	fild	DWORD PTR tv189[ebp]
	fmul	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+12
	fstp	DWORD PTR _xsize$[ebp]

; 182  : 	ysize = (float)ys * RenderSettings.GeomScaleY;

	movsx	eax, WORD PTR _ys$[ebp]
	mov	DWORD PTR tv190[ebp], eax
	fild	DWORD PTR tv190[ebp]
	fmul	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+16
	fstp	DWORD PTR _ysize$[ebp]

; 183  : 
; 184  : // init vert misc
; 185  : 
; 186  : 	for (i = 0 ; i < 4 ; i++)

	mov	BYTE PTR _i$[ebp], 0
	jmp	SHORT $L81974
$L81975:
	mov	al, BYTE PTR _i$[ebp]
	add	al, 1
	mov	BYTE PTR _i$[ebp], al
$L81974:
	movsx	eax, BYTE PTR _i$[ebp]
	cmp	eax, 4
	jge	SHORT $L81978

; 187  : 	{
; 188  : 		TextVert[i].color = color;

	movsx	eax, BYTE PTR _i$[ebp]
	shl	eax, 5
	mov	ecx, DWORD PTR _color$[ebp]
	mov	DWORD PTR _TextVert[eax+16], ecx

; 189  : 		TextVert[i].rhw = 1;

	movsx	eax, BYTE PTR _i$[ebp]
	shl	eax, 5
	mov	DWORD PTR _TextVert[eax+12], 1065353216	; 3f800000H

; 190  : 	}

	jmp	SHORT $L81975
$L81978:

; 191  : 
; 192  : // draw chars
; 193  : 
; 194  : 	while (*text)

	mov	eax, DWORD PTR _text$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	$L81959

; 195  : 	{
; 196  : 
; 197  : // get char
; 198  : 
; 199  : 		ch = *text - 33;

	mov	eax, DWORD PTR _text$[ebp]
	movsx	ecx, BYTE PTR [eax]
	sub	ecx, 33					; 00000021H
	mov	DWORD PTR _ch$[ebp], ecx

; 200  : 		if (ch != -1)

	cmp	DWORD PTR _ch$[ebp], -1
	je	$L81980

; 201  : 		{
; 202  : 
; 203  : // set screen coors
; 204  : 
; 205  : 			TextVert[0].sx = xstart;

	mov	eax, DWORD PTR _xstart$[ebp]
	mov	DWORD PTR _TextVert, eax

; 206  : 			TextVert[0].sy = ystart;

	mov	eax, DWORD PTR _ystart$[ebp]
	mov	DWORD PTR _TextVert+4, eax

; 207  : 
; 208  : 			TextVert[1].sx = xstart + xsize;

	fld	DWORD PTR _xstart$[ebp]
	fadd	DWORD PTR _xsize$[ebp]
	fstp	DWORD PTR _TextVert+32

; 209  : 			TextVert[1].sy = ystart;

	mov	eax, DWORD PTR _ystart$[ebp]
	mov	DWORD PTR _TextVert+36, eax

; 210  : 
; 211  : 			TextVert[2].sx = xstart + xsize;

	fld	DWORD PTR _xstart$[ebp]
	fadd	DWORD PTR _xsize$[ebp]
	fstp	DWORD PTR _TextVert+64

; 212  : 			TextVert[2].sy = ystart + ysize;

	fld	DWORD PTR _ystart$[ebp]
	fadd	DWORD PTR _ysize$[ebp]
	fstp	DWORD PTR _TextVert+68

; 213  : 
; 214  : 			TextVert[3].sx = xstart;

	mov	eax, DWORD PTR _xstart$[ebp]
	mov	DWORD PTR _TextVert+96, eax

; 215  : 			TextVert[3].sy = ystart + ysize;

	fld	DWORD PTR _ystart$[ebp]
	fadd	DWORD PTR _ysize$[ebp]
	fstp	DWORD PTR _TextVert+100

; 216  : 
; 217  : // set uv's
; 218  : 
; 219  : 			lu = ch % FONT_PER_ROW;

	mov	eax, DWORD PTR _ch$[ebp]
	cdq
	mov	ecx, 19					; 00000013H
	idiv	ecx
	mov	DWORD PTR _lu$[ebp], edx

; 220  : 			lv = ch / FONT_PER_ROW;

	mov	eax, DWORD PTR _ch$[ebp]
	cdq
	mov	ecx, 19					; 00000013H
	idiv	ecx
	mov	DWORD PTR _lv$[ebp], eax

; 221  : 
; 222  : 			tu = (float)lu * FONT_WIDTH;

	fild	DWORD PTR _lu$[ebp]
	fmul	DWORD PTR __real@41500000
	fstp	DWORD PTR _tu$[ebp]

; 223  : 			tv = (float)lv * FONT_HEIGHT;

	fild	DWORD PTR _lv$[ebp]
	fmul	DWORD PTR __real@41880000
	fstp	DWORD PTR _tv$[ebp]

; 224  : 
; 225  : 			TextVert[0].tu = tu / 256.0f;

	fld	DWORD PTR _tu$[ebp]
	fdiv	DWORD PTR __real@43800000
	fstp	DWORD PTR _TextVert+24

; 226  : 			TextVert[0].tv = tv / 256.0f;

	fld	DWORD PTR _tv$[ebp]
	fdiv	DWORD PTR __real@43800000
	fstp	DWORD PTR _TextVert+28

; 227  : 
; 228  : 			TextVert[1].tu = (tu + FONT_UWIDTH) / 256.0f;

	fld	DWORD PTR _tu$[ebp]
	fadd	DWORD PTR __real@41400000
	fdiv	DWORD PTR __real@43800000
	fstp	DWORD PTR _TextVert+56

; 229  : 			TextVert[1].tv = tv / 256.0f;

	fld	DWORD PTR _tv$[ebp]
	fdiv	DWORD PTR __real@43800000
	fstp	DWORD PTR _TextVert+60

; 230  : 
; 231  : 			TextVert[2].tu = (tu + FONT_UWIDTH) / 256.0f;

	fld	DWORD PTR _tu$[ebp]
	fadd	DWORD PTR __real@41400000
	fdiv	DWORD PTR __real@43800000
	fstp	DWORD PTR _TextVert+88

; 232  : 			TextVert[2].tv = (tv + FONT_VHEIGHT) / 256.0f;

	fld	DWORD PTR _tv$[ebp]
	fadd	DWORD PTR __real@41800000
	fdiv	DWORD PTR __real@43800000
	fstp	DWORD PTR _TextVert+92

; 233  : 
; 234  : 			TextVert[3].tu = tu / 256.0f;

	fld	DWORD PTR _tu$[ebp]
	fdiv	DWORD PTR __real@43800000
	fstp	DWORD PTR _TextVert+120

; 235  : 			TextVert[3].tv = (tv + FONT_VHEIGHT) / 256.0f;

	fld	DWORD PTR _tv$[ebp]
	fadd	DWORD PTR __real@41800000
	fdiv	DWORD PTR __real@43800000
	fstp	DWORD PTR _TextVert+124

; 236  : 
; 237  : // draw
; 238  : 
; 239  : 			D3Ddevice->DrawPrimitive(D3DPT_TRIANGLEFAN, FVF_TEX1, TextVert, 4, D3DDP_DONOTUPDATEEXTENTS);

	push	8
	push	4
	push	OFFSET FLAT:_TextVert
	push	452					; 000001c4H
	push	6
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	edx
	call	DWORD PTR [ecx+112]
$L81980:

; 240  : 		}
; 241  : 
; 242  : // next
; 243  : 
; 244  : 		xstart += xsize;

	fld	DWORD PTR _xstart$[ebp]
	fadd	DWORD PTR _xsize$[ebp]
	fstp	DWORD PTR _xstart$[ebp]

; 245  : 		text++;

	mov	eax, DWORD PTR _text$[ebp]
	add	eax, 1
	mov	DWORD PTR _text$[ebp], eax

; 246  : 	}

	jmp	$L81978
$L81959:

; 247  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?DumpText@@YAXFFFFJPAD@Z ENDP				; DumpText
_TEXT	ENDS
PUBLIC	?DumpBigText@@YAXFFFFJPAD@Z			; DumpBigText
PUBLIC	__real@41c00000
PUBLIC	__real@42000000
;	COMDAT __real@41c00000
CONST	SEGMENT
__real@41c00000 DD 041c00000r			; 24
CONST	ENDS
;	COMDAT __real@42000000
CONST	SEGMENT
__real@42000000 DD 042000000r			; 32
; Function compile flags: /Odt /ZI
CONST	ENDS
;	COMDAT ?DumpBigText@@YAXFFFFJPAD@Z
_TEXT	SEGMENT
tv190 = -108						; size = 4
tv189 = -108						; size = 4
tv188 = -108						; size = 4
tv187 = -108						; size = 4
_ch$ = -40						; size = 4
_lv$ = -36						; size = 4
_lu$ = -32						; size = 4
_ysize$ = -28						; size = 4
_xsize$ = -24						; size = 4
_ystart$ = -20						; size = 4
_xstart$ = -16						; size = 4
_tv$ = -12						; size = 4
_tu$ = -8						; size = 4
_i$ = -1						; size = 1
_x$ = 8							; size = 2
_y$ = 12						; size = 2
_xs$ = 16						; size = 2
_ys$ = 20						; size = 2
_color$ = 24						; size = 4
_text$ = 28						; size = 4
?DumpBigText@@YAXFFFFJPAD@Z PROC NEAR			; DumpBigText, COMDAT

; 254  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 108				; 0000006cH
	push	ebx
	push	esi
	push	edi

; 255  : 	char i;
; 256  : 	float tu, tv;
; 257  : 	float xstart, ystart, xsize, ysize;
; 258  : 	long lu, lv, ch;
; 259  : 
; 260  : // calc size / pos
; 261  : 
; 262  : 	xstart = (float)x * RenderSettings.GeomScaleX + ScreenLeftClip;

	movsx	eax, WORD PTR _x$[ebp]
	mov	DWORD PTR tv187[ebp], eax
	fild	DWORD PTR tv187[ebp]
	fmul	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+12
	fadd	DWORD PTR ?ScreenLeftClip@@3MA		; ScreenLeftClip
	fstp	DWORD PTR _xstart$[ebp]

; 263  : 	ystart = (float)y * RenderSettings.GeomScaleY + ScreenTopClip;

	movsx	eax, WORD PTR _y$[ebp]
	mov	DWORD PTR tv188[ebp], eax
	fild	DWORD PTR tv188[ebp]
	fmul	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+16
	fadd	DWORD PTR ?ScreenTopClip@@3MA		; ScreenTopClip
	fstp	DWORD PTR _ystart$[ebp]

; 264  : 
; 265  : 	xsize = (float)xs * RenderSettings.GeomScaleX;

	movsx	eax, WORD PTR _xs$[ebp]
	mov	DWORD PTR tv189[ebp], eax
	fild	DWORD PTR tv189[ebp]
	fmul	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+12
	fstp	DWORD PTR _xsize$[ebp]

; 266  : 	ysize = (float)ys * RenderSettings.GeomScaleY;

	movsx	eax, WORD PTR _ys$[ebp]
	mov	DWORD PTR tv190[ebp], eax
	fild	DWORD PTR tv190[ebp]
	fmul	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+16
	fstp	DWORD PTR _ysize$[ebp]

; 267  : 
; 268  : // init vert misc
; 269  : 
; 270  : 	for (i = 0 ; i < 4 ; i++)

	mov	BYTE PTR _i$[ebp], 0
	jmp	SHORT $L82005
$L82006:
	mov	al, BYTE PTR _i$[ebp]
	add	al, 1
	mov	BYTE PTR _i$[ebp], al
$L82005:
	movsx	eax, BYTE PTR _i$[ebp]
	cmp	eax, 4
	jge	SHORT $L82009

; 271  : 	{
; 272  : 		TextVert[i].color = color;

	movsx	eax, BYTE PTR _i$[ebp]
	shl	eax, 5
	mov	ecx, DWORD PTR _color$[ebp]
	mov	DWORD PTR _TextVert[eax+16], ecx

; 273  : 		TextVert[i].rhw = 1;

	movsx	eax, BYTE PTR _i$[ebp]
	shl	eax, 5
	mov	DWORD PTR _TextVert[eax+12], 1065353216	; 3f800000H

; 274  : 	}

	jmp	SHORT $L82006
$L82009:

; 275  : 
; 276  : // draw chars
; 277  : 
; 278  : 	while (*text)

	mov	eax, DWORD PTR _text$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	$L81990

; 279  : 	{
; 280  : 
; 281  : // get char
; 282  : 
; 283  : 		ch = *text - 33;

	mov	eax, DWORD PTR _text$[ebp]
	movsx	ecx, BYTE PTR [eax]
	sub	ecx, 33					; 00000021H
	mov	DWORD PTR _ch$[ebp], ecx

; 284  : 		if (ch != -1)

	cmp	DWORD PTR _ch$[ebp], -1
	je	$L82011

; 285  : 		{
; 286  : 
; 287  : // set screen coors
; 288  : 
; 289  : 			TextVert[0].sx = xstart;

	mov	eax, DWORD PTR _xstart$[ebp]
	mov	DWORD PTR _TextVert, eax

; 290  : 			TextVert[0].sy = ystart;

	mov	eax, DWORD PTR _ystart$[ebp]
	mov	DWORD PTR _TextVert+4, eax

; 291  : 
; 292  : 			TextVert[1].sx = xstart + xsize;

	fld	DWORD PTR _xstart$[ebp]
	fadd	DWORD PTR _xsize$[ebp]
	fstp	DWORD PTR _TextVert+32

; 293  : 			TextVert[1].sy = ystart;

	mov	eax, DWORD PTR _ystart$[ebp]
	mov	DWORD PTR _TextVert+36, eax

; 294  : 
; 295  : 			TextVert[2].sx = xstart + xsize;

	fld	DWORD PTR _xstart$[ebp]
	fadd	DWORD PTR _xsize$[ebp]
	fstp	DWORD PTR _TextVert+64

; 296  : 			TextVert[2].sy = ystart + ysize;

	fld	DWORD PTR _ystart$[ebp]
	fadd	DWORD PTR _ysize$[ebp]
	fstp	DWORD PTR _TextVert+68

; 297  : 
; 298  : 			TextVert[3].sx = xstart;

	mov	eax, DWORD PTR _xstart$[ebp]
	mov	DWORD PTR _TextVert+96, eax

; 299  : 			TextVert[3].sy = ystart + ysize;

	fld	DWORD PTR _ystart$[ebp]
	fadd	DWORD PTR _ysize$[ebp]
	fstp	DWORD PTR _TextVert+100

; 300  : 
; 301  : // set uv's
; 302  : 
; 303  : 			lu = ch % BIG_FONT_PER_ROW;

	mov	eax, DWORD PTR _ch$[ebp]
	cdq
	mov	ecx, 10					; 0000000aH
	idiv	ecx
	mov	DWORD PTR _lu$[ebp], edx

; 304  : 			lv = ch / BIG_FONT_PER_ROW;

	mov	eax, DWORD PTR _ch$[ebp]
	cdq
	mov	ecx, 10					; 0000000aH
	idiv	ecx
	mov	DWORD PTR _lv$[ebp], eax

; 305  : 
; 306  : 			tu = (float)lu * BIG_FONT_WIDTH;

	fild	DWORD PTR _lu$[ebp]
	fmul	DWORD PTR __real@41c00000
	fstp	DWORD PTR _tu$[ebp]

; 307  : 			tv = (float)lv * BIG_FONT_HEIGHT;

	fild	DWORD PTR _lv$[ebp]
	fmul	DWORD PTR __real@42000000
	fstp	DWORD PTR _tv$[ebp]

; 308  : 
; 309  : 			TextVert[0].tu = tu / 256.0f;

	fld	DWORD PTR _tu$[ebp]
	fdiv	DWORD PTR __real@43800000
	fstp	DWORD PTR _TextVert+24

; 310  : 			TextVert[0].tv = tv / 256.0f;

	fld	DWORD PTR _tv$[ebp]
	fdiv	DWORD PTR __real@43800000
	fstp	DWORD PTR _TextVert+28

; 311  : 
; 312  : 			TextVert[1].tu = (tu + BIG_FONT_UWIDTH) / 256.0f;

	fld	DWORD PTR _tu$[ebp]
	fadd	DWORD PTR __real@41c00000
	fdiv	DWORD PTR __real@43800000
	fstp	DWORD PTR _TextVert+56

; 313  : 			TextVert[1].tv = tv / 256.0f;

	fld	DWORD PTR _tv$[ebp]
	fdiv	DWORD PTR __real@43800000
	fstp	DWORD PTR _TextVert+60

; 314  : 
; 315  : 			TextVert[2].tu = (tu + BIG_FONT_UWIDTH) / 256.0f;

	fld	DWORD PTR _tu$[ebp]
	fadd	DWORD PTR __real@41c00000
	fdiv	DWORD PTR __real@43800000
	fstp	DWORD PTR _TextVert+88

; 316  : 			TextVert[2].tv = (tv + BIG_FONT_VHEIGHT) / 256.0f;

	fld	DWORD PTR _tv$[ebp]
	fadd	DWORD PTR __real@42000000
	fdiv	DWORD PTR __real@43800000
	fstp	DWORD PTR _TextVert+92

; 317  : 
; 318  : 			TextVert[3].tu = tu / 256.0f;

	fld	DWORD PTR _tu$[ebp]
	fdiv	DWORD PTR __real@43800000
	fstp	DWORD PTR _TextVert+120

; 319  : 			TextVert[3].tv = (tv + BIG_FONT_VHEIGHT) / 256.0f;

	fld	DWORD PTR _tv$[ebp]
	fadd	DWORD PTR __real@42000000
	fdiv	DWORD PTR __real@43800000
	fstp	DWORD PTR _TextVert+124

; 320  : 
; 321  : // draw
; 322  : 
; 323  : 			D3Ddevice->DrawPrimitive(D3DPT_TRIANGLEFAN, FVF_TEX1, TextVert, 4, D3DDP_DONOTUPDATEEXTENTS);

	push	8
	push	4
	push	OFFSET FLAT:_TextVert
	push	452					; 000001c4H
	push	6
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	edx
	call	DWORD PTR [ecx+112]
$L82011:

; 324  : 		}
; 325  : 
; 326  : // next
; 327  : 
; 328  : 		xstart += xsize;

	fld	DWORD PTR _xstart$[ebp]
	fadd	DWORD PTR _xsize$[ebp]
	fstp	DWORD PTR _xstart$[ebp]

; 329  : 		text++;

	mov	eax, DWORD PTR _text$[ebp]
	add	eax, 1
	mov	DWORD PTR _text$[ebp], eax

; 330  : 	}

	jmp	$L82009
$L81990:

; 331  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?DumpBigText@@YAXFFFFJPAD@Z ENDP			; DumpBigText
_TEXT	ENDS
PUBLIC	?DumpText3D@@YAXPAUVectorStruct@@MMJPAD@Z	; DumpText3D
PUBLIC	__real@3f800000
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
; Function compile flags: /Odt /ZI
CONST	ENDS
;	COMDAT ?DumpText3D@@YAXPAUVectorStruct@@MMJPAD@Z
_TEXT	SEGMENT
_ch$ = -40						; size = 4
_lv$ = -36						; size = 4
_lu$ = -32						; size = 4
_y$ = -28						; size = 4
_x$ = -24						; size = 4
_rhw$ = -20						; size = 4
_sz$ = -16						; size = 4
_tv$ = -12						; size = 4
_tu$ = -8						; size = 4
_i$ = -1						; size = 1
_pos$ = 8						; size = 4
_xs$ = 12						; size = 4
_ys$ = 16						; size = 4
_color$ = 20						; size = 4
_text$ = 24						; size = 4
?DumpText3D@@YAXPAUVectorStruct@@MMJPAD@Z PROC NEAR	; DumpText3D, COMDAT

; 338  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 104				; 00000068H
	push	ebx
	push	esi
	push	edi

; 339  : 	char i;
; 340  : 	float tu, tv, sz, rhw;
; 341  : 	float x, y;
; 342  : 	long lu, lv, ch;
; 343  : 
; 344  : // set tpage
; 345  : 
; 346  : 	SET_TPAGE(TPAGE_FONT);

	movsx	eax, WORD PTR ?RenderTP@@3FA		; RenderTP
	cmp	eax, 22					; 00000016H
	je	SHORT $L82031
	mov	WORD PTR ?RenderTP@@3FA, 22		; RenderTP, 00000016H
	movsx	eax, WORD PTR ?RenderTP@@3FA		; RenderTP
	cmp	eax, -1
	jne	SHORT $L82032
	push	0
	push	0
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	edx
	call	DWORD PTR [ecx+152]
	mov	eax, DWORD PTR ?TextureStateChange@@3JA	; TextureStateChange
	add	eax, 1
	mov	DWORD PTR ?TextureStateChange@@3JA, eax	; TextureStateChange
	jmp	SHORT $L82031
$L82032:
	movsx	eax, WORD PTR ?RenderTP@@3FA		; RenderTP
	shl	eax, 6
	mov	ecx, DWORD PTR ?TexInfo@@3PAUTEXINFO@@A	; TexInfo
	mov	edx, DWORD PTR [ecx+eax+52]
	push	edx
	push	0
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	edx
	call	DWORD PTR [ecx+152]
	mov	eax, DWORD PTR ?TextureStateChange@@3JA	; TextureStateChange
	add	eax, 1
	mov	DWORD PTR ?TextureStateChange@@3JA, eax	; TextureStateChange
$L82031:

; 347  : 
; 348  : // calc size / pos
; 349  : 
; 350  : 	xs = xs * RenderSettings.GeomPers / pos->v[Z] * RenderSettings.GeomScaleX;

	fld	DWORD PTR _xs$[ebp]
	fmul	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A
	mov	eax, DWORD PTR _pos$[ebp]
	fdiv	DWORD PTR [eax+8]
	fmul	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+12
	fstp	DWORD PTR _xs$[ebp]

; 351  : 	ys = ys * RenderSettings.GeomPers / pos->v[Z] * RenderSettings.GeomScaleY;

	fld	DWORD PTR _ys$[ebp]
	fmul	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A
	mov	eax, DWORD PTR _pos$[ebp]
	fdiv	DWORD PTR [eax+8]
	fmul	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+16
	fstp	DWORD PTR _ys$[ebp]

; 352  : 	x = pos->v[X] * RenderSettings.GeomPers / pos->v[Z] * RenderSettings.GeomScaleX + RenderSettings.GeomCentreX;

	mov	eax, DWORD PTR _pos$[ebp]
	fld	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A
	fmul	DWORD PTR [eax]
	mov	ecx, DWORD PTR _pos$[ebp]
	fdiv	DWORD PTR [ecx+8]
	fmul	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+12
	fadd	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+4
	fstp	DWORD PTR _x$[ebp]

; 353  : 	y = pos->v[Y] * RenderSettings.GeomPers / pos->v[Z] * RenderSettings.GeomScaleY + RenderSettings.GeomCentreY;

	mov	eax, DWORD PTR _pos$[ebp]
	fld	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A
	fmul	DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _pos$[ebp]
	fdiv	DWORD PTR [ecx+8]
	fmul	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+16
	fadd	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+8
	fstp	DWORD PTR _y$[ebp]

; 354  : 
; 355  : // init vert misc
; 356  : 
; 357  : 	sz = GET_ZBUFFER(pos->v[Z]);

	mov	eax, DWORD PTR _pos$[ebp]
	fld	DWORD PTR [eax+8]
	fmul	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+36
	fdivr	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+44
	fsubr	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+40
	fstp	DWORD PTR _sz$[ebp]

; 358  : 	rhw = 1 / pos->v[Z];

	mov	eax, DWORD PTR _pos$[ebp]
	fld	DWORD PTR __real@3f800000
	fdiv	DWORD PTR [eax+8]
	fstp	DWORD PTR _rhw$[ebp]

; 359  : 
; 360  : 	for (i = 0 ; i < 4 ; i++)

	mov	BYTE PTR _i$[ebp], 0
	jmp	SHORT $L82034
$L82035:
	mov	al, BYTE PTR _i$[ebp]
	add	al, 1
	mov	BYTE PTR _i$[ebp], al
$L82034:
	movsx	eax, BYTE PTR _i$[ebp]
	cmp	eax, 4
	jge	SHORT $L82038

; 361  : 	{
; 362  : 		TextVert[i].color = color;

	movsx	eax, BYTE PTR _i$[ebp]
	shl	eax, 5
	mov	ecx, DWORD PTR _color$[ebp]
	mov	DWORD PTR _TextVert[eax+16], ecx

; 363  : 		TextVert[i].sz = sz;

	movsx	eax, BYTE PTR _i$[ebp]
	shl	eax, 5
	mov	ecx, DWORD PTR _sz$[ebp]
	mov	DWORD PTR _TextVert[eax+8], ecx

; 364  : 		TextVert[i].rhw = rhw;

	movsx	eax, BYTE PTR _i$[ebp]
	shl	eax, 5
	mov	ecx, DWORD PTR _rhw$[ebp]
	mov	DWORD PTR _TextVert[eax+12], ecx

; 365  : 		
; 366  : 	}

	jmp	SHORT $L82035
$L82038:

; 367  : 
; 368  : // draw chars
; 369  : 
; 370  : 	while (*text)

	mov	eax, DWORD PTR _text$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	$L82020

; 371  : 	{
; 372  : 
; 373  : // get char
; 374  : 
; 375  : 		ch = *text - 33;

	mov	eax, DWORD PTR _text$[ebp]
	movsx	ecx, BYTE PTR [eax]
	sub	ecx, 33					; 00000021H
	mov	DWORD PTR _ch$[ebp], ecx

; 376  : 		if (ch != -1)

	cmp	DWORD PTR _ch$[ebp], -1
	je	$L82040

; 377  : 		{
; 378  : 
; 379  : // set screen coors
; 380  : 
; 381  : 			TextVert[0].sx = x;

	mov	eax, DWORD PTR _x$[ebp]
	mov	DWORD PTR _TextVert, eax

; 382  : 			TextVert[0].sy = y;

	mov	eax, DWORD PTR _y$[ebp]
	mov	DWORD PTR _TextVert+4, eax

; 383  : 
; 384  : 			TextVert[1].sx = (x + xs);

	fld	DWORD PTR _x$[ebp]
	fadd	DWORD PTR _xs$[ebp]
	fstp	DWORD PTR _TextVert+32

; 385  : 			TextVert[1].sy = y;

	mov	eax, DWORD PTR _y$[ebp]
	mov	DWORD PTR _TextVert+36, eax

; 386  : 
; 387  : 			TextVert[2].sx = (x + xs);

	fld	DWORD PTR _x$[ebp]
	fadd	DWORD PTR _xs$[ebp]
	fstp	DWORD PTR _TextVert+64

; 388  : 			TextVert[2].sy = (y + ys);

	fld	DWORD PTR _y$[ebp]
	fadd	DWORD PTR _ys$[ebp]
	fstp	DWORD PTR _TextVert+68

; 389  : 
; 390  : 			TextVert[3].sx = x;

	mov	eax, DWORD PTR _x$[ebp]
	mov	DWORD PTR _TextVert+96, eax

; 391  : 			TextVert[3].sy = (y + ys);

	fld	DWORD PTR _y$[ebp]
	fadd	DWORD PTR _ys$[ebp]
	fstp	DWORD PTR _TextVert+100

; 392  : 
; 393  : // set uv's
; 394  : 
; 395  : 			lu = ch % FONT_PER_ROW;

	mov	eax, DWORD PTR _ch$[ebp]
	cdq
	mov	ecx, 19					; 00000013H
	idiv	ecx
	mov	DWORD PTR _lu$[ebp], edx

; 396  : 			lv = ch / FONT_PER_ROW;

	mov	eax, DWORD PTR _ch$[ebp]
	cdq
	mov	ecx, 19					; 00000013H
	idiv	ecx
	mov	DWORD PTR _lv$[ebp], eax

; 397  : 
; 398  : 			tu = (float)lu * FONT_WIDTH;

	fild	DWORD PTR _lu$[ebp]
	fmul	DWORD PTR __real@41500000
	fstp	DWORD PTR _tu$[ebp]

; 399  : 			tv = (float)lv * FONT_HEIGHT;

	fild	DWORD PTR _lv$[ebp]
	fmul	DWORD PTR __real@41880000
	fstp	DWORD PTR _tv$[ebp]

; 400  : 
; 401  : 			TextVert[0].tu = tu / 256;

	fld	DWORD PTR _tu$[ebp]
	fdiv	DWORD PTR __real@43800000
	fstp	DWORD PTR _TextVert+24

; 402  : 			TextVert[0].tv = tv / 256;

	fld	DWORD PTR _tv$[ebp]
	fdiv	DWORD PTR __real@43800000
	fstp	DWORD PTR _TextVert+28

; 403  : 
; 404  : 			TextVert[1].tu = (tu + FONT_UWIDTH) / 256;

	fld	DWORD PTR _tu$[ebp]
	fadd	DWORD PTR __real@41400000
	fdiv	DWORD PTR __real@43800000
	fstp	DWORD PTR _TextVert+56

; 405  : 			TextVert[1].tv = tv / 256;

	fld	DWORD PTR _tv$[ebp]
	fdiv	DWORD PTR __real@43800000
	fstp	DWORD PTR _TextVert+60

; 406  : 
; 407  : 			TextVert[2].tu = (tu + FONT_UWIDTH) / 256;

	fld	DWORD PTR _tu$[ebp]
	fadd	DWORD PTR __real@41400000
	fdiv	DWORD PTR __real@43800000
	fstp	DWORD PTR _TextVert+88

; 408  : 			TextVert[2].tv = (tv + FONT_VHEIGHT - 1) / 256;

	fld	DWORD PTR _tv$[ebp]
	fadd	DWORD PTR __real@41800000
	fsub	DWORD PTR __real@3f800000
	fdiv	DWORD PTR __real@43800000
	fstp	DWORD PTR _TextVert+92

; 409  : 
; 410  : 			TextVert[3].tu = tu / 256;

	fld	DWORD PTR _tu$[ebp]
	fdiv	DWORD PTR __real@43800000
	fstp	DWORD PTR _TextVert+120

; 411  : 			TextVert[3].tv = (tv + FONT_VHEIGHT - 1) / 256;

	fld	DWORD PTR _tv$[ebp]
	fadd	DWORD PTR __real@41800000
	fsub	DWORD PTR __real@3f800000
	fdiv	DWORD PTR __real@43800000
	fstp	DWORD PTR _TextVert+124

; 412  : 
; 413  : // draw
; 414  : 
; 415  : 			D3Ddevice->DrawPrimitive(D3DPT_TRIANGLEFAN, FVF_TEX1, TextVert, 4, D3DDP_DONOTUPDATEEXTENTS);

	push	8
	push	4
	push	OFFSET FLAT:_TextVert
	push	452					; 000001c4H
	push	6
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	edx
	call	DWORD PTR [ecx+112]
$L82040:

; 416  : 		}
; 417  : 
; 418  : // next
; 419  : 
; 420  : 		x += xs;

	fld	DWORD PTR _x$[ebp]
	fadd	DWORD PTR _xs$[ebp]
	fstp	DWORD PTR _x$[ebp]

; 421  : 		text++;

	mov	eax, DWORD PTR _text$[ebp]
	add	eax, 1
	mov	DWORD PTR _text$[ebp], eax

; 422  : 	}

	jmp	$L82038
$L82020:

; 423  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?DumpText3D@@YAXPAUVectorStruct@@MMJPAD@Z ENDP		; DumpText3D
_TEXT	ENDS
PUBLIC	??_C@_03GCDBBDDL@Off?$AA@			; `string'
PUBLIC	??_C@_02IAAGKKDJ@On?$AA@			; `string'
PUBLIC	??_C@_03JALODAI@?$CFld?$AA@			; `string'
PUBLIC	?DetailMenu@@YAXXZ				; DetailMenu
PUBLIC	??_C@_02DPKJAMEF@?$CFd?$AA@			; `string'
PUBLIC	__real@00000000
PUBLIC	__real@43000000
PUBLIC	__real@47800000
PUBLIC	__real@45800000
EXTRN	?SetWorldMirror@@YAXXZ:NEAR			; SetWorldMirror
EXTRN	?GameSettings@@3UGAME_SETTINGS@@A:BYTE		; GameSettings
EXTRN	?Keys@@3PADA:BYTE				; Keys
EXTRN	?LastKeys@@3PADA:BYTE				; LastKeys
EXTRN	?LevelInf@@3PAULEVELINFO@@A:DWORD		; LevelInf
EXTRN	?BaseGeomPers@@3MA:DWORD			; BaseGeomPers
EXTRN	?DxState@@3UDX_STATE@@A:BYTE			; DxState
EXTRN	?CAR_DrawCarBBoxes@@3_NA:BYTE			; CAR_DrawCarBBoxes
EXTRN	?DrawGridCollSkin@@3_NA:BYTE			; DrawGridCollSkin
EXTRN	__ftol2:NEAR
EXTRN	?SetNearFar@@YAXMM@Z:NEAR			; SetNearFar
EXTRN	?SetFogVars@@YAXMMM@Z:NEAR			; SetFogVars
EXTRN	__imp__wsprintfA:NEAR
;	COMDAT ??_C@_03GCDBBDDL@Off?$AA@
CONST	SEGMENT
??_C@_03GCDBBDDL@Off?$AA@ DB 'Off', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02IAAGKKDJ@On?$AA@
CONST	SEGMENT
??_C@_02IAAGKKDJ@On?$AA@ DB 'On', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03JALODAI@?$CFld?$AA@
CONST	SEGMENT
??_C@_03JALODAI@?$CFld?$AA@ DB '%ld', 00H		; `string'
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT __real@43000000
CONST	SEGMENT
__real@43000000 DD 043000000r			; 128
CONST	ENDS
;	COMDAT __real@47800000
CONST	SEGMENT
__real@47800000 DD 047800000r			; 65536
CONST	ENDS
;	COMDAT ??_C@_02DPKJAMEF@?$CFd?$AA@
CONST	SEGMENT
??_C@_02DPKJAMEF@?$CFd?$AA@ DB '%d', 00H		; `string'
CONST	ENDS
;	COMDAT __real@45800000
CONST	SEGMENT
__real@45800000 DD 045800000r			; 4096
; Function compile flags: /Odt /ZI
CONST	ENDS
;	COMDAT ?DetailMenu@@YAXXZ
_TEXT	SEGMENT
tv199 = -104						; size = 4
tv146 = -104						; size = 4
_lr$ = -33						; size = 1
_text$ = -32						; size = 6
_on$ = -24						; size = 3
_off$ = -20						; size = 4
_flag$ = -16						; size = 4
_togg$ = -12						; size = 4
_col$ = -8						; size = 4
_i$ = -4						; size = 2
?DetailMenu@@YAXXZ PROC NEAR				; DetailMenu, COMDAT

; 430  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 104				; 00000068H
	push	ebx
	push	esi
	push	edi

; 431  : 	short i;
; 432  : 	static short select = 0;
; 433  : 	unsigned long col;
; 434  : 	char *togg;
; 435  : 	long flag;
; 436  : 	char off[] = "Off";

	mov	eax, DWORD PTR ??_C@_03GCDBBDDL@Off?$AA@
	mov	DWORD PTR _off$[ebp], eax

; 437  : 	char on[] = "On";

	mov	ax, WORD PTR ??_C@_02IAAGKKDJ@On?$AA@
	mov	WORD PTR _on$[ebp], ax
	mov	cl, BYTE PTR ??_C@_02IAAGKKDJ@On?$AA@+2
	mov	BYTE PTR _on$[ebp+2], cl

; 438  : 	char text[6], lr = 0;

	mov	BYTE PTR _lr$[ebp], 0

; 439  : 
; 440  : // move
; 441  : 
; 442  : 	if (Keys[DIK_UP] && !LastKeys[DIK_UP] && select) select--;

	movsx	eax, BYTE PTR ?Keys@@3PADA+200
	test	eax, eax
	je	SHORT $L82058
	movsx	eax, BYTE PTR ?LastKeys@@3PADA+200
	test	eax, eax
	jne	SHORT $L82058
	movsx	eax, WORD PTR ?select@?1??DetailMenu@@YAXXZ@4FA
	test	eax, eax
	je	SHORT $L82058
	mov	ax, WORD PTR ?select@?1??DetailMenu@@YAXXZ@4FA
	sub	ax, 1
	mov	WORD PTR ?select@?1??DetailMenu@@YAXXZ@4FA, ax
$L82058:

; 443  : 	if (Keys[DIK_DOWN] && !LastKeys[DIK_DOWN] && select < DETAIL_MENU_NUM - 1) select++;

	movsx	eax, BYTE PTR ?Keys@@3PADA+208
	test	eax, eax
	je	SHORT $L82059
	movsx	eax, BYTE PTR ?LastKeys@@3PADA+208
	test	eax, eax
	jne	SHORT $L82059
	movsx	eax, WORD PTR ?select@?1??DetailMenu@@YAXXZ@4FA
	cmp	eax, 17					; 00000011H
	jge	SHORT $L82059
	mov	ax, WORD PTR ?select@?1??DetailMenu@@YAXXZ@4FA
	add	ax, 1
	mov	WORD PTR ?select@?1??DetailMenu@@YAXXZ@4FA, ax
$L82059:

; 444  : 	if (Keys[DIK_LEFT] && !LastKeys[DIK_LEFT]) lr |= 1;

	movsx	eax, BYTE PTR ?Keys@@3PADA+203
	test	eax, eax
	je	SHORT $L82060
	movsx	eax, BYTE PTR ?LastKeys@@3PADA+203
	test	eax, eax
	jne	SHORT $L82060
	movsx	eax, BYTE PTR _lr$[ebp]
	or	eax, 1
	mov	BYTE PTR _lr$[ebp], al
$L82060:

; 445  : 	if (Keys[DIK_RIGHT] && !LastKeys[DIK_RIGHT]) lr |= 2;

	movsx	eax, BYTE PTR ?Keys@@3PADA+205
	test	eax, eax
	je	SHORT $L82061
	movsx	eax, BYTE PTR ?LastKeys@@3PADA+205
	test	eax, eax
	jne	SHORT $L82061
	movsx	eax, BYTE PTR _lr$[ebp]
	or	eax, 2
	mov	BYTE PTR _lr$[ebp], al
$L82061:

; 446  : 
; 447  : // sort each detail setting
; 448  : 
; 449  : 	for (i = 0 ; i < DETAIL_MENU_NUM ; i++)

	mov	WORD PTR _i$[ebp], 0
	jmp	SHORT $L82062
$L82063:
	mov	ax, WORD PTR _i$[ebp]
	add	ax, 1
	mov	WORD PTR _i$[ebp], ax
$L82062:
	movsx	eax, WORD PTR _i$[ebp]
	cmp	eax, 18					; 00000012H
	jge	$L82045

; 450  : 	{
; 451  : 		flag = TRUE;

	mov	DWORD PTR _flag$[ebp], 1

; 452  : 		togg = off;

	lea	eax, DWORD PTR _off$[ebp]
	mov	DWORD PTR _togg$[ebp], eax

; 453  : 
; 454  : 		switch (i)

	movsx	eax, WORD PTR _i$[ebp]
	mov	DWORD PTR tv146[ebp], eax
	cmp	DWORD PTR tv146[ebp], 17		; 00000011H
	ja	$L82066
	mov	ecx, DWORD PTR tv146[ebp]
	jmp	DWORD PTR $L82619[ecx*4]
$L82069:

; 455  : 		{
; 456  : 
; 457  : // wireframe
; 458  : 
; 459  : 			case DETAIL_MENU_WIREFRAME:
; 460  : 				if ((flag = DxState.WireframeEnabled) && i == select)

	mov	eax, DWORD PTR ?DxState@@3UDX_STATE@@A
	mov	DWORD PTR _flag$[ebp], eax
	cmp	DWORD PTR _flag$[ebp], 0
	je	SHORT $L82070
	movsx	eax, WORD PTR _i$[ebp]
	movsx	ecx, WORD PTR ?select@?1??DetailMenu@@YAXXZ@4FA
	cmp	eax, ecx
	jne	SHORT $L82070

; 461  : 				{
; 462  : 					if (lr & 1)	DxState.Wireframe = D3DFILL_SOLID;

	movsx	eax, BYTE PTR _lr$[ebp]
	and	eax, 1
	je	SHORT $L82071
	mov	DWORD PTR ?DxState@@3UDX_STATE@@A+4, 3
$L82071:

; 463  : 					if (lr & 2) DxState.Wireframe = D3DFILL_WIREFRAME;

	movsx	eax, BYTE PTR _lr$[ebp]
	and	eax, 2
	je	SHORT $L82070
	mov	DWORD PTR ?DxState@@3UDX_STATE@@A+4, 2
$L82070:

; 464  : 				}
; 465  : 				if (DxState.Wireframe == D3DFILL_WIREFRAME) togg = on;

	cmp	DWORD PTR ?DxState@@3UDX_STATE@@A+4, 2
	jne	SHORT $L82073
	lea	eax, DWORD PTR _on$[ebp]
	mov	DWORD PTR _togg$[ebp], eax
$L82073:

; 466  : 			break;

	jmp	$L82066
$L82074:

; 467  : 
; 468  : // Collision skin
; 469  : 
; 470  : 			case DETAIL_MENU_COLLSKIN_GRID:
; 471  : 				if (i == select)

	movsx	eax, WORD PTR _i$[ebp]
	movsx	ecx, WORD PTR ?select@?1??DetailMenu@@YAXXZ@4FA
	cmp	eax, ecx
	jne	SHORT $L82075

; 472  : 				{
; 473  : 					if (lr != 0) DrawGridCollSkin = !DrawGridCollSkin;

	movsx	eax, BYTE PTR _lr$[ebp]
	test	eax, eax
	je	SHORT $L82075
	movzx	eax, BYTE PTR ?DrawGridCollSkin@@3_NA	; DrawGridCollSkin
	neg	eax
	sbb	eax, eax
	inc	eax
	mov	BYTE PTR ?DrawGridCollSkin@@3_NA, al	; DrawGridCollSkin
$L82075:

; 474  : 				}
; 475  : 				flag = TRUE;

	mov	DWORD PTR _flag$[ebp], 1

; 476  : 				if (DrawGridCollSkin) togg = on;

	movzx	eax, BYTE PTR ?DrawGridCollSkin@@3_NA	; DrawGridCollSkin
	test	eax, eax
	je	SHORT $L82077
	lea	eax, DWORD PTR _on$[ebp]
	mov	DWORD PTR _togg$[ebp], eax
$L82077:

; 477  : 			break;

	jmp	$L82066
$L82078:

; 478  : 
; 479  : // perspective correct
; 480  : 
; 481  : 			case DETAIL_MENU_PERSPECTIVECORRECT:
; 482  : 				if ((flag = DxState.PerspectiveEnabled) && i == select)

	mov	eax, DWORD PTR ?DxState@@3UDX_STATE@@A+8
	mov	DWORD PTR _flag$[ebp], eax
	cmp	DWORD PTR _flag$[ebp], 0
	je	SHORT $L82079
	movsx	eax, WORD PTR _i$[ebp]
	movsx	ecx, WORD PTR ?select@?1??DetailMenu@@YAXXZ@4FA
	cmp	eax, ecx
	jne	SHORT $L82079

; 483  : 				{
; 484  : 					if (lr & 1) DxState.Perspective = FALSE;

	movsx	eax, BYTE PTR _lr$[ebp]
	and	eax, 1
	je	SHORT $L82080
	mov	DWORD PTR ?DxState@@3UDX_STATE@@A+12, 0
$L82080:

; 485  : 					if (lr & 2) DxState.Perspective = TRUE;

	movsx	eax, BYTE PTR _lr$[ebp]
	and	eax, 2
	je	SHORT $L82081
	mov	DWORD PTR ?DxState@@3UDX_STATE@@A+12, 1
$L82081:

; 486  : 					PERSPECTIVE_ON();

	mov	eax, DWORD PTR ?DxState@@3UDX_STATE@@A+12
	push	eax
	push	4
	mov	ecx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	eax
	call	DWORD PTR [edx+88]
	mov	eax, DWORD PTR ?RenderStateChange@@3JA	; RenderStateChange
	add	eax, 1
	mov	DWORD PTR ?RenderStateChange@@3JA, eax	; RenderStateChange
$L82079:

; 487  : 				}
; 488  : 				if (DxState.Perspective) togg = on;

	cmp	DWORD PTR ?DxState@@3UDX_STATE@@A+12, 0
	je	SHORT $L82082
	lea	eax, DWORD PTR _on$[ebp]
	mov	DWORD PTR _togg$[ebp], eax
$L82082:

; 489  : 			break;

	jmp	$L82066
$L82083:

; 490  : 
; 491  : // texture filtering
; 492  : 
; 493  : 			case DETAIL_MENU_TEXFILTER:
; 494  : 				if (i == select)

	movsx	eax, WORD PTR _i$[ebp]
	movsx	ecx, WORD PTR ?select@?1??DetailMenu@@YAXXZ@4FA
	cmp	eax, ecx
	jne	$L82084

; 495  : 				{
; 496  : 					if (lr & 1 && DxState.TextureFilter) DxState.TextureFilter--;

	movsx	eax, BYTE PTR _lr$[ebp]
	and	eax, 1
	je	SHORT $L82085
	cmp	DWORD PTR ?DxState@@3UDX_STATE@@A+20, 0
	je	SHORT $L82085
	mov	eax, DWORD PTR ?DxState@@3UDX_STATE@@A+20
	sub	eax, 1
	mov	DWORD PTR ?DxState@@3UDX_STATE@@A+20, eax
$L82085:

; 497  : 					if (lr & 2 && DxState.TextureFilter < 2) DxState.TextureFilter++;

	movsx	eax, BYTE PTR _lr$[ebp]
	and	eax, 2
	je	SHORT $L82086
	cmp	DWORD PTR ?DxState@@3UDX_STATE@@A+20, 2
	jge	SHORT $L82086
	mov	eax, DWORD PTR ?DxState@@3UDX_STATE@@A+20
	add	eax, 1
	mov	DWORD PTR ?DxState@@3UDX_STATE@@A+20, eax
$L82086:

; 498  : 					TEXTUREFILTER_ON();

	mov	eax, DWORD PTR ?DxState@@3UDX_STATE@@A+20
	mov	DWORD PTR tv199[ebp], eax
	cmp	DWORD PTR tv199[ebp], 0
	je	SHORT $L82091
	cmp	DWORD PTR tv199[ebp], 1
	je	$L82092
	cmp	DWORD PTR tv199[ebp], 2
	je	$L82093
	jmp	$L82084
$L82091:
	push	1
	push	17					; 00000011H
	push	0
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	edx
	call	DWORD PTR [ecx+160]
	mov	eax, DWORD PTR ?RenderStateChange@@3JA	; RenderStateChange
	add	eax, 1
	mov	DWORD PTR ?RenderStateChange@@3JA, eax	; RenderStateChange
	push	1
	push	16					; 00000010H
	push	0
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	edx
	call	DWORD PTR [ecx+160]
	mov	eax, DWORD PTR ?RenderStateChange@@3JA	; RenderStateChange
	add	eax, 1
	mov	DWORD PTR ?RenderStateChange@@3JA, eax	; RenderStateChange
	push	1
	push	17					; 00000011H
	push	1
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	edx
	call	DWORD PTR [ecx+160]
	mov	eax, DWORD PTR ?RenderStateChange@@3JA	; RenderStateChange
	add	eax, 1
	mov	DWORD PTR ?RenderStateChange@@3JA, eax	; RenderStateChange
	push	1
	push	16					; 00000010H
	push	1
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	edx
	call	DWORD PTR [ecx+160]
	mov	eax, DWORD PTR ?RenderStateChange@@3JA	; RenderStateChange
	add	eax, 1
	mov	DWORD PTR ?RenderStateChange@@3JA, eax	; RenderStateChange
	jmp	$L82084
$L82092:
	push	2
	push	17					; 00000011H
	push	0
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	edx
	call	DWORD PTR [ecx+160]
	mov	eax, DWORD PTR ?RenderStateChange@@3JA	; RenderStateChange
	add	eax, 1
	mov	DWORD PTR ?RenderStateChange@@3JA, eax	; RenderStateChange
	push	2
	push	16					; 00000010H
	push	0
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	edx
	call	DWORD PTR [ecx+160]
	mov	eax, DWORD PTR ?RenderStateChange@@3JA	; RenderStateChange
	add	eax, 1
	mov	DWORD PTR ?RenderStateChange@@3JA, eax	; RenderStateChange
	push	2
	push	17					; 00000011H
	push	1
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	edx
	call	DWORD PTR [ecx+160]
	mov	eax, DWORD PTR ?RenderStateChange@@3JA	; RenderStateChange
	add	eax, 1
	mov	DWORD PTR ?RenderStateChange@@3JA, eax	; RenderStateChange
	push	2
	push	16					; 00000010H
	push	1
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	edx
	call	DWORD PTR [ecx+160]
	mov	eax, DWORD PTR ?RenderStateChange@@3JA	; RenderStateChange
	add	eax, 1
	mov	DWORD PTR ?RenderStateChange@@3JA, eax	; RenderStateChange
	jmp	$L82084
$L82093:
	push	3
	push	17					; 00000011H
	push	0
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	edx
	call	DWORD PTR [ecx+160]
	mov	eax, DWORD PTR ?RenderStateChange@@3JA	; RenderStateChange
	add	eax, 1
	mov	DWORD PTR ?RenderStateChange@@3JA, eax	; RenderStateChange
	push	5
	push	16					; 00000010H
	push	0
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	edx
	call	DWORD PTR [ecx+160]
	mov	eax, DWORD PTR ?RenderStateChange@@3JA	; RenderStateChange
	add	eax, 1
	mov	DWORD PTR ?RenderStateChange@@3JA, eax	; RenderStateChange
	push	3
	push	17					; 00000011H
	push	1
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	edx
	call	DWORD PTR [ecx+160]
	mov	eax, DWORD PTR ?RenderStateChange@@3JA	; RenderStateChange
	add	eax, 1
	mov	DWORD PTR ?RenderStateChange@@3JA, eax	; RenderStateChange
	push	5
	push	16					; 00000010H
	push	1
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	edx
	call	DWORD PTR [ecx+160]
	mov	eax, DWORD PTR ?RenderStateChange@@3JA	; RenderStateChange
	add	eax, 1
	mov	DWORD PTR ?RenderStateChange@@3JA, eax	; RenderStateChange
$L82084:

; 499  : 				}
; 500  : 				flag = DxState.TextureFilterFlag & (1 << DxState.TextureFilter);

	mov	eax, 1
	mov	ecx, DWORD PTR ?DxState@@3UDX_STATE@@A+20
	shl	eax, cl
	and	eax, DWORD PTR ?DxState@@3UDX_STATE@@A+16
	mov	DWORD PTR _flag$[ebp], eax

; 501  : 				togg = TextureFilterText[DxState.TextureFilter];

	mov	eax, DWORD PTR ?DxState@@3UDX_STATE@@A+20
	mov	ecx, DWORD PTR ?TextureFilterText@@3PAPADA[eax*4]
	mov	DWORD PTR _togg$[ebp], ecx

; 502  : 			break;

	jmp	$L82066
$L82094:

; 503  : 
; 504  : // mip map
; 505  : 
; 506  : 			case DETAIL_MENU_MIPMAP:
; 507  : 				if (i == select)

	movsx	eax, WORD PTR _i$[ebp]
	movsx	ecx, WORD PTR ?select@?1??DetailMenu@@YAXXZ@4FA
	cmp	eax, ecx
	jne	$L82095

; 508  : 				{
; 509  : 					if (lr & 1 && DxState.MipMap) DxState.MipMap--;

	movsx	eax, BYTE PTR _lr$[ebp]
	and	eax, 1
	je	SHORT $L82096
	cmp	DWORD PTR ?DxState@@3UDX_STATE@@A+28, 0
	je	SHORT $L82096
	mov	eax, DWORD PTR ?DxState@@3UDX_STATE@@A+28
	sub	eax, 1
	mov	DWORD PTR ?DxState@@3UDX_STATE@@A+28, eax
$L82096:

; 510  : 					if (lr & 2 && DxState.MipMap < 2) DxState.MipMap++;

	movsx	eax, BYTE PTR _lr$[ebp]
	and	eax, 2
	je	SHORT $L82097
	cmp	DWORD PTR ?DxState@@3UDX_STATE@@A+28, 2
	jge	SHORT $L82097
	mov	eax, DWORD PTR ?DxState@@3UDX_STATE@@A+28
	add	eax, 1
	mov	DWORD PTR ?DxState@@3UDX_STATE@@A+28, eax
$L82097:

; 511  : 					MIPMAP_ON();

	mov	eax, DWORD PTR ?DxState@@3UDX_STATE@@A+28
	add	eax, 1
	push	eax
	push	18					; 00000012H
	push	0
	mov	ecx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	eax
	call	DWORD PTR [edx+160]
	mov	eax, DWORD PTR ?RenderStateChange@@3JA	; RenderStateChange
	add	eax, 1
	mov	DWORD PTR ?RenderStateChange@@3JA, eax	; RenderStateChange
	mov	eax, DWORD PTR ?DxState@@3UDX_STATE@@A+28
	add	eax, 1
	push	eax
	push	18					; 00000012H
	push	1
	mov	ecx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	eax
	call	DWORD PTR [edx+160]
	mov	eax, DWORD PTR ?RenderStateChange@@3JA	; RenderStateChange
	add	eax, 1
	mov	DWORD PTR ?RenderStateChange@@3JA, eax	; RenderStateChange
$L82095:

; 512  : 				}
; 513  : 				flag = DxState.MipMapFlag & (1 << DxState.MipMap);

	mov	eax, 1
	mov	ecx, DWORD PTR ?DxState@@3UDX_STATE@@A+28
	shl	eax, cl
	and	eax, DWORD PTR ?DxState@@3UDX_STATE@@A+24
	mov	DWORD PTR _flag$[ebp], eax

; 514  : 				togg = MipMapText[DxState.MipMap];

	mov	eax, DWORD PTR ?DxState@@3UDX_STATE@@A+28
	mov	ecx, DWORD PTR ?MipMapText@@3PAPADA[eax*4]
	mov	DWORD PTR _togg$[ebp], ecx

; 515  : 			break;

	jmp	$L82066
$L82098:

; 516  : 
; 517  : // fog
; 518  : 
; 519  : 			case DETAIL_MENU_FOG:
; 520  : 				if ((flag = DxState.FogEnabled) && i == select)

	mov	eax, DWORD PTR ?DxState@@3UDX_STATE@@A+32
	mov	DWORD PTR _flag$[ebp], eax
	cmp	DWORD PTR _flag$[ebp], 0
	je	SHORT $L82099
	movsx	eax, WORD PTR _i$[ebp]
	movsx	ecx, WORD PTR ?select@?1??DetailMenu@@YAXXZ@4FA
	cmp	eax, ecx
	jne	SHORT $L82099

; 521  : 				{
; 522  : 					if (lr & 1) DxState.Fog = FALSE;

	movsx	eax, BYTE PTR _lr$[ebp]
	and	eax, 1
	je	SHORT $L82100
	mov	DWORD PTR ?DxState@@3UDX_STATE@@A+36, 0
$L82100:

; 523  : 					if (lr & 2) DxState.Fog = TRUE;

	movsx	eax, BYTE PTR _lr$[ebp]
	and	eax, 2
	je	SHORT $L82099
	mov	DWORD PTR ?DxState@@3UDX_STATE@@A+36, 1
$L82099:

; 524  : 				}
; 525  : 				if (DxState.Fog) togg = on;

	cmp	DWORD PTR ?DxState@@3UDX_STATE@@A+36, 0
	je	SHORT $L82102
	lea	eax, DWORD PTR _on$[ebp]
	mov	DWORD PTR _togg$[ebp], eax
$L82102:

; 526  : 			break;

	jmp	$L82066
$L82103:

; 527  : 
; 528  : // dithering
; 529  : 
; 530  : 			case DETAIL_MENU_DITHER:
; 531  : 				if ((flag = DxState.DitherEnabled) && i == select)

	mov	eax, DWORD PTR ?DxState@@3UDX_STATE@@A+40
	mov	DWORD PTR _flag$[ebp], eax
	cmp	DWORD PTR _flag$[ebp], 0
	je	SHORT $L82104
	movsx	eax, WORD PTR _i$[ebp]
	movsx	ecx, WORD PTR ?select@?1??DetailMenu@@YAXXZ@4FA
	cmp	eax, ecx
	jne	SHORT $L82104

; 532  : 				{
; 533  : 					if (lr & 1) DxState.Dither = FALSE;

	movsx	eax, BYTE PTR _lr$[ebp]
	and	eax, 1
	je	SHORT $L82105
	mov	DWORD PTR ?DxState@@3UDX_STATE@@A+44, 0
$L82105:

; 534  : 					if (lr & 2) DxState.Dither = TRUE;

	movsx	eax, BYTE PTR _lr$[ebp]
	and	eax, 2
	je	SHORT $L82106
	mov	DWORD PTR ?DxState@@3UDX_STATE@@A+44, 1
$L82106:

; 535  : 					DITHER_ON();

	mov	eax, DWORD PTR ?DxState@@3UDX_STATE@@A+44
	push	eax
	push	26					; 0000001aH
	mov	ecx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	eax
	call	DWORD PTR [edx+88]
	mov	eax, DWORD PTR ?RenderStateChange@@3JA	; RenderStateChange
	add	eax, 1
	mov	DWORD PTR ?RenderStateChange@@3JA, eax	; RenderStateChange
$L82104:

; 536  : 				}
; 537  : 				if (DxState.Dither) togg = on;

	cmp	DWORD PTR ?DxState@@3UDX_STATE@@A+44, 0
	je	SHORT $L82107
	lea	eax, DWORD PTR _on$[ebp]
	mov	DWORD PTR _togg$[ebp], eax
$L82107:

; 538  : 			break;

	jmp	$L82066
$L82108:

; 539  : 
; 540  : // antialias
; 541  : 
; 542  : 			case DETAIL_MENU_ANTIALIAS:
; 543  : 				if ((flag = DxState.AntiAliasEnabled) && i == select)

	mov	eax, DWORD PTR ?DxState@@3UDX_STATE@@A+56
	mov	DWORD PTR _flag$[ebp], eax
	cmp	DWORD PTR _flag$[ebp], 0
	je	SHORT $L82109
	movsx	eax, WORD PTR _i$[ebp]
	movsx	ecx, WORD PTR ?select@?1??DetailMenu@@YAXXZ@4FA
	cmp	eax, ecx
	jne	SHORT $L82109

; 544  : 				{
; 545  : 					if (lr & 1) DxState.AntiAlias = D3DANTIALIAS_NONE;

	movsx	eax, BYTE PTR _lr$[ebp]
	and	eax, 1
	je	SHORT $L82110
	mov	DWORD PTR ?DxState@@3UDX_STATE@@A+60, 0
$L82110:

; 546  : 					if (lr & 2) DxState.AntiAlias = D3DANTIALIAS_SORTINDEPENDENT;

	movsx	eax, BYTE PTR _lr$[ebp]
	and	eax, 2
	je	SHORT $L82111
	mov	DWORD PTR ?DxState@@3UDX_STATE@@A+60, 2
$L82111:

; 547  : 					ANTIALIAS_ON();

	mov	eax, DWORD PTR ?DxState@@3UDX_STATE@@A+60
	push	eax
	push	2
	mov	ecx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	eax
	call	DWORD PTR [edx+88]
	mov	eax, DWORD PTR ?RenderStateChange@@3JA	; RenderStateChange
	add	eax, 1
	mov	DWORD PTR ?RenderStateChange@@3JA, eax	; RenderStateChange
$L82109:

; 548  : 				}
; 549  : 				if (DxState.AntiAlias == D3DANTIALIAS_SORTINDEPENDENT) togg = on;

	cmp	DWORD PTR ?DxState@@3UDX_STATE@@A+60, 2
	jne	SHORT $L82112
	lea	eax, DWORD PTR _on$[ebp]
	mov	DWORD PTR _togg$[ebp], eax
$L82112:

; 550  : 			break;

	jmp	$L82066
$L82113:

; 551  : 
; 552  : // draw dist
; 553  : 
; 554  : 			case DETAIL_MENU_DRAWDIST:
; 555  : 				wsprintf(text, "%ld", (long)LevelInf[GameSettings.Level].FarClip);

	mov	eax, DWORD PTR ?GameSettings@@3UGAME_SETTINGS@@A+4
	imul	eax, 232				; 000000e8H
	mov	ecx, DWORD PTR ?LevelInf@@3PAULEVELINFO@@A ; LevelInf
	fld	DWORD PTR [ecx+eax+184]
	call	__ftol2
	push	eax
	push	OFFSET FLAT:??_C@_03JALODAI@?$CFld?$AA@
	lea	edx, DWORD PTR _text$[ebp]
	push	edx
	call	DWORD PTR __imp__wsprintfA
	add	esp, 12					; 0000000cH

; 556  : 				togg = text;

	lea	eax, DWORD PTR _text$[ebp]
	mov	DWORD PTR _togg$[ebp], eax

; 557  : 
; 558  : 				if (i == select)

	movsx	eax, WORD PTR _i$[ebp]
	movsx	ecx, WORD PTR ?select@?1??DetailMenu@@YAXXZ@4FA
	cmp	eax, ecx
	jne	$L82116

; 559  : 				{
; 560  : 					flag = TRUE;

	mov	DWORD PTR _flag$[ebp], 1

; 561  : 					if (Keys[DIK_LEFT] && LevelInf[GameSettings.Level].FarClip > 0) LevelInf[GameSettings.Level].FarClip -= 128;

	movsx	eax, BYTE PTR ?Keys@@3PADA+203
	test	eax, eax
	je	SHORT $L82117
	mov	eax, DWORD PTR ?GameSettings@@3UGAME_SETTINGS@@A+4
	imul	eax, 232				; 000000e8H
	mov	ecx, DWORD PTR ?LevelInf@@3PAULEVELINFO@@A ; LevelInf
	fld	DWORD PTR [ecx+eax+184]
	fcomp	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $L82117
	mov	eax, DWORD PTR ?GameSettings@@3UGAME_SETTINGS@@A+4
	imul	eax, 232				; 000000e8H
	mov	ecx, DWORD PTR ?LevelInf@@3PAULEVELINFO@@A ; LevelInf
	fld	DWORD PTR [ecx+eax+184]
	fsub	DWORD PTR __real@43000000
	mov	edx, DWORD PTR ?GameSettings@@3UGAME_SETTINGS@@A+4
	imul	edx, 232				; 000000e8H
	mov	eax, DWORD PTR ?LevelInf@@3PAULEVELINFO@@A ; LevelInf
	fstp	DWORD PTR [eax+edx+184]
$L82117:

; 562  : 					if (Keys[DIK_RIGHT] && LevelInf[GameSettings.Level].FarClip < 65536) LevelInf[GameSettings.Level].FarClip += 128;

	movsx	eax, BYTE PTR ?Keys@@3PADA+205
	test	eax, eax
	je	SHORT $L82118
	mov	eax, DWORD PTR ?GameSettings@@3UGAME_SETTINGS@@A+4
	imul	eax, 232				; 000000e8H
	mov	ecx, DWORD PTR ?LevelInf@@3PAULEVELINFO@@A ; LevelInf
	fld	DWORD PTR [ecx+eax+184]
	fcomp	DWORD PTR __real@47800000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L82118
	mov	eax, DWORD PTR ?GameSettings@@3UGAME_SETTINGS@@A+4
	imul	eax, 232				; 000000e8H
	mov	ecx, DWORD PTR ?LevelInf@@3PAULEVELINFO@@A ; LevelInf
	fld	DWORD PTR [ecx+eax+184]
	fadd	DWORD PTR __real@43000000
	mov	edx, DWORD PTR ?GameSettings@@3UGAME_SETTINGS@@A+4
	imul	edx, 232				; 000000e8H
	mov	eax, DWORD PTR ?LevelInf@@3PAULEVELINFO@@A ; LevelInf
	fstp	DWORD PTR [eax+edx+184]
$L82118:

; 563  : 					if (LevelInf[GameSettings.Level].FogStart > LevelInf[GameSettings.Level].FarClip) LevelInf[GameSettings.Level].FogStart = LevelInf[GameSettings.Level].FarClip;

	mov	eax, DWORD PTR ?GameSettings@@3UGAME_SETTINGS@@A+4
	imul	eax, 232				; 000000e8H
	mov	ecx, DWORD PTR ?GameSettings@@3UGAME_SETTINGS@@A+4
	imul	ecx, 232				; 000000e8H
	mov	edx, DWORD PTR ?LevelInf@@3PAULEVELINFO@@A ; LevelInf
	mov	esi, DWORD PTR ?LevelInf@@3PAULEVELINFO@@A ; LevelInf
	fld	DWORD PTR [edx+eax+188]
	fcomp	DWORD PTR [esi+ecx+184]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $L82119
	mov	eax, DWORD PTR ?GameSettings@@3UGAME_SETTINGS@@A+4
	imul	eax, 232				; 000000e8H
	mov	ecx, DWORD PTR ?GameSettings@@3UGAME_SETTINGS@@A+4
	imul	ecx, 232				; 000000e8H
	mov	edx, DWORD PTR ?LevelInf@@3PAULEVELINFO@@A ; LevelInf
	mov	esi, DWORD PTR ?LevelInf@@3PAULEVELINFO@@A ; LevelInf
	mov	eax, DWORD PTR [esi+eax+184]
	mov	DWORD PTR [edx+ecx+188], eax
$L82119:

; 564  : 					SetNearFar(48.0f, LevelInf[GameSettings.Level].FarClip);

	mov	eax, DWORD PTR ?GameSettings@@3UGAME_SETTINGS@@A+4
	imul	eax, 232				; 000000e8H
	mov	ecx, DWORD PTR ?LevelInf@@3PAULEVELINFO@@A ; LevelInf
	mov	edx, DWORD PTR [ecx+eax+184]
	push	edx
	push	1111490560				; 42400000H
	call	?SetNearFar@@YAXMM@Z			; SetNearFar
	add	esp, 8

; 565  : 					SetFogVars(LevelInf[GameSettings.Level].FogStart, LevelInf[GameSettings.Level].VertFogStart, LevelInf[GameSettings.Level].VertFogEnd);

	mov	eax, DWORD PTR ?GameSettings@@3UGAME_SETTINGS@@A+4
	imul	eax, 232				; 000000e8H
	mov	ecx, DWORD PTR ?LevelInf@@3PAULEVELINFO@@A ; LevelInf
	mov	edx, DWORD PTR [ecx+eax+200]
	push	edx
	mov	eax, DWORD PTR ?GameSettings@@3UGAME_SETTINGS@@A+4
	imul	eax, 232				; 000000e8H
	mov	ecx, DWORD PTR ?LevelInf@@3PAULEVELINFO@@A ; LevelInf
	mov	edx, DWORD PTR [ecx+eax+196]
	push	edx
	mov	eax, DWORD PTR ?GameSettings@@3UGAME_SETTINGS@@A+4
	imul	eax, 232				; 000000e8H
	mov	ecx, DWORD PTR ?LevelInf@@3PAULEVELINFO@@A ; LevelInf
	mov	edx, DWORD PTR [ecx+eax+188]
	push	edx
	call	?SetFogVars@@YAXMMM@Z			; SetFogVars
	add	esp, 12					; 0000000cH
$L82116:

; 566  : 				}
; 567  : 			break;

	jmp	$L82066
$L82120:

; 568  : 
; 569  : // fog start
; 570  : 
; 571  : 			case DETAIL_MENU_FOGSTART:
; 572  : 				wsprintf(text, "%ld", (long)LevelInf[GameSettings.Level].FogStart);

	mov	eax, DWORD PTR ?GameSettings@@3UGAME_SETTINGS@@A+4
	imul	eax, 232				; 000000e8H
	mov	ecx, DWORD PTR ?LevelInf@@3PAULEVELINFO@@A ; LevelInf
	fld	DWORD PTR [ecx+eax+188]
	call	__ftol2
	push	eax
	push	OFFSET FLAT:??_C@_03JALODAI@?$CFld?$AA@
	lea	edx, DWORD PTR _text$[ebp]
	push	edx
	call	DWORD PTR __imp__wsprintfA
	add	esp, 12					; 0000000cH

; 573  : 				togg = text;

	lea	eax, DWORD PTR _text$[ebp]
	mov	DWORD PTR _togg$[ebp], eax

; 574  : 
; 575  : 				if (i == select)

	movsx	eax, WORD PTR _i$[ebp]
	movsx	ecx, WORD PTR ?select@?1??DetailMenu@@YAXXZ@4FA
	cmp	eax, ecx
	jne	$L82122

; 576  : 				{
; 577  : 					flag = TRUE;

	mov	DWORD PTR _flag$[ebp], 1

; 578  : 					if (Keys[DIK_LEFT] && LevelInf[GameSettings.Level].FogStart > 0) LevelInf[GameSettings.Level].FogStart -= 128;

	movsx	eax, BYTE PTR ?Keys@@3PADA+203
	test	eax, eax
	je	SHORT $L82123
	mov	eax, DWORD PTR ?GameSettings@@3UGAME_SETTINGS@@A+4
	imul	eax, 232				; 000000e8H
	mov	ecx, DWORD PTR ?LevelInf@@3PAULEVELINFO@@A ; LevelInf
	fld	DWORD PTR [ecx+eax+188]
	fcomp	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $L82123
	mov	eax, DWORD PTR ?GameSettings@@3UGAME_SETTINGS@@A+4
	imul	eax, 232				; 000000e8H
	mov	ecx, DWORD PTR ?LevelInf@@3PAULEVELINFO@@A ; LevelInf
	fld	DWORD PTR [ecx+eax+188]
	fsub	DWORD PTR __real@43000000
	mov	edx, DWORD PTR ?GameSettings@@3UGAME_SETTINGS@@A+4
	imul	edx, 232				; 000000e8H
	mov	eax, DWORD PTR ?LevelInf@@3PAULEVELINFO@@A ; LevelInf
	fstp	DWORD PTR [eax+edx+188]
$L82123:

; 579  : 					if (Keys[DIK_RIGHT] && LevelInf[GameSettings.Level].FogStart < 65536) LevelInf[GameSettings.Level].FogStart += 128;

	movsx	eax, BYTE PTR ?Keys@@3PADA+205
	test	eax, eax
	je	SHORT $L82124
	mov	eax, DWORD PTR ?GameSettings@@3UGAME_SETTINGS@@A+4
	imul	eax, 232				; 000000e8H
	mov	ecx, DWORD PTR ?LevelInf@@3PAULEVELINFO@@A ; LevelInf
	fld	DWORD PTR [ecx+eax+188]
	fcomp	DWORD PTR __real@47800000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L82124
	mov	eax, DWORD PTR ?GameSettings@@3UGAME_SETTINGS@@A+4
	imul	eax, 232				; 000000e8H
	mov	ecx, DWORD PTR ?LevelInf@@3PAULEVELINFO@@A ; LevelInf
	fld	DWORD PTR [ecx+eax+188]
	fadd	DWORD PTR __real@43000000
	mov	edx, DWORD PTR ?GameSettings@@3UGAME_SETTINGS@@A+4
	imul	edx, 232				; 000000e8H
	mov	eax, DWORD PTR ?LevelInf@@3PAULEVELINFO@@A ; LevelInf
	fstp	DWORD PTR [eax+edx+188]
$L82124:

; 580  : 					if (LevelInf[GameSettings.Level].FogStart > LevelInf[GameSettings.Level].FarClip) LevelInf[GameSettings.Level].FarClip = LevelInf[GameSettings.Level].FogStart;

	mov	eax, DWORD PTR ?GameSettings@@3UGAME_SETTINGS@@A+4
	imul	eax, 232				; 000000e8H
	mov	ecx, DWORD PTR ?GameSettings@@3UGAME_SETTINGS@@A+4
	imul	ecx, 232				; 000000e8H
	mov	edx, DWORD PTR ?LevelInf@@3PAULEVELINFO@@A ; LevelInf
	mov	esi, DWORD PTR ?LevelInf@@3PAULEVELINFO@@A ; LevelInf
	fld	DWORD PTR [edx+eax+188]
	fcomp	DWORD PTR [esi+ecx+184]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $L82125
	mov	eax, DWORD PTR ?GameSettings@@3UGAME_SETTINGS@@A+4
	imul	eax, 232				; 000000e8H
	mov	ecx, DWORD PTR ?GameSettings@@3UGAME_SETTINGS@@A+4
	imul	ecx, 232				; 000000e8H
	mov	edx, DWORD PTR ?LevelInf@@3PAULEVELINFO@@A ; LevelInf
	mov	esi, DWORD PTR ?LevelInf@@3PAULEVELINFO@@A ; LevelInf
	mov	eax, DWORD PTR [esi+eax+188]
	mov	DWORD PTR [edx+ecx+184], eax
$L82125:

; 581  : 					SetNearFar(48.0f, LevelInf[GameSettings.Level].FarClip);

	mov	eax, DWORD PTR ?GameSettings@@3UGAME_SETTINGS@@A+4
	imul	eax, 232				; 000000e8H
	mov	ecx, DWORD PTR ?LevelInf@@3PAULEVELINFO@@A ; LevelInf
	mov	edx, DWORD PTR [ecx+eax+184]
	push	edx
	push	1111490560				; 42400000H
	call	?SetNearFar@@YAXMM@Z			; SetNearFar
	add	esp, 8

; 582  : 					SetFogVars(LevelInf[GameSettings.Level].FogStart, LevelInf[GameSettings.Level].VertFogStart, LevelInf[GameSettings.Level].VertFogEnd);

	mov	eax, DWORD PTR ?GameSettings@@3UGAME_SETTINGS@@A+4
	imul	eax, 232				; 000000e8H
	mov	ecx, DWORD PTR ?LevelInf@@3PAULEVELINFO@@A ; LevelInf
	mov	edx, DWORD PTR [ecx+eax+200]
	push	edx
	mov	eax, DWORD PTR ?GameSettings@@3UGAME_SETTINGS@@A+4
	imul	eax, 232				; 000000e8H
	mov	ecx, DWORD PTR ?LevelInf@@3PAULEVELINFO@@A ; LevelInf
	mov	edx, DWORD PTR [ecx+eax+196]
	push	edx
	mov	eax, DWORD PTR ?GameSettings@@3UGAME_SETTINGS@@A+4
	imul	eax, 232				; 000000e8H
	mov	ecx, DWORD PTR ?LevelInf@@3PAULEVELINFO@@A ; LevelInf
	mov	edx, DWORD PTR [ecx+eax+188]
	push	edx
	call	?SetFogVars@@YAXMMM@Z			; SetFogVars
	add	esp, 12					; 0000000cH
$L82122:

; 583  : 				}
; 584  : 			break;

	jmp	$L82066
$L82126:

; 585  : 
; 586  : // lens
; 587  : 
; 588  : 			case DETAIL_MENU_LENS:
; 589  : 				wsprintf(text, "%d", (short)BaseGeomPers);

	fld	DWORD PTR ?BaseGeomPers@@3MA		; BaseGeomPers
	call	__ftol2
	movsx	eax, ax
	push	eax
	push	OFFSET FLAT:??_C@_02DPKJAMEF@?$CFd?$AA@
	lea	ecx, DWORD PTR _text$[ebp]
	push	ecx
	call	DWORD PTR __imp__wsprintfA
	add	esp, 12					; 0000000cH

; 590  : 				togg = text;

	lea	eax, DWORD PTR _text$[ebp]
	mov	DWORD PTR _togg$[ebp], eax

; 591  : 
; 592  : 				if (i == select)

	movsx	eax, WORD PTR _i$[ebp]
	movsx	ecx, WORD PTR ?select@?1??DetailMenu@@YAXXZ@4FA
	cmp	eax, ecx
	jne	SHORT $L82129

; 593  : 				{
; 594  : 					flag = TRUE;

	mov	DWORD PTR _flag$[ebp], 1

; 595  : 					if (Keys[DIK_LEFT] && BaseGeomPers > 16) BaseGeomPers -= 16;

	movsx	eax, BYTE PTR ?Keys@@3PADA+203
	test	eax, eax
	je	SHORT $L82130
	fld	DWORD PTR ?BaseGeomPers@@3MA		; BaseGeomPers
	fcomp	DWORD PTR __real@41800000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $L82130
	fld	DWORD PTR ?BaseGeomPers@@3MA		; BaseGeomPers
	fsub	DWORD PTR __real@41800000
	fstp	DWORD PTR ?BaseGeomPers@@3MA		; BaseGeomPers
$L82130:

; 596  : 					if (Keys[DIK_RIGHT] && BaseGeomPers < 4096) BaseGeomPers += 16;

	movsx	eax, BYTE PTR ?Keys@@3PADA+205
	test	eax, eax
	je	SHORT $L82129
	fld	DWORD PTR ?BaseGeomPers@@3MA		; BaseGeomPers
	fcomp	DWORD PTR __real@45800000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L82129
	fld	DWORD PTR ?BaseGeomPers@@3MA		; BaseGeomPers
	fadd	DWORD PTR __real@41800000
	fstp	DWORD PTR ?BaseGeomPers@@3MA		; BaseGeomPers
$L82129:

; 597  : 				}
; 598  : 			break;

	jmp	$L82066
$L82132:

; 599  : 
; 600  : // env mapping
; 601  : 
; 602  : 			case DETAIL_MENU_ENV:
; 603  : 				if (i == select)

	movsx	eax, WORD PTR _i$[ebp]
	movsx	ecx, WORD PTR ?select@?1??DetailMenu@@YAXXZ@4FA
	cmp	eax, ecx
	jne	SHORT $L82133

; 604  : 				{
; 605  : 					flag = TRUE;

	mov	DWORD PTR _flag$[ebp], 1

; 606  : 					if (lr & 1) RenderSettings.Env = FALSE;

	movsx	eax, BYTE PTR _lr$[ebp]
	and	eax, 1
	je	SHORT $L82134
	mov	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+76, 0
$L82134:

; 607  : 					if (lr & 2) RenderSettings.Env = TRUE;

	movsx	eax, BYTE PTR _lr$[ebp]
	and	eax, 2
	je	SHORT $L82133
	mov	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+76, 1
$L82133:

; 608  : 				}
; 609  : 				if (RenderSettings.Env) togg = on;

	cmp	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+76, 0
	je	SHORT $L82136
	lea	eax, DWORD PTR _on$[ebp]
	mov	DWORD PTR _togg$[ebp], eax
$L82136:

; 610  : 			break;

	jmp	$L82066
$L82137:

; 611  : 
; 612  : // mirror
; 613  : 
; 614  : 			case DETAIL_MENU_MIRROR:
; 615  : 				if (i == select)

	movsx	eax, WORD PTR _i$[ebp]
	movsx	ecx, WORD PTR ?select@?1??DetailMenu@@YAXXZ@4FA
	cmp	eax, ecx
	jne	SHORT $L82138

; 616  : 				{
; 617  : 					flag = TRUE;

	mov	DWORD PTR _flag$[ebp], 1

; 618  : 					if (lr & 1)

	movsx	eax, BYTE PTR _lr$[ebp]
	and	eax, 1
	je	SHORT $L82139

; 619  : 					{
; 620  : 						RenderSettings.Mirror = FALSE;

	mov	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+80, 0

; 621  : 						SetWorldMirror();

	call	?SetWorldMirror@@YAXXZ			; SetWorldMirror
$L82139:

; 622  : 					}
; 623  : 					if (lr & 2)

	movsx	eax, BYTE PTR _lr$[ebp]
	and	eax, 2
	je	SHORT $L82138

; 624  : 					{
; 625  : 						RenderSettings.Mirror = TRUE;

	mov	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+80, 1

; 626  : 						SetWorldMirror();

	call	?SetWorldMirror@@YAXXZ			; SetWorldMirror
$L82138:

; 627  : 					}
; 628  : 				}
; 629  : 				if (RenderSettings.Mirror) togg = on;

	cmp	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+80, 0
	je	SHORT $L82141
	lea	eax, DWORD PTR _on$[ebp]
	mov	DWORD PTR _togg$[ebp], eax
$L82141:

; 630  : 			break;

	jmp	$L82066
$L82142:

; 631  : 
; 632  : // shadows
; 633  : 
; 634  : 			case DETAIL_MENU_SHADOWS:
; 635  : 				if (i == select)

	movsx	eax, WORD PTR _i$[ebp]
	movsx	ecx, WORD PTR ?select@?1??DetailMenu@@YAXXZ@4FA
	cmp	eax, ecx
	jne	SHORT $L82143

; 636  : 				{
; 637  : 					flag = TRUE;

	mov	DWORD PTR _flag$[ebp], 1

; 638  : 					if (lr & 1) RenderSettings.Shadow = FALSE;

	movsx	eax, BYTE PTR _lr$[ebp]
	and	eax, 1
	je	SHORT $L82144
	mov	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+84, 0
$L82144:

; 639  : 					if (lr & 2) RenderSettings.Shadow = TRUE;

	movsx	eax, BYTE PTR _lr$[ebp]
	and	eax, 2
	je	SHORT $L82143
	mov	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+84, 1
$L82143:

; 640  : 				}
; 641  : 				if (RenderSettings.Shadow) togg = on;

	cmp	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+84, 0
	je	SHORT $L82146
	lea	eax, DWORD PTR _on$[ebp]
	mov	DWORD PTR _togg$[ebp], eax
$L82146:

; 642  : 			break;

	jmp	$L82066
$L82147:

; 643  : 
; 644  : // lights
; 645  : 
; 646  : 			case DETAIL_MENU_LIGHTS:
; 647  : 				if (i == select)

	movsx	eax, WORD PTR _i$[ebp]
	movsx	ecx, WORD PTR ?select@?1??DetailMenu@@YAXXZ@4FA
	cmp	eax, ecx
	jne	SHORT $L82148

; 648  : 				{
; 649  : 					flag = TRUE;

	mov	DWORD PTR _flag$[ebp], 1

; 650  : 					if (lr & 1) RenderSettings.Light = FALSE;

	movsx	eax, BYTE PTR _lr$[ebp]
	and	eax, 1
	je	SHORT $L82149
	mov	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+88, 0
$L82149:

; 651  : 					if (lr & 2) RenderSettings.Light = TRUE;

	movsx	eax, BYTE PTR _lr$[ebp]
	and	eax, 2
	je	SHORT $L82148
	mov	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+88, 1
$L82148:

; 652  : 				}
; 653  : 				if (RenderSettings.Light) togg = on;

	cmp	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+88, 0
	je	SHORT $L82151
	lea	eax, DWORD PTR _on$[ebp]
	mov	DWORD PTR _togg$[ebp], eax
$L82151:

; 654  : 			break;

	jmp	$L82066
$L82152:

; 655  : 
; 656  : // instances
; 657  : 
; 658  : 			case DETAIL_MENU_INSTANCES:
; 659  : 				if (i == select)

	movsx	eax, WORD PTR _i$[ebp]
	movsx	ecx, WORD PTR ?select@?1??DetailMenu@@YAXXZ@4FA
	cmp	eax, ecx
	jne	SHORT $L82153

; 660  : 				{
; 661  : 					flag = TRUE;

	mov	DWORD PTR _flag$[ebp], 1

; 662  : 					if (lr & 1) RenderSettings.Instance = FALSE;

	movsx	eax, BYTE PTR _lr$[ebp]
	and	eax, 1
	je	SHORT $L82154
	mov	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+92, 0
$L82154:

; 663  : 					if (lr & 2) RenderSettings.Instance = TRUE;

	movsx	eax, BYTE PTR _lr$[ebp]
	and	eax, 2
	je	SHORT $L82153
	mov	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+92, 1
$L82153:

; 664  : 				}
; 665  : 				if (RenderSettings.Instance) togg = on;

	cmp	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+92, 0
	je	SHORT $L82156
	lea	eax, DWORD PTR _on$[ebp]
	mov	DWORD PTR _togg$[ebp], eax
$L82156:

; 666  : 			break;

	jmp	$L82066
$L82157:

; 667  : 
; 668  : // skidmarks
; 669  : 
; 670  : 			case DETAIL_MENU_SKIDMARKS:
; 671  : 				if (i == select)

	movsx	eax, WORD PTR _i$[ebp]
	movsx	ecx, WORD PTR ?select@?1??DetailMenu@@YAXXZ@4FA
	cmp	eax, ecx
	jne	SHORT $L82158

; 672  : 				{
; 673  : 					flag = TRUE;

	mov	DWORD PTR _flag$[ebp], 1

; 674  : 					if (lr & 1) RenderSettings.Skid = FALSE;

	movsx	eax, BYTE PTR _lr$[ebp]
	and	eax, 1
	je	SHORT $L82159
	mov	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+96, 0
$L82159:

; 675  : 					if (lr & 2) RenderSettings.Skid = TRUE;

	movsx	eax, BYTE PTR _lr$[ebp]
	and	eax, 2
	je	SHORT $L82158
	mov	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+96, 1
$L82158:

; 676  : 				}
; 677  : 				if (RenderSettings.Skid) togg = on;

	cmp	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+96, 0
	je	SHORT $L82161
	lea	eax, DWORD PTR _on$[ebp]
	mov	DWORD PTR _togg$[ebp], eax
$L82161:

; 678  : 			break;

	jmp	SHORT $L82066
$L82162:

; 679  : 
; 680  : // car bboxes
; 681  : 
; 682  : 			case DETAIL_MENU_CARBOX:
; 683  : 				if (i == select)

	movsx	eax, WORD PTR _i$[ebp]
	movsx	ecx, WORD PTR ?select@?1??DetailMenu@@YAXXZ@4FA
	cmp	eax, ecx
	jne	SHORT $L82066

; 684  : 				{
; 685  : 					flag = TRUE;

	mov	DWORD PTR _flag$[ebp], 1

; 686  : 					if (Keys[DIK_LEFT] && !LastKeys[DIK_LEFT]) CAR_DrawCarBBoxes = TRUE;

	movsx	eax, BYTE PTR ?Keys@@3PADA+203
	test	eax, eax
	je	SHORT $L82164
	movsx	eax, BYTE PTR ?LastKeys@@3PADA+203
	test	eax, eax
	jne	SHORT $L82164
	mov	BYTE PTR ?CAR_DrawCarBBoxes@@3_NA, 1	; CAR_DrawCarBBoxes
$L82164:

; 687  : 					if (Keys[DIK_RIGHT] && !LastKeys[DIK_RIGHT]) CAR_DrawCarBBoxes = FALSE;

	movsx	eax, BYTE PTR ?Keys@@3PADA+205
	test	eax, eax
	je	SHORT $L82165
	movsx	eax, BYTE PTR ?LastKeys@@3PADA+205
	test	eax, eax
	jne	SHORT $L82165
	mov	BYTE PTR ?CAR_DrawCarBBoxes@@3_NA, 0	; CAR_DrawCarBBoxes
$L82165:

; 688  : 					if (CAR_DrawCarBBoxes == TRUE) togg = on;

	movzx	eax, BYTE PTR ?CAR_DrawCarBBoxes@@3_NA	; CAR_DrawCarBBoxes
	cmp	eax, 1
	jne	SHORT $L82066
	lea	eax, DWORD PTR _on$[ebp]
	mov	DWORD PTR _togg$[ebp], eax
$L82066:

; 689  : 				}
; 690  : 			break;
; 691  : 		}
; 692  : 
; 693  : // get col
; 694  : 
; 695  : 		if (!flag)

	cmp	DWORD PTR _flag$[ebp], 0
	jne	SHORT $L82167

; 696  : 		{
; 697  : 			if (i == select) col = 0x800000;

	movsx	eax, WORD PTR _i$[ebp]
	movsx	ecx, WORD PTR ?select@?1??DetailMenu@@YAXXZ@4FA
	cmp	eax, ecx
	jne	SHORT $L82168
	mov	DWORD PTR _col$[ebp], 8388608		; 00800000H

; 698  : 			else col = 0x000000;

	jmp	SHORT $L82169
$L82168:
	mov	DWORD PTR _col$[ebp], 0
$L82169:

; 699  : 		}
; 700  : 		else

	jmp	SHORT $L82170
$L82167:

; 701  : 		{
; 702  : 			if (i == select) col = 0xff0000;

	movsx	eax, WORD PTR _i$[ebp]
	movsx	ecx, WORD PTR ?select@?1??DetailMenu@@YAXXZ@4FA
	cmp	eax, ecx
	jne	SHORT $L82171
	mov	DWORD PTR _col$[ebp], 16711680		; 00ff0000H

; 703  : 			else col = 0xc0c0c0;

	jmp	SHORT $L82170
$L82171:
	mov	DWORD PTR _col$[ebp], 12632256		; 00c0c0c0H
$L82170:

; 704  : 		}
; 705  : 
; 706  : // dump text
; 707  : 
; 708  : 		DumpText(128, i * 16 + 64, 12, 16, col, DetailMenuText[i]);

	movsx	eax, WORD PTR _i$[ebp]
	mov	ecx, DWORD PTR ?DetailMenuText@@3PAPADA[eax*4]
	push	ecx
	mov	edx, DWORD PTR _col$[ebp]
	push	edx
	push	16					; 00000010H
	push	12					; 0000000cH
	movsx	eax, WORD PTR _i$[ebp]
	shl	eax, 4
	add	eax, 64					; 00000040H
	push	eax
	push	128					; 00000080H
	call	?DumpText@@YAXFFFFJPAD@Z		; DumpText
	add	esp, 24					; 00000018H

; 709  : 		DumpText(128 + strlen(DetailMenuText[i]) * 12, i * 16 + 64, 12, 16, col, togg);

	mov	eax, DWORD PTR _togg$[ebp]
	push	eax
	mov	ecx, DWORD PTR _col$[ebp]
	push	ecx
	push	16					; 00000010H
	push	12					; 0000000cH
	movsx	edx, WORD PTR _i$[ebp]
	shl	edx, 4
	add	edx, 64					; 00000040H
	push	edx
	movsx	eax, WORD PTR _i$[ebp]
	mov	ecx, DWORD PTR ?DetailMenuText@@3PAPADA[eax*4]
	push	ecx
	call	_strlen
	add	esp, 4
	imul	eax, 12					; 0000000cH
	add	eax, 128				; 00000080H
	push	eax
	call	?DumpText@@YAXFFFFJPAD@Z		; DumpText
	add	esp, 24					; 00000018H

; 710  : 	}

	jmp	$L82063
$L82045:

; 711  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
$L82619:
	DD	$L82069
	DD	$L82074
	DD	$L82078
	DD	$L82083
	DD	$L82094
	DD	$L82098
	DD	$L82103
	DD	$L82108
	DD	$L82113
	DD	$L82120
	DD	$L82126
	DD	$L82132
	DD	$L82137
	DD	$L82142
	DD	$L82147
	DD	$L82152
	DD	$L82157
	DD	$L82162
?DetailMenu@@YAXXZ ENDP					; DetailMenu
_TEXT	ENDS
PUBLIC	?MainMenu@@YAXXZ				; MainMenu
PUBLIC	??_C@_06OCBPDGAG@16?5bit?$AA@			; `string'
PUBLIC	??_C@_06JODPINJA@24?5bit?$AA@			; `string'
PUBLIC	??_C@_01IDAFKMJL@_?$AA@				; `string'
PUBLIC	??_C@_0M@IOKPNGEC@Unavailable?$AA@		; `string'
PUBLIC	??_C@_04LBDCJOFB@Auto?$AA@			; `string'
PUBLIC	__real@42c80000
EXTRN	?SetupGame@@YAXXZ:NEAR				; SetupGame
EXTRN	?Everything@@3DA:BYTE				; Everything
EXTRN	?QuitGame@@3DA:BYTE				; QuitGame
EXTRN	?EditMode@@3JA:DWORD				; EditMode
EXTRN	?TimeStep@@3MA:DWORD				; TimeStep
EXTRN	?TitleHbm@@3PAUHBITMAP__@@A:DWORD		; TitleHbm
EXTRN	?Event@@3P6AXXZA:DWORD				; Event
EXTRN	?ReadKeyboard@@YAXXZ:NEAR			; ReadKeyboard
EXTRN	?ReadMouse@@YAXXZ:NEAR				; ReadMouse
EXTRN	?GetKeyPress@@YAEXZ:NEAR			; GetKeyPress
EXTRN	?JoystickNum@@3JA:DWORD				; JoystickNum
EXTRN	?CurrentJoystick@@3JA:DWORD			; CurrentJoystick
EXTRN	?Joystick@@3PAUJOYSTICK@@A:BYTE			; Joystick
EXTRN	?SetGamma@@YAXJJ@Z:NEAR				; SetGamma
EXTRN	?CheckSurfaces@@YAXXZ:NEAR			; CheckSurfaces
EXTRN	?FlipBuffers@@YAXXZ:NEAR			; FlipBuffers
EXTRN	?ClearBuffers@@YAXXZ:NEAR			; ClearBuffers
EXTRN	?NextValidCarID@@YAHH@Z:NEAR			; NextValidCarID
EXTRN	?PrevValidCarID@@YAHH@Z:NEAR			; PrevValidCarID
EXTRN	?CarInfo@@3PAUCAR_INFO@@A:DWORD			; CarInfo
EXTRN	?GammaFlag@@3JA:DWORD				; GammaFlag
EXTRN	?DrawDeviceNum@@3JA:DWORD			; DrawDeviceNum
EXTRN	?DisplayModeCount@@3JA:DWORD			; DisplayModeCount
EXTRN	?DrawDevices@@3PAUDRAW_DEVICE@@A:BYTE		; DrawDevices
EXTRN	?InitPlay@@YA_NXZ:NEAR				; InitPlay
EXTRN	?KillPlay@@YAXXZ:NEAR				; KillPlay
EXTRN	?RegistrySettings@@3UREGISTRY_SETTINGS@@A:BYTE	; RegistrySettings
EXTRN	?ConnectionMenu@@YAXXZ:NEAR			; ConnectionMenu
EXTRN	?AI_Testing@@3JA:DWORD				; AI_Testing
EXTRN	?UpdateTimeFactor@@YAXXZ:NEAR			; UpdateTimeFactor
EXTRN	_memcpy:NEAR
EXTRN	?BlitBitmap@@YAHPAUHBITMAP__@@PAPAUIDirectDrawSurface4@@@Z:NEAR ; BlitBitmap
EXTRN	?GoTitleScreen@@YAXXZ:NEAR			; GoTitleScreen
;	COMDAT ??_C@_06OCBPDGAG@16?5bit?$AA@
CONST	SEGMENT
??_C@_06OCBPDGAG@16?5bit?$AA@ DB '16 bit', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06JODPINJA@24?5bit?$AA@
CONST	SEGMENT
??_C@_06JODPINJA@24?5bit?$AA@ DB '24 bit', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01IDAFKMJL@_?$AA@
CONST	SEGMENT
??_C@_01IDAFKMJL@_?$AA@ DB '_', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@IOKPNGEC@Unavailable?$AA@
CONST	SEGMENT
??_C@_0M@IOKPNGEC@Unavailable?$AA@ DB 'Unavailable', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04LBDCJOFB@Auto?$AA@
CONST	SEGMENT
??_C@_04LBDCJOFB@Auto?$AA@ DB 'Auto', 00H		; `string'
CONST	ENDS
;	COMDAT __real@42c80000
CONST	SEGMENT
__real@42c80000 DD 042c80000r			; 100
; Function compile flags: /Odt /ZI
CONST	ENDS
;	COMDAT ?MainMenu@@YAXXZ
_TEXT	SEGMENT
tv320 = -220						; size = 4
_buf$ = -152						; size = 128
_text$ = -24						; size = 4
_c$ = -17						; size = 1
_col$ = -16						; size = 4
_flag$ = -12						; size = 2
_line$ = -8						; size = 2
_i$ = -4						; size = 2
?MainMenu@@YAXXZ PROC NEAR				; MainMenu, COMDAT

; 718  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi

; 719  : 	short i, line, flag;
; 720  : 	long col;
; 721  : 	unsigned char c;
; 722  : 	char *text;
; 723  : 	char buf[128];
; 724  : 
; 725  : // buffer flip / clear
; 726  : 
; 727  : 	CheckSurfaces();

	call	?CheckSurfaces@@YAXXZ			; CheckSurfaces

; 728  : 	FlipBuffers();

	call	?FlipBuffers@@YAXXZ			; FlipBuffers

; 729  : 	ClearBuffers();

	call	?ClearBuffers@@YAXXZ			; ClearBuffers

; 730  : 
; 731  : // update pos
; 732  : 
; 733  : 	ReadMouse();

	call	?ReadMouse@@YAXXZ			; ReadMouse

; 734  : 	ReadKeyboard();

	call	?ReadKeyboard@@YAXXZ			; ReadKeyboard

; 735  : 	UpdateTimeFactor();

	call	?UpdateTimeFactor@@YAXXZ		; UpdateTimeFactor

; 736  : 
; 737  : 	if (Keys[DIK_UP] && !LastKeys[DIK_UP])

	movsx	eax, BYTE PTR ?Keys@@3PADA+200
	test	eax, eax
	je	SHORT $L82183
	movsx	eax, BYTE PTR ?LastKeys@@3PADA+200
	test	eax, eax
	jne	SHORT $L82183

; 738  : 	{
; 739  : 		flag = TRUE;

	mov	WORD PTR _flag$[ebp], 1
$L82185:

; 740  : 		while ((!MainMenuAllowed[MenuCount] && !Everything) || flag)

	movsx	eax, WORD PTR ?MenuCount@@3FA		; MenuCount
	movsx	ecx, BYTE PTR ?MainMenuAllowed@@3PADA[eax]
	test	ecx, ecx
	jne	SHORT $L82188
	movsx	eax, BYTE PTR ?Everything@@3DA		; Everything
	test	eax, eax
	je	SHORT $L82187
$L82188:
	movsx	eax, WORD PTR _flag$[ebp]
	test	eax, eax
	je	SHORT $L82183
$L82187:

; 741  : 		{
; 742  : 			MenuCount--;

	mov	ax, WORD PTR ?MenuCount@@3FA		; MenuCount
	sub	ax, 1
	mov	WORD PTR ?MenuCount@@3FA, ax		; MenuCount

; 743  : 			if (MenuCount < 0) MenuCount = MAIN_MENU_NUM - 1;

	movsx	eax, WORD PTR ?MenuCount@@3FA		; MenuCount
	test	eax, eax
	jge	SHORT $L82189
	mov	WORD PTR ?MenuCount@@3FA, 16		; MenuCount, 00000010H
$L82189:

; 744  : 			flag = FALSE;

	mov	WORD PTR _flag$[ebp], 0

; 745  : 		}

	jmp	SHORT $L82185
$L82183:

; 746  : 	}
; 747  : 
; 748  : 	if (Keys[DIK_DOWN] && !LastKeys[DIK_DOWN])

	movsx	eax, BYTE PTR ?Keys@@3PADA+208
	test	eax, eax
	je	SHORT $L82190
	movsx	eax, BYTE PTR ?LastKeys@@3PADA+208
	test	eax, eax
	jne	SHORT $L82190

; 749  : 	{
; 750  : 		flag = TRUE;

	mov	WORD PTR _flag$[ebp], 1
$L82192:

; 751  : 		while ((!MainMenuAllowed[MenuCount] && !Everything) || flag)

	movsx	eax, WORD PTR ?MenuCount@@3FA		; MenuCount
	movsx	ecx, BYTE PTR ?MainMenuAllowed@@3PADA[eax]
	test	ecx, ecx
	jne	SHORT $L82195
	movsx	eax, BYTE PTR ?Everything@@3DA		; Everything
	test	eax, eax
	je	SHORT $L82194
$L82195:
	movsx	eax, WORD PTR _flag$[ebp]
	test	eax, eax
	je	SHORT $L82190
$L82194:

; 752  : 		{
; 753  : 			MenuCount++;

	mov	ax, WORD PTR ?MenuCount@@3FA		; MenuCount
	add	ax, 1
	mov	WORD PTR ?MenuCount@@3FA, ax		; MenuCount

; 754  : 			if (MenuCount > MAIN_MENU_NUM - 1) MenuCount = 0;

	movsx	eax, WORD PTR ?MenuCount@@3FA		; MenuCount
	cmp	eax, 16					; 00000010H
	jle	SHORT $L82196
	mov	WORD PTR ?MenuCount@@3FA, 0		; MenuCount
$L82196:

; 755  : 			flag = FALSE;

	mov	WORD PTR _flag$[ebp], 0

; 756  : 		}

	jmp	SHORT $L82192
$L82190:

; 757  : 	}
; 758  : 
; 759  : // show menu
; 760  : 
; 761  : 	D3Ddevice->BeginScene();

	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	edx
	call	DWORD PTR [ecx+36]

; 762  : 
; 763  : 	BlitBitmap(TitleHbm, &BackBuffer);

	push	OFFSET FLAT:?BackBuffer@@3PAUIDirectDrawSurface4@@A ; BackBuffer
	mov	eax, DWORD PTR ?TitleHbm@@3PAUHBITMAP__@@A ; TitleHbm
	push	eax
	call	?BlitBitmap@@YAHPAUHBITMAP__@@PAPAUIDirectDrawSurface4@@@Z ; BlitBitmap
	add	esp, 8

; 764  : 
; 765  : 	BeginTextState();

	call	?BeginTextState@@YAXXZ			; BeginTextState

; 766  : 
; 767  : 	line = 8;

	mov	WORD PTR _line$[ebp], 8

; 768  : 
; 769  : 	for (i = 0 ; i < MAIN_MENU_NUM ; i++) if (MainMenuAllowed[i] || Everything)

	mov	WORD PTR _i$[ebp], 0
	jmp	SHORT $L82197
$L82198:
	mov	ax, WORD PTR _i$[ebp]
	add	ax, 1
	mov	WORD PTR _i$[ebp], ax
$L82197:
	movsx	eax, WORD PTR _i$[ebp]
	cmp	eax, 17					; 00000011H
	jge	$L82199
	movsx	eax, WORD PTR _i$[ebp]
	movsx	ecx, BYTE PTR ?MainMenuAllowed@@3PADA[eax]
	test	ecx, ecx
	jne	SHORT $L82201
	movsx	eax, BYTE PTR ?Everything@@3DA		; Everything
	test	eax, eax
	je	$L82200
$L82201:

; 770  : 	{
; 771  : 		if (MenuCount == i) col = 0xff0000;

	movsx	eax, WORD PTR ?MenuCount@@3FA		; MenuCount
	movsx	ecx, WORD PTR _i$[ebp]
	cmp	eax, ecx
	jne	SHORT $L82202
	mov	DWORD PTR _col$[ebp], 16711680		; 00ff0000H

; 772  : 		else col = 0x808080;

	jmp	SHORT $L82203
$L82202:
	mov	DWORD PTR _col$[ebp], 8421504		; 00808080H
$L82203:

; 773  : 
; 774  : 		DumpText(224, line * 16, 12, 16, col, MainMenuText[i]);

	movsx	eax, WORD PTR _i$[ebp]
	mov	ecx, DWORD PTR ?MainMenuText@@3PAPADA[eax*4]
	push	ecx
	mov	edx, DWORD PTR _col$[ebp]
	push	edx
	push	16					; 00000010H
	push	12					; 0000000cH
	movsx	eax, WORD PTR _line$[ebp]
	shl	eax, 4
	push	eax
	push	224					; 000000e0H
	call	?DumpText@@YAXFFFFJPAD@Z		; DumpText
	add	esp, 24					; 00000018H

; 775  : 
; 776  : 		if (i == MAIN_MENU_TRACK && Everything)

	movsx	eax, WORD PTR _i$[ebp]
	cmp	eax, 4
	jne	$L82204
	movsx	eax, BYTE PTR ?Everything@@3DA		; Everything
	test	eax, eax
	je	$L82204

; 777  : 		{
; 778  : 			if (MenuCount == i)

	movsx	eax, WORD PTR ?MenuCount@@3FA		; MenuCount
	movsx	ecx, WORD PTR _i$[ebp]
	cmp	eax, ecx
	jne	$L82205

; 779  : 			{
; 780  : 				if (Keys[DIK_LEFT] && !LastKeys[DIK_LEFT]) GameSettings.Level--;

	movsx	eax, BYTE PTR ?Keys@@3PADA+203
	test	eax, eax
	je	SHORT $L82206
	movsx	eax, BYTE PTR ?LastKeys@@3PADA+203
	test	eax, eax
	jne	SHORT $L82206
	mov	eax, DWORD PTR ?GameSettings@@3UGAME_SETTINGS@@A+4
	sub	eax, 1
	mov	DWORD PTR ?GameSettings@@3UGAME_SETTINGS@@A+4, eax
$L82206:

; 781  : 				if (Keys[DIK_RIGHT] && !LastKeys[DIK_RIGHT]) GameSettings.Level++;

	movsx	eax, BYTE PTR ?Keys@@3PADA+205
	test	eax, eax
	je	SHORT $L82207
	movsx	eax, BYTE PTR ?LastKeys@@3PADA+205
	test	eax, eax
	jne	SHORT $L82207
	mov	eax, DWORD PTR ?GameSettings@@3UGAME_SETTINGS@@A+4
	add	eax, 1
	mov	DWORD PTR ?GameSettings@@3UGAME_SETTINGS@@A+4, eax
$L82207:

; 782  : 				if (GameSettings.Level == -1) GameSettings.Level = GameSettings.LevelNum - 1;

	cmp	DWORD PTR ?GameSettings@@3UGAME_SETTINGS@@A+4, -1
	jne	SHORT $L82208
	mov	eax, DWORD PTR ?GameSettings@@3UGAME_SETTINGS@@A+8
	sub	eax, 1
	mov	DWORD PTR ?GameSettings@@3UGAME_SETTINGS@@A+4, eax
$L82208:

; 783  : 				if (GameSettings.Level == GameSettings.LevelNum) GameSettings.Level = 0;

	mov	eax, DWORD PTR ?GameSettings@@3UGAME_SETTINGS@@A+4
	cmp	eax, DWORD PTR ?GameSettings@@3UGAME_SETTINGS@@A+8
	jne	SHORT $L82209
	mov	DWORD PTR ?GameSettings@@3UGAME_SETTINGS@@A+4, 0
$L82209:

; 784  : 
; 785  : 				memcpy(RegistrySettings.LevelDir, LevelInf[GameSettings.Level].Dir, MAX_LEVEL_DIR_NAME);

	push	16					; 00000010H
	mov	eax, DWORD PTR ?GameSettings@@3UGAME_SETTINGS@@A+4
	imul	eax, 232				; 000000e8H
	add	eax, DWORD PTR ?LevelInf@@3PAULEVELINFO@@A ; LevelInf
	push	eax
	push	OFFSET FLAT:?RegistrySettings@@3UREGISTRY_SETTINGS@@A+124
	call	_memcpy
	add	esp, 12					; 0000000cH
$L82205:

; 786  : 			}
; 787  : 			DumpText(224 + strlen(MainMenuText[i]) * 12, line * 16, 12, 16, col, LevelInf[GameSettings.Level].Name);

	mov	eax, DWORD PTR ?GameSettings@@3UGAME_SETTINGS@@A+4
	imul	eax, 232				; 000000e8H
	mov	ecx, DWORD PTR ?LevelInf@@3PAULEVELINFO@@A ; LevelInf
	lea	edx, DWORD PTR [ecx+eax+16]
	push	edx
	mov	eax, DWORD PTR _col$[ebp]
	push	eax
	push	16					; 00000010H
	push	12					; 0000000cH
	movsx	ecx, WORD PTR _line$[ebp]
	shl	ecx, 4
	push	ecx
	movsx	edx, WORD PTR _i$[ebp]
	mov	eax, DWORD PTR ?MainMenuText@@3PAPADA[edx*4]
	push	eax
	call	_strlen
	add	esp, 4
	imul	eax, 12					; 0000000cH
	add	eax, 224				; 000000e0H
	push	eax
	call	?DumpText@@YAXFFFFJPAD@Z		; DumpText
	add	esp, 24					; 00000018H
$L82204:

; 788  : 		}
; 789  : 
; 790  : 		if (i == MAIN_MENU_RES)

	movsx	eax, WORD PTR _i$[ebp]
	cmp	eax, 5
	jne	$L82210

; 791  : 		{
; 792  : 			if (MenuCount == i)

	movsx	eax, WORD PTR ?MenuCount@@3FA		; MenuCount
	movsx	ecx, WORD PTR _i$[ebp]
	cmp	eax, ecx
	jne	$L82211

; 793  : 			{
; 794  : 				if (Keys[DIK_LEFT] && !LastKeys[DIK_LEFT]) DisplayModeCount--;

	movsx	eax, BYTE PTR ?Keys@@3PADA+203
	test	eax, eax
	je	SHORT $L82212
	movsx	eax, BYTE PTR ?LastKeys@@3PADA+203
	test	eax, eax
	jne	SHORT $L82212
	mov	eax, DWORD PTR ?DisplayModeCount@@3JA	; DisplayModeCount
	sub	eax, 1
	mov	DWORD PTR ?DisplayModeCount@@3JA, eax	; DisplayModeCount
$L82212:

; 795  : 				if (Keys[DIK_RIGHT] && !LastKeys[DIK_RIGHT]) DisplayModeCount++;

	movsx	eax, BYTE PTR ?Keys@@3PADA+205
	test	eax, eax
	je	SHORT $L82213
	movsx	eax, BYTE PTR ?LastKeys@@3PADA+205
	test	eax, eax
	jne	SHORT $L82213
	mov	eax, DWORD PTR ?DisplayModeCount@@3JA	; DisplayModeCount
	add	eax, 1
	mov	DWORD PTR ?DisplayModeCount@@3JA, eax	; DisplayModeCount
$L82213:

; 796  : 
; 797  : 				if (DisplayModeCount < 0) DisplayModeCount = 0;

	cmp	DWORD PTR ?DisplayModeCount@@3JA, 0	; DisplayModeCount
	jge	SHORT $L82214
	mov	DWORD PTR ?DisplayModeCount@@3JA, 0	; DisplayModeCount
$L82214:

; 798  : 				if (DisplayModeCount >= DrawDevices[RegistrySettings.DrawDevice].DisplayModeNum) DisplayModeCount = DrawDevices[RegistrySettings.DrawDevice].DisplayModeNum - 1;

	mov	eax, DWORD PTR ?RegistrySettings@@3UREGISTRY_SETTINGS@@A+44
	imul	eax, 1672				; 00000688H
	mov	ecx, DWORD PTR ?DisplayModeCount@@3JA	; DisplayModeCount
	cmp	ecx, DWORD PTR ?DrawDevices@@3PAUDRAW_DEVICE@@A[eax+128]
	jl	SHORT $L82215
	mov	eax, DWORD PTR ?RegistrySettings@@3UREGISTRY_SETTINGS@@A+44
	imul	eax, 1672				; 00000688H
	mov	ecx, DWORD PTR ?DrawDevices@@3PAUDRAW_DEVICE@@A[eax+128]
	sub	ecx, 1
	mov	DWORD PTR ?DisplayModeCount@@3JA, ecx	; DisplayModeCount
$L82215:

; 799  : 
; 800  : 				RegistrySettings.ScreenWidth = DrawDevices[RegistrySettings.DrawDevice].DisplayMode[DisplayModeCount].Width;

	mov	eax, DWORD PTR ?RegistrySettings@@3UREGISTRY_SETTINGS@@A+44
	imul	eax, 1672				; 00000688H
	mov	ecx, DWORD PTR ?DisplayModeCount@@3JA	; DisplayModeCount
	imul	ecx, 48					; 00000030H
	mov	edx, DWORD PTR ?DrawDevices@@3PAUDRAW_DEVICE@@A[eax+ecx+136]
	mov	DWORD PTR ?RegistrySettings@@3UREGISTRY_SETTINGS@@A+32, edx

; 801  : 				RegistrySettings.ScreenHeight = DrawDevices[RegistrySettings.DrawDevice].DisplayMode[DisplayModeCount].Height;

	mov	eax, DWORD PTR ?RegistrySettings@@3UREGISTRY_SETTINGS@@A+44
	imul	eax, 1672				; 00000688H
	mov	ecx, DWORD PTR ?DisplayModeCount@@3JA	; DisplayModeCount
	imul	ecx, 48					; 00000030H
	mov	edx, DWORD PTR ?DrawDevices@@3PAUDRAW_DEVICE@@A[eax+ecx+140]
	mov	DWORD PTR ?RegistrySettings@@3UREGISTRY_SETTINGS@@A+36, edx
$L82211:

; 802  : 			}
; 803  : 			DumpText(224 + strlen(MainMenuText[i]) * 12, line * 16, 12, 16, col, DrawDevices[RegistrySettings.DrawDevice].DisplayMode[DisplayModeCount].DisplayText);

	mov	eax, DWORD PTR ?RegistrySettings@@3UREGISTRY_SETTINGS@@A+44
	imul	eax, 1672				; 00000688H
	mov	ecx, DWORD PTR ?DisplayModeCount@@3JA	; DisplayModeCount
	imul	ecx, 48					; 00000030H
	lea	edx, DWORD PTR ?DrawDevices@@3PAUDRAW_DEVICE@@A[eax+ecx+152]
	push	edx
	mov	eax, DWORD PTR _col$[ebp]
	push	eax
	push	16					; 00000010H
	push	12					; 0000000cH
	movsx	ecx, WORD PTR _line$[ebp]
	shl	ecx, 4
	push	ecx
	movsx	edx, WORD PTR _i$[ebp]
	mov	eax, DWORD PTR ?MainMenuText@@3PAPADA[edx*4]
	push	eax
	call	_strlen
	add	esp, 4
	imul	eax, 12					; 0000000cH
	add	eax, 224				; 000000e0H
	push	eax
	call	?DumpText@@YAXFFFFJPAD@Z		; DumpText
	add	esp, 24					; 00000018H
$L82210:

; 804  : 		}
; 805  : 
; 806  : 		if (i == MAIN_MENU_TEXBPP)

	movsx	eax, WORD PTR _i$[ebp]
	cmp	eax, 6
	jne	$L82216

; 807  : 		{
; 808  : 			if (MenuCount == i)

	movsx	eax, WORD PTR ?MenuCount@@3FA		; MenuCount
	movsx	ecx, WORD PTR _i$[ebp]
	cmp	eax, ecx
	jne	SHORT $L82217

; 809  : 			{
; 810  : 				if (Keys[DIK_LEFT] && !LastKeys[DIK_LEFT]) RegistrySettings.TextureBpp = 16;

	movsx	eax, BYTE PTR ?Keys@@3PADA+203
	test	eax, eax
	je	SHORT $L82218
	movsx	eax, BYTE PTR ?LastKeys@@3PADA+203
	test	eax, eax
	jne	SHORT $L82218
	mov	DWORD PTR ?RegistrySettings@@3UREGISTRY_SETTINGS@@A+56, 16 ; 00000010H
$L82218:

; 811  : 				if (Keys[DIK_RIGHT] && !LastKeys[DIK_RIGHT]) RegistrySettings.TextureBpp = 24;

	movsx	eax, BYTE PTR ?Keys@@3PADA+205
	test	eax, eax
	je	SHORT $L82217
	movsx	eax, BYTE PTR ?LastKeys@@3PADA+205
	test	eax, eax
	jne	SHORT $L82217
	mov	DWORD PTR ?RegistrySettings@@3UREGISTRY_SETTINGS@@A+56, 24 ; 00000018H
$L82217:

; 812  : 			}
; 813  : 			DumpText(224 + strlen(MainMenuText[i]) * 12, line * 16, 12, 16, col, RegistrySettings.TextureBpp == 16 ? "16 bit" : "24 bit");

	cmp	DWORD PTR ?RegistrySettings@@3UREGISTRY_SETTINGS@@A+56, 16 ; 00000010H
	jne	SHORT $L82622
	mov	DWORD PTR tv320[ebp], OFFSET FLAT:??_C@_06OCBPDGAG@16?5bit?$AA@
	jmp	SHORT $L82623
$L82622:
	mov	DWORD PTR tv320[ebp], OFFSET FLAT:??_C@_06JODPINJA@24?5bit?$AA@
$L82623:
	mov	eax, DWORD PTR tv320[ebp]
	push	eax
	mov	ecx, DWORD PTR _col$[ebp]
	push	ecx
	push	16					; 00000010H
	push	12					; 0000000cH
	movsx	edx, WORD PTR _line$[ebp]
	shl	edx, 4
	push	edx
	movsx	eax, WORD PTR _i$[ebp]
	mov	ecx, DWORD PTR ?MainMenuText@@3PAPADA[eax*4]
	push	ecx
	call	_strlen
	add	esp, 4
	imul	eax, 12					; 0000000cH
	add	eax, 224				; 000000e0H
	push	eax
	call	?DumpText@@YAXFFFFJPAD@Z		; DumpText
	add	esp, 24					; 00000018H
$L82216:

; 814  : 		}
; 815  : 
; 816  : 		if (i == MAIN_MENU_DEVICE)

	movsx	eax, WORD PTR _i$[ebp]
	cmp	eax, 7
	jne	$L82222

; 817  : 		{
; 818  : 			if (MenuCount == i)

	movsx	eax, WORD PTR ?MenuCount@@3FA		; MenuCount
	movsx	ecx, WORD PTR _i$[ebp]
	cmp	eax, ecx
	jne	$L82223

; 819  : 			{
; 820  : 				if (Keys[DIK_LEFT] && !LastKeys[DIK_LEFT] && RegistrySettings.DrawDevice)

	movsx	eax, BYTE PTR ?Keys@@3PADA+203
	test	eax, eax
	je	SHORT $L82224
	movsx	eax, BYTE PTR ?LastKeys@@3PADA+203
	test	eax, eax
	jne	SHORT $L82224
	cmp	DWORD PTR ?RegistrySettings@@3UREGISTRY_SETTINGS@@A+44, 0
	je	SHORT $L82224

; 821  : 				{
; 822  : 					RegistrySettings.DrawDevice--;

	mov	eax, DWORD PTR ?RegistrySettings@@3UREGISTRY_SETTINGS@@A+44
	sub	eax, 1
	mov	DWORD PTR ?RegistrySettings@@3UREGISTRY_SETTINGS@@A+44, eax

; 823  : 					DisplayModeCount = DrawDevices[RegistrySettings.DrawDevice].BestDisplayMode;

	mov	eax, DWORD PTR ?RegistrySettings@@3UREGISTRY_SETTINGS@@A+44
	imul	eax, 1672				; 00000688H
	mov	ecx, DWORD PTR ?DrawDevices@@3PAUDRAW_DEVICE@@A[eax+132]
	mov	DWORD PTR ?DisplayModeCount@@3JA, ecx	; DisplayModeCount
$L82224:

; 824  : 				}
; 825  : 				if (Keys[DIK_RIGHT] && !LastKeys[DIK_RIGHT] && RegistrySettings.DrawDevice < (DWORD)DrawDeviceNum - 1)

	movsx	eax, BYTE PTR ?Keys@@3PADA+205
	test	eax, eax
	je	SHORT $L82223
	movsx	eax, BYTE PTR ?LastKeys@@3PADA+205
	test	eax, eax
	jne	SHORT $L82223
	mov	eax, DWORD PTR ?DrawDeviceNum@@3JA	; DrawDeviceNum
	sub	eax, 1
	cmp	DWORD PTR ?RegistrySettings@@3UREGISTRY_SETTINGS@@A+44, eax
	jae	SHORT $L82223

; 826  : 				{
; 827  : 					RegistrySettings.DrawDevice++;

	mov	eax, DWORD PTR ?RegistrySettings@@3UREGISTRY_SETTINGS@@A+44
	add	eax, 1
	mov	DWORD PTR ?RegistrySettings@@3UREGISTRY_SETTINGS@@A+44, eax

; 828  : 					DisplayModeCount = DrawDevices[RegistrySettings.DrawDevice].BestDisplayMode;

	mov	eax, DWORD PTR ?RegistrySettings@@3UREGISTRY_SETTINGS@@A+44
	imul	eax, 1672				; 00000688H
	mov	ecx, DWORD PTR ?DrawDevices@@3PAUDRAW_DEVICE@@A[eax+132]
	mov	DWORD PTR ?DisplayModeCount@@3JA, ecx	; DisplayModeCount
$L82223:

; 829  : 				}
; 830  : 			}
; 831  : 			DumpText(224 + strlen(MainMenuText[i]) * 12, line * 16, 12, 16, col, DrawDevices[RegistrySettings.DrawDevice].Name);

	mov	eax, DWORD PTR ?RegistrySettings@@3UREGISTRY_SETTINGS@@A+44
	imul	eax, 1672				; 00000688H
	add	eax, OFFSET FLAT:?DrawDevices@@3PAUDRAW_DEVICE@@A ; DrawDevices
	push	eax
	mov	ecx, DWORD PTR _col$[ebp]
	push	ecx
	push	16					; 00000010H
	push	12					; 0000000cH
	movsx	edx, WORD PTR _line$[ebp]
	shl	edx, 4
	push	edx
	movsx	eax, WORD PTR _i$[ebp]
	mov	ecx, DWORD PTR ?MainMenuText@@3PAPADA[eax*4]
	push	ecx
	call	_strlen
	add	esp, 4
	imul	eax, 12					; 0000000cH
	add	eax, 224				; 000000e0H
	push	eax
	call	?DumpText@@YAXFFFFJPAD@Z		; DumpText
	add	esp, 24					; 00000018H
$L82222:

; 832  : 		}
; 833  : 
; 834  : 		if (i == MAIN_MENU_JOYSTICK)

	movsx	eax, WORD PTR _i$[ebp]
	cmp	eax, 8
	jne	$L82227

; 835  : 		{
; 836  : 			if (JoystickNum && MenuCount == i)

	cmp	DWORD PTR ?JoystickNum@@3JA, 0		; JoystickNum
	je	SHORT $L82228
	movsx	eax, WORD PTR ?MenuCount@@3FA		; MenuCount
	movsx	ecx, WORD PTR _i$[ebp]
	cmp	eax, ecx
	jne	SHORT $L82228

; 837  : 			{
; 838  : 				if (Keys[DIK_LEFT] && !LastKeys[DIK_LEFT] && CurrentJoystick > -1) CurrentJoystick--;

	movsx	eax, BYTE PTR ?Keys@@3PADA+203
	test	eax, eax
	je	SHORT $L82229
	movsx	eax, BYTE PTR ?LastKeys@@3PADA+203
	test	eax, eax
	jne	SHORT $L82229
	cmp	DWORD PTR ?CurrentJoystick@@3JA, -1	; CurrentJoystick
	jle	SHORT $L82229
	mov	eax, DWORD PTR ?CurrentJoystick@@3JA	; CurrentJoystick
	sub	eax, 1
	mov	DWORD PTR ?CurrentJoystick@@3JA, eax	; CurrentJoystick
$L82229:

; 839  : 				if (Keys[DIK_RIGHT] && !LastKeys[DIK_RIGHT] && CurrentJoystick < JoystickNum - 1) CurrentJoystick++;

	movsx	eax, BYTE PTR ?Keys@@3PADA+205
	test	eax, eax
	je	SHORT $L82228
	movsx	eax, BYTE PTR ?LastKeys@@3PADA+205
	test	eax, eax
	jne	SHORT $L82228
	mov	eax, DWORD PTR ?JoystickNum@@3JA	; JoystickNum
	sub	eax, 1
	cmp	DWORD PTR ?CurrentJoystick@@3JA, eax	; CurrentJoystick
	jge	SHORT $L82228
	mov	eax, DWORD PTR ?CurrentJoystick@@3JA	; CurrentJoystick
	add	eax, 1
	mov	DWORD PTR ?CurrentJoystick@@3JA, eax	; CurrentJoystick
$L82228:

; 840  : 			}
; 841  : 
; 842  : 			if (CurrentJoystick == -1)

	cmp	DWORD PTR ?CurrentJoystick@@3JA, -1	; CurrentJoystick
	jne	SHORT $L82231

; 843  : 				text = "None";

	mov	DWORD PTR _text$[ebp], OFFSET FLAT:??_C@_04OHJIHAFH@None?$AA@

; 844  : 			else

	jmp	SHORT $L82232
$L82231:

; 845  : 				text = Joystick[CurrentJoystick].Name;

	mov	eax, DWORD PTR ?CurrentJoystick@@3JA	; CurrentJoystick
	imul	eax, 332				; 0000014cH
	add	eax, OFFSET FLAT:?Joystick@@3PAUJOYSTICK@@A+72
	mov	DWORD PTR _text$[ebp], eax
$L82232:

; 846  : 
; 847  : 			DumpText(224 + strlen(MainMenuText[i]) * 12, line * 16, 12, 16, col, text);

	mov	eax, DWORD PTR _text$[ebp]
	push	eax
	mov	ecx, DWORD PTR _col$[ebp]
	push	ecx
	push	16					; 00000010H
	push	12					; 0000000cH
	movsx	edx, WORD PTR _line$[ebp]
	shl	edx, 4
	push	edx
	movsx	eax, WORD PTR _i$[ebp]
	mov	ecx, DWORD PTR ?MainMenuText@@3PAPADA[eax*4]
	push	ecx
	call	_strlen
	add	esp, 4
	imul	eax, 12					; 0000000cH
	add	eax, 224				; 000000e0H
	push	eax
	call	?DumpText@@YAXFFFFJPAD@Z		; DumpText
	add	esp, 24					; 00000018H
$L82227:

; 848  : 		}
; 849  : 
; 850  : 		if (i == MAIN_MENU_CAR)

	movsx	eax, WORD PTR _i$[ebp]
	cmp	eax, 9
	jne	$L82233

; 851  : 		{
; 852  : 			if (MenuCount == i)

	movsx	eax, WORD PTR ?MenuCount@@3FA		; MenuCount
	movsx	ecx, WORD PTR _i$[ebp]
	cmp	eax, ecx
	jne	$L82234

; 853  : 			{
; 854  : 				if (Keys[DIK_LEFT] && !LastKeys[DIK_LEFT])

	movsx	eax, BYTE PTR ?Keys@@3PADA+203
	test	eax, eax
	je	SHORT $L82235
	movsx	eax, BYTE PTR ?LastKeys@@3PADA+203
	test	eax, eax
	jne	SHORT $L82235

; 855  : 				{
; 856  : 					if (Everything)

	movsx	eax, BYTE PTR ?Everything@@3DA		; Everything
	test	eax, eax
	je	SHORT $L82236

; 857  : 						GameSettings.CarID = PrevValidCarID(GameSettings.CarID);

	mov	eax, DWORD PTR ?GameSettings@@3UGAME_SETTINGS@@A+24
	push	eax
	call	?PrevValidCarID@@YAHH@Z			; PrevValidCarID
	add	esp, 4
	mov	DWORD PTR ?GameSettings@@3UGAME_SETTINGS@@A+24, eax

; 858  : 					else

	jmp	SHORT $L82235
$L82236:

; 859  : 						GameSettings.CarID = 2;

	mov	DWORD PTR ?GameSettings@@3UGAME_SETTINGS@@A+24, 2
$L82235:

; 860  : 				}
; 861  : 				if (Keys[DIK_RIGHT] && !LastKeys[DIK_RIGHT])

	movsx	eax, BYTE PTR ?Keys@@3PADA+205
	test	eax, eax
	je	SHORT $L82234
	movsx	eax, BYTE PTR ?LastKeys@@3PADA+205
	test	eax, eax
	jne	SHORT $L82234

; 862  : 				{
; 863  : 					if (Everything)

	movsx	eax, BYTE PTR ?Everything@@3DA		; Everything
	test	eax, eax
	je	SHORT $L82239

; 864  : 						GameSettings.CarID = NextValidCarID(GameSettings.CarID);

	mov	eax, DWORD PTR ?GameSettings@@3UGAME_SETTINGS@@A+24
	push	eax
	call	?NextValidCarID@@YAHH@Z			; NextValidCarID
	add	esp, 4
	mov	DWORD PTR ?GameSettings@@3UGAME_SETTINGS@@A+24, eax

; 865  : 					else

	jmp	SHORT $L82234
$L82239:

; 866  : 						GameSettings.CarID = 4;

	mov	DWORD PTR ?GameSettings@@3UGAME_SETTINGS@@A+24, 4
$L82234:

; 867  : 				}
; 868  : 			}
; 869  : 
; 870  : 			text = CarInfo[GameSettings.CarID].Name;

	mov	eax, DWORD PTR ?GameSettings@@3UGAME_SETTINGS@@A+24
	imul	eax, 2220				; 000008acH
	mov	ecx, DWORD PTR ?CarInfo@@3PAUCAR_INFO@@A ; CarInfo
	lea	edx, DWORD PTR [ecx+eax+1348]
	mov	DWORD PTR _text$[ebp], edx

; 871  : 			DumpText(224 + strlen(MainMenuText[i]) * 12, line * 16, 12, 16, col, text);

	mov	eax, DWORD PTR _text$[ebp]
	push	eax
	mov	ecx, DWORD PTR _col$[ebp]
	push	ecx
	push	16					; 00000010H
	push	12					; 0000000cH
	movsx	edx, WORD PTR _line$[ebp]
	shl	edx, 4
	push	edx
	movsx	eax, WORD PTR _i$[ebp]
	mov	ecx, DWORD PTR ?MainMenuText@@3PAPADA[eax*4]
	push	ecx
	call	_strlen
	add	esp, 4
	imul	eax, 12					; 0000000cH
	add	eax, 224				; 000000e0H
	push	eax
	call	?DumpText@@YAXFFFFJPAD@Z		; DumpText
	add	esp, 24					; 00000018H
$L82233:

; 872  : 		}
; 873  : 
; 874  : 		if (i == MAIN_MENU_NAME)

	movsx	eax, WORD PTR _i$[ebp]
	cmp	eax, 10					; 0000000aH
	jne	$L82241

; 875  : 		{
; 876  : 			if (MenuCount == i)

	movsx	eax, WORD PTR ?MenuCount@@3FA		; MenuCount
	movsx	ecx, WORD PTR _i$[ebp]
	cmp	eax, ecx
	jne	$L82242

; 877  : 			{
; 878  : 				if ((c = GetKeyPress()))

	call	?GetKeyPress@@YAEXZ			; GetKeyPress
	mov	BYTE PTR _c$[ebp], al
	movzx	eax, BYTE PTR _c$[ebp]
	test	eax, eax
	je	SHORT $L82243

; 879  : 				{
; 880  : 					if (c == 8)

	movzx	eax, BYTE PTR _c$[ebp]
	cmp	eax, 8
	jne	SHORT $L82244

; 881  : 					{
; 882  : 						if (strlen(RegistrySettings.PlayerName))

	push	OFFSET FLAT:?RegistrySettings@@3UREGISTRY_SETTINGS@@A+60
	call	_strlen
	add	esp, 4
	test	eax, eax
	je	SHORT $L82245

; 883  : 						{
; 884  : 							RegistrySettings.PlayerName[strlen(RegistrySettings.PlayerName) - 1] = 0;

	push	OFFSET FLAT:?RegistrySettings@@3UREGISTRY_SETTINGS@@A+60
	call	_strlen
	add	esp, 4
	mov	BYTE PTR ?RegistrySettings@@3UREGISTRY_SETTINGS@@A[eax+59], 0
$L82245:

; 885  : 						}
; 886  : 					}
; 887  : 					else if (c != 13 && c != 27)

	jmp	SHORT $L82243
$L82244:
	movzx	eax, BYTE PTR _c$[ebp]
	cmp	eax, 13					; 0000000dH
	je	SHORT $L82243
	movzx	eax, BYTE PTR _c$[ebp]
	cmp	eax, 27					; 0000001bH
	je	SHORT $L82243

; 888  : 					{
; 889  : 						if (strlen(RegistrySettings.PlayerName) < MAX_PLAYER_NAME - 1)

	push	OFFSET FLAT:?RegistrySettings@@3UREGISTRY_SETTINGS@@A+60
	call	_strlen
	add	esp, 4
	cmp	eax, 63					; 0000003fH
	jae	SHORT $L82243

; 890  : 						{
; 891  : 							RegistrySettings.PlayerName[strlen(RegistrySettings.PlayerName)] = c;

	push	OFFSET FLAT:?RegistrySettings@@3UREGISTRY_SETTINGS@@A+60
	call	_strlen
	add	esp, 4
	mov	cl, BYTE PTR _c$[ebp]
	mov	BYTE PTR ?RegistrySettings@@3UREGISTRY_SETTINGS@@A[eax+60], cl

; 892  : 							RegistrySettings.PlayerName[strlen(RegistrySettings.PlayerName) + 1] = 0;

	push	OFFSET FLAT:?RegistrySettings@@3UREGISTRY_SETTINGS@@A+60
	call	_strlen
	add	esp, 4
	mov	BYTE PTR ?RegistrySettings@@3UREGISTRY_SETTINGS@@A[eax+61], 0
$L82243:

; 893  : 						}
; 894  : 					}
; 895  : 				}
; 896  : 				DumpText(224 + strlen(MainMenuText[i]) * 12 + strlen(RegistrySettings.PlayerName) * 12, line * 16, 12, 16, col, "_");

	push	OFFSET FLAT:??_C@_01IDAFKMJL@_?$AA@
	mov	eax, DWORD PTR _col$[ebp]
	push	eax
	push	16					; 00000010H
	push	12					; 0000000cH
	movsx	ecx, WORD PTR _line$[ebp]
	shl	ecx, 4
	push	ecx
	movsx	edx, WORD PTR _i$[ebp]
	mov	eax, DWORD PTR ?MainMenuText@@3PAPADA[edx*4]
	push	eax
	call	_strlen
	add	esp, 4
	mov	esi, eax
	imul	esi, 12					; 0000000cH
	push	OFFSET FLAT:?RegistrySettings@@3UREGISTRY_SETTINGS@@A+60
	call	_strlen
	add	esp, 4
	imul	eax, 12					; 0000000cH
	lea	ecx, DWORD PTR [esi+eax+224]
	push	ecx
	call	?DumpText@@YAXFFFFJPAD@Z		; DumpText
	add	esp, 24					; 00000018H
$L82242:

; 897  : 			}
; 898  : 			DumpText(224 + strlen(MainMenuText[i]) * 12, line * 16, 12, 16, col, RegistrySettings.PlayerName);

	push	OFFSET FLAT:?RegistrySettings@@3UREGISTRY_SETTINGS@@A+60
	mov	eax, DWORD PTR _col$[ebp]
	push	eax
	push	16					; 00000010H
	push	12					; 0000000cH
	movsx	ecx, WORD PTR _line$[ebp]
	shl	ecx, 4
	push	ecx
	movsx	edx, WORD PTR _i$[ebp]
	mov	eax, DWORD PTR ?MainMenuText@@3PAPADA[edx*4]
	push	eax
	call	_strlen
	add	esp, 4
	imul	eax, 12					; 0000000cH
	add	eax, 224				; 000000e0H
	push	eax
	call	?DumpText@@YAXFFFFJPAD@Z		; DumpText
	add	esp, 24					; 00000018H
$L82241:

; 899  : 		}
; 900  : 
; 901  : 		if (i == MAIN_MENU_EDIT)

	movsx	eax, WORD PTR _i$[ebp]
	cmp	eax, 11					; 0000000bH
	jne	$L82250

; 902  : 		{
; 903  : 			if (MenuCount == i)

	movsx	eax, WORD PTR ?MenuCount@@3FA		; MenuCount
	movsx	ecx, WORD PTR _i$[ebp]
	cmp	eax, ecx
	jne	SHORT $L82251

; 904  : 			{
; 905  : 				if (Keys[DIK_LEFT] && !LastKeys[DIK_LEFT]) EditMode--;

	movsx	eax, BYTE PTR ?Keys@@3PADA+203
	test	eax, eax
	je	SHORT $L82252
	movsx	eax, BYTE PTR ?LastKeys@@3PADA+203
	test	eax, eax
	jne	SHORT $L82252
	mov	eax, DWORD PTR ?EditMode@@3JA		; EditMode
	sub	eax, 1
	mov	DWORD PTR ?EditMode@@3JA, eax		; EditMode
$L82252:

; 906  : 				if (Keys[DIK_RIGHT] && !LastKeys[DIK_RIGHT]) EditMode++;

	movsx	eax, BYTE PTR ?Keys@@3PADA+205
	test	eax, eax
	je	SHORT $L82253
	movsx	eax, BYTE PTR ?LastKeys@@3PADA+205
	test	eax, eax
	jne	SHORT $L82253
	mov	eax, DWORD PTR ?EditMode@@3JA		; EditMode
	add	eax, 1
	mov	DWORD PTR ?EditMode@@3JA, eax		; EditMode
$L82253:

; 907  : 				if (EditMode < 0) EditMode = EDIT_NUM - 1;

	cmp	DWORD PTR ?EditMode@@3JA, 0		; EditMode
	jge	SHORT $L82254
	mov	DWORD PTR ?EditMode@@3JA, 10		; EditMode, 0000000aH
$L82254:

; 908  : 				if (EditMode == EDIT_NUM) EditMode = 0;

	cmp	DWORD PTR ?EditMode@@3JA, 11		; EditMode, 0000000bH
	jne	SHORT $L82251
	mov	DWORD PTR ?EditMode@@3JA, 0		; EditMode
$L82251:

; 909  : 			}
; 910  : 			DumpText(224 + strlen(MainMenuText[i]) * 12, line * 16, 12, 16, col, EditMenuText[EditMode]);

	mov	eax, DWORD PTR ?EditMode@@3JA		; EditMode
	mov	ecx, DWORD PTR ?EditMenuText@@3PAPADA[eax*4]
	push	ecx
	mov	edx, DWORD PTR _col$[ebp]
	push	edx
	push	16					; 00000010H
	push	12					; 0000000cH
	movsx	eax, WORD PTR _line$[ebp]
	shl	eax, 4
	push	eax
	movsx	ecx, WORD PTR _i$[ebp]
	mov	edx, DWORD PTR ?MainMenuText@@3PAPADA[ecx*4]
	push	edx
	call	_strlen
	add	esp, 4
	imul	eax, 12					; 0000000cH
	add	eax, 224				; 000000e0H
	push	eax
	call	?DumpText@@YAXFFFFJPAD@Z		; DumpText
	add	esp, 24					; 00000018H
$L82250:

; 911  : 		}
; 912  : 
; 913  : 		if (i == MAIN_MENU_BRIGHTNESS)

	movsx	eax, WORD PTR _i$[ebp]
	cmp	eax, 12					; 0000000cH
	jne	$L82256

; 914  : 		{
; 915  : 			if (GammaFlag == GAMMA_UNAVAILABLE)

	cmp	DWORD PTR ?GammaFlag@@3JA, 0		; GammaFlag
	jne	SHORT $L82257

; 916  : 			{
; 917  : 				text = "Unavailable";

	mov	DWORD PTR _text$[ebp], OFFSET FLAT:??_C@_0M@IOKPNGEC@Unavailable?$AA@

; 918  : 			}
; 919  : 			else if (GammaFlag == GAMMA_AUTO)

	jmp	$L82259
$L82257:
	cmp	DWORD PTR ?GammaFlag@@3JA, 2		; GammaFlag
	jne	SHORT $L82260

; 920  : 			{
; 921  : 				text = "Auto";

	mov	DWORD PTR _text$[ebp], OFFSET FLAT:??_C@_04LBDCJOFB@Auto?$AA@

; 922  : 			}
; 923  : 			else

	jmp	$L82259
$L82260:

; 924  : 			{
; 925  : 				if (MenuCount == i)

	movsx	eax, WORD PTR ?MenuCount@@3FA		; MenuCount
	movsx	ecx, WORD PTR _i$[ebp]
	cmp	eax, ecx
	jne	$L82263

; 926  : 				{
; 927  : 					if (Keys[DIK_LEFT]) RegistrySettings.Brightness -= (long)(TimeStep * 100.0f);

	movsx	eax, BYTE PTR ?Keys@@3PADA+203
	test	eax, eax
	je	SHORT $L82264
	fld	DWORD PTR ?TimeStep@@3MA		; TimeStep
	fmul	DWORD PTR __real@42c80000
	call	__ftol2
	mov	ecx, DWORD PTR ?RegistrySettings@@3UREGISTRY_SETTINGS@@A+48
	sub	ecx, eax
	mov	DWORD PTR ?RegistrySettings@@3UREGISTRY_SETTINGS@@A+48, ecx
$L82264:

; 928  : 					if (Keys[DIK_RIGHT]) RegistrySettings.Brightness += (long)(TimeStep * 100.0f);

	movsx	eax, BYTE PTR ?Keys@@3PADA+205
	test	eax, eax
	je	SHORT $L82266
	fld	DWORD PTR ?TimeStep@@3MA		; TimeStep
	fmul	DWORD PTR __real@42c80000
	call	__ftol2
	add	eax, DWORD PTR ?RegistrySettings@@3UREGISTRY_SETTINGS@@A+48
	mov	DWORD PTR ?RegistrySettings@@3UREGISTRY_SETTINGS@@A+48, eax
$L82266:

; 929  : 
; 930  : 					if (RegistrySettings.Brightness & 0x80000000) RegistrySettings.Brightness = 0;

	mov	eax, DWORD PTR ?RegistrySettings@@3UREGISTRY_SETTINGS@@A+48
	and	eax, -2147483648			; 80000000H
	je	SHORT $L82268
	mov	DWORD PTR ?RegistrySettings@@3UREGISTRY_SETTINGS@@A+48, 0
$L82268:

; 931  : 					if (RegistrySettings.Brightness > 512) RegistrySettings.Brightness = 512;

	cmp	DWORD PTR ?RegistrySettings@@3UREGISTRY_SETTINGS@@A+48, 512 ; 00000200H
	jbe	SHORT $L82269
	mov	DWORD PTR ?RegistrySettings@@3UREGISTRY_SETTINGS@@A+48, 512 ; 00000200H
$L82269:

; 932  : 
; 933  : 					SetGamma(RegistrySettings.Brightness, RegistrySettings.Contrast);

	mov	eax, DWORD PTR ?RegistrySettings@@3UREGISTRY_SETTINGS@@A+52
	push	eax
	mov	ecx, DWORD PTR ?RegistrySettings@@3UREGISTRY_SETTINGS@@A+48
	push	ecx
	call	?SetGamma@@YAXJJ@Z			; SetGamma
	add	esp, 8
$L82263:

; 934  : 				}
; 935  : 				wsprintf(buf, "%d", RegistrySettings.Brightness * 100 / 512);

	mov	eax, DWORD PTR ?RegistrySettings@@3UREGISTRY_SETTINGS@@A+48
	imul	eax, 100				; 00000064H
	shr	eax, 9
	push	eax
	push	OFFSET FLAT:??_C@_02DPKJAMEF@?$CFd?$AA@
	lea	ecx, DWORD PTR _buf$[ebp]
	push	ecx
	call	DWORD PTR __imp__wsprintfA
	add	esp, 12					; 0000000cH

; 936  : 				text = buf;

	lea	eax, DWORD PTR _buf$[ebp]
	mov	DWORD PTR _text$[ebp], eax
$L82259:

; 937  : 			}
; 938  : 			DumpText(224 + strlen(MainMenuText[i]) * 12, line * 16, 12, 16, col, text);

	mov	eax, DWORD PTR _text$[ebp]
	push	eax
	mov	ecx, DWORD PTR _col$[ebp]
	push	ecx
	push	16					; 00000010H
	push	12					; 0000000cH
	movsx	edx, WORD PTR _line$[ebp]
	shl	edx, 4
	push	edx
	movsx	eax, WORD PTR _i$[ebp]
	mov	ecx, DWORD PTR ?MainMenuText@@3PAPADA[eax*4]
	push	ecx
	call	_strlen
	add	esp, 4
	imul	eax, 12					; 0000000cH
	add	eax, 224				; 000000e0H
	push	eax
	call	?DumpText@@YAXFFFFJPAD@Z		; DumpText
	add	esp, 24					; 00000018H
$L82256:

; 939  : 		}
; 940  : 
; 941  : 		if (i == MAIN_MENU_CONTRAST)

	movsx	eax, WORD PTR _i$[ebp]
	cmp	eax, 13					; 0000000dH
	jne	$L82270

; 942  : 		{
; 943  : 			if (GammaFlag == GAMMA_UNAVAILABLE)

	cmp	DWORD PTR ?GammaFlag@@3JA, 0		; GammaFlag
	jne	SHORT $L82271

; 944  : 			{
; 945  : 				text = "Unavailable";

	mov	DWORD PTR _text$[ebp], OFFSET FLAT:??_C@_0M@IOKPNGEC@Unavailable?$AA@

; 946  : 			}
; 947  : 			else if (GammaFlag == GAMMA_AUTO)

	jmp	$L82272
$L82271:
	cmp	DWORD PTR ?GammaFlag@@3JA, 2		; GammaFlag
	jne	SHORT $L82273

; 948  : 			{
; 949  : 				text = "Auto";

	mov	DWORD PTR _text$[ebp], OFFSET FLAT:??_C@_04LBDCJOFB@Auto?$AA@

; 950  : 			}
; 951  : 			else

	jmp	$L82272
$L82273:

; 952  : 			{
; 953  : 				if (MenuCount == i)

	movsx	eax, WORD PTR ?MenuCount@@3FA		; MenuCount
	movsx	ecx, WORD PTR _i$[ebp]
	cmp	eax, ecx
	jne	$L82275

; 954  : 				{
; 955  : 					if (Keys[DIK_LEFT]) RegistrySettings.Contrast -= (long)(TimeStep * 100.0f);

	movsx	eax, BYTE PTR ?Keys@@3PADA+203
	test	eax, eax
	je	SHORT $L82276
	fld	DWORD PTR ?TimeStep@@3MA		; TimeStep
	fmul	DWORD PTR __real@42c80000
	call	__ftol2
	mov	ecx, DWORD PTR ?RegistrySettings@@3UREGISTRY_SETTINGS@@A+52
	sub	ecx, eax
	mov	DWORD PTR ?RegistrySettings@@3UREGISTRY_SETTINGS@@A+52, ecx
$L82276:

; 956  : 					if (Keys[DIK_RIGHT]) RegistrySettings.Contrast += (long)(TimeStep * 100.0f);

	movsx	eax, BYTE PTR ?Keys@@3PADA+205
	test	eax, eax
	je	SHORT $L82278
	fld	DWORD PTR ?TimeStep@@3MA		; TimeStep
	fmul	DWORD PTR __real@42c80000
	call	__ftol2
	add	eax, DWORD PTR ?RegistrySettings@@3UREGISTRY_SETTINGS@@A+52
	mov	DWORD PTR ?RegistrySettings@@3UREGISTRY_SETTINGS@@A+52, eax
$L82278:

; 957  : 
; 958  : 					if (RegistrySettings.Contrast & 0x80000000) RegistrySettings.Contrast = 0;

	mov	eax, DWORD PTR ?RegistrySettings@@3UREGISTRY_SETTINGS@@A+52
	and	eax, -2147483648			; 80000000H
	je	SHORT $L82280
	mov	DWORD PTR ?RegistrySettings@@3UREGISTRY_SETTINGS@@A+52, 0
$L82280:

; 959  : 					if (RegistrySettings.Contrast > 512) RegistrySettings.Contrast = 512;

	cmp	DWORD PTR ?RegistrySettings@@3UREGISTRY_SETTINGS@@A+52, 512 ; 00000200H
	jbe	SHORT $L82281
	mov	DWORD PTR ?RegistrySettings@@3UREGISTRY_SETTINGS@@A+52, 512 ; 00000200H
$L82281:

; 960  : 
; 961  : 					SetGamma(RegistrySettings.Brightness, RegistrySettings.Contrast);

	mov	eax, DWORD PTR ?RegistrySettings@@3UREGISTRY_SETTINGS@@A+52
	push	eax
	mov	ecx, DWORD PTR ?RegistrySettings@@3UREGISTRY_SETTINGS@@A+48
	push	ecx
	call	?SetGamma@@YAXJJ@Z			; SetGamma
	add	esp, 8
$L82275:

; 962  : 				}
; 963  : 				wsprintf(buf, "%d", RegistrySettings.Contrast * 100 / 512);

	mov	eax, DWORD PTR ?RegistrySettings@@3UREGISTRY_SETTINGS@@A+52
	imul	eax, 100				; 00000064H
	shr	eax, 9
	push	eax
	push	OFFSET FLAT:??_C@_02DPKJAMEF@?$CFd?$AA@
	lea	ecx, DWORD PTR _buf$[ebp]
	push	ecx
	call	DWORD PTR __imp__wsprintfA
	add	esp, 12					; 0000000cH

; 964  : 				text = buf;

	lea	eax, DWORD PTR _buf$[ebp]
	mov	DWORD PTR _text$[ebp], eax
$L82272:

; 965  : 			}
; 966  : 			DumpText(224 + strlen(MainMenuText[i]) * 12, line * 16, 12, 16, col, text);

	mov	eax, DWORD PTR _text$[ebp]
	push	eax
	mov	ecx, DWORD PTR _col$[ebp]
	push	ecx
	push	16					; 00000010H
	push	12					; 0000000cH
	movsx	edx, WORD PTR _line$[ebp]
	shl	edx, 4
	push	edx
	movsx	eax, WORD PTR _i$[ebp]
	mov	ecx, DWORD PTR ?MainMenuText@@3PAPADA[eax*4]
	push	ecx
	call	_strlen
	add	esp, 4
	imul	eax, 12					; 0000000cH
	add	eax, 224				; 000000e0H
	push	eax
	call	?DumpText@@YAXFFFFJPAD@Z		; DumpText
	add	esp, 24					; 00000018H
$L82270:

; 967  : 		}
; 968  : 
; 969  : 		if (i == MAIN_MENU_REVERSED)

	movsx	eax, WORD PTR _i$[ebp]
	cmp	eax, 14					; 0000000eH
	jne	$L82282

; 970  : 		{
; 971  : 			if (MenuCount == i)

	movsx	eax, WORD PTR ?MenuCount@@3FA		; MenuCount
	movsx	ecx, WORD PTR _i$[ebp]
	cmp	eax, ecx
	jne	SHORT $L82283

; 972  : 			{
; 973  : 				if (Keys[DIK_LEFT] && !LastKeys[DIK_LEFT]) GameSettings.Reversed = FALSE;

	movsx	eax, BYTE PTR ?Keys@@3PADA+203
	test	eax, eax
	je	SHORT $L82284
	movsx	eax, BYTE PTR ?LastKeys@@3PADA+203
	test	eax, eax
	jne	SHORT $L82284
	mov	DWORD PTR ?GameSettings@@3UGAME_SETTINGS@@A+12, 0
$L82284:

; 974  : 				if (Keys[DIK_RIGHT] && !LastKeys[DIK_RIGHT]) GameSettings.Reversed = TRUE;

	movsx	eax, BYTE PTR ?Keys@@3PADA+205
	test	eax, eax
	je	SHORT $L82283
	movsx	eax, BYTE PTR ?LastKeys@@3PADA+205
	test	eax, eax
	jne	SHORT $L82283
	mov	DWORD PTR ?GameSettings@@3UGAME_SETTINGS@@A+12, 1
$L82283:

; 975  : 			}
; 976  : 			DumpText(224 + strlen(MainMenuText[i]) * 12, line * 16, 12, 16, col, NoYesText[GameSettings.Reversed]);

	mov	eax, DWORD PTR ?GameSettings@@3UGAME_SETTINGS@@A+12
	mov	ecx, DWORD PTR ?NoYesText@@3PAPADA[eax*4]
	push	ecx
	mov	edx, DWORD PTR _col$[ebp]
	push	edx
	push	16					; 00000010H
	push	12					; 0000000cH
	movsx	eax, WORD PTR _line$[ebp]
	shl	eax, 4
	push	eax
	movsx	ecx, WORD PTR _i$[ebp]
	mov	edx, DWORD PTR ?MainMenuText@@3PAPADA[ecx*4]
	push	edx
	call	_strlen
	add	esp, 4
	imul	eax, 12					; 0000000cH
	add	eax, 224				; 000000e0H
	push	eax
	call	?DumpText@@YAXFFFFJPAD@Z		; DumpText
	add	esp, 24					; 00000018H
$L82282:

; 977  : 		}
; 978  : 
; 979  : 		if (i == MAIN_MENU_MIRRORED)

	movsx	eax, WORD PTR _i$[ebp]
	cmp	eax, 15					; 0000000fH
	jne	$L82286

; 980  : 		{
; 981  : 			if (MenuCount == i)

	movsx	eax, WORD PTR ?MenuCount@@3FA		; MenuCount
	movsx	ecx, WORD PTR _i$[ebp]
	cmp	eax, ecx
	jne	SHORT $L82287

; 982  : 			{
; 983  : 				if (Keys[DIK_LEFT] && !LastKeys[DIK_LEFT]) GameSettings.Mirrored = FALSE;

	movsx	eax, BYTE PTR ?Keys@@3PADA+203
	test	eax, eax
	je	SHORT $L82288
	movsx	eax, BYTE PTR ?LastKeys@@3PADA+203
	test	eax, eax
	jne	SHORT $L82288
	mov	DWORD PTR ?GameSettings@@3UGAME_SETTINGS@@A+16, 0
$L82288:

; 984  : 				if (Keys[DIK_RIGHT] && !LastKeys[DIK_RIGHT]) GameSettings.Mirrored = TRUE;

	movsx	eax, BYTE PTR ?Keys@@3PADA+205
	test	eax, eax
	je	SHORT $L82287
	movsx	eax, BYTE PTR ?LastKeys@@3PADA+205
	test	eax, eax
	jne	SHORT $L82287
	mov	DWORD PTR ?GameSettings@@3UGAME_SETTINGS@@A+16, 1
$L82287:

; 985  : 			}
; 986  : 			DumpText(224 + strlen(MainMenuText[i]) * 12, line * 16, 12, 16, col, NoYesText[GameSettings.Mirrored]);

	mov	eax, DWORD PTR ?GameSettings@@3UGAME_SETTINGS@@A+16
	mov	ecx, DWORD PTR ?NoYesText@@3PAPADA[eax*4]
	push	ecx
	mov	edx, DWORD PTR _col$[ebp]
	push	edx
	push	16					; 00000010H
	push	12					; 0000000cH
	movsx	eax, WORD PTR _line$[ebp]
	shl	eax, 4
	push	eax
	movsx	ecx, WORD PTR _i$[ebp]
	mov	edx, DWORD PTR ?MainMenuText@@3PAPADA[ecx*4]
	push	edx
	call	_strlen
	add	esp, 4
	imul	eax, 12					; 0000000cH
	add	eax, 224				; 000000e0H
	push	eax
	call	?DumpText@@YAXFFFFJPAD@Z		; DumpText
	add	esp, 24					; 00000018H
$L82286:

; 987  : 		}
; 988  : 
; 989  : 	line += 1 + (!Everything);

	movsx	eax, BYTE PTR ?Everything@@3DA		; Everything
	neg	eax
	sbb	eax, eax
	inc	eax
	movsx	ecx, WORD PTR _line$[ebp]
	lea	edx, DWORD PTR [ecx+eax+1]
	mov	WORD PTR _line$[ebp], dx
$L82200:

; 990  : 	}
; 991  : 
; 992  : 	D3Ddevice->EndScene();

	jmp	$L82198
$L82199:
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	edx
	call	DWORD PTR [ecx+40]

; 993  : 
; 994  : // selected?
; 995  : 
; 996  : 	if (Keys[DIK_RETURN] && !LastKeys[DIK_RETURN] && (MainMenuAllowed[MenuCount] || Everything))

	movsx	eax, BYTE PTR ?Keys@@3PADA+28
	test	eax, eax
	je	$L82290
	movsx	eax, BYTE PTR ?LastKeys@@3PADA+28
	test	eax, eax
	jne	$L82290
	movsx	eax, WORD PTR ?MenuCount@@3FA		; MenuCount
	movsx	ecx, BYTE PTR ?MainMenuAllowed@@3PADA[eax]
	test	ecx, ecx
	jne	SHORT $L82291
	movsx	eax, BYTE PTR ?Everything@@3DA		; Everything
	test	eax, eax
	je	$L82290
$L82291:

; 997  : 	{
; 998  : 		AI_Testing = FALSE;

	mov	DWORD PTR ?AI_Testing@@3JA, 0		; AI_Testing

; 999  : 
; 1000 : 		if (MenuCount == MAIN_MENU_SINGLE)

	movsx	eax, WORD PTR ?MenuCount@@3FA		; MenuCount
	test	eax, eax
	jne	SHORT $L82292

; 1001 : 		{
; 1002 : 			GameSettings.GameType = GAMETYPE_TRIAL;

	mov	DWORD PTR ?GameSettings@@3UGAME_SETTINGS@@A, 0

; 1003 : 			Event = SetupGame;

	mov	DWORD PTR ?Event@@3P6AXXZA, OFFSET FLAT:?SetupGame@@YAXXZ ; Event, SetupGame
$L82292:

; 1004 : 		}
; 1005 : 
; 1006 : 		if (MenuCount == MAIN_MENU_AI_TEST)

	movsx	eax, WORD PTR ?MenuCount@@3FA		; MenuCount
	cmp	eax, 1
	jne	SHORT $L82293

; 1007 : 		{
; 1008 : 			AI_Testing = TRUE;

	mov	DWORD PTR ?AI_Testing@@3JA, 1		; AI_Testing

; 1009 : 			GameSettings.GameType = GAMETYPE_SINGLE;

	mov	DWORD PTR ?GameSettings@@3UGAME_SETTINGS@@A, 1

; 1010 : 			Event = SetupGame;

	mov	DWORD PTR ?Event@@3P6AXXZA, OFFSET FLAT:?SetupGame@@YAXXZ ; Event, SetupGame
$L82293:

; 1011 : 		}
; 1012 : 
; 1013 : 		if (MenuCount == MAIN_MENU_MULTI)

	movsx	eax, WORD PTR ?MenuCount@@3FA		; MenuCount
	cmp	eax, 2
	jne	SHORT $L82294

; 1014 : 		{
; 1015 : 			GameSettings.GameType = GAMETYPE_SERVER;

	mov	DWORD PTR ?GameSettings@@3UGAME_SETTINGS@@A, 2

; 1016 : 			MenuCount = 0;

	mov	WORD PTR ?MenuCount@@3FA, 0		; MenuCount

; 1017 : 			KillPlay();

	call	?KillPlay@@YAXXZ			; KillPlay

; 1018 : 			InitPlay();

	call	?InitPlay@@YA_NXZ			; InitPlay

; 1019 : 			Event = ConnectionMenu;

	mov	DWORD PTR ?Event@@3P6AXXZA, OFFSET FLAT:?ConnectionMenu@@YAXXZ ; Event, ConnectionMenu
$L82294:

; 1020 : 		}
; 1021 : 
; 1022 : 		if (MenuCount == MAIN_MENU_JOIN)

	movsx	eax, WORD PTR ?MenuCount@@3FA		; MenuCount
	cmp	eax, 3
	jne	SHORT $L82295

; 1023 : 		{
; 1024 : 			GameSettings.GameType = GAMETYPE_CLIENT;

	mov	DWORD PTR ?GameSettings@@3UGAME_SETTINGS@@A, 3

; 1025 : 			MenuCount = 0;

	mov	WORD PTR ?MenuCount@@3FA, 0		; MenuCount

; 1026 : 			KillPlay();

	call	?KillPlay@@YAXXZ			; KillPlay

; 1027 : 			InitPlay();

	call	?InitPlay@@YA_NXZ			; InitPlay

; 1028 : 			Event = ConnectionMenu;

	mov	DWORD PTR ?Event@@3P6AXXZA, OFFSET FLAT:?ConnectionMenu@@YAXXZ ; Event, ConnectionMenu
$L82295:

; 1029 : 		}
; 1030 : 
; 1031 : 		if (MenuCount == MAIN_MENU_NEW_TITLE_SCREEN)

	movsx	eax, WORD PTR ?MenuCount@@3FA		; MenuCount
	cmp	eax, 16					; 00000010H
	jne	SHORT $L82290

; 1032 : 		{
; 1033 : 			Event = GoTitleScreen;

	mov	DWORD PTR ?Event@@3P6AXXZA, OFFSET FLAT:?GoTitleScreen@@YAXXZ ; Event, GoTitleScreen
$L82290:

; 1034 : 		}
; 1035 : 	}
; 1036 : 
; 1037 : // quit?
; 1038 : 
; 1039 : 	if (Keys[DIK_ESCAPE] && !LastKeys[DIK_ESCAPE])

	movsx	eax, BYTE PTR ?Keys@@3PADA+1
	test	eax, eax
	je	SHORT $L82175
	movsx	eax, BYTE PTR ?LastKeys@@3PADA+1
	test	eax, eax
	jne	SHORT $L82175

; 1040 : 		QuitGame = TRUE;

	mov	BYTE PTR ?QuitGame@@3DA, 1		; QuitGame
$L82175:

; 1041 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?MainMenu@@YAXXZ ENDP					; MainMenu
_TEXT	ENDS
PUBLIC	?ShowPhysicsInfo@@YAXXZ				; ShowPhysicsInfo
PUBLIC	?sqrt@@YAMM@Z					; sqrt
PUBLIC	??_C@_0BB@OCNIMBLA@Jitter?3?5On?5?5?5?$CF1d?$AA@ ; `string'
PUBLIC	??_C@_0DF@PJJJGDHG@Engine?3?5?$CF3d?5?5?5Steer?3?5?$CF3d?5?5?5Revs?3@ ; `string'
PUBLIC	??_C@_0BE@BIHFBFGO@TimeStep?3?5?$CF4d?5?$CI?$CF2d?$CJ?$AA@ ; `string'
PUBLIC	??_C@_0BH@INBNOHCJ@Ghost?5frame?3?5?$CF8d?5?1?5?$CF8d?$AA@ ; `string'
PUBLIC	??_C@_0CN@HFMDKHFN@NBodyCols?3?5?$CF3d?5?$CI?$CF3d?$CJ?5?5NWheelColl@ ; `string'
PUBLIC	??_C@_0DF@HIDMANJA@Pos?3?5?$CF5d?5?$CF5d?5?$CF5d?5?5Vel?3?5?$CF5d?5?$CF5d?5?$CF@ ; `string'
PUBLIC	??_C@_0BI@NINGHPCH@Grid?3?5?$CF5ld?5?$CI?$CF5ld?5Polys?$CJ?$AA@ ; `string'
PUBLIC	??_C@_06COEEAHF@Its?5?$CFd?$AA@			; `string'
PUBLIC	??_C@_0BA@DCNKNBKE@?$CF6d?5?$CF6d?5?$CF6d?5?$CF6d?$AA@ ; `string'
PUBLIC	??_C@_0CD@HAMFNMJO@imp?3?5?$CF6d?5?$CF6d?5?$CF6d?5?5ang?3?5?$CF6d?5?$CF6d?5?$CF@ ; `string'
PUBLIC	??_C@_0BI@IJHOFINA@SFric?3?5?$CF3d?5?5?5KFric?3?5?$CF3d?$AA@ ; `string'
PUBLIC	??_C@_0BM@IFNIOEMO@Wheels?3?5Pos?5?$CF4d?5?$CF4d?5?$CF4d?5?$CF4d?$AA@ ; `string'
PUBLIC	??_C@_0CN@DBMBENAN@?5?5?5?5?5?5?5?5Vel?5?$CF4d?5?$CF4d?5?$CF4d?5?$CF4d?0?5?$CF4d@ ; `string'
PUBLIC	??_C@_0ED@BGLCEDDD@?5?5?5?5?5?5?5?5Frc?5?$CF3d?1?$CF3d?$CI?$CF3d?$CJ?5?5?$CF3d?1?$CF3@ ; `string'
PUBLIC	??_C@_0CP@OCDCOKHJ@?5?5?5?5?5?5?5?5C?1S?5?$CF1d?1?$CF1d?5?5?$CF1d?1?$CF1d?5?5?$CF1@ ; `string'
PUBLIC	??_C@_0BJ@EMGMHDGM@Sparks?3?5?$CF5d?5?5Trails?3?5?$CF5d?$AA@ ; `string'
PUBLIC	??_C@_0BB@PILJGEIA@Ghost?3?5?$CF8d?5?$CI?$CF8d?$CJ?$AA@ ; `string'
PUBLIC	??_C@_03HDHPKHFC@No?5?$AA@			; `string'
PUBLIC	??_C@_0BJ@NDHMDNAL@Converged?3?5?$CFs?5?5?5Res?5?$DN?5?$CFd?$AA@ ; `string'
PUBLIC	??_C@_0CB@EFNHFLME@Max?5Imp?3?5?$CF9d?5?5?5?5Max?5Ang?5Imp?3?5?$CF9d@ ; `string'
PUBLIC	__real@461c4000
PUBLIC	__real@447a0000
PUBLIC	__real@49742400
EXTRN	?DEBUG_CollGrid@@3JA:DWORD			; DEBUG_CollGrid
EXTRN	?DEBUG_Impulse@@3UVectorStruct@@A:BYTE		; DEBUG_Impulse
EXTRN	?DEBUG_AngImpulse@@3UVectorStruct@@A:BYTE	; DEBUG_AngImpulse
EXTRN	?DEBUG_MaxImpulseMag@@3MA:DWORD			; DEBUG_MaxImpulseMag
EXTRN	?DEBUG_MaxAngImpulseMag@@3MA:DWORD		; DEBUG_MaxAngImpulseMag
EXTRN	?GhostInfo@@3PAUGhostInfoStruct@@A:DWORD	; GhostInfo
EXTRN	?DEBUG_NIts@@3HA:DWORD				; DEBUG_NIts
EXTRN	?DEBUG_Converged@@3_NA:BYTE			; DEBUG_Converged
EXTRN	?DEBUG_Res@@3MA:DWORD				; DEBUG_Res
EXTRN	?PLR_LocalPlayer@@3PAUPlayerStruct@@A:DWORD	; PLR_LocalPlayer
EXTRN	?NPhysicsLoops@@3HA:DWORD			; NPhysicsLoops
EXTRN	?GHO_BestGhostInfo@@3PAUGhostInfoStruct@@A:DWORD ; GHO_BestGhostInfo
EXTRN	?GHO_BestFrame@@3JA:DWORD			; GHO_BestFrame
EXTRN	?COL_CollGrid@@3PAUCOLLGRID@@A:DWORD		; COL_CollGrid
EXTRN	?COL_NWheelColls@@3HA:DWORD			; COL_NWheelColls
EXTRN	?COL_NWheelDone@@3HA:DWORD			; COL_NWheelDone
EXTRN	?COL_NBodyColls@@3HA:DWORD			; COL_NBodyColls
EXTRN	?COL_NBodyDone@@3HA:DWORD			; COL_NBodyDone
EXTRN	?NActiveSparks@@3HA:DWORD			; NActiveSparks
EXTRN	?NActiveTrails@@3HA:DWORD			; NActiveTrails
;	COMDAT ??_C@_0BB@OCNIMBLA@Jitter?3?5On?5?5?5?$CF1d?$AA@
CONST	SEGMENT
??_C@_0BB@OCNIMBLA@Jitter?3?5On?5?5?5?$CF1d?$AA@ DB 'Jitter: On   %1d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DF@PJJJGDHG@Engine?3?5?$CF3d?5?5?5Steer?3?5?$CF3d?5?5?5Revs?3@
CONST	SEGMENT
??_C@_0DF@PJJJGDHG@Engine?3?5?$CF3d?5?5?5Steer?3?5?$CF3d?5?5?5Revs?3@ DB 'E'
	DB	'ngine: %3d   Steer: %3d   Revs: %5d   AutoBrake: %s', 00H ; `string'
CONST	ENDS
;	COMDAT __real@461c4000
CONST	SEGMENT
__real@461c4000 DD 0461c4000r			; 10000
CONST	ENDS
;	COMDAT ??_C@_0BE@BIHFBFGO@TimeStep?3?5?$CF4d?5?$CI?$CF2d?$CJ?$AA@
CONST	SEGMENT
??_C@_0BE@BIHFBFGO@TimeStep?3?5?$CF4d?5?$CI?$CF2d?$CJ?$AA@ DB 'TimeStep: '
	DB	'%4d (%2d)', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@INBNOHCJ@Ghost?5frame?3?5?$CF8d?5?1?5?$CF8d?$AA@
CONST	SEGMENT
??_C@_0BH@INBNOHCJ@Ghost?5frame?3?5?$CF8d?5?1?5?$CF8d?$AA@ DB 'Ghost fram'
	DB	'e: %8d / %8d', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@HFMDKHFN@NBodyCols?3?5?$CF3d?5?$CI?$CF3d?$CJ?5?5NWheelColl@
CONST	SEGMENT
??_C@_0CN@HFMDKHFN@NBodyCols?3?5?$CF3d?5?$CI?$CF3d?$CJ?5?5NWheelColl@ DB 'N'
	DB	'BodyCols: %3d (%3d)  NWheelColls: %3d (%3d)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DF@HIDMANJA@Pos?3?5?$CF5d?5?$CF5d?5?$CF5d?5?5Vel?3?5?$CF5d?5?$CF5d?5?$CF@
CONST	SEGMENT
??_C@_0DF@HIDMANJA@Pos?3?5?$CF5d?5?$CF5d?5?$CF5d?5?5Vel?3?5?$CF5d?5?$CF5d?5?$CF@ DB 'P'
	DB	'os: %5d %5d %5d  Vel: %5d %5d %5d  Ang: %5d %5d %5d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@NINGHPCH@Grid?3?5?$CF5ld?5?$CI?$CF5ld?5Polys?$CJ?$AA@
CONST	SEGMENT
??_C@_0BI@NINGHPCH@Grid?3?5?$CF5ld?5?$CI?$CF5ld?5Polys?$CJ?$AA@ DB 'Grid:'
	DB	' %5ld (%5ld Polys)', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06COEEAHF@Its?5?$CFd?$AA@
CONST	SEGMENT
??_C@_06COEEAHF@Its?5?$CFd?$AA@ DB 'Its %d', 00H	; `string'
CONST	ENDS
;	COMDAT __real@447a0000
CONST	SEGMENT
__real@447a0000 DD 0447a0000r			; 1000
CONST	ENDS
;	COMDAT ??_C@_0BA@DCNKNBKE@?$CF6d?5?$CF6d?5?$CF6d?5?$CF6d?$AA@
CONST	SEGMENT
??_C@_0BA@DCNKNBKE@?$CF6d?5?$CF6d?5?$CF6d?5?$CF6d?$AA@ DB '%6d %6d %6d %6'
	DB	'd', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@HAMFNMJO@imp?3?5?$CF6d?5?$CF6d?5?$CF6d?5?5ang?3?5?$CF6d?5?$CF6d?5?$CF@
CONST	SEGMENT
??_C@_0CD@HAMFNMJO@imp?3?5?$CF6d?5?$CF6d?5?$CF6d?5?5ang?3?5?$CF6d?5?$CF6d?5?$CF@ DB 'i'
	DB	'mp: %6d %6d %6d  ang: %6d %6d %6d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@IJHOFINA@SFric?3?5?$CF3d?5?5?5KFric?3?5?$CF3d?$AA@
CONST	SEGMENT
??_C@_0BI@IJHOFINA@SFric?3?5?$CF3d?5?5?5KFric?3?5?$CF3d?$AA@ DB 'SFric: %'
	DB	'3d   KFric: %3d', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@IFNIOEMO@Wheels?3?5Pos?5?$CF4d?5?$CF4d?5?$CF4d?5?$CF4d?$AA@
CONST	SEGMENT
??_C@_0BM@IFNIOEMO@Wheels?3?5Pos?5?$CF4d?5?$CF4d?5?$CF4d?5?$CF4d?$AA@ DB 'W'
	DB	'heels: Pos %4d %4d %4d %4d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@DBMBENAN@?5?5?5?5?5?5?5?5Vel?5?$CF4d?5?$CF4d?5?$CF4d?5?$CF4d?0?5?$CF4d@
CONST	SEGMENT
??_C@_0CN@DBMBENAN@?5?5?5?5?5?5?5?5Vel?5?$CF4d?5?$CF4d?5?$CF4d?5?$CF4d?0?5?$CF4d@ DB ' '
	DB	'       Vel %4d %4d %4d %4d, %4d %4d %4d %4d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0ED@BGLCEDDD@?5?5?5?5?5?5?5?5Frc?5?$CF3d?1?$CF3d?$CI?$CF3d?$CJ?5?5?$CF3d?1?$CF3@
CONST	SEGMENT
??_C@_0ED@BGLCEDDD@?5?5?5?5?5?5?5?5Frc?5?$CF3d?1?$CF3d?$CI?$CF3d?$CJ?5?5?$CF3d?1?$CF3@ DB ' '
	DB	'       Frc %3d/%3d(%3d)  %3d/%3d(%3d)  %3d/%3d(%3d)  %3d/%3d('
	DB	'%3d)', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CP@OCDCOKHJ@?5?5?5?5?5?5?5?5C?1S?5?$CF1d?1?$CF1d?5?5?$CF1d?1?$CF1d?5?5?$CF1@
CONST	SEGMENT
??_C@_0CP@OCDCOKHJ@?5?5?5?5?5?5?5?5C?1S?5?$CF1d?1?$CF1d?5?5?$CF1d?1?$CF1d?5?5?$CF1@ DB ' '
	DB	'       C/S %1d/%1d  %1d/%1d  %1d/%1d  %1d/%1d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@EMGMHDGM@Sparks?3?5?$CF5d?5?5Trails?3?5?$CF5d?$AA@
CONST	SEGMENT
??_C@_0BJ@EMGMHDGM@Sparks?3?5?$CF5d?5?5Trails?3?5?$CF5d?$AA@ DB 'Sparks: '
	DB	'%5d  Trails: %5d', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@PILJGEIA@Ghost?3?5?$CF8d?5?$CI?$CF8d?$CJ?$AA@
CONST	SEGMENT
??_C@_0BB@PILJGEIA@Ghost?3?5?$CF8d?5?$CI?$CF8d?$CJ?$AA@ DB 'Ghost: %8d (%'
	DB	'8d)', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_03HDHPKHFC@No?5?$AA@
CONST	SEGMENT
??_C@_03HDHPKHFC@No?5?$AA@ DB 'No ', 00H		; `string'
CONST	ENDS
;	COMDAT __real@49742400
CONST	SEGMENT
__real@49742400 DD 049742400r			; 1e+006
CONST	ENDS
;	COMDAT ??_C@_0BJ@NDHMDNAL@Converged?3?5?$CFs?5?5?5Res?5?$DN?5?$CFd?$AA@
CONST	SEGMENT
??_C@_0BJ@NDHMDNAL@Converged?3?5?$CFs?5?5?5Res?5?$DN?5?$CFd?$AA@ DB 'Conv'
	DB	'erged: %s   Res = %d', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@EFNHFLME@Max?5Imp?3?5?$CF9d?5?5?5?5Max?5Ang?5Imp?3?5?$CF9d@
CONST	SEGMENT
??_C@_0CB@EFNHFLME@Max?5Imp?3?5?$CF9d?5?5?5?5Max?5Ang?5Imp?3?5?$CF9d@ DB 'M'
	DB	'ax Imp: %9d    Max Ang Imp: %9d', 00H	; `string'
; Function compile flags: /Odt /ZI
CONST	ENDS
;	COMDAT ?ShowPhysicsInfo@@YAXXZ
_TEXT	SEGMENT
tv954 = -324						; size = 4
tv79 = -324						; size = 4
_buf$ = -256						; size = 256
?ShowPhysicsInfo@@YAXXZ PROC NEAR			; ShowPhysicsInfo, COMDAT

; 1065 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 324				; 00000144H
	push	ebx
	push	esi
	push	edi

; 1066 : 	char buf[256];
; 1067 : 
; 1068 : 	// Defines
; 1069 : #if REMOVE_JITTER
; 1070 : 	wsprintf(buf, "Jitter: On   %1d", PLR_LocalPlayer->car.Body->IsJittering);

	mov	eax, DWORD PTR ?PLR_LocalPlayer@@3PAUPlayerStruct@@A ; PLR_LocalPlayer
	mov	ecx, DWORD PTR [eax+900]
	movzx	edx, BYTE PTR [ecx+492]
	push	edx
	push	OFFSET FLAT:??_C@_0BB@OCNIMBLA@Jitter?3?5On?5?5?5?$CF1d?$AA@
	lea	eax, DWORD PTR _buf$[ebp]
	push	eax
	call	DWORD PTR __imp__wsprintfA
	add	esp, 12					; 0000000cH

; 1071 : #else 
; 1072 : 	wsprintf(buf, "Jitter: Off");
; 1073 : #endif
; 1074 : 	DumpText(0, 40, 6, 12, 0xffffff, buf);

	lea	eax, DWORD PTR _buf$[ebp]
	push	eax
	push	16777215				; 00ffffffH
	push	12					; 0000000cH
	push	6
	push	40					; 00000028H
	push	0
	call	?DumpText@@YAXFFFFJPAD@Z		; DumpText
	add	esp, 24					; 00000018H

; 1075 : 
; 1076 : 	// Engine voltage and steering angle + autobraking
; 1077 : 	wsprintf(buf, "Engine: %3d   Steer: %3d   Revs: %5d   AutoBrake: %s", 
; 1078 : 		(int) (100.0f * PLR_LocalPlayer->car.EngineVolt),
; 1079 : 		(int) (100.0f * PLR_LocalPlayer->car.SteerAngle),
; 1080 : 		(int) (100.0f * PLR_LocalPlayer->car.Revs),
; 1081 : 		(GameSettings.AutoBrake)? "On": "Off");

	cmp	DWORD PTR ?GameSettings@@3UGAME_SETTINGS@@A+20, 0
	je	SHORT $L82628
	mov	DWORD PTR tv79[ebp], OFFSET FLAT:??_C@_02IAAGKKDJ@On?$AA@
	jmp	SHORT $L82629
$L82628:
	mov	DWORD PTR tv79[ebp], OFFSET FLAT:??_C@_03GCDBBDDL@Off?$AA@
$L82629:
	mov	eax, DWORD PTR tv79[ebp]
	push	eax
	mov	ecx, DWORD PTR ?PLR_LocalPlayer@@3PAUPlayerStruct@@A ; PLR_LocalPlayer
	fld	DWORD PTR __real@42c80000
	fmul	DWORD PTR [ecx+3548]
	call	__ftol2
	push	eax
	mov	edx, DWORD PTR ?PLR_LocalPlayer@@3PAUPlayerStruct@@A ; PLR_LocalPlayer
	fld	DWORD PTR __real@42c80000
	fmul	DWORD PTR [edx+868]
	call	__ftol2
	push	eax
	mov	eax, DWORD PTR ?PLR_LocalPlayer@@3PAUPlayerStruct@@A ; PLR_LocalPlayer
	fld	DWORD PTR __real@42c80000
	fmul	DWORD PTR [eax+880]
	call	__ftol2
	push	eax
	push	OFFSET FLAT:??_C@_0DF@PJJJGDHG@Engine?3?5?$CF3d?5?5?5Steer?3?5?$CF3d?5?5?5Revs?3@
	lea	ecx, DWORD PTR _buf$[ebp]
	push	ecx
	call	DWORD PTR __imp__wsprintfA
	add	esp, 24					; 00000018H

; 1082 : 	DumpText(100, 40, 8, 16, 0xffffff, buf);

	lea	eax, DWORD PTR _buf$[ebp]
	push	eax
	push	16777215				; 00ffffffH
	push	16					; 00000010H
	push	8
	push	40					; 00000028H
	push	100					; 00000064H
	call	?DumpText@@YAXFFFFJPAD@Z		; DumpText
	add	esp, 24					; 00000018H

; 1083 : 
; 1084 : 	// TimeStep
; 1085 : 	wsprintf(buf, "TimeStep: %4d (%2d)", (int)(10000.0f * TimeStep), NPhysicsLoops);

	mov	eax, DWORD PTR ?NPhysicsLoops@@3HA	; NPhysicsLoops
	push	eax
	fld	DWORD PTR __real@461c4000
	fmul	DWORD PTR ?TimeStep@@3MA		; TimeStep
	call	__ftol2
	push	eax
	push	OFFSET FLAT:??_C@_0BE@BIHFBFGO@TimeStep?3?5?$CF4d?5?$CI?$CF2d?$CJ?$AA@
	lea	ecx, DWORD PTR _buf$[ebp]
	push	ecx
	call	DWORD PTR __imp__wsprintfA
	add	esp, 16					; 00000010H

; 1086 : 	DumpText(0, 60, 8, 16, 0xffffff, buf);

	lea	eax, DWORD PTR _buf$[ebp]
	push	eax
	push	16777215				; 00ffffffH
	push	16					; 00000010H
	push	8
	push	60					; 0000003cH
	push	0
	call	?DumpText@@YAXFFFFJPAD@Z		; DumpText
	add	esp, 24					; 00000018H

; 1087 : 
; 1088 : 	// Ghost Info
; 1089 : 	wsprintf(buf, "Ghost frame: %8d / %8d", GHO_BestFrame, GHO_BestGhostInfo->NFrames);

	mov	eax, DWORD PTR ?GHO_BestGhostInfo@@3PAUGhostInfoStruct@@A ; GHO_BestGhostInfo
	mov	ecx, DWORD PTR [eax+112]
	push	ecx
	mov	edx, DWORD PTR ?GHO_BestFrame@@3JA	; GHO_BestFrame
	push	edx
	push	OFFSET FLAT:??_C@_0BH@INBNOHCJ@Ghost?5frame?3?5?$CF8d?5?1?5?$CF8d?$AA@
	lea	eax, DWORD PTR _buf$[ebp]
	push	eax
	call	DWORD PTR __imp__wsprintfA
	add	esp, 16					; 00000010H

; 1090 : 	DumpText(200, 60, 8, 16, 0xffffff, buf);

	lea	eax, DWORD PTR _buf$[ebp]
	push	eax
	push	16777215				; 00ffffffH
	push	16					; 00000010H
	push	8
	push	60					; 0000003cH
	push	200					; 000000c8H
	call	?DumpText@@YAXFFFFJPAD@Z		; DumpText
	add	esp, 24					; 00000018H

; 1091 : 
; 1092 : 	// Number of collisions flagged
; 1093 : 	wsprintf(buf, "NBodyCols: %3d (%3d)  NWheelColls: %3d (%3d)", COL_NBodyColls - COL_NBodyDone, COL_NBodyColls, COL_NWheelColls - COL_NWheelDone, COL_NWheelColls);

	mov	eax, DWORD PTR ?COL_NWheelColls@@3HA	; COL_NWheelColls
	push	eax
	mov	ecx, DWORD PTR ?COL_NWheelColls@@3HA	; COL_NWheelColls
	sub	ecx, DWORD PTR ?COL_NWheelDone@@3HA	; COL_NWheelDone
	push	ecx
	mov	edx, DWORD PTR ?COL_NBodyColls@@3HA	; COL_NBodyColls
	push	edx
	mov	eax, DWORD PTR ?COL_NBodyColls@@3HA	; COL_NBodyColls
	sub	eax, DWORD PTR ?COL_NBodyDone@@3HA	; COL_NBodyDone
	push	eax
	push	OFFSET FLAT:??_C@_0CN@HFMDKHFN@NBodyCols?3?5?$CF3d?5?$CI?$CF3d?$CJ?5?5NWheelColl@
	lea	ecx, DWORD PTR _buf$[ebp]
	push	ecx
	call	DWORD PTR __imp__wsprintfA
	add	esp, 24					; 00000018H

; 1094 : 	DumpText(0, 80, 8, 16, 0xffffff, buf);

	lea	eax, DWORD PTR _buf$[ebp]
	push	eax
	push	16777215				; 00ffffffH
	push	16					; 00000010H
	push	8
	push	80					; 00000050H
	push	0
	call	?DumpText@@YAXFFFFJPAD@Z		; DumpText
	add	esp, 24					; 00000018H

; 1095 : 
; 1096 : 	// Pos and orientation of car
; 1097 : 	wsprintf(buf, "Pos: %5d %5d %5d  Vel: %5d %5d %5d  Ang: %5d %5d %5d", 
; 1098 : 		(int) (1.0f * PLR_LocalPlayer->car.Body->Centre.Pos.v[X]),
; 1099 : 		(int) (1.0f * PLR_LocalPlayer->car.Body->Centre.Pos.v[Y]),
; 1100 : 		(int) (1.0f * PLR_LocalPlayer->car.Body->Centre.Pos.v[Z]),
; 1101 : 		(int) (1.0f * PLR_LocalPlayer->car.Body->Centre.Vel.v[X]),
; 1102 : 		(int) (1.0f * PLR_LocalPlayer->car.Body->Centre.Vel.v[Y]),
; 1103 : 		(int) (1.0f * PLR_LocalPlayer->car.Body->Centre.Vel.v[Z]),
; 1104 : 		(int) (100.0f * PLR_LocalPlayer->car.Body->AngVel.v[X]),
; 1105 : 		(int) (100.0f * PLR_LocalPlayer->car.Body->AngVel.v[Y]),
; 1106 : 		(int) (100.0f * PLR_LocalPlayer->car.Body->AngVel.v[Z]));

	mov	eax, DWORD PTR ?PLR_LocalPlayer@@3PAUPlayerStruct@@A ; PLR_LocalPlayer
	mov	ecx, DWORD PTR [eax+900]
	fld	DWORD PTR __real@42c80000
	fmul	DWORD PTR [ecx+340]
	call	__ftol2
	push	eax
	mov	edx, DWORD PTR ?PLR_LocalPlayer@@3PAUPlayerStruct@@A ; PLR_LocalPlayer
	mov	eax, DWORD PTR [edx+900]
	fld	DWORD PTR __real@42c80000
	fmul	DWORD PTR [eax+336]
	call	__ftol2
	push	eax
	mov	ecx, DWORD PTR ?PLR_LocalPlayer@@3PAUPlayerStruct@@A ; PLR_LocalPlayer
	mov	edx, DWORD PTR [ecx+900]
	fld	DWORD PTR __real@42c80000
	fmul	DWORD PTR [edx+332]
	call	__ftol2
	push	eax
	mov	eax, DWORD PTR ?PLR_LocalPlayer@@3PAUPlayerStruct@@A ; PLR_LocalPlayer
	mov	ecx, DWORD PTR [eax+900]
	fld	DWORD PTR __real@3f800000
	fmul	DWORD PTR [ecx+40]
	call	__ftol2
	push	eax
	mov	edx, DWORD PTR ?PLR_LocalPlayer@@3PAUPlayerStruct@@A ; PLR_LocalPlayer
	mov	eax, DWORD PTR [edx+900]
	fld	DWORD PTR __real@3f800000
	fmul	DWORD PTR [eax+36]
	call	__ftol2
	push	eax
	mov	ecx, DWORD PTR ?PLR_LocalPlayer@@3PAUPlayerStruct@@A ; PLR_LocalPlayer
	mov	edx, DWORD PTR [ecx+900]
	fld	DWORD PTR __real@3f800000
	fmul	DWORD PTR [edx+32]
	call	__ftol2
	push	eax
	mov	eax, DWORD PTR ?PLR_LocalPlayer@@3PAUPlayerStruct@@A ; PLR_LocalPlayer
	mov	ecx, DWORD PTR [eax+900]
	fld	DWORD PTR __real@3f800000
	fmul	DWORD PTR [ecx+28]
	call	__ftol2
	push	eax
	mov	edx, DWORD PTR ?PLR_LocalPlayer@@3PAUPlayerStruct@@A ; PLR_LocalPlayer
	mov	eax, DWORD PTR [edx+900]
	fld	DWORD PTR __real@3f800000
	fmul	DWORD PTR [eax+24]
	call	__ftol2
	push	eax
	mov	ecx, DWORD PTR ?PLR_LocalPlayer@@3PAUPlayerStruct@@A ; PLR_LocalPlayer
	mov	edx, DWORD PTR [ecx+900]
	fld	DWORD PTR __real@3f800000
	fmul	DWORD PTR [edx+20]
	call	__ftol2
	push	eax
	push	OFFSET FLAT:??_C@_0DF@HIDMANJA@Pos?3?5?$CF5d?5?$CF5d?5?$CF5d?5?5Vel?3?5?$CF5d?5?$CF5d?5?$CF@
	lea	eax, DWORD PTR _buf$[ebp]
	push	eax
	call	DWORD PTR __imp__wsprintfA
	add	esp, 44					; 0000002cH

; 1107 : 	DumpText(0, 100, 8, 16, 0xffffff, buf);

	lea	eax, DWORD PTR _buf$[ebp]
	push	eax
	push	16777215				; 00ffffffH
	push	16					; 00000010H
	push	8
	push	100					; 00000064H
	push	0
	call	?DumpText@@YAXFFFFJPAD@Z		; DumpText
	add	esp, 24					; 00000018H

; 1108 : 	wsprintf(buf, "Grid: %5ld (%5ld Polys)", DEBUG_CollGrid, COL_CollGrid[DEBUG_CollGrid].NCollPolys);

	mov	eax, DWORD PTR ?DEBUG_CollGrid@@3JA	; DEBUG_CollGrid
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR ?COL_CollGrid@@3PAUCOLLGRID@@A ; COL_CollGrid
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, DWORD PTR ?DEBUG_CollGrid@@3JA	; DEBUG_CollGrid
	push	eax
	push	OFFSET FLAT:??_C@_0BI@NINGHPCH@Grid?3?5?$CF5ld?5?$CI?$CF5ld?5Polys?$CJ?$AA@
	lea	ecx, DWORD PTR _buf$[ebp]
	push	ecx
	call	DWORD PTR __imp__wsprintfA
	add	esp, 16					; 00000010H

; 1109 : 	DumpText(320, 120, 8, 16, 0xffffff, buf);

	lea	eax, DWORD PTR _buf$[ebp]
	push	eax
	push	16777215				; 00ffffffH
	push	16					; 00000010H
	push	8
	push	120					; 00000078H
	push	320					; 00000140H
	call	?DumpText@@YAXFFFFJPAD@Z		; DumpText
	add	esp, 24					; 00000018H

; 1110 : 
; 1111 : #if USE_DEBUG_ROUTINES
; 1112 : 	wsprintf(buf, "Its %d", DEBUG_NIts);

	mov	eax, DWORD PTR ?DEBUG_NIts@@3HA		; DEBUG_NIts
	push	eax
	push	OFFSET FLAT:??_C@_06COEEAHF@Its?5?$CFd?$AA@
	lea	ecx, DWORD PTR _buf$[ebp]
	push	ecx
	call	DWORD PTR __imp__wsprintfA
	add	esp, 12					; 0000000cH

; 1113 : 	DumpText(320, 140, 8, 16, 0xffffff, buf);

	lea	eax, DWORD PTR _buf$[ebp]
	push	eax
	push	16777215				; 00ffffffH
	push	16					; 00000010H
	push	8
	push	140					; 0000008cH
	push	320					; 00000140H
	call	?DumpText@@YAXFFFFJPAD@Z		; DumpText
	add	esp, 24					; 00000018H

; 1114 : #endif
; 1115 : 
; 1116 : 	wsprintf(buf, "%6d %6d %6d %6d", 
; 1117 : 		(int) (1000.0f * PLR_LocalPlayer->car.Body->Centre.WMatrix.m[XX]),
; 1118 : 		(int) (1000.0f * PLR_LocalPlayer->car.Body->Centre.WMatrix.m[XY]),
; 1119 : 		(int) (1000.0f * PLR_LocalPlayer->car.Body->Centre.WMatrix.m[XZ]),
; 1120 : 		(int) (1000.0f * Length(&PLR_LocalPlayer->car.Body->Centre.WMatrix.mv[R])));

	mov	eax, DWORD PTR ?PLR_LocalPlayer@@3PAUPlayerStruct@@A ; PLR_LocalPlayer
	mov	ecx, DWORD PTR [eax+900]
	mov	edx, DWORD PTR ?PLR_LocalPlayer@@3PAUPlayerStruct@@A ; PLR_LocalPlayer
	mov	eax, DWORD PTR [edx+900]
	fld	DWORD PTR [ecx+100]
	fmul	DWORD PTR [eax+100]
	mov	ecx, DWORD PTR ?PLR_LocalPlayer@@3PAUPlayerStruct@@A ; PLR_LocalPlayer
	mov	edx, DWORD PTR [ecx+900]
	mov	eax, DWORD PTR ?PLR_LocalPlayer@@3PAUPlayerStruct@@A ; PLR_LocalPlayer
	mov	ecx, DWORD PTR [eax+900]
	fld	DWORD PTR [edx+104]
	fmul	DWORD PTR [ecx+104]
	faddp	ST(1), ST(0)
	mov	edx, DWORD PTR ?PLR_LocalPlayer@@3PAUPlayerStruct@@A ; PLR_LocalPlayer
	mov	eax, DWORD PTR [edx+900]
	mov	ecx, DWORD PTR ?PLR_LocalPlayer@@3PAUPlayerStruct@@A ; PLR_LocalPlayer
	mov	edx, DWORD PTR [ecx+900]
	fld	DWORD PTR [eax+108]
	fmul	DWORD PTR [edx+108]
	faddp	ST(1), ST(0)
	push	ecx
	fstp	DWORD PTR [esp]
	call	?sqrt@@YAMM@Z				; sqrt
	add	esp, 4
	fmul	DWORD PTR __real@447a0000
	call	__ftol2
	push	eax
	mov	eax, DWORD PTR ?PLR_LocalPlayer@@3PAUPlayerStruct@@A ; PLR_LocalPlayer
	mov	ecx, DWORD PTR [eax+900]
	fld	DWORD PTR __real@447a0000
	fmul	DWORD PTR [ecx+108]
	call	__ftol2
	push	eax
	mov	edx, DWORD PTR ?PLR_LocalPlayer@@3PAUPlayerStruct@@A ; PLR_LocalPlayer
	mov	eax, DWORD PTR [edx+900]
	fld	DWORD PTR __real@447a0000
	fmul	DWORD PTR [eax+104]
	call	__ftol2
	push	eax
	mov	ecx, DWORD PTR ?PLR_LocalPlayer@@3PAUPlayerStruct@@A ; PLR_LocalPlayer
	mov	edx, DWORD PTR [ecx+900]
	fld	DWORD PTR __real@447a0000
	fmul	DWORD PTR [edx+100]
	call	__ftol2
	push	eax
	push	OFFSET FLAT:??_C@_0BA@DCNKNBKE@?$CF6d?5?$CF6d?5?$CF6d?5?$CF6d?$AA@
	lea	eax, DWORD PTR _buf$[ebp]
	push	eax
	call	DWORD PTR __imp__wsprintfA
	add	esp, 24					; 00000018H

; 1121 : 	DumpText(0, 120, 8, 16, 0xffffff, buf);

	lea	eax, DWORD PTR _buf$[ebp]
	push	eax
	push	16777215				; 00ffffffH
	push	16					; 00000010H
	push	8
	push	120					; 00000078H
	push	0
	call	?DumpText@@YAXFFFFJPAD@Z		; DumpText
	add	esp, 24					; 00000018H

; 1122 : 	wsprintf(buf, "%6d %6d %6d %6d", 
; 1123 : 		(int) (1000.0f * PLR_LocalPlayer->car.Body->Centre.WMatrix.m[YX]),
; 1124 : 		(int) (1000.0f * PLR_LocalPlayer->car.Body->Centre.WMatrix.m[YY]),
; 1125 : 		(int) (1000.0f * PLR_LocalPlayer->car.Body->Centre.WMatrix.m[YZ]),
; 1126 : 		(int) (1000.0f * Length(&PLR_LocalPlayer->car.Body->Centre.WMatrix.mv[U])));

	mov	eax, DWORD PTR ?PLR_LocalPlayer@@3PAUPlayerStruct@@A ; PLR_LocalPlayer
	mov	ecx, DWORD PTR [eax+900]
	mov	edx, DWORD PTR ?PLR_LocalPlayer@@3PAUPlayerStruct@@A ; PLR_LocalPlayer
	mov	eax, DWORD PTR [edx+900]
	fld	DWORD PTR [ecx+112]
	fmul	DWORD PTR [eax+112]
	mov	ecx, DWORD PTR ?PLR_LocalPlayer@@3PAUPlayerStruct@@A ; PLR_LocalPlayer
	mov	edx, DWORD PTR [ecx+900]
	mov	eax, DWORD PTR ?PLR_LocalPlayer@@3PAUPlayerStruct@@A ; PLR_LocalPlayer
	mov	ecx, DWORD PTR [eax+900]
	fld	DWORD PTR [edx+116]
	fmul	DWORD PTR [ecx+116]
	faddp	ST(1), ST(0)
	mov	edx, DWORD PTR ?PLR_LocalPlayer@@3PAUPlayerStruct@@A ; PLR_LocalPlayer
	mov	eax, DWORD PTR [edx+900]
	mov	ecx, DWORD PTR ?PLR_LocalPlayer@@3PAUPlayerStruct@@A ; PLR_LocalPlayer
	mov	edx, DWORD PTR [ecx+900]
	fld	DWORD PTR [eax+120]
	fmul	DWORD PTR [edx+120]
	faddp	ST(1), ST(0)
	push	ecx
	fstp	DWORD PTR [esp]
	call	?sqrt@@YAMM@Z				; sqrt
	add	esp, 4
	fmul	DWORD PTR __real@447a0000
	call	__ftol2
	push	eax
	mov	eax, DWORD PTR ?PLR_LocalPlayer@@3PAUPlayerStruct@@A ; PLR_LocalPlayer
	mov	ecx, DWORD PTR [eax+900]
	fld	DWORD PTR __real@447a0000
	fmul	DWORD PTR [ecx+120]
	call	__ftol2
	push	eax
	mov	edx, DWORD PTR ?PLR_LocalPlayer@@3PAUPlayerStruct@@A ; PLR_LocalPlayer
	mov	eax, DWORD PTR [edx+900]
	fld	DWORD PTR __real@447a0000
	fmul	DWORD PTR [eax+116]
	call	__ftol2
	push	eax
	mov	ecx, DWORD PTR ?PLR_LocalPlayer@@3PAUPlayerStruct@@A ; PLR_LocalPlayer
	mov	edx, DWORD PTR [ecx+900]
	fld	DWORD PTR __real@447a0000
	fmul	DWORD PTR [edx+112]
	call	__ftol2
	push	eax
	push	OFFSET FLAT:??_C@_0BA@DCNKNBKE@?$CF6d?5?$CF6d?5?$CF6d?5?$CF6d?$AA@
	lea	eax, DWORD PTR _buf$[ebp]
	push	eax
	call	DWORD PTR __imp__wsprintfA
	add	esp, 24					; 00000018H

; 1127 : 	DumpText(0, 140, 8, 16, 0xffffff, buf);

	lea	eax, DWORD PTR _buf$[ebp]
	push	eax
	push	16777215				; 00ffffffH
	push	16					; 00000010H
	push	8
	push	140					; 0000008cH
	push	0
	call	?DumpText@@YAXFFFFJPAD@Z		; DumpText
	add	esp, 24					; 00000018H

; 1128 : 	wsprintf(buf, "%6d %6d %6d %6d", 
; 1129 : 		(int) (1000.0f * PLR_LocalPlayer->car.Body->Centre.WMatrix.m[ZX]),
; 1130 : 		(int) (1000.0f * PLR_LocalPlayer->car.Body->Centre.WMatrix.m[ZY]),
; 1131 : 		(int) (1000.0f * PLR_LocalPlayer->car.Body->Centre.WMatrix.m[ZZ]),
; 1132 : 		(int) (1000.0f * Length(&PLR_LocalPlayer->car.Body->Centre.WMatrix.mv[L])));

	mov	eax, DWORD PTR ?PLR_LocalPlayer@@3PAUPlayerStruct@@A ; PLR_LocalPlayer
	mov	ecx, DWORD PTR [eax+900]
	mov	edx, DWORD PTR ?PLR_LocalPlayer@@3PAUPlayerStruct@@A ; PLR_LocalPlayer
	mov	eax, DWORD PTR [edx+900]
	fld	DWORD PTR [ecx+124]
	fmul	DWORD PTR [eax+124]
	mov	ecx, DWORD PTR ?PLR_LocalPlayer@@3PAUPlayerStruct@@A ; PLR_LocalPlayer
	mov	edx, DWORD PTR [ecx+900]
	mov	eax, DWORD PTR ?PLR_LocalPlayer@@3PAUPlayerStruct@@A ; PLR_LocalPlayer
	mov	ecx, DWORD PTR [eax+900]
	fld	DWORD PTR [edx+128]
	fmul	DWORD PTR [ecx+128]
	faddp	ST(1), ST(0)
	mov	edx, DWORD PTR ?PLR_LocalPlayer@@3PAUPlayerStruct@@A ; PLR_LocalPlayer
	mov	eax, DWORD PTR [edx+900]
	mov	ecx, DWORD PTR ?PLR_LocalPlayer@@3PAUPlayerStruct@@A ; PLR_LocalPlayer
	mov	edx, DWORD PTR [ecx+900]
	fld	DWORD PTR [eax+132]
	fmul	DWORD PTR [edx+132]
	faddp	ST(1), ST(0)
	push	ecx
	fstp	DWORD PTR [esp]
	call	?sqrt@@YAMM@Z				; sqrt
	add	esp, 4
	fmul	DWORD PTR __real@447a0000
	call	__ftol2
	push	eax
	mov	eax, DWORD PTR ?PLR_LocalPlayer@@3PAUPlayerStruct@@A ; PLR_LocalPlayer
	mov	ecx, DWORD PTR [eax+900]
	fld	DWORD PTR __real@447a0000
	fmul	DWORD PTR [ecx+132]
	call	__ftol2
	push	eax
	mov	edx, DWORD PTR ?PLR_LocalPlayer@@3PAUPlayerStruct@@A ; PLR_LocalPlayer
	mov	eax, DWORD PTR [edx+900]
	fld	DWORD PTR __real@447a0000
	fmul	DWORD PTR [eax+128]
	call	__ftol2
	push	eax
	mov	ecx, DWORD PTR ?PLR_LocalPlayer@@3PAUPlayerStruct@@A ; PLR_LocalPlayer
	mov	edx, DWORD PTR [ecx+900]
	fld	DWORD PTR __real@447a0000
	fmul	DWORD PTR [edx+124]
	call	__ftol2
	push	eax
	push	OFFSET FLAT:??_C@_0BA@DCNKNBKE@?$CF6d?5?$CF6d?5?$CF6d?5?$CF6d?$AA@
	lea	eax, DWORD PTR _buf$[ebp]
	push	eax
	call	DWORD PTR __imp__wsprintfA
	add	esp, 24					; 00000018H

; 1133 : 	DumpText(0, 160, 8, 16, 0xffffff, buf);

	lea	eax, DWORD PTR _buf$[ebp]
	push	eax
	push	16777215				; 00ffffffH
	push	16					; 00000010H
	push	8
	push	160					; 000000a0H
	push	0
	call	?DumpText@@YAXFFFFJPAD@Z		; DumpText
	add	esp, 24					; 00000018H

; 1134 : 
; 1135 : 	// Show impulses
; 1136 : #if USE_DEBUG_ROUTINES
; 1137 : 	wsprintf(buf, "imp: %6d %6d %6d  ang: %6d %6d %6d",
; 1138 : 		(int) (100.0f * DEBUG_Impulse.v[X]),
; 1139 : 		(int) (100.0f * DEBUG_Impulse.v[Y]),
; 1140 : 		(int) (100.0f * DEBUG_Impulse.v[Z]),
; 1141 : 		(int) (100.0f * DEBUG_AngImpulse.v[X]),
; 1142 : 		(int) (100.0f * DEBUG_AngImpulse.v[Y]),
; 1143 : 		(int) (100.0f * DEBUG_AngImpulse.v[Z]));

	fld	DWORD PTR __real@42c80000
	fmul	DWORD PTR ?DEBUG_AngImpulse@@3UVectorStruct@@A+8
	call	__ftol2
	push	eax
	fld	DWORD PTR __real@42c80000
	fmul	DWORD PTR ?DEBUG_AngImpulse@@3UVectorStruct@@A+4
	call	__ftol2
	push	eax
	fld	DWORD PTR __real@42c80000
	fmul	DWORD PTR ?DEBUG_AngImpulse@@3UVectorStruct@@A
	call	__ftol2
	push	eax
	fld	DWORD PTR __real@42c80000
	fmul	DWORD PTR ?DEBUG_Impulse@@3UVectorStruct@@A+8
	call	__ftol2
	push	eax
	fld	DWORD PTR __real@42c80000
	fmul	DWORD PTR ?DEBUG_Impulse@@3UVectorStruct@@A+4
	call	__ftol2
	push	eax
	fld	DWORD PTR __real@42c80000
	fmul	DWORD PTR ?DEBUG_Impulse@@3UVectorStruct@@A
	call	__ftol2
	push	eax
	push	OFFSET FLAT:??_C@_0CD@HAMFNMJO@imp?3?5?$CF6d?5?$CF6d?5?$CF6d?5?5ang?3?5?$CF6d?5?$CF6d?5?$CF@
	lea	eax, DWORD PTR _buf$[ebp]
	push	eax
	call	DWORD PTR __imp__wsprintfA
	add	esp, 32					; 00000020H

; 1144 : 	DumpText(0, 180, 8, 16, 0xffffff, buf);

	lea	eax, DWORD PTR _buf$[ebp]
	push	eax
	push	16777215				; 00ffffffH
	push	16					; 00000010H
	push	8
	push	180					; 000000b4H
	push	0
	call	?DumpText@@YAXFFFFJPAD@Z		; DumpText
	add	esp, 24					; 00000018H

; 1145 : #endif
; 1146 : 
; 1147 : 	// Show friction mode and coefficients
; 1148 : 	wsprintf(buf, "SFric: %3d   KFric: %3d",
; 1149 : 		(int) (100.0f * PLR_LocalPlayer->car.Body->Centre.StaticFriction),
; 1150 : 		(int) (100.0f * PLR_LocalPlayer->car.Body->Centre.KineticFriction));

	mov	eax, DWORD PTR ?PLR_LocalPlayer@@3PAUPlayerStruct@@A ; PLR_LocalPlayer
	mov	ecx, DWORD PTR [eax+900]
	fld	DWORD PTR __real@42c80000
	fmul	DWORD PTR [ecx+188]
	call	__ftol2
	push	eax
	mov	edx, DWORD PTR ?PLR_LocalPlayer@@3PAUPlayerStruct@@A ; PLR_LocalPlayer
	mov	eax, DWORD PTR [edx+900]
	fld	DWORD PTR __real@42c80000
	fmul	DWORD PTR [eax+184]
	call	__ftol2
	push	eax
	push	OFFSET FLAT:??_C@_0BI@IJHOFINA@SFric?3?5?$CF3d?5?5?5KFric?3?5?$CF3d?$AA@
	lea	ecx, DWORD PTR _buf$[ebp]
	push	ecx
	call	DWORD PTR __imp__wsprintfA
	add	esp, 16					; 00000010H

; 1151 : 	DumpText(0, 200, 8, 16, 0xffffff, buf);

	lea	eax, DWORD PTR _buf$[ebp]
	push	eax
	push	16777215				; 00ffffffH
	push	16					; 00000010H
	push	8
	push	200					; 000000c8H
	push	0
	call	?DumpText@@YAXFFFFJPAD@Z		; DumpText
	add	esp, 24					; 00000018H

; 1152 : 
; 1153 : 	// Wheel Info
; 1154 : 	wsprintf(buf, "Wheels: Pos %4d %4d %4d %4d", 
; 1155 : 		(int) (1000.0f * PLR_LocalPlayer->car.Wheel[0].Pos),
; 1156 : 		(int) (1000.0f * PLR_LocalPlayer->car.Wheel[1].Pos),
; 1157 : 		(int) (1000.0f * PLR_LocalPlayer->car.Wheel[2].Pos),
; 1158 : 		(int) (1000.0f * PLR_LocalPlayer->car.Wheel[3].Pos));

	mov	eax, DWORD PTR ?PLR_LocalPlayer@@3PAUPlayerStruct@@A ; PLR_LocalPlayer
	fld	DWORD PTR __real@447a0000
	fmul	DWORD PTR [eax+2764]
	call	__ftol2
	push	eax
	mov	ecx, DWORD PTR ?PLR_LocalPlayer@@3PAUPlayerStruct@@A ; PLR_LocalPlayer
	fld	DWORD PTR __real@447a0000
	fmul	DWORD PTR [ecx+2404]
	call	__ftol2
	push	eax
	mov	edx, DWORD PTR ?PLR_LocalPlayer@@3PAUPlayerStruct@@A ; PLR_LocalPlayer
	fld	DWORD PTR __real@447a0000
	fmul	DWORD PTR [edx+2044]
	call	__ftol2
	push	eax
	mov	eax, DWORD PTR ?PLR_LocalPlayer@@3PAUPlayerStruct@@A ; PLR_LocalPlayer
	fld	DWORD PTR __real@447a0000
	fmul	DWORD PTR [eax+1684]
	call	__ftol2
	push	eax
	push	OFFSET FLAT:??_C@_0BM@IFNIOEMO@Wheels?3?5Pos?5?$CF4d?5?$CF4d?5?$CF4d?5?$CF4d?$AA@
	lea	ecx, DWORD PTR _buf$[ebp]
	push	ecx
	call	DWORD PTR __imp__wsprintfA
	add	esp, 24					; 00000018H

; 1159 : 	DumpText(0, 220, 8, 16, 0xffffff, buf);

	lea	eax, DWORD PTR _buf$[ebp]
	push	eax
	push	16777215				; 00ffffffH
	push	16					; 00000010H
	push	8
	push	220					; 000000dcH
	push	0
	call	?DumpText@@YAXFFFFJPAD@Z		; DumpText
	add	esp, 24					; 00000018H

; 1160 : 	wsprintf(buf, "        Vel %4d %4d %4d %4d, %4d %4d %4d %4d", 
; 1161 : 		(int) (PLR_LocalPlayer->car.Wheel[0].Vel),
; 1162 : 		(int) (PLR_LocalPlayer->car.Wheel[1].Vel),
; 1163 : 		(int) (PLR_LocalPlayer->car.Wheel[2].Vel),
; 1164 : 		(int) (PLR_LocalPlayer->car.Wheel[3].Vel),
; 1165 : 		(int) (PLR_LocalPlayer->car.Wheel[0].AngVel),
; 1166 : 		(int) (PLR_LocalPlayer->car.Wheel[1].AngVel),
; 1167 : 		(int) (PLR_LocalPlayer->car.Wheel[2].AngVel),
; 1168 : 		(int) (PLR_LocalPlayer->car.Wheel[3].AngVel));

	mov	eax, DWORD PTR ?PLR_LocalPlayer@@3PAUPlayerStruct@@A ; PLR_LocalPlayer
	fld	DWORD PTR [eax+2776]
	call	__ftol2
	push	eax
	mov	ecx, DWORD PTR ?PLR_LocalPlayer@@3PAUPlayerStruct@@A ; PLR_LocalPlayer
	fld	DWORD PTR [ecx+2416]
	call	__ftol2
	push	eax
	mov	edx, DWORD PTR ?PLR_LocalPlayer@@3PAUPlayerStruct@@A ; PLR_LocalPlayer
	fld	DWORD PTR [edx+2056]
	call	__ftol2
	push	eax
	mov	eax, DWORD PTR ?PLR_LocalPlayer@@3PAUPlayerStruct@@A ; PLR_LocalPlayer
	fld	DWORD PTR [eax+1696]
	call	__ftol2
	push	eax
	mov	ecx, DWORD PTR ?PLR_LocalPlayer@@3PAUPlayerStruct@@A ; PLR_LocalPlayer
	fld	DWORD PTR [ecx+2772]
	call	__ftol2
	push	eax
	mov	edx, DWORD PTR ?PLR_LocalPlayer@@3PAUPlayerStruct@@A ; PLR_LocalPlayer
	fld	DWORD PTR [edx+2412]
	call	__ftol2
	push	eax
	mov	eax, DWORD PTR ?PLR_LocalPlayer@@3PAUPlayerStruct@@A ; PLR_LocalPlayer
	fld	DWORD PTR [eax+2052]
	call	__ftol2
	push	eax
	mov	ecx, DWORD PTR ?PLR_LocalPlayer@@3PAUPlayerStruct@@A ; PLR_LocalPlayer
	fld	DWORD PTR [ecx+1692]
	call	__ftol2
	push	eax
	push	OFFSET FLAT:??_C@_0CN@DBMBENAN@?5?5?5?5?5?5?5?5Vel?5?$CF4d?5?$CF4d?5?$CF4d?5?$CF4d?0?5?$CF4d@
	lea	edx, DWORD PTR _buf$[ebp]
	push	edx
	call	DWORD PTR __imp__wsprintfA
	add	esp, 40					; 00000028H

; 1169 : 	DumpText(0, 240, 8, 16, 0xffffff, buf);

	lea	eax, DWORD PTR _buf$[ebp]
	push	eax
	push	16777215				; 00ffffffH
	push	16					; 00000010H
	push	8
	push	240					; 000000f0H
	push	0
	call	?DumpText@@YAXFFFFJPAD@Z		; DumpText
	add	esp, 24					; 00000018H

; 1170 : 	wsprintf(buf, "        Frc %3d/%3d(%3d)  %3d/%3d(%3d)  %3d/%3d(%3d)  %3d/%3d(%3d)", 
; 1171 : 		(int) (100.0f * PLR_LocalPlayer->car.Wheel[0].StaticFriction),
; 1172 : 		(int) (100.0f * PLR_LocalPlayer->car.Wheel[0].KineticFriction),
; 1173 : 		(int) (100.0f * PLR_LocalPlayer->car.Spring[0].Restitution),
; 1174 : 		(int) (100.0f * PLR_LocalPlayer->car.Wheel[1].StaticFriction),
; 1175 : 		(int) (100.0f * PLR_LocalPlayer->car.Wheel[1].KineticFriction),
; 1176 : 		(int) (100.0f * PLR_LocalPlayer->car.Spring[1].Restitution),
; 1177 : 		(int) (100.0f * PLR_LocalPlayer->car.Wheel[2].StaticFriction),
; 1178 : 		(int) (100.0f * PLR_LocalPlayer->car.Wheel[2].KineticFriction),
; 1179 : 		(int) (100.0f * PLR_LocalPlayer->car.Spring[2].Restitution),
; 1180 : 		(int) (100.0f * PLR_LocalPlayer->car.Wheel[3].StaticFriction),
; 1181 : 		(int) (100.0f * PLR_LocalPlayer->car.Wheel[3].KineticFriction),
; 1182 : 		(int) (100.0f * PLR_LocalPlayer->car.Spring[3].Restitution));

	mov	eax, DWORD PTR ?PLR_LocalPlayer@@3PAUPlayerStruct@@A ; PLR_LocalPlayer
	fld	DWORD PTR __real@42c80000
	fmul	DWORD PTR [eax+3088]
	call	__ftol2
	push	eax
	mov	ecx, DWORD PTR ?PLR_LocalPlayer@@3PAUPlayerStruct@@A ; PLR_LocalPlayer
	fld	DWORD PTR __real@42c80000
	fmul	DWORD PTR [ecx+2720]
	call	__ftol2
	push	eax
	mov	edx, DWORD PTR ?PLR_LocalPlayer@@3PAUPlayerStruct@@A ; PLR_LocalPlayer
	fld	DWORD PTR __real@42c80000
	fmul	DWORD PTR [edx+2716]
	call	__ftol2
	push	eax
	mov	eax, DWORD PTR ?PLR_LocalPlayer@@3PAUPlayerStruct@@A ; PLR_LocalPlayer
	fld	DWORD PTR __real@42c80000
	fmul	DWORD PTR [eax+3076]
	call	__ftol2
	push	eax
	mov	ecx, DWORD PTR ?PLR_LocalPlayer@@3PAUPlayerStruct@@A ; PLR_LocalPlayer
	fld	DWORD PTR __real@42c80000
	fmul	DWORD PTR [ecx+2360]
	call	__ftol2
	push	eax
	mov	edx, DWORD PTR ?PLR_LocalPlayer@@3PAUPlayerStruct@@A ; PLR_LocalPlayer
	fld	DWORD PTR __real@42c80000
	fmul	DWORD PTR [edx+2356]
	call	__ftol2
	push	eax
	mov	eax, DWORD PTR ?PLR_LocalPlayer@@3PAUPlayerStruct@@A ; PLR_LocalPlayer
	fld	DWORD PTR __real@42c80000
	fmul	DWORD PTR [eax+3064]
	call	__ftol2
	push	eax
	mov	ecx, DWORD PTR ?PLR_LocalPlayer@@3PAUPlayerStruct@@A ; PLR_LocalPlayer
	fld	DWORD PTR __real@42c80000
	fmul	DWORD PTR [ecx+2000]
	call	__ftol2
	push	eax
	mov	edx, DWORD PTR ?PLR_LocalPlayer@@3PAUPlayerStruct@@A ; PLR_LocalPlayer
	fld	DWORD PTR __real@42c80000
	fmul	DWORD PTR [edx+1996]
	call	__ftol2
	push	eax
	mov	eax, DWORD PTR ?PLR_LocalPlayer@@3PAUPlayerStruct@@A ; PLR_LocalPlayer
	fld	DWORD PTR __real@42c80000
	fmul	DWORD PTR [eax+3052]
	call	__ftol2
	push	eax
	mov	ecx, DWORD PTR ?PLR_LocalPlayer@@3PAUPlayerStruct@@A ; PLR_LocalPlayer
	fld	DWORD PTR __real@42c80000
	fmul	DWORD PTR [ecx+1640]
	call	__ftol2
	push	eax
	mov	edx, DWORD PTR ?PLR_LocalPlayer@@3PAUPlayerStruct@@A ; PLR_LocalPlayer
	fld	DWORD PTR __real@42c80000
	fmul	DWORD PTR [edx+1636]
	call	__ftol2
	push	eax
	push	OFFSET FLAT:??_C@_0ED@BGLCEDDD@?5?5?5?5?5?5?5?5Frc?5?$CF3d?1?$CF3d?$CI?$CF3d?$CJ?5?5?$CF3d?1?$CF3@
	lea	eax, DWORD PTR _buf$[ebp]
	push	eax
	call	DWORD PTR __imp__wsprintfA
	add	esp, 56					; 00000038H

; 1183 : 	DumpText(0, 260, 8, 16, 0xffffff, buf);

	lea	eax, DWORD PTR _buf$[ebp]
	push	eax
	push	16777215				; 00ffffffH
	push	16					; 00000010H
	push	8
	push	260					; 00000104H
	push	0
	call	?DumpText@@YAXFFFFJPAD@Z		; DumpText
	add	esp, 24					; 00000018H

; 1184 : 	wsprintf(buf, "        C/S %1d/%1d  %1d/%1d  %1d/%1d  %1d/%1d",
; 1185 : 		(IsWheelInContact(&PLR_LocalPlayer->car.Wheel[0]))? 1: 0,
; 1186 : 		(IsWheelSkidding(&PLR_LocalPlayer->car.Wheel[0]))? 1: 0,
; 1187 : 		(IsWheelInContact(&PLR_LocalPlayer->car.Wheel[1]))? 1: 0,
; 1188 : 		(IsWheelSkidding(&PLR_LocalPlayer->car.Wheel[1]))? 1: 0,
; 1189 : 		(IsWheelInContact(&PLR_LocalPlayer->car.Wheel[2]))? 1: 0,
; 1190 : 		(IsWheelSkidding(&PLR_LocalPlayer->car.Wheel[2]))? 1: 0,
; 1191 : 		(IsWheelInContact(&PLR_LocalPlayer->car.Wheel[3]))? 1: 0,
; 1192 : 		(IsWheelSkidding(&PLR_LocalPlayer->car.Wheel[3]))? 1: 0);

	mov	eax, DWORD PTR ?PLR_LocalPlayer@@3PAUPlayerStruct@@A ; PLR_LocalPlayer
	mov	ecx, DWORD PTR [eax+2684]
	and	ecx, 48					; 00000030H
	neg	ecx
	sbb	ecx, ecx
	neg	ecx
	push	ecx
	mov	edx, DWORD PTR ?PLR_LocalPlayer@@3PAUPlayerStruct@@A ; PLR_LocalPlayer
	mov	eax, DWORD PTR [edx+2684]
	and	eax, 8
	neg	eax
	sbb	eax, eax
	neg	eax
	push	eax
	mov	ecx, DWORD PTR ?PLR_LocalPlayer@@3PAUPlayerStruct@@A ; PLR_LocalPlayer
	mov	edx, DWORD PTR [ecx+2324]
	and	edx, 48					; 00000030H
	neg	edx
	sbb	edx, edx
	neg	edx
	push	edx
	mov	eax, DWORD PTR ?PLR_LocalPlayer@@3PAUPlayerStruct@@A ; PLR_LocalPlayer
	mov	ecx, DWORD PTR [eax+2324]
	and	ecx, 8
	neg	ecx
	sbb	ecx, ecx
	neg	ecx
	push	ecx
	mov	edx, DWORD PTR ?PLR_LocalPlayer@@3PAUPlayerStruct@@A ; PLR_LocalPlayer
	mov	eax, DWORD PTR [edx+1964]
	and	eax, 48					; 00000030H
	neg	eax
	sbb	eax, eax
	neg	eax
	push	eax
	mov	ecx, DWORD PTR ?PLR_LocalPlayer@@3PAUPlayerStruct@@A ; PLR_LocalPlayer
	mov	edx, DWORD PTR [ecx+1964]
	and	edx, 8
	neg	edx
	sbb	edx, edx
	neg	edx
	push	edx
	mov	eax, DWORD PTR ?PLR_LocalPlayer@@3PAUPlayerStruct@@A ; PLR_LocalPlayer
	mov	ecx, DWORD PTR [eax+1604]
	and	ecx, 48					; 00000030H
	neg	ecx
	sbb	ecx, ecx
	neg	ecx
	push	ecx
	mov	edx, DWORD PTR ?PLR_LocalPlayer@@3PAUPlayerStruct@@A ; PLR_LocalPlayer
	mov	eax, DWORD PTR [edx+1604]
	and	eax, 8
	neg	eax
	sbb	eax, eax
	neg	eax
	push	eax
	push	OFFSET FLAT:??_C@_0CP@OCDCOKHJ@?5?5?5?5?5?5?5?5C?1S?5?$CF1d?1?$CF1d?5?5?$CF1d?1?$CF1d?5?5?$CF1@
	lea	ecx, DWORD PTR _buf$[ebp]
	push	ecx
	call	DWORD PTR __imp__wsprintfA
	add	esp, 40					; 00000028H

; 1193 : 	DumpText(0, 280, 8, 16, 0xffffff, buf);

	lea	eax, DWORD PTR _buf$[ebp]
	push	eax
	push	16777215				; 00ffffffH
	push	16					; 00000010H
	push	8
	push	280					; 00000118H
	push	0
	call	?DumpText@@YAXFFFFJPAD@Z		; DumpText
	add	esp, 24					; 00000018H

; 1194 : 
; 1195 : 	// Number of sparks active
; 1196 : 	wsprintf(buf, "Sparks: %5d  Trails: %5d", NActiveSparks, NActiveTrails);

	mov	eax, DWORD PTR ?NActiveTrails@@3HA	; NActiveTrails
	push	eax
	mov	ecx, DWORD PTR ?NActiveSparks@@3HA	; NActiveSparks
	push	ecx
	push	OFFSET FLAT:??_C@_0BJ@EMGMHDGM@Sparks?3?5?$CF5d?5?5Trails?3?5?$CF5d?$AA@
	lea	edx, DWORD PTR _buf$[ebp]
	push	edx
	call	DWORD PTR __imp__wsprintfA
	add	esp, 16					; 00000010H

; 1197 : 	DumpText(0, 300, 8, 16, 0xffffff, buf);

	lea	eax, DWORD PTR _buf$[ebp]
	push	eax
	push	16777215				; 00ffffffH
	push	16					; 00000010H
	push	8
	push	300					; 0000012cH
	push	0
	call	?DumpText@@YAXFFFFJPAD@Z		; DumpText
	add	esp, 24					; 00000018H

; 1198 : 
; 1199 : 	// Size of ghost currently stored and being recorded
; 1200 : 	wsprintf(buf, "Ghost: %8d (%8d)", GhostInfo->NFrames * sizeof(GHOST_INFO), GHO_BestGhostInfo->NFrames * sizeof(GHOST_INFO));

	mov	eax, DWORD PTR ?GHO_BestGhostInfo@@3PAUGhostInfoStruct@@A ; GHO_BestGhostInfo
	mov	ecx, DWORD PTR [eax+112]
	imul	ecx, 116				; 00000074H
	push	ecx
	mov	edx, DWORD PTR ?GhostInfo@@3PAUGhostInfoStruct@@A ; GhostInfo
	mov	eax, DWORD PTR [edx+112]
	imul	eax, 116				; 00000074H
	push	eax
	push	OFFSET FLAT:??_C@_0BB@PILJGEIA@Ghost?3?5?$CF8d?5?$CI?$CF8d?$CJ?$AA@
	lea	ecx, DWORD PTR _buf$[ebp]
	push	ecx
	call	DWORD PTR __imp__wsprintfA
	add	esp, 16					; 00000010H

; 1201 : 	DumpText(320, 300, 8, 16, 0xffffff, buf);

	lea	eax, DWORD PTR _buf$[ebp]
	push	eax
	push	16777215				; 00ffffffH
	push	16					; 00000010H
	push	8
	push	300					; 0000012cH
	push	320					; 00000140H
	call	?DumpText@@YAXFFFFJPAD@Z		; DumpText
	add	esp, 24					; 00000018H

; 1202 : 
; 1203 : 	// Equation solver tests
; 1204 : #if USE_DEBUG_ROUTINES
; 1205 : 	wsprintf(buf, "Converged: %s   Res = %d", (DEBUG_Converged)? "Yes": "No ", (int)(1000000 * DEBUG_Res));

	movzx	eax, BYTE PTR ?DEBUG_Converged@@3_NA	; DEBUG_Converged
	test	eax, eax
	je	SHORT $L82630
	mov	DWORD PTR tv954[ebp], OFFSET FLAT:??_C@_03CCLAEDDF@Yes?$AA@
	jmp	SHORT $L82631
$L82630:
	mov	DWORD PTR tv954[ebp], OFFSET FLAT:??_C@_03HDHPKHFC@No?5?$AA@
$L82631:
	fld	DWORD PTR __real@49742400
	fmul	DWORD PTR ?DEBUG_Res@@3MA		; DEBUG_Res
	call	__ftol2
	push	eax
	mov	ecx, DWORD PTR tv954[ebp]
	push	ecx
	push	OFFSET FLAT:??_C@_0BJ@NDHMDNAL@Converged?3?5?$CFs?5?5?5Res?5?$DN?5?$CFd?$AA@
	lea	edx, DWORD PTR _buf$[ebp]
	push	edx
	call	DWORD PTR __imp__wsprintfA
	add	esp, 16					; 00000010H

; 1206 : 	DumpText(0, 320, 8, 16, 0xffffff, buf);

	lea	eax, DWORD PTR _buf$[ebp]
	push	eax
	push	16777215				; 00ffffffH
	push	16					; 00000010H
	push	8
	push	320					; 00000140H
	push	0
	call	?DumpText@@YAXFFFFJPAD@Z		; DumpText
	add	esp, 24					; 00000018H

; 1207 : #endif
; 1208 : 
; 1209 : #if USE_DEBUG_ROUTINES
; 1210 : 	wsprintf(buf, "Max Imp: %9d    Max Ang Imp: %9d", (int)DEBUG_MaxImpulseMag, (int)DEBUG_MaxAngImpulseMag);

	fld	DWORD PTR ?DEBUG_MaxAngImpulseMag@@3MA	; DEBUG_MaxAngImpulseMag
	call	__ftol2
	push	eax
	fld	DWORD PTR ?DEBUG_MaxImpulseMag@@3MA	; DEBUG_MaxImpulseMag
	call	__ftol2
	push	eax
	push	OFFSET FLAT:??_C@_0CB@EFNHFLME@Max?5Imp?3?5?$CF9d?5?5?5?5Max?5Ang?5Imp?3?5?$CF9d@
	lea	eax, DWORD PTR _buf$[ebp]
	push	eax
	call	DWORD PTR __imp__wsprintfA
	add	esp, 16					; 00000010H

; 1211 : 	DumpText(0,340, 8, 16, 0xffffff, buf);

	lea	eax, DWORD PTR _buf$[ebp]
	push	eax
	push	16777215				; 00ffffffH
	push	16					; 00000010H
	push	8
	push	340					; 00000154H
	push	0
	call	?DumpText@@YAXFFFFJPAD@Z		; DumpText
	add	esp, 24					; 00000018H

; 1212 : #endif
; 1213 : 
; 1214 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?ShowPhysicsInfo@@YAXXZ ENDP				; ShowPhysicsInfo
_TEXT	ENDS
PUBLIC	_sqrtf
; Function compile flags: /Odt /ZI
; File c:\program files\microsoft visual studio .net 2003\vc7\include\math.h
;	COMDAT ?sqrt@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?sqrt@@YAMM@Z PROC NEAR					; sqrt, COMDAT

; 579  :         {return (sqrtf(_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR __X$[ebp]
	push	eax
	call	_sqrtf
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?sqrt@@YAMM@Z ENDP					; sqrt
_TEXT	ENDS
EXTRN	_sqrt:NEAR
; Function compile flags: /Odt /ZI
;	COMDAT _sqrtf
_TEXT	SEGMENT
tv70 = -68						; size = 4
__X$ = 8						; size = 4
_sqrtf	PROC NEAR					; COMDAT

; 470  :         {return ((float)sqrt((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	fld	DWORD PTR __X$[ebp]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	call	_sqrt
	add	esp, 8
	fst	DWORD PTR tv70[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_sqrtf	ENDP
_TEXT	ENDS
END
