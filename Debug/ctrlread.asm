; Listing generated by Microsoft (R) Optimizing Compiler Version 13.10.3077 

	TITLE	.\source\ctrlread.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT _IsEqualGUID
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _==
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _acosl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _asinl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _atanl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _atan2l
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _ceill
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _cosl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _coshl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _expl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _fabsl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _floorl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _fmodl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _frexpl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _ldexpl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _logl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _log10l
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _modfl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _powl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _sinl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _sinhl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _sqrtl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _tanl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _tanhl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _frexpf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _ldexpf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _acosf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _asinf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _atanf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _atan2f
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _ceilf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _cosf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _coshf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _expf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _fabsf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _floorf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _fmodf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _logf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _log10f
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _modff
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _powf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _sinf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _sinhf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _sqrtf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _tanf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _tanhf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CRD_CheckLocalKeys@@YAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CRD_InitPlayerControl@@YAXPAUPlayerStruct@@W4CTRL_TYPE@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CRD_KeyboardInput@@YAXPAUCtrlStruct@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?s_RationaliseControl@@YAXPAUCtrlStruct@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CRD_JoystickInput@@YAXPAUCtrlStruct@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Pow_int@N@@YANNH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Pow_int@H@@YAHHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Pow_int@M@@YAMMH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Pow_int@O@@YAOOH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
sxdata	SEGMENT DWORD USE32 'SXDATA'
sxdata	ENDS
FLAT	GROUP _DATA, CONST, _BSS
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBCD
INCLUDELIB OLDNAMES

_BSS	SEGMENT
?x@?1??CRD_JoystickInput@@YAXPAUCtrlStruct@@@Z@4JA DD 01H DUP (?) ; `CRD_JoystickInput'::`2'::x
_BSS	ENDS
_DATA	SEGMENT
?y@?1??CRD_JoystickInput@@YAXPAUCtrlStruct@@@Z@4JA DD 01H ; `CRD_JoystickInput'::`2'::y
_DATA	ENDS
PUBLIC	?CRD_CheckLocalKeys@@YAXXZ			; CRD_CheckLocalKeys
PUBLIC	__real@3dcccccd
PUBLIC	__real@00000000
PUBLIC	__real@40a00000
EXTRN	?TimerFreq@@3KA:DWORD				; TimerFreq
EXTRN	?SetCameraFollow@@YAXPAUCameraStruct@@PAUobject_def@@J@Z:NEAR ; SetCameraFollow
EXTRN	?SetCameraAttached@@YAXPAUCameraStruct@@PAUobject_def@@J@Z:NEAR ; SetCameraAttached
EXTRN	?SetCameraFreedom@@YAXPAUCameraStruct@@PAUobject_def@@J@Z:NEAR ; SetCameraFreedom
EXTRN	?SetCameraRail@@YAXPAUCameraStruct@@PAUobject_def@@J@Z:NEAR ; SetCameraRail
EXTRN	?InitBestGhostData@@YAXXZ:NEAR			; InitBestGhostData
EXTRN	?SetCameraEdit@@YAXPAUCameraStruct@@PAUobject_def@@J@Z:NEAR ; SetCameraEdit
EXTRN	?ClearBestGhostData@@YAXXZ:NEAR			; ClearBestGhostData
EXTRN	?GhostSolid@@3JA:DWORD				; GhostSolid
EXTRN	?CAM_MainCamera@@3PAUCameraStruct@@A:DWORD	; CAM_MainCamera
EXTRN	?SpeedUnits@@3JA:DWORD				; SpeedUnits
EXTRN	?SetupCar@@YAXPAUPlayerStruct@@H@Z:NEAR		; SetupCar
EXTRN	?SetCarAerialPos@@YAXPAUCarStruct@@@Z:NEAR	; SetCarAerialPos
EXTRN	?SetAllCarCoMs@@YAXXZ:NEAR			; SetAllCarCoMs
EXTRN	?ReadAllCarInfo@@YA_NPAD@Z:NEAR			; ReadAllCarInfo
EXTRN	?CarInfoFile@@3PADA:DWORD			; CarInfoFile
EXTRN	?NextValidCarID@@YAHH@Z:NEAR			; NextValidCarID
EXTRN	?PrevValidCarID@@YAHH@Z:NEAR			; PrevValidCarID
EXTRN	?CAR_DrawCarAxes@@3_NA:BYTE			; CAR_DrawCarAxes
EXTRN	?Keys@@3PADA:BYTE				; Keys
EXTRN	?LastKeys@@3PADA:BYTE				; LastKeys
EXTRN	__fltused:NEAR
EXTRN	?IdentityMatrix@@3TMatrixUnion@@A:BYTE		; IdentityMatrix
EXTRN	?Everything@@3DA:BYTE				; Everything
EXTRN	?QuitGame@@3DA:BYTE				; QuitGame
EXTRN	?EditMode@@3JA:DWORD				; EditMode
EXTRN	?GameSettings@@3UGAME_SETTINGS@@A:BYTE		; GameSettings
EXTRN	?PLR_PlayerHead@@3PAUPlayerStruct@@A:DWORD	; PLR_PlayerHead
EXTRN	?PLR_LocalPlayer@@3PAUPlayerStruct@@A:DWORD	; PLR_LocalPlayer
EXTRN	?PLR_CreatePlayer@@YAPAUPlayerStruct@@W4PLAYER_TYPE@@W4CTRL_TYPE@@JPAUVectorStruct@@PATMatrixUnion@@@Z:NEAR ; PLR_CreatePlayer
EXTRN	?PLR_KillPlayer@@YAXPAUPlayerStruct@@@Z:NEAR	; PLR_KillPlayer
EXTRN	?PLR_SetPlayerType@@YAXPAUPlayerStruct@@W4PLAYER_TYPE@@@Z:NEAR ; PLR_SetPlayerType
;	COMDAT __real@3dcccccd
; File c:\documents and settings\jarhead\desktop\shit to display my love for xbox revolt and fuck you borman-ness\revolt source\source\ctrlread.cpp
CONST	SEGMENT
__real@3dcccccd DD 03dcccccdr			; 0.1
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT __real@40a00000
CONST	SEGMENT
__real@40a00000 DD 040a00000r			; 5
; Function compile flags: /Odt /ZI
CONST	ENDS
;	COMDAT ?CRD_CheckLocalKeys@@YAXXZ
_TEXT	SEGMENT
_ii$82264 = -36						; size = 4
_ii$82254 = -32						; size = 4
_ii$82244 = -28						; size = 4
_ii$82234 = -24						; size = 4
_newPlayer$82214 = -20					; size = 4
_subType$82203 = -16					; size = 4
_subType$82192 = -12					; size = 4
_subType$82187 = -8					; size = 4
_car$ = -4						; size = 4
?CRD_CheckLocalKeys@@YAXXZ PROC NEAR			; CRD_CheckLocalKeys, COMDAT

; 82   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 100				; 00000064H
	push	ebx
	push	esi
	push	edi

; 83   : 	CAR		*car;
; 84   : #if CHRIS_EXTRAS
; 85   : 	REAL	impPos, impMag;
; 86   : 	VEC		vPos, vImp;
; 87   : #endif
; 88   : 
; 89   : 	car = &PLR_LocalPlayer->car;

	mov	eax, DWORD PTR ?PLR_LocalPlayer@@3PAUPlayerStruct@@A ; PLR_LocalPlayer
	add	eax, 44					; 0000002cH
	mov	DWORD PTR _car$[ebp], eax

; 90   : 
; 91   : 	if (car == NULL)

	jne	SHORT $L82178

; 92   : 	{
; 93   : 		return;			// Local player is not controlling a car!

	jmp	$L82176
$L82178:

; 94   : 	}
; 95   : 
; 96   : 	// fuck up cheating rectums
; 97   : 	if (Keys[DIK_X] || Keys[DIK_Y] || Keys[DIK_Z] || Keys[DIK_LCONTROL])

	movsx	eax, BYTE PTR ?Keys@@3PADA+45
	test	eax, eax
	jne	SHORT $L82180
	movsx	eax, BYTE PTR ?Keys@@3PADA+21
	test	eax, eax
	jne	SHORT $L82180
	movsx	eax, BYTE PTR ?Keys@@3PADA+44
	test	eax, eax
	jne	SHORT $L82180
	movsx	eax, BYTE PTR ?Keys@@3PADA+29
	test	eax, eax
	je	SHORT $L82179
$L82180:

; 98   : 		car->CurrentLapStartTime -= MS2TIME(1000);

	mov	eax, DWORD PTR ?TimerFreq@@3KA		; TimerFreq
	xor	edx, edx
	mov	ecx, 1000				; 000003e8H
	div	ecx
	imul	eax, 1000				; 000003e8H
	mov	edx, DWORD PTR _car$[ebp]
	mov	ecx, DWORD PTR [edx+3500]
	sub	ecx, eax
	mov	edx, DWORD PTR _car$[ebp]
	mov	DWORD PTR [edx+3500], ecx
$L82179:

; 99   : 
; 100  : 	// toggle solid ghost?
; 101  : 	if (Keys[DIK_8] && !LastKeys[DIK_8])

	movsx	eax, BYTE PTR ?Keys@@3PADA+9
	test	eax, eax
	je	SHORT $L82181
	movsx	eax, BYTE PTR ?LastKeys@@3PADA+9
	test	eax, eax
	jne	SHORT $L82181

; 102  : 		GhostSolid = !GhostSolid;

	xor	eax, eax
	cmp	DWORD PTR ?GhostSolid@@3JA, 0		; GhostSolid
	sete	al
	mov	DWORD PTR ?GhostSolid@@3JA, eax		; GhostSolid
$L82181:

; 103  : 
; 104  : 	// change car
; 105  : 	if (Keys[DIK_PGUP] && !LastKeys[DIK_PGUP] && Everything)

	movsx	eax, BYTE PTR ?Keys@@3PADA+201
	test	eax, eax
	je	SHORT $L82182
	movsx	eax, BYTE PTR ?LastKeys@@3PADA+201
	test	eax, eax
	jne	SHORT $L82182
	movsx	eax, BYTE PTR ?Everything@@3DA		; Everything
	test	eax, eax
	je	SHORT $L82182

; 106  : 	{
; 107  : 		GameSettings.CarID = PrevValidCarID(GameSettings.CarID);

	mov	eax, DWORD PTR ?GameSettings@@3UGAME_SETTINGS@@A+24
	push	eax
	call	?PrevValidCarID@@YAHH@Z			; PrevValidCarID
	add	esp, 4
	mov	DWORD PTR ?GameSettings@@3UGAME_SETTINGS@@A+24, eax

; 108  : 		SetupCar(PLR_LocalPlayer, GameSettings.CarID);

	mov	eax, DWORD PTR ?GameSettings@@3UGAME_SETTINGS@@A+24
	push	eax
	mov	ecx, DWORD PTR ?PLR_LocalPlayer@@3PAUPlayerStruct@@A ; PLR_LocalPlayer
	push	ecx
	call	?SetupCar@@YAXPAUPlayerStruct@@H@Z	; SetupCar
	add	esp, 8

; 109  : 		SetCarAerialPos(car);

	mov	eax, DWORD PTR _car$[ebp]
	push	eax
	call	?SetCarAerialPos@@YAXPAUCarStruct@@@Z	; SetCarAerialPos
	add	esp, 4

; 110  : 		car->CurrentLapStartTime -= 10000;

	mov	eax, DWORD PTR _car$[ebp]
	mov	ecx, DWORD PTR [eax+3500]
	sub	ecx, 10000				; 00002710H
	mov	edx, DWORD PTR _car$[ebp]
	mov	DWORD PTR [edx+3500], ecx
$L82182:

; 111  : 	}
; 112  : 
; 113  : 	if (Keys[DIK_PGDN] && !LastKeys[DIK_PGDN] && Everything)

	movsx	eax, BYTE PTR ?Keys@@3PADA+209
	test	eax, eax
	je	SHORT $L82183
	movsx	eax, BYTE PTR ?LastKeys@@3PADA+209
	test	eax, eax
	jne	SHORT $L82183
	movsx	eax, BYTE PTR ?Everything@@3DA		; Everything
	test	eax, eax
	je	SHORT $L82183

; 114  : 	{
; 115  : 		GameSettings.CarID = NextValidCarID(GameSettings.CarID);

	mov	eax, DWORD PTR ?GameSettings@@3UGAME_SETTINGS@@A+24
	push	eax
	call	?NextValidCarID@@YAHH@Z			; NextValidCarID
	add	esp, 4
	mov	DWORD PTR ?GameSettings@@3UGAME_SETTINGS@@A+24, eax

; 116  : 		SetupCar(PLR_LocalPlayer, GameSettings.CarID);

	mov	eax, DWORD PTR ?GameSettings@@3UGAME_SETTINGS@@A+24
	push	eax
	mov	ecx, DWORD PTR ?PLR_LocalPlayer@@3PAUPlayerStruct@@A ; PLR_LocalPlayer
	push	ecx
	call	?SetupCar@@YAXPAUPlayerStruct@@H@Z	; SetupCar
	add	esp, 8

; 117  : 		SetCarAerialPos(car);

	mov	eax, DWORD PTR _car$[ebp]
	push	eax
	call	?SetCarAerialPos@@YAXPAUCarStruct@@@Z	; SetCarAerialPos
	add	esp, 4

; 118  : 		car->CurrentLapStartTime -= 10000;

	mov	eax, DWORD PTR _car$[ebp]
	mov	ecx, DWORD PTR [eax+3500]
	sub	ecx, 10000				; 00002710H
	mov	edx, DWORD PTR _car$[ebp]
	mov	DWORD PTR [edx+3500], ecx
$L82183:

; 119  : 	}
; 120  : 
; 121  : 	// ReRead the carinfo file
; 122  : 	if (Keys[DIK_LSHIFT] && Keys[DIK_F1] && !LastKeys[DIK_F1] && Everything) {

	movsx	eax, BYTE PTR ?Keys@@3PADA+42
	test	eax, eax
	je	SHORT $L82184
	movsx	eax, BYTE PTR ?Keys@@3PADA+59
	test	eax, eax
	je	SHORT $L82184
	movsx	eax, BYTE PTR ?LastKeys@@3PADA+59
	test	eax, eax
	jne	SHORT $L82184
	movsx	eax, BYTE PTR ?Everything@@3DA		; Everything
	test	eax, eax
	je	SHORT $L82184

; 123  : 		if (!ReadAllCarInfo(CarInfoFile)){

	mov	eax, DWORD PTR ?CarInfoFile@@3PADA	; CarInfoFile
	push	eax
	call	?ReadAllCarInfo@@YA_NPAD@Z		; ReadAllCarInfo
	add	esp, 4
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $L82185

; 124  : 			QuitGame = TRUE;

	mov	BYTE PTR ?QuitGame@@3DA, 1		; QuitGame

; 125  : 			return;

	jmp	$L82176
$L82185:

; 126  : 		}
; 127  : 		SetAllCarCoMs();

	call	?SetAllCarCoMs@@YAXXZ			; SetAllCarCoMs
$L82184:

; 128  : 	}
; 129  : 
; 130  : 	// change camera?
; 131  : 	if (Keys[DIK_F1] && !LastKeys[DIK_F1]) {

	movsx	eax, BYTE PTR ?Keys@@3PADA+59
	test	eax, eax
	je	SHORT $L82186
	movsx	eax, BYTE PTR ?LastKeys@@3PADA+59
	test	eax, eax
	jne	SHORT $L82186

; 132  : 		long subType;
; 133  : 		if (CAM_MainCamera->Type != CAM_FOLLOW) {

	mov	eax, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	cmp	DWORD PTR [eax], 0
	je	SHORT $L82188

; 134  : 			subType = 0;

	mov	DWORD PTR _subType$82187[ebp], 0

; 135  : 		} else {

	jmp	SHORT $L82189
$L82188:

; 136  : 			subType = ++(CAM_MainCamera->SubType);

	mov	eax, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _subType$82187[ebp], ecx

; 137  : 			if (subType >= CAM_FOLLOW_NTYPES) subType = 0;

	cmp	DWORD PTR _subType$82187[ebp], 6
	jl	SHORT $L82189
	mov	DWORD PTR _subType$82187[ebp], 0
$L82189:

; 138  : 		}
; 139  : 		SetCameraFollow(CAM_MainCamera, PLR_LocalPlayer->ownobj, subType);

	mov	eax, DWORD PTR _subType$82187[ebp]
	push	eax
	mov	ecx, DWORD PTR ?PLR_LocalPlayer@@3PAUPlayerStruct@@A ; PLR_LocalPlayer
	mov	edx, DWORD PTR [ecx+40]
	push	edx
	mov	eax, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	push	eax
	call	?SetCameraFollow@@YAXPAUCameraStruct@@PAUobject_def@@J@Z ; SetCameraFollow
	add	esp, 12					; 0000000cH
$L82186:

; 140  : 	}
; 141  : 
; 142  : 	if (Keys[DIK_F2] && !LastKeys[DIK_F2]) {

	movsx	eax, BYTE PTR ?Keys@@3PADA+60
	test	eax, eax
	je	SHORT $L82191
	movsx	eax, BYTE PTR ?LastKeys@@3PADA+60
	test	eax, eax
	jne	SHORT $L82191

; 143  : 		long subType;
; 144  : 		if (CAM_MainCamera->Type != CAM_ATTACHED) {

	mov	eax, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	cmp	DWORD PTR [eax], 1
	je	SHORT $L82193

; 145  : 			subType = 0;

	mov	DWORD PTR _subType$82192[ebp], 0

; 146  : 		} else {

	jmp	SHORT $L82194
$L82193:

; 147  : 			subType = CAM_MainCamera->SubType + 1;

	mov	eax, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	DWORD PTR _subType$82192[ebp], ecx

; 148  : 			if (subType >= CAM_ATTACHED_NTYPES) subType = 0;

	cmp	DWORD PTR _subType$82192[ebp], 4
	jl	SHORT $L82194
	mov	DWORD PTR _subType$82192[ebp], 0
$L82194:

; 149  : 		}
; 150  : 		SetCameraAttached(CAM_MainCamera, PLR_LocalPlayer->ownobj, subType);

	mov	eax, DWORD PTR _subType$82192[ebp]
	push	eax
	mov	ecx, DWORD PTR ?PLR_LocalPlayer@@3PAUPlayerStruct@@A ; PLR_LocalPlayer
	mov	edx, DWORD PTR [ecx+40]
	push	edx
	mov	eax, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	push	eax
	call	?SetCameraAttached@@YAXPAUCameraStruct@@PAUobject_def@@J@Z ; SetCameraAttached
	add	esp, 12					; 0000000cH
$L82191:

; 151  : 	}
; 152  : 
; 153  : 	if (Keys[DIK_F3] && !LastKeys[DIK_F3]) {

	movsx	eax, BYTE PTR ?Keys@@3PADA+61
	test	eax, eax
	je	SHORT $L82196
	movsx	eax, BYTE PTR ?LastKeys@@3PADA+61
	test	eax, eax
	jne	SHORT $L82196

; 154  : 		if (CAM_MainCamera->Type != CAM_FREEDOM) {

	mov	eax, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	cmp	DWORD PTR [eax], 3
	je	SHORT $L82197

; 155  : 			SetCameraFreedom(CAM_MainCamera, NULL, 0);

	push	0
	push	0
	mov	eax, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	push	eax
	call	?SetCameraFreedom@@YAXPAUCameraStruct@@PAUobject_def@@J@Z ; SetCameraFreedom
	add	esp, 12					; 0000000cH

; 156  : 		} else {

	jmp	SHORT $L82196
$L82197:

; 157  : 			if (CAM_MainCamera->Object == NULL) {

	mov	eax, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	cmp	DWORD PTR [eax+164], 0
	jne	SHORT $L82199

; 158  : 				SetCameraFreedom(CAM_MainCamera, PLR_LocalPlayer->ownobj, 0);

	push	0
	mov	eax, DWORD PTR ?PLR_LocalPlayer@@3PAUPlayerStruct@@A ; PLR_LocalPlayer
	mov	ecx, DWORD PTR [eax+40]
	push	ecx
	mov	edx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	push	edx
	call	?SetCameraFreedom@@YAXPAUCameraStruct@@PAUobject_def@@J@Z ; SetCameraFreedom
	add	esp, 12					; 0000000cH

; 159  : 			} else {

	jmp	SHORT $L82196
$L82199:

; 160  : 				SetCameraFreedom(CAM_MainCamera, NULL, 0);

	push	0
	push	0
	mov	eax, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	push	eax
	call	?SetCameraFreedom@@YAXPAUCameraStruct@@PAUobject_def@@J@Z ; SetCameraFreedom
	add	esp, 12					; 0000000cH
$L82196:

; 161  : 			}
; 162  : 		}
; 163  : 	}
; 164  : 
; 165  : 	if (Keys[DIK_F4] && EditMode) SetCameraEdit(CAM_MainCamera, NULL, 0);

	movsx	eax, BYTE PTR ?Keys@@3PADA+62
	test	eax, eax
	je	SHORT $L82201
	cmp	DWORD PTR ?EditMode@@3JA, 0		; EditMode
	je	SHORT $L82201
	push	0
	push	0
	mov	eax, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	push	eax
	call	?SetCameraEdit@@YAXPAUCameraStruct@@PAUobject_def@@J@Z ; SetCameraEdit
	add	esp, 12					; 0000000cH
$L82201:

; 166  : 
; 167  : 	if (Keys[DIK_F5] && !LastKeys[DIK_F5]) {

	movsx	eax, BYTE PTR ?Keys@@3PADA+63
	test	eax, eax
	je	SHORT $L82202
	movsx	eax, BYTE PTR ?LastKeys@@3PADA+63
	test	eax, eax
	jne	SHORT $L82202

; 168  : 		long subType;
; 169  : 		if (CAM_MainCamera->Type != CAM_RAIL) {

	mov	eax, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	cmp	DWORD PTR [eax], 2
	je	SHORT $L82204

; 170  : 			subType = 0;

	mov	DWORD PTR _subType$82203[ebp], 0

; 171  : 		} else {

	jmp	SHORT $L82205
$L82204:

; 172  : 			subType = CAM_MainCamera->SubType + 1;

	mov	eax, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	DWORD PTR _subType$82203[ebp], ecx

; 173  : 			if (subType == CAM_RAIL_NTYPES) subType = 0;

	cmp	DWORD PTR _subType$82203[ebp], 2
	jne	SHORT $L82205
	mov	DWORD PTR _subType$82203[ebp], 0
$L82205:

; 174  : 		}
; 175  : 		SetCameraRail(CAM_MainCamera, PLR_LocalPlayer->ownobj, subType);

	mov	eax, DWORD PTR _subType$82203[ebp]
	push	eax
	mov	ecx, DWORD PTR ?PLR_LocalPlayer@@3PAUPlayerStruct@@A ; PLR_LocalPlayer
	mov	edx, DWORD PTR [ecx+40]
	push	edx
	mov	eax, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	push	eax
	call	?SetCameraRail@@YAXPAUCameraStruct@@PAUobject_def@@J@Z ; SetCameraRail
	add	esp, 12					; 0000000cH
$L82202:

; 176  : 	}
; 177  : 
; 178  : 
; 179  : 	// Lock back wheels
; 180  : 	if (Keys[DIK_SPACE]) {

	movsx	eax, BYTE PTR ?Keys@@3PADA+57
	test	eax, eax
	je	SHORT $L82207

; 181  : 		SetWheelLocked(&car->Wheel[2]);

	mov	eax, DWORD PTR _car$[ebp]
	mov	ecx, DWORD PTR [eax+2280]
	or	ecx, 64					; 00000040H
	mov	edx, DWORD PTR _car$[ebp]
	mov	DWORD PTR [edx+2280], ecx

; 182  : 		SetWheelLocked(&car->Wheel[3]);

	mov	eax, DWORD PTR _car$[ebp]
	mov	ecx, DWORD PTR [eax+2640]
	or	ecx, 64					; 00000040H
	mov	edx, DWORD PTR _car$[ebp]
	mov	DWORD PTR [edx+2640], ecx

; 183  : 	} else {

	jmp	SHORT $L82208
$L82207:

; 184  : 		SetWheelNotLocked(&car->Wheel[2]);

	mov	eax, DWORD PTR _car$[ebp]
	mov	ecx, DWORD PTR [eax+2280]
	and	ecx, -65				; ffffffbfH
	mov	edx, DWORD PTR _car$[ebp]
	mov	DWORD PTR [edx+2280], ecx

; 185  : 		SetWheelNotLocked(&car->Wheel[3]);

	mov	eax, DWORD PTR _car$[ebp]
	mov	ecx, DWORD PTR [eax+2640]
	and	ecx, -65				; ffffffbfH
	mov	edx, DWORD PTR _car$[ebp]
	mov	DWORD PTR [edx+2640], ecx
$L82208:

; 186  : 	}
; 187  : 
; 188  : 	// Turbo boost
; 189  : 	/*if (Keys[DIK_C] && Everything) {
; 190  : 		PLR_LocalPlayer->car.Body->Centre.Boost = Real(10000);
; 191  : 	} else {
; 192  : 		PLR_LocalPlayer->car.Body->Centre.Boost = ZERO;
; 193  : 	}*/
; 194  : 
; 195  : 	// AutoBraking?
; 196  : 	if (Keys[DIK_4] && !LastKeys[DIK_4] && Everything) {

	movsx	eax, BYTE PTR ?Keys@@3PADA+5
	test	eax, eax
	je	SHORT $L82209
	movsx	eax, BYTE PTR ?LastKeys@@3PADA+5
	test	eax, eax
	jne	SHORT $L82209
	movsx	eax, BYTE PTR ?Everything@@3DA		; Everything
	test	eax, eax
	je	SHORT $L82209

; 197  : 		GameSettings.AutoBrake = !GameSettings.AutoBrake;

	xor	eax, eax
	cmp	DWORD PTR ?GameSettings@@3UGAME_SETTINGS@@A+20, 0
	sete	al
	mov	DWORD PTR ?GameSettings@@3UGAME_SETTINGS@@A+20, eax
$L82209:

; 198  : 	}
; 199  : 
; 200  : 	// ReStart ghost car
; 201  : 	if (Keys[DIK_5] && Everything) {

	movsx	eax, BYTE PTR ?Keys@@3PADA+6
	test	eax, eax
	je	SHORT $L82210
	movsx	eax, BYTE PTR ?Everything@@3DA		; Everything
	test	eax, eax
	je	SHORT $L82210

; 202  : 		if (Keys[DIK_LSHIFT]) {

	movsx	eax, BYTE PTR ?Keys@@3PADA+42
	test	eax, eax
	je	SHORT $L82211

; 203  : 			ClearBestGhostData();

	call	?ClearBestGhostData@@YAXXZ		; ClearBestGhostData
$L82211:

; 204  : 		}
; 205  : 		InitBestGhostData();

	call	?InitBestGhostData@@YAXXZ		; InitBestGhostData
$L82210:

; 206  : 	}
; 207  : 
; 208  : 	// Add another CPU car
; 209  : 	if (Keys[DIK_9] && !LastKeys[DIK_9] && Everything) {

	movsx	eax, BYTE PTR ?Keys@@3PADA+10
	test	eax, eax
	je	SHORT $L82212
	movsx	eax, BYTE PTR ?LastKeys@@3PADA+10
	test	eax, eax
	jne	SHORT $L82212
	movsx	eax, BYTE PTR ?Everything@@3DA		; Everything
	test	eax, eax
	je	SHORT $L82212

; 210  : 		PLR_CreatePlayer(PLAYER_CPU, CTRL_TYPE_NONE, 0, &CAM_MainCamera->WPos, &IdentityMatrix);

	push	OFFSET FLAT:?IdentityMatrix@@3TMatrixUnion@@A ; IdentityMatrix
	mov	eax, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	add	eax, 68					; 00000044H
	push	eax
	push	0
	push	0
	push	3
	call	?PLR_CreatePlayer@@YAPAUPlayerStruct@@W4PLAYER_TYPE@@W4CTRL_TYPE@@JPAUVectorStruct@@PATMatrixUnion@@@Z ; PLR_CreatePlayer
	add	esp, 20					; 00000014H
$L82212:

; 211  : 	}
; 212  : 
; 213  : 	// Take control of next computer car
; 214  : 	if (Keys[DIK_0] && !LastKeys[DIK_0] && Everything) {

	movsx	eax, BYTE PTR ?Keys@@3PADA+11
	test	eax, eax
	je	$L82213
	movsx	eax, BYTE PTR ?LastKeys@@3PADA+11
	test	eax, eax
	jne	$L82213
	movsx	eax, BYTE PTR ?Everything@@3DA		; Everything
	test	eax, eax
	je	$L82213

; 215  : 		PLAYER *newPlayer;
; 216  : 
; 217  : 		for (newPlayer = PLR_LocalPlayer->next; newPlayer != NULL; newPlayer = newPlayer->next) {

	mov	eax, DWORD PTR ?PLR_LocalPlayer@@3PAUPlayerStruct@@A ; PLR_LocalPlayer
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _newPlayer$82214[ebp], ecx
	jmp	SHORT $L82215
$L82216:
	mov	eax, DWORD PTR _newPlayer$82214[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _newPlayer$82214[ebp], ecx
$L82215:
	cmp	DWORD PTR _newPlayer$82214[ebp], 0
	je	SHORT $L82217

; 218  : 			if (newPlayer->type == PLAYER_CPU || newPlayer->type == PLAYER_LOCAL) {

	mov	eax, DWORD PTR _newPlayer$82214[ebp]
	cmp	DWORD PTR [eax+4], 3
	je	SHORT $L82219
	mov	eax, DWORD PTR _newPlayer$82214[ebp]
	cmp	DWORD PTR [eax+4], 1
	jne	SHORT $L82218
$L82219:

; 219  : 				break;

	jmp	SHORT $L82217
$L82218:

; 220  : 			}
; 221  : 		}

	jmp	SHORT $L82216
$L82217:

; 222  : 		if (newPlayer == NULL) {

	cmp	DWORD PTR _newPlayer$82214[ebp], 0
	jne	SHORT $L82220

; 223  : 			for (newPlayer = PLR_PlayerHead; newPlayer != NULL; newPlayer = newPlayer->next) {

	mov	eax, DWORD PTR ?PLR_PlayerHead@@3PAUPlayerStruct@@A ; PLR_PlayerHead
	mov	DWORD PTR _newPlayer$82214[ebp], eax
	jmp	SHORT $L82221
$L82222:
	mov	eax, DWORD PTR _newPlayer$82214[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _newPlayer$82214[ebp], ecx
$L82221:
	cmp	DWORD PTR _newPlayer$82214[ebp], 0
	je	SHORT $L82220

; 224  : 				if (newPlayer->type == PLAYER_CPU || newPlayer->type == PLAYER_LOCAL) {

	mov	eax, DWORD PTR _newPlayer$82214[ebp]
	cmp	DWORD PTR [eax+4], 3
	je	SHORT $L82225
	mov	eax, DWORD PTR _newPlayer$82214[ebp]
	cmp	DWORD PTR [eax+4], 1
	jne	SHORT $L82224
$L82225:

; 225  : 					break;

	jmp	SHORT $L82220
$L82224:

; 226  : 				}
; 227  : 			}

	jmp	SHORT $L82222
$L82220:

; 228  : 		}
; 229  : 		if (newPlayer != NULL) {

	cmp	DWORD PTR _newPlayer$82214[ebp], 0
	je	SHORT $L82213

; 230  : 			if (Keys[DIK_LSHIFT]) {

	movsx	eax, BYTE PTR ?Keys@@3PADA+42
	test	eax, eax
	je	SHORT $L82227

; 231  : 				PLR_KillPlayer(PLR_LocalPlayer);

	mov	eax, DWORD PTR ?PLR_LocalPlayer@@3PAUPlayerStruct@@A ; PLR_LocalPlayer
	push	eax
	call	?PLR_KillPlayer@@YAXPAUPlayerStruct@@@Z	; PLR_KillPlayer
	add	esp, 4

; 232  : 			} else {

	jmp	SHORT $L82228
$L82227:

; 233  : 				PLR_SetPlayerType(PLR_LocalPlayer, newPlayer->type);

	mov	eax, DWORD PTR _newPlayer$82214[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR ?PLR_LocalPlayer@@3PAUPlayerStruct@@A ; PLR_LocalPlayer
	push	edx
	call	?PLR_SetPlayerType@@YAXPAUPlayerStruct@@W4PLAYER_TYPE@@@Z ; PLR_SetPlayerType
	add	esp, 8
$L82228:

; 234  : 			}
; 235  : 			PLR_SetPlayerType(newPlayer, PLAYER_LOCAL);

	push	1
	mov	eax, DWORD PTR _newPlayer$82214[ebp]
	push	eax
	call	?PLR_SetPlayerType@@YAXPAUPlayerStruct@@W4PLAYER_TYPE@@@Z ; PLR_SetPlayerType
	add	esp, 8

; 236  : 			PLR_LocalPlayer = newPlayer;

	mov	eax, DWORD PTR _newPlayer$82214[ebp]
	mov	DWORD PTR ?PLR_LocalPlayer@@3PAUPlayerStruct@@A, eax ; PLR_LocalPlayer

; 237  : 			CAM_MainCamera->Object = PLR_LocalPlayer->ownobj;

	mov	eax, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	mov	ecx, DWORD PTR ?PLR_LocalPlayer@@3PAUPlayerStruct@@A ; PLR_LocalPlayer
	mov	edx, DWORD PTR [ecx+40]
	mov	DWORD PTR [eax+164], edx
$L82213:

; 238  : 		}
; 239  : 	}
; 240  : 
; 241  : 
; 242  : #if PHYSICS_DEBUG_KEYS
; 243  : 
; 244  : 	if (!Everything)

	movsx	eax, BYTE PTR ?Everything@@3DA		; Everything
	test	eax, eax
	jne	SHORT $L82229

; 245  : 		return;

	jmp	$L82176
$L82229:

; 246  : 
; 247  : 	// Change speed units 
; 248  : 	if (Keys[DIK_1] && !LastKeys[DIK_1]) {

	movsx	eax, BYTE PTR ?Keys@@3PADA+2
	test	eax, eax
	je	SHORT $L82230
	movsx	eax, BYTE PTR ?LastKeys@@3PADA+2
	test	eax, eax
	jne	SHORT $L82230

; 249  : 		//CAR_WheelsHaveSuspension = !CAR_WheelsHaveSuspension;
; 250  : 		SpeedUnits++;

	mov	eax, DWORD PTR ?SpeedUnits@@3JA		; SpeedUnits
	add	eax, 1
	mov	DWORD PTR ?SpeedUnits@@3JA, eax		; SpeedUnits

; 251  : 		if (SpeedUnits == SPEED_NTYPES) SpeedUnits = 0;

	cmp	DWORD PTR ?SpeedUnits@@3JA, 3		; SpeedUnits
	jne	SHORT $L82230
	mov	DWORD PTR ?SpeedUnits@@3JA, 0		; SpeedUnits
$L82230:

; 252  : 	}
; 253  : 
; 254  : 	// Draw Car axes?
; 255  : 	if (Keys[DIK_2] && !LastKeys[DIK_2]) CAR_DrawCarAxes = !CAR_DrawCarAxes;

	movsx	eax, BYTE PTR ?Keys@@3PADA+3
	test	eax, eax
	je	SHORT $L82232
	movsx	eax, BYTE PTR ?LastKeys@@3PADA+3
	test	eax, eax
	jne	SHORT $L82232
	movzx	eax, BYTE PTR ?CAR_DrawCarAxes@@3_NA	; CAR_DrawCarAxes
	neg	eax
	sbb	eax, eax
	inc	eax
	mov	BYTE PTR ?CAR_DrawCarAxes@@3_NA, al	; CAR_DrawCarAxes
$L82232:

; 256  : 
; 257  : 	// adjust the friction coefficient
; 258  : 	if (Keys[DIK_P] && !LastKeys[DIK_P]) {

	movsx	eax, BYTE PTR ?Keys@@3PADA+25
	test	eax, eax
	je	$L82233
	movsx	eax, BYTE PTR ?LastKeys@@3PADA+25
	test	eax, eax
	jne	$L82233

; 259  : 		int ii;
; 260  : 		for (ii = 0; ii < CAR_NWHEELS; ii++) {

	mov	DWORD PTR _ii$82234[ebp], 0
	jmp	SHORT $L82235
$L82236:
	mov	eax, DWORD PTR _ii$82234[ebp]
	add	eax, 1
	mov	DWORD PTR _ii$82234[ebp], eax
$L82235:
	cmp	DWORD PTR _ii$82234[ebp], 4
	jge	$L82233

; 261  : 			car->Wheel[ii].StaticFriction += Real(0.1);

	mov	eax, DWORD PTR _ii$82234[ebp]
	imul	eax, 360				; 00000168H
	mov	ecx, DWORD PTR _car$[ebp]
	fld	DWORD PTR [ecx+eax+1592]
	fadd	DWORD PTR __real@3dcccccd
	mov	edx, DWORD PTR _ii$82234[ebp]
	imul	edx, 360				; 00000168H
	mov	eax, DWORD PTR _car$[ebp]
	fstp	DWORD PTR [eax+edx+1592]

; 262  : 			Limit(car->Wheel[ii].StaticFriction, ZERO, Real(5.0));

	mov	eax, DWORD PTR _ii$82234[ebp]
	imul	eax, 360				; 00000168H
	mov	ecx, DWORD PTR _car$[ebp]
	fld	DWORD PTR [ecx+eax+1592]
	fcomp	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L82239
	mov	eax, DWORD PTR _ii$82234[ebp]
	imul	eax, 360				; 00000168H
	mov	ecx, DWORD PTR _car$[ebp]
	mov	DWORD PTR [ecx+eax+1592], 0
$L82239:
	mov	eax, DWORD PTR _ii$82234[ebp]
	imul	eax, 360				; 00000168H
	mov	ecx, DWORD PTR _car$[ebp]
	fld	DWORD PTR [ecx+eax+1592]
	fcomp	DWORD PTR __real@40a00000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $L82241
	mov	eax, DWORD PTR _ii$82234[ebp]
	imul	eax, 360				; 00000168H
	mov	ecx, DWORD PTR _car$[ebp]
	mov	DWORD PTR [ecx+eax+1592], 1084227584	; 40a00000H
$L82241:

; 263  : 		}

	jmp	$L82236
$L82233:

; 264  : 	}
; 265  : 	if (Keys[DIK_O] && !LastKeys[DIK_O]) {

	movsx	eax, BYTE PTR ?Keys@@3PADA+24
	test	eax, eax
	je	$L82243
	movsx	eax, BYTE PTR ?LastKeys@@3PADA+24
	test	eax, eax
	jne	$L82243

; 266  : 		int ii;
; 267  : 		for (ii = 0; ii < CAR_NWHEELS; ii++) {

	mov	DWORD PTR _ii$82244[ebp], 0
	jmp	SHORT $L82245
$L82246:
	mov	eax, DWORD PTR _ii$82244[ebp]
	add	eax, 1
	mov	DWORD PTR _ii$82244[ebp], eax
$L82245:
	cmp	DWORD PTR _ii$82244[ebp], 4
	jge	$L82243

; 268  : 			car->Wheel[ii].StaticFriction -= Real(0.1);

	mov	eax, DWORD PTR _ii$82244[ebp]
	imul	eax, 360				; 00000168H
	mov	ecx, DWORD PTR _car$[ebp]
	fld	DWORD PTR [ecx+eax+1592]
	fsub	DWORD PTR __real@3dcccccd
	mov	edx, DWORD PTR _ii$82244[ebp]
	imul	edx, 360				; 00000168H
	mov	eax, DWORD PTR _car$[ebp]
	fstp	DWORD PTR [eax+edx+1592]

; 269  : 			Limit(car->Wheel[ii].StaticFriction, ZERO, Real(5.0));

	mov	eax, DWORD PTR _ii$82244[ebp]
	imul	eax, 360				; 00000168H
	mov	ecx, DWORD PTR _car$[ebp]
	fld	DWORD PTR [ecx+eax+1592]
	fcomp	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L82249
	mov	eax, DWORD PTR _ii$82244[ebp]
	imul	eax, 360				; 00000168H
	mov	ecx, DWORD PTR _car$[ebp]
	mov	DWORD PTR [ecx+eax+1592], 0
$L82249:
	mov	eax, DWORD PTR _ii$82244[ebp]
	imul	eax, 360				; 00000168H
	mov	ecx, DWORD PTR _car$[ebp]
	fld	DWORD PTR [ecx+eax+1592]
	fcomp	DWORD PTR __real@40a00000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $L82251
	mov	eax, DWORD PTR _ii$82244[ebp]
	imul	eax, 360				; 00000168H
	mov	ecx, DWORD PTR _car$[ebp]
	mov	DWORD PTR [ecx+eax+1592], 1084227584	; 40a00000H
$L82251:

; 270  : 		}

	jmp	$L82246
$L82243:

; 271  : 	}
; 272  : 	if (Keys[DIK_L] && !LastKeys[DIK_L]) {

	movsx	eax, BYTE PTR ?Keys@@3PADA+38
	test	eax, eax
	je	$L82253
	movsx	eax, BYTE PTR ?LastKeys@@3PADA+38
	test	eax, eax
	jne	$L82253

; 273  : 		int ii;
; 274  : 		for (ii = 0; ii < CAR_NWHEELS; ii++) {

	mov	DWORD PTR _ii$82254[ebp], 0
	jmp	SHORT $L82255
$L82256:
	mov	eax, DWORD PTR _ii$82254[ebp]
	add	eax, 1
	mov	DWORD PTR _ii$82254[ebp], eax
$L82255:
	cmp	DWORD PTR _ii$82254[ebp], 4
	jge	$L82253

; 275  : 			car->Wheel[ii].KineticFriction += Real(0.1);

	mov	eax, DWORD PTR _ii$82254[ebp]
	imul	eax, 360				; 00000168H
	mov	ecx, DWORD PTR _car$[ebp]
	fld	DWORD PTR [ecx+eax+1596]
	fadd	DWORD PTR __real@3dcccccd
	mov	edx, DWORD PTR _ii$82254[ebp]
	imul	edx, 360				; 00000168H
	mov	eax, DWORD PTR _car$[ebp]
	fstp	DWORD PTR [eax+edx+1596]

; 276  : 			Limit(car->Wheel[ii].KineticFriction, ZERO, Real(5.0));

	mov	eax, DWORD PTR _ii$82254[ebp]
	imul	eax, 360				; 00000168H
	mov	ecx, DWORD PTR _car$[ebp]
	fld	DWORD PTR [ecx+eax+1596]
	fcomp	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L82259
	mov	eax, DWORD PTR _ii$82254[ebp]
	imul	eax, 360				; 00000168H
	mov	ecx, DWORD PTR _car$[ebp]
	mov	DWORD PTR [ecx+eax+1596], 0
$L82259:
	mov	eax, DWORD PTR _ii$82254[ebp]
	imul	eax, 360				; 00000168H
	mov	ecx, DWORD PTR _car$[ebp]
	fld	DWORD PTR [ecx+eax+1596]
	fcomp	DWORD PTR __real@40a00000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $L82261
	mov	eax, DWORD PTR _ii$82254[ebp]
	imul	eax, 360				; 00000168H
	mov	ecx, DWORD PTR _car$[ebp]
	mov	DWORD PTR [ecx+eax+1596], 1084227584	; 40a00000H
$L82261:

; 277  : 		}

	jmp	$L82256
$L82253:

; 278  : 	}
; 279  : 	if (Keys[DIK_K] && !LastKeys[DIK_K]) {

	movsx	eax, BYTE PTR ?Keys@@3PADA+37
	test	eax, eax
	je	$L82263
	movsx	eax, BYTE PTR ?LastKeys@@3PADA+37
	test	eax, eax
	jne	$L82263

; 280  : 		int ii;
; 281  : 		for (ii = 0; ii < CAR_NWHEELS; ii++) {

	mov	DWORD PTR _ii$82264[ebp], 0
	jmp	SHORT $L82265
$L82266:
	mov	eax, DWORD PTR _ii$82264[ebp]
	add	eax, 1
	mov	DWORD PTR _ii$82264[ebp], eax
$L82265:
	cmp	DWORD PTR _ii$82264[ebp], 4
	jge	$L82263

; 282  : 			car->Wheel[ii].KineticFriction -= Real(0.1);

	mov	eax, DWORD PTR _ii$82264[ebp]
	imul	eax, 360				; 00000168H
	mov	ecx, DWORD PTR _car$[ebp]
	fld	DWORD PTR [ecx+eax+1596]
	fsub	DWORD PTR __real@3dcccccd
	mov	edx, DWORD PTR _ii$82264[ebp]
	imul	edx, 360				; 00000168H
	mov	eax, DWORD PTR _car$[ebp]
	fstp	DWORD PTR [eax+edx+1596]

; 283  : 			Limit(car->Wheel[ii].KineticFriction, ZERO, Real(5.0));

	mov	eax, DWORD PTR _ii$82264[ebp]
	imul	eax, 360				; 00000168H
	mov	ecx, DWORD PTR _car$[ebp]
	fld	DWORD PTR [ecx+eax+1596]
	fcomp	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L82269
	mov	eax, DWORD PTR _ii$82264[ebp]
	imul	eax, 360				; 00000168H
	mov	ecx, DWORD PTR _car$[ebp]
	mov	DWORD PTR [ecx+eax+1596], 0
$L82269:
	mov	eax, DWORD PTR _ii$82264[ebp]
	imul	eax, 360				; 00000168H
	mov	ecx, DWORD PTR _car$[ebp]
	fld	DWORD PTR [ecx+eax+1596]
	fcomp	DWORD PTR __real@40a00000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $L82271
	mov	eax, DWORD PTR _ii$82264[ebp]
	imul	eax, 360				; 00000168H
	mov	ecx, DWORD PTR _car$[ebp]
	mov	DWORD PTR [ecx+eax+1596], 1084227584	; 40a00000H
$L82271:

; 284  : 		}

	jmp	$L82266
$L82263:

; 285  : 	}
; 286  : 
; 287  : 	// Apply impulses to car from keypresses
; 288  : #ifdef CHRIS_EXTRAS
; 289  : 	impPos = 10.0f;
; 290  : 	impMag = 100.0f;
; 291  : 	SetVec(&vPos, 0.0f, 0.0f, 0.0f);
; 292  : 
; 293  : 	if (Keys[DIK_X]) {
; 294  : 		if (Keys[DIK_LSHIFT]) {
; 295  : 			SetVec(&vImp, -impMag, 0.0f, 0.0f);
; 296  : 			//VecMulMat(&vTmp, &car->Body.Centre.WMatrix, &vImp);
; 297  : 			ApplyBodyImpulse(car->Body, &vImp, &vPos);
; 298  : 		} else {
; 299  : 			SetVec(&vImp, impMag, 0.0f, 0.0f);
; 300  : 			//VecMulMat(&vTmp, &car->Body.Centre.WMatrix, &vImp);
; 301  : 			ApplyBodyImpulse(car->Body, &vImp, &vPos);
; 302  : 		}
; 303  : 	}
; 304  : 	if (Keys[DIK_Y]) {
; 305  : 		if (Keys[DIK_LSHIFT]) {
; 306  : 			SetVec(&vImp, 0.0f, -impMag, 0.0f);
; 307  : 			//VecMulMat(&vTmp, &car->Body.Centre.WMatrix, &vImp);
; 308  : 			ApplyBodyImpulse(car->Body, &vImp, &vPos);
; 309  : 		} else {
; 310  : 			SetVec(&vImp, 0.0f, impMag, 0.0f);
; 311  : 			//VecMulMat(&vTmp, &car->Body.Centre.WMatrix, &vImp);
; 312  : 			ApplyBodyImpulse(car->Body, &vImp, &vPos);
; 313  : 		}
; 314  : 	}
; 315  : 	if (Keys[DIK_Z]) {
; 316  : 		if (Keys[DIK_LSHIFT]) {
; 317  : 			SetVec(&vImp, 0.0f, 0.0f, -impMag);
; 318  : 			//VecMulMat(&vTmp, &car->Body.Centre.WMatrix, &vImp);
; 319  : 			ApplyBodyImpulse(car->Body, &vImp, &vPos);
; 320  : 		} else {
; 321  : 			SetVec(&vImp, 0.0f, 0.0f, impMag);
; 322  : 			//VecMulMat(&vTmp, &car->Body.Centre.WMatrix, &vImp);
; 323  : 			ApplyBodyImpulse(car->Body, &vImp, &vPos);
; 324  : 		}
; 325  : 	}
; 326  : 
; 327  : 
; 328  : 	if (Keys[DIK_B]) {
; 329  : 		if (Keys[DIK_LSHIFT]) {
; 330  : 			SetVec(&vPos, 0.0f, 0.0f, impPos);
; 331  : 			SetVec(&vImp, 0.0f, -impMag, 0.0f);
; 332  : 			ApplyBodyImpulse(car->Body, &vImp, &vPos);
; 333  : 			SetVec(&vPos, 0.0f, 0.0f, -impPos);
; 334  : 			SetVec(&vImp, 0.0f, impMag, 0.0f);
; 335  : 			ApplyBodyImpulse(car->Body, &vImp, &vPos);
; 336  : 		} else {
; 337  : 			SetVec(&vPos, 0.0f, 0.0f, impPos);
; 338  : 			SetVec(&vImp, 0.0f, impMag, 0.0f);
; 339  : 			ApplyBodyImpulse(car->Body, &vImp, &vPos);
; 340  : 			SetVec(&vPos, 0.0f, 0.0f, -impPos);
; 341  : 			SetVec(&vImp, 0.0f, -impMag, 0.0f);
; 342  : 			ApplyBodyImpulse(car->Body, &vImp, &vPos);
; 343  : 		}
; 344  : 	}
; 345  : 	if (Keys[DIK_N]) {
; 346  : 		if (Keys[DIK_LSHIFT]) {
; 347  : 			SetVec(&vPos, 0.0f, 0.0f, impPos);
; 348  : 			SetVec(&vImp, impMag, 0.0f, 0.0f);
; 349  : 			ApplyBodyImpulse(car->Body, &vImp, &vPos);
; 350  : 			SetVec(&vPos, 0.0f, 0.0f, -impPos);
; 351  : 			SetVec(&vImp, -impMag, 0.0f, 0.0f);
; 352  : 			ApplyBodyImpulse(car->Body, &vImp, &vPos);
; 353  : 		} else {
; 354  : 			SetVec(&vPos, 0.0f, 0.0f, -impPos);
; 355  : 			SetVec(&vImp, impMag, 0.0f, 0.0f);
; 356  : 			ApplyBodyImpulse(car->Body, &vImp, &vPos);
; 357  : 			SetVec(&vPos, 0.0f, 0.0f, impPos);
; 358  : 			SetVec(&vImp, -impMag, 0.0f, 0.0f);
; 359  : 			ApplyBodyImpulse(car->Body, &vImp, &vPos);
; 360  : 		}
; 361  : 	}
; 362  : 	if (Keys[DIK_M]) {
; 363  : 		if (Keys[DIK_LSHIFT]) {
; 364  : 			SetVec(&vPos, 0.0f, impPos, 0.0f);
; 365  : 			SetVec(&vImp, impMag, 0.0f, 0.0f);
; 366  : 			ApplyBodyImpulse(car->Body, &vImp, &vPos);
; 367  : 			SetVec(&vPos, 0.0f, -impPos, 0.0f);
; 368  : 			SetVec(&vImp, -impMag, 0.0f, 0.0f);
; 369  : 			ApplyBodyImpulse(car->Body, &vImp, &vPos);
; 370  : 		} else {
; 371  : 			SetVec(&vPos, 0.0f, -impPos, 0.0f);
; 372  : 			SetVec(&vImp, impMag, 0.0f, 0.0f);
; 373  : 			ApplyBodyImpulse(car->Body, &vImp, &vPos);
; 374  : 			SetVec(&vPos, 0.0f, impPos, 0.0f);
; 375  : 			SetVec(&vImp, -impMag, 0.0f, 0.0f);
; 376  : 			ApplyBodyImpulse(car->Body, &vImp, &vPos);
; 377  : 		}
; 378  : 	}
; 379  : #endif
; 380  : 
; 381  : 	// Stop motion
; 382  : 	if (Keys[DIK_T]) {

	movsx	eax, BYTE PTR ?Keys@@3PADA+20
	test	eax, eax
	je	SHORT $L82176

; 383  : 		SetVecZero(&car->Body->AngVel);

	mov	eax, DWORD PTR _car$[ebp]
	mov	ecx, DWORD PTR [eax+856]
	mov	DWORD PTR [ecx+332], 0
	mov	eax, DWORD PTR _car$[ebp]
	mov	ecx, DWORD PTR [eax+856]
	mov	DWORD PTR [ecx+336], 0
	mov	eax, DWORD PTR _car$[ebp]
	mov	ecx, DWORD PTR [eax+856]
	mov	DWORD PTR [ecx+340], 0

; 384  : 		SetVecZero(&car->Body->Centre.Vel);

	mov	eax, DWORD PTR _car$[ebp]
	mov	ecx, DWORD PTR [eax+856]
	mov	DWORD PTR [ecx+32], 0
	mov	eax, DWORD PTR _car$[ebp]
	mov	ecx, DWORD PTR [eax+856]
	mov	DWORD PTR [ecx+36], 0
	mov	eax, DWORD PTR _car$[ebp]
	mov	ecx, DWORD PTR [eax+856]
	mov	DWORD PTR [ecx+40], 0
$L82176:

; 385  : 	}
; 386  : 
; 387  : #endif
; 388  : 
; 389  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?CRD_CheckLocalKeys@@YAXXZ ENDP				; CRD_CheckLocalKeys
_TEXT	ENDS
PUBLIC	?CRD_InitPlayerControl@@YAXPAUPlayerStruct@@W4CTRL_TYPE@@@Z ; CRD_InitPlayerControl
PUBLIC	?CRD_KeyboardInput@@YAXPAUCtrlStruct@@@Z	; CRD_KeyboardInput
PUBLIC	?CRD_JoystickInput@@YAXPAUCtrlStruct@@@Z	; CRD_JoystickInput
; Function compile flags: /Odt /ZI
;	COMDAT ?CRD_InitPlayerControl@@YAXPAUPlayerStruct@@W4CTRL_TYPE@@@Z
_TEXT	SEGMENT
tv64 = -68						; size = 4
_player$ = 8						; size = 4
_CtrlType$ = 12						; size = 4
?CRD_InitPlayerControl@@YAXPAUPlayerStruct@@W4CTRL_TYPE@@@Z PROC NEAR ; CRD_InitPlayerControl, COMDAT

; 395  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 396  : 	switch(CtrlType)

	mov	eax, DWORD PTR _CtrlType$[ebp]
	mov	DWORD PTR tv64[ebp], eax
	cmp	DWORD PTR tv64[ebp], 1
	je	SHORT $L82282
	cmp	DWORD PTR tv64[ebp], 2
	je	SHORT $L82284
	jmp	SHORT $L82277
$L82282:

; 397  : 	{
; 398  : 		case CTRL_TYPE_KBD:
; 399  : 		player->ctrlhandler = (CTRL_HANDLER)CRD_KeyboardInput;

	mov	eax, DWORD PTR _player$[ebp]
	mov	DWORD PTR [eax+20], OFFSET FLAT:?CRD_KeyboardInput@@YAXPAUCtrlStruct@@@Z ; CRD_KeyboardInput

; 400  : 		break;

	jmp	SHORT $L82277
$L82284:

; 401  : 
; 402  : 		case CTRL_TYPE_JOY:
; 403  : 		player->ctrlhandler = (CTRL_HANDLER)CRD_JoystickInput;

	mov	eax, DWORD PTR _player$[ebp]
	mov	DWORD PTR [eax+20], OFFSET FLAT:?CRD_JoystickInput@@YAXPAUCtrlStruct@@@Z ; CRD_JoystickInput
$L82277:

; 404  : 		break;
; 405  : 
; 406  : 		case CTRL_TYPE_NONE:
; 407  : 		break;
; 408  : 
; 409  : 		//CTRL_TYPE_KBDJOY:
; 410  : 		//CTRL_TYPE_MOUSE:
; 411  : 		//return(0);										// Not supported yet
; 412  : 		//break;
; 413  : 
; 414  : 		default:
; 415  : 		break;
; 416  : 	};
; 417  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?CRD_InitPlayerControl@@YAXPAUPlayerStruct@@W4CTRL_TYPE@@@Z ENDP ; CRD_InitPlayerControl
_TEXT	ENDS
EXTRN	?DetailMenuTogg@@3DA:BYTE			; DetailMenuTogg
; Function compile flags: /Odt /ZI
;	COMDAT ?CRD_KeyboardInput@@YAXPAUCtrlStruct@@@Z
_TEXT	SEGMENT
_Control$ = 8						; size = 4
?CRD_KeyboardInput@@YAXPAUCtrlStruct@@@Z PROC NEAR	; CRD_KeyboardInput, COMDAT

; 423  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 424  : 	if (!DetailMenuTogg)

	movsx	eax, BYTE PTR ?DetailMenuTogg@@3DA	; DetailMenuTogg
	test	eax, eax
	jne	$L82291

; 425  : 	{
; 426  : 		if (GameSettings.Mirrored)

	cmp	DWORD PTR ?GameSettings@@3UGAME_SETTINGS@@A+16, 0
	je	SHORT $L82292

; 427  : 		{
; 428  : 			if (Keys[DIK_RIGHT])  { Control->digital += CTRL_LEFT;  }

	movsx	eax, BYTE PTR ?Keys@@3PADA+205
	test	eax, eax
	je	SHORT $L82293
	mov	eax, DWORD PTR _Control$[ebp]
	movzx	ecx, WORD PTR [eax+2]
	add	ecx, 1
	mov	edx, DWORD PTR _Control$[ebp]
	mov	WORD PTR [edx+2], cx
$L82293:

; 429  : 			if (Keys[DIK_LEFT]) { Control->digital += CTRL_RIGHT; } 

	movsx	eax, BYTE PTR ?Keys@@3PADA+203
	test	eax, eax
	je	SHORT $L82294
	mov	eax, DWORD PTR _Control$[ebp]
	movzx	ecx, WORD PTR [eax+2]
	add	ecx, 2
	mov	edx, DWORD PTR _Control$[ebp]
	mov	WORD PTR [edx+2], cx
$L82294:

; 430  : 		}
; 431  : 		else

	jmp	SHORT $L82295
$L82292:

; 432  : 		{
; 433  : 			if (Keys[DIK_LEFT])  { Control->digital += CTRL_LEFT;  }

	movsx	eax, BYTE PTR ?Keys@@3PADA+203
	test	eax, eax
	je	SHORT $L82296
	mov	eax, DWORD PTR _Control$[ebp]
	movzx	ecx, WORD PTR [eax+2]
	add	ecx, 1
	mov	edx, DWORD PTR _Control$[ebp]
	mov	WORD PTR [edx+2], cx
$L82296:

; 434  : 			if (Keys[DIK_RIGHT]) { Control->digital += CTRL_RIGHT; } 

	movsx	eax, BYTE PTR ?Keys@@3PADA+205
	test	eax, eax
	je	SHORT $L82295
	mov	eax, DWORD PTR _Control$[ebp]
	movzx	ecx, WORD PTR [eax+2]
	add	ecx, 2
	mov	edx, DWORD PTR _Control$[ebp]
	mov	WORD PTR [edx+2], cx
$L82295:

; 435  : 		}
; 436  : 		if (Keys[DIK_UP] || Keys[DIK_F])    { Control->digital += CTRL_FWD;   }

	movsx	eax, BYTE PTR ?Keys@@3PADA+200
	test	eax, eax
	jne	SHORT $L82299
	movsx	eax, BYTE PTR ?Keys@@3PADA+33
	test	eax, eax
	je	SHORT $L82298
$L82299:
	mov	eax, DWORD PTR _Control$[ebp]
	movzx	ecx, WORD PTR [eax+2]
	add	ecx, 4
	mov	edx, DWORD PTR _Control$[ebp]
	mov	WORD PTR [edx+2], cx
$L82298:

; 437  : 		if (Keys[DIK_DOWN] || Keys[DIK_V])  { Control->digital += CTRL_BACK;  }

	movsx	eax, BYTE PTR ?Keys@@3PADA+208
	test	eax, eax
	jne	SHORT $L82301
	movsx	eax, BYTE PTR ?Keys@@3PADA+47
	test	eax, eax
	je	SHORT $L82300
$L82301:
	mov	eax, DWORD PTR _Control$[ebp]
	movzx	ecx, WORD PTR [eax+2]
	add	ecx, 8
	mov	edx, DWORD PTR _Control$[ebp]
	mov	WORD PTR [edx+2], cx
$L82300:

; 438  : 
; 439  : 		if (Keys[DIK_HOME]) { Control->digital += CTRL_RESTART; }

	movsx	eax, BYTE PTR ?Keys@@3PADA+199
	test	eax, eax
	je	SHORT $L82302
	mov	eax, DWORD PTR _Control$[ebp]
	movzx	ecx, WORD PTR [eax+2]
	add	ecx, 32768				; 00008000H
	mov	edx, DWORD PTR _Control$[ebp]
	mov	WORD PTR [edx+2], cx
$L82302:

; 440  : 		if (Keys[DIK_END]) { Control->digital += CTRL_RESET; }

	movsx	eax, BYTE PTR ?Keys@@3PADA+207
	test	eax, eax
	je	SHORT $L82303
	mov	eax, DWORD PTR _Control$[ebp]
	movzx	ecx, WORD PTR [eax+2]
	add	ecx, 32					; 00000020H
	mov	edx, DWORD PTR _Control$[ebp]
	mov	WORD PTR [edx+2], cx
$L82303:

; 441  : 		if (Keys[DIK_LCONTROL]) { Control->digital += CTRL_FIRE; }

	movsx	eax, BYTE PTR ?Keys@@3PADA+29
	test	eax, eax
	je	SHORT $L82291
	mov	eax, DWORD PTR _Control$[ebp]
	movzx	ecx, WORD PTR [eax+2]
	add	ecx, 16					; 00000010H
	mov	edx, DWORD PTR _Control$[ebp]
	mov	WORD PTR [edx+2], cx
$L82291:

; 442  : 
; 443  : 	}
; 444  : 	s_RationaliseControl(Control);

	mov	eax, DWORD PTR _Control$[ebp]
	push	eax
	call	?s_RationaliseControl@@YAXPAUCtrlStruct@@@Z ; s_RationaliseControl
	add	esp, 4

; 445  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?CRD_KeyboardInput@@YAXPAUCtrlStruct@@@Z ENDP		; CRD_KeyboardInput
; Function compile flags: /Odt /ZI
_TEXT	ENDS
;	COMDAT ?s_RationaliseControl@@YAXPAUCtrlStruct@@@Z
_TEXT	SEGMENT
_Control$ = 8						; size = 4
?s_RationaliseControl@@YAXPAUCtrlStruct@@@Z PROC NEAR	; s_RationaliseControl, COMDAT

; 457  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 458  : 	// Remove control clashes
; 459  : 	if ((Control->digital & CTRL_LR) == CTRL_LR)

	mov	eax, DWORD PTR _Control$[ebp]
	movzx	ecx, WORD PTR [eax+2]
	and	ecx, 3
	cmp	ecx, 3
	jne	SHORT $L82308

; 460  : 	{
; 461  : 		Control->digital &= ~CTRL_LR;

	mov	eax, DWORD PTR _Control$[ebp]
	movzx	ecx, WORD PTR [eax+2]
	and	ecx, -4					; fffffffcH
	mov	edx, DWORD PTR _Control$[ebp]
	mov	WORD PTR [edx+2], cx
$L82308:

; 462  : 	}
; 463  : 
; 464  : 	if ((Control->digital & CTRL_FB) == CTRL_FB)

	mov	eax, DWORD PTR _Control$[ebp]
	movzx	ecx, WORD PTR [eax+2]
	and	ecx, 12					; 0000000cH
	cmp	ecx, 12					; 0000000cH
	jne	SHORT $L82309

; 465  : 	{
; 466  : 		Control->digital &= ~CTRL_FB;

	mov	eax, DWORD PTR _Control$[ebp]
	movzx	ecx, WORD PTR [eax+2]
	and	ecx, -13				; fffffff3H
	mov	edx, DWORD PTR _Control$[ebp]
	mov	WORD PTR [edx+2], cx
$L82309:

; 467  : 	}
; 468  : 	
; 469  : 	// Provide dx and dy values from the LEFT,RIGHT,FWD,BACK keys
; 470  : 	if (Control->digital & CTRL_LEFT)

	mov	eax, DWORD PTR _Control$[ebp]
	movzx	ecx, WORD PTR [eax+2]
	and	ecx, 1
	je	SHORT $L82310

; 471  : 	{
; 472  : 	    Control->dx = -CTRL_RANGE_MAX;

	mov	eax, DWORD PTR _Control$[ebp]
	mov	BYTE PTR [eax], -127			; ffffff81H

; 473  : 	}
; 474  : 	else

	jmp	SHORT $L82311
$L82310:

; 475  : 	if (Control->digital & CTRL_RIGHT)

	mov	eax, DWORD PTR _Control$[ebp]
	movzx	ecx, WORD PTR [eax+2]
	and	ecx, 2
	je	SHORT $L82311

; 476  : 	{
; 477  : 		Control->dx = CTRL_RANGE_MAX;

	mov	eax, DWORD PTR _Control$[ebp]
	mov	BYTE PTR [eax], 127			; 0000007fH
$L82311:

; 478  : 	}
; 479  : 
; 480  : 	if (Control->digital & CTRL_FWD)

	mov	eax, DWORD PTR _Control$[ebp]
	movzx	ecx, WORD PTR [eax+2]
	and	ecx, 4
	je	SHORT $L82313

; 481  : 	{
; 482  : 		Control->dy = -CTRL_RANGE_MAX;

	mov	eax, DWORD PTR _Control$[ebp]
	mov	BYTE PTR [eax+1], -127			; ffffff81H

; 483  : 	}
; 484  : 	else

	jmp	SHORT $L82307
$L82313:

; 485  : 	if (Control->digital & CTRL_BACK)

	mov	eax, DWORD PTR _Control$[ebp]
	movzx	ecx, WORD PTR [eax+2]
	and	ecx, 8
	je	SHORT $L82307

; 486  : 	{			 
; 487  :   		Control->dy = CTRL_RANGE_MAX;

	mov	eax, DWORD PTR _Control$[ebp]
	mov	BYTE PTR [eax+1], 127			; 0000007fH
$L82307:

; 488  : 	}
; 489  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?s_RationaliseControl@@YAXPAUCtrlStruct@@@Z ENDP	; s_RationaliseControl
_TEXT	ENDS
EXTRN	?JoystickState@@3UDIJOYSTATE@@A:BYTE		; JoystickState
; Function compile flags: /Odt /ZI
;	COMDAT ?CRD_JoystickInput@@YAXPAUCtrlStruct@@@Z
_TEXT	SEGMENT
_delta$ = -4						; size = 4
_Control$ = 8						; size = 4
?CRD_JoystickInput@@YAXPAUCtrlStruct@@@Z PROC NEAR	; CRD_JoystickInput, COMDAT

; 495  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 496  : 	long delta;
; 497  : 
; 498  : // gayness
; 499  : 
; 500  : 	static long x= 0, y = 1;
; 501  : 	if (Keys[DIK_1] && !LastKeys[DIK_1] && Everything) x = (x + 1) % 6;

	movsx	eax, BYTE PTR ?Keys@@3PADA+2
	test	eax, eax
	je	SHORT $L82324
	movsx	eax, BYTE PTR ?LastKeys@@3PADA+2
	test	eax, eax
	jne	SHORT $L82324
	movsx	eax, BYTE PTR ?Everything@@3DA		; Everything
	test	eax, eax
	je	SHORT $L82324
	mov	eax, DWORD PTR ?x@?1??CRD_JoystickInput@@YAXPAUCtrlStruct@@@Z@4JA
	add	eax, 1
	cdq
	mov	ecx, 6
	idiv	ecx
	mov	DWORD PTR ?x@?1??CRD_JoystickInput@@YAXPAUCtrlStruct@@@Z@4JA, edx
$L82324:

; 502  : 	if (Keys[DIK_2] && !LastKeys[DIK_2] && Everything) y = (y + 1) % 6;

	movsx	eax, BYTE PTR ?Keys@@3PADA+3
	test	eax, eax
	je	SHORT $L82325
	movsx	eax, BYTE PTR ?LastKeys@@3PADA+3
	test	eax, eax
	jne	SHORT $L82325
	movsx	eax, BYTE PTR ?Everything@@3DA		; Everything
	test	eax, eax
	je	SHORT $L82325
	mov	eax, DWORD PTR ?y@?1??CRD_JoystickInput@@YAXPAUCtrlStruct@@@Z@4JA
	add	eax, 1
	cdq
	mov	ecx, 6
	idiv	ecx
	mov	DWORD PTR ?y@?1??CRD_JoystickInput@@YAXPAUCtrlStruct@@@Z@4JA, edx
$L82325:

; 503  : 
; 504  : // read keyboard
; 505  : 
; 506  : 	CRD_KeyboardInput(Control);

	mov	eax, DWORD PTR _Control$[ebp]
	push	eax
	call	?CRD_KeyboardInput@@YAXPAUCtrlStruct@@@Z ; CRD_KeyboardInput
	add	esp, 4

; 507  : 
; 508  : // dx
; 509  : 
; 510  : 	if (GameSettings.Mirrored) delta = Control->dx - ((long*)&JoystickState)[x];

	cmp	DWORD PTR ?GameSettings@@3UGAME_SETTINGS@@A+16, 0
	je	SHORT $L82326
	mov	eax, DWORD PTR _Control$[ebp]
	movsx	ecx, BYTE PTR [eax]
	mov	edx, DWORD PTR ?x@?1??CRD_JoystickInput@@YAXPAUCtrlStruct@@@Z@4JA
	sub	ecx, DWORD PTR ?JoystickState@@3UDIJOYSTATE@@A[edx*4]
	mov	DWORD PTR _delta$[ebp], ecx

; 511  : 	else delta = Control->dx + ((long*)&JoystickState)[x];

	jmp	SHORT $L82328
$L82326:
	mov	eax, DWORD PTR _Control$[ebp]
	movsx	ecx, BYTE PTR [eax]
	mov	edx, DWORD PTR ?x@?1??CRD_JoystickInput@@YAXPAUCtrlStruct@@@Z@4JA
	add	ecx, DWORD PTR ?JoystickState@@3UDIJOYSTATE@@A[edx*4]
	mov	DWORD PTR _delta$[ebp], ecx
$L82328:

; 512  : 
; 513  : 	if (delta < -CTRL_RANGE_MAX) delta = -CTRL_RANGE_MAX;

	cmp	DWORD PTR _delta$[ebp], -127		; ffffff81H
	jge	SHORT $L82330
	mov	DWORD PTR _delta$[ebp], -127		; ffffff81H

; 514  : 	else if (delta > CTRL_RANGE_MAX) delta = CTRL_RANGE_MAX;

	jmp	SHORT $L82331
$L82330:
	cmp	DWORD PTR _delta$[ebp], 127		; 0000007fH
	jle	SHORT $L82331
	mov	DWORD PTR _delta$[ebp], 127		; 0000007fH
$L82331:

; 515  : 	Control->dx = (char)delta;

	mov	eax, DWORD PTR _Control$[ebp]
	mov	cl, BYTE PTR _delta$[ebp]
	mov	BYTE PTR [eax], cl

; 516  : 
; 517  : // dy
; 518  : 
; 519  : //	delta = Control->dy + ((long*)&JoystickState)[y];
; 520  : 
; 521  : //	if (delta < -CTRL_RANGE_MAX) delta = -CTRL_RANGE_MAX;
; 522  : //	else if (delta > CTRL_RANGE_MAX) delta = CTRL_RANGE_MAX;
; 523  : //	Control->dy = (char)delta;
; 524  : 
; 525  : // digital
; 526  : 
; 527  : 	if (JoystickState.rgbButtons[3])

	movzx	eax, BYTE PTR ?JoystickState@@3UDIJOYSTATE@@A+51
	test	eax, eax
	je	SHORT $L82334

; 528  : 		Control->dy = CTRL_RANGE_MAX;

	mov	eax, DWORD PTR _Control$[ebp]
	mov	BYTE PTR [eax+1], 127			; 0000007fH
$L82334:

; 529  : 
; 530  : 	if (JoystickState.rgbButtons[1])

	movzx	eax, BYTE PTR ?JoystickState@@3UDIJOYSTATE@@A+49
	test	eax, eax
	je	SHORT $L82335

; 531  : 		Control->dy = -CTRL_RANGE_MAX;

	mov	eax, DWORD PTR _Control$[ebp]
	mov	BYTE PTR [eax+1], -127			; ffffff81H
$L82335:

; 532  : 
; 533  : 	if (JoystickState.rgbButtons[3])

	movzx	eax, BYTE PTR ?JoystickState@@3UDIJOYSTATE@@A+51
	test	eax, eax
	je	SHORT $L82336

; 534  : 		Control->digital += CTRL_FIRE;

	mov	eax, DWORD PTR _Control$[ebp]
	movzx	ecx, WORD PTR [eax+2]
	add	ecx, 16					; 00000010H
	mov	edx, DWORD PTR _Control$[ebp]
	mov	WORD PTR [edx+2], cx
$L82336:

; 535  : 
; 536  : 	if (JoystickState.rgbButtons[4])

	movzx	eax, BYTE PTR ?JoystickState@@3UDIJOYSTATE@@A+52
	test	eax, eax
	je	SHORT $L82318

; 537  : 		Control->digital += CTRL_RESET;

	mov	eax, DWORD PTR _Control$[ebp]
	movzx	ecx, WORD PTR [eax+2]
	add	ecx, 32					; 00000020H
	mov	edx, DWORD PTR _Control$[ebp]
	mov	WORD PTR [edx+2], cx
$L82318:

; 538  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?CRD_JoystickInput@@YAXPAUCtrlStruct@@@Z ENDP		; CRD_JoystickInput
_TEXT	ENDS
END
