; Listing generated by Microsoft (R) Optimizing Compiler Version 13.10.3077 

	TITLE	.\source\Menu.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT _IsEqualGUID
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _==
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _acosl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _asinl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _atanl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _atan2l
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _ceill
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _cosl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _coshl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _expl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _fabsl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _floorl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _fmodl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _frexpl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _ldexpl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _logl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _log10l
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _modfl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _powl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _sinl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _sinhl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _sqrtl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _tanl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _tanhl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _frexpf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _ldexpf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _acosf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _asinf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _atanf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _atan2f
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _ceilf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _cosf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _coshf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _expf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _fabsf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _floorf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _fmodf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _logf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _log10f
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _modff
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _powf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _sinf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _sinhf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _sqrtf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _tanf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _tanhf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?MenuInit@@YAXPAUt_Menu@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?MenuProcess@@YAPAUt_Menu@@PAU1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?MenuRender@@YAXPAUt_Menu@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?MenuItemRender@@YAXPAUt_MenuItem@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DecLightPower@@YAXPAUt_Menu@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IncLightPower@@YAXPAUt_Menu@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DecLightStrength@@YAXPAUt_Menu@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IncLightStrength@@YAXPAUt_Menu@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Pow_int@N@@YANNH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Pow_int@H@@YAHHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Pow_int@M@@YAMMH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Pow_int@O@@YAOOH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
sxdata	SEGMENT DWORD USE32 'SXDATA'
sxdata	ENDS
FLAT	GROUP _DATA, CONST, _BSS
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBCD
INCLUDELIB OLDNAMES

PUBLIC	?MenuInit@@YAXPAUt_Menu@@0@Z			; MenuInit
; Function compile flags: /Odt /ZI
; File c:\documents and settings\jarhead\desktop\shit to display my love for xbox revolt and fuck you borman-ness\revolt source\source\menu.cpp
;	COMDAT ?MenuInit@@YAXPAUt_Menu@@0@Z
_TEXT	SEGMENT
_pMenu$ = 8						; size = 4
_pParentMenu$ = 12					; size = 4
?MenuInit@@YAXPAUt_Menu@@0@Z PROC NEAR			; MenuInit, COMDAT

; 30   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 31   : // Set parent
; 32   : 	if ((int)pParentMenu != -1)

	cmp	DWORD PTR _pParentMenu$[ebp], -1
	je	SHORT $L74735

; 33   : 		pMenu->pParentMenu = pParentMenu;

	mov	eax, DWORD PTR _pMenu$[ebp]
	mov	ecx, DWORD PTR _pParentMenu$[ebp]
	mov	DWORD PTR [eax+20], ecx
$L74735:

; 34   : 
; 35   : // Setup current selected menu item
; 36   : 	if (pMenu->iMenuItemStart >= 0)

	mov	eax, DWORD PTR _pMenu$[ebp]
	cmp	DWORD PTR [eax+8], 0
	jl	SHORT $L74736

; 37   : 	{
; 38   : 		pMenu->pMenuItemCur = pMenu->pMenuItems[pMenu->iMenuItemStart];

	mov	eax, DWORD PTR _pMenu$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _pMenu$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	edx, DWORD PTR _pMenu$[ebp]
	mov	eax, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR [edx+4], eax

; 39   : 	}
; 40   : 	else

	jmp	SHORT $L74737
$L74736:

; 41   : 	{
; 42   : 		if (pMenu->pMenuItemCur == NULL)

	mov	eax, DWORD PTR _pMenu$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $L74737

; 43   : 			pMenu->pMenuItemCur = pMenu->pMenuItems[0];

	mov	eax, DWORD PTR _pMenu$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _pMenu$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx+4], eax
$L74737:

; 44   : 	}
; 45   : 
; 46   : // Call startup code
; 47   : 	if (pMenu->StartUpFunc)

	mov	eax, DWORD PTR _pMenu$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $L74733

; 48   : 		pMenu->StartUpFunc(pMenu);

	mov	eax, DWORD PTR _pMenu$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pMenu$[ebp]
	call	DWORD PTR [ecx+12]
	add	esp, 4
$L74733:

; 49   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?MenuInit@@YAXPAUt_Menu@@0@Z ENDP			; MenuInit
_TEXT	ENDS
PUBLIC	?MenuProcess@@YAPAUt_Menu@@PAU1@@Z		; MenuProcess
EXTRN	?Keys@@3PADA:BYTE				; Keys
EXTRN	?LastKeys@@3PADA:BYTE				; LastKeys
; Function compile flags: /Odt /ZI
;	COMDAT ?MenuProcess@@YAPAUt_Menu@@PAU1@@Z
_TEXT	SEGMENT
_index$ = -8						; size = 4
_flag$ = -4						; size = 4
_pMenu$ = 8						; size = 4
?MenuProcess@@YAPAUt_Menu@@PAU1@@Z PROC NEAR		; MenuProcess, COMDAT

; 56   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi

; 57   : 	int	flag;
; 58   : 	int	index;
; 59   : 
; 60   : // Call start gameloop code
; 61   : 	if (pMenu->StartLoopFunc)

	mov	eax, DWORD PTR _pMenu$[ebp]
	cmp	DWORD PTR [eax+16], 0
	je	SHORT $L74745

; 62   : 	{
; 63   : 		flag = pMenu->StartLoopFunc(pMenu);

	mov	eax, DWORD PTR _pMenu$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pMenu$[ebp]
	call	DWORD PTR [ecx+16]
	add	esp, 4
	mov	DWORD PTR _flag$[ebp], eax
$L74745:

; 64   : 	}
; 65   : 
; 66   : 
; 67   : // Back
; 68   : 	if (Keys[DIK_ESCAPE] && !LastKeys[DIK_ESCAPE])

	movsx	eax, BYTE PTR ?Keys@@3PADA+1
	test	eax, eax
	je	SHORT $L74746
	movsx	eax, BYTE PTR ?LastKeys@@3PADA+1
	test	eax, eax
	jne	SHORT $L74746

; 69   : 	{
; 70   : 		if (pMenu->pParentMenu)

	mov	eax, DWORD PTR _pMenu$[ebp]
	cmp	DWORD PTR [eax+20], 0
	je	SHORT $L74747

; 71   : 		{
; 72   : 			pMenu = pMenu->pParentMenu;

	mov	eax, DWORD PTR _pMenu$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR _pMenu$[ebp], ecx

; 73   : 			MenuInit(pMenu, (t_Menu*)-1);

	push	-1
	mov	eax, DWORD PTR _pMenu$[ebp]
	push	eax
	call	?MenuInit@@YAXPAUt_Menu@@0@Z		; MenuInit
	add	esp, 8

; 74   : 			return pMenu;

	mov	eax, DWORD PTR _pMenu$[ebp]
	jmp	$L74742
$L74747:

; 75   : 		}
; 76   : 		else
; 77   : 		{
; 78   : 		// Return to old menu
; 79   : 			return NULL;

	xor	eax, eax
	jmp	$L74742
$L74746:

; 80   : 		}
; 81   : 	}
; 82   : 
; 83   : 
; 84   : // Option selection
; 85   : 	index = -1;

	mov	DWORD PTR _index$[ebp], -1

; 86   : 	if (Keys[DIK_UP] && !LastKeys[DIK_UP])

	movsx	eax, BYTE PTR ?Keys@@3PADA+200
	test	eax, eax
	je	SHORT $L74750
	movsx	eax, BYTE PTR ?LastKeys@@3PADA+200
	test	eax, eax
	jne	SHORT $L74750

; 87   : 		index = 0;

	mov	DWORD PTR _index$[ebp], 0

; 88   : 	else if (Keys[DIK_DOWN] && !LastKeys[DIK_DOWN])

	jmp	SHORT $L74751
$L74750:
	movsx	eax, BYTE PTR ?Keys@@3PADA+208
	test	eax, eax
	je	SHORT $L74752
	movsx	eax, BYTE PTR ?LastKeys@@3PADA+208
	test	eax, eax
	jne	SHORT $L74752

; 89   : 		index = 1;

	mov	DWORD PTR _index$[ebp], 1

; 90   : 	else if (Keys[DIK_LEFT] && !LastKeys[DIK_LEFT])

	jmp	SHORT $L74751
$L74752:
	movsx	eax, BYTE PTR ?Keys@@3PADA+203
	test	eax, eax
	je	SHORT $L74754
	movsx	eax, BYTE PTR ?LastKeys@@3PADA+203
	test	eax, eax
	jne	SHORT $L74754

; 91   : 		index = 2;

	mov	DWORD PTR _index$[ebp], 2

; 92   : 	else if (Keys[DIK_RIGHT] && !LastKeys[DIK_RIGHT])

	jmp	SHORT $L74751
$L74754:
	movsx	eax, BYTE PTR ?Keys@@3PADA+205
	test	eax, eax
	je	SHORT $L74751
	movsx	eax, BYTE PTR ?LastKeys@@3PADA+205
	test	eax, eax
	jne	SHORT $L74751

; 93   : 		index = 3;

	mov	DWORD PTR _index$[ebp], 3
$L74751:

; 94   : 
; 95   : 	if (index >= 0)

	cmp	DWORD PTR _index$[ebp], 0
	jl	SHORT $L74757

; 96   : 	{
; 97   : 	// Call function
; 98   : 		if (pMenu->pMenuItemCur->Function[index])

	mov	eax, DWORD PTR _pMenu$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _index$[ebp]
	cmp	DWORD PTR [ecx+edx*4+36], 0
	je	SHORT $L74758

; 99   : 			pMenu->pMenuItemCur->Function[index](pMenu);

	mov	eax, DWORD PTR _pMenu$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pMenu$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _index$[ebp]
	call	DWORD PTR [edx+eax*4+36]
	add	esp, 4
$L74758:

; 100  : 
; 101  : 	// Select menu item
; 102  : 		if (pMenu->pMenuItemCur->pSelectMenuItem[index])

	mov	eax, DWORD PTR _pMenu$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _index$[ebp]
	cmp	DWORD PTR [ecx+edx*4+16], 0
	je	SHORT $L74757

; 103  : 			pMenu->pMenuItemCur = pMenu->pMenuItemCur->pSelectMenuItem[index];

	mov	eax, DWORD PTR _pMenu$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _pMenu$[ebp]
	mov	eax, DWORD PTR _index$[ebp]
	mov	ecx, DWORD PTR [ecx+eax*4+16]
	mov	DWORD PTR [edx+4], ecx
$L74757:

; 104  : 	}
; 105  : 
; 106  : 
; 107  : // Select
; 108  : 	if (Keys[DIK_RETURN] && !LastKeys[DIK_RETURN])

	movsx	eax, BYTE PTR ?Keys@@3PADA+28
	test	eax, eax
	je	SHORT $L74760
	movsx	eax, BYTE PTR ?LastKeys@@3PADA+28
	test	eax, eax
	jne	SHORT $L74760

; 109  : 	{
; 110  : 		if (pMenu->pMenuItemCur->pSelectMenu)

	mov	eax, DWORD PTR _pMenu$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cmp	DWORD PTR [ecx+32], 0
	je	SHORT $L74760

; 111  : 		{
; 112  : 			MenuInit(pMenu->pMenuItemCur->pSelectMenu, pMenu);

	mov	eax, DWORD PTR _pMenu$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pMenu$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+32]
	push	eax
	call	?MenuInit@@YAXPAUt_Menu@@0@Z		; MenuInit
	add	esp, 8

; 113  : 			pMenu = pMenu->pMenuItemCur->pSelectMenu;

	mov	eax, DWORD PTR _pMenu$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+32]
	mov	DWORD PTR _pMenu$[ebp], edx

; 114  : 			return pMenu;

	mov	eax, DWORD PTR _pMenu$[ebp]
	jmp	SHORT $L74742
$L74760:

; 115  : 		}
; 116  : 	}
; 117  : 
; 118  : 
; 119  : // Return menu;
; 120  : 	return pMenu;

	mov	eax, DWORD PTR _pMenu$[ebp]
$L74742:

; 121  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?MenuProcess@@YAPAUt_Menu@@PAU1@@Z ENDP			; MenuProcess
_TEXT	ENDS
PUBLIC	?MenuRender@@YAXPAUt_Menu@@@Z			; MenuRender
PUBLIC	?MenuItemRender@@YAXPAUt_MenuItem@@H@Z		; MenuItemRender
; Function compile flags: /Odt /ZI
;	COMDAT ?MenuRender@@YAXPAUt_Menu@@@Z
_TEXT	SEGMENT
_flags$ = -12						; size = 4
_pMenuItem$ = -8					; size = 4
_pMenuItemList$ = -4					; size = 4
_pMenu$ = 8						; size = 4
?MenuRender@@YAXPAUt_Menu@@@Z PROC NEAR			; MenuRender, COMDAT

; 127  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi

; 128  : 	t_MenuItem	**pMenuItemList;
; 129  : 	t_MenuItem	*pMenuItem;
; 130  : 	int			flags;
; 131  : 
; 132  : 	pMenuItemList = pMenu->pMenuItems;

	mov	eax, DWORD PTR _pMenu$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _pMenuItemList$[ebp], ecx
$L74769:

; 133  : 	while (*pMenuItemList)

	mov	eax, DWORD PTR _pMenuItemList$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $L74764

; 134  : 	{
; 135  : 	// Get menu item
; 136  : 		pMenuItem = *pMenuItemList;

	mov	eax, DWORD PTR _pMenuItemList$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _pMenuItem$[ebp], ecx

; 137  : 
; 138  : 	// Render
; 139  : 		flags = 0;

	mov	DWORD PTR _flags$[ebp], 0

; 140  : 		if (pMenuItem == pMenu->pMenuItemCur)

	mov	eax, DWORD PTR _pMenu$[ebp]
	mov	ecx, DWORD PTR _pMenuItem$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jne	SHORT $L74771

; 141  : 			flags |= MENUITEM_HILIGHT;

	mov	eax, DWORD PTR _flags$[ebp]
	or	eax, 1
	mov	DWORD PTR _flags$[ebp], eax
$L74771:

; 142  : 
; 143  : 		MenuItemRender(pMenuItem, flags);

	mov	eax, DWORD PTR _flags$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pMenuItem$[ebp]
	push	ecx
	call	?MenuItemRender@@YAXPAUt_MenuItem@@H@Z	; MenuItemRender
	add	esp, 8

; 144  : 
; 145  : 	// Next
; 146  : 		pMenuItemList++;

	mov	eax, DWORD PTR _pMenuItemList$[ebp]
	add	eax, 4
	mov	DWORD PTR _pMenuItemList$[ebp], eax

; 147  : 	}

	jmp	SHORT $L74769
$L74764:

; 148  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?MenuRender@@YAXPAUt_Menu@@@Z ENDP			; MenuRender
_TEXT	ENDS
EXTRN	?DumpText@@YAXFFFFJPAD@Z:NEAR			; DumpText
; Function compile flags: /Odt /ZI
;	COMDAT ?MenuItemRender@@YAXPAUt_MenuItem@@H@Z
_TEXT	SEGMENT
_pMenuItem$ = 8						; size = 4
_flags$ = 12						; size = 4
?MenuItemRender@@YAXPAUt_MenuItem@@H@Z PROC NEAR	; MenuItemRender, COMDAT

; 159  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 160  : 	if (flags & MENUITEM_HILIGHT)

	mov	eax, DWORD PTR _flags$[ebp]
	and	eax, 1
	je	SHORT $L74776

; 161  : 		DumpText(pMenuItem->textX,pMenuItem->textY, 12,16, 0x80C0FF, pMenuItem->pText);

	mov	eax, DWORD PTR _pMenuItem$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	push	8438015					; 0080c0ffH
	push	16					; 00000010H
	push	12					; 0000000cH
	mov	edx, DWORD PTR _pMenuItem$[ebp]
	mov	ax, WORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _pMenuItem$[ebp]
	mov	dx, WORD PTR [ecx]
	push	edx
	call	?DumpText@@YAXFFFFJPAD@Z		; DumpText
	add	esp, 24					; 00000018H

; 162  : 	else

	jmp	SHORT $L74775
$L74776:

; 163  : 		DumpText(pMenuItem->textX,pMenuItem->textY, 12,16, 0x808080, pMenuItem->pText);

	mov	eax, DWORD PTR _pMenuItem$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	push	8421504					; 00808080H
	push	16					; 00000010H
	push	12					; 0000000cH
	mov	edx, DWORD PTR _pMenuItem$[ebp]
	mov	ax, WORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _pMenuItem$[ebp]
	mov	dx, WORD PTR [ecx]
	push	edx
	call	?DumpText@@YAXFFFFJPAD@Z		; DumpText
	add	esp, 24					; 00000018H
$L74775:

; 164  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?MenuItemRender@@YAXPAUt_MenuItem@@H@Z ENDP		; MenuItemRender
_TEXT	ENDS
PUBLIC	__real@3f800000
PUBLIC	?DecLightPower@@YAXPAUt_Menu@@@Z		; DecLightPower
EXTRN	__fltused:NEAR
EXTRN	?gLight@@3PAUt_Light@@A:BYTE			; gLight
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
; Function compile flags: /Odt /ZI
CONST	ENDS
;	COMDAT ?DecLightPower@@YAXPAUt_Menu@@@Z
_TEXT	SEGMENT
_pMenu$ = 8						; size = 4
?DecLightPower@@YAXPAUt_Menu@@@Z PROC NEAR		; DecLightPower, COMDAT

; 172  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 173  : 	gLight[0].power -= 1;

	fld	DWORD PTR ?gLight@@3PAUt_Light@@A+24
	fsub	DWORD PTR __real@3f800000
	fstp	DWORD PTR ?gLight@@3PAUt_Light@@A+24

; 174  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?DecLightPower@@YAXPAUt_Menu@@@Z ENDP			; DecLightPower
_TEXT	ENDS
PUBLIC	?IncLightPower@@YAXPAUt_Menu@@@Z		; IncLightPower
; Function compile flags: /Odt /ZI
;	COMDAT ?IncLightPower@@YAXPAUt_Menu@@@Z
_TEXT	SEGMENT
_pMenu$ = 8						; size = 4
?IncLightPower@@YAXPAUt_Menu@@@Z PROC NEAR		; IncLightPower, COMDAT

; 177  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 178  : 	gLight[0].power += 1;

	fld	DWORD PTR ?gLight@@3PAUt_Light@@A+24
	fadd	DWORD PTR __real@3f800000
	fstp	DWORD PTR ?gLight@@3PAUt_Light@@A+24

; 179  : 	if (gLight[0].power < 1)

	fld	DWORD PTR ?gLight@@3PAUt_Light@@A+24
	fcomp	DWORD PTR __real@3f800000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L74783

; 180  : 		gLight[0].power = 1;

	mov	DWORD PTR ?gLight@@3PAUt_Light@@A+24, 1065353216 ; 3f800000H
$L74783:

; 181  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?IncLightPower@@YAXPAUt_Menu@@@Z ENDP			; IncLightPower
_TEXT	ENDS
PUBLIC	__real@41200000
PUBLIC	?DecLightStrength@@YAXPAUt_Menu@@@Z		; DecLightStrength
;	COMDAT __real@41200000
CONST	SEGMENT
__real@41200000 DD 041200000r			; 10
; Function compile flags: /Odt /ZI
CONST	ENDS
;	COMDAT ?DecLightStrength@@YAXPAUt_Menu@@@Z
_TEXT	SEGMENT
_pMenu$ = 8						; size = 4
?DecLightStrength@@YAXPAUt_Menu@@@Z PROC NEAR		; DecLightStrength, COMDAT

; 184  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 185  : 	gLight[0].strength -= 10;

	fld	DWORD PTR ?gLight@@3PAUt_Light@@A+28
	fsub	DWORD PTR __real@41200000
	fstp	DWORD PTR ?gLight@@3PAUt_Light@@A+28

; 186  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?DecLightStrength@@YAXPAUt_Menu@@@Z ENDP		; DecLightStrength
_TEXT	ENDS
PUBLIC	?IncLightStrength@@YAXPAUt_Menu@@@Z		; IncLightStrength
; Function compile flags: /Odt /ZI
;	COMDAT ?IncLightStrength@@YAXPAUt_Menu@@@Z
_TEXT	SEGMENT
_pMenu$ = 8						; size = 4
?IncLightStrength@@YAXPAUt_Menu@@@Z PROC NEAR		; IncLightStrength, COMDAT

; 189  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 190  : 	gLight[0].strength += 10;

	fld	DWORD PTR ?gLight@@3PAUt_Light@@A+28
	fadd	DWORD PTR __real@41200000
	fstp	DWORD PTR ?gLight@@3PAUt_Light@@A+28

; 191  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?IncLightStrength@@YAXPAUt_Menu@@@Z ENDP		; IncLightStrength
_TEXT	ENDS
END
