; Listing generated by Microsoft (R) Optimizing Compiler Version 13.10.3077 

	TITLE	.\source\editobj.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_03IDDGKHFD@X?5Y?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_03KIBLPEJA@X?5Z?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_03CJDPGPNI@Z?5Y?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_01MMEEDKFM@X?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_01NFFPALBN@Y?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_01POHCFINO@Z?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_06JCBBMBIP@Camera?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_05MFLOHCHP@World?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0IM@KGGBCACH@c?3?2documents?5and?5settings?2jarhea@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CE@PAKHMKIJ@Can?8t?5alloc?5memory?5for?5file?5obje@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_05MBDEGLCK@ERROR?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_02JDPG@rb?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_02GMLFBBN@wb?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_03KDFHFOMO@fo?9?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BD@FLMCKHEK@Saved?5Object?5File?3?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_03NELGANAE@fob?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_06GBEGMGE@?$CFs?3?5?$CFd?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_06DJHOIPC@?$CFs?3?5?$CFs?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0N@MOINFLNL@Axis?5?$CFs?5?9?5?$CFs?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_02HBOOOICD@?9?$DO?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _IsEqualGUID
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _==
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _acosl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _asinl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _atanl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _atan2l
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _ceill
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _cosl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _coshl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _expl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _fabsl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _floorl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _fmodl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _frexpl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _ldexpl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _logl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _log10l
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _modfl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _powl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _sinl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _sinhl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _sqrtl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _tanl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _tanhl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _frexpf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _ldexpf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _acosf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _asinf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _atanf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _atan2f
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _ceilf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _cosf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _coshf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _expf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _fabsf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _floorf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _fmodf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _logf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _log10f
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _modff
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _powf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _sinf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _sinhf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _sqrtf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _tanf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _tanhf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?sqrt@@YAMM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?InitFileObjects@@YAJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?KillFileObjects@@YAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AllocFileObject@@YAPAU_EDIT_OBJECT@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?FreeFileObject@@YAXPAU_EDIT_OBJECT@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?LoadFileObjects@@YAXPAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SaveFileObjects@@YAXPAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?EditFileObjects@@YAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DrawFileObjects@@YAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DisplayFileObjectInfo@@YAXPAU_EDIT_OBJECT@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?LoadFileObjectModels@@YAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?FreeFileObjectModels@@YAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Pow_int@N@@YANNH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Pow_int@H@@YAHHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Pow_int@M@@YAMMH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Pow_int@O@@YAOOH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?__LINE__Var@?1??FreeFileObjectModels@@YAXXZ@4JA
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??LoadFileObjectModels@@YAXXZ@4JA
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??KillFileObjects@@YAXXZ@4JA
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??InitFileObjects@@YAJXZ@4JA
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
sxdata	SEGMENT DWORD USE32 'SXDATA'
sxdata	ENDS
FLAT	GROUP _DATA, CONST, _BSS
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBCD
INCLUDELIB OLDNAMES

PUBLIC	?CurrentFileObject@@3PAU_EDIT_OBJECT@@A		; CurrentFileObject
PUBLIC	??_C@_03IDDGKHFD@X?5Y?$AA@			; `string'
PUBLIC	??_C@_03KIBLPEJA@X?5Z?$AA@			; `string'
PUBLIC	??_C@_03CJDPGPNI@Z?5Y?$AA@			; `string'
PUBLIC	??_C@_01MMEEDKFM@X?$AA@				; `string'
PUBLIC	??_C@_01NFFPALBN@Y?$AA@				; `string'
PUBLIC	??_C@_01POHCFINO@Z?$AA@				; `string'
PUBLIC	??_C@_06JCBBMBIP@Camera?$AA@			; `string'
PUBLIC	??_C@_05MFLOHCHP@World?$AA@			; `string'
_BSS	SEGMENT
?CurrentFileObject@@3PAU_EDIT_OBJECT@@A DD 01H DUP (?)	; CurrentFileObject
_FileObjectAxis DB 01H DUP (?)
	ALIGN	4

_FileObjectAxisType DB 01H DUP (?)
_BSS	ENDS
_DATA	SEGMENT
_CurrentFileObjectFlag DD 0ffffffffH
_DATA	ENDS
;	COMDAT ??_C@_03IDDGKHFD@X?5Y?$AA@
CONST	SEGMENT
??_C@_03IDDGKHFD@X?5Y?$AA@ DB 'X Y', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03KIBLPEJA@X?5Z?$AA@
CONST	SEGMENT
??_C@_03KIBLPEJA@X?5Z?$AA@ DB 'X Z', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03CJDPGPNI@Z?5Y?$AA@
CONST	SEGMENT
??_C@_03CJDPGPNI@Z?5Y?$AA@ DB 'Z Y', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01MMEEDKFM@X?$AA@
CONST	SEGMENT
??_C@_01MMEEDKFM@X?$AA@ DB 'X', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01NFFPALBN@Y?$AA@
CONST	SEGMENT
??_C@_01NFFPALBN@Y?$AA@ DB 'Y', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01POHCFINO@Z?$AA@
CONST	SEGMENT
??_C@_01POHCFINO@Z?$AA@ DB 'Z', 00H			; `string'
CONST	ENDS
_DATA	SEGMENT
_FileObjectAxisNames DD FLAT:??_C@_03IDDGKHFD@X?5Y?$AA@
	DD	FLAT:??_C@_03KIBLPEJA@X?5Z?$AA@
	DD	FLAT:??_C@_03CJDPGPNI@Z?5Y?$AA@
	DD	FLAT:??_C@_01MMEEDKFM@X?$AA@
	DD	FLAT:??_C@_01NFFPALBN@Y?$AA@
	DD	FLAT:??_C@_01POHCFINO@Z?$AA@
_DATA	ENDS
;	COMDAT ??_C@_06JCBBMBIP@Camera?$AA@
CONST	SEGMENT
??_C@_06JCBBMBIP@Camera?$AA@ DB 'Camera', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05MFLOHCHP@World?$AA@
CONST	SEGMENT
??_C@_05MFLOHCHP@World?$AA@ DB 'World', 00H		; `string'
CONST	ENDS
_DATA	SEGMENT
_FileObjectAxisTypeNames DD FLAT:??_C@_06JCBBMBIP@Camera?$AA@
	DD	FLAT:??_C@_05MFLOHCHP@World?$AA@
_DATA	ENDS
PUBLIC	?InitFileObjects@@YAJXZ				; InitFileObjects
PUBLIC	?__LINE__Var@?1??InitFileObjects@@YAJXZ@4JA	; `InitFileObjects'::`2'::__LINE__Var
PUBLIC	??_C@_0IM@KGGBCACH@c?3?2documents?5and?5settings?2jarhea@ ; `string'
PUBLIC	??_C@_0CE@PAKHMKIJ@Can?8t?5alloc?5memory?5for?5file?5obje@ ; `string'
PUBLIC	??_C@_05MBDEGLCK@ERROR?$AA@			; `string'
EXTRN	?DebugMalloc@@YAPAXIHPAD@Z:NEAR			; DebugMalloc
EXTRN	?Box@@YAJPAD0J@Z:NEAR				; Box
EXTRN	?QuitGame@@3DA:BYTE				; QuitGame
_BSS	SEGMENT
	ALIGN	4

_UsedFileObjectCount DD 01H DUP (?)
_FileObjectList DD 01H DUP (?)
_UsedFileObjectHead DD 01H DUP (?)
_FreeFileObjectHead DD 01H DUP (?)
_BSS	ENDS
;	COMDAT ??_C@_0IM@KGGBCACH@c?3?2documents?5and?5settings?2jarhea@
; File c:\documents and settings\jarhead\desktop\shit to display my love for xbox revolt and fuck you borman-ness\revolt source\source\editobj.cpp
CONST	SEGMENT
??_C@_0IM@KGGBCACH@c?3?2documents?5and?5settings?2jarhea@ DB 'c:\document'
	DB	's and settings\jarhead\desktop\shit to display my love for xb'
	DB	'ox revolt and fuck you borman-ness\revolt source\source\edito'
	DB	'bj.cpp', 00H				; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??InitFileObjects@@YAJXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?1??InitFileObjects@@YAJXZ@4JA DD 031H	; `InitFileObjects'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0CE@PAKHMKIJ@Can?8t?5alloc?5memory?5for?5file?5obje@
CONST	SEGMENT
??_C@_0CE@PAKHMKIJ@Can?8t?5alloc?5memory?5for?5file?5obje@ DB 'Can''t all'
	DB	'oc memory for file objects', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05MBDEGLCK@ERROR?$AA@
CONST	SEGMENT
??_C@_05MBDEGLCK@ERROR?$AA@ DB 'ERROR', 00H		; `string'
; Function compile flags: /Odt /ZI
CONST	ENDS
;	COMDAT ?InitFileObjects@@YAJXZ
_TEXT	SEGMENT
_i$ = -4						; size = 4
?InitFileObjects@@YAJXZ PROC NEAR			; InitFileObjects, COMDAT

; 49   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 50   : 	long i;
; 51   : 
; 52   : // alloc list memory
; 53   : 
; 54   : 	FileObjectList = (EDIT_OBJECT*)malloc(sizeof(EDIT_OBJECT) * MAX_EDIT_OBJECTS);

	push	OFFSET FLAT:??_C@_0IM@KGGBCACH@c?3?2documents?5and?5settings?2jarhea@
	mov	eax, DWORD PTR ?__LINE__Var@?1??InitFileObjects@@YAJXZ@4JA
	add	eax, 5
	push	eax
	push	9728					; 00002600H
	call	?DebugMalloc@@YAPAXIHPAD@Z		; DebugMalloc
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _FileObjectList, eax

; 55   : 	if (!FileObjectList)

	cmp	DWORD PTR _FileObjectList, 0
	jne	SHORT $L81298

; 56   : 	{
; 57   : 		Box("ERROR", "Can't alloc memory for file objects", MB_OK);

	push	0
	push	OFFSET FLAT:??_C@_0CE@PAKHMKIJ@Can?8t?5alloc?5memory?5for?5file?5obje@
	push	OFFSET FLAT:??_C@_05MBDEGLCK@ERROR?$AA@
	call	?Box@@YAJPAD0J@Z			; Box
	add	esp, 12					; 0000000cH

; 58   : 		QuitGame = TRUE;

	mov	BYTE PTR ?QuitGame@@3DA, 1		; QuitGame

; 59   : 		return FALSE;

	xor	eax, eax
	jmp	$L81292
$L81298:

; 60   : 	}
; 61   : 
; 62   : // NULL used head
; 63   : 
; 64   : 	UsedFileObjectHead = NULL;

	mov	DWORD PTR _UsedFileObjectHead, 0

; 65   : 
; 66   : // link free list
; 67   : 
; 68   : 	FreeFileObjectHead = FileObjectList;

	mov	eax, DWORD PTR _FileObjectList
	mov	DWORD PTR _FreeFileObjectHead, eax

; 69   : 
; 70   : 	for (i = 0 ; i < MAX_EDIT_OBJECTS ; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $L81301
$L81302:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$L81301:
	cmp	DWORD PTR _i$[ebp], 128			; 00000080H
	jge	SHORT $L81303

; 71   : 	{
; 72   : 		FileObjectList[i].Prev = &FileObjectList[i - 1];

	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 1
	imul	eax, 76					; 0000004cH
	add	eax, DWORD PTR _FileObjectList
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 76					; 0000004cH
	mov	edx, DWORD PTR _FileObjectList
	mov	DWORD PTR [edx+ecx+68], eax

; 73   : 		FileObjectList[i].Next = &FileObjectList[i + 1];

	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	imul	eax, 76					; 0000004cH
	add	eax, DWORD PTR _FileObjectList
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 76					; 0000004cH
	mov	edx, DWORD PTR _FileObjectList
	mov	DWORD PTR [edx+ecx+72], eax

; 74   : 	}

	jmp	SHORT $L81302
$L81303:

; 75   : 
; 76   : // NULL first->Prev & last->Next
; 77   : 
; 78   : 	FileObjectList[0].Prev = NULL;

	mov	eax, DWORD PTR _FileObjectList
	mov	DWORD PTR [eax+68], 0

; 79   : 	FileObjectList[MAX_EDIT_OBJECTS - 1].Next = NULL;

	mov	eax, DWORD PTR _FileObjectList
	mov	DWORD PTR [eax+9724], 0

; 80   : 
; 81   : // zero count
; 82   : 
; 83   : 	UsedFileObjectCount = 0;

	mov	DWORD PTR _UsedFileObjectCount, 0

; 84   : 
; 85   : // return OK
; 86   : 
; 87   : 	return TRUE;

	mov	eax, 1
$L81292:

; 88   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?InitFileObjects@@YAJXZ ENDP				; InitFileObjects
_TEXT	ENDS
PUBLIC	?KillFileObjects@@YAXXZ				; KillFileObjects
PUBLIC	?__LINE__Var@?1??KillFileObjects@@YAXXZ@4JA	; `KillFileObjects'::`2'::__LINE__Var
EXTRN	?DebugFree@@YAXPAXHPAD@Z:NEAR			; DebugFree
;	COMDAT ?__LINE__Var@?1??KillFileObjects@@YAXXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?1??KillFileObjects@@YAXXZ@4JA DD 05fH	; `KillFileObjects'::`2'::__LINE__Var
; Function compile flags: /Odt /ZI
_DATA	ENDS
;	COMDAT ?KillFileObjects@@YAXXZ
_TEXT	SEGMENT
?KillFileObjects@@YAXXZ PROC NEAR			; KillFileObjects, COMDAT

; 95   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 96   : 	if (FileObjectList)

	cmp	DWORD PTR _FileObjectList, 0
	je	SHORT $L81306

; 97   : 	{
; 98   : 		free(FileObjectList);

	push	OFFSET FLAT:??_C@_0IM@KGGBCACH@c?3?2documents?5and?5settings?2jarhea@
	mov	eax, DWORD PTR ?__LINE__Var@?1??KillFileObjects@@YAXXZ@4JA
	add	eax, 3
	push	eax
	mov	ecx, DWORD PTR _FileObjectList
	push	ecx
	call	?DebugFree@@YAXPAXHPAD@Z		; DebugFree
	add	esp, 12					; 0000000cH

; 99   : 		FileObjectList = NULL;

	mov	DWORD PTR _FileObjectList, 0
$L81306:

; 100  : 	}
; 101  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?KillFileObjects@@YAXXZ ENDP				; KillFileObjects
_TEXT	ENDS
PUBLIC	?AllocFileObject@@YAPAU_EDIT_OBJECT@@XZ		; AllocFileObject
; Function compile flags: /Odt /ZI
;	COMDAT ?AllocFileObject@@YAPAU_EDIT_OBJECT@@XZ
_TEXT	SEGMENT
_obj$ = -4						; size = 4
?AllocFileObject@@YAPAU_EDIT_OBJECT@@XZ PROC NEAR	; AllocFileObject, COMDAT

; 108  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 109  : 	EDIT_OBJECT *obj;
; 110  : 
; 111  : // return NULL if none free
; 112  : 
; 113  : 	if (!FreeFileObjectHead)

	cmp	DWORD PTR _FreeFileObjectHead, 0
	jne	SHORT $L81313

; 114  : 	{
; 115  : 		return NULL;

	xor	eax, eax
	jmp	SHORT $L81311
$L81313:

; 116  : 	}
; 117  : 
; 118  : // remove our obj from free list
; 119  : 
; 120  : 	obj = FreeFileObjectHead;

	mov	eax, DWORD PTR _FreeFileObjectHead
	mov	DWORD PTR _obj$[ebp], eax

; 121  : 	FreeFileObjectHead = obj->Next;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	mov	DWORD PTR _FreeFileObjectHead, ecx

; 122  : 
; 123  : 	if (FreeFileObjectHead)

	cmp	DWORD PTR _FreeFileObjectHead, 0
	je	SHORT $L81314

; 124  : 	{
; 125  : 		FreeFileObjectHead->Prev = NULL;

	mov	eax, DWORD PTR _FreeFileObjectHead
	mov	DWORD PTR [eax+68], 0
$L81314:

; 126  : 	}
; 127  : 	
; 128  : // add to used list
; 129  : 
; 130  : 	obj->Prev = NULL;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	DWORD PTR [eax+68], 0

; 131  : 	obj->Next = UsedFileObjectHead;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR _UsedFileObjectHead
	mov	DWORD PTR [eax+72], ecx

; 132  : 	UsedFileObjectHead = obj;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	DWORD PTR _UsedFileObjectHead, eax

; 133  : 
; 134  : 	if (obj->Next)

	mov	eax, DWORD PTR _obj$[ebp]
	cmp	DWORD PTR [eax+72], 0
	je	SHORT $L81315

; 135  : 	{
; 136  : 		obj->Next->Prev = obj;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	mov	edx, DWORD PTR _obj$[ebp]
	mov	DWORD PTR [ecx+68], edx
$L81315:

; 137  : 	}
; 138  : 
; 139  : // inc used count
; 140  : 
; 141  : 	UsedFileObjectCount++;

	mov	eax, DWORD PTR _UsedFileObjectCount
	add	eax, 1
	mov	DWORD PTR _UsedFileObjectCount, eax

; 142  : 
; 143  : // return our obj
; 144  : 
; 145  : 	return obj;

	mov	eax, DWORD PTR _obj$[ebp]
$L81311:

; 146  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?AllocFileObject@@YAPAU_EDIT_OBJECT@@XZ ENDP		; AllocFileObject
_TEXT	ENDS
PUBLIC	?FreeFileObject@@YAXPAU_EDIT_OBJECT@@@Z		; FreeFileObject
; Function compile flags: /Odt /ZI
;	COMDAT ?FreeFileObject@@YAXPAU_EDIT_OBJECT@@@Z
_TEXT	SEGMENT
_obj$ = 8						; size = 4
?FreeFileObject@@YAXPAU_EDIT_OBJECT@@@Z PROC NEAR	; FreeFileObject, COMDAT

; 153  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 154  : 
; 155  : // return if NULL ptr
; 156  : 
; 157  : 	if (!obj)

	cmp	DWORD PTR _obj$[ebp], 0
	jne	SHORT $L81319

; 158  : 	{
; 159  : 		return;

	jmp	SHORT $L81318
$L81319:

; 160  : 	}
; 161  : 
; 162  : // remove our obj from used list
; 163  : 
; 164  : 	if (obj->Prev)

	mov	eax, DWORD PTR _obj$[ebp]
	cmp	DWORD PTR [eax+68], 0
	je	SHORT $L81320

; 165  : 	{
; 166  : 		obj->Prev->Next = obj->Next;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	mov	edx, DWORD PTR _obj$[ebp]
	mov	eax, DWORD PTR [edx+72]
	mov	DWORD PTR [ecx+72], eax

; 167  : 	}
; 168  : 	else

	jmp	SHORT $L81321
$L81320:

; 169  : 	{
; 170  : 		UsedFileObjectHead = obj->Next;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	mov	DWORD PTR _UsedFileObjectHead, ecx
$L81321:

; 171  : 	}
; 172  : 
; 173  : 	if (obj->Next)

	mov	eax, DWORD PTR _obj$[ebp]
	cmp	DWORD PTR [eax+72], 0
	je	SHORT $L81322

; 174  : 	{
; 175  : 		obj->Next->Prev = obj->Prev;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	mov	edx, DWORD PTR _obj$[ebp]
	mov	eax, DWORD PTR [edx+68]
	mov	DWORD PTR [ecx+68], eax
$L81322:

; 176  : 	}
; 177  : 
; 178  : // add to free list
; 179  : 
; 180  : 	obj->Prev = NULL;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	DWORD PTR [eax+68], 0

; 181  : 	obj->Next = FreeFileObjectHead;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR _FreeFileObjectHead
	mov	DWORD PTR [eax+72], ecx

; 182  : 	FreeFileObjectHead = obj;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	DWORD PTR _FreeFileObjectHead, eax

; 183  : 
; 184  : 	if (obj->Next)

	mov	eax, DWORD PTR _obj$[ebp]
	cmp	DWORD PTR [eax+72], 0
	je	SHORT $L81323

; 185  : 	{
; 186  : 		obj->Next->Prev = obj;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	mov	edx, DWORD PTR _obj$[ebp]
	mov	DWORD PTR [ecx+68], edx
$L81323:

; 187  : 	}
; 188  : 
; 189  : // dec used count
; 190  : 
; 191  : 	UsedFileObjectCount--;

	mov	eax, DWORD PTR _UsedFileObjectCount
	sub	eax, 1
	mov	DWORD PTR _UsedFileObjectCount, eax
$L81318:

; 192  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?FreeFileObject@@YAXPAU_EDIT_OBJECT@@@Z ENDP		; FreeFileObject
_TEXT	ENDS
PUBLIC	?LoadFileObjects@@YAXPAD@Z			; LoadFileObjects
PUBLIC	??_C@_02JDPG@rb?$AA@				; `string'
PUBLIC	??_C@_02GMLFBBN@wb?$AA@				; `string'
EXTRN	_fclose:NEAR
EXTRN	_fopen:NEAR
EXTRN	_fread:NEAR
EXTRN	_fwrite:NEAR
EXTRN	__fltused:NEAR
EXTRN	?EditScale@@3MA:DWORD				; EditScale
;	COMDAT ??_C@_02JDPG@rb?$AA@
CONST	SEGMENT
??_C@_02JDPG@rb?$AA@ DB 'rb', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02GMLFBBN@wb?$AA@
CONST	SEGMENT
??_C@_02GMLFBBN@wb?$AA@ DB 'wb', 00H			; `string'
; Function compile flags: /Odt /ZI
CONST	ENDS
;	COMDAT ?LoadFileObjects@@YAXPAD@Z
_TEXT	SEGMENT
_fileobj$ = -72						; size = 56
_obj$ = -16						; size = 4
_fp$ = -12						; size = 4
_j$ = -8						; size = 4
_i$ = -4						; size = 4
_file$ = 8						; size = 4
?LoadFileObjects@@YAXPAD@Z PROC NEAR			; LoadFileObjects, COMDAT

; 199  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 136				; 00000088H
	push	ebx
	push	esi
	push	edi

; 200  : 	long i, j;
; 201  : 	FILE *fp;
; 202  : 	EDIT_OBJECT *obj;
; 203  : 	FILE_OBJECT fileobj;
; 204  : 
; 205  : // open object file
; 206  : 
; 207  : 	fp = fopen(file, "rb");

	push	OFFSET FLAT:??_C@_02JDPG@rb?$AA@
	mov	eax, DWORD PTR _file$[ebp]
	push	eax
	call	_fopen
	add	esp, 8
	mov	DWORD PTR _fp$[ebp], eax

; 208  : 
; 209  : // if not there create empty one
; 210  : 
; 211  : 	if (!fp)

	cmp	DWORD PTR _fp$[ebp], 0
	jne	SHORT $L81333

; 212  : 	{
; 213  : 		fp = fopen(file, "wb");

	push	OFFSET FLAT:??_C@_02GMLFBBN@wb?$AA@
	mov	eax, DWORD PTR _file$[ebp]
	push	eax
	call	_fopen
	add	esp, 8
	mov	DWORD PTR _fp$[ebp], eax

; 214  : 		if (!fp) return;

	cmp	DWORD PTR _fp$[ebp], 0
	jne	SHORT $L81335
	jmp	$L81326
$L81335:

; 215  : 		i = 0;

	mov	DWORD PTR _i$[ebp], 0

; 216  : 		fwrite(&i, sizeof(i), 1, fp);

	mov	eax, DWORD PTR _fp$[ebp]
	push	eax
	push	1
	push	4
	lea	ecx, DWORD PTR _i$[ebp]
	push	ecx
	call	_fwrite
	add	esp, 16					; 00000010H

; 217  : 		fclose(fp);

	mov	eax, DWORD PTR _fp$[ebp]
	push	eax
	call	_fclose
	add	esp, 4

; 218  : 		fp = fopen(file, "rb");

	push	OFFSET FLAT:??_C@_02JDPG@rb?$AA@
	mov	eax, DWORD PTR _file$[ebp]
	push	eax
	call	_fopen
	add	esp, 8
	mov	DWORD PTR _fp$[ebp], eax

; 219  : 		if (!fp) return;

	cmp	DWORD PTR _fp$[ebp], 0
	jne	SHORT $L81333
	jmp	$L81326
$L81333:

; 220  : 	}
; 221  : 
; 222  : // loop thru all objects
; 223  : 
; 224  : 	fread(&i, sizeof(i), 1, fp);

	mov	eax, DWORD PTR _fp$[ebp]
	push	eax
	push	1
	push	4
	lea	ecx, DWORD PTR _i$[ebp]
	push	ecx
	call	_fread
	add	esp, 16					; 00000010H

; 225  : 
; 226  : 	for ( ; i ; i--)

	jmp	SHORT $L81337
$L81338:
	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$L81337:
	cmp	DWORD PTR _i$[ebp], 0
	je	$L81339

; 227  : 	{
; 228  : 
; 229  : // alloc object
; 230  : 
; 231  : 		obj = AllocFileObject();

	call	?AllocFileObject@@YAPAU_EDIT_OBJECT@@XZ	; AllocFileObject
	mov	DWORD PTR _obj$[ebp], eax

; 232  : 		if (!obj) break;

	cmp	DWORD PTR _obj$[ebp], 0
	jne	SHORT $L81340
	jmp	$L81339
$L81340:

; 233  : 
; 234  : // setup from file
; 235  : 
; 236  : 		fread(&fileobj, sizeof(fileobj), 1, fp);

	mov	eax, DWORD PTR _fp$[ebp]
	push	eax
	push	1
	push	56					; 00000038H
	lea	ecx, DWORD PTR _fileobj$[ebp]
	push	ecx
	call	_fread
	add	esp, 16					; 00000010H

; 237  : 
; 238  : 		VecMulScalar(&fileobj.Pos, EditScale);

	fld	DWORD PTR _fileobj$[ebp+20]
	fmul	DWORD PTR ?EditScale@@3MA		; EditScale
	fstp	DWORD PTR _fileobj$[ebp+20]
	fld	DWORD PTR _fileobj$[ebp+24]
	fmul	DWORD PTR ?EditScale@@3MA		; EditScale
	fstp	DWORD PTR _fileobj$[ebp+24]
	fld	DWORD PTR _fileobj$[ebp+28]
	fmul	DWORD PTR ?EditScale@@3MA		; EditScale
	fstp	DWORD PTR _fileobj$[ebp+28]

; 239  : 
; 240  : // set ID
; 241  : 
; 242  : 		obj->ID = fileobj.ID;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR _fileobj$[ebp]
	mov	DWORD PTR [eax], ecx

; 243  : 
; 244  : // set flags
; 245  : 
; 246  : 		for (j = 0 ; j < FILE_OBJECT_FLAG_NUM ; j++)

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $L81341
$L81342:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$L81341:
	cmp	DWORD PTR _j$[ebp], 4
	jge	SHORT $L81343

; 247  : 			obj->Flag[j] = fileobj.Flag[j];

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _obj$[ebp]
	mov	edx, DWORD PTR _j$[ebp]
	mov	edx, DWORD PTR _fileobj$[ebp+edx*4+4]
	mov	DWORD PTR [ecx+eax*4+4], edx
	jmp	SHORT $L81342
$L81343:

; 248  : 
; 249  : // set pos
; 250  : 
; 251  : 		obj->Pos = fileobj.Pos;

	mov	eax, DWORD PTR _obj$[ebp]
	add	eax, 20					; 00000014H
	mov	ecx, DWORD PTR _fileobj$[ebp+20]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _fileobj$[ebp+24]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _fileobj$[ebp+28]
	mov	DWORD PTR [eax+8], ecx

; 252  : 
; 253  : // set matrix
; 254  : 
; 255  : 		obj->Mat.mv[U] = fileobj.Up;

	mov	eax, DWORD PTR _obj$[ebp]
	add	eax, 44					; 0000002cH
	mov	ecx, DWORD PTR _fileobj$[ebp+32]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _fileobj$[ebp+36]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _fileobj$[ebp+40]
	mov	DWORD PTR [eax+8], ecx

; 256  : 		obj->Mat.mv[L] = fileobj.Look;

	mov	eax, DWORD PTR _obj$[ebp]
	add	eax, 56					; 00000038H
	mov	ecx, DWORD PTR _fileobj$[ebp+44]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _fileobj$[ebp+48]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _fileobj$[ebp+52]
	mov	DWORD PTR [eax+8], ecx

; 257  : 		CrossProduct(&obj->Mat.mv[U], &obj->Mat.mv[L], &obj->Mat.mv[R]);

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR _obj$[ebp]
	fld	DWORD PTR [eax+48]
	fmul	DWORD PTR [ecx+64]
	mov	edx, DWORD PTR _obj$[ebp]
	mov	eax, DWORD PTR _obj$[ebp]
	fld	DWORD PTR [edx+52]
	fmul	DWORD PTR [eax+60]
	fsubp	ST(1), ST(0)
	mov	ecx, DWORD PTR _obj$[ebp]
	fstp	DWORD PTR [ecx+32]
	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR _obj$[ebp]
	fld	DWORD PTR [eax+52]
	fmul	DWORD PTR [ecx+56]
	mov	edx, DWORD PTR _obj$[ebp]
	mov	eax, DWORD PTR _obj$[ebp]
	fld	DWORD PTR [edx+44]
	fmul	DWORD PTR [eax+64]
	fsubp	ST(1), ST(0)
	mov	ecx, DWORD PTR _obj$[ebp]
	fstp	DWORD PTR [ecx+36]
	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR _obj$[ebp]
	fld	DWORD PTR [eax+44]
	fmul	DWORD PTR [ecx+60]
	mov	edx, DWORD PTR _obj$[ebp]
	mov	eax, DWORD PTR _obj$[ebp]
	fld	DWORD PTR [edx+48]
	fmul	DWORD PTR [eax+56]
	fsubp	ST(1), ST(0)
	mov	ecx, DWORD PTR _obj$[ebp]
	fstp	DWORD PTR [ecx+40]

; 258  : 	}

	jmp	$L81338
$L81339:

; 259  : 
; 260  : // close file
; 261  : 
; 262  : 	fclose(fp);

	mov	eax, DWORD PTR _fp$[ebp]
	push	eax
	call	_fclose
	add	esp, 4
$L81326:

; 263  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?LoadFileObjects@@YAXPAD@Z ENDP				; LoadFileObjects
_TEXT	ENDS
PUBLIC	?SaveFileObjects@@YAXPAD@Z			; SaveFileObjects
PUBLIC	??_C@_03KDFHFOMO@fo?9?$AA@			; `string'
PUBLIC	??_C@_0BD@FLMCKHEK@Saved?5Object?5File?3?$AA@	; `string'
EXTRN	_remove:NEAR
EXTRN	_rename:NEAR
EXTRN	_memcpy:NEAR
EXTRN	_strlen:NEAR
EXTRN	__imp__wsprintfA:NEAR
;	COMDAT ??_C@_03KDFHFOMO@fo?9?$AA@
CONST	SEGMENT
??_C@_03KDFHFOMO@fo?9?$AA@ DB 'fo-', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@FLMCKHEK@Saved?5Object?5File?3?$AA@
CONST	SEGMENT
??_C@_0BD@FLMCKHEK@Saved?5Object?5File?3?$AA@ DB 'Saved Object File:', 00H ; `string'
; Function compile flags: /Odt /ZI
CONST	ENDS
;	COMDAT ?SaveFileObjects@@YAXPAD@Z
_TEXT	SEGMENT
_bak$ = -324						; size = 256
_obj$ = -68						; size = 4
_fileobj$ = -64						; size = 56
_fp$ = -8						; size = 4
_i$ = -4						; size = 4
_file$ = 8						; size = 4
?SaveFileObjects@@YAXPAD@Z PROC NEAR			; SaveFileObjects, COMDAT

; 270  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 388				; 00000184H
	push	ebx
	push	esi
	push	edi

; 271  : 	long i;
; 272  : 	FILE *fp;
; 273  : 	FILE_OBJECT fileobj;
; 274  : 	EDIT_OBJECT *obj;
; 275  : 	char bak[256];
; 276  : 
; 277  : // backup old file
; 278  : 
; 279  : 	memcpy(bak, file, strlen(file) - 3);

	mov	eax, DWORD PTR _file$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	sub	eax, 3
	push	eax
	mov	ecx, DWORD PTR _file$[ebp]
	push	ecx
	lea	edx, DWORD PTR _bak$[ebp]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 280  : 	wsprintf(bak + strlen(file) - 3, "fo-");

	push	OFFSET FLAT:??_C@_03KDFHFOMO@fo?9?$AA@
	mov	eax, DWORD PTR _file$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	lea	ecx, DWORD PTR _bak$[ebp+eax-3]
	push	ecx
	call	DWORD PTR __imp__wsprintfA
	add	esp, 8

; 281  : 	remove(bak);

	lea	eax, DWORD PTR _bak$[ebp]
	push	eax
	call	_remove
	add	esp, 4

; 282  : 	rename(file, bak);

	lea	eax, DWORD PTR _bak$[ebp]
	push	eax
	mov	ecx, DWORD PTR _file$[ebp]
	push	ecx
	call	_rename
	add	esp, 8

; 283  : 
; 284  : // open object file
; 285  : 
; 286  : 	fp = fopen(file, "wb");

	push	OFFSET FLAT:??_C@_02GMLFBBN@wb?$AA@
	mov	eax, DWORD PTR _file$[ebp]
	push	eax
	call	_fopen
	add	esp, 8
	mov	DWORD PTR _fp$[ebp], eax

; 287  : 	if (!fp) return;

	cmp	DWORD PTR _fp$[ebp], 0
	jne	SHORT $L81353
	jmp	$L81346
$L81353:

; 288  : 
; 289  : // write num
; 290  : 
; 291  : 	fwrite(&UsedFileObjectCount, sizeof(UsedFileObjectCount), 1, fp);

	mov	eax, DWORD PTR _fp$[ebp]
	push	eax
	push	1
	push	4
	push	OFFSET FLAT:_UsedFileObjectCount
	call	_fwrite
	add	esp, 16					; 00000010H

; 292  : 
; 293  : // write out each file object
; 294  : 
; 295  : 	for (obj = UsedFileObjectHead ; obj ; obj = obj->Next)

	mov	eax, DWORD PTR _UsedFileObjectHead
	mov	DWORD PTR _obj$[ebp], eax
	jmp	SHORT $L81354
$L81355:
	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	mov	DWORD PTR _obj$[ebp], ecx
$L81354:
	cmp	DWORD PTR _obj$[ebp], 0
	je	$L81356

; 296  : 	{
; 297  : 
; 298  : // set ID
; 299  : 
; 300  : 		fileobj.ID = obj->ID;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _fileobj$[ebp], ecx

; 301  : 
; 302  : // set flags
; 303  : 
; 304  : 		for (i = 0 ; i < FILE_OBJECT_FLAG_NUM ; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $L81357
$L81358:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$L81357:
	cmp	DWORD PTR _i$[ebp], 4
	jge	SHORT $L81359

; 305  : 			fileobj.Flag[i] = obj->Flag[i];

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [edx+ecx*4+4]
	mov	DWORD PTR _fileobj$[ebp+eax*4+4], ecx
	jmp	SHORT $L81358
$L81359:

; 306  : 
; 307  : // set pos
; 308  : 
; 309  : 		fileobj.Pos = obj->Pos;

	mov	eax, DWORD PTR _obj$[ebp]
	add	eax, 20					; 00000014H
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _fileobj$[ebp+20], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _fileobj$[ebp+24], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR _fileobj$[ebp+28], eax

; 310  : 
; 311  : // set up / look vectors
; 312  : 
; 313  : 		fileobj.Up = obj->Mat.mv[U];

	mov	eax, DWORD PTR _obj$[ebp]
	add	eax, 44					; 0000002cH
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _fileobj$[ebp+32], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _fileobj$[ebp+36], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR _fileobj$[ebp+40], eax

; 314  : 		fileobj.Look = obj->Mat.mv[L];

	mov	eax, DWORD PTR _obj$[ebp]
	add	eax, 56					; 00000038H
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _fileobj$[ebp+44], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _fileobj$[ebp+48], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR _fileobj$[ebp+52], eax

; 315  : 
; 316  : // write it
; 317  : 
; 318  : 		fwrite(&fileobj, sizeof(fileobj), 1, fp);

	mov	eax, DWORD PTR _fp$[ebp]
	push	eax
	push	1
	push	56					; 00000038H
	lea	ecx, DWORD PTR _fileobj$[ebp]
	push	ecx
	call	_fwrite
	add	esp, 16					; 00000010H

; 319  : 	}

	jmp	$L81355
$L81356:

; 320  : 
; 321  : // close file
; 322  : 
; 323  : 	Box("Saved Object File:", file, MB_OK);

	push	0
	mov	eax, DWORD PTR _file$[ebp]
	push	eax
	push	OFFSET FLAT:??_C@_0BD@FLMCKHEK@Saved?5Object?5File?3?$AA@
	call	?Box@@YAJPAD0J@Z			; Box
	add	esp, 12					; 0000000cH

; 324  : 	fclose(fp);

	mov	eax, DWORD PTR _fp$[ebp]
	push	eax
	call	_fclose
	add	esp, 4
$L81346:

; 325  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?SaveFileObjects@@YAXPAD@Z ENDP				; SaveFileObjects
_TEXT	ENDS
PUBLIC	?sqrt@@YAMM@Z					; sqrt
PUBLIC	?EditFileObjects@@YAXXZ				; EditFileObjects
PUBLIC	??_C@_03NELGANAE@fob?$AA@			; `string'
PUBLIC	__real@45400000
PUBLIC	__real@3f800000
PUBLIC	__real@43a00000
PUBLIC	__real@43700000
PUBLIC	__real@42800000
PUBLIC	__real@3a83126f
PUBLIC	__real@3e800000
PUBLIC	__real@00000000
EXTRN	?IdentityMatrix@@3TMatrixUnion@@A:BYTE		; IdentityMatrix
EXTRN	?FileObjectInfo@@3PAUFILE_OBJECT_INFO@@A:BYTE	; FileObjectInfo
EXTRN	?ViewMatrix@@3TMatrixUnion@@A:BYTE		; ViewMatrix
EXTRN	?ViewTrans@@3UVectorStruct@@A:BYTE		; ViewTrans
EXTRN	?MouseXpos@@3MA:DWORD				; MouseXpos
EXTRN	?MouseYpos@@3MA:DWORD				; MouseYpos
EXTRN	?MouseXrel@@3MA:DWORD				; MouseXrel
EXTRN	?MouseYrel@@3MA:DWORD				; MouseYrel
EXTRN	?CameraEditXrel@@3MA:DWORD			; CameraEditXrel
EXTRN	?CameraEditYrel@@3MA:DWORD			; CameraEditYrel
EXTRN	?CameraEditZrel@@3MA:DWORD			; CameraEditZrel
EXTRN	?MouseLeft@@3DA:BYTE				; MouseLeft
EXTRN	?MouseRight@@3DA:BYTE				; MouseRight
EXTRN	?MouseLastLeft@@3DA:BYTE			; MouseLastLeft
EXTRN	?CAM_MainCamera@@3PAUCameraStruct@@A:DWORD	; CAM_MainCamera
EXTRN	?Keys@@3PADA:BYTE				; Keys
EXTRN	?LastKeys@@3PADA:BYTE				; LastKeys
EXTRN	?Mouse@@3U_DIMOUSESTATE@@A:BYTE			; Mouse
EXTRN	?RenderSettings@@3URENDER_SETTINGS@@A:BYTE	; RenderSettings
EXTRN	?GetLevelFilename@@YAPADPADJ@Z:NEAR		; GetLevelFilename
EXTRN	?RotMatrixZYX@@YAXPATMatrixUnion@@MMM@Z:NEAR	; RotMatrixZYX
EXTRN	?RotVector@@YAXPATMatrixUnion@@PAUVectorStruct@@1@Z:NEAR ; RotVector
EXTRN	?RotTransVector@@YAXPATMatrixUnion@@PAUVectorStruct@@11@Z:NEAR ; RotTransVector
EXTRN	?MulMatrix@@YAXPATMatrixUnion@@00@Z:NEAR	; MulMatrix
EXTRN	?CopyMatrix@@YAXPATMatrixUnion@@0@Z:NEAR	; CopyMatrix
;	COMDAT __real@45400000
CONST	SEGMENT
__real@45400000 DD 045400000r			; 3072
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT ??_C@_03NELGANAE@fob?$AA@
CONST	SEGMENT
??_C@_03NELGANAE@fob?$AA@ DB 'fob', 00H			; `string'
CONST	ENDS
;	COMDAT __real@43a00000
CONST	SEGMENT
__real@43a00000 DD 043a00000r			; 320
CONST	ENDS
;	COMDAT __real@43700000
CONST	SEGMENT
__real@43700000 DD 043700000r			; 240
CONST	ENDS
;	COMDAT __real@42800000
CONST	SEGMENT
__real@42800000 DD 042800000r			; 64
CONST	ENDS
;	COMDAT __real@3a83126f
CONST	SEGMENT
__real@3a83126f DD 03a83126fr			; 0.001
CONST	ENDS
;	COMDAT __real@3e800000
CONST	SEGMENT
__real@3e800000 DD 03e800000r			; 0.25
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
; Function compile flags: /Odt /ZI
CONST	ENDS
;	COMDAT ?EditFileObjects@@YAXXZ
_TEXT	SEGMENT
tv1611 = -300						; size = 4
tv760 = -300						; size = 4
__mul$81489 = -232					; size = 4
__mul$81487 = -228					; size = 4
__mul$81482 = -224					; size = 4
__mul$81480 = -220					; size = 4
__mul$81390 = -216					; size = 4
__mul$81388 = -212					; size = 4
_sy$ = -208						; size = 4
_sx$ = -204						; size = 4
_z$ = -200						; size = 4
_yrad$ = -196						; size = 4
_xrad$ = -192						; size = 4
_mat2$ = -188						; size = 36
_mat$ = -152						; size = 36
_l2$ = -116						; size = 12
_u2$ = -104						; size = 12
_r2$ = -92						; size = 12
_l$ = -80						; size = 12
_u$ = -68						; size = 12
_r$ = -56						; size = 12
_vec2$ = -44						; size = 12
_vec$ = -32						; size = 12
_nobj$ = -20						; size = 4
_obj$ = -16						; size = 4
_flag$ = -12						; size = 4
_j$ = -8						; size = 4
_i$ = -4						; size = 4
?EditFileObjects@@YAXXZ PROC NEAR			; EditFileObjects, COMDAT

; 332  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 300				; 0000012cH
	push	ebx
	push	esi
	push	edi

; 333  : 	long i, j, flag;
; 334  : 	EDIT_OBJECT *obj, *nobj;
; 335  : 	VEC vec, vec2, r, u, l, r2, u2, l2;
; 336  : 	MAT mat, mat2;
; 337  : 	float xrad, yrad, z, sx, sy;
; 338  : 
; 339  : // quit if not in edit mode
; 340  : 
; 341  : 	if (CAM_MainCamera->Type != CAM_EDIT)

	mov	eax, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	cmp	DWORD PTR [eax], 5
	je	SHORT $L81384

; 342  : 	{
; 343  : 		CurrentFileObject = NULL;

	mov	DWORD PTR ?CurrentFileObject@@3PAU_EDIT_OBJECT@@A, 0 ; CurrentFileObject

; 344  : 		return;

	jmp	$L81363
$L81384:

; 345  : 	}
; 346  : 
; 347  : // rotate camera?
; 348  : 
; 349  : 	if (MouseRight)

	movsx	eax, BYTE PTR ?MouseRight@@3DA		; MouseRight
	test	eax, eax
	je	$L81385

; 350  : 	{
; 351  : 		RotMatrixZYX(&mat, (float)-Mouse.lY / 3072, -(float)Mouse.lX / 3072, 0);

	push	0
	fild	DWORD PTR ?Mouse@@3U_DIMOUSESTATE@@A
	fchs
	fdiv	DWORD PTR __real@45400000
	push	ecx
	fstp	DWORD PTR [esp]
	mov	eax, DWORD PTR ?Mouse@@3U_DIMOUSESTATE@@A+4
	neg	eax
	mov	DWORD PTR tv1611[ebp], eax
	fild	DWORD PTR tv1611[ebp]
	fdiv	DWORD PTR __real@45400000
	push	ecx
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR _mat$[ebp]
	push	ecx
	call	?RotMatrixZYX@@YAXPATMatrixUnion@@MMM@Z	; RotMatrixZYX
	add	esp, 16					; 00000010H

; 352  : 		MulMatrix(&CAM_MainCamera->WMatrix, &mat, &mat2);

	lea	eax, DWORD PTR _mat2$[ebp]
	push	eax
	lea	ecx, DWORD PTR _mat$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	add	edx, 16					; 00000010H
	push	edx
	call	?MulMatrix@@YAXPATMatrixUnion@@00@Z	; MulMatrix
	add	esp, 12					; 0000000cH

; 353  : 		CopyMatrix(&mat2, &CAM_MainCamera->WMatrix);

	mov	eax, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	add	eax, 16					; 00000010H
	push	eax
	lea	ecx, DWORD PTR _mat2$[ebp]
	push	ecx
	call	?CopyMatrix@@YAXPATMatrixUnion@@0@Z	; CopyMatrix
	add	esp, 8

; 354  : 
; 355  : 		CAM_MainCamera->WMatrix.m[RY] = 0;

	mov	eax, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	mov	DWORD PTR [eax+20], 0

; 356  : 		NormalizeVector(&CAM_MainCamera->WMatrix.mv[X]);

	mov	eax, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	mov	ecx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fld	DWORD PTR [eax+16]
	fmul	DWORD PTR [ecx+16]
	mov	edx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	mov	eax, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fld	DWORD PTR [edx+20]
	fmul	DWORD PTR [eax+20]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	mov	edx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fld	DWORD PTR [ecx+24]
	fmul	DWORD PTR [edx+24]
	faddp	ST(1), ST(0)
	push	ecx
	fstp	DWORD PTR [esp]
	call	?sqrt@@YAMM@Z				; sqrt
	add	esp, 4
	fdivr	DWORD PTR __real@3f800000
	fstp	DWORD PTR __mul$81388[ebp]
	mov	eax, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fld	DWORD PTR __mul$81388[ebp]
	fmul	DWORD PTR [eax+16]
	mov	ecx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fstp	DWORD PTR [ecx+16]
	mov	eax, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fld	DWORD PTR __mul$81388[ebp]
	fmul	DWORD PTR [eax+20]
	mov	ecx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fstp	DWORD PTR [ecx+20]
	mov	eax, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fld	DWORD PTR __mul$81388[ebp]
	fmul	DWORD PTR [eax+24]
	mov	ecx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fstp	DWORD PTR [ecx+24]

; 357  : 		CrossProduct(&CAM_MainCamera->WMatrix.mv[Z], &CAM_MainCamera->WMatrix.mv[X], &CAM_MainCamera->WMatrix.mv[Y]);

	mov	eax, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	mov	ecx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fld	DWORD PTR [eax+44]
	fmul	DWORD PTR [ecx+24]
	mov	edx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	mov	eax, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fld	DWORD PTR [edx+48]
	fmul	DWORD PTR [eax+20]
	fsubp	ST(1), ST(0)
	mov	ecx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fstp	DWORD PTR [ecx+28]
	mov	eax, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	mov	ecx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fld	DWORD PTR [eax+48]
	fmul	DWORD PTR [ecx+16]
	mov	edx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	mov	eax, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fld	DWORD PTR [edx+40]
	fmul	DWORD PTR [eax+24]
	fsubp	ST(1), ST(0)
	mov	ecx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fstp	DWORD PTR [ecx+32]
	mov	eax, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	mov	ecx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fld	DWORD PTR [eax+40]
	fmul	DWORD PTR [ecx+20]
	mov	edx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	mov	eax, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fld	DWORD PTR [edx+44]
	fmul	DWORD PTR [eax+16]
	fsubp	ST(1), ST(0)
	mov	ecx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fstp	DWORD PTR [ecx+36]

; 358  : 		NormalizeVector(&CAM_MainCamera->WMatrix.mv[Y]);

	mov	eax, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	mov	ecx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fld	DWORD PTR [eax+28]
	fmul	DWORD PTR [ecx+28]
	mov	edx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	mov	eax, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fld	DWORD PTR [edx+32]
	fmul	DWORD PTR [eax+32]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	mov	edx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fld	DWORD PTR [ecx+36]
	fmul	DWORD PTR [edx+36]
	faddp	ST(1), ST(0)
	push	ecx
	fstp	DWORD PTR [esp]
	call	?sqrt@@YAMM@Z				; sqrt
	add	esp, 4
	fdivr	DWORD PTR __real@3f800000
	fstp	DWORD PTR __mul$81390[ebp]
	mov	eax, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fld	DWORD PTR __mul$81390[ebp]
	fmul	DWORD PTR [eax+28]
	mov	ecx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fstp	DWORD PTR [ecx+28]
	mov	eax, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fld	DWORD PTR __mul$81390[ebp]
	fmul	DWORD PTR [eax+32]
	mov	ecx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fstp	DWORD PTR [ecx+32]
	mov	eax, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fld	DWORD PTR __mul$81390[ebp]
	fmul	DWORD PTR [eax+36]
	mov	ecx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fstp	DWORD PTR [ecx+36]

; 359  : 		CrossProduct(&CAM_MainCamera->WMatrix.mv[X], &CAM_MainCamera->WMatrix.mv[Y], &CAM_MainCamera->WMatrix.mv[Z]);

	mov	eax, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	mov	ecx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fld	DWORD PTR [eax+20]
	fmul	DWORD PTR [ecx+36]
	mov	edx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	mov	eax, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fld	DWORD PTR [edx+24]
	fmul	DWORD PTR [eax+32]
	fsubp	ST(1), ST(0)
	mov	ecx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fstp	DWORD PTR [ecx+40]
	mov	eax, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	mov	ecx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fld	DWORD PTR [eax+24]
	fmul	DWORD PTR [ecx+28]
	mov	edx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	mov	eax, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fld	DWORD PTR [edx+16]
	fmul	DWORD PTR [eax+36]
	fsubp	ST(1), ST(0)
	mov	ecx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fstp	DWORD PTR [ecx+44]
	mov	eax, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	mov	ecx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fld	DWORD PTR [eax+16]
	fmul	DWORD PTR [ecx+32]
	mov	edx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	mov	eax, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fld	DWORD PTR [edx+20]
	fmul	DWORD PTR [eax+28]
	fsubp	ST(1), ST(0)
	mov	ecx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fstp	DWORD PTR [ecx+48]
$L81385:

; 360  : 	}
; 361  : 
; 362  : // save file objects?
; 363  : 
; 364  : 	if (Keys[DIK_LCONTROL] && Keys[DIK_F4] && !LastKeys[DIK_F4])

	movsx	eax, BYTE PTR ?Keys@@3PADA+29
	test	eax, eax
	je	SHORT $L81392
	movsx	eax, BYTE PTR ?Keys@@3PADA+62
	test	eax, eax
	je	SHORT $L81392
	movsx	eax, BYTE PTR ?LastKeys@@3PADA+62
	test	eax, eax
	jne	SHORT $L81392

; 365  : 	{
; 366  : 		SaveFileObjects(GetLevelFilename("fob", FILENAME_MAKE_BODY | FILENAME_GAME_SETTINGS));

	push	3
	push	OFFSET FLAT:??_C@_03NELGANAE@fob?$AA@
	call	?GetLevelFilename@@YAPADPADJ@Z		; GetLevelFilename
	add	esp, 8
	push	eax
	call	?SaveFileObjects@@YAXPAD@Z		; SaveFileObjects
	add	esp, 4
$L81392:

; 367  : 	}
; 368  : 
; 369  : // get a current object?
; 370  : 
; 371  : 	if (!CurrentFileObject && Keys[DIK_RETURN] && !LastKeys[DIK_RETURN])

	cmp	DWORD PTR ?CurrentFileObject@@3PAU_EDIT_OBJECT@@A, 0 ; CurrentFileObject
	jne	$L81394
	movsx	eax, BYTE PTR ?Keys@@3PADA+28
	test	eax, eax
	je	$L81394
	movsx	eax, BYTE PTR ?LastKeys@@3PADA+28
	test	eax, eax
	jne	$L81394

; 372  : 	{
; 373  : 		nobj = NULL;

	mov	DWORD PTR _nobj$[ebp], 0

; 374  : 		z = RenderSettings.FarClip;

	mov	eax, DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+32
	mov	DWORD PTR _z$[ebp], eax

; 375  : 
; 376  : 		for (obj = UsedFileObjectHead ; obj ; obj = obj->Next)

	mov	eax, DWORD PTR _UsedFileObjectHead
	mov	DWORD PTR _obj$[ebp], eax
	jmp	SHORT $L81395
$L81396:
	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	mov	DWORD PTR _obj$[ebp], ecx
$L81395:
	cmp	DWORD PTR _obj$[ebp], 0
	je	$L81397

; 377  : 		{
; 378  : 			RotTransVector(&ViewMatrix, &ViewTrans, &obj->Pos, &vec);

	lea	eax, DWORD PTR _vec$[ebp]
	push	eax
	mov	ecx, DWORD PTR _obj$[ebp]
	add	ecx, 20					; 00000014H
	push	ecx
	push	OFFSET FLAT:?ViewTrans@@3UVectorStruct@@A ; ViewTrans
	push	OFFSET FLAT:?ViewMatrix@@3TMatrixUnion@@A ; ViewMatrix
	call	?RotTransVector@@YAXPATMatrixUnion@@PAUVectorStruct@@11@Z ; RotTransVector
	add	esp, 16					; 00000010H

; 379  : 
; 380  : 			if (vec.v[Z] < RenderSettings.NearClip || vec.v[Z] >= RenderSettings.FarClip) continue;

	fld	DWORD PTR _vec$[ebp+8]
	fcomp	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+28
	fnstsw	ax
	test	ah, 5
	jnp	SHORT $L81399
	fld	DWORD PTR _vec$[ebp+8]
	fcomp	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+32
	fnstsw	ax
	test	ah, 1
	jne	SHORT $L81398
$L81399:
	jmp	SHORT $L81396
$L81398:

; 381  : 
; 382  : 			sx = vec.v[X] * RenderSettings.GeomPers / vec.v[Z] + REAL_SCREEN_XHALF;

	fld	DWORD PTR _vec$[ebp]
	fmul	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A
	fdiv	DWORD PTR _vec$[ebp+8]
	fadd	DWORD PTR __real@43a00000
	fstp	DWORD PTR _sx$[ebp]

; 383  : 			sy = vec.v[Y] * RenderSettings.GeomPers / vec.v[Z] + REAL_SCREEN_YHALF;

	fld	DWORD PTR _vec$[ebp+4]
	fmul	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A
	fdiv	DWORD PTR _vec$[ebp+8]
	fadd	DWORD PTR __real@43700000
	fstp	DWORD PTR _sy$[ebp]

; 384  : 
; 385  : 			xrad = (64 * RenderSettings.GeomPers) / vec.v[Z];

	fld	DWORD PTR __real@42800000
	fmul	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A
	fdiv	DWORD PTR _vec$[ebp+8]
	fstp	DWORD PTR _xrad$[ebp]

; 386  : 			yrad = (64 * RenderSettings.GeomPers) / vec.v[Z];

	fld	DWORD PTR __real@42800000
	fmul	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A
	fdiv	DWORD PTR _vec$[ebp+8]
	fstp	DWORD PTR _yrad$[ebp]

; 387  : 
; 388  : 			if (MouseXpos > sx - xrad && MouseXpos < sx + xrad && MouseYpos > sy - yrad && MouseYpos < sy + yrad)

	fld	DWORD PTR _sx$[ebp]
	fsub	DWORD PTR _xrad$[ebp]
	fcomp	DWORD PTR ?MouseXpos@@3MA		; MouseXpos
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L81400
	fld	DWORD PTR _sx$[ebp]
	fadd	DWORD PTR _xrad$[ebp]
	fcomp	DWORD PTR ?MouseXpos@@3MA		; MouseXpos
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $L81400
	fld	DWORD PTR _sy$[ebp]
	fsub	DWORD PTR _yrad$[ebp]
	fcomp	DWORD PTR ?MouseYpos@@3MA		; MouseYpos
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L81400
	fld	DWORD PTR _sy$[ebp]
	fadd	DWORD PTR _yrad$[ebp]
	fcomp	DWORD PTR ?MouseYpos@@3MA		; MouseYpos
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $L81400

; 389  : 			{
; 390  : 				if (vec.v[Z] < z)

	fld	DWORD PTR _vec$[ebp+8]
	fcomp	DWORD PTR _z$[ebp]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L81400

; 391  : 				{
; 392  : 					nobj = obj;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	DWORD PTR _nobj$[ebp], eax

; 393  : 					z = vec.v[Z];

	mov	eax, DWORD PTR _vec$[ebp+8]
	mov	DWORD PTR _z$[ebp], eax
$L81400:

; 394  : 				}
; 395  : 			}
; 396  : 		}

	jmp	$L81396
$L81397:

; 397  : 		if (nobj)

	cmp	DWORD PTR _nobj$[ebp], 0
	je	SHORT $L81394

; 398  : 		{
; 399  : 			CurrentFileObject = nobj;

	mov	eax, DWORD PTR _nobj$[ebp]
	mov	DWORD PTR ?CurrentFileObject@@3PAU_EDIT_OBJECT@@A, eax ; CurrentFileObject

; 400  : 			return;

	jmp	$L81363
$L81394:

; 401  : 		}
; 402  : 	}
; 403  : 
; 404  : // new file object?
; 405  : 
; 406  : 	if (Keys[DIK_INSERT] && !LastKeys[DIK_INSERT])

	movsx	eax, BYTE PTR ?Keys@@3PADA+210
	test	eax, eax
	je	$L81403
	movsx	eax, BYTE PTR ?LastKeys@@3PADA+210
	test	eax, eax
	jne	$L81403

; 407  : 	{
; 408  : 		if ((obj = AllocFileObject()))

	call	?AllocFileObject@@YAPAU_EDIT_OBJECT@@XZ	; AllocFileObject
	mov	DWORD PTR _obj$[ebp], eax
	cmp	DWORD PTR _obj$[ebp], 0
	je	$L81403

; 409  : 		{
; 410  : 			vec.v[X] = 0;

	mov	DWORD PTR _vec$[ebp], 0

; 411  : 			vec.v[Y] = 0;

	mov	DWORD PTR _vec$[ebp+4], 0

; 412  : 			vec.v[Z] = 256;

	mov	DWORD PTR _vec$[ebp+8], 1132462080	; 43800000H

; 413  : 			RotVector(&CAM_MainCamera->WMatrix, &vec, &vec2);

	lea	eax, DWORD PTR _vec2$[ebp]
	push	eax
	lea	ecx, DWORD PTR _vec$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	add	edx, 16					; 00000010H
	push	edx
	call	?RotVector@@YAXPATMatrixUnion@@PAUVectorStruct@@1@Z ; RotVector
	add	esp, 12					; 0000000cH

; 414  : 			obj->Pos.v[X] = CAM_MainCamera->WPos.v[X] + vec2.v[X];

	mov	eax, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fld	DWORD PTR _vec2$[ebp]
	fadd	DWORD PTR [eax+68]
	mov	ecx, DWORD PTR _obj$[ebp]
	fstp	DWORD PTR [ecx+20]

; 415  : 			obj->Pos.v[Y] = CAM_MainCamera->WPos.v[Y] + vec2.v[Y];

	mov	eax, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fld	DWORD PTR _vec2$[ebp+4]
	fadd	DWORD PTR [eax+72]
	mov	ecx, DWORD PTR _obj$[ebp]
	fstp	DWORD PTR [ecx+24]

; 416  : 			obj->Pos.v[Z] = CAM_MainCamera->WPos.v[Z] + vec2.v[Z];

	mov	eax, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fld	DWORD PTR _vec2$[ebp+8]
	fadd	DWORD PTR [eax+76]
	mov	ecx, DWORD PTR _obj$[ebp]
	fstp	DWORD PTR [ecx+28]

; 417  : 
; 418  : 			RotMatrixZYX(&obj->Mat, 0, 0, 0);

	push	0
	push	0
	push	0
	mov	eax, DWORD PTR _obj$[ebp]
	add	eax, 32					; 00000020H
	push	eax
	call	?RotMatrixZYX@@YAXPATMatrixUnion@@MMM@Z	; RotMatrixZYX
	add	esp, 16					; 00000010H

; 419  : 
; 420  : 			obj->ID = 0;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	DWORD PTR [eax], 0

; 421  : 
; 422  : 			for (i = 0 ; i < FILE_OBJECT_FLAG_NUM ; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $L81405
$L81406:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$L81405:
	cmp	DWORD PTR _i$[ebp], 4
	jge	SHORT $L81407

; 423  : 				obj->Flag[i] = 0;

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _obj$[ebp]
	mov	DWORD PTR [ecx+eax*4+4], 0
	jmp	SHORT $L81406
$L81407:

; 424  : 
; 425  : 			CurrentFileObject = obj;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	DWORD PTR ?CurrentFileObject@@3PAU_EDIT_OBJECT@@A, eax ; CurrentFileObject
$L81403:

; 426  : 		}
; 427  : 	}
; 428  : 
; 429  : // quit now if no current file object
; 430  : 
; 431  : 	if (!CurrentFileObject) return;

	cmp	DWORD PTR ?CurrentFileObject@@3PAU_EDIT_OBJECT@@A, 0 ; CurrentFileObject
	jne	SHORT $L81408
	jmp	$L81363
$L81408:

; 432  : 
; 433  : // exit current file object edit?
; 434  : 
; 435  : 	if (Keys[DIK_RETURN] && !LastKeys[DIK_RETURN])

	movsx	eax, BYTE PTR ?Keys@@3PADA+28
	test	eax, eax
	je	SHORT $L81409
	movsx	eax, BYTE PTR ?LastKeys@@3PADA+28
	test	eax, eax
	jne	SHORT $L81409

; 436  : 	{
; 437  : 		CurrentFileObject = NULL;

	mov	DWORD PTR ?CurrentFileObject@@3PAU_EDIT_OBJECT@@A, 0 ; CurrentFileObject

; 438  : 		return;

	jmp	$L81363
$L81409:

; 439  : 	}
; 440  : 
; 441  : // delete current file object?
; 442  : 
; 443  : 	if (Keys[DIK_DELETE] && !LastKeys[DIK_DELETE])

	movsx	eax, BYTE PTR ?Keys@@3PADA+211
	test	eax, eax
	je	SHORT $L81410
	movsx	eax, BYTE PTR ?LastKeys@@3PADA+211
	test	eax, eax
	jne	SHORT $L81410

; 444  : 	{
; 445  : 		FreeFileObject(CurrentFileObject);

	mov	eax, DWORD PTR ?CurrentFileObject@@3PAU_EDIT_OBJECT@@A ; CurrentFileObject
	push	eax
	call	?FreeFileObject@@YAXPAU_EDIT_OBJECT@@@Z	; FreeFileObject
	add	esp, 4

; 446  : 		CurrentFileObject = NULL;

	mov	DWORD PTR ?CurrentFileObject@@3PAU_EDIT_OBJECT@@A, 0 ; CurrentFileObject

; 447  : 		return;

	jmp	$L81363
$L81410:

; 448  : 	}
; 449  : 
; 450  : // copy object?
; 451  : 
; 452  : 	if (MouseLeft && !MouseLastLeft && Keys[DIK_LSHIFT])

	movsx	eax, BYTE PTR ?MouseLeft@@3DA		; MouseLeft
	test	eax, eax
	je	SHORT $L81411
	movsx	eax, BYTE PTR ?MouseLastLeft@@3DA	; MouseLastLeft
	test	eax, eax
	jne	SHORT $L81411
	movsx	eax, BYTE PTR ?Keys@@3PADA+42
	test	eax, eax
	je	SHORT $L81411

; 453  : 	{
; 454  : 		if ((obj = AllocFileObject()))

	call	?AllocFileObject@@YAPAU_EDIT_OBJECT@@XZ	; AllocFileObject
	mov	DWORD PTR _obj$[ebp], eax
	cmp	DWORD PTR _obj$[ebp], 0
	je	SHORT $L81411

; 455  : 		{
; 456  : 			memcpy(obj, CurrentFileObject, sizeof(EDIT_OBJECT) - 8);

	push	68					; 00000044H
	mov	eax, DWORD PTR ?CurrentFileObject@@3PAU_EDIT_OBJECT@@A ; CurrentFileObject
	push	eax
	mov	ecx, DWORD PTR _obj$[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 457  : 			CurrentFileObject = obj;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	DWORD PTR ?CurrentFileObject@@3PAU_EDIT_OBJECT@@A, eax ; CurrentFileObject

; 458  : 			return;

	jmp	$L81363
$L81411:

; 459  : 		}
; 460  : 	}
; 461  : 
; 462  : // change axis?
; 463  : 
; 464  : 	if (Keys[DIK_TAB] && !LastKeys[DIK_TAB])

	movsx	eax, BYTE PTR ?Keys@@3PADA+15
	test	eax, eax
	je	SHORT $L81414
	movsx	eax, BYTE PTR ?LastKeys@@3PADA+15
	test	eax, eax
	jne	SHORT $L81414

; 465  : 	{
; 466  : 		if (Keys[DIK_LSHIFT]) FileObjectAxis--;

	movsx	eax, BYTE PTR ?Keys@@3PADA+42
	test	eax, eax
	je	SHORT $L81415
	mov	al, BYTE PTR _FileObjectAxis
	sub	al, 1
	mov	BYTE PTR _FileObjectAxis, al

; 467  : 		else FileObjectAxis++;

	jmp	SHORT $L81416
$L81415:
	mov	al, BYTE PTR _FileObjectAxis
	add	al, 1
	mov	BYTE PTR _FileObjectAxis, al
$L81416:

; 468  : 		if (FileObjectAxis == -1) FileObjectAxis = 5;

	movsx	eax, BYTE PTR _FileObjectAxis
	cmp	eax, -1
	jne	SHORT $L81417
	mov	BYTE PTR _FileObjectAxis, 5
$L81417:

; 469  : 		if (FileObjectAxis == 6) FileObjectAxis = 0;

	movsx	eax, BYTE PTR _FileObjectAxis
	cmp	eax, 6
	jne	SHORT $L81414
	mov	BYTE PTR _FileObjectAxis, 0
$L81414:

; 470  : 	}
; 471  : 
; 472  : // change axis type?
; 473  : 
; 474  : 	if (Keys[DIK_LALT] && !LastKeys[DIK_LALT])

	movsx	eax, BYTE PTR ?Keys@@3PADA+56
	test	eax, eax
	je	SHORT $L81419
	movsx	eax, BYTE PTR ?LastKeys@@3PADA+56
	test	eax, eax
	jne	SHORT $L81419

; 475  : 		FileObjectAxisType ^= 1;

	movsx	eax, BYTE PTR _FileObjectAxisType
	xor	eax, 1
	mov	BYTE PTR _FileObjectAxisType, al
$L81419:

; 476  : 
; 477  : // count valid flags + check flag constraints
; 478  : 
; 479  : 	j = 0;

	mov	DWORD PTR _j$[ebp], 0

; 480  : 	for (i = 0 ; i < FILE_OBJECT_FLAG_NUM ; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $L81420
$L81421:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$L81420:
	cmp	DWORD PTR _i$[ebp], 4
	jge	$L81422

; 481  : 	{
; 482  : 		if (FileObjectInfo[CurrentFileObject->ID].FlagInfo[i].Name)

	mov	eax, DWORD PTR ?CurrentFileObject@@3PAU_EDIT_OBJECT@@A ; CurrentFileObject
	mov	ecx, DWORD PTR [eax]
	imul	ecx, 72					; 00000048H
	mov	edx, DWORD PTR _i$[ebp]
	shl	edx, 4
	cmp	DWORD PTR ?FileObjectInfo@@3PAUFILE_OBJECT_INFO@@A[ecx+edx+8], 0
	je	$L81423

; 483  : 		{
; 484  : 			j++;

	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax

; 485  : 
; 486  : 			if (CurrentFileObject->Flag[i] < FileObjectInfo[CurrentFileObject->ID].FlagInfo[i].Min)

	mov	eax, DWORD PTR ?CurrentFileObject@@3PAU_EDIT_OBJECT@@A ; CurrentFileObject
	mov	ecx, DWORD PTR [eax]
	imul	ecx, 72					; 00000048H
	mov	edx, DWORD PTR _i$[ebp]
	shl	edx, 4
	mov	eax, DWORD PTR _i$[ebp]
	mov	esi, DWORD PTR ?CurrentFileObject@@3PAU_EDIT_OBJECT@@A ; CurrentFileObject
	mov	eax, DWORD PTR [esi+eax*4+4]
	cmp	eax, DWORD PTR ?FileObjectInfo@@3PAUFILE_OBJECT_INFO@@A[ecx+edx+16]
	jge	SHORT $L81424

; 487  : 				CurrentFileObject->Flag[i] = (char)FileObjectInfo[CurrentFileObject->ID].FlagInfo[i].Min;

	mov	eax, DWORD PTR ?CurrentFileObject@@3PAU_EDIT_OBJECT@@A ; CurrentFileObject
	mov	ecx, DWORD PTR [eax]
	imul	ecx, 72					; 00000048H
	mov	edx, DWORD PTR _i$[ebp]
	shl	edx, 4
	movsx	eax, BYTE PTR ?FileObjectInfo@@3PAUFILE_OBJECT_INFO@@A[ecx+edx+16]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR ?CurrentFileObject@@3PAU_EDIT_OBJECT@@A ; CurrentFileObject
	mov	DWORD PTR [edx+ecx*4+4], eax
$L81424:

; 488  : 			if (CurrentFileObject->Flag[i] > FileObjectInfo[CurrentFileObject->ID].FlagInfo[i].Max)

	mov	eax, DWORD PTR ?CurrentFileObject@@3PAU_EDIT_OBJECT@@A ; CurrentFileObject
	mov	ecx, DWORD PTR [eax]
	imul	ecx, 72					; 00000048H
	mov	edx, DWORD PTR _i$[ebp]
	shl	edx, 4
	mov	eax, DWORD PTR _i$[ebp]
	mov	esi, DWORD PTR ?CurrentFileObject@@3PAU_EDIT_OBJECT@@A ; CurrentFileObject
	mov	eax, DWORD PTR [esi+eax*4+4]
	cmp	eax, DWORD PTR ?FileObjectInfo@@3PAUFILE_OBJECT_INFO@@A[ecx+edx+20]
	jle	SHORT $L81423

; 489  : 				CurrentFileObject->Flag[i] = (char)FileObjectInfo[CurrentFileObject->ID].FlagInfo[i].Max;

	mov	eax, DWORD PTR ?CurrentFileObject@@3PAU_EDIT_OBJECT@@A ; CurrentFileObject
	mov	ecx, DWORD PTR [eax]
	imul	ecx, 72					; 00000048H
	mov	edx, DWORD PTR _i$[ebp]
	shl	edx, 4
	movsx	eax, BYTE PTR ?FileObjectInfo@@3PAUFILE_OBJECT_INFO@@A[ecx+edx+20]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR ?CurrentFileObject@@3PAU_EDIT_OBJECT@@A ; CurrentFileObject
	mov	DWORD PTR [edx+ecx*4+4], eax
$L81423:

; 490  : 		}
; 491  : 	}

	jmp	$L81421
$L81422:

; 492  : 
; 493  : // up / down
; 494  : 
; 495  : 	if (Keys[DIK_LSHIFT]) LastKeys[DIK_LEFT] = LastKeys[DIK_RIGHT] = 0;

	movsx	eax, BYTE PTR ?Keys@@3PADA+42
	test	eax, eax
	je	SHORT $L81428
	mov	BYTE PTR ?LastKeys@@3PADA+205, 0
	mov	al, BYTE PTR ?LastKeys@@3PADA+205
	mov	BYTE PTR ?LastKeys@@3PADA+203, al
$L81428:

; 496  : 
; 497  : 	if (Keys[DIK_UP] && !LastKeys[DIK_UP])

	movsx	eax, BYTE PTR ?Keys@@3PADA+200
	test	eax, eax
	je	SHORT $L81429
	movsx	eax, BYTE PTR ?LastKeys@@3PADA+200
	test	eax, eax
	jne	SHORT $L81429

; 498  : 		CurrentFileObjectFlag--;

	mov	eax, DWORD PTR _CurrentFileObjectFlag
	sub	eax, 1
	mov	DWORD PTR _CurrentFileObjectFlag, eax
$L81429:

; 499  : 	if (Keys[DIK_DOWN] && !LastKeys[DIK_DOWN])

	movsx	eax, BYTE PTR ?Keys@@3PADA+208
	test	eax, eax
	je	SHORT $L81430
	movsx	eax, BYTE PTR ?LastKeys@@3PADA+208
	test	eax, eax
	jne	SHORT $L81430

; 500  : 		CurrentFileObjectFlag++;

	mov	eax, DWORD PTR _CurrentFileObjectFlag
	add	eax, 1
	mov	DWORD PTR _CurrentFileObjectFlag, eax
$L81430:

; 501  : 
; 502  : 	if (CurrentFileObjectFlag < -1) CurrentFileObjectFlag = j - 1;

	cmp	DWORD PTR _CurrentFileObjectFlag, -1
	jge	SHORT $L81431
	mov	eax, DWORD PTR _j$[ebp]
	sub	eax, 1
	mov	DWORD PTR _CurrentFileObjectFlag, eax
$L81431:

; 503  : 	if (CurrentFileObjectFlag >= j) CurrentFileObjectFlag = -1;

	mov	eax, DWORD PTR _CurrentFileObjectFlag
	cmp	eax, DWORD PTR _j$[ebp]
	jl	SHORT $L81432
	mov	DWORD PTR _CurrentFileObjectFlag, -1
$L81432:

; 504  : 
; 505  : // change ID?
; 506  : 
; 507  : 	if (CurrentFileObjectFlag == -1)

	cmp	DWORD PTR _CurrentFileObjectFlag, -1
	jne	$L81433

; 508  : 	{
; 509  : 		flag = CurrentFileObject->ID;

	mov	eax, DWORD PTR ?CurrentFileObject@@3PAU_EDIT_OBJECT@@A ; CurrentFileObject
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _flag$[ebp], ecx

; 510  : 		if (Keys[DIK_LEFT] && !LastKeys[DIK_LEFT])

	movsx	eax, BYTE PTR ?Keys@@3PADA+203
	test	eax, eax
	je	SHORT $L81434
	movsx	eax, BYTE PTR ?LastKeys@@3PADA+203
	test	eax, eax
	jne	SHORT $L81434

; 511  : 		{
; 512  : 			flag--;

	mov	eax, DWORD PTR _flag$[ebp]
	sub	eax, 1
	mov	DWORD PTR _flag$[ebp], eax
$L81436:

; 513  : 			while (FileObjectInfo[flag].ModelID == -2) flag--;

	mov	eax, DWORD PTR _flag$[ebp]
	imul	eax, 72					; 00000048H
	cmp	DWORD PTR ?FileObjectInfo@@3PAUFILE_OBJECT_INFO@@A[eax], -2 ; fffffffeH
	jne	SHORT $L81437
	mov	eax, DWORD PTR _flag$[ebp]
	sub	eax, 1
	mov	DWORD PTR _flag$[ebp], eax
	jmp	SHORT $L81436
$L81437:

; 514  : 			if (flag < 0) flag = 0;

	cmp	DWORD PTR _flag$[ebp], 0
	jge	SHORT $L81434
	mov	DWORD PTR _flag$[ebp], 0
$L81434:

; 515  : 		}
; 516  : 
; 517  : 		if (Keys[DIK_RIGHT] && !LastKeys[DIK_RIGHT])

	movsx	eax, BYTE PTR ?Keys@@3PADA+205
	test	eax, eax
	je	SHORT $L81439
	movsx	eax, BYTE PTR ?LastKeys@@3PADA+205
	test	eax, eax
	jne	SHORT $L81439

; 518  : 		{
; 519  : 			flag++;

	mov	eax, DWORD PTR _flag$[ebp]
	add	eax, 1
	mov	DWORD PTR _flag$[ebp], eax
$L81441:

; 520  : 			while (FileObjectInfo[flag].ModelID == -2) flag++;

	mov	eax, DWORD PTR _flag$[ebp]
	imul	eax, 72					; 00000048H
	cmp	DWORD PTR ?FileObjectInfo@@3PAUFILE_OBJECT_INFO@@A[eax], -2 ; fffffffeH
	jne	SHORT $L81442
	mov	eax, DWORD PTR _flag$[ebp]
	add	eax, 1
	mov	DWORD PTR _flag$[ebp], eax
	jmp	SHORT $L81441
$L81442:

; 521  : 			if (FileObjectInfo[flag].ModelID == -1)

	mov	eax, DWORD PTR _flag$[ebp]
	imul	eax, 72					; 00000048H
	cmp	DWORD PTR ?FileObjectInfo@@3PAUFILE_OBJECT_INFO@@A[eax], -1
	jne	SHORT $L81439

; 522  : 			{
; 523  : 				flag--;

	mov	eax, DWORD PTR _flag$[ebp]
	sub	eax, 1
	mov	DWORD PTR _flag$[ebp], eax
$L81445:

; 524  : 				while (FileObjectInfo[flag].ModelID == -2) flag--;

	mov	eax, DWORD PTR _flag$[ebp]
	imul	eax, 72					; 00000048H
	cmp	DWORD PTR ?FileObjectInfo@@3PAUFILE_OBJECT_INFO@@A[eax], -2 ; fffffffeH
	jne	SHORT $L81439
	mov	eax, DWORD PTR _flag$[ebp]
	sub	eax, 1
	mov	DWORD PTR _flag$[ebp], eax
	jmp	SHORT $L81445
$L81439:

; 525  : 			}
; 526  : 		}
; 527  : 		CurrentFileObject->ID = flag;

	mov	eax, DWORD PTR ?CurrentFileObject@@3PAU_EDIT_OBJECT@@A ; CurrentFileObject
	mov	ecx, DWORD PTR _flag$[ebp]
	mov	DWORD PTR [eax], ecx

; 528  : 	}
; 529  : 
; 530  : // change flags?
; 531  : 
; 532  : 	else

	jmp	$L81447
$L81433:

; 533  : 	{
; 534  : 		for (i = j = 0 ; i < CurrentFileObjectFlag ; i++)

	mov	DWORD PTR _j$[ebp], 0
	mov	eax, DWORD PTR _j$[ebp]
	mov	DWORD PTR _i$[ebp], eax
	jmp	SHORT $L81448
$L81449:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$L81448:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _CurrentFileObjectFlag
	jge	SHORT $L81450

; 535  : 		{
; 536  : 			if (FileObjectInfo[CurrentFileObject->ID].FlagInfo[i].Name) j++;

	mov	eax, DWORD PTR ?CurrentFileObject@@3PAU_EDIT_OBJECT@@A ; CurrentFileObject
	mov	ecx, DWORD PTR [eax]
	imul	ecx, 72					; 00000048H
	mov	edx, DWORD PTR _i$[ebp]
	shl	edx, 4
	cmp	DWORD PTR ?FileObjectInfo@@3PAUFILE_OBJECT_INFO@@A[ecx+edx+8], 0
	je	SHORT $L81451
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$L81451:

; 537  : 		}

	jmp	SHORT $L81449
$L81450:

; 538  : 
; 539  : 		flag = CurrentFileObject->Flag[j];

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR ?CurrentFileObject@@3PAU_EDIT_OBJECT@@A ; CurrentFileObject
	mov	edx, DWORD PTR [ecx+eax*4+4]
	mov	DWORD PTR _flag$[ebp], edx

; 540  : 
; 541  : 		if (Keys[DIK_LEFT] && !LastKeys[DIK_LEFT]) flag--;

	movsx	eax, BYTE PTR ?Keys@@3PADA+203
	test	eax, eax
	je	SHORT $L81452
	movsx	eax, BYTE PTR ?LastKeys@@3PADA+203
	test	eax, eax
	jne	SHORT $L81452
	mov	eax, DWORD PTR _flag$[ebp]
	sub	eax, 1
	mov	DWORD PTR _flag$[ebp], eax
$L81452:

; 542  : 		if (Keys[DIK_RIGHT] && !LastKeys[DIK_RIGHT]) flag++;

	movsx	eax, BYTE PTR ?Keys@@3PADA+205
	test	eax, eax
	je	SHORT $L81453
	movsx	eax, BYTE PTR ?LastKeys@@3PADA+205
	test	eax, eax
	jne	SHORT $L81453
	mov	eax, DWORD PTR _flag$[ebp]
	add	eax, 1
	mov	DWORD PTR _flag$[ebp], eax
$L81453:

; 543  : 
; 544  : 		if (flag < FileObjectInfo[CurrentFileObject->ID].FlagInfo[j].Min)

	mov	eax, DWORD PTR ?CurrentFileObject@@3PAU_EDIT_OBJECT@@A ; CurrentFileObject
	mov	ecx, DWORD PTR [eax]
	imul	ecx, 72					; 00000048H
	mov	edx, DWORD PTR _j$[ebp]
	shl	edx, 4
	mov	eax, DWORD PTR _flag$[ebp]
	cmp	eax, DWORD PTR ?FileObjectInfo@@3PAUFILE_OBJECT_INFO@@A[ecx+edx+16]
	jge	SHORT $L81454

; 545  : 			flag = FileObjectInfo[CurrentFileObject->ID].FlagInfo[j].Max;

	mov	eax, DWORD PTR ?CurrentFileObject@@3PAU_EDIT_OBJECT@@A ; CurrentFileObject
	mov	ecx, DWORD PTR [eax]
	imul	ecx, 72					; 00000048H
	mov	edx, DWORD PTR _j$[ebp]
	shl	edx, 4
	mov	eax, DWORD PTR ?FileObjectInfo@@3PAUFILE_OBJECT_INFO@@A[ecx+edx+20]
	mov	DWORD PTR _flag$[ebp], eax
$L81454:

; 546  : 		if (flag > FileObjectInfo[CurrentFileObject->ID].FlagInfo[j].Max)

	mov	eax, DWORD PTR ?CurrentFileObject@@3PAU_EDIT_OBJECT@@A ; CurrentFileObject
	mov	ecx, DWORD PTR [eax]
	imul	ecx, 72					; 00000048H
	mov	edx, DWORD PTR _j$[ebp]
	shl	edx, 4
	mov	eax, DWORD PTR _flag$[ebp]
	cmp	eax, DWORD PTR ?FileObjectInfo@@3PAUFILE_OBJECT_INFO@@A[ecx+edx+20]
	jle	SHORT $L81455

; 547  : 			flag = FileObjectInfo[CurrentFileObject->ID].FlagInfo[j].Min;

	mov	eax, DWORD PTR ?CurrentFileObject@@3PAU_EDIT_OBJECT@@A ; CurrentFileObject
	mov	ecx, DWORD PTR [eax]
	imul	ecx, 72					; 00000048H
	mov	edx, DWORD PTR _j$[ebp]
	shl	edx, 4
	mov	eax, DWORD PTR ?FileObjectInfo@@3PAUFILE_OBJECT_INFO@@A[ecx+edx+16]
	mov	DWORD PTR _flag$[ebp], eax
$L81455:

; 548  : 
; 549  : 		CurrentFileObject->Flag[j] = flag;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR ?CurrentFileObject@@3PAU_EDIT_OBJECT@@A ; CurrentFileObject
	mov	edx, DWORD PTR _flag$[ebp]
	mov	DWORD PTR [ecx+eax*4+4], edx
$L81447:

; 550  : 	}
; 551  : 
; 552  : // move object?
; 553  : 
; 554  : 	if (MouseLeft)

	movsx	eax, BYTE PTR ?MouseLeft@@3DA		; MouseLeft
	test	eax, eax
	je	$L81456

; 555  : 	{
; 556  : 		RotTransVector(&ViewMatrix, &ViewTrans, &CurrentFileObject->Pos, &vec);

	lea	eax, DWORD PTR _vec$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?CurrentFileObject@@3PAU_EDIT_OBJECT@@A ; CurrentFileObject
	add	ecx, 20					; 00000014H
	push	ecx
	push	OFFSET FLAT:?ViewTrans@@3UVectorStruct@@A ; ViewTrans
	push	OFFSET FLAT:?ViewMatrix@@3TMatrixUnion@@A ; ViewMatrix
	call	?RotTransVector@@YAXPATMatrixUnion@@PAUVectorStruct@@11@Z ; RotTransVector
	add	esp, 16					; 00000010H

; 557  : 
; 558  : 		switch (FileObjectAxis)

	movsx	eax, BYTE PTR _FileObjectAxis
	mov	DWORD PTR tv760[ebp], eax
	cmp	DWORD PTR tv760[ebp], 5
	ja	$L81458
	mov	ecx, DWORD PTR tv760[ebp]
	jmp	DWORD PTR $L81717[ecx*4]
$L81461:

; 559  : 		{
; 560  : 			case FILE_OBJECT_AXIS_XY:
; 561  : 				vec.v[X] = MouseXrel * vec.v[Z] / RenderSettings.GeomPers + CameraEditXrel;

	fld	DWORD PTR ?MouseXrel@@3MA		; MouseXrel
	fmul	DWORD PTR _vec$[ebp+8]
	fdiv	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A
	fadd	DWORD PTR ?CameraEditXrel@@3MA		; CameraEditXrel
	fstp	DWORD PTR _vec$[ebp]

; 562  : 				vec.v[Y] = MouseYrel * vec.v[Z] / RenderSettings.GeomPers + CameraEditYrel;

	fld	DWORD PTR ?MouseYrel@@3MA		; MouseYrel
	fmul	DWORD PTR _vec$[ebp+8]
	fdiv	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A
	fadd	DWORD PTR ?CameraEditYrel@@3MA		; CameraEditYrel
	fstp	DWORD PTR _vec$[ebp+4]

; 563  : 				vec.v[Z] = CameraEditZrel;

	mov	eax, DWORD PTR ?CameraEditZrel@@3MA
	mov	DWORD PTR _vec$[ebp+8], eax

; 564  : 				break;

	jmp	$L81458
$L81462:

; 565  : 			case FILE_OBJECT_AXIS_XZ:
; 566  : 				vec.v[X] = MouseXrel * vec.v[Z] / RenderSettings.GeomPers + CameraEditXrel;

	fld	DWORD PTR ?MouseXrel@@3MA		; MouseXrel
	fmul	DWORD PTR _vec$[ebp+8]
	fdiv	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A
	fadd	DWORD PTR ?CameraEditXrel@@3MA		; CameraEditXrel
	fstp	DWORD PTR _vec$[ebp]

; 567  : 				vec.v[Y] = CameraEditYrel;

	mov	eax, DWORD PTR ?CameraEditYrel@@3MA
	mov	DWORD PTR _vec$[ebp+4], eax

; 568  : 				vec.v[Z] = -MouseYrel * vec.v[Z] / RenderSettings.GeomPers + CameraEditZrel;

	fld	DWORD PTR ?MouseYrel@@3MA		; MouseYrel
	fchs
	fmul	DWORD PTR _vec$[ebp+8]
	fdiv	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A
	fadd	DWORD PTR ?CameraEditZrel@@3MA		; CameraEditZrel
	fstp	DWORD PTR _vec$[ebp+8]

; 569  : 				break;

	jmp	$L81458
$L81463:

; 570  : 			case FILE_OBJECT_AXIS_ZY:
; 571  : 				vec.v[X] = CameraEditXrel;

	mov	eax, DWORD PTR ?CameraEditXrel@@3MA
	mov	DWORD PTR _vec$[ebp], eax

; 572  : 				vec.v[Y] = MouseYrel * vec.v[Z] / RenderSettings.GeomPers + CameraEditYrel;

	fld	DWORD PTR ?MouseYrel@@3MA		; MouseYrel
	fmul	DWORD PTR _vec$[ebp+8]
	fdiv	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A
	fadd	DWORD PTR ?CameraEditYrel@@3MA		; CameraEditYrel
	fstp	DWORD PTR _vec$[ebp+4]

; 573  : 				vec.v[Z] = MouseXrel * vec.v[Z] / RenderSettings.GeomPers + CameraEditZrel;

	fld	DWORD PTR ?MouseXrel@@3MA		; MouseXrel
	fmul	DWORD PTR _vec$[ebp+8]
	fdiv	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A
	fadd	DWORD PTR ?CameraEditZrel@@3MA		; CameraEditZrel
	fstp	DWORD PTR _vec$[ebp+8]

; 574  : 				break;

	jmp	SHORT $L81458
$L81464:

; 575  : 			case FILE_OBJECT_AXIS_X:
; 576  : 				vec.v[X] = MouseXrel * vec.v[Z] / RenderSettings.GeomPers + CameraEditXrel;

	fld	DWORD PTR ?MouseXrel@@3MA		; MouseXrel
	fmul	DWORD PTR _vec$[ebp+8]
	fdiv	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A
	fadd	DWORD PTR ?CameraEditXrel@@3MA		; CameraEditXrel
	fstp	DWORD PTR _vec$[ebp]

; 577  : 				vec.v[Y] = CameraEditYrel;

	mov	eax, DWORD PTR ?CameraEditYrel@@3MA
	mov	DWORD PTR _vec$[ebp+4], eax

; 578  : 				vec.v[Z] = CameraEditZrel;

	mov	eax, DWORD PTR ?CameraEditZrel@@3MA
	mov	DWORD PTR _vec$[ebp+8], eax

; 579  : 				break;

	jmp	SHORT $L81458
$L81465:

; 580  : 			case FILE_OBJECT_AXIS_Y:
; 581  : 				vec.v[X] = CameraEditXrel;

	mov	eax, DWORD PTR ?CameraEditXrel@@3MA
	mov	DWORD PTR _vec$[ebp], eax

; 582  : 				vec.v[Y] = MouseYrel * vec.v[Z] / RenderSettings.GeomPers + CameraEditYrel;

	fld	DWORD PTR ?MouseYrel@@3MA		; MouseYrel
	fmul	DWORD PTR _vec$[ebp+8]
	fdiv	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A
	fadd	DWORD PTR ?CameraEditYrel@@3MA		; CameraEditYrel
	fstp	DWORD PTR _vec$[ebp+4]

; 583  : 				vec.v[Z] = CameraEditZrel;

	mov	eax, DWORD PTR ?CameraEditZrel@@3MA
	mov	DWORD PTR _vec$[ebp+8], eax

; 584  : 				break;

	jmp	SHORT $L81458
$L81466:

; 585  : 			case FILE_OBJECT_AXIS_Z:
; 586  : 				vec.v[X] = CameraEditXrel;

	mov	eax, DWORD PTR ?CameraEditXrel@@3MA
	mov	DWORD PTR _vec$[ebp], eax

; 587  : 				vec.v[Y] = CameraEditYrel;

	mov	eax, DWORD PTR ?CameraEditYrel@@3MA
	mov	DWORD PTR _vec$[ebp+4], eax

; 588  : 				vec.v[Z] = -MouseYrel * vec.v[Z] / RenderSettings.GeomPers + CameraEditZrel;

	fld	DWORD PTR ?MouseYrel@@3MA		; MouseYrel
	fchs
	fmul	DWORD PTR _vec$[ebp+8]
	fdiv	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A
	fadd	DWORD PTR ?CameraEditZrel@@3MA		; CameraEditZrel
	fstp	DWORD PTR _vec$[ebp+8]
$L81458:

; 589  : 				break;
; 590  : 		}
; 591  : 
; 592  : 		if (FileObjectAxisType == 1) 

	movsx	eax, BYTE PTR _FileObjectAxisType
	cmp	eax, 1
	jne	SHORT $L81467

; 593  : 		{
; 594  : 			SetVector(&vec2, vec.v[X], vec.v[Y], vec.v[Z]);

	mov	eax, DWORD PTR _vec$[ebp]
	mov	DWORD PTR _vec2$[ebp], eax
	mov	eax, DWORD PTR _vec$[ebp+4]
	mov	DWORD PTR _vec2$[ebp+4], eax
	mov	eax, DWORD PTR _vec$[ebp+8]
	mov	DWORD PTR _vec2$[ebp+8], eax

; 595  : 		}
; 596  : 		else

	jmp	SHORT $L81468
$L81467:

; 597  : 		{
; 598  : 			RotVector(&CAM_MainCamera->WMatrix, &vec, &vec2);

	lea	eax, DWORD PTR _vec2$[ebp]
	push	eax
	lea	ecx, DWORD PTR _vec$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	add	edx, 16					; 00000010H
	push	edx
	call	?RotVector@@YAXPATMatrixUnion@@PAUVectorStruct@@1@Z ; RotVector
	add	esp, 12					; 0000000cH
$L81468:

; 599  : 		}
; 600  : 
; 601  : 		CurrentFileObject->Pos.v[X] += vec2.v[X];

	mov	eax, DWORD PTR ?CurrentFileObject@@3PAU_EDIT_OBJECT@@A ; CurrentFileObject
	fld	DWORD PTR _vec2$[ebp]
	fadd	DWORD PTR [eax+20]
	mov	ecx, DWORD PTR ?CurrentFileObject@@3PAU_EDIT_OBJECT@@A ; CurrentFileObject
	fstp	DWORD PTR [ecx+20]

; 602  : 		CurrentFileObject->Pos.v[Y] += vec2.v[Y];

	mov	eax, DWORD PTR ?CurrentFileObject@@3PAU_EDIT_OBJECT@@A ; CurrentFileObject
	fld	DWORD PTR _vec2$[ebp+4]
	fadd	DWORD PTR [eax+24]
	mov	ecx, DWORD PTR ?CurrentFileObject@@3PAU_EDIT_OBJECT@@A ; CurrentFileObject
	fstp	DWORD PTR [ecx+24]

; 603  : 		CurrentFileObject->Pos.v[Z] += vec2.v[Z];

	mov	eax, DWORD PTR ?CurrentFileObject@@3PAU_EDIT_OBJECT@@A ; CurrentFileObject
	fld	DWORD PTR _vec2$[ebp+8]
	fadd	DWORD PTR [eax+28]
	mov	ecx, DWORD PTR ?CurrentFileObject@@3PAU_EDIT_OBJECT@@A ; CurrentFileObject
	fstp	DWORD PTR [ecx+28]
$L81456:

; 604  : 	}
; 605  : 
; 606  : // rotate object?
; 607  : 
; 608  : 	vec.v[X] = vec.v[Y] = vec.v[Z] = 0;

	mov	DWORD PTR _vec$[ebp+8], 0
	mov	eax, DWORD PTR _vec$[ebp+8]
	mov	DWORD PTR _vec$[ebp+4], eax
	mov	ecx, DWORD PTR _vec$[ebp+4]
	mov	DWORD PTR _vec$[ebp], ecx

; 609  : 
; 610  : 	if (Keys[DIK_NUMPAD7]) vec.v[X] -= 0.001f;

	movsx	eax, BYTE PTR ?Keys@@3PADA+71
	test	eax, eax
	je	SHORT $L81469
	fld	DWORD PTR _vec$[ebp]
	fsub	DWORD PTR __real@3a83126f
	fstp	DWORD PTR _vec$[ebp]
$L81469:

; 611  : 	if (Keys[DIK_NUMPAD4]) vec.v[X] += 0.001f;

	movsx	eax, BYTE PTR ?Keys@@3PADA+75
	test	eax, eax
	je	SHORT $L81470
	fld	DWORD PTR _vec$[ebp]
	fadd	DWORD PTR __real@3a83126f
	fstp	DWORD PTR _vec$[ebp]
$L81470:

; 612  : 	if (Keys[DIK_NUMPAD8]) vec.v[Y] -= 0.001f;

	movsx	eax, BYTE PTR ?Keys@@3PADA+72
	test	eax, eax
	je	SHORT $L81471
	fld	DWORD PTR _vec$[ebp+4]
	fsub	DWORD PTR __real@3a83126f
	fstp	DWORD PTR _vec$[ebp+4]
$L81471:

; 613  : 	if (Keys[DIK_NUMPAD5]) vec.v[Y] += 0.001f;

	movsx	eax, BYTE PTR ?Keys@@3PADA+76
	test	eax, eax
	je	SHORT $L81472
	fld	DWORD PTR _vec$[ebp+4]
	fadd	DWORD PTR __real@3a83126f
	fstp	DWORD PTR _vec$[ebp+4]
$L81472:

; 614  : 	if (Keys[DIK_NUMPAD9]) vec.v[Z] -= 0.001f;

	movsx	eax, BYTE PTR ?Keys@@3PADA+73
	test	eax, eax
	je	SHORT $L81473
	fld	DWORD PTR _vec$[ebp+8]
	fsub	DWORD PTR __real@3a83126f
	fstp	DWORD PTR _vec$[ebp+8]
$L81473:

; 615  : 	if (Keys[DIK_NUMPAD6]) vec.v[Z] += 0.001f;

	movsx	eax, BYTE PTR ?Keys@@3PADA+77
	test	eax, eax
	je	SHORT $L81474
	fld	DWORD PTR _vec$[ebp+8]
	fadd	DWORD PTR __real@3a83126f
	fstp	DWORD PTR _vec$[ebp+8]
$L81474:

; 616  : 
; 617  : 	if (Keys[DIK_NUMPAD1] && !LastKeys[DIK_NUMPAD1]) vec.v[X] += 0.25f;

	movsx	eax, BYTE PTR ?Keys@@3PADA+79
	test	eax, eax
	je	SHORT $L81475
	movsx	eax, BYTE PTR ?LastKeys@@3PADA+79
	test	eax, eax
	jne	SHORT $L81475
	fld	DWORD PTR _vec$[ebp]
	fadd	DWORD PTR __real@3e800000
	fstp	DWORD PTR _vec$[ebp]
$L81475:

; 618  : 	if (Keys[DIK_NUMPAD2] && !LastKeys[DIK_NUMPAD2]) vec.v[Y] += 0.25f;

	movsx	eax, BYTE PTR ?Keys@@3PADA+80
	test	eax, eax
	je	SHORT $L81476
	movsx	eax, BYTE PTR ?LastKeys@@3PADA+80
	test	eax, eax
	jne	SHORT $L81476
	fld	DWORD PTR _vec$[ebp+4]
	fadd	DWORD PTR __real@3e800000
	fstp	DWORD PTR _vec$[ebp+4]
$L81476:

; 619  : 	if (Keys[DIK_NUMPAD3] && !LastKeys[DIK_NUMPAD3]) vec.v[Z] += 0.25f;

	movsx	eax, BYTE PTR ?Keys@@3PADA+81
	test	eax, eax
	je	SHORT $L81477
	movsx	eax, BYTE PTR ?LastKeys@@3PADA+81
	test	eax, eax
	jne	SHORT $L81477
	fld	DWORD PTR _vec$[ebp+8]
	fadd	DWORD PTR __real@3e800000
	fstp	DWORD PTR _vec$[ebp+8]
$L81477:

; 620  : 
; 621  : 	if (Keys[DIK_NUMPAD0]) CopyMatrix(&IdentityMatrix, &CurrentFileObject->Mat);

	movsx	eax, BYTE PTR ?Keys@@3PADA+82
	test	eax, eax
	je	SHORT $L81478
	mov	eax, DWORD PTR ?CurrentFileObject@@3PAU_EDIT_OBJECT@@A ; CurrentFileObject
	add	eax, 32					; 00000020H
	push	eax
	push	OFFSET FLAT:?IdentityMatrix@@3TMatrixUnion@@A ; IdentityMatrix
	call	?CopyMatrix@@YAXPATMatrixUnion@@0@Z	; CopyMatrix
	add	esp, 8
$L81478:

; 622  : 
; 623  : 	RotMatrixZYX(&mat, vec.v[X], vec.v[Y], vec.v[Z]);

	mov	eax, DWORD PTR _vec$[ebp+8]
	push	eax
	mov	ecx, DWORD PTR _vec$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _vec$[ebp]
	push	edx
	lea	eax, DWORD PTR _mat$[ebp]
	push	eax
	call	?RotMatrixZYX@@YAXPATMatrixUnion@@MMM@Z	; RotMatrixZYX
	add	esp, 16					; 00000010H

; 624  : 
; 625  : 	if (FileObjectAxisType)

	movsx	eax, BYTE PTR _FileObjectAxisType
	test	eax, eax
	je	$L81479

; 626  : 	{
; 627  : 		MulMatrix(&mat, &CurrentFileObject->Mat, &mat2);

	lea	eax, DWORD PTR _mat2$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?CurrentFileObject@@3PAU_EDIT_OBJECT@@A ; CurrentFileObject
	add	ecx, 32					; 00000020H
	push	ecx
	lea	edx, DWORD PTR _mat$[ebp]
	push	edx
	call	?MulMatrix@@YAXPATMatrixUnion@@00@Z	; MulMatrix
	add	esp, 12					; 0000000cH

; 628  : 		CopyMatrix(&mat2, &CurrentFileObject->Mat);

	mov	eax, DWORD PTR ?CurrentFileObject@@3PAU_EDIT_OBJECT@@A ; CurrentFileObject
	add	eax, 32					; 00000020H
	push	eax
	lea	ecx, DWORD PTR _mat2$[ebp]
	push	ecx
	call	?CopyMatrix@@YAXPATMatrixUnion@@0@Z	; CopyMatrix
	add	esp, 8

; 629  : 		NormalizeMatrix(&CurrentFileObject->Mat);

	mov	eax, DWORD PTR ?CurrentFileObject@@3PAU_EDIT_OBJECT@@A ; CurrentFileObject
	mov	ecx, DWORD PTR ?CurrentFileObject@@3PAU_EDIT_OBJECT@@A ; CurrentFileObject
	fld	DWORD PTR [eax+44]
	fmul	DWORD PTR [ecx+44]
	mov	edx, DWORD PTR ?CurrentFileObject@@3PAU_EDIT_OBJECT@@A ; CurrentFileObject
	mov	eax, DWORD PTR ?CurrentFileObject@@3PAU_EDIT_OBJECT@@A ; CurrentFileObject
	fld	DWORD PTR [edx+48]
	fmul	DWORD PTR [eax+48]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR ?CurrentFileObject@@3PAU_EDIT_OBJECT@@A ; CurrentFileObject
	mov	edx, DWORD PTR ?CurrentFileObject@@3PAU_EDIT_OBJECT@@A ; CurrentFileObject
	fld	DWORD PTR [ecx+52]
	fmul	DWORD PTR [edx+52]
	faddp	ST(1), ST(0)
	push	ecx
	fstp	DWORD PTR [esp]
	call	?sqrt@@YAMM@Z				; sqrt
	add	esp, 4
	fdivr	DWORD PTR __real@3f800000
	fstp	DWORD PTR __mul$81480[ebp]
	mov	eax, DWORD PTR ?CurrentFileObject@@3PAU_EDIT_OBJECT@@A ; CurrentFileObject
	fld	DWORD PTR __mul$81480[ebp]
	fmul	DWORD PTR [eax+44]
	mov	ecx, DWORD PTR ?CurrentFileObject@@3PAU_EDIT_OBJECT@@A ; CurrentFileObject
	fstp	DWORD PTR [ecx+44]
	mov	eax, DWORD PTR ?CurrentFileObject@@3PAU_EDIT_OBJECT@@A ; CurrentFileObject
	fld	DWORD PTR __mul$81480[ebp]
	fmul	DWORD PTR [eax+48]
	mov	ecx, DWORD PTR ?CurrentFileObject@@3PAU_EDIT_OBJECT@@A ; CurrentFileObject
	fstp	DWORD PTR [ecx+48]
	mov	eax, DWORD PTR ?CurrentFileObject@@3PAU_EDIT_OBJECT@@A ; CurrentFileObject
	fld	DWORD PTR __mul$81480[ebp]
	fmul	DWORD PTR [eax+52]
	mov	ecx, DWORD PTR ?CurrentFileObject@@3PAU_EDIT_OBJECT@@A ; CurrentFileObject
	fstp	DWORD PTR [ecx+52]
	mov	eax, DWORD PTR ?CurrentFileObject@@3PAU_EDIT_OBJECT@@A ; CurrentFileObject
	mov	ecx, DWORD PTR ?CurrentFileObject@@3PAU_EDIT_OBJECT@@A ; CurrentFileObject
	fld	DWORD PTR [eax+56]
	fmul	DWORD PTR [ecx+56]
	mov	edx, DWORD PTR ?CurrentFileObject@@3PAU_EDIT_OBJECT@@A ; CurrentFileObject
	mov	eax, DWORD PTR ?CurrentFileObject@@3PAU_EDIT_OBJECT@@A ; CurrentFileObject
	fld	DWORD PTR [edx+60]
	fmul	DWORD PTR [eax+60]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR ?CurrentFileObject@@3PAU_EDIT_OBJECT@@A ; CurrentFileObject
	mov	edx, DWORD PTR ?CurrentFileObject@@3PAU_EDIT_OBJECT@@A ; CurrentFileObject
	fld	DWORD PTR [ecx+64]
	fmul	DWORD PTR [edx+64]
	faddp	ST(1), ST(0)
	push	ecx
	fstp	DWORD PTR [esp]
	call	?sqrt@@YAMM@Z				; sqrt
	add	esp, 4
	fdivr	DWORD PTR __real@3f800000
	fstp	DWORD PTR __mul$81482[ebp]
	mov	eax, DWORD PTR ?CurrentFileObject@@3PAU_EDIT_OBJECT@@A ; CurrentFileObject
	fld	DWORD PTR __mul$81482[ebp]
	fmul	DWORD PTR [eax+56]
	mov	ecx, DWORD PTR ?CurrentFileObject@@3PAU_EDIT_OBJECT@@A ; CurrentFileObject
	fstp	DWORD PTR [ecx+56]
	mov	eax, DWORD PTR ?CurrentFileObject@@3PAU_EDIT_OBJECT@@A ; CurrentFileObject
	fld	DWORD PTR __mul$81482[ebp]
	fmul	DWORD PTR [eax+60]
	mov	ecx, DWORD PTR ?CurrentFileObject@@3PAU_EDIT_OBJECT@@A ; CurrentFileObject
	fstp	DWORD PTR [ecx+60]
	mov	eax, DWORD PTR ?CurrentFileObject@@3PAU_EDIT_OBJECT@@A ; CurrentFileObject
	fld	DWORD PTR __mul$81482[ebp]
	fmul	DWORD PTR [eax+64]
	mov	ecx, DWORD PTR ?CurrentFileObject@@3PAU_EDIT_OBJECT@@A ; CurrentFileObject
	fstp	DWORD PTR [ecx+64]
	mov	eax, DWORD PTR ?CurrentFileObject@@3PAU_EDIT_OBJECT@@A ; CurrentFileObject
	mov	ecx, DWORD PTR ?CurrentFileObject@@3PAU_EDIT_OBJECT@@A ; CurrentFileObject
	fld	DWORD PTR [eax+48]
	fmul	DWORD PTR [ecx+64]
	mov	edx, DWORD PTR ?CurrentFileObject@@3PAU_EDIT_OBJECT@@A ; CurrentFileObject
	mov	eax, DWORD PTR ?CurrentFileObject@@3PAU_EDIT_OBJECT@@A ; CurrentFileObject
	fld	DWORD PTR [edx+52]
	fmul	DWORD PTR [eax+60]
	fsubp	ST(1), ST(0)
	mov	ecx, DWORD PTR ?CurrentFileObject@@3PAU_EDIT_OBJECT@@A ; CurrentFileObject
	fstp	DWORD PTR [ecx+32]
	mov	eax, DWORD PTR ?CurrentFileObject@@3PAU_EDIT_OBJECT@@A ; CurrentFileObject
	mov	ecx, DWORD PTR ?CurrentFileObject@@3PAU_EDIT_OBJECT@@A ; CurrentFileObject
	fld	DWORD PTR [eax+52]
	fmul	DWORD PTR [ecx+56]
	mov	edx, DWORD PTR ?CurrentFileObject@@3PAU_EDIT_OBJECT@@A ; CurrentFileObject
	mov	eax, DWORD PTR ?CurrentFileObject@@3PAU_EDIT_OBJECT@@A ; CurrentFileObject
	fld	DWORD PTR [edx+44]
	fmul	DWORD PTR [eax+64]
	fsubp	ST(1), ST(0)
	mov	ecx, DWORD PTR ?CurrentFileObject@@3PAU_EDIT_OBJECT@@A ; CurrentFileObject
	fstp	DWORD PTR [ecx+36]
	mov	eax, DWORD PTR ?CurrentFileObject@@3PAU_EDIT_OBJECT@@A ; CurrentFileObject
	mov	ecx, DWORD PTR ?CurrentFileObject@@3PAU_EDIT_OBJECT@@A ; CurrentFileObject
	fld	DWORD PTR [eax+44]
	fmul	DWORD PTR [ecx+60]
	mov	edx, DWORD PTR ?CurrentFileObject@@3PAU_EDIT_OBJECT@@A ; CurrentFileObject
	mov	eax, DWORD PTR ?CurrentFileObject@@3PAU_EDIT_OBJECT@@A ; CurrentFileObject
	fld	DWORD PTR [edx+48]
	fmul	DWORD PTR [eax+56]
	fsubp	ST(1), ST(0)
	mov	ecx, DWORD PTR ?CurrentFileObject@@3PAU_EDIT_OBJECT@@A ; CurrentFileObject
	fstp	DWORD PTR [ecx+40]
	mov	eax, DWORD PTR ?CurrentFileObject@@3PAU_EDIT_OBJECT@@A ; CurrentFileObject
	mov	ecx, DWORD PTR ?CurrentFileObject@@3PAU_EDIT_OBJECT@@A ; CurrentFileObject
	fld	DWORD PTR [eax+60]
	fmul	DWORD PTR [ecx+40]
	mov	edx, DWORD PTR ?CurrentFileObject@@3PAU_EDIT_OBJECT@@A ; CurrentFileObject
	mov	eax, DWORD PTR ?CurrentFileObject@@3PAU_EDIT_OBJECT@@A ; CurrentFileObject
	fld	DWORD PTR [edx+64]
	fmul	DWORD PTR [eax+36]
	fsubp	ST(1), ST(0)
	mov	ecx, DWORD PTR ?CurrentFileObject@@3PAU_EDIT_OBJECT@@A ; CurrentFileObject
	fstp	DWORD PTR [ecx+44]
	mov	eax, DWORD PTR ?CurrentFileObject@@3PAU_EDIT_OBJECT@@A ; CurrentFileObject
	mov	ecx, DWORD PTR ?CurrentFileObject@@3PAU_EDIT_OBJECT@@A ; CurrentFileObject
	fld	DWORD PTR [eax+64]
	fmul	DWORD PTR [ecx+32]
	mov	edx, DWORD PTR ?CurrentFileObject@@3PAU_EDIT_OBJECT@@A ; CurrentFileObject
	mov	eax, DWORD PTR ?CurrentFileObject@@3PAU_EDIT_OBJECT@@A ; CurrentFileObject
	fld	DWORD PTR [edx+56]
	fmul	DWORD PTR [eax+40]
	fsubp	ST(1), ST(0)
	mov	ecx, DWORD PTR ?CurrentFileObject@@3PAU_EDIT_OBJECT@@A ; CurrentFileObject
	fstp	DWORD PTR [ecx+48]
	mov	eax, DWORD PTR ?CurrentFileObject@@3PAU_EDIT_OBJECT@@A ; CurrentFileObject
	mov	ecx, DWORD PTR ?CurrentFileObject@@3PAU_EDIT_OBJECT@@A ; CurrentFileObject
	fld	DWORD PTR [eax+56]
	fmul	DWORD PTR [ecx+36]
	mov	edx, DWORD PTR ?CurrentFileObject@@3PAU_EDIT_OBJECT@@A ; CurrentFileObject
	mov	eax, DWORD PTR ?CurrentFileObject@@3PAU_EDIT_OBJECT@@A ; CurrentFileObject
	fld	DWORD PTR [edx+60]
	fmul	DWORD PTR [eax+32]
	fsubp	ST(1), ST(0)
	mov	ecx, DWORD PTR ?CurrentFileObject@@3PAU_EDIT_OBJECT@@A ; CurrentFileObject
	fstp	DWORD PTR [ecx+52]

; 630  : 	}
; 631  : 	else if (vec.v[X] || vec.v[Y] || vec.v[Z])

	jmp	$L81363
$L81479:
	fld	DWORD PTR __real@00000000
	fld	DWORD PTR _vec$[ebp]
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $L81486
	fld	DWORD PTR __real@00000000
	fld	DWORD PTR _vec$[ebp+4]
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $L81486
	fld	DWORD PTR __real@00000000
	fld	DWORD PTR _vec$[ebp+8]
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jnp	$L81363
$L81486:

; 632  : 	{
; 633  : 		RotVector(&ViewMatrix, &CurrentFileObject->Mat.mv[X], &r);

	lea	eax, DWORD PTR _r$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?CurrentFileObject@@3PAU_EDIT_OBJECT@@A ; CurrentFileObject
	add	ecx, 32					; 00000020H
	push	ecx
	push	OFFSET FLAT:?ViewMatrix@@3TMatrixUnion@@A ; ViewMatrix
	call	?RotVector@@YAXPATMatrixUnion@@PAUVectorStruct@@1@Z ; RotVector
	add	esp, 12					; 0000000cH

; 634  : 		RotVector(&ViewMatrix, &CurrentFileObject->Mat.mv[Y], &u);

	lea	eax, DWORD PTR _u$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?CurrentFileObject@@3PAU_EDIT_OBJECT@@A ; CurrentFileObject
	add	ecx, 44					; 0000002cH
	push	ecx
	push	OFFSET FLAT:?ViewMatrix@@3TMatrixUnion@@A ; ViewMatrix
	call	?RotVector@@YAXPATMatrixUnion@@PAUVectorStruct@@1@Z ; RotVector
	add	esp, 12					; 0000000cH

; 635  : 		RotVector(&ViewMatrix, &CurrentFileObject->Mat.mv[Z], &l);

	lea	eax, DWORD PTR _l$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?CurrentFileObject@@3PAU_EDIT_OBJECT@@A ; CurrentFileObject
	add	ecx, 56					; 00000038H
	push	ecx
	push	OFFSET FLAT:?ViewMatrix@@3TMatrixUnion@@A ; ViewMatrix
	call	?RotVector@@YAXPATMatrixUnion@@PAUVectorStruct@@1@Z ; RotVector
	add	esp, 12					; 0000000cH

; 636  : 
; 637  : 		RotVector(&mat, &r, &r2);

	lea	eax, DWORD PTR _r2$[ebp]
	push	eax
	lea	ecx, DWORD PTR _r$[ebp]
	push	ecx
	lea	edx, DWORD PTR _mat$[ebp]
	push	edx
	call	?RotVector@@YAXPATMatrixUnion@@PAUVectorStruct@@1@Z ; RotVector
	add	esp, 12					; 0000000cH

; 638  : 		RotVector(&mat, &u, &u2);

	lea	eax, DWORD PTR _u2$[ebp]
	push	eax
	lea	ecx, DWORD PTR _u$[ebp]
	push	ecx
	lea	edx, DWORD PTR _mat$[ebp]
	push	edx
	call	?RotVector@@YAXPATMatrixUnion@@PAUVectorStruct@@1@Z ; RotVector
	add	esp, 12					; 0000000cH

; 639  : 		RotVector(&mat, &l, &l2);

	lea	eax, DWORD PTR _l2$[ebp]
	push	eax
	lea	ecx, DWORD PTR _l$[ebp]
	push	ecx
	lea	edx, DWORD PTR _mat$[ebp]
	push	edx
	call	?RotVector@@YAXPATMatrixUnion@@PAUVectorStruct@@1@Z ; RotVector
	add	esp, 12					; 0000000cH

; 640  : 
; 641  : 		RotVector(&CAM_MainCamera->WMatrix, &r2, &CurrentFileObject->Mat.mv[X]);

	mov	eax, DWORD PTR ?CurrentFileObject@@3PAU_EDIT_OBJECT@@A ; CurrentFileObject
	add	eax, 32					; 00000020H
	push	eax
	lea	ecx, DWORD PTR _r2$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	add	edx, 16					; 00000010H
	push	edx
	call	?RotVector@@YAXPATMatrixUnion@@PAUVectorStruct@@1@Z ; RotVector
	add	esp, 12					; 0000000cH

; 642  : 		RotVector(&CAM_MainCamera->WMatrix, &u2, &CurrentFileObject->Mat.mv[Y]);

	mov	eax, DWORD PTR ?CurrentFileObject@@3PAU_EDIT_OBJECT@@A ; CurrentFileObject
	add	eax, 44					; 0000002cH
	push	eax
	lea	ecx, DWORD PTR _u2$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	add	edx, 16					; 00000010H
	push	edx
	call	?RotVector@@YAXPATMatrixUnion@@PAUVectorStruct@@1@Z ; RotVector
	add	esp, 12					; 0000000cH

; 643  : 		RotVector(&CAM_MainCamera->WMatrix, &l2, &CurrentFileObject->Mat.mv[Z]);

	mov	eax, DWORD PTR ?CurrentFileObject@@3PAU_EDIT_OBJECT@@A ; CurrentFileObject
	add	eax, 56					; 00000038H
	push	eax
	lea	ecx, DWORD PTR _l2$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	add	edx, 16					; 00000010H
	push	edx
	call	?RotVector@@YAXPATMatrixUnion@@PAUVectorStruct@@1@Z ; RotVector
	add	esp, 12					; 0000000cH

; 644  : 
; 645  : 		NormalizeMatrix(&CurrentFileObject->Mat);

	mov	eax, DWORD PTR ?CurrentFileObject@@3PAU_EDIT_OBJECT@@A ; CurrentFileObject
	mov	ecx, DWORD PTR ?CurrentFileObject@@3PAU_EDIT_OBJECT@@A ; CurrentFileObject
	fld	DWORD PTR [eax+44]
	fmul	DWORD PTR [ecx+44]
	mov	edx, DWORD PTR ?CurrentFileObject@@3PAU_EDIT_OBJECT@@A ; CurrentFileObject
	mov	eax, DWORD PTR ?CurrentFileObject@@3PAU_EDIT_OBJECT@@A ; CurrentFileObject
	fld	DWORD PTR [edx+48]
	fmul	DWORD PTR [eax+48]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR ?CurrentFileObject@@3PAU_EDIT_OBJECT@@A ; CurrentFileObject
	mov	edx, DWORD PTR ?CurrentFileObject@@3PAU_EDIT_OBJECT@@A ; CurrentFileObject
	fld	DWORD PTR [ecx+52]
	fmul	DWORD PTR [edx+52]
	faddp	ST(1), ST(0)
	push	ecx
	fstp	DWORD PTR [esp]
	call	?sqrt@@YAMM@Z				; sqrt
	add	esp, 4
	fdivr	DWORD PTR __real@3f800000
	fstp	DWORD PTR __mul$81487[ebp]
	mov	eax, DWORD PTR ?CurrentFileObject@@3PAU_EDIT_OBJECT@@A ; CurrentFileObject
	fld	DWORD PTR __mul$81487[ebp]
	fmul	DWORD PTR [eax+44]
	mov	ecx, DWORD PTR ?CurrentFileObject@@3PAU_EDIT_OBJECT@@A ; CurrentFileObject
	fstp	DWORD PTR [ecx+44]
	mov	eax, DWORD PTR ?CurrentFileObject@@3PAU_EDIT_OBJECT@@A ; CurrentFileObject
	fld	DWORD PTR __mul$81487[ebp]
	fmul	DWORD PTR [eax+48]
	mov	ecx, DWORD PTR ?CurrentFileObject@@3PAU_EDIT_OBJECT@@A ; CurrentFileObject
	fstp	DWORD PTR [ecx+48]
	mov	eax, DWORD PTR ?CurrentFileObject@@3PAU_EDIT_OBJECT@@A ; CurrentFileObject
	fld	DWORD PTR __mul$81487[ebp]
	fmul	DWORD PTR [eax+52]
	mov	ecx, DWORD PTR ?CurrentFileObject@@3PAU_EDIT_OBJECT@@A ; CurrentFileObject
	fstp	DWORD PTR [ecx+52]
	mov	eax, DWORD PTR ?CurrentFileObject@@3PAU_EDIT_OBJECT@@A ; CurrentFileObject
	mov	ecx, DWORD PTR ?CurrentFileObject@@3PAU_EDIT_OBJECT@@A ; CurrentFileObject
	fld	DWORD PTR [eax+56]
	fmul	DWORD PTR [ecx+56]
	mov	edx, DWORD PTR ?CurrentFileObject@@3PAU_EDIT_OBJECT@@A ; CurrentFileObject
	mov	eax, DWORD PTR ?CurrentFileObject@@3PAU_EDIT_OBJECT@@A ; CurrentFileObject
	fld	DWORD PTR [edx+60]
	fmul	DWORD PTR [eax+60]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR ?CurrentFileObject@@3PAU_EDIT_OBJECT@@A ; CurrentFileObject
	mov	edx, DWORD PTR ?CurrentFileObject@@3PAU_EDIT_OBJECT@@A ; CurrentFileObject
	fld	DWORD PTR [ecx+64]
	fmul	DWORD PTR [edx+64]
	faddp	ST(1), ST(0)
	push	ecx
	fstp	DWORD PTR [esp]
	call	?sqrt@@YAMM@Z				; sqrt
	add	esp, 4
	fdivr	DWORD PTR __real@3f800000
	fstp	DWORD PTR __mul$81489[ebp]
	mov	eax, DWORD PTR ?CurrentFileObject@@3PAU_EDIT_OBJECT@@A ; CurrentFileObject
	fld	DWORD PTR __mul$81489[ebp]
	fmul	DWORD PTR [eax+56]
	mov	ecx, DWORD PTR ?CurrentFileObject@@3PAU_EDIT_OBJECT@@A ; CurrentFileObject
	fstp	DWORD PTR [ecx+56]
	mov	eax, DWORD PTR ?CurrentFileObject@@3PAU_EDIT_OBJECT@@A ; CurrentFileObject
	fld	DWORD PTR __mul$81489[ebp]
	fmul	DWORD PTR [eax+60]
	mov	ecx, DWORD PTR ?CurrentFileObject@@3PAU_EDIT_OBJECT@@A ; CurrentFileObject
	fstp	DWORD PTR [ecx+60]
	mov	eax, DWORD PTR ?CurrentFileObject@@3PAU_EDIT_OBJECT@@A ; CurrentFileObject
	fld	DWORD PTR __mul$81489[ebp]
	fmul	DWORD PTR [eax+64]
	mov	ecx, DWORD PTR ?CurrentFileObject@@3PAU_EDIT_OBJECT@@A ; CurrentFileObject
	fstp	DWORD PTR [ecx+64]
	mov	eax, DWORD PTR ?CurrentFileObject@@3PAU_EDIT_OBJECT@@A ; CurrentFileObject
	mov	ecx, DWORD PTR ?CurrentFileObject@@3PAU_EDIT_OBJECT@@A ; CurrentFileObject
	fld	DWORD PTR [eax+48]
	fmul	DWORD PTR [ecx+64]
	mov	edx, DWORD PTR ?CurrentFileObject@@3PAU_EDIT_OBJECT@@A ; CurrentFileObject
	mov	eax, DWORD PTR ?CurrentFileObject@@3PAU_EDIT_OBJECT@@A ; CurrentFileObject
	fld	DWORD PTR [edx+52]
	fmul	DWORD PTR [eax+60]
	fsubp	ST(1), ST(0)
	mov	ecx, DWORD PTR ?CurrentFileObject@@3PAU_EDIT_OBJECT@@A ; CurrentFileObject
	fstp	DWORD PTR [ecx+32]
	mov	eax, DWORD PTR ?CurrentFileObject@@3PAU_EDIT_OBJECT@@A ; CurrentFileObject
	mov	ecx, DWORD PTR ?CurrentFileObject@@3PAU_EDIT_OBJECT@@A ; CurrentFileObject
	fld	DWORD PTR [eax+52]
	fmul	DWORD PTR [ecx+56]
	mov	edx, DWORD PTR ?CurrentFileObject@@3PAU_EDIT_OBJECT@@A ; CurrentFileObject
	mov	eax, DWORD PTR ?CurrentFileObject@@3PAU_EDIT_OBJECT@@A ; CurrentFileObject
	fld	DWORD PTR [edx+44]
	fmul	DWORD PTR [eax+64]
	fsubp	ST(1), ST(0)
	mov	ecx, DWORD PTR ?CurrentFileObject@@3PAU_EDIT_OBJECT@@A ; CurrentFileObject
	fstp	DWORD PTR [ecx+36]
	mov	eax, DWORD PTR ?CurrentFileObject@@3PAU_EDIT_OBJECT@@A ; CurrentFileObject
	mov	ecx, DWORD PTR ?CurrentFileObject@@3PAU_EDIT_OBJECT@@A ; CurrentFileObject
	fld	DWORD PTR [eax+44]
	fmul	DWORD PTR [ecx+60]
	mov	edx, DWORD PTR ?CurrentFileObject@@3PAU_EDIT_OBJECT@@A ; CurrentFileObject
	mov	eax, DWORD PTR ?CurrentFileObject@@3PAU_EDIT_OBJECT@@A ; CurrentFileObject
	fld	DWORD PTR [edx+48]
	fmul	DWORD PTR [eax+56]
	fsubp	ST(1), ST(0)
	mov	ecx, DWORD PTR ?CurrentFileObject@@3PAU_EDIT_OBJECT@@A ; CurrentFileObject
	fstp	DWORD PTR [ecx+40]
	mov	eax, DWORD PTR ?CurrentFileObject@@3PAU_EDIT_OBJECT@@A ; CurrentFileObject
	mov	ecx, DWORD PTR ?CurrentFileObject@@3PAU_EDIT_OBJECT@@A ; CurrentFileObject
	fld	DWORD PTR [eax+60]
	fmul	DWORD PTR [ecx+40]
	mov	edx, DWORD PTR ?CurrentFileObject@@3PAU_EDIT_OBJECT@@A ; CurrentFileObject
	mov	eax, DWORD PTR ?CurrentFileObject@@3PAU_EDIT_OBJECT@@A ; CurrentFileObject
	fld	DWORD PTR [edx+64]
	fmul	DWORD PTR [eax+36]
	fsubp	ST(1), ST(0)
	mov	ecx, DWORD PTR ?CurrentFileObject@@3PAU_EDIT_OBJECT@@A ; CurrentFileObject
	fstp	DWORD PTR [ecx+44]
	mov	eax, DWORD PTR ?CurrentFileObject@@3PAU_EDIT_OBJECT@@A ; CurrentFileObject
	mov	ecx, DWORD PTR ?CurrentFileObject@@3PAU_EDIT_OBJECT@@A ; CurrentFileObject
	fld	DWORD PTR [eax+64]
	fmul	DWORD PTR [ecx+32]
	mov	edx, DWORD PTR ?CurrentFileObject@@3PAU_EDIT_OBJECT@@A ; CurrentFileObject
	mov	eax, DWORD PTR ?CurrentFileObject@@3PAU_EDIT_OBJECT@@A ; CurrentFileObject
	fld	DWORD PTR [edx+56]
	fmul	DWORD PTR [eax+40]
	fsubp	ST(1), ST(0)
	mov	ecx, DWORD PTR ?CurrentFileObject@@3PAU_EDIT_OBJECT@@A ; CurrentFileObject
	fstp	DWORD PTR [ecx+48]
	mov	eax, DWORD PTR ?CurrentFileObject@@3PAU_EDIT_OBJECT@@A ; CurrentFileObject
	mov	ecx, DWORD PTR ?CurrentFileObject@@3PAU_EDIT_OBJECT@@A ; CurrentFileObject
	fld	DWORD PTR [eax+56]
	fmul	DWORD PTR [ecx+36]
	mov	edx, DWORD PTR ?CurrentFileObject@@3PAU_EDIT_OBJECT@@A ; CurrentFileObject
	mov	eax, DWORD PTR ?CurrentFileObject@@3PAU_EDIT_OBJECT@@A ; CurrentFileObject
	fld	DWORD PTR [edx+60]
	fmul	DWORD PTR [eax+32]
	fsubp	ST(1), ST(0)
	mov	ecx, DWORD PTR ?CurrentFileObject@@3PAU_EDIT_OBJECT@@A ; CurrentFileObject
	fstp	DWORD PTR [ecx+52]
$L81363:

; 646  : 	}
; 647  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
$L81717:
	DD	$L81461
	DD	$L81462
	DD	$L81463
	DD	$L81464
	DD	$L81465
	DD	$L81466
?EditFileObjects@@YAXXZ ENDP				; EditFileObjects
_TEXT	ENDS
PUBLIC	_sqrtf
; Function compile flags: /Odt /ZI
; File c:\program files\microsoft visual studio .net 2003\vc7\include\math.h
;	COMDAT ?sqrt@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?sqrt@@YAMM@Z PROC NEAR					; sqrt, COMDAT

; 579  :         {return (sqrtf(_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR __X$[ebp]
	push	eax
	call	_sqrtf
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?sqrt@@YAMM@Z ENDP					; sqrt
_TEXT	ENDS
EXTRN	_sqrt:NEAR
; Function compile flags: /Odt /ZI
;	COMDAT _sqrtf
_TEXT	SEGMENT
tv70 = -68						; size = 4
__X$ = 8						; size = 4
_sqrtf	PROC NEAR					; COMDAT

; 470  :         {return ((float)sqrt((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	fld	DWORD PTR __X$[ebp]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	call	_sqrt
	add	esp, 8
	fst	DWORD PTR tv70[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_sqrtf	ENDP
_TEXT	ENDS
PUBLIC	?DrawFileObjects@@YAXXZ				; DrawFileObjects
PUBLIC	__real@41200000
PUBLIC	__real@42480000
EXTRN	?DrawBoundingBox@@YAXMMMMMMJJJJJJ@Z:NEAR	; DrawBoundingBox
EXTRN	?DrawModel@@YAXPAUMODEL@@PATMatrixUnion@@PAUVectorStruct@@F@Z:NEAR ; DrawModel
EXTRN	?DrawAxis@@YAXPATMatrixUnion@@PAUVectorStruct@@@Z:NEAR ; DrawAxis
_BSS	SEGMENT
_FileObjectModels DD 01H DUP (?)
_BSS	ENDS
;	COMDAT __real@41200000
; File c:\documents and settings\jarhead\desktop\shit to display my love for xbox revolt and fuck you borman-ness\revolt source\source\editobj.cpp
CONST	SEGMENT
__real@41200000 DD 041200000r			; 10
CONST	ENDS
;	COMDAT __real@42480000
CONST	SEGMENT
__real@42480000 DD 042480000r			; 50
; Function compile flags: /Odt /ZI
CONST	ENDS
;	COMDAT ?DrawFileObjects@@YAXXZ
_TEXT	SEGMENT
_model$ = -8						; size = 4
_obj$ = -4						; size = 4
?DrawFileObjects@@YAXXZ PROC NEAR			; DrawFileObjects, COMDAT

; 654  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi

; 655  : 	EDIT_OBJECT *obj;
; 656  : 	MODEL *model;
; 657  : 
; 658  : // loop thru file objects
; 659  : 
; 660  : 	for (obj = UsedFileObjectHead ; obj ; obj = obj->Next)

	mov	eax, DWORD PTR _UsedFileObjectHead
	mov	DWORD PTR _obj$[ebp], eax
	jmp	SHORT $L81496
$L81497:
	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	mov	DWORD PTR _obj$[ebp], ecx
$L81496:
	cmp	DWORD PTR _obj$[ebp], 0
	je	$L81493

; 661  : 	{
; 662  : 
; 663  : // draw model
; 664  : 
; 665  : 		if (obj->ID == OBJECT_TYPE_PLANET && obj->Flag[0] != PLANET_SUN)

	mov	eax, DWORD PTR _obj$[ebp]
	cmp	DWORD PTR [eax], 2
	jne	SHORT $L81499
	mov	eax, DWORD PTR _obj$[ebp]
	cmp	DWORD PTR [eax+4], 11			; 0000000bH
	je	SHORT $L81499

; 666  : 			model = &FileObjectModels[FileObjectInfo[obj->ID].ModelID + obj->Flag[0]];

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax]
	imul	ecx, 72					; 00000048H
	mov	edx, DWORD PTR ?FileObjectInfo@@3PAUFILE_OBJECT_INFO@@A[ecx]
	mov	eax, DWORD PTR _obj$[ebp]
	add	edx, DWORD PTR [eax+4]
	imul	edx, 60					; 0000003cH
	add	edx, DWORD PTR _FileObjectModels
	mov	DWORD PTR _model$[ebp], edx

; 667  : 		else if (obj->ID == OBJECT_TYPE_STROBE)

	jmp	SHORT $L81500
$L81499:
	mov	eax, DWORD PTR _obj$[ebp]
	cmp	DWORD PTR [eax], 14			; 0000000eH
	jne	SHORT $L81501

; 668  : 			model = &FileObjectModels[FileObjectInfo[obj->ID].ModelID + obj->Flag[0]];

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax]
	imul	ecx, 72					; 00000048H
	mov	edx, DWORD PTR ?FileObjectInfo@@3PAUFILE_OBJECT_INFO@@A[ecx]
	mov	eax, DWORD PTR _obj$[ebp]
	add	edx, DWORD PTR [eax+4]
	imul	edx, 60					; 0000003cH
	add	edx, DWORD PTR _FileObjectModels
	mov	DWORD PTR _model$[ebp], edx

; 669  : 		else

	jmp	SHORT $L81500
$L81501:

; 670  : 			model = &FileObjectModels[FileObjectInfo[obj->ID].ModelID];

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax]
	imul	ecx, 72					; 00000048H
	mov	edx, DWORD PTR ?FileObjectInfo@@3PAUFILE_OBJECT_INFO@@A[ecx]
	imul	edx, 60					; 0000003cH
	add	edx, DWORD PTR _FileObjectModels
	mov	DWORD PTR _model$[ebp], edx
$L81500:

; 671  : 
; 672  : 		DrawModel(model, &obj->Mat, &obj->Pos, MODEL_PLAIN);

	push	0
	mov	eax, DWORD PTR _obj$[ebp]
	add	eax, 20					; 00000014H
	push	eax
	mov	ecx, DWORD PTR _obj$[ebp]
	add	ecx, 32					; 00000020H
	push	ecx
	mov	edx, DWORD PTR _model$[ebp]
	push	edx
	call	?DrawModel@@YAXPAUMODEL@@PATMatrixUnion@@PAUVectorStruct@@F@Z ; DrawModel
	add	esp, 16					; 00000010H

; 673  : 
; 674  : 		if (obj->ID == OBJECT_TYPE_COPTER) {

	mov	eax, DWORD PTR _obj$[ebp]
	cmp	DWORD PTR [eax], 4
	jne	$L81503

; 675  : 			DrawBoundingBox(
; 676  : 				obj->Pos.v[X] - ((float)obj->Flag[0] * 10), 
; 677  : 				obj->Pos.v[X] + ((float)obj->Flag[0] * 10), 
; 678  : 				obj->Pos.v[Y] - ((float)obj->Flag[1] * 10) - ((float)obj->Flag[3] * 50), 
; 679  : 				obj->Pos.v[Y] + ((float)obj->Flag[1] * 10) - ((float)obj->Flag[3] * 50),
; 680  : 				obj->Pos.v[Z] - ((float)obj->Flag[2] * 10), 
; 681  : 				obj->Pos.v[Z] + ((float)obj->Flag[2] * 10),
; 682  : 				0xff0000, 0x00ff00, 0x0000ff, 0x00ffff, 0xff00ff, 0xffff00);

	push	16776960				; 00ffff00H
	push	16711935				; 00ff00ffH
	push	65535					; 0000ffffH
	push	255					; 000000ffH
	push	65280					; 0000ff00H
	push	16711680				; 00ff0000H
	mov	eax, DWORD PTR _obj$[ebp]
	fild	DWORD PTR [eax+12]
	fmul	DWORD PTR __real@41200000
	mov	ecx, DWORD PTR _obj$[ebp]
	fadd	DWORD PTR [ecx+28]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	edx, DWORD PTR _obj$[ebp]
	fild	DWORD PTR [edx+12]
	fmul	DWORD PTR __real@41200000
	mov	eax, DWORD PTR _obj$[ebp]
	fsubr	DWORD PTR [eax+28]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _obj$[ebp]
	fild	DWORD PTR [ecx+8]
	fmul	DWORD PTR __real@41200000
	mov	edx, DWORD PTR _obj$[ebp]
	fadd	DWORD PTR [edx+24]
	mov	eax, DWORD PTR _obj$[ebp]
	fild	DWORD PTR [eax+16]
	fmul	DWORD PTR __real@42480000
	fsubp	ST(1), ST(0)
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _obj$[ebp]
	fild	DWORD PTR [ecx+8]
	fmul	DWORD PTR __real@41200000
	mov	edx, DWORD PTR _obj$[ebp]
	fsubr	DWORD PTR [edx+24]
	mov	eax, DWORD PTR _obj$[ebp]
	fild	DWORD PTR [eax+16]
	fmul	DWORD PTR __real@42480000
	fsubp	ST(1), ST(0)
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _obj$[ebp]
	fild	DWORD PTR [ecx+4]
	fmul	DWORD PTR __real@41200000
	mov	edx, DWORD PTR _obj$[ebp]
	fadd	DWORD PTR [edx+20]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	eax, DWORD PTR _obj$[ebp]
	fild	DWORD PTR [eax+4]
	fmul	DWORD PTR __real@41200000
	mov	ecx, DWORD PTR _obj$[ebp]
	fsubr	DWORD PTR [ecx+20]
	push	ecx
	fstp	DWORD PTR [esp]
	call	?DrawBoundingBox@@YAXMMMMMMJJJJJJ@Z	; DrawBoundingBox
	add	esp, 48					; 00000030H
$L81503:

; 683  : 		}
; 684  : 
; 685  : 
; 686  : // draw axis?
; 687  : 
; 688  : 		if (obj == CurrentFileObject)

	mov	eax, DWORD PTR _obj$[ebp]
	cmp	eax, DWORD PTR ?CurrentFileObject@@3PAU_EDIT_OBJECT@@A ; CurrentFileObject
	jne	SHORT $L81512

; 689  : 		{
; 690  : 			if (FileObjectAxisType)

	movsx	eax, BYTE PTR _FileObjectAxisType
	test	eax, eax
	je	SHORT $L81513

; 691  : 				DrawAxis(&IdentityMatrix, &obj->Pos);

	mov	eax, DWORD PTR _obj$[ebp]
	add	eax, 20					; 00000014H
	push	eax
	push	OFFSET FLAT:?IdentityMatrix@@3TMatrixUnion@@A ; IdentityMatrix
	call	?DrawAxis@@YAXPATMatrixUnion@@PAUVectorStruct@@@Z ; DrawAxis
	add	esp, 8

; 692  : 			else

	jmp	SHORT $L81512
$L81513:

; 693  : 				DrawAxis(&CAM_MainCamera->WMatrix, &obj->Pos);

	mov	eax, DWORD PTR _obj$[ebp]
	add	eax, 20					; 00000014H
	push	eax
	mov	ecx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	add	ecx, 16					; 00000010H
	push	ecx
	call	?DrawAxis@@YAXPATMatrixUnion@@PAUVectorStruct@@@Z ; DrawAxis
	add	esp, 8
$L81512:

; 694  : 		}
; 695  : 	}

	jmp	$L81497
$L81493:

; 696  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?DrawFileObjects@@YAXXZ ENDP				; DrawFileObjects
_TEXT	ENDS
PUBLIC	?DisplayFileObjectInfo@@YAXPAU_EDIT_OBJECT@@@Z	; DisplayFileObjectInfo
PUBLIC	??_C@_06GBEGMGE@?$CFs?3?5?$CFd?$AA@		; `string'
PUBLIC	??_C@_06DJHOIPC@?$CFs?3?5?$CFs?$AA@		; `string'
PUBLIC	??_C@_0N@MOINFLNL@Axis?5?$CFs?5?9?5?$CFs?$AA@	; `string'
PUBLIC	??_C@_02HBOOOICD@?9?$DO?$AA@			; `string'
EXTRN	?DumpText@@YAXFFFFJPAD@Z:NEAR			; DumpText
;	COMDAT ??_C@_06GBEGMGE@?$CFs?3?5?$CFd?$AA@
CONST	SEGMENT
??_C@_06GBEGMGE@?$CFs?3?5?$CFd?$AA@ DB '%s: %d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06DJHOIPC@?$CFs?3?5?$CFs?$AA@
CONST	SEGMENT
??_C@_06DJHOIPC@?$CFs?3?5?$CFs?$AA@ DB '%s: %s', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@MOINFLNL@Axis?5?$CFs?5?9?5?$CFs?$AA@
CONST	SEGMENT
??_C@_0N@MOINFLNL@Axis?5?$CFs?5?9?5?$CFs?$AA@ DB 'Axis %s - %s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02HBOOOICD@?9?$DO?$AA@
CONST	SEGMENT
??_C@_02HBOOOICD@?9?$DO?$AA@ DB '->', 00H		; `string'
; Function compile flags: /Odt /ZI
CONST	ENDS
;	COMDAT ?DisplayFileObjectInfo@@YAXPAU_EDIT_OBJECT@@@Z
_TEXT	SEGMENT
_info$ = -140						; size = 4
_buf$ = -136						; size = 128
_i$ = -8						; size = 4
_y$ = -4						; size = 2
_obj$ = 8						; size = 4
?DisplayFileObjectInfo@@YAXPAU_EDIT_OBJECT@@@Z PROC NEAR ; DisplayFileObjectInfo, COMDAT

; 703  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi

; 704  : 	short y;
; 705  : 	long i;
; 706  : 	char buf[128];
; 707  : 	FILE_OBJECT_INFO *info = &FileObjectInfo[obj->ID];

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax]
	imul	ecx, 72					; 00000048H
	add	ecx, OFFSET FLAT:?FileObjectInfo@@3PAUFILE_OBJECT_INFO@@A ; FileObjectInfo
	mov	DWORD PTR _info$[ebp], ecx

; 708  : 
; 709  : // name
; 710  : 
; 711  : 	DumpText(400, 0, 8, 16, 0xffff00, info->ObjName);

	mov	eax, DWORD PTR _info$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	push	16776960				; 00ffff00H
	push	16					; 00000010H
	push	8
	push	0
	push	400					; 00000190H
	call	?DumpText@@YAXFFFFJPAD@Z		; DumpText
	add	esp, 24					; 00000018H

; 712  : 
; 713  : // flags
; 714  : 
; 715  : 	y = 24;

	mov	WORD PTR _y$[ebp], 24			; 00000018H

; 716  : 	for (i = 0 ; i < FILE_OBJECT_FLAG_NUM ; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $L81522
$L81523:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$L81522:
	cmp	DWORD PTR _i$[ebp], 4
	jge	$L81524

; 717  : 	{
; 718  : 
; 719  : // used?
; 720  : 
; 721  : 		if (!info->FlagInfo[i].Name)

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _info$[ebp]
	cmp	DWORD PTR [ecx+eax+8], 0
	jne	SHORT $L81525

; 722  : 			continue;

	jmp	SHORT $L81523
$L81525:

; 723  : 
; 724  : // yep, display flag name and setting
; 725  : 
; 726  : 		if (!info->FlagInfo[i].Type)

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _info$[ebp]
	cmp	DWORD PTR [ecx+eax+12], 0
	jne	SHORT $L81526

; 727  : 			wsprintf(buf, "%s: %d", info->FlagInfo[i].Name, obj->Flag[i]);

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _obj$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+4]
	push	edx
	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _info$[ebp]
	mov	edx, DWORD PTR [ecx+eax+8]
	push	edx
	push	OFFSET FLAT:??_C@_06GBEGMGE@?$CFs?3?5?$CFd?$AA@
	lea	eax, DWORD PTR _buf$[ebp]
	push	eax
	call	DWORD PTR __imp__wsprintfA
	add	esp, 16					; 00000010H

; 728  : 		else

	jmp	SHORT $L81528
$L81526:

; 729  : 			wsprintf(buf, "%s: %s", info->FlagInfo[i].Name, info->FlagInfo[i].Type[obj->Flag[i]]);

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [edx+ecx*4+4]
	mov	edx, DWORD PTR _info$[ebp]
	mov	eax, DWORD PTR [edx+eax+12]
	mov	ecx, DWORD PTR [eax+ecx*4]
	push	ecx
	mov	edx, DWORD PTR _i$[ebp]
	shl	edx, 4
	mov	eax, DWORD PTR _info$[ebp]
	mov	ecx, DWORD PTR [eax+edx+8]
	push	ecx
	push	OFFSET FLAT:??_C@_06DJHOIPC@?$CFs?3?5?$CFs?$AA@
	lea	edx, DWORD PTR _buf$[ebp]
	push	edx
	call	DWORD PTR __imp__wsprintfA
	add	esp, 16					; 00000010H
$L81528:

; 730  : 
; 731  : 		DumpText(400, y, 8, 16, 0x0000ff, buf);

	lea	eax, DWORD PTR _buf$[ebp]
	push	eax
	push	255					; 000000ffH
	push	16					; 00000010H
	push	8
	mov	cx, WORD PTR _y$[ebp]
	push	ecx
	push	400					; 00000190H
	call	?DumpText@@YAXFFFFJPAD@Z		; DumpText
	add	esp, 24					; 00000018H

; 732  : 
; 733  : // inc y pos
; 734  : 
; 735  : 		y += 24;

	movsx	eax, WORD PTR _y$[ebp]
	add	eax, 24					; 00000018H
	mov	WORD PTR _y$[ebp], ax

; 736  : 	}

	jmp	$L81523
$L81524:

; 737  : 
; 738  : // axis
; 739  : 
; 740  : 	wsprintf(buf, "Axis %s - %s", FileObjectAxisNames[FileObjectAxis], FileObjectAxisTypeNames[FileObjectAxisType]);

	movsx	eax, BYTE PTR _FileObjectAxisType
	mov	ecx, DWORD PTR _FileObjectAxisTypeNames[eax*4]
	push	ecx
	movsx	edx, BYTE PTR _FileObjectAxis
	mov	eax, DWORD PTR _FileObjectAxisNames[edx*4]
	push	eax
	push	OFFSET FLAT:??_C@_0N@MOINFLNL@Axis?5?$CFs?5?9?5?$CFs?$AA@
	lea	ecx, DWORD PTR _buf$[ebp]
	push	ecx
	call	DWORD PTR __imp__wsprintfA
	add	esp, 16					; 00000010H

; 741  : 	DumpText(400, y, 8, 16, 0xff00ff, buf);

	lea	eax, DWORD PTR _buf$[ebp]
	push	eax
	push	16711935				; 00ff00ffH
	push	16					; 00000010H
	push	8
	mov	cx, WORD PTR _y$[ebp]
	push	ecx
	push	400					; 00000190H
	call	?DumpText@@YAXFFFFJPAD@Z		; DumpText
	add	esp, 24					; 00000018H

; 742  : 
; 743  : // selection
; 744  : 
; 745  : 	DumpText(376, CurrentFileObjectFlag * 24 + 24, 8, 16, 0xff0000, "->");

	push	OFFSET FLAT:??_C@_02HBOOOICD@?9?$DO?$AA@
	push	16711680				; 00ff0000H
	push	16					; 00000010H
	push	8
	mov	eax, DWORD PTR _CurrentFileObjectFlag
	imul	eax, 24					; 00000018H
	add	eax, 24					; 00000018H
	push	eax
	push	376					; 00000178H
	call	?DumpText@@YAXFFFFJPAD@Z		; DumpText
	add	esp, 24					; 00000018H

; 746  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?DisplayFileObjectInfo@@YAXPAU_EDIT_OBJECT@@@Z ENDP	; DisplayFileObjectInfo
_TEXT	ENDS
PUBLIC	?LoadFileObjectModels@@YAXXZ			; LoadFileObjectModels
PUBLIC	?__LINE__Var@?1??LoadFileObjectModels@@YAXXZ@4JA ; `LoadFileObjectModels'::`2'::__LINE__Var
EXTRN	?FileObjectModelList@@3PAPADA:BYTE		; FileObjectModelList
EXTRN	?LoadModel@@YAJPADPAUMODEL@@DDDJ@Z:NEAR		; LoadModel
_BSS	SEGMENT
_FileObjectModelNum DD 01H DUP (?)
_BSS	ENDS
;	COMDAT ?__LINE__Var@?1??LoadFileObjectModels@@YAXXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?1??LoadFileObjectModels@@YAXXZ@4JA DD 02f1H ; `LoadFileObjectModels'::`2'::__LINE__Var
; Function compile flags: /Odt /ZI
_DATA	ENDS
;	COMDAT ?LoadFileObjectModels@@YAXXZ
_TEXT	SEGMENT
_i$ = -4						; size = 4
?LoadFileObjectModels@@YAXXZ PROC NEAR			; LoadFileObjectModels, COMDAT

; 753  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 754  : 	long i;
; 755  : 
; 756  : // count models
; 757  : 
; 758  : 	FileObjectModelNum = 0;

	mov	DWORD PTR _FileObjectModelNum, 0
$L81537:

; 759  : 	while (FileObjectModelList[FileObjectModelNum])

	mov	eax, DWORD PTR _FileObjectModelNum
	cmp	DWORD PTR ?FileObjectModelList@@3PAPADA[eax*4], 0
	je	SHORT $L81538

; 760  : 		FileObjectModelNum++;

	mov	eax, DWORD PTR _FileObjectModelNum
	add	eax, 1
	mov	DWORD PTR _FileObjectModelNum, eax
	jmp	SHORT $L81537
$L81538:

; 761  : 
; 762  : // alloc ram for models
; 763  : 
; 764  : 	FileObjectModels = (MODEL*)malloc(sizeof(MODEL) * FileObjectModelNum);

	push	OFFSET FLAT:??_C@_0IM@KGGBCACH@c?3?2documents?5and?5settings?2jarhea@
	mov	eax, DWORD PTR ?__LINE__Var@?1??LoadFileObjectModels@@YAXXZ@4JA
	add	eax, 11					; 0000000bH
	push	eax
	mov	ecx, DWORD PTR _FileObjectModelNum
	imul	ecx, 60					; 0000003cH
	push	ecx
	call	?DebugMalloc@@YAPAXIHPAD@Z		; DebugMalloc
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _FileObjectModels, eax

; 765  : 	
; 766  : // load models
; 767  : 
; 768  : 	for (i = 0 ; i < FileObjectModelNum ; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $L81542
$L81543:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$L81542:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _FileObjectModelNum
	jge	SHORT $L81534

; 769  : 	{
; 770  : 		LoadModel(FileObjectModelList[i], &FileObjectModels[i], 0, 1, LOADMODEL_OFFSET_TPAGE, 100);

	push	100					; 00000064H
	push	2
	push	1
	push	0
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 60					; 0000003cH
	add	eax, DWORD PTR _FileObjectModels
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR ?FileObjectModelList@@3PAPADA[ecx*4]
	push	edx
	call	?LoadModel@@YAJPADPAUMODEL@@DDDJ@Z	; LoadModel
	add	esp, 24					; 00000018H

; 771  : 	}

	jmp	SHORT $L81543
$L81534:

; 772  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?LoadFileObjectModels@@YAXXZ ENDP			; LoadFileObjectModels
_TEXT	ENDS
PUBLIC	?FreeFileObjectModels@@YAXXZ			; FreeFileObjectModels
PUBLIC	?__LINE__Var@?1??FreeFileObjectModels@@YAXXZ@4JA ; `FreeFileObjectModels'::`2'::__LINE__Var
EXTRN	?FreeModel@@YAXPAUMODEL@@J@Z:NEAR		; FreeModel
;	COMDAT ?__LINE__Var@?1??FreeFileObjectModels@@YAXXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?1??FreeFileObjectModels@@YAXXZ@4JA DD 030bH ; `FreeFileObjectModels'::`2'::__LINE__Var
; Function compile flags: /Odt /ZI
_DATA	ENDS
;	COMDAT ?FreeFileObjectModels@@YAXXZ
_TEXT	SEGMENT
_i$ = -4						; size = 4
?FreeFileObjectModels@@YAXXZ PROC NEAR			; FreeFileObjectModels, COMDAT

; 779  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 780  : 	long i;
; 781  : 
; 782  : // free models
; 783  : 
; 784  : 	for (i = 0 ; i < FileObjectModelNum ; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $L81549
$L81550:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$L81549:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _FileObjectModelNum
	jge	SHORT $L81551

; 785  : 	{
; 786  : 		FreeModel(&FileObjectModels[i], 1);

	push	1
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 60					; 0000003cH
	add	eax, DWORD PTR _FileObjectModels
	push	eax
	call	?FreeModel@@YAXPAUMODEL@@J@Z		; FreeModel
	add	esp, 8

; 787  : 	}

	jmp	SHORT $L81550
$L81551:

; 788  : 
; 789  : // free ram
; 790  : 
; 791  : 	free(FileObjectModels);

	push	OFFSET FLAT:??_C@_0IM@KGGBCACH@c?3?2documents?5and?5settings?2jarhea@
	mov	eax, DWORD PTR ?__LINE__Var@?1??FreeFileObjectModels@@YAXXZ@4JA
	add	eax, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _FileObjectModels
	push	ecx
	call	?DebugFree@@YAXPAXHPAD@Z		; DebugFree
	add	esp, 12					; 0000000cH

; 792  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?FreeFileObjectModels@@YAXXZ ENDP			; FreeFileObjectModels
_TEXT	ENDS
END
