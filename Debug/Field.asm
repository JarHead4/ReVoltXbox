; Listing generated by Microsoft (R) Optimizing Compiler Version 13.10.3077 

	TITLE	.\source\Field.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT PARA USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_0IK@LONOMOLI@c?3?2documents?5and?5settings?2jarhea@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _IsEqualGUID
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _==
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _acosl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _asinl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _atanl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _atan2l
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _ceill
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _cosl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _coshl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _expl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _fabsl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _floorl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _fmodl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _frexpl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _ldexpl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _logl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _log10l
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _modfl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _powl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _sinl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _sinhl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _sqrtl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _tanl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _tanhl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _frexpf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _ldexpf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _acosf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _asinf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _atanf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _atan2f
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _ceilf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _cosf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _coshf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _expf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _fabsf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _floorf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _fmodf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _logf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _log10f
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _modff
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _powf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _sinf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _sinhf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _sqrtf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _tanf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _tanhf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?sqrt@@YAMM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?InitFields@@YAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddField@@YAPAUForceFieldStruct@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RemoveField@@YAXPAUForceFieldStruct@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?FirstField@@YAPAUForceFieldStruct@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?NextField@@YAPAUForceFieldStruct@@PAU1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddLinearField@@YAPAUForceFieldStruct@@JJPAUVectorStruct@@PATMatrixUnion@@PAUBBOX@@00MM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?LinearFieldCollTest@@YA_NPAUForceFieldStruct@@PAUVectorStruct@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?LinearFieldImpulse@@YAXPAUForceFieldStruct@@PAUFieldDataStruct@@PAUVectorStruct@@2@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddLinearTwistField@@YAPAUForceFieldStruct@@JJPAUVectorStruct@@PATMatrixUnion@@PAUBBOX@@00M0M@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?LinearTwistFieldCollTest@@YA_NPAUForceFieldStruct@@PAUVectorStruct@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?LinearTwistFieldImpulse@@YAXPAUForceFieldStruct@@PAUFieldDataStruct@@PAUVectorStruct@@2@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddVelocityField@@YAPAUForceFieldStruct@@JJPAUVectorStruct@@PATMatrixUnion@@PAUBBOX@@00M@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?VelocityFieldCollTest@@YA_NPAUForceFieldStruct@@PAUVectorStruct@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?VelocityFieldImpulse@@YAXPAUForceFieldStruct@@PAUFieldDataStruct@@PAUVectorStruct@@2@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddSphericalField@@YAPAUForceFieldStruct@@JJPAUVectorStruct@@MMMM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SphericalFieldCollTest@@YA_NPAUForceFieldStruct@@PAUVectorStruct@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SphericalFieldImpulse@@YAXPAUForceFieldStruct@@PAUFieldDataStruct@@PAUVectorStruct@@2@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddCylindricalField@@YAPAUForceFieldStruct@@JJPAUVectorStruct@@0MMMM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CylindricalFieldCollTest@@YA_NPAUForceFieldStruct@@PAUVectorStruct@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CylindricalFieldImpulse@@YAXPAUForceFieldStruct@@PAUFieldDataStruct@@PAUVectorStruct@@2@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddOrientationField@@YAPAUForceFieldStruct@@JJPAUVectorStruct@@PATMatrixUnion@@PAUBBOX@@00MM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?OrientationFieldCollTest@@YA_NPAUForceFieldStruct@@PAUVectorStruct@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?OrientationFieldImpulse@@YAXPAUForceFieldStruct@@PAUFieldDataStruct@@PAUVectorStruct@@2@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddVortexField@@YAPAUForceFieldStruct@@JJPAUVectorStruct@@PATMatrixUnion@@PAUBBOX@@00MMM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?VortexFieldCollTest@@YA_NPAUForceFieldStruct@@PAUVectorStruct@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?VortexFieldImpulse@@YAXPAUForceFieldStruct@@PAUFieldDataStruct@@PAUVectorStruct@@2@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AllFieldImpulses@@YAXPAUFieldDataStruct@@PAUVectorStruct@@1@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddLocalField@@YAPAUForceFieldStruct@@JJPAUVectorStruct@@PATMatrixUnion@@PAUBBOX@@00MM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?LocalFieldCollTest@@YA_NPAUForceFieldStruct@@PAUVectorStruct@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?LocalFieldImpulse@@YAXPAUForceFieldStruct@@PAUFieldDataStruct@@PAUVectorStruct@@2@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?FreeForceFields@@YAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Pow_int@N@@YANNH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Pow_int@H@@YAHHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Pow_int@M@@YAMMH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Pow_int@O@@YAOOH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?__LINE__Var@?1??FreeForceFields@@YAXXZ@4JA
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??NextField@@YAPAUForceFieldStruct@@PAU2@@Z@4JA
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
sxdata	SEGMENT DWORD USE32 'SXDATA'
sxdata	ENDS
FLAT	GROUP _DATA, CONST, _BSS
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBCD
INCLUDELIB OLDNAMES

PUBLIC	?FLD_NForceFields@@3HA				; FLD_NForceFields
PUBLIC	?FLD_Gravity@@3MA				; FLD_Gravity
PUBLIC	?FLD_GlobalBBox@@3UBBOX@@A			; FLD_GlobalBBox
PUBLIC	?FLD_GlobalSize@@3UVectorStruct@@A		; FLD_GlobalSize
PUBLIC	?FLD_GravityField@@3PAUForceFieldStruct@@A	; FLD_GravityField
PUBLIC	?FLD_ForceField@@3PAUForceFieldStruct@@A	; FLD_ForceField
PUBLIC	?FLD_FieldHead@@3PAUForceFieldStruct@@A		; FLD_FieldHead
PUBLIC	?FLD_EmptyFieldHead@@3PAUForceFieldStruct@@A	; FLD_EmptyFieldHead
_BSS	SEGMENT
?FLD_NForceFields@@3HA DD 01H DUP (?)			; FLD_NForceFields
?FLD_GravityField@@3PAUForceFieldStruct@@A DD 01H DUP (?) ; FLD_GravityField
?FLD_ForceField@@3PAUForceFieldStruct@@A DB 03600H DUP (?) ; FLD_ForceField
?FLD_FieldHead@@3PAUForceFieldStruct@@A DD 01H DUP (?)	; FLD_FieldHead
?FLD_EmptyFieldHead@@3PAUForceFieldStruct@@A DD 01H DUP (?) ; FLD_EmptyFieldHead
_BSS	ENDS
_DATA	SEGMENT
?FLD_Gravity@@3MA DD 045098000r			; 2200	; FLD_Gravity
?FLD_GlobalBBox@@3UBBOX@@A DD 0c9742400r	; -1e+006 ; FLD_GlobalBBox
	DD	049742400r			; 1e+006
	DD	0c9742400r			; -1e+006
	DD	049742400r			; 1e+006
	DD	0c9742400r			; -1e+006
	DD	049742400r			; 1e+006
?FLD_GlobalSize@@3UVectorStruct@@A DD 049742400r ; 1e+006 ; FLD_GlobalSize
	DD	049742400r			; 1e+006
	DD	049742400r			; 1e+006
_DATA	ENDS
PUBLIC	?InitFields@@YAXXZ				; InitFields
; Function compile flags: /Odt /ZI
; File c:\documents and settings\jarhead\desktop\shit to display my love for xbox revolt and fuck you borman-ness\revolt source\source\field.cpp
;	COMDAT ?InitFields@@YAXXZ
_TEXT	SEGMENT
_iField$ = -4						; size = 4
?InitFields@@YAXXZ PROC NEAR				; InitFields, COMDAT

; 92   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 93   : 	int iField;
; 94   : 
; 95   : 
; 96   : 	FLD_NForceFields = 0;

	mov	DWORD PTR ?FLD_NForceFields@@3HA, 0	; FLD_NForceFields

; 97   : 
; 98   : 	FLD_ForceField[0].Prev = NULL;

	mov	DWORD PTR ?FLD_ForceField@@3PAUForceFieldStruct@@A+100, 0

; 99   : 
; 100  : 	for (iField = 1; iField < MAX_FIELDS - 1; iField++) {

	mov	DWORD PTR _iField$[ebp], 1
	jmp	SHORT $L80790
$L80791:
	mov	eax, DWORD PTR _iField$[ebp]
	add	eax, 1
	mov	DWORD PTR _iField$[ebp], eax
$L80790:
	cmp	DWORD PTR _iField$[ebp], 127		; 0000007fH
	jge	SHORT $L80792

; 101  : 
; 102  : 		FLD_ForceField[iField - 1].Next = &FLD_ForceField[iField];

	mov	eax, DWORD PTR _iField$[ebp]
	imul	eax, 108				; 0000006cH
	add	eax, OFFSET FLAT:?FLD_ForceField@@3PAUForceFieldStruct@@A ; FLD_ForceField
	mov	ecx, DWORD PTR _iField$[ebp]
	sub	ecx, 1
	imul	ecx, 108				; 0000006cH
	mov	DWORD PTR ?FLD_ForceField@@3PAUForceFieldStruct@@A[ecx+104], eax

; 103  : 		FLD_ForceField[iField].Prev = &FLD_ForceField[iField - 1];

	mov	eax, DWORD PTR _iField$[ebp]
	sub	eax, 1
	imul	eax, 108				; 0000006cH
	add	eax, OFFSET FLAT:?FLD_ForceField@@3PAUForceFieldStruct@@A ; FLD_ForceField
	mov	ecx, DWORD PTR _iField$[ebp]
	imul	ecx, 108				; 0000006cH
	mov	DWORD PTR ?FLD_ForceField@@3PAUForceFieldStruct@@A[ecx+100], eax

; 104  : 		FLD_ForceField[iField].Next = &FLD_ForceField[iField + 1];

	mov	eax, DWORD PTR _iField$[ebp]
	add	eax, 1
	imul	eax, 108				; 0000006cH
	add	eax, OFFSET FLAT:?FLD_ForceField@@3PAUForceFieldStruct@@A ; FLD_ForceField
	mov	ecx, DWORD PTR _iField$[ebp]
	imul	ecx, 108				; 0000006cH
	mov	DWORD PTR ?FLD_ForceField@@3PAUForceFieldStruct@@A[ecx+104], eax

; 105  : 
; 106  : 	}

	jmp	SHORT $L80791
$L80792:

; 107  : 
; 108  : 	FLD_ForceField[MAX_FIELDS - 1].Prev = &FLD_ForceField[MAX_FIELDS - 2];

	mov	DWORD PTR ?FLD_ForceField@@3PAUForceFieldStruct@@A+13816, OFFSET FLAT:?FLD_ForceField@@3PAUForceFieldStruct@@A+13608

; 109  : 	FLD_ForceField[MAX_FIELDS - 1].Next = NULL;

	mov	DWORD PTR ?FLD_ForceField@@3PAUForceFieldStruct@@A+13820, 0

; 110  : 
; 111  : 	FLD_FieldHead = NULL;

	mov	DWORD PTR ?FLD_FieldHead@@3PAUForceFieldStruct@@A, 0 ; FLD_FieldHead

; 112  : 	FLD_EmptyFieldHead = &FLD_ForceField[0];

	mov	DWORD PTR ?FLD_EmptyFieldHead@@3PAUForceFieldStruct@@A, OFFSET FLAT:?FLD_ForceField@@3PAUForceFieldStruct@@A ; FLD_EmptyFieldHead, FLD_ForceField

; 113  : 
; 114  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?InitFields@@YAXXZ ENDP					; InitFields
_TEXT	ENDS
PUBLIC	?RemoveField@@YAXPAUForceFieldStruct@@@Z	; RemoveField
; Function compile flags: /Odt /ZI
;	COMDAT ?RemoveField@@YAXPAUForceFieldStruct@@@Z
_TEXT	SEGMENT
_field$ = 8						; size = 4
?RemoveField@@YAXPAUForceFieldStruct@@@Z PROC NEAR	; RemoveField, COMDAT

; 161  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 162  : 	// Delete from active field list
; 163  : 	if (field->Prev != NULL) {

	mov	eax, DWORD PTR _field$[ebp]
	cmp	DWORD PTR [eax+100], 0
	je	SHORT $L80803

; 164  : 		(field->Prev)->Next = field->Next;

	mov	eax, DWORD PTR _field$[ebp]
	mov	ecx, DWORD PTR [eax+100]
	mov	edx, DWORD PTR _field$[ebp]
	mov	eax, DWORD PTR [edx+104]
	mov	DWORD PTR [ecx+104], eax

; 165  : 	} else {

	jmp	SHORT $L80804
$L80803:

; 166  : 		FLD_FieldHead = field->Next;

	mov	eax, DWORD PTR _field$[ebp]
	mov	ecx, DWORD PTR [eax+104]
	mov	DWORD PTR ?FLD_FieldHead@@3PAUForceFieldStruct@@A, ecx ; FLD_FieldHead
$L80804:

; 167  : 	}
; 168  : 	if (field->Next != NULL) {

	mov	eax, DWORD PTR _field$[ebp]
	cmp	DWORD PTR [eax+104], 0
	je	SHORT $L80805

; 169  : 		(field->Next)->Prev = field->Prev;

	mov	eax, DWORD PTR _field$[ebp]
	mov	ecx, DWORD PTR [eax+104]
	mov	edx, DWORD PTR _field$[ebp]
	mov	eax, DWORD PTR [edx+100]
	mov	DWORD PTR [ecx+100], eax
$L80805:

; 170  : 	}
; 171  : 
; 172  : 	// Add to inactive field list
; 173  : 	field->Next = FLD_EmptyFieldHead;

	mov	eax, DWORD PTR _field$[ebp]
	mov	ecx, DWORD PTR ?FLD_EmptyFieldHead@@3PAUForceFieldStruct@@A ; FLD_EmptyFieldHead
	mov	DWORD PTR [eax+104], ecx

; 174  : 	FLD_EmptyFieldHead = field;

	mov	eax, DWORD PTR _field$[ebp]
	mov	DWORD PTR ?FLD_EmptyFieldHead@@3PAUForceFieldStruct@@A, eax ; FLD_EmptyFieldHead

; 175  : 
; 176  : 	// Keep track of number of fields
; 177  : 	FLD_NForceFields--;

	mov	eax, DWORD PTR ?FLD_NForceFields@@3HA	; FLD_NForceFields
	sub	eax, 1
	mov	DWORD PTR ?FLD_NForceFields@@3HA, eax	; FLD_NForceFields

; 178  : 
; 179  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?RemoveField@@YAXPAUForceFieldStruct@@@Z ENDP		; RemoveField
_TEXT	ENDS
PUBLIC	?FirstField@@YAPAUForceFieldStruct@@XZ		; FirstField
; Function compile flags: /Odt /ZI
;	COMDAT ?FirstField@@YAPAUForceFieldStruct@@XZ
_TEXT	SEGMENT
?FirstField@@YAPAUForceFieldStruct@@XZ PROC NEAR	; FirstField, COMDAT

; 189  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 190  : 	return FLD_FieldHead;

	mov	eax, DWORD PTR ?FLD_FieldHead@@3PAUForceFieldStruct@@A ; FLD_FieldHead

; 191  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?FirstField@@YAPAUForceFieldStruct@@XZ ENDP		; FirstField
_TEXT	ENDS
PUBLIC	?NextField@@YAPAUForceFieldStruct@@PAU1@@Z	; NextField
PUBLIC	?__LINE__Var@?1??NextField@@YAPAUForceFieldStruct@@PAU2@@Z@4JA ; `NextField'::`2'::__LINE__Var
PUBLIC	??_C@_0IK@LONOMOLI@c?3?2documents?5and?5settings?2jarhea@ ; `string'
EXTRN	?DebugAssert@@YAX_NHPAD@Z:NEAR			; DebugAssert
;	COMDAT ??_C@_0IK@LONOMOLI@c?3?2documents?5and?5settings?2jarhea@
CONST	SEGMENT
??_C@_0IK@LONOMOLI@c?3?2documents?5and?5settings?2jarhea@ DB 'c:\document'
	DB	's and settings\jarhead\desktop\shit to display my love for xb'
	DB	'ox revolt and fuck you borman-ness\revolt source\source\field'
	DB	'.cpp', 00H					; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??NextField@@YAPAUForceFieldStruct@@PAU2@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??NextField@@YAPAUForceFieldStruct@@PAU2@@Z@4JA DD 0c9H ; `NextField'::`2'::__LINE__Var
; Function compile flags: /Odt /ZI
_DATA	ENDS
;	COMDAT ?NextField@@YAPAUForceFieldStruct@@PAU1@@Z
_TEXT	SEGMENT
_field$ = 8						; size = 4
?NextField@@YAPAUForceFieldStruct@@PAU1@@Z PROC NEAR	; NextField, COMDAT

; 201  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 202  : 	Assert(field != NULL);

	push	OFFSET FLAT:??_C@_0IK@LONOMOLI@c?3?2documents?5and?5settings?2jarhea@
	mov	eax, DWORD PTR ?__LINE__Var@?1??NextField@@YAPAUForceFieldStruct@@PAU2@@Z@4JA
	add	eax, 1
	push	eax
	cmp	DWORD PTR _field$[ebp], 0
	setne	cl
	push	ecx
	call	?DebugAssert@@YAX_NHPAD@Z		; DebugAssert
	add	esp, 12					; 0000000cH

; 203  : 	return field->Next;

	mov	eax, DWORD PTR _field$[ebp]
	mov	eax, DWORD PTR [eax+104]

; 204  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?NextField@@YAPAUForceFieldStruct@@PAU1@@Z ENDP		; NextField
_TEXT	ENDS
PUBLIC	?AddLinearField@@YAPAUForceFieldStruct@@JJPAUVectorStruct@@PATMatrixUnion@@PAUBBOX@@00MM@Z ; AddLinearField
PUBLIC	?LinearFieldCollTest@@YA_NPAUForceFieldStruct@@PAUVectorStruct@@@Z ; LinearFieldCollTest
PUBLIC	?LinearFieldImpulse@@YAXPAUForceFieldStruct@@PAUFieldDataStruct@@PAUVectorStruct@@2@Z ; LinearFieldImpulse
EXTRN	__fltused:NEAR
; Function compile flags: /Odt /ZI
;	COMDAT ?AddLinearField@@YAPAUForceFieldStruct@@JJPAUVectorStruct@@PATMatrixUnion@@PAUBBOX@@00MM@Z
_TEXT	SEGMENT
_params$ = -8						; size = 4
_field$ = -4						; size = 4
_parentID$ = 8						; size = 4
_priority$ = 12						; size = 4
_pos$ = 16						; size = 4
_mat$ = 20						; size = 4
_bBox$ = 24						; size = 4
_size$ = 28						; size = 4
_dir$ = 32						; size = 4
_mag$ = 36						; size = 4
_damping$ = 40						; size = 4
?AddLinearField@@YAPAUForceFieldStruct@@JJPAUVectorStruct@@PATMatrixUnion@@PAUBBOX@@00MM@Z PROC NEAR ; AddLinearField, COMDAT

; 214  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi

; 215  : 	FORCE_FIELD *field;
; 216  : 	LINEAR_FIELD_PARAMS *params;
; 217  : 	
; 218  : 	field = AddField();

	call	?AddField@@YAPAUForceFieldStruct@@XZ	; AddField
	mov	DWORD PTR _field$[ebp], eax

; 219  : 	params = &field->Params.LinearParams;

	mov	eax, DWORD PTR _field$[ebp]
	add	eax, 48					; 00000030H
	mov	DWORD PTR _params$[ebp], eax

; 220  : 
; 221  : 	field->Type = FIELD_LINEAR;

	mov	eax, DWORD PTR _field$[ebp]
	mov	DWORD PTR [eax+4], 0

; 222  : 	field->ParentID = parentID;

	mov	eax, DWORD PTR _field$[ebp]
	mov	ecx, DWORD PTR _parentID$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 223  : 	field->Priority = priority;

	mov	eax, DWORD PTR _field$[ebp]
	mov	ecx, DWORD PTR _priority$[ebp]
	mov	DWORD PTR [eax+12], ecx

; 224  : 	field->PosPtr = pos;

	mov	eax, DWORD PTR _field$[ebp]
	mov	ecx, DWORD PTR _pos$[ebp]
	mov	DWORD PTR [eax+16], ecx

; 225  : 	field->MatPtr = mat;

	mov	eax, DWORD PTR _field$[ebp]
	mov	ecx, DWORD PTR _mat$[ebp]
	mov	DWORD PTR [eax+20], ecx

; 226  : 	field->FieldCollTest = LinearFieldCollTest;

	mov	eax, DWORD PTR _field$[ebp]
	mov	DWORD PTR [eax+92], OFFSET FLAT:?LinearFieldCollTest@@YA_NPAUForceFieldStruct@@PAUVectorStruct@@@Z ; LinearFieldCollTest

; 227  : 	field->AddFieldImpulse = LinearFieldImpulse;

	mov	eax, DWORD PTR _field$[ebp]
	mov	DWORD PTR [eax+96], OFFSET FLAT:?LinearFieldImpulse@@YAXPAUForceFieldStruct@@PAUFieldDataStruct@@PAUVectorStruct@@2@Z ; LinearFieldImpulse

; 228  : 
; 229  : 	CopyBBox(bBox, &field->BBox);

	mov	eax, DWORD PTR _field$[ebp]
	mov	ecx, DWORD PTR _bBox$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+24], edx
	mov	eax, DWORD PTR _field$[ebp]
	mov	ecx, DWORD PTR _bBox$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+28], edx
	mov	eax, DWORD PTR _field$[ebp]
	mov	ecx, DWORD PTR _bBox$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+32], edx
	mov	eax, DWORD PTR _field$[ebp]
	mov	ecx, DWORD PTR _bBox$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+36], edx
	mov	eax, DWORD PTR _field$[ebp]
	mov	ecx, DWORD PTR _bBox$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+40], edx
	mov	eax, DWORD PTR _field$[ebp]
	mov	ecx, DWORD PTR _bBox$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR [eax+44], edx

; 230  : 	CopyVec(size, &params->Size);

	mov	eax, DWORD PTR _params$[ebp]
	mov	ecx, DWORD PTR _size$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	eax, DWORD PTR _params$[ebp]
	mov	ecx, DWORD PTR _size$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _params$[ebp]
	mov	ecx, DWORD PTR _size$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx

; 231  : 	CopyVec(dir, &params->Dir);

	mov	eax, DWORD PTR _params$[ebp]
	mov	ecx, DWORD PTR _dir$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _params$[ebp]
	mov	ecx, DWORD PTR _dir$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+16], edx
	mov	eax, DWORD PTR _params$[ebp]
	mov	ecx, DWORD PTR _dir$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+20], edx

; 232  : 	params->Mag = mag;

	mov	eax, DWORD PTR _params$[ebp]
	mov	ecx, DWORD PTR _mag$[ebp]
	mov	DWORD PTR [eax+24], ecx

; 233  : 	params->Damping = damping;

	mov	eax, DWORD PTR _params$[ebp]
	mov	ecx, DWORD PTR _damping$[ebp]
	mov	DWORD PTR [eax+28], ecx

; 234  : 
; 235  : 	return field;

	mov	eax, DWORD PTR _field$[ebp]

; 236  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?AddLinearField@@YAPAUForceFieldStruct@@JJPAUVectorStruct@@PATMatrixUnion@@PAUBBOX@@00MM@Z ENDP ; AddLinearField
; Function compile flags: /Odt /ZI
_TEXT	ENDS
;	COMDAT ?AddField@@YAPAUForceFieldStruct@@XZ
_TEXT	SEGMENT
_oldNextEmpty$ = -8					; size = 4
_oldFirstField$ = -4					; size = 4
?AddField@@YAPAUForceFieldStruct@@XZ PROC NEAR		; AddField, COMDAT

; 125  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi

; 126  : 	FORCE_FIELD *oldFirstField;
; 127  : 	FORCE_FIELD *oldNextEmpty;
; 128  : 
; 129  : 	// Make sure there are spare fields
; 130  : 	if (FLD_EmptyFieldHead == NULL) {

	cmp	DWORD PTR ?FLD_EmptyFieldHead@@3PAUForceFieldStruct@@A, 0 ; FLD_EmptyFieldHead
	jne	SHORT $L80798

; 131  : 		return NULL;

	xor	eax, eax
	jmp	SHORT $L80795
$L80798:

; 132  : 	}
; 133  : 
; 134  : 
; 135  : 	oldFirstField = FLD_FieldHead;

	mov	eax, DWORD PTR ?FLD_FieldHead@@3PAUForceFieldStruct@@A ; FLD_FieldHead
	mov	DWORD PTR _oldFirstField$[ebp], eax

; 136  : 	oldNextEmpty = FLD_EmptyFieldHead->Next;

	mov	eax, DWORD PTR ?FLD_EmptyFieldHead@@3PAUForceFieldStruct@@A ; FLD_EmptyFieldHead
	mov	ecx, DWORD PTR [eax+104]
	mov	DWORD PTR _oldNextEmpty$[ebp], ecx

; 137  : 	
; 138  : 	// Add head of empty list 
; 139  : 	FLD_FieldHead = FLD_EmptyFieldHead;

	mov	eax, DWORD PTR ?FLD_EmptyFieldHead@@3PAUForceFieldStruct@@A ; FLD_EmptyFieldHead
	mov	DWORD PTR ?FLD_FieldHead@@3PAUForceFieldStruct@@A, eax ; FLD_FieldHead

; 140  : 	FLD_FieldHead->Next = oldFirstField;

	mov	eax, DWORD PTR ?FLD_FieldHead@@3PAUForceFieldStruct@@A ; FLD_FieldHead
	mov	ecx, DWORD PTR _oldFirstField$[ebp]
	mov	DWORD PTR [eax+104], ecx

; 141  : 	FLD_FieldHead->Prev = NULL;

	mov	eax, DWORD PTR ?FLD_FieldHead@@3PAUForceFieldStruct@@A ; FLD_FieldHead
	mov	DWORD PTR [eax+100], 0

; 142  : 	if (oldFirstField != NULL) {

	cmp	DWORD PTR _oldFirstField$[ebp], 0
	je	SHORT $L80799

; 143  : 		oldFirstField->Prev = FLD_FieldHead;

	mov	eax, DWORD PTR _oldFirstField$[ebp]
	mov	ecx, DWORD PTR ?FLD_FieldHead@@3PAUForceFieldStruct@@A ; FLD_FieldHead
	mov	DWORD PTR [eax+100], ecx
$L80799:

; 144  : 	}
; 145  : 
; 146  : 	// Delete it from the empty list;
; 147  : 	FLD_EmptyFieldHead = oldNextEmpty;

	mov	eax, DWORD PTR _oldNextEmpty$[ebp]
	mov	DWORD PTR ?FLD_EmptyFieldHead@@3PAUForceFieldStruct@@A, eax ; FLD_EmptyFieldHead

; 148  : 
; 149  : 	// Keep a count of the number of active fields
; 150  : 	FLD_NForceFields++;

	mov	eax, DWORD PTR ?FLD_NForceFields@@3HA	; FLD_NForceFields
	add	eax, 1
	mov	DWORD PTR ?FLD_NForceFields@@3HA, eax	; FLD_NForceFields

; 151  : 
; 152  : 	// Set some defaults
; 153  : 	FLD_FieldHead->PosPtr = NULL;

	mov	eax, DWORD PTR ?FLD_FieldHead@@3PAUForceFieldStruct@@A ; FLD_FieldHead
	mov	DWORD PTR [eax+16], 0

; 154  : 	FLD_FieldHead->MatPtr = NULL;

	mov	eax, DWORD PTR ?FLD_FieldHead@@3PAUForceFieldStruct@@A ; FLD_FieldHead
	mov	DWORD PTR [eax+20], 0

; 155  : 
; 156  : 	return FLD_FieldHead;

	mov	eax, DWORD PTR ?FLD_FieldHead@@3PAUForceFieldStruct@@A ; FLD_FieldHead
$L80795:

; 157  : 
; 158  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?AddField@@YAPAUForceFieldStruct@@XZ ENDP		; AddField
_TEXT	ENDS
PUBLIC	__real@00000000
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
; Function compile flags: /Odt /ZI
CONST	ENDS
;	COMDAT ?LinearFieldCollTest@@YA_NPAUForceFieldStruct@@PAUVectorStruct@@@Z
_TEXT	SEGMENT
tv199 = -88						; size = 4
tv133 = -88						; size = 4
_params$ = -20						; size = 4
_dR$ = -16						; size = 12
_iFace$ = -4						; size = 4
_field$ = 8						; size = 4
_pos$ = 12						; size = 4
?LinearFieldCollTest@@YA_NPAUForceFieldStruct@@PAUVectorStruct@@@Z PROC NEAR ; LinearFieldCollTest, COMDAT

; 239  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	ebx
	push	esi
	push	edi

; 240  : 	int iFace;
; 241  : 	VEC dR;
; 242  : 	LINEAR_FIELD_PARAMS	*params = &field->Params.LinearParams;

	mov	eax, DWORD PTR _field$[ebp]
	add	eax, 48					; 00000030H
	mov	DWORD PTR _params$[ebp], eax

; 243  : 
; 244  : 	VecMinusVec(pos, field->PosPtr, &dR);

	mov	eax, DWORD PTR _field$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _pos$[ebp]
	fld	DWORD PTR [edx]
	fsub	DWORD PTR [ecx]
	fstp	DWORD PTR _dR$[ebp]
	mov	eax, DWORD PTR _field$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _pos$[ebp]
	fld	DWORD PTR [edx+4]
	fsub	DWORD PTR [ecx+4]
	fstp	DWORD PTR _dR$[ebp+4]
	mov	eax, DWORD PTR _field$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _pos$[ebp]
	fld	DWORD PTR [edx+8]
	fsub	DWORD PTR [ecx+8]
	fstp	DWORD PTR _dR$[ebp+8]

; 245  : 
; 246  : 	// Bounding box test
; 247  : 	if (!PointInBBox(&dR, &field->BBox)) {

	mov	eax, DWORD PTR _field$[ebp]
	fld	DWORD PTR [eax+24]
	fcomp	DWORD PTR _dR$[ebp]
	fnstsw	ax
	test	ah, 65					; 00000041H
	je	SHORT $L81245
	mov	ecx, DWORD PTR _field$[ebp]
	fld	DWORD PTR [ecx+28]
	fcomp	DWORD PTR _dR$[ebp]
	fnstsw	ax
	test	ah, 5
	jnp	SHORT $L81245
	mov	edx, DWORD PTR _field$[ebp]
	fld	DWORD PTR [edx+40]
	fcomp	DWORD PTR _dR$[ebp+8]
	fnstsw	ax
	test	ah, 65					; 00000041H
	je	SHORT $L81245
	mov	eax, DWORD PTR _field$[ebp]
	fld	DWORD PTR [eax+44]
	fcomp	DWORD PTR _dR$[ebp+8]
	fnstsw	ax
	test	ah, 5
	jnp	SHORT $L81245
	mov	ecx, DWORD PTR _field$[ebp]
	fld	DWORD PTR [ecx+32]
	fcomp	DWORD PTR _dR$[ebp+4]
	fnstsw	ax
	test	ah, 65					; 00000041H
	je	SHORT $L81245
	mov	edx, DWORD PTR _field$[ebp]
	fld	DWORD PTR [edx+36]
	fcomp	DWORD PTR _dR$[ebp+4]
	fnstsw	ax
	test	ah, 5
	jnp	SHORT $L81245
	mov	DWORD PTR tv133[ebp], 1
	jmp	SHORT $L81246
$L81245:
	mov	DWORD PTR tv133[ebp], 0
$L81246:
	cmp	DWORD PTR tv133[ebp], 0
	jne	SHORT $L80834

; 248  : 		return FALSE;

	xor	al, al
	jmp	$L80830
$L80834:

; 249  : 	}
; 250  : 
; 251  : 	// Proper test
; 252  : 	for (iFace = 0; iFace < 3; iFace++) {

	mov	DWORD PTR _iFace$[ebp], 0
	jmp	SHORT $L80835
$L80836:
	mov	eax, DWORD PTR _iFace$[ebp]
	add	eax, 1
	mov	DWORD PTR _iFace$[ebp], eax
$L80835:
	cmp	DWORD PTR _iFace$[ebp], 3
	jge	$L80837

; 253  : 		if (abs(VecDotVec(&dR, &field->MatPtr->mv[iFace])) > params->Size.v[iFace]) {

	mov	eax, DWORD PTR _iFace$[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _field$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	fld	DWORD PTR _dR$[ebp]
	fmul	DWORD PTR [edx+eax]
	mov	eax, DWORD PTR _iFace$[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _field$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	fld	DWORD PTR _dR$[ebp+4]
	fmul	DWORD PTR [edx+eax+4]
	faddp	ST(1), ST(0)
	mov	eax, DWORD PTR _iFace$[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _field$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	fld	DWORD PTR _dR$[ebp+8]
	fmul	DWORD PTR [edx+eax+8]
	faddp	ST(1), ST(0)
	fcomp	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $L81247
	mov	eax, DWORD PTR _iFace$[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _field$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	fld	DWORD PTR _dR$[ebp]
	fmul	DWORD PTR [edx+eax]
	mov	eax, DWORD PTR _iFace$[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _field$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	fld	DWORD PTR _dR$[ebp+4]
	fmul	DWORD PTR [edx+eax+4]
	faddp	ST(1), ST(0)
	mov	eax, DWORD PTR _iFace$[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _field$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	fld	DWORD PTR _dR$[ebp+8]
	fmul	DWORD PTR [edx+eax+8]
	faddp	ST(1), ST(0)
	fstp	DWORD PTR tv199[ebp]
	jmp	SHORT $L81248
$L81247:
	mov	eax, DWORD PTR _iFace$[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _field$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	fld	DWORD PTR _dR$[ebp]
	fmul	DWORD PTR [edx+eax]
	mov	eax, DWORD PTR _iFace$[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _field$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	fld	DWORD PTR _dR$[ebp+4]
	fmul	DWORD PTR [edx+eax+4]
	faddp	ST(1), ST(0)
	mov	eax, DWORD PTR _iFace$[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _field$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	fld	DWORD PTR _dR$[ebp+8]
	fmul	DWORD PTR [edx+eax+8]
	faddp	ST(1), ST(0)
	fchs
	fstp	DWORD PTR tv199[ebp]
$L81248:
	mov	eax, DWORD PTR _iFace$[ebp]
	mov	ecx, DWORD PTR _params$[ebp]
	fld	DWORD PTR tv199[ebp]
	fcomp	DWORD PTR [ecx+eax*4]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $L80838

; 254  : 			return FALSE;

	xor	al, al
	jmp	SHORT $L80830
$L80838:

; 255  : 		}
; 256  : 	}

	jmp	$L80836
$L80837:

; 257  : 
; 258  : 	return TRUE;

	mov	al, 1
$L80830:

; 259  : 
; 260  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?LinearFieldCollTest@@YA_NPAUForceFieldStruct@@PAUVectorStruct@@@Z ENDP ; LinearFieldCollTest
_TEXT	ENDS
EXTRN	?TimeStep@@3MA:DWORD				; TimeStep
; Function compile flags: /Odt /ZI
;	COMDAT ?LinearFieldImpulse@@YAXPAUForceFieldStruct@@PAUFieldDataStruct@@PAUVectorStruct@@2@Z
_TEXT	SEGMENT
_params$ = -8						; size = 4
_scale$ = -4						; size = 4
_field$ = 8						; size = 4
_data$ = 12						; size = 4
_imp$ = 16						; size = 4
_angImp$ = 20						; size = 4
?LinearFieldImpulse@@YAXPAUForceFieldStruct@@PAUFieldDataStruct@@PAUVectorStruct@@2@Z PROC NEAR ; LinearFieldImpulse, COMDAT

; 263  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi

; 264  : 	REAL	scale;
; 265  : 	LINEAR_FIELD_PARAMS *params = &field->Params.LinearParams;

	mov	eax, DWORD PTR _field$[ebp]
	add	eax, 48					; 00000030H
	mov	DWORD PTR _params$[ebp], eax

; 266  : 
; 267  : 	scale = params->Mag - MulScalar(params->Damping, VecDotVec(&params->Dir, data->Vel));

	mov	eax, DWORD PTR _params$[ebp]
	fld	DWORD PTR [eax+28]
	mov	ecx, DWORD PTR _data$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR _params$[ebp]
	fld	DWORD PTR [eax+12]
	fmul	DWORD PTR [edx]
	mov	ecx, DWORD PTR _data$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR _params$[ebp]
	fld	DWORD PTR [eax+16]
	fmul	DWORD PTR [edx+4]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR _data$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR _params$[ebp]
	fld	DWORD PTR [eax+20]
	fmul	DWORD PTR [edx+8]
	faddp	ST(1), ST(0)
	fmulp	ST(1), ST(0)
	mov	ecx, DWORD PTR _params$[ebp]
	fsubr	DWORD PTR [ecx+24]
	fstp	DWORD PTR _scale$[ebp]

; 268  : 	scale = MulScalar(scale, MulScalar(TimeStep, data->Mass));

	mov	eax, DWORD PTR _data$[ebp]
	fld	DWORD PTR [eax+28]
	fmul	DWORD PTR ?TimeStep@@3MA		; TimeStep
	fmul	DWORD PTR _scale$[ebp]
	fstp	DWORD PTR _scale$[ebp]

; 269  : 	//scale = particle->Mass * TimeStep * (params->Mag - params->Damping * VecDotVec(&params->Dir, &particle->Vel));
; 270  : 
; 271  : 	VecPlusEqScalarVec(imp, scale, &params->Dir);

	mov	eax, DWORD PTR _params$[ebp]
	fld	DWORD PTR _scale$[ebp]
	fmul	DWORD PTR [eax+12]
	mov	ecx, DWORD PTR _imp$[ebp]
	fadd	DWORD PTR [ecx]
	mov	edx, DWORD PTR _imp$[ebp]
	fstp	DWORD PTR [edx]
	mov	eax, DWORD PTR _params$[ebp]
	fld	DWORD PTR _scale$[ebp]
	fmul	DWORD PTR [eax+16]
	mov	ecx, DWORD PTR _imp$[ebp]
	fadd	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _imp$[ebp]
	fstp	DWORD PTR [edx+4]
	mov	eax, DWORD PTR _params$[ebp]
	fld	DWORD PTR _scale$[ebp]
	fmul	DWORD PTR [eax+20]
	mov	ecx, DWORD PTR _imp$[ebp]
	fadd	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _imp$[ebp]
	fstp	DWORD PTR [edx+8]

; 272  : 
; 273  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?LinearFieldImpulse@@YAXPAUForceFieldStruct@@PAUFieldDataStruct@@PAUVectorStruct@@2@Z ENDP ; LinearFieldImpulse
_TEXT	ENDS
PUBLIC	?AddLinearTwistField@@YAPAUForceFieldStruct@@JJPAUVectorStruct@@PATMatrixUnion@@PAUBBOX@@00M0M@Z ; AddLinearTwistField
PUBLIC	?LinearTwistFieldCollTest@@YA_NPAUForceFieldStruct@@PAUVectorStruct@@@Z ; LinearTwistFieldCollTest
PUBLIC	?LinearTwistFieldImpulse@@YAXPAUForceFieldStruct@@PAUFieldDataStruct@@PAUVectorStruct@@2@Z ; LinearTwistFieldImpulse
; Function compile flags: /Odt /ZI
;	COMDAT ?AddLinearTwistField@@YAPAUForceFieldStruct@@JJPAUVectorStruct@@PATMatrixUnion@@PAUBBOX@@00M0M@Z
_TEXT	SEGMENT
_params$ = -8						; size = 4
_field$ = -4						; size = 4
_parentID$ = 8						; size = 4
_priority$ = 12						; size = 4
_pos$ = 16						; size = 4
_mat$ = 20						; size = 4
_bBox$ = 24						; size = 4
_size$ = 28						; size = 4
_dir$ = 32						; size = 4
_mag$ = 36						; size = 4
_twist$ = 40						; size = 4
_damping$ = 44						; size = 4
?AddLinearTwistField@@YAPAUForceFieldStruct@@JJPAUVectorStruct@@PATMatrixUnion@@PAUBBOX@@00M0M@Z PROC NEAR ; AddLinearTwistField, COMDAT

; 282  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi

; 283  : 	FORCE_FIELD *field;
; 284  : 	LINEARTWIST_FIELD_PARAMS *params;
; 285  : 	
; 286  : 	field = AddField();

	call	?AddField@@YAPAUForceFieldStruct@@XZ	; AddField
	mov	DWORD PTR _field$[ebp], eax

; 287  : 	params = &field->Params.LinearTwistParams;

	mov	eax, DWORD PTR _field$[ebp]
	add	eax, 48					; 00000030H
	mov	DWORD PTR _params$[ebp], eax

; 288  : 
; 289  : 	field->Type = FIELD_LINEARTWIST;

	mov	eax, DWORD PTR _field$[ebp]
	mov	DWORD PTR [eax+4], 32			; 00000020H

; 290  : 	field->ParentID = parentID;

	mov	eax, DWORD PTR _field$[ebp]
	mov	ecx, DWORD PTR _parentID$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 291  : 	field->Priority = priority;

	mov	eax, DWORD PTR _field$[ebp]
	mov	ecx, DWORD PTR _priority$[ebp]
	mov	DWORD PTR [eax+12], ecx

; 292  : 	field->PosPtr = pos;

	mov	eax, DWORD PTR _field$[ebp]
	mov	ecx, DWORD PTR _pos$[ebp]
	mov	DWORD PTR [eax+16], ecx

; 293  : 	field->MatPtr = mat;

	mov	eax, DWORD PTR _field$[ebp]
	mov	ecx, DWORD PTR _mat$[ebp]
	mov	DWORD PTR [eax+20], ecx

; 294  : 	field->FieldCollTest = LinearTwistFieldCollTest;

	mov	eax, DWORD PTR _field$[ebp]
	mov	DWORD PTR [eax+92], OFFSET FLAT:?LinearTwistFieldCollTest@@YA_NPAUForceFieldStruct@@PAUVectorStruct@@@Z ; LinearTwistFieldCollTest

; 295  : 	field->AddFieldImpulse = LinearTwistFieldImpulse;

	mov	eax, DWORD PTR _field$[ebp]
	mov	DWORD PTR [eax+96], OFFSET FLAT:?LinearTwistFieldImpulse@@YAXPAUForceFieldStruct@@PAUFieldDataStruct@@PAUVectorStruct@@2@Z ; LinearTwistFieldImpulse

; 296  : 
; 297  : 	CopyBBox(bBox, &field->BBox);

	mov	eax, DWORD PTR _field$[ebp]
	mov	ecx, DWORD PTR _bBox$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+24], edx
	mov	eax, DWORD PTR _field$[ebp]
	mov	ecx, DWORD PTR _bBox$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+28], edx
	mov	eax, DWORD PTR _field$[ebp]
	mov	ecx, DWORD PTR _bBox$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+32], edx
	mov	eax, DWORD PTR _field$[ebp]
	mov	ecx, DWORD PTR _bBox$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+36], edx
	mov	eax, DWORD PTR _field$[ebp]
	mov	ecx, DWORD PTR _bBox$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+40], edx
	mov	eax, DWORD PTR _field$[ebp]
	mov	ecx, DWORD PTR _bBox$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR [eax+44], edx

; 298  : 	CopyVec(size, &params->Size);

	mov	eax, DWORD PTR _params$[ebp]
	mov	ecx, DWORD PTR _size$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	eax, DWORD PTR _params$[ebp]
	mov	ecx, DWORD PTR _size$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _params$[ebp]
	mov	ecx, DWORD PTR _size$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx

; 299  : 	CopyVec(dir, &params->Dir);

	mov	eax, DWORD PTR _params$[ebp]
	mov	ecx, DWORD PTR _dir$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _params$[ebp]
	mov	ecx, DWORD PTR _dir$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+16], edx
	mov	eax, DWORD PTR _params$[ebp]
	mov	ecx, DWORD PTR _dir$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+20], edx

; 300  : 	params->Mag = mag;

	mov	eax, DWORD PTR _params$[ebp]
	mov	ecx, DWORD PTR _mag$[ebp]
	mov	DWORD PTR [eax+24], ecx

; 301  : 	params->Damping = damping;

	mov	eax, DWORD PTR _params$[ebp]
	mov	ecx, DWORD PTR _damping$[ebp]
	mov	DWORD PTR [eax+28], ecx

; 302  : 	CopyVec(twist, &params->Torque);

	mov	eax, DWORD PTR _params$[ebp]
	mov	ecx, DWORD PTR _twist$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+32], edx
	mov	eax, DWORD PTR _params$[ebp]
	mov	ecx, DWORD PTR _twist$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+36], edx
	mov	eax, DWORD PTR _params$[ebp]
	mov	ecx, DWORD PTR _twist$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+40], edx

; 303  : 
; 304  : 	return field;

	mov	eax, DWORD PTR _field$[ebp]

; 305  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?AddLinearTwistField@@YAPAUForceFieldStruct@@JJPAUVectorStruct@@PATMatrixUnion@@PAUBBOX@@00M0M@Z ENDP ; AddLinearTwistField
; Function compile flags: /Odt /ZI
_TEXT	ENDS
;	COMDAT ?LinearTwistFieldCollTest@@YA_NPAUForceFieldStruct@@PAUVectorStruct@@@Z
_TEXT	SEGMENT
tv199 = -88						; size = 4
tv133 = -88						; size = 4
_params$ = -20						; size = 4
_dR$ = -16						; size = 12
_iFace$ = -4						; size = 4
_field$ = 8						; size = 4
_pos$ = 12						; size = 4
?LinearTwistFieldCollTest@@YA_NPAUForceFieldStruct@@PAUVectorStruct@@@Z PROC NEAR ; LinearTwistFieldCollTest, COMDAT

; 308  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	ebx
	push	esi
	push	edi

; 309  : 	int iFace;
; 310  : 	VEC dR;
; 311  : 	LINEARTWIST_FIELD_PARAMS	*params = &field->Params.LinearTwistParams;

	mov	eax, DWORD PTR _field$[ebp]
	add	eax, 48					; 00000030H
	mov	DWORD PTR _params$[ebp], eax

; 312  : 
; 313  : 	VecMinusVec(pos, field->PosPtr, &dR);

	mov	eax, DWORD PTR _field$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _pos$[ebp]
	fld	DWORD PTR [edx]
	fsub	DWORD PTR [ecx]
	fstp	DWORD PTR _dR$[ebp]
	mov	eax, DWORD PTR _field$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _pos$[ebp]
	fld	DWORD PTR [edx+4]
	fsub	DWORD PTR [ecx+4]
	fstp	DWORD PTR _dR$[ebp+4]
	mov	eax, DWORD PTR _field$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _pos$[ebp]
	fld	DWORD PTR [edx+8]
	fsub	DWORD PTR [ecx+8]
	fstp	DWORD PTR _dR$[ebp+8]

; 314  : 
; 315  : 	// Bounding box test
; 316  : 	if (!PointInBBox(&dR, &field->BBox)) {

	mov	eax, DWORD PTR _field$[ebp]
	fld	DWORD PTR [eax+24]
	fcomp	DWORD PTR _dR$[ebp]
	fnstsw	ax
	test	ah, 65					; 00000041H
	je	SHORT $L81257
	mov	ecx, DWORD PTR _field$[ebp]
	fld	DWORD PTR [ecx+28]
	fcomp	DWORD PTR _dR$[ebp]
	fnstsw	ax
	test	ah, 5
	jnp	SHORT $L81257
	mov	edx, DWORD PTR _field$[ebp]
	fld	DWORD PTR [edx+40]
	fcomp	DWORD PTR _dR$[ebp+8]
	fnstsw	ax
	test	ah, 65					; 00000041H
	je	SHORT $L81257
	mov	eax, DWORD PTR _field$[ebp]
	fld	DWORD PTR [eax+44]
	fcomp	DWORD PTR _dR$[ebp+8]
	fnstsw	ax
	test	ah, 5
	jnp	SHORT $L81257
	mov	ecx, DWORD PTR _field$[ebp]
	fld	DWORD PTR [ecx+32]
	fcomp	DWORD PTR _dR$[ebp+4]
	fnstsw	ax
	test	ah, 65					; 00000041H
	je	SHORT $L81257
	mov	edx, DWORD PTR _field$[ebp]
	fld	DWORD PTR [edx+36]
	fcomp	DWORD PTR _dR$[ebp+4]
	fnstsw	ax
	test	ah, 5
	jnp	SHORT $L81257
	mov	DWORD PTR tv133[ebp], 1
	jmp	SHORT $L81258
$L81257:
	mov	DWORD PTR tv133[ebp], 0
$L81258:
	cmp	DWORD PTR tv133[ebp], 0
	jne	SHORT $L80868

; 317  : 		return FALSE;

	xor	al, al
	jmp	$L80864
$L80868:

; 318  : 	}
; 319  : 
; 320  : 	// Proper test
; 321  : 	for (iFace = 0; iFace < 3; iFace++) {

	mov	DWORD PTR _iFace$[ebp], 0
	jmp	SHORT $L80869
$L80870:
	mov	eax, DWORD PTR _iFace$[ebp]
	add	eax, 1
	mov	DWORD PTR _iFace$[ebp], eax
$L80869:
	cmp	DWORD PTR _iFace$[ebp], 3
	jge	$L80871

; 322  : 		if (abs(VecDotVec(&dR, &field->MatPtr->mv[iFace])) > params->Size.v[iFace]) {

	mov	eax, DWORD PTR _iFace$[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _field$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	fld	DWORD PTR _dR$[ebp]
	fmul	DWORD PTR [edx+eax]
	mov	eax, DWORD PTR _iFace$[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _field$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	fld	DWORD PTR _dR$[ebp+4]
	fmul	DWORD PTR [edx+eax+4]
	faddp	ST(1), ST(0)
	mov	eax, DWORD PTR _iFace$[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _field$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	fld	DWORD PTR _dR$[ebp+8]
	fmul	DWORD PTR [edx+eax+8]
	faddp	ST(1), ST(0)
	fcomp	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $L81259
	mov	eax, DWORD PTR _iFace$[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _field$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	fld	DWORD PTR _dR$[ebp]
	fmul	DWORD PTR [edx+eax]
	mov	eax, DWORD PTR _iFace$[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _field$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	fld	DWORD PTR _dR$[ebp+4]
	fmul	DWORD PTR [edx+eax+4]
	faddp	ST(1), ST(0)
	mov	eax, DWORD PTR _iFace$[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _field$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	fld	DWORD PTR _dR$[ebp+8]
	fmul	DWORD PTR [edx+eax+8]
	faddp	ST(1), ST(0)
	fstp	DWORD PTR tv199[ebp]
	jmp	SHORT $L81260
$L81259:
	mov	eax, DWORD PTR _iFace$[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _field$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	fld	DWORD PTR _dR$[ebp]
	fmul	DWORD PTR [edx+eax]
	mov	eax, DWORD PTR _iFace$[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _field$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	fld	DWORD PTR _dR$[ebp+4]
	fmul	DWORD PTR [edx+eax+4]
	faddp	ST(1), ST(0)
	mov	eax, DWORD PTR _iFace$[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _field$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	fld	DWORD PTR _dR$[ebp+8]
	fmul	DWORD PTR [edx+eax+8]
	faddp	ST(1), ST(0)
	fchs
	fstp	DWORD PTR tv199[ebp]
$L81260:
	mov	eax, DWORD PTR _iFace$[ebp]
	mov	ecx, DWORD PTR _params$[ebp]
	fld	DWORD PTR tv199[ebp]
	fcomp	DWORD PTR [ecx+eax*4]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $L80872

; 323  : 			return FALSE;

	xor	al, al
	jmp	SHORT $L80864
$L80872:

; 324  : 		}
; 325  : 	}

	jmp	$L80870
$L80871:

; 326  : 
; 327  : 	return TRUE;

	mov	al, 1
$L80864:

; 328  : 
; 329  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?LinearTwistFieldCollTest@@YA_NPAUForceFieldStruct@@PAUVectorStruct@@@Z ENDP ; LinearTwistFieldCollTest
; Function compile flags: /Odt /ZI
_TEXT	ENDS
;	COMDAT ?LinearTwistFieldImpulse@@YAXPAUForceFieldStruct@@PAUFieldDataStruct@@PAUVectorStruct@@2@Z
_TEXT	SEGMENT
_params$ = -8						; size = 4
_scale$ = -4						; size = 4
_field$ = 8						; size = 4
_data$ = 12						; size = 4
_imp$ = 16						; size = 4
_angImp$ = 20						; size = 4
?LinearTwistFieldImpulse@@YAXPAUForceFieldStruct@@PAUFieldDataStruct@@PAUVectorStruct@@2@Z PROC NEAR ; LinearTwistFieldImpulse, COMDAT

; 332  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi

; 333  : 	REAL	scale;
; 334  : 	LINEARTWIST_FIELD_PARAMS *params = &field->Params.LinearTwistParams;

	mov	eax, DWORD PTR _field$[ebp]
	add	eax, 48					; 00000030H
	mov	DWORD PTR _params$[ebp], eax

; 335  : 
; 336  : 	scale = params->Mag - MulScalar(params->Damping, VecDotVec(&params->Dir, data->Vel));

	mov	eax, DWORD PTR _params$[ebp]
	fld	DWORD PTR [eax+28]
	mov	ecx, DWORD PTR _data$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR _params$[ebp]
	fld	DWORD PTR [eax+12]
	fmul	DWORD PTR [edx]
	mov	ecx, DWORD PTR _data$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR _params$[ebp]
	fld	DWORD PTR [eax+16]
	fmul	DWORD PTR [edx+4]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR _data$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR _params$[ebp]
	fld	DWORD PTR [eax+20]
	fmul	DWORD PTR [edx+8]
	faddp	ST(1), ST(0)
	fmulp	ST(1), ST(0)
	mov	ecx, DWORD PTR _params$[ebp]
	fsubr	DWORD PTR [ecx+24]
	fstp	DWORD PTR _scale$[ebp]

; 337  : 	scale = MulScalar(scale, MulScalar(TimeStep, data->Mass));

	mov	eax, DWORD PTR _data$[ebp]
	fld	DWORD PTR [eax+28]
	fmul	DWORD PTR ?TimeStep@@3MA		; TimeStep
	fmul	DWORD PTR _scale$[ebp]
	fstp	DWORD PTR _scale$[ebp]

; 338  : 	VecPlusEqScalarVec(imp, scale, &params->Dir);

	mov	eax, DWORD PTR _params$[ebp]
	fld	DWORD PTR _scale$[ebp]
	fmul	DWORD PTR [eax+12]
	mov	ecx, DWORD PTR _imp$[ebp]
	fadd	DWORD PTR [ecx]
	mov	edx, DWORD PTR _imp$[ebp]
	fstp	DWORD PTR [edx]
	mov	eax, DWORD PTR _params$[ebp]
	fld	DWORD PTR _scale$[ebp]
	fmul	DWORD PTR [eax+16]
	mov	ecx, DWORD PTR _imp$[ebp]
	fadd	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _imp$[ebp]
	fstp	DWORD PTR [edx+4]
	mov	eax, DWORD PTR _params$[ebp]
	fld	DWORD PTR _scale$[ebp]
	fmul	DWORD PTR [eax+20]
	mov	ecx, DWORD PTR _imp$[ebp]
	fadd	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _imp$[ebp]
	fstp	DWORD PTR [edx+8]

; 339  : 
; 340  : 	VecEqScalarVec(angImp, TimeStep, &params->Torque);

	mov	eax, DWORD PTR _params$[ebp]
	fld	DWORD PTR ?TimeStep@@3MA		; TimeStep
	fmul	DWORD PTR [eax+32]
	mov	ecx, DWORD PTR _angImp$[ebp]
	fstp	DWORD PTR [ecx]
	mov	eax, DWORD PTR _params$[ebp]
	fld	DWORD PTR ?TimeStep@@3MA		; TimeStep
	fmul	DWORD PTR [eax+36]
	mov	ecx, DWORD PTR _angImp$[ebp]
	fstp	DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _params$[ebp]
	fld	DWORD PTR ?TimeStep@@3MA		; TimeStep
	fmul	DWORD PTR [eax+40]
	mov	ecx, DWORD PTR _angImp$[ebp]
	fstp	DWORD PTR [ecx+8]

; 341  : 
; 342  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?LinearTwistFieldImpulse@@YAXPAUForceFieldStruct@@PAUFieldDataStruct@@PAUVectorStruct@@2@Z ENDP ; LinearTwistFieldImpulse
_TEXT	ENDS
PUBLIC	?AddVelocityField@@YAPAUForceFieldStruct@@JJPAUVectorStruct@@PATMatrixUnion@@PAUBBOX@@00M@Z ; AddVelocityField
PUBLIC	?VelocityFieldCollTest@@YA_NPAUForceFieldStruct@@PAUVectorStruct@@@Z ; VelocityFieldCollTest
PUBLIC	?VelocityFieldImpulse@@YAXPAUForceFieldStruct@@PAUFieldDataStruct@@PAUVectorStruct@@2@Z ; VelocityFieldImpulse
; Function compile flags: /Odt /ZI
;	COMDAT ?AddVelocityField@@YAPAUForceFieldStruct@@JJPAUVectorStruct@@PATMatrixUnion@@PAUBBOX@@00M@Z
_TEXT	SEGMENT
_params$ = -8						; size = 4
_field$ = -4						; size = 4
_parentID$ = 8						; size = 4
_priority$ = 12						; size = 4
_pos$ = 16						; size = 4
_mat$ = 20						; size = 4
_bBox$ = 24						; size = 4
_size$ = 28						; size = 4
_dir$ = 32						; size = 4
_mag$ = 36						; size = 4
?AddVelocityField@@YAPAUForceFieldStruct@@JJPAUVectorStruct@@PATMatrixUnion@@PAUBBOX@@00M@Z PROC NEAR ; AddVelocityField, COMDAT

; 351  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi

; 352  : 	FORCE_FIELD *field;
; 353  : 	VELOCITY_FIELD_PARAMS *params;
; 354  : 	
; 355  : 	field = AddField();

	call	?AddField@@YAPAUForceFieldStruct@@XZ	; AddField
	mov	DWORD PTR _field$[ebp], eax

; 356  : 	params = &field->Params.VelocityParams;

	mov	eax, DWORD PTR _field$[ebp]
	add	eax, 48					; 00000030H
	mov	DWORD PTR _params$[ebp], eax

; 357  : 
; 358  : 	field->Type = FIELD_VELOCITY;

	mov	eax, DWORD PTR _field$[ebp]
	mov	DWORD PTR [eax+4], 2

; 359  : 	field->ParentID = parentID;

	mov	eax, DWORD PTR _field$[ebp]
	mov	ecx, DWORD PTR _parentID$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 360  : 	field->Priority = priority;

	mov	eax, DWORD PTR _field$[ebp]
	mov	ecx, DWORD PTR _priority$[ebp]
	mov	DWORD PTR [eax+12], ecx

; 361  : 	field->PosPtr = pos;

	mov	eax, DWORD PTR _field$[ebp]
	mov	ecx, DWORD PTR _pos$[ebp]
	mov	DWORD PTR [eax+16], ecx

; 362  : 	field->MatPtr = mat;

	mov	eax, DWORD PTR _field$[ebp]
	mov	ecx, DWORD PTR _mat$[ebp]
	mov	DWORD PTR [eax+20], ecx

; 363  : 	field->FieldCollTest = VelocityFieldCollTest;

	mov	eax, DWORD PTR _field$[ebp]
	mov	DWORD PTR [eax+92], OFFSET FLAT:?VelocityFieldCollTest@@YA_NPAUForceFieldStruct@@PAUVectorStruct@@@Z ; VelocityFieldCollTest

; 364  : 	field->AddFieldImpulse = VelocityFieldImpulse;

	mov	eax, DWORD PTR _field$[ebp]
	mov	DWORD PTR [eax+96], OFFSET FLAT:?VelocityFieldImpulse@@YAXPAUForceFieldStruct@@PAUFieldDataStruct@@PAUVectorStruct@@2@Z ; VelocityFieldImpulse

; 365  : 
; 366  : 	CopyBBox(bBox, &field->BBox);

	mov	eax, DWORD PTR _field$[ebp]
	mov	ecx, DWORD PTR _bBox$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+24], edx
	mov	eax, DWORD PTR _field$[ebp]
	mov	ecx, DWORD PTR _bBox$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+28], edx
	mov	eax, DWORD PTR _field$[ebp]
	mov	ecx, DWORD PTR _bBox$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+32], edx
	mov	eax, DWORD PTR _field$[ebp]
	mov	ecx, DWORD PTR _bBox$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+36], edx
	mov	eax, DWORD PTR _field$[ebp]
	mov	ecx, DWORD PTR _bBox$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+40], edx
	mov	eax, DWORD PTR _field$[ebp]
	mov	ecx, DWORD PTR _bBox$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR [eax+44], edx

; 367  : 	CopyVec(size, &params->Size);

	mov	eax, DWORD PTR _params$[ebp]
	mov	ecx, DWORD PTR _size$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	eax, DWORD PTR _params$[ebp]
	mov	ecx, DWORD PTR _size$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _params$[ebp]
	mov	ecx, DWORD PTR _size$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx

; 368  : 	CopyVec(dir, &params->Dir);

	mov	eax, DWORD PTR _params$[ebp]
	mov	ecx, DWORD PTR _dir$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _params$[ebp]
	mov	ecx, DWORD PTR _dir$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+16], edx
	mov	eax, DWORD PTR _params$[ebp]
	mov	ecx, DWORD PTR _dir$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+20], edx

; 369  : 	params->Mag = mag;

	mov	eax, DWORD PTR _params$[ebp]
	mov	ecx, DWORD PTR _mag$[ebp]
	mov	DWORD PTR [eax+24], ecx

; 370  : 
; 371  : 	return field;

	mov	eax, DWORD PTR _field$[ebp]

; 372  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?AddVelocityField@@YAPAUForceFieldStruct@@JJPAUVectorStruct@@PATMatrixUnion@@PAUBBOX@@00M@Z ENDP ; AddVelocityField
; Function compile flags: /Odt /ZI
_TEXT	ENDS
;	COMDAT ?VelocityFieldCollTest@@YA_NPAUForceFieldStruct@@PAUVectorStruct@@@Z
_TEXT	SEGMENT
tv199 = -88						; size = 4
tv133 = -88						; size = 4
_params$ = -20						; size = 4
_dR$ = -16						; size = 12
_iFace$ = -4						; size = 4
_field$ = 8						; size = 4
_pos$ = 12						; size = 4
?VelocityFieldCollTest@@YA_NPAUForceFieldStruct@@PAUVectorStruct@@@Z PROC NEAR ; VelocityFieldCollTest, COMDAT

; 375  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	ebx
	push	esi
	push	edi

; 376  : 	int iFace;
; 377  : 	VEC dR;
; 378  : 	VELOCITY_FIELD_PARAMS	*params = &field->Params.VelocityParams;

	mov	eax, DWORD PTR _field$[ebp]
	add	eax, 48					; 00000030H
	mov	DWORD PTR _params$[ebp], eax

; 379  : 
; 380  : 	VecMinusVec(pos, field->PosPtr, &dR);

	mov	eax, DWORD PTR _field$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _pos$[ebp]
	fld	DWORD PTR [edx]
	fsub	DWORD PTR [ecx]
	fstp	DWORD PTR _dR$[ebp]
	mov	eax, DWORD PTR _field$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _pos$[ebp]
	fld	DWORD PTR [edx+4]
	fsub	DWORD PTR [ecx+4]
	fstp	DWORD PTR _dR$[ebp+4]
	mov	eax, DWORD PTR _field$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _pos$[ebp]
	fld	DWORD PTR [edx+8]
	fsub	DWORD PTR [ecx+8]
	fstp	DWORD PTR _dR$[ebp+8]

; 381  : 
; 382  : 	// Bounding box test
; 383  : 	if (!PointInBBox(&dR, &field->BBox)) {

	mov	eax, DWORD PTR _field$[ebp]
	fld	DWORD PTR [eax+24]
	fcomp	DWORD PTR _dR$[ebp]
	fnstsw	ax
	test	ah, 65					; 00000041H
	je	SHORT $L81267
	mov	ecx, DWORD PTR _field$[ebp]
	fld	DWORD PTR [ecx+28]
	fcomp	DWORD PTR _dR$[ebp]
	fnstsw	ax
	test	ah, 5
	jnp	SHORT $L81267
	mov	edx, DWORD PTR _field$[ebp]
	fld	DWORD PTR [edx+40]
	fcomp	DWORD PTR _dR$[ebp+8]
	fnstsw	ax
	test	ah, 65					; 00000041H
	je	SHORT $L81267
	mov	eax, DWORD PTR _field$[ebp]
	fld	DWORD PTR [eax+44]
	fcomp	DWORD PTR _dR$[ebp+8]
	fnstsw	ax
	test	ah, 5
	jnp	SHORT $L81267
	mov	ecx, DWORD PTR _field$[ebp]
	fld	DWORD PTR [ecx+32]
	fcomp	DWORD PTR _dR$[ebp+4]
	fnstsw	ax
	test	ah, 65					; 00000041H
	je	SHORT $L81267
	mov	edx, DWORD PTR _field$[ebp]
	fld	DWORD PTR [edx+36]
	fcomp	DWORD PTR _dR$[ebp+4]
	fnstsw	ax
	test	ah, 5
	jnp	SHORT $L81267
	mov	DWORD PTR tv133[ebp], 1
	jmp	SHORT $L81268
$L81267:
	mov	DWORD PTR tv133[ebp], 0
$L81268:
	cmp	DWORD PTR tv133[ebp], 0
	jne	SHORT $L80900

; 384  : 		return FALSE;

	xor	al, al
	jmp	$L80896
$L80900:

; 385  : 	}
; 386  : 
; 387  : 	// Proper test
; 388  : 	for (iFace = 0; iFace < 3; iFace++) {

	mov	DWORD PTR _iFace$[ebp], 0
	jmp	SHORT $L80901
$L80902:
	mov	eax, DWORD PTR _iFace$[ebp]
	add	eax, 1
	mov	DWORD PTR _iFace$[ebp], eax
$L80901:
	cmp	DWORD PTR _iFace$[ebp], 3
	jge	$L80903

; 389  : 		if (abs(VecDotVec(&dR, &field->MatPtr->mv[iFace])) > params->Size.v[iFace]) {

	mov	eax, DWORD PTR _iFace$[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _field$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	fld	DWORD PTR _dR$[ebp]
	fmul	DWORD PTR [edx+eax]
	mov	eax, DWORD PTR _iFace$[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _field$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	fld	DWORD PTR _dR$[ebp+4]
	fmul	DWORD PTR [edx+eax+4]
	faddp	ST(1), ST(0)
	mov	eax, DWORD PTR _iFace$[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _field$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	fld	DWORD PTR _dR$[ebp+8]
	fmul	DWORD PTR [edx+eax+8]
	faddp	ST(1), ST(0)
	fcomp	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $L81269
	mov	eax, DWORD PTR _iFace$[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _field$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	fld	DWORD PTR _dR$[ebp]
	fmul	DWORD PTR [edx+eax]
	mov	eax, DWORD PTR _iFace$[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _field$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	fld	DWORD PTR _dR$[ebp+4]
	fmul	DWORD PTR [edx+eax+4]
	faddp	ST(1), ST(0)
	mov	eax, DWORD PTR _iFace$[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _field$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	fld	DWORD PTR _dR$[ebp+8]
	fmul	DWORD PTR [edx+eax+8]
	faddp	ST(1), ST(0)
	fstp	DWORD PTR tv199[ebp]
	jmp	SHORT $L81270
$L81269:
	mov	eax, DWORD PTR _iFace$[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _field$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	fld	DWORD PTR _dR$[ebp]
	fmul	DWORD PTR [edx+eax]
	mov	eax, DWORD PTR _iFace$[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _field$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	fld	DWORD PTR _dR$[ebp+4]
	fmul	DWORD PTR [edx+eax+4]
	faddp	ST(1), ST(0)
	mov	eax, DWORD PTR _iFace$[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _field$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	fld	DWORD PTR _dR$[ebp+8]
	fmul	DWORD PTR [edx+eax+8]
	faddp	ST(1), ST(0)
	fchs
	fstp	DWORD PTR tv199[ebp]
$L81270:
	mov	eax, DWORD PTR _iFace$[ebp]
	mov	ecx, DWORD PTR _params$[ebp]
	fld	DWORD PTR tv199[ebp]
	fcomp	DWORD PTR [ecx+eax*4]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $L80904

; 390  : 			return FALSE;

	xor	al, al
	jmp	SHORT $L80896
$L80904:

; 391  : 		}
; 392  : 	}

	jmp	$L80902
$L80903:

; 393  : 
; 394  : 	return TRUE;

	mov	al, 1
$L80896:

; 395  : 
; 396  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?VelocityFieldCollTest@@YA_NPAUForceFieldStruct@@PAUVectorStruct@@@Z ENDP ; VelocityFieldCollTest
; Function compile flags: /Odt /ZI
_TEXT	ENDS
;	COMDAT ?VelocityFieldImpulse@@YAXPAUForceFieldStruct@@PAUFieldDataStruct@@PAUVectorStruct@@2@Z
_TEXT	SEGMENT
_params$ = -8						; size = 4
_mag$ = -4						; size = 4
_field$ = 8						; size = 4
_data$ = 12						; size = 4
_imp$ = 16						; size = 4
_angImp$ = 20						; size = 4
?VelocityFieldImpulse@@YAXPAUForceFieldStruct@@PAUFieldDataStruct@@PAUVectorStruct@@2@Z PROC NEAR ; VelocityFieldImpulse, COMDAT

; 399  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi

; 400  : 	REAL mag;
; 401  : 	VELOCITY_FIELD_PARAMS *params = &field->Params.VelocityParams;

	mov	eax, DWORD PTR _field$[ebp]
	add	eax, 48					; 00000030H
	mov	DWORD PTR _params$[ebp], eax

; 402  : 
; 403  : 	mag = params->Mag - VecDotVec(&params->Dir, data->Vel);

	mov	eax, DWORD PTR _data$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _params$[ebp]
	fld	DWORD PTR [edx+12]
	fmul	DWORD PTR [ecx]
	mov	eax, DWORD PTR _data$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _params$[ebp]
	fld	DWORD PTR [edx+16]
	fmul	DWORD PTR [ecx+4]
	faddp	ST(1), ST(0)
	mov	eax, DWORD PTR _data$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _params$[ebp]
	fld	DWORD PTR [edx+20]
	fmul	DWORD PTR [ecx+8]
	faddp	ST(1), ST(0)
	mov	eax, DWORD PTR _params$[ebp]
	fsubr	DWORD PTR [eax+24]
	fstp	DWORD PTR _mag$[ebp]

; 404  : 	mag = MulScalar(mag, TimeStep);

	fld	DWORD PTR _mag$[ebp]
	fmul	DWORD PTR ?TimeStep@@3MA		; TimeStep
	fstp	DWORD PTR _mag$[ebp]

; 405  : 
; 406  : 	VecPlusEqScalarVec(imp, mag, &params->Dir);

	mov	eax, DWORD PTR _params$[ebp]
	fld	DWORD PTR _mag$[ebp]
	fmul	DWORD PTR [eax+12]
	mov	ecx, DWORD PTR _imp$[ebp]
	fadd	DWORD PTR [ecx]
	mov	edx, DWORD PTR _imp$[ebp]
	fstp	DWORD PTR [edx]
	mov	eax, DWORD PTR _params$[ebp]
	fld	DWORD PTR _mag$[ebp]
	fmul	DWORD PTR [eax+16]
	mov	ecx, DWORD PTR _imp$[ebp]
	fadd	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _imp$[ebp]
	fstp	DWORD PTR [edx+4]
	mov	eax, DWORD PTR _params$[ebp]
	fld	DWORD PTR _mag$[ebp]
	fmul	DWORD PTR [eax+20]
	mov	ecx, DWORD PTR _imp$[ebp]
	fadd	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _imp$[ebp]
	fstp	DWORD PTR [edx+8]

; 407  : 
; 408  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?VelocityFieldImpulse@@YAXPAUForceFieldStruct@@PAUFieldDataStruct@@PAUVectorStruct@@2@Z ENDP ; VelocityFieldImpulse
_TEXT	ENDS
PUBLIC	?AddSphericalField@@YAPAUForceFieldStruct@@JJPAUVectorStruct@@MMMM@Z ; AddSphericalField
PUBLIC	?SphericalFieldCollTest@@YA_NPAUForceFieldStruct@@PAUVectorStruct@@@Z ; SphericalFieldCollTest
PUBLIC	?SphericalFieldImpulse@@YAXPAUForceFieldStruct@@PAUFieldDataStruct@@PAUVectorStruct@@2@Z ; SphericalFieldImpulse
EXTRN	?Identity@@3TMatrixUnion@@A:BYTE		; Identity
; Function compile flags: /Odt /ZI
;	COMDAT ?AddSphericalField@@YAPAUForceFieldStruct@@JJPAUVectorStruct@@MMMM@Z
_TEXT	SEGMENT
_params$ = -8						; size = 4
_field$ = -4						; size = 4
_parentID$ = 8						; size = 4
_priority$ = 12						; size = 4
_pos$ = 16						; size = 4
_rStart$ = 20						; size = 4
_rEnd$ = 24						; size = 4
_gStart$ = 28						; size = 4
_gEnd$ = 32						; size = 4
?AddSphericalField@@YAPAUForceFieldStruct@@JJPAUVectorStruct@@MMMM@Z PROC NEAR ; AddSphericalField, COMDAT

; 418  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi

; 419  : 	
; 420  : 	FORCE_FIELD *field;
; 421  : 	SPHERICAL_FIELD_PARAMS *params;
; 422  : 	
; 423  : 	field = AddField();

	call	?AddField@@YAPAUForceFieldStruct@@XZ	; AddField
	mov	DWORD PTR _field$[ebp], eax

; 424  : 	params = &field->Params.SphericalParams;

	mov	eax, DWORD PTR _field$[ebp]
	add	eax, 48					; 00000030H
	mov	DWORD PTR _params$[ebp], eax

; 425  : 
; 426  : 	field->Type = FIELD_SPHERICAL;

	mov	eax, DWORD PTR _field$[ebp]
	mov	DWORD PTR [eax+4], 1

; 427  : 	field->ParentID = parentID;

	mov	eax, DWORD PTR _field$[ebp]
	mov	ecx, DWORD PTR _parentID$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 428  : 	field->Priority = priority;

	mov	eax, DWORD PTR _field$[ebp]
	mov	ecx, DWORD PTR _priority$[ebp]
	mov	DWORD PTR [eax+12], ecx

; 429  : 	field->PosPtr = pos;

	mov	eax, DWORD PTR _field$[ebp]
	mov	ecx, DWORD PTR _pos$[ebp]
	mov	DWORD PTR [eax+16], ecx

; 430  : 	field->MatPtr = &Identity;

	mov	eax, DWORD PTR _field$[ebp]
	mov	DWORD PTR [eax+20], OFFSET FLAT:?Identity@@3TMatrixUnion@@A ; Identity

; 431  : 	field->FieldCollTest = SphericalFieldCollTest;

	mov	eax, DWORD PTR _field$[ebp]
	mov	DWORD PTR [eax+92], OFFSET FLAT:?SphericalFieldCollTest@@YA_NPAUForceFieldStruct@@PAUVectorStruct@@@Z ; SphericalFieldCollTest

; 432  : 	field->AddFieldImpulse = SphericalFieldImpulse;

	mov	eax, DWORD PTR _field$[ebp]
	mov	DWORD PTR [eax+96], OFFSET FLAT:?SphericalFieldImpulse@@YAXPAUForceFieldStruct@@PAUFieldDataStruct@@PAUVectorStruct@@2@Z ; SphericalFieldImpulse

; 433  : 	SetBBox(&field->BBox, -rEnd, rEnd, -rEnd, rEnd, -rEnd, rEnd);

	fld	DWORD PTR _rEnd$[ebp]
	fchs
	mov	eax, DWORD PTR _field$[ebp]
	fstp	DWORD PTR [eax+24]
	mov	eax, DWORD PTR _field$[ebp]
	mov	ecx, DWORD PTR _rEnd$[ebp]
	mov	DWORD PTR [eax+28], ecx
	fld	DWORD PTR _rEnd$[ebp]
	fchs
	mov	eax, DWORD PTR _field$[ebp]
	fstp	DWORD PTR [eax+32]
	mov	eax, DWORD PTR _field$[ebp]
	mov	ecx, DWORD PTR _rEnd$[ebp]
	mov	DWORD PTR [eax+36], ecx
	fld	DWORD PTR _rEnd$[ebp]
	fchs
	mov	eax, DWORD PTR _field$[ebp]
	fstp	DWORD PTR [eax+40]
	mov	eax, DWORD PTR _field$[ebp]
	mov	ecx, DWORD PTR _rEnd$[ebp]
	mov	DWORD PTR [eax+44], ecx

; 434  : 
; 435  : 	params->RadStart = rStart;

	mov	eax, DWORD PTR _params$[ebp]
	mov	ecx, DWORD PTR _rStart$[ebp]
	mov	DWORD PTR [eax], ecx

; 436  : 	params->RadEnd = rEnd;

	mov	eax, DWORD PTR _params$[ebp]
	mov	ecx, DWORD PTR _rEnd$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 437  : 	params->GradStart = gStart;

	mov	eax, DWORD PTR _params$[ebp]
	mov	ecx, DWORD PTR _gStart$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 438  : 	params->GradEnd = gEnd;

	mov	eax, DWORD PTR _params$[ebp]
	mov	ecx, DWORD PTR _gEnd$[ebp]
	mov	DWORD PTR [eax+12], ecx

; 439  : 
; 440  : 	return field;

	mov	eax, DWORD PTR _field$[ebp]

; 441  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?AddSphericalField@@YAPAUForceFieldStruct@@JJPAUVectorStruct@@MMMM@Z ENDP ; AddSphericalField
; Function compile flags: /Odt /ZI
_TEXT	ENDS
;	COMDAT ?SphericalFieldCollTest@@YA_NPAUForceFieldStruct@@PAUVectorStruct@@@Z
_TEXT	SEGMENT
_params$ = -20						; size = 4
_dRLenSq$ = -16						; size = 4
_dR$ = -12						; size = 12
_field$ = 8						; size = 4
_pos$ = 12						; size = 4
?SphericalFieldCollTest@@YA_NPAUForceFieldStruct@@PAUVectorStruct@@@Z PROC NEAR ; SphericalFieldCollTest, COMDAT

; 445  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi

; 446  : 	VEC	dR;
; 447  : 	REAL	dRLenSq;
; 448  : 	SPHERICAL_FIELD_PARAMS *params = &field->Params.SphericalParams;

	mov	eax, DWORD PTR _field$[ebp]
	add	eax, 48					; 00000030H
	mov	DWORD PTR _params$[ebp], eax

; 449  : 
; 450  : 	VecMinusVec(pos, field->PosPtr, &dR);

	mov	eax, DWORD PTR _field$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _pos$[ebp]
	fld	DWORD PTR [edx]
	fsub	DWORD PTR [ecx]
	fstp	DWORD PTR _dR$[ebp]
	mov	eax, DWORD PTR _field$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _pos$[ebp]
	fld	DWORD PTR [edx+4]
	fsub	DWORD PTR [ecx+4]
	fstp	DWORD PTR _dR$[ebp+4]
	mov	eax, DWORD PTR _field$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _pos$[ebp]
	fld	DWORD PTR [edx+8]
	fsub	DWORD PTR [ecx+8]
	fstp	DWORD PTR _dR$[ebp+8]

; 451  : 	dRLenSq = VecDotVec(&dR, &dR);

	fld	DWORD PTR _dR$[ebp]
	fmul	DWORD PTR _dR$[ebp]
	fld	DWORD PTR _dR$[ebp+4]
	fmul	DWORD PTR _dR$[ebp+4]
	faddp	ST(1), ST(0)
	fld	DWORD PTR _dR$[ebp+8]
	fmul	DWORD PTR _dR$[ebp+8]
	faddp	ST(1), ST(0)
	fstp	DWORD PTR _dRLenSq$[ebp]

; 452  : 
; 453  : 	if (dRLenSq < MulScalar(params->RadEnd, params->RadEnd)) {

	mov	eax, DWORD PTR _params$[ebp]
	fld	DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _params$[ebp]
	fmul	DWORD PTR [ecx+4]
	fcomp	DWORD PTR _dRLenSq$[ebp]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $L80931

; 454  : 		return TRUE;

	mov	al, 1
	jmp	SHORT $L80927
$L80931:

; 455  : 	}
; 456  : 
; 457  : 	return FALSE;

	xor	al, al
$L80927:

; 458  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?SphericalFieldCollTest@@YA_NPAUForceFieldStruct@@PAUVectorStruct@@@Z ENDP ; SphericalFieldCollTest
_TEXT	ENDS
PUBLIC	?sqrt@@YAMM@Z					; sqrt
; Function compile flags: /Odt /ZI
;	COMDAT ?SphericalFieldImpulse@@YAXPAUForceFieldStruct@@PAUFieldDataStruct@@PAUVectorStruct@@2@Z
_TEXT	SEGMENT
_params$ = -24						; size = 4
_gradient$ = -20					; size = 4
_dRLen$ = -16						; size = 4
_dR$ = -12						; size = 12
_field$ = 8						; size = 4
_data$ = 12						; size = 4
_imp$ = 16						; size = 4
_angImp$ = 20						; size = 4
?SphericalFieldImpulse@@YAXPAUForceFieldStruct@@PAUFieldDataStruct@@PAUVectorStruct@@2@Z PROC NEAR ; SphericalFieldImpulse, COMDAT

; 461  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	ebx
	push	esi
	push	edi

; 462  : 	VEC	dR;
; 463  : 	REAL	dRLen, gradient;
; 464  : 	SPHERICAL_FIELD_PARAMS *params = &field->Params.SphericalParams;

	mov	eax, DWORD PTR _field$[ebp]
	add	eax, 48					; 00000030H
	mov	DWORD PTR _params$[ebp], eax

; 465  : 
; 466  : 	VecMinusVec(data->Pos, field->PosPtr, &dR);

	mov	eax, DWORD PTR _data$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _field$[ebp]
	mov	eax, DWORD PTR [edx+16]
	fld	DWORD PTR [ecx]
	fsub	DWORD PTR [eax]
	fstp	DWORD PTR _dR$[ebp]
	mov	eax, DWORD PTR _data$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _field$[ebp]
	mov	eax, DWORD PTR [edx+16]
	fld	DWORD PTR [ecx+4]
	fsub	DWORD PTR [eax+4]
	fstp	DWORD PTR _dR$[ebp+4]
	mov	eax, DWORD PTR _data$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _field$[ebp]
	mov	eax, DWORD PTR [edx+16]
	fld	DWORD PTR [ecx+8]
	fsub	DWORD PTR [eax+8]
	fstp	DWORD PTR _dR$[ebp+8]

; 467  : 	dRLen = (REAL)sqrt(VecDotVec(&dR, &dR));

	fld	DWORD PTR _dR$[ebp]
	fmul	DWORD PTR _dR$[ebp]
	fld	DWORD PTR _dR$[ebp+4]
	fmul	DWORD PTR _dR$[ebp+4]
	faddp	ST(1), ST(0)
	fld	DWORD PTR _dR$[ebp+8]
	fmul	DWORD PTR _dR$[ebp+8]
	faddp	ST(1), ST(0)
	push	ecx
	fstp	DWORD PTR [esp]
	call	?sqrt@@YAMM@Z				; sqrt
	add	esp, 4
	fstp	DWORD PTR _dRLen$[ebp]

; 468  : 
; 469  : 
; 470  : 	if (dRLen > params->RadStart && dRLen < params->RadEnd) {

	mov	eax, DWORD PTR _params$[ebp]
	fld	DWORD PTR _dRLen$[ebp]
	fcomp	DWORD PTR [eax]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	$L80937
	mov	eax, DWORD PTR _params$[ebp]
	fld	DWORD PTR _dRLen$[ebp]
	fcomp	DWORD PTR [eax+4]
	fnstsw	ax
	test	ah, 5
	jp	$L80937

; 471  : 
; 472  : 		gradient = DivScalar((dRLen - params->RadStart), (params->RadEnd - params->RadStart));

	mov	eax, DWORD PTR _params$[ebp]
	fld	DWORD PTR _dRLen$[ebp]
	fsub	DWORD PTR [eax]
	mov	ecx, DWORD PTR _params$[ebp]
	mov	edx, DWORD PTR _params$[ebp]
	fld	DWORD PTR [ecx+4]
	fsub	DWORD PTR [edx]
	fdivp	ST(1), ST(0)
	fstp	DWORD PTR _gradient$[ebp]

; 473  : 		gradient = params->GradStart + MulScalar(gradient, (params->GradEnd - params->GradStart));

	mov	eax, DWORD PTR _params$[ebp]
	mov	ecx, DWORD PTR _params$[ebp]
	fld	DWORD PTR [eax+12]
	fsub	DWORD PTR [ecx+8]
	fmul	DWORD PTR _gradient$[ebp]
	mov	edx, DWORD PTR _params$[ebp]
	fadd	DWORD PTR [edx+8]
	fstp	DWORD PTR _gradient$[ebp]

; 474  : 		gradient = DivScalar(MulScalar(gradient, TimeStep), dRLen);

	fld	DWORD PTR _gradient$[ebp]
	fmul	DWORD PTR ?TimeStep@@3MA		; TimeStep
	fdiv	DWORD PTR _dRLen$[ebp]
	fstp	DWORD PTR _gradient$[ebp]

; 475  : 		VecMulScalar(&dR, gradient);

	fld	DWORD PTR _dR$[ebp]
	fmul	DWORD PTR _gradient$[ebp]
	fstp	DWORD PTR _dR$[ebp]
	fld	DWORD PTR _dR$[ebp+4]
	fmul	DWORD PTR _gradient$[ebp]
	fstp	DWORD PTR _dR$[ebp+4]
	fld	DWORD PTR _dR$[ebp+8]
	fmul	DWORD PTR _gradient$[ebp]
	fstp	DWORD PTR _dR$[ebp+8]

; 476  : 		
; 477  : 		VecPlusEqScalarVec(imp, data->Mass, &dR);

	mov	eax, DWORD PTR _data$[ebp]
	fld	DWORD PTR [eax+28]
	fmul	DWORD PTR _dR$[ebp]
	mov	ecx, DWORD PTR _imp$[ebp]
	fadd	DWORD PTR [ecx]
	mov	edx, DWORD PTR _imp$[ebp]
	fstp	DWORD PTR [edx]
	mov	eax, DWORD PTR _data$[ebp]
	fld	DWORD PTR [eax+28]
	fmul	DWORD PTR _dR$[ebp+4]
	mov	ecx, DWORD PTR _imp$[ebp]
	fadd	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _imp$[ebp]
	fstp	DWORD PTR [edx+4]
	mov	eax, DWORD PTR _data$[ebp]
	fld	DWORD PTR [eax+28]
	fmul	DWORD PTR _dR$[ebp+8]
	mov	ecx, DWORD PTR _imp$[ebp]
	fadd	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _imp$[ebp]
	fstp	DWORD PTR [edx+8]
$L80937:

; 478  : 	}
; 479  : 
; 480  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?SphericalFieldImpulse@@YAXPAUForceFieldStruct@@PAUFieldDataStruct@@PAUVectorStruct@@2@Z ENDP ; SphericalFieldImpulse
_TEXT	ENDS
PUBLIC	_sqrtf
; Function compile flags: /Odt /ZI
; File c:\program files\microsoft visual studio .net 2003\vc7\include\math.h
;	COMDAT ?sqrt@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?sqrt@@YAMM@Z PROC NEAR					; sqrt, COMDAT

; 579  :         {return (sqrtf(_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR __X$[ebp]
	push	eax
	call	_sqrtf
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?sqrt@@YAMM@Z ENDP					; sqrt
_TEXT	ENDS
EXTRN	_sqrt:NEAR
; Function compile flags: /Odt /ZI
;	COMDAT _sqrtf
_TEXT	SEGMENT
tv70 = -68						; size = 4
__X$ = 8						; size = 4
_sqrtf	PROC NEAR					; COMDAT

; 470  :         {return ((float)sqrt((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	fld	DWORD PTR __X$[ebp]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	call	_sqrt
	add	esp, 8
	fst	DWORD PTR tv70[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_sqrtf	ENDP
_TEXT	ENDS
PUBLIC	?AddCylindricalField@@YAPAUForceFieldStruct@@JJPAUVectorStruct@@0MMMM@Z ; AddCylindricalField
PUBLIC	?CylindricalFieldCollTest@@YA_NPAUForceFieldStruct@@PAUVectorStruct@@@Z ; CylindricalFieldCollTest
PUBLIC	?CylindricalFieldImpulse@@YAXPAUForceFieldStruct@@PAUFieldDataStruct@@PAUVectorStruct@@2@Z ; CylindricalFieldImpulse
; Function compile flags: /Odt /ZI
; File c:\documents and settings\jarhead\desktop\shit to display my love for xbox revolt and fuck you borman-ness\revolt source\source\field.cpp
;	COMDAT ?AddCylindricalField@@YAPAUForceFieldStruct@@JJPAUVectorStruct@@0MMMM@Z
_TEXT	SEGMENT
_params$ = -8						; size = 4
_field$ = -4						; size = 4
_parentID$ = 8						; size = 4
_priority$ = 12						; size = 4
_pos$ = 16						; size = 4
_dir$ = 20						; size = 4
_rStart$ = 24						; size = 4
_rEnd$ = 28						; size = 4
_gStart$ = 32						; size = 4
_gEnd$ = 36						; size = 4
?AddCylindricalField@@YAPAUForceFieldStruct@@JJPAUVectorStruct@@0MMMM@Z PROC NEAR ; AddCylindricalField, COMDAT

; 491  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi

; 492  : 	
; 493  : 	FORCE_FIELD *field;
; 494  : 	CYLINDRICAL_FIELD_PARAMS *params;
; 495  : 	
; 496  : 	field = AddField();

	call	?AddField@@YAPAUForceFieldStruct@@XZ	; AddField
	mov	DWORD PTR _field$[ebp], eax

; 497  : 	params = &field->Params.CylindricalParams;

	mov	eax, DWORD PTR _field$[ebp]
	add	eax, 48					; 00000030H
	mov	DWORD PTR _params$[ebp], eax

; 498  : 
; 499  : 	field->Type = FIELD_SPHERICAL;

	mov	eax, DWORD PTR _field$[ebp]
	mov	DWORD PTR [eax+4], 1

; 500  : 	field->ParentID = parentID;

	mov	eax, DWORD PTR _field$[ebp]
	mov	ecx, DWORD PTR _parentID$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 501  : 	field->Priority = priority;

	mov	eax, DWORD PTR _field$[ebp]
	mov	ecx, DWORD PTR _priority$[ebp]
	mov	DWORD PTR [eax+12], ecx

; 502  : 	field->PosPtr = pos;

	mov	eax, DWORD PTR _field$[ebp]
	mov	ecx, DWORD PTR _pos$[ebp]
	mov	DWORD PTR [eax+16], ecx

; 503  : 	field->MatPtr = &Identity;

	mov	eax, DWORD PTR _field$[ebp]
	mov	DWORD PTR [eax+20], OFFSET FLAT:?Identity@@3TMatrixUnion@@A ; Identity

; 504  : 	field->FieldCollTest = CylindricalFieldCollTest;

	mov	eax, DWORD PTR _field$[ebp]
	mov	DWORD PTR [eax+92], OFFSET FLAT:?CylindricalFieldCollTest@@YA_NPAUForceFieldStruct@@PAUVectorStruct@@@Z ; CylindricalFieldCollTest

; 505  : 	field->AddFieldImpulse = CylindricalFieldImpulse;

	mov	eax, DWORD PTR _field$[ebp]
	mov	DWORD PTR [eax+96], OFFSET FLAT:?CylindricalFieldImpulse@@YAXPAUForceFieldStruct@@PAUFieldDataStruct@@PAUVectorStruct@@2@Z ; CylindricalFieldImpulse

; 506  : 	SetBBox(&field->BBox, -rEnd, rEnd, -rEnd, rEnd, -rEnd, rEnd);

	fld	DWORD PTR _rEnd$[ebp]
	fchs
	mov	eax, DWORD PTR _field$[ebp]
	fstp	DWORD PTR [eax+24]
	mov	eax, DWORD PTR _field$[ebp]
	mov	ecx, DWORD PTR _rEnd$[ebp]
	mov	DWORD PTR [eax+28], ecx
	fld	DWORD PTR _rEnd$[ebp]
	fchs
	mov	eax, DWORD PTR _field$[ebp]
	fstp	DWORD PTR [eax+32]
	mov	eax, DWORD PTR _field$[ebp]
	mov	ecx, DWORD PTR _rEnd$[ebp]
	mov	DWORD PTR [eax+36], ecx
	fld	DWORD PTR _rEnd$[ebp]
	fchs
	mov	eax, DWORD PTR _field$[ebp]
	fstp	DWORD PTR [eax+40]
	mov	eax, DWORD PTR _field$[ebp]
	mov	ecx, DWORD PTR _rEnd$[ebp]
	mov	DWORD PTR [eax+44], ecx

; 507  : 
; 508  : 	CopyVec(dir, &params->Dir);

	mov	eax, DWORD PTR _params$[ebp]
	mov	ecx, DWORD PTR _dir$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	eax, DWORD PTR _params$[ebp]
	mov	ecx, DWORD PTR _dir$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _params$[ebp]
	mov	ecx, DWORD PTR _dir$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx

; 509  : 	params->RadStart = rStart;

	mov	eax, DWORD PTR _params$[ebp]
	mov	ecx, DWORD PTR _rStart$[ebp]
	mov	DWORD PTR [eax+12], ecx

; 510  : 	params->RadEnd = rEnd;

	mov	eax, DWORD PTR _params$[ebp]
	mov	ecx, DWORD PTR _rEnd$[ebp]
	mov	DWORD PTR [eax+16], ecx

; 511  : 	params->GradStart = gStart;

	mov	eax, DWORD PTR _params$[ebp]
	mov	ecx, DWORD PTR _gStart$[ebp]
	mov	DWORD PTR [eax+20], ecx

; 512  : 	params->GradEnd = gEnd;

	mov	eax, DWORD PTR _params$[ebp]
	mov	ecx, DWORD PTR _gEnd$[ebp]
	mov	DWORD PTR [eax+24], ecx

; 513  : 
; 514  : 	return field;

	mov	eax, DWORD PTR _field$[ebp]

; 515  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?AddCylindricalField@@YAPAUForceFieldStruct@@JJPAUVectorStruct@@0MMMM@Z ENDP ; AddCylindricalField
; Function compile flags: /Odt /ZI
_TEXT	ENDS
;	COMDAT ?CylindricalFieldCollTest@@YA_NPAUForceFieldStruct@@PAUVectorStruct@@@Z
_TEXT	SEGMENT
_params$ = -20						; size = 4
_dRLenSq$ = -16						; size = 4
_dR$ = -12						; size = 12
_field$ = 8						; size = 4
_pos$ = 12						; size = 4
?CylindricalFieldCollTest@@YA_NPAUForceFieldStruct@@PAUVectorStruct@@@Z PROC NEAR ; CylindricalFieldCollTest, COMDAT

; 519  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi

; 520  : 	VEC	dR;
; 521  : 	REAL	dRLenSq;
; 522  : 	CYLINDRICAL_FIELD_PARAMS *params = &field->Params.CylindricalParams;

	mov	eax, DWORD PTR _field$[ebp]
	add	eax, 48					; 00000030H
	mov	DWORD PTR _params$[ebp], eax

; 523  : 
; 524  : 	VecMinusVec(pos, field->PosPtr, &dR);

	mov	eax, DWORD PTR _field$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _pos$[ebp]
	fld	DWORD PTR [edx]
	fsub	DWORD PTR [ecx]
	fstp	DWORD PTR _dR$[ebp]
	mov	eax, DWORD PTR _field$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _pos$[ebp]
	fld	DWORD PTR [edx+4]
	fsub	DWORD PTR [ecx+4]
	fstp	DWORD PTR _dR$[ebp+4]
	mov	eax, DWORD PTR _field$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _pos$[ebp]
	fld	DWORD PTR [edx+8]
	fsub	DWORD PTR [ecx+8]
	fstp	DWORD PTR _dR$[ebp+8]

; 525  : 	dRLenSq = VecDotVec(&dR, &dR);

	fld	DWORD PTR _dR$[ebp]
	fmul	DWORD PTR _dR$[ebp]
	fld	DWORD PTR _dR$[ebp+4]
	fmul	DWORD PTR _dR$[ebp+4]
	faddp	ST(1), ST(0)
	fld	DWORD PTR _dR$[ebp+8]
	fmul	DWORD PTR _dR$[ebp+8]
	faddp	ST(1), ST(0)
	fstp	DWORD PTR _dRLenSq$[ebp]

; 526  : 
; 527  : 	if (dRLenSq < MulScalar(params->RadEnd, params->RadEnd)) {

	mov	eax, DWORD PTR _params$[ebp]
	fld	DWORD PTR [eax+16]
	mov	ecx, DWORD PTR _params$[ebp]
	fmul	DWORD PTR [ecx+16]
	fcomp	DWORD PTR _dRLenSq$[ebp]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $L80963

; 528  : 		return TRUE;

	mov	al, 1
	jmp	SHORT $L80959
$L80963:

; 529  : 	}
; 530  : 
; 531  : 	return FALSE;

	xor	al, al
$L80959:

; 532  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?CylindricalFieldCollTest@@YA_NPAUForceFieldStruct@@PAUVectorStruct@@@Z ENDP ; CylindricalFieldCollTest
; Function compile flags: /Odt /ZI
_TEXT	ENDS
;	COMDAT ?CylindricalFieldImpulse@@YAXPAUForceFieldStruct@@PAUFieldDataStruct@@PAUVectorStruct@@2@Z
_TEXT	SEGMENT
_params$ = -28						; size = 4
_dRDir$ = -24						; size = 4
_gradient$ = -20					; size = 4
_dRLen$ = -16						; size = 4
_dR$ = -12						; size = 12
_field$ = 8						; size = 4
_data$ = 12						; size = 4
_imp$ = 16						; size = 4
_angImp$ = 20						; size = 4
?CylindricalFieldImpulse@@YAXPAUForceFieldStruct@@PAUFieldDataStruct@@PAUVectorStruct@@2@Z PROC NEAR ; CylindricalFieldImpulse, COMDAT

; 535  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 92					; 0000005cH
	push	ebx
	push	esi
	push	edi

; 536  : 	VEC	dR;
; 537  : 	REAL	dRLen, gradient, dRDir;
; 538  : 	CYLINDRICAL_FIELD_PARAMS *params = &field->Params.CylindricalParams;

	mov	eax, DWORD PTR _field$[ebp]
	add	eax, 48					; 00000030H
	mov	DWORD PTR _params$[ebp], eax

; 539  : 
; 540  : 	VecMinusVec(data->Pos, field->PosPtr, &dR);

	mov	eax, DWORD PTR _data$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _field$[ebp]
	mov	eax, DWORD PTR [edx+16]
	fld	DWORD PTR [ecx]
	fsub	DWORD PTR [eax]
	fstp	DWORD PTR _dR$[ebp]
	mov	eax, DWORD PTR _data$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _field$[ebp]
	mov	eax, DWORD PTR [edx+16]
	fld	DWORD PTR [ecx+4]
	fsub	DWORD PTR [eax+4]
	fstp	DWORD PTR _dR$[ebp+4]
	mov	eax, DWORD PTR _data$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _field$[ebp]
	mov	eax, DWORD PTR [edx+16]
	fld	DWORD PTR [ecx+8]
	fsub	DWORD PTR [eax+8]
	fstp	DWORD PTR _dR$[ebp+8]

; 541  : 	dRDir = VecDotVec(&dR, &params->Dir);

	mov	eax, DWORD PTR _params$[ebp]
	fld	DWORD PTR _dR$[ebp]
	fmul	DWORD PTR [eax]
	mov	ecx, DWORD PTR _params$[ebp]
	fld	DWORD PTR _dR$[ebp+4]
	fmul	DWORD PTR [ecx+4]
	faddp	ST(1), ST(0)
	mov	edx, DWORD PTR _params$[ebp]
	fld	DWORD PTR _dR$[ebp+8]
	fmul	DWORD PTR [edx+8]
	faddp	ST(1), ST(0)
	fstp	DWORD PTR _dRDir$[ebp]

; 542  : 	VecPlusEqScalarVec(&dR, -dRDir, &params->Dir);

	fld	DWORD PTR _dRDir$[ebp]
	fchs
	mov	eax, DWORD PTR _params$[ebp]
	fmul	DWORD PTR [eax]
	fadd	DWORD PTR _dR$[ebp]
	fstp	DWORD PTR _dR$[ebp]
	fld	DWORD PTR _dRDir$[ebp]
	fchs
	mov	eax, DWORD PTR _params$[ebp]
	fmul	DWORD PTR [eax+4]
	fadd	DWORD PTR _dR$[ebp+4]
	fstp	DWORD PTR _dR$[ebp+4]
	fld	DWORD PTR _dRDir$[ebp]
	fchs
	mov	eax, DWORD PTR _params$[ebp]
	fmul	DWORD PTR [eax+8]
	fadd	DWORD PTR _dR$[ebp+8]
	fstp	DWORD PTR _dR$[ebp+8]

; 543  : 	dRLen = VecLen(&dR);

	fld	DWORD PTR _dR$[ebp]
	fmul	DWORD PTR _dR$[ebp]
	fld	DWORD PTR _dR$[ebp+4]
	fmul	DWORD PTR _dR$[ebp+4]
	faddp	ST(1), ST(0)
	fld	DWORD PTR _dR$[ebp+8]
	fmul	DWORD PTR _dR$[ebp+8]
	faddp	ST(1), ST(0)
	push	ecx
	fstp	DWORD PTR [esp]
	call	?sqrt@@YAMM@Z				; sqrt
	add	esp, 4
	fstp	DWORD PTR _dRLen$[ebp]

; 544  : 
; 545  : 	if (dRLen > params->RadStart && dRLen < params->RadEnd) {

	mov	eax, DWORD PTR _params$[ebp]
	fld	DWORD PTR _dRLen$[ebp]
	fcomp	DWORD PTR [eax+12]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	$L80969
	mov	eax, DWORD PTR _params$[ebp]
	fld	DWORD PTR _dRLen$[ebp]
	fcomp	DWORD PTR [eax+16]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L80969

; 546  : 
; 547  : 		gradient = DivScalar((dRLen - params->RadStart), (params->RadEnd - params->RadStart));

	mov	eax, DWORD PTR _params$[ebp]
	fld	DWORD PTR _dRLen$[ebp]
	fsub	DWORD PTR [eax+12]
	mov	ecx, DWORD PTR _params$[ebp]
	mov	edx, DWORD PTR _params$[ebp]
	fld	DWORD PTR [ecx+16]
	fsub	DWORD PTR [edx+12]
	fdivp	ST(1), ST(0)
	fstp	DWORD PTR _gradient$[ebp]

; 548  : 		gradient = params->GradStart + MulScalar(gradient, (params->GradEnd - params->GradStart));

	mov	eax, DWORD PTR _params$[ebp]
	mov	ecx, DWORD PTR _params$[ebp]
	fld	DWORD PTR [eax+24]
	fsub	DWORD PTR [ecx+20]
	fmul	DWORD PTR _gradient$[ebp]
	mov	edx, DWORD PTR _params$[ebp]
	fadd	DWORD PTR [edx+20]
	fstp	DWORD PTR _gradient$[ebp]

; 549  : 		//gradient = params->GradStart + ((dRLen - params->RadStart) / (params->RadEnd - params->RadStart)) * (params->GradEnd - params->GradStart);
; 550  : 		//gradient *= TimeStep / dRLen;
; 551  : 		VecMulScalar(&dR, gradient);

	fld	DWORD PTR _dR$[ebp]
	fmul	DWORD PTR _gradient$[ebp]
	fstp	DWORD PTR _dR$[ebp]
	fld	DWORD PTR _dR$[ebp+4]
	fmul	DWORD PTR _gradient$[ebp]
	fstp	DWORD PTR _dR$[ebp+4]
	fld	DWORD PTR _dR$[ebp+8]
	fmul	DWORD PTR _gradient$[ebp]
	fstp	DWORD PTR _dR$[ebp+8]

; 552  : 		
; 553  : 		VecPlusEqVec(imp, &dR);

	mov	eax, DWORD PTR _imp$[ebp]
	fld	DWORD PTR _dR$[ebp]
	fadd	DWORD PTR [eax]
	mov	ecx, DWORD PTR _imp$[ebp]
	fstp	DWORD PTR [ecx]
	mov	eax, DWORD PTR _imp$[ebp]
	fld	DWORD PTR _dR$[ebp+4]
	fadd	DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _imp$[ebp]
	fstp	DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _imp$[ebp]
	fld	DWORD PTR _dR$[ebp+8]
	fadd	DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _imp$[ebp]
	fstp	DWORD PTR [ecx+8]
$L80969:

; 554  : 	}
; 555  : 
; 556  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?CylindricalFieldImpulse@@YAXPAUForceFieldStruct@@PAUFieldDataStruct@@PAUVectorStruct@@2@Z ENDP ; CylindricalFieldImpulse
_TEXT	ENDS
PUBLIC	?AddOrientationField@@YAPAUForceFieldStruct@@JJPAUVectorStruct@@PATMatrixUnion@@PAUBBOX@@00MM@Z ; AddOrientationField
PUBLIC	?OrientationFieldCollTest@@YA_NPAUForceFieldStruct@@PAUVectorStruct@@@Z ; OrientationFieldCollTest
; Function compile flags: /Odt /ZI
;	COMDAT ?AddOrientationField@@YAPAUForceFieldStruct@@JJPAUVectorStruct@@PATMatrixUnion@@PAUBBOX@@00MM@Z
_TEXT	SEGMENT
_params$ = -8						; size = 4
_field$ = -4						; size = 4
_parentID$ = 8						; size = 4
_priority$ = 12						; size = 4
_pos$ = 16						; size = 4
_mat$ = 20						; size = 4
_bBox$ = 24						; size = 4
_size$ = 28						; size = 4
_dir$ = 32						; size = 4
_mag$ = 36						; size = 4
_damping$ = 40						; size = 4
?AddOrientationField@@YAPAUForceFieldStruct@@JJPAUVectorStruct@@PATMatrixUnion@@PAUBBOX@@00MM@Z PROC NEAR ; AddOrientationField, COMDAT

; 568  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi

; 569  : 	FORCE_FIELD *field;
; 570  : 	ORIENTATION_FIELD_PARAMS *params;
; 571  : 	
; 572  : 	field = AddField();

	call	?AddField@@YAPAUForceFieldStruct@@XZ	; AddField
	mov	DWORD PTR _field$[ebp], eax

; 573  : 	params = &field->Params.OrientationParams;

	mov	eax, DWORD PTR _field$[ebp]
	add	eax, 48					; 00000030H
	mov	DWORD PTR _params$[ebp], eax

; 574  : 
; 575  : 	field->Type = FIELD_ORIENTATION;

	mov	eax, DWORD PTR _field$[ebp]
	mov	DWORD PTR [eax+4], 4

; 576  : 	field->ParentID = parentID;

	mov	eax, DWORD PTR _field$[ebp]
	mov	ecx, DWORD PTR _parentID$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 577  : 	field->Priority = priority;

	mov	eax, DWORD PTR _field$[ebp]
	mov	ecx, DWORD PTR _priority$[ebp]
	mov	DWORD PTR [eax+12], ecx

; 578  : 	field->PosPtr = pos;

	mov	eax, DWORD PTR _field$[ebp]
	mov	ecx, DWORD PTR _pos$[ebp]
	mov	DWORD PTR [eax+16], ecx

; 579  : 	field->MatPtr = mat;

	mov	eax, DWORD PTR _field$[ebp]
	mov	ecx, DWORD PTR _mat$[ebp]
	mov	DWORD PTR [eax+20], ecx

; 580  : 	field->FieldCollTest = OrientationFieldCollTest;

	mov	eax, DWORD PTR _field$[ebp]
	mov	DWORD PTR [eax+92], OFFSET FLAT:?OrientationFieldCollTest@@YA_NPAUForceFieldStruct@@PAUVectorStruct@@@Z ; OrientationFieldCollTest

; 581  : 	field->AddFieldImpulse = NULL;

	mov	eax, DWORD PTR _field$[ebp]
	mov	DWORD PTR [eax+96], 0

; 582  : 
; 583  : 	CopyBBox(bBox, &field->BBox);

	mov	eax, DWORD PTR _field$[ebp]
	mov	ecx, DWORD PTR _bBox$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+24], edx
	mov	eax, DWORD PTR _field$[ebp]
	mov	ecx, DWORD PTR _bBox$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+28], edx
	mov	eax, DWORD PTR _field$[ebp]
	mov	ecx, DWORD PTR _bBox$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+32], edx
	mov	eax, DWORD PTR _field$[ebp]
	mov	ecx, DWORD PTR _bBox$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+36], edx
	mov	eax, DWORD PTR _field$[ebp]
	mov	ecx, DWORD PTR _bBox$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+40], edx
	mov	eax, DWORD PTR _field$[ebp]
	mov	ecx, DWORD PTR _bBox$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR [eax+44], edx

; 584  : 	CopyVec(size, &params->Size);

	mov	eax, DWORD PTR _params$[ebp]
	mov	ecx, DWORD PTR _size$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	eax, DWORD PTR _params$[ebp]
	mov	ecx, DWORD PTR _size$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _params$[ebp]
	mov	ecx, DWORD PTR _size$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx

; 585  : 	CopyVec(dir, &params->Dir);

	mov	eax, DWORD PTR _params$[ebp]
	mov	ecx, DWORD PTR _dir$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _params$[ebp]
	mov	ecx, DWORD PTR _dir$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+16], edx
	mov	eax, DWORD PTR _params$[ebp]
	mov	ecx, DWORD PTR _dir$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+20], edx

; 586  : 	params->Mag = mag;

	mov	eax, DWORD PTR _params$[ebp]
	mov	ecx, DWORD PTR _mag$[ebp]
	mov	DWORD PTR [eax+24], ecx

; 587  : 	params->Damping = damping;

	mov	eax, DWORD PTR _params$[ebp]
	mov	ecx, DWORD PTR _damping$[ebp]
	mov	DWORD PTR [eax+28], ecx

; 588  : 
; 589  : 	return field;

	mov	eax, DWORD PTR _field$[ebp]

; 590  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?AddOrientationField@@YAPAUForceFieldStruct@@JJPAUVectorStruct@@PATMatrixUnion@@PAUBBOX@@00MM@Z ENDP ; AddOrientationField
; Function compile flags: /Odt /ZI
_TEXT	ENDS
;	COMDAT ?OrientationFieldCollTest@@YA_NPAUForceFieldStruct@@PAUVectorStruct@@@Z
_TEXT	SEGMENT
tv199 = -88						; size = 4
tv133 = -88						; size = 4
_params$ = -20						; size = 4
_dR$ = -16						; size = 12
_iFace$ = -4						; size = 4
_field$ = 8						; size = 4
_pos$ = 12						; size = 4
?OrientationFieldCollTest@@YA_NPAUForceFieldStruct@@PAUVectorStruct@@@Z PROC NEAR ; OrientationFieldCollTest, COMDAT

; 593  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	ebx
	push	esi
	push	edi

; 594  : 	int iFace;
; 595  : 	VEC dR;
; 596  : 	ORIENTATION_FIELD_PARAMS	*params = &field->Params.OrientationParams;

	mov	eax, DWORD PTR _field$[ebp]
	add	eax, 48					; 00000030H
	mov	DWORD PTR _params$[ebp], eax

; 597  : 
; 598  : 	VecMinusVec(pos, field->PosPtr, &dR);

	mov	eax, DWORD PTR _field$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _pos$[ebp]
	fld	DWORD PTR [edx]
	fsub	DWORD PTR [ecx]
	fstp	DWORD PTR _dR$[ebp]
	mov	eax, DWORD PTR _field$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _pos$[ebp]
	fld	DWORD PTR [edx+4]
	fsub	DWORD PTR [ecx+4]
	fstp	DWORD PTR _dR$[ebp+4]
	mov	eax, DWORD PTR _field$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _pos$[ebp]
	fld	DWORD PTR [edx+8]
	fsub	DWORD PTR [ecx+8]
	fstp	DWORD PTR _dR$[ebp+8]

; 599  : 
; 600  : 	// Bounding box test
; 601  : 	if (!PointInBBox(&dR, &field->BBox)) {

	mov	eax, DWORD PTR _field$[ebp]
	fld	DWORD PTR [eax+24]
	fcomp	DWORD PTR _dR$[ebp]
	fnstsw	ax
	test	ah, 65					; 00000041H
	je	SHORT $L81293
	mov	ecx, DWORD PTR _field$[ebp]
	fld	DWORD PTR [ecx+28]
	fcomp	DWORD PTR _dR$[ebp]
	fnstsw	ax
	test	ah, 5
	jnp	SHORT $L81293
	mov	edx, DWORD PTR _field$[ebp]
	fld	DWORD PTR [edx+40]
	fcomp	DWORD PTR _dR$[ebp+8]
	fnstsw	ax
	test	ah, 65					; 00000041H
	je	SHORT $L81293
	mov	eax, DWORD PTR _field$[ebp]
	fld	DWORD PTR [eax+44]
	fcomp	DWORD PTR _dR$[ebp+8]
	fnstsw	ax
	test	ah, 5
	jnp	SHORT $L81293
	mov	ecx, DWORD PTR _field$[ebp]
	fld	DWORD PTR [ecx+32]
	fcomp	DWORD PTR _dR$[ebp+4]
	fnstsw	ax
	test	ah, 65					; 00000041H
	je	SHORT $L81293
	mov	edx, DWORD PTR _field$[ebp]
	fld	DWORD PTR [edx+36]
	fcomp	DWORD PTR _dR$[ebp+4]
	fnstsw	ax
	test	ah, 5
	jnp	SHORT $L81293
	mov	DWORD PTR tv133[ebp], 1
	jmp	SHORT $L81294
$L81293:
	mov	DWORD PTR tv133[ebp], 0
$L81294:
	cmp	DWORD PTR tv133[ebp], 0
	jne	SHORT $L80997

; 602  : 		return FALSE;

	xor	al, al
	jmp	$L80993
$L80997:

; 603  : 	}
; 604  : 
; 605  : 	// Proper test
; 606  : 	for (iFace = 0; iFace < 3; iFace++) {

	mov	DWORD PTR _iFace$[ebp], 0
	jmp	SHORT $L80998
$L80999:
	mov	eax, DWORD PTR _iFace$[ebp]
	add	eax, 1
	mov	DWORD PTR _iFace$[ebp], eax
$L80998:
	cmp	DWORD PTR _iFace$[ebp], 3
	jge	$L81000

; 607  : 		if (abs(VecDotVec(&dR, &field->MatPtr->mv[iFace])) > params->Size.v[iFace]) {

	mov	eax, DWORD PTR _iFace$[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _field$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	fld	DWORD PTR _dR$[ebp]
	fmul	DWORD PTR [edx+eax]
	mov	eax, DWORD PTR _iFace$[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _field$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	fld	DWORD PTR _dR$[ebp+4]
	fmul	DWORD PTR [edx+eax+4]
	faddp	ST(1), ST(0)
	mov	eax, DWORD PTR _iFace$[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _field$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	fld	DWORD PTR _dR$[ebp+8]
	fmul	DWORD PTR [edx+eax+8]
	faddp	ST(1), ST(0)
	fcomp	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $L81295
	mov	eax, DWORD PTR _iFace$[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _field$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	fld	DWORD PTR _dR$[ebp]
	fmul	DWORD PTR [edx+eax]
	mov	eax, DWORD PTR _iFace$[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _field$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	fld	DWORD PTR _dR$[ebp+4]
	fmul	DWORD PTR [edx+eax+4]
	faddp	ST(1), ST(0)
	mov	eax, DWORD PTR _iFace$[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _field$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	fld	DWORD PTR _dR$[ebp+8]
	fmul	DWORD PTR [edx+eax+8]
	faddp	ST(1), ST(0)
	fstp	DWORD PTR tv199[ebp]
	jmp	SHORT $L81296
$L81295:
	mov	eax, DWORD PTR _iFace$[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _field$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	fld	DWORD PTR _dR$[ebp]
	fmul	DWORD PTR [edx+eax]
	mov	eax, DWORD PTR _iFace$[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _field$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	fld	DWORD PTR _dR$[ebp+4]
	fmul	DWORD PTR [edx+eax+4]
	faddp	ST(1), ST(0)
	mov	eax, DWORD PTR _iFace$[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _field$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	fld	DWORD PTR _dR$[ebp+8]
	fmul	DWORD PTR [edx+eax+8]
	faddp	ST(1), ST(0)
	fchs
	fstp	DWORD PTR tv199[ebp]
$L81296:
	mov	eax, DWORD PTR _iFace$[ebp]
	mov	ecx, DWORD PTR _params$[ebp]
	fld	DWORD PTR tv199[ebp]
	fcomp	DWORD PTR [ecx+eax*4]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $L81001

; 608  : 			return FALSE;

	xor	al, al
	jmp	SHORT $L80993
$L81001:

; 609  : 		}
; 610  : 	}

	jmp	$L80999
$L81000:

; 611  : 
; 612  : 	return TRUE;

	mov	al, 1
$L80993:

; 613  : 
; 614  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?OrientationFieldCollTest@@YA_NPAUForceFieldStruct@@PAUVectorStruct@@@Z ENDP ; OrientationFieldCollTest
_TEXT	ENDS
PUBLIC	__real@3f800000
PUBLIC	?OrientationFieldImpulse@@YAXPAUForceFieldStruct@@PAUFieldDataStruct@@PAUVectorStruct@@2@Z ; OrientationFieldImpulse
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
; Function compile flags: /Odt /ZI
CONST	ENDS
;	COMDAT ?OrientationFieldImpulse@@YAXPAUForceFieldStruct@@PAUFieldDataStruct@@PAUVectorStruct@@2@Z
_TEXT	SEGMENT
_params$ = -20						; size = 4
_scale$ = -16						; size = 4
_torque$ = -12						; size = 12
_field$ = 8						; size = 4
_data$ = 12						; size = 4
_imp$ = 16						; size = 4
_angImp$ = 20						; size = 4
?OrientationFieldImpulse@@YAXPAUForceFieldStruct@@PAUFieldDataStruct@@PAUVectorStruct@@2@Z PROC NEAR ; OrientationFieldImpulse, COMDAT

; 617  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi

; 618  : 	VEC	torque;
; 619  : 	REAL	scale;
; 620  : 	ORIENTATION_FIELD_PARAMS *params = &field->Params.OrientationParams;

	mov	eax, DWORD PTR _field$[ebp]
	add	eax, 48					; 00000030H
	mov	DWORD PTR _params$[ebp], eax

; 621  : 
; 622  : 	VecCrossVec(&params->Dir, &data->Mat->mv[U], &torque);

	mov	eax, DWORD PTR _data$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _params$[ebp]
	fld	DWORD PTR [edx+16]
	fmul	DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _data$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _params$[ebp]
	fld	DWORD PTR [edx+20]
	fmul	DWORD PTR [ecx+16]
	fsubp	ST(1), ST(0)
	fstp	DWORD PTR _torque$[ebp]
	mov	eax, DWORD PTR _data$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _params$[ebp]
	fld	DWORD PTR [edx+20]
	fmul	DWORD PTR [ecx+12]
	mov	eax, DWORD PTR _data$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _params$[ebp]
	fld	DWORD PTR [edx+12]
	fmul	DWORD PTR [ecx+20]
	fsubp	ST(1), ST(0)
	fstp	DWORD PTR _torque$[ebp+4]
	mov	eax, DWORD PTR _data$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _params$[ebp]
	fld	DWORD PTR [edx+12]
	fmul	DWORD PTR [ecx+16]
	mov	eax, DWORD PTR _data$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _params$[ebp]
	fld	DWORD PTR [edx+16]
	fmul	DWORD PTR [ecx+12]
	fsubp	ST(1), ST(0)
	fstp	DWORD PTR _torque$[ebp+8]

; 623  : 	scale = (ONE -  MulScalar(params->Damping, VecDotVec(&torque, data->AngVel)));

	mov	eax, DWORD PTR _params$[ebp]
	fld	DWORD PTR [eax+28]
	mov	ecx, DWORD PTR _data$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	fld	DWORD PTR _torque$[ebp]
	fmul	DWORD PTR [edx]
	mov	eax, DWORD PTR _data$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	fld	DWORD PTR _torque$[ebp+4]
	fmul	DWORD PTR [ecx+4]
	faddp	ST(1), ST(0)
	mov	edx, DWORD PTR _data$[ebp]
	mov	eax, DWORD PTR [edx+16]
	fld	DWORD PTR _torque$[ebp+8]
	fmul	DWORD PTR [eax+8]
	faddp	ST(1), ST(0)
	fmulp	ST(1), ST(0)
	fsubr	DWORD PTR __real@3f800000
	fstp	DWORD PTR _scale$[ebp]

; 624  : 	scale = MulScalar(TimeStep, MulScalar(params->Mag, scale));

	mov	eax, DWORD PTR _params$[ebp]
	fld	DWORD PTR [eax+24]
	fmul	DWORD PTR _scale$[ebp]
	fmul	DWORD PTR ?TimeStep@@3MA		; TimeStep
	fstp	DWORD PTR _scale$[ebp]

; 625  : 	VecMulScalar(&torque, scale);

	fld	DWORD PTR _torque$[ebp]
	fmul	DWORD PTR _scale$[ebp]
	fstp	DWORD PTR _torque$[ebp]
	fld	DWORD PTR _torque$[ebp+4]
	fmul	DWORD PTR _scale$[ebp]
	fstp	DWORD PTR _torque$[ebp+4]
	fld	DWORD PTR _torque$[ebp+8]
	fmul	DWORD PTR _scale$[ebp]
	fstp	DWORD PTR _torque$[ebp+8]

; 626  : 
; 627  : 	VecPlusEqVec(angImp, &torque);

	mov	eax, DWORD PTR _angImp$[ebp]
	fld	DWORD PTR _torque$[ebp]
	fadd	DWORD PTR [eax]
	mov	ecx, DWORD PTR _angImp$[ebp]
	fstp	DWORD PTR [ecx]
	mov	eax, DWORD PTR _angImp$[ebp]
	fld	DWORD PTR _torque$[ebp+4]
	fadd	DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _angImp$[ebp]
	fstp	DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _angImp$[ebp]
	fld	DWORD PTR _torque$[ebp+8]
	fadd	DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _angImp$[ebp]
	fstp	DWORD PTR [ecx+8]

; 628  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?OrientationFieldImpulse@@YAXPAUForceFieldStruct@@PAUFieldDataStruct@@PAUVectorStruct@@2@Z ENDP ; OrientationFieldImpulse
_TEXT	ENDS
PUBLIC	?AddVortexField@@YAPAUForceFieldStruct@@JJPAUVectorStruct@@PATMatrixUnion@@PAUBBOX@@00MMM@Z ; AddVortexField
PUBLIC	?VortexFieldCollTest@@YA_NPAUForceFieldStruct@@PAUVectorStruct@@@Z ; VortexFieldCollTest
PUBLIC	?VortexFieldImpulse@@YAXPAUForceFieldStruct@@PAUFieldDataStruct@@PAUVectorStruct@@2@Z ; VortexFieldImpulse
; Function compile flags: /Odt /ZI
;	COMDAT ?AddVortexField@@YAPAUForceFieldStruct@@JJPAUVectorStruct@@PATMatrixUnion@@PAUBBOX@@00MMM@Z
_TEXT	SEGMENT
_params$ = -8						; size = 4
_field$ = -4						; size = 4
_parentID$ = 8						; size = 4
_priority$ = 12						; size = 4
_pos$ = 16						; size = 4
_mat$ = 20						; size = 4
_bBox$ = 24						; size = 4
_size$ = 28						; size = 4
_dir$ = 32						; size = 4
_mag$ = 36						; size = 4
_rMin$ = 40						; size = 4
_rMax$ = 44						; size = 4
?AddVortexField@@YAPAUForceFieldStruct@@JJPAUVectorStruct@@PATMatrixUnion@@PAUBBOX@@00MMM@Z PROC NEAR ; AddVortexField, COMDAT

; 640  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi

; 641  : 	FORCE_FIELD *field;
; 642  : 	VORTEX_FIELD_PARAMS *params;
; 643  : 	
; 644  : 	field = AddField();

	call	?AddField@@YAPAUForceFieldStruct@@XZ	; AddField
	mov	DWORD PTR _field$[ebp], eax

; 645  : 	params = &field->Params.VortexParams;

	mov	eax, DWORD PTR _field$[ebp]
	add	eax, 48					; 00000030H
	mov	DWORD PTR _params$[ebp], eax

; 646  : 
; 647  : 	field->Type = FIELD_VORTEX;

	mov	eax, DWORD PTR _field$[ebp]
	mov	DWORD PTR [eax+4], 8

; 648  : 	field->ParentID = parentID;

	mov	eax, DWORD PTR _field$[ebp]
	mov	ecx, DWORD PTR _parentID$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 649  : 	field->Priority = priority;

	mov	eax, DWORD PTR _field$[ebp]
	mov	ecx, DWORD PTR _priority$[ebp]
	mov	DWORD PTR [eax+12], ecx

; 650  : 	field->PosPtr = pos;

	mov	eax, DWORD PTR _field$[ebp]
	mov	ecx, DWORD PTR _pos$[ebp]
	mov	DWORD PTR [eax+16], ecx

; 651  : 	field->MatPtr = mat;

	mov	eax, DWORD PTR _field$[ebp]
	mov	ecx, DWORD PTR _mat$[ebp]
	mov	DWORD PTR [eax+20], ecx

; 652  : 	field->FieldCollTest = VortexFieldCollTest;

	mov	eax, DWORD PTR _field$[ebp]
	mov	DWORD PTR [eax+92], OFFSET FLAT:?VortexFieldCollTest@@YA_NPAUForceFieldStruct@@PAUVectorStruct@@@Z ; VortexFieldCollTest

; 653  : 	field->AddFieldImpulse = VortexFieldImpulse;

	mov	eax, DWORD PTR _field$[ebp]
	mov	DWORD PTR [eax+96], OFFSET FLAT:?VortexFieldImpulse@@YAXPAUForceFieldStruct@@PAUFieldDataStruct@@PAUVectorStruct@@2@Z ; VortexFieldImpulse

; 654  : 
; 655  : 	CopyBBox(bBox, &field->BBox);

	mov	eax, DWORD PTR _field$[ebp]
	mov	ecx, DWORD PTR _bBox$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+24], edx
	mov	eax, DWORD PTR _field$[ebp]
	mov	ecx, DWORD PTR _bBox$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+28], edx
	mov	eax, DWORD PTR _field$[ebp]
	mov	ecx, DWORD PTR _bBox$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+32], edx
	mov	eax, DWORD PTR _field$[ebp]
	mov	ecx, DWORD PTR _bBox$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+36], edx
	mov	eax, DWORD PTR _field$[ebp]
	mov	ecx, DWORD PTR _bBox$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+40], edx
	mov	eax, DWORD PTR _field$[ebp]
	mov	ecx, DWORD PTR _bBox$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR [eax+44], edx

; 656  : 	CopyVec(size, &params->Size);

	mov	eax, DWORD PTR _params$[ebp]
	mov	ecx, DWORD PTR _size$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	eax, DWORD PTR _params$[ebp]
	mov	ecx, DWORD PTR _size$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _params$[ebp]
	mov	ecx, DWORD PTR _size$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx

; 657  : 	CopyVec(dir, &params->Dir);

	mov	eax, DWORD PTR _params$[ebp]
	mov	ecx, DWORD PTR _dir$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _params$[ebp]
	mov	ecx, DWORD PTR _dir$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+16], edx
	mov	eax, DWORD PTR _params$[ebp]
	mov	ecx, DWORD PTR _dir$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+20], edx

; 658  : 	params->Mag = mag;

	mov	eax, DWORD PTR _params$[ebp]
	mov	ecx, DWORD PTR _mag$[ebp]
	mov	DWORD PTR [eax+24], ecx

; 659  : 	params->RMin = rMin;

	mov	eax, DWORD PTR _params$[ebp]
	mov	ecx, DWORD PTR _rMin$[ebp]
	mov	DWORD PTR [eax+28], ecx

; 660  : 	params->RMax = rMax;

	mov	eax, DWORD PTR _params$[ebp]
	mov	ecx, DWORD PTR _rMax$[ebp]
	mov	DWORD PTR [eax+32], ecx

; 661  : 
; 662  : 	return field;

	mov	eax, DWORD PTR _field$[ebp]

; 663  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?AddVortexField@@YAPAUForceFieldStruct@@JJPAUVectorStruct@@PATMatrixUnion@@PAUBBOX@@00MMM@Z ENDP ; AddVortexField
; Function compile flags: /Odt /ZI
_TEXT	ENDS
;	COMDAT ?VortexFieldCollTest@@YA_NPAUForceFieldStruct@@PAUVectorStruct@@@Z
_TEXT	SEGMENT
tv199 = -88						; size = 4
tv133 = -88						; size = 4
_params$ = -20						; size = 4
_dR$ = -16						; size = 12
_iFace$ = -4						; size = 4
_field$ = 8						; size = 4
_pos$ = 12						; size = 4
?VortexFieldCollTest@@YA_NPAUForceFieldStruct@@PAUVectorStruct@@@Z PROC NEAR ; VortexFieldCollTest, COMDAT

; 666  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	ebx
	push	esi
	push	edi

; 667  : 	int iFace;
; 668  : 	VEC dR;
; 669  : 	ORIENTATION_FIELD_PARAMS	*params = &field->Params.OrientationParams;

	mov	eax, DWORD PTR _field$[ebp]
	add	eax, 48					; 00000030H
	mov	DWORD PTR _params$[ebp], eax

; 670  : 
; 671  : 	VecMinusVec(pos, field->PosPtr, &dR);

	mov	eax, DWORD PTR _field$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _pos$[ebp]
	fld	DWORD PTR [edx]
	fsub	DWORD PTR [ecx]
	fstp	DWORD PTR _dR$[ebp]
	mov	eax, DWORD PTR _field$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _pos$[ebp]
	fld	DWORD PTR [edx+4]
	fsub	DWORD PTR [ecx+4]
	fstp	DWORD PTR _dR$[ebp+4]
	mov	eax, DWORD PTR _field$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _pos$[ebp]
	fld	DWORD PTR [edx+8]
	fsub	DWORD PTR [ecx+8]
	fstp	DWORD PTR _dR$[ebp+8]

; 672  : 
; 673  : 	// Bounding box test
; 674  : 	if (!PointInBBox(&dR, &field->BBox)) {

	mov	eax, DWORD PTR _field$[ebp]
	fld	DWORD PTR [eax+24]
	fcomp	DWORD PTR _dR$[ebp]
	fnstsw	ax
	test	ah, 65					; 00000041H
	je	SHORT $L81305
	mov	ecx, DWORD PTR _field$[ebp]
	fld	DWORD PTR [ecx+28]
	fcomp	DWORD PTR _dR$[ebp]
	fnstsw	ax
	test	ah, 5
	jnp	SHORT $L81305
	mov	edx, DWORD PTR _field$[ebp]
	fld	DWORD PTR [edx+40]
	fcomp	DWORD PTR _dR$[ebp+8]
	fnstsw	ax
	test	ah, 65					; 00000041H
	je	SHORT $L81305
	mov	eax, DWORD PTR _field$[ebp]
	fld	DWORD PTR [eax+44]
	fcomp	DWORD PTR _dR$[ebp+8]
	fnstsw	ax
	test	ah, 5
	jnp	SHORT $L81305
	mov	ecx, DWORD PTR _field$[ebp]
	fld	DWORD PTR [ecx+32]
	fcomp	DWORD PTR _dR$[ebp+4]
	fnstsw	ax
	test	ah, 65					; 00000041H
	je	SHORT $L81305
	mov	edx, DWORD PTR _field$[ebp]
	fld	DWORD PTR [edx+36]
	fcomp	DWORD PTR _dR$[ebp+4]
	fnstsw	ax
	test	ah, 5
	jnp	SHORT $L81305
	mov	DWORD PTR tv133[ebp], 1
	jmp	SHORT $L81306
$L81305:
	mov	DWORD PTR tv133[ebp], 0
$L81306:
	cmp	DWORD PTR tv133[ebp], 0
	jne	SHORT $L81032

; 675  : 		return FALSE;

	xor	al, al
	jmp	$L81028
$L81032:

; 676  : 	}
; 677  : 
; 678  : 	// Proper test
; 679  : 	for (iFace = 0; iFace < 3; iFace++) {

	mov	DWORD PTR _iFace$[ebp], 0
	jmp	SHORT $L81033
$L81034:
	mov	eax, DWORD PTR _iFace$[ebp]
	add	eax, 1
	mov	DWORD PTR _iFace$[ebp], eax
$L81033:
	cmp	DWORD PTR _iFace$[ebp], 3
	jge	$L81035

; 680  : 		if (abs(VecDotVec(&dR, &field->MatPtr->mv[iFace])) > params->Size.v[iFace]) {

	mov	eax, DWORD PTR _iFace$[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _field$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	fld	DWORD PTR _dR$[ebp]
	fmul	DWORD PTR [edx+eax]
	mov	eax, DWORD PTR _iFace$[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _field$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	fld	DWORD PTR _dR$[ebp+4]
	fmul	DWORD PTR [edx+eax+4]
	faddp	ST(1), ST(0)
	mov	eax, DWORD PTR _iFace$[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _field$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	fld	DWORD PTR _dR$[ebp+8]
	fmul	DWORD PTR [edx+eax+8]
	faddp	ST(1), ST(0)
	fcomp	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $L81307
	mov	eax, DWORD PTR _iFace$[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _field$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	fld	DWORD PTR _dR$[ebp]
	fmul	DWORD PTR [edx+eax]
	mov	eax, DWORD PTR _iFace$[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _field$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	fld	DWORD PTR _dR$[ebp+4]
	fmul	DWORD PTR [edx+eax+4]
	faddp	ST(1), ST(0)
	mov	eax, DWORD PTR _iFace$[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _field$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	fld	DWORD PTR _dR$[ebp+8]
	fmul	DWORD PTR [edx+eax+8]
	faddp	ST(1), ST(0)
	fstp	DWORD PTR tv199[ebp]
	jmp	SHORT $L81308
$L81307:
	mov	eax, DWORD PTR _iFace$[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _field$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	fld	DWORD PTR _dR$[ebp]
	fmul	DWORD PTR [edx+eax]
	mov	eax, DWORD PTR _iFace$[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _field$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	fld	DWORD PTR _dR$[ebp+4]
	fmul	DWORD PTR [edx+eax+4]
	faddp	ST(1), ST(0)
	mov	eax, DWORD PTR _iFace$[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _field$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	fld	DWORD PTR _dR$[ebp+8]
	fmul	DWORD PTR [edx+eax+8]
	faddp	ST(1), ST(0)
	fchs
	fstp	DWORD PTR tv199[ebp]
$L81308:
	mov	eax, DWORD PTR _iFace$[ebp]
	mov	ecx, DWORD PTR _params$[ebp]
	fld	DWORD PTR tv199[ebp]
	fcomp	DWORD PTR [ecx+eax*4]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $L81036

; 681  : 			return FALSE;

	xor	al, al
	jmp	SHORT $L81028
$L81036:

; 682  : 		}
; 683  : 	}

	jmp	$L81034
$L81035:

; 684  : 
; 685  : 	return TRUE;

	mov	al, 1
$L81028:

; 686  : 
; 687  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?VortexFieldCollTest@@YA_NPAUForceFieldStruct@@PAUVectorStruct@@@Z ENDP ; VortexFieldCollTest
; Function compile flags: /Odt /ZI
_TEXT	ENDS
;	COMDAT ?VortexFieldImpulse@@YAXPAUForceFieldStruct@@PAUFieldDataStruct@@PAUVectorStruct@@2@Z
_TEXT	SEGMENT
_params$ = -36						; size = 4
_perpLen$ = -32						; size = 4
_scale$ = -28						; size = 4
_impulse$ = -24						; size = 12
_dR$ = -12						; size = 12
_field$ = 8						; size = 4
_data$ = 12						; size = 4
_imp$ = 16						; size = 4
_angImp$ = 20						; size = 4
?VortexFieldImpulse@@YAXPAUForceFieldStruct@@PAUFieldDataStruct@@PAUVectorStruct@@2@Z PROC NEAR ; VortexFieldImpulse, COMDAT

; 690  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 100				; 00000064H
	push	ebx
	push	esi
	push	edi

; 691  : 	VEC	dR;
; 692  : 	VEC	impulse;
; 693  : 	REAL	scale, perpLen;
; 694  : 	VORTEX_FIELD_PARAMS *params = &field->Params.VortexParams;

	mov	eax, DWORD PTR _field$[ebp]
	add	eax, 48					; 00000030H
	mov	DWORD PTR _params$[ebp], eax

; 695  : 
; 696  : 	VecMinusVec(data->Pos, field->PosPtr, &dR);

	mov	eax, DWORD PTR _data$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _field$[ebp]
	mov	eax, DWORD PTR [edx+16]
	fld	DWORD PTR [ecx]
	fsub	DWORD PTR [eax]
	fstp	DWORD PTR _dR$[ebp]
	mov	eax, DWORD PTR _data$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _field$[ebp]
	mov	eax, DWORD PTR [edx+16]
	fld	DWORD PTR [ecx+4]
	fsub	DWORD PTR [eax+4]
	fstp	DWORD PTR _dR$[ebp+4]
	mov	eax, DWORD PTR _data$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _field$[ebp]
	mov	eax, DWORD PTR [edx+16]
	fld	DWORD PTR [ecx+8]
	fsub	DWORD PTR [eax+8]
	fstp	DWORD PTR _dR$[ebp+8]

; 697  : 	VecCrossVec(&dR, &params->Dir, &impulse);

	mov	eax, DWORD PTR _params$[ebp]
	fld	DWORD PTR _dR$[ebp+4]
	fmul	DWORD PTR [eax+20]
	mov	ecx, DWORD PTR _params$[ebp]
	fld	DWORD PTR _dR$[ebp+8]
	fmul	DWORD PTR [ecx+16]
	fsubp	ST(1), ST(0)
	fstp	DWORD PTR _impulse$[ebp]
	mov	eax, DWORD PTR _params$[ebp]
	fld	DWORD PTR _dR$[ebp+8]
	fmul	DWORD PTR [eax+12]
	mov	ecx, DWORD PTR _params$[ebp]
	fld	DWORD PTR _dR$[ebp]
	fmul	DWORD PTR [ecx+20]
	fsubp	ST(1), ST(0)
	fstp	DWORD PTR _impulse$[ebp+4]
	mov	eax, DWORD PTR _params$[ebp]
	fld	DWORD PTR _dR$[ebp]
	fmul	DWORD PTR [eax+16]
	mov	ecx, DWORD PTR _params$[ebp]
	fld	DWORD PTR _dR$[ebp+4]
	fmul	DWORD PTR [ecx+12]
	fsubp	ST(1), ST(0)
	fstp	DWORD PTR _impulse$[ebp+8]

; 698  : 	perpLen = VecLen(&impulse);

	fld	DWORD PTR _impulse$[ebp]
	fmul	DWORD PTR _impulse$[ebp]
	fld	DWORD PTR _impulse$[ebp+4]
	fmul	DWORD PTR _impulse$[ebp+4]
	faddp	ST(1), ST(0)
	fld	DWORD PTR _impulse$[ebp+8]
	fmul	DWORD PTR _impulse$[ebp+8]
	faddp	ST(1), ST(0)
	push	ecx
	fstp	DWORD PTR [esp]
	call	?sqrt@@YAMM@Z				; sqrt
	add	esp, 4
	fstp	DWORD PTR _perpLen$[ebp]

; 699  : 
; 700  : 	if ((perpLen > params->RMin) && (perpLen < params->RMax)) {

	mov	eax, DWORD PTR _params$[ebp]
	fld	DWORD PTR _perpLen$[ebp]
	fcomp	DWORD PTR [eax+28]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	$L81042
	mov	eax, DWORD PTR _params$[ebp]
	fld	DWORD PTR _perpLen$[ebp]
	fcomp	DWORD PTR [eax+32]
	fnstsw	ax
	test	ah, 5
	jp	$L81042

; 701  : 
; 702  : 		scale = params->Mag - DivScalar(VecDotVec(data->Vel, &impulse), (perpLen));

	mov	eax, DWORD PTR _data$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	fld	DWORD PTR _impulse$[ebp]
	fmul	DWORD PTR [ecx]
	mov	edx, DWORD PTR _data$[ebp]
	mov	eax, DWORD PTR [edx+12]
	fld	DWORD PTR _impulse$[ebp+4]
	fmul	DWORD PTR [eax+4]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR _data$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	fld	DWORD PTR _impulse$[ebp+8]
	fmul	DWORD PTR [edx+8]
	faddp	ST(1), ST(0)
	fdiv	DWORD PTR _perpLen$[ebp]
	mov	eax, DWORD PTR _params$[ebp]
	fsubr	DWORD PTR [eax+24]
	fstp	DWORD PTR _scale$[ebp]

; 703  : 		scale = DivScalar(MulScalar(scale, TimeStep), perpLen);

	fld	DWORD PTR _scale$[ebp]
	fmul	DWORD PTR ?TimeStep@@3MA		; TimeStep
	fdiv	DWORD PTR _perpLen$[ebp]
	fstp	DWORD PTR _scale$[ebp]

; 704  : 		VecMulScalar(&impulse, scale);

	fld	DWORD PTR _impulse$[ebp]
	fmul	DWORD PTR _scale$[ebp]
	fstp	DWORD PTR _impulse$[ebp]
	fld	DWORD PTR _impulse$[ebp+4]
	fmul	DWORD PTR _scale$[ebp]
	fstp	DWORD PTR _impulse$[ebp+4]
	fld	DWORD PTR _impulse$[ebp+8]
	fmul	DWORD PTR _scale$[ebp]
	fstp	DWORD PTR _impulse$[ebp+8]

; 705  : 
; 706  : 		VecPlusEqVec(imp, &impulse);

	mov	eax, DWORD PTR _imp$[ebp]
	fld	DWORD PTR _impulse$[ebp]
	fadd	DWORD PTR [eax]
	mov	ecx, DWORD PTR _imp$[ebp]
	fstp	DWORD PTR [ecx]
	mov	eax, DWORD PTR _imp$[ebp]
	fld	DWORD PTR _impulse$[ebp+4]
	fadd	DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _imp$[ebp]
	fstp	DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _imp$[ebp]
	fld	DWORD PTR _impulse$[ebp+8]
	fadd	DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _imp$[ebp]
	fstp	DWORD PTR [ecx+8]
$L81042:

; 707  : 	}
; 708  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?VortexFieldImpulse@@YAXPAUForceFieldStruct@@PAUFieldDataStruct@@PAUVectorStruct@@2@Z ENDP ; VortexFieldImpulse
_TEXT	ENDS
PUBLIC	?AllFieldImpulses@@YAXPAUFieldDataStruct@@PAUVectorStruct@@1@Z ; AllFieldImpulses
; Function compile flags: /Odt /ZI
;	COMDAT ?AllFieldImpulses@@YAXPAUFieldDataStruct@@PAUVectorStruct@@1@Z
_TEXT	SEGMENT
_field$ = -4						; size = 4
_data$ = 8						; size = 4
_imp$ = 12						; size = 4
_angImp$ = 16						; size = 4
?AllFieldImpulses@@YAXPAUFieldDataStruct@@PAUVectorStruct@@1@Z PROC NEAR ; AllFieldImpulses, COMDAT

; 720  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 721  : 	FORCE_FIELD *field;
; 722  : 
; 723  : 	SetVecZero(imp);

	mov	eax, DWORD PTR _imp$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _imp$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	eax, DWORD PTR _imp$[ebp]
	mov	DWORD PTR [eax+8], 0

; 724  : 	SetVecZero(angImp);

	mov	eax, DWORD PTR _angImp$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _angImp$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	eax, DWORD PTR _angImp$[ebp]
	mov	DWORD PTR [eax+8], 0

; 725  : 
; 726  : 	for (field = FirstField(); field != NULL; field = NextField(field)) {

	call	?FirstField@@YAPAUForceFieldStruct@@XZ	; FirstField
	mov	DWORD PTR _field$[ebp], eax
	jmp	SHORT $L81056
$L81057:
	mov	eax, DWORD PTR _field$[ebp]
	push	eax
	call	?NextField@@YAPAUForceFieldStruct@@PAU1@@Z ; NextField
	add	esp, 4
	mov	DWORD PTR _field$[ebp], eax
$L81056:
	cmp	DWORD PTR _field$[ebp], 0
	je	SHORT $L81054

; 727  : 
; 728  : 		// do not add impulses to the owner of the field
; 729  : 		if ((field->ParentID != FIELD_PARENT_NONE) && (field->ParentID == data->ObjectID)) continue;

	mov	eax, DWORD PTR _field$[ebp]
	cmp	DWORD PTR [eax+8], -1
	je	SHORT $L81059
	mov	eax, DWORD PTR _field$[ebp]
	mov	ecx, DWORD PTR _data$[ebp]
	mov	edx, DWORD PTR [eax+8]
	cmp	edx, DWORD PTR [ecx]
	jne	SHORT $L81059
	jmp	SHORT $L81057
$L81059:

; 730  : 
; 731  : 		// ignore field if object priority says so
; 732  : 		if (!FieldPriorityTest(field->Priority, data->Priority)) continue;

	mov	eax, DWORD PTR _data$[ebp]
	mov	ecx, DWORD PTR _field$[ebp]
	mov	edx, DWORD PTR [eax+4]
	cmp	edx, DWORD PTR [ecx+12]
	jge	SHORT $L81060
	jmp	SHORT $L81057
$L81060:

; 733  : 
; 734  : 		// Calculate the impulses
; 735  : 		if (field->AddFieldImpulse != NULL) {

	mov	eax, DWORD PTR _field$[ebp]
	cmp	DWORD PTR [eax+96], 0
	je	SHORT $L81061

; 736  : 			if ((*field->FieldCollTest)(field, data->Pos)) {

	mov	eax, DWORD PTR _data$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _field$[ebp]
	push	edx
	mov	eax, DWORD PTR _field$[ebp]
	call	DWORD PTR [eax+92]
	add	esp, 8
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $L81061

; 737  : 				(*field->AddFieldImpulse)(field, data, imp, angImp);

	mov	eax, DWORD PTR _angImp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _imp$[ebp]
	push	ecx
	mov	edx, DWORD PTR _data$[ebp]
	push	edx
	mov	eax, DWORD PTR _field$[ebp]
	push	eax
	mov	ecx, DWORD PTR _field$[ebp]
	call	DWORD PTR [ecx+96]
	add	esp, 16					; 00000010H
$L81061:

; 738  : 			}
; 739  : 		} 
; 740  : 
; 741  : 	}

	jmp	SHORT $L81057
$L81054:

; 742  : 
; 743  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?AllFieldImpulses@@YAXPAUFieldDataStruct@@PAUVectorStruct@@1@Z ENDP ; AllFieldImpulses
_TEXT	ENDS
PUBLIC	?AddLocalField@@YAPAUForceFieldStruct@@JJPAUVectorStruct@@PATMatrixUnion@@PAUBBOX@@00MM@Z ; AddLocalField
PUBLIC	?LocalFieldCollTest@@YA_NPAUForceFieldStruct@@PAUVectorStruct@@@Z ; LocalFieldCollTest
PUBLIC	?LocalFieldImpulse@@YAXPAUForceFieldStruct@@PAUFieldDataStruct@@PAUVectorStruct@@2@Z ; LocalFieldImpulse
; Function compile flags: /Odt /ZI
;	COMDAT ?AddLocalField@@YAPAUForceFieldStruct@@JJPAUVectorStruct@@PATMatrixUnion@@PAUBBOX@@00MM@Z
_TEXT	SEGMENT
_params$ = -8						; size = 4
_field$ = -4						; size = 4
_parentID$ = 8						; size = 4
_priority$ = 12						; size = 4
_pos$ = 16						; size = 4
_mat$ = 20						; size = 4
_bBox$ = 24						; size = 4
_size$ = 28						; size = 4
_dir$ = 32						; size = 4
_mag$ = 36						; size = 4
_damping$ = 40						; size = 4
?AddLocalField@@YAPAUForceFieldStruct@@JJPAUVectorStruct@@PATMatrixUnion@@PAUBBOX@@00MM@Z PROC NEAR ; AddLocalField, COMDAT

; 753  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi

; 754  : 	FORCE_FIELD *field;
; 755  : 	LOCAL_FIELD_PARAMS *params;
; 756  : 	
; 757  : 	field = AddField();

	call	?AddField@@YAPAUForceFieldStruct@@XZ	; AddField
	mov	DWORD PTR _field$[ebp], eax

; 758  : 	params = &field->Params.LocalParams;

	mov	eax, DWORD PTR _field$[ebp]
	add	eax, 48					; 00000030H
	mov	DWORD PTR _params$[ebp], eax

; 759  : 
; 760  : 	field->Type = FIELD_LOCAL;

	mov	eax, DWORD PTR _field$[ebp]
	mov	DWORD PTR [eax+4], 16			; 00000010H

; 761  : 	field->ParentID = parentID;

	mov	eax, DWORD PTR _field$[ebp]
	mov	ecx, DWORD PTR _parentID$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 762  : 	field->Priority = priority;

	mov	eax, DWORD PTR _field$[ebp]
	mov	ecx, DWORD PTR _priority$[ebp]
	mov	DWORD PTR [eax+12], ecx

; 763  : 	field->PosPtr = pos;

	mov	eax, DWORD PTR _field$[ebp]
	mov	ecx, DWORD PTR _pos$[ebp]
	mov	DWORD PTR [eax+16], ecx

; 764  : 	field->MatPtr = mat;

	mov	eax, DWORD PTR _field$[ebp]
	mov	ecx, DWORD PTR _mat$[ebp]
	mov	DWORD PTR [eax+20], ecx

; 765  : 	field->FieldCollTest = LocalFieldCollTest;

	mov	eax, DWORD PTR _field$[ebp]
	mov	DWORD PTR [eax+92], OFFSET FLAT:?LocalFieldCollTest@@YA_NPAUForceFieldStruct@@PAUVectorStruct@@@Z ; LocalFieldCollTest

; 766  : 	field->AddFieldImpulse = LocalFieldImpulse;

	mov	eax, DWORD PTR _field$[ebp]
	mov	DWORD PTR [eax+96], OFFSET FLAT:?LocalFieldImpulse@@YAXPAUForceFieldStruct@@PAUFieldDataStruct@@PAUVectorStruct@@2@Z ; LocalFieldImpulse

; 767  : 
; 768  : 	CopyBBox(bBox, &field->BBox);

	mov	eax, DWORD PTR _field$[ebp]
	mov	ecx, DWORD PTR _bBox$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+24], edx
	mov	eax, DWORD PTR _field$[ebp]
	mov	ecx, DWORD PTR _bBox$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+28], edx
	mov	eax, DWORD PTR _field$[ebp]
	mov	ecx, DWORD PTR _bBox$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+32], edx
	mov	eax, DWORD PTR _field$[ebp]
	mov	ecx, DWORD PTR _bBox$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+36], edx
	mov	eax, DWORD PTR _field$[ebp]
	mov	ecx, DWORD PTR _bBox$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+40], edx
	mov	eax, DWORD PTR _field$[ebp]
	mov	ecx, DWORD PTR _bBox$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR [eax+44], edx

; 769  : 	CopyVec(size, &params->Size);

	mov	eax, DWORD PTR _params$[ebp]
	mov	ecx, DWORD PTR _size$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	eax, DWORD PTR _params$[ebp]
	mov	ecx, DWORD PTR _size$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _params$[ebp]
	mov	ecx, DWORD PTR _size$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx

; 770  : 	params->DirPtr = dir;

	mov	eax, DWORD PTR _params$[ebp]
	mov	ecx, DWORD PTR _dir$[ebp]
	mov	DWORD PTR [eax+12], ecx

; 771  : 	params->Mag = mag;

	mov	eax, DWORD PTR _params$[ebp]
	mov	ecx, DWORD PTR _mag$[ebp]
	mov	DWORD PTR [eax+16], ecx

; 772  : 	params->Damping = damping;

	mov	eax, DWORD PTR _params$[ebp]
	mov	ecx, DWORD PTR _damping$[ebp]
	mov	DWORD PTR [eax+20], ecx

; 773  : 
; 774  : 	return field;

	mov	eax, DWORD PTR _field$[ebp]

; 775  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?AddLocalField@@YAPAUForceFieldStruct@@JJPAUVectorStruct@@PATMatrixUnion@@PAUBBOX@@00MM@Z ENDP ; AddLocalField
; Function compile flags: /Odt /ZI
_TEXT	ENDS
;	COMDAT ?LocalFieldCollTest@@YA_NPAUForceFieldStruct@@PAUVectorStruct@@@Z
_TEXT	SEGMENT
tv199 = -88						; size = 4
tv133 = -88						; size = 4
_params$ = -20						; size = 4
_dR$ = -16						; size = 12
_iFace$ = -4						; size = 4
_field$ = 8						; size = 4
_pos$ = 12						; size = 4
?LocalFieldCollTest@@YA_NPAUForceFieldStruct@@PAUVectorStruct@@@Z PROC NEAR ; LocalFieldCollTest, COMDAT

; 778  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	ebx
	push	esi
	push	edi

; 779  : 	int iFace;
; 780  : 	VEC dR;
; 781  : 	LOCAL_FIELD_PARAMS	*params = &field->Params.LocalParams;

	mov	eax, DWORD PTR _field$[ebp]
	add	eax, 48					; 00000030H
	mov	DWORD PTR _params$[ebp], eax

; 782  : 
; 783  : 	VecMinusVec(pos, field->PosPtr, &dR);

	mov	eax, DWORD PTR _field$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _pos$[ebp]
	fld	DWORD PTR [edx]
	fsub	DWORD PTR [ecx]
	fstp	DWORD PTR _dR$[ebp]
	mov	eax, DWORD PTR _field$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _pos$[ebp]
	fld	DWORD PTR [edx+4]
	fsub	DWORD PTR [ecx+4]
	fstp	DWORD PTR _dR$[ebp+4]
	mov	eax, DWORD PTR _field$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _pos$[ebp]
	fld	DWORD PTR [edx+8]
	fsub	DWORD PTR [ecx+8]
	fstp	DWORD PTR _dR$[ebp+8]

; 784  : 
; 785  : 	// Bounding box test
; 786  : 	if (!PointInBBox(&dR, &field->BBox)) {

	mov	eax, DWORD PTR _field$[ebp]
	fld	DWORD PTR [eax+24]
	fcomp	DWORD PTR _dR$[ebp]
	fnstsw	ax
	test	ah, 65					; 00000041H
	je	SHORT $L81317
	mov	ecx, DWORD PTR _field$[ebp]
	fld	DWORD PTR [ecx+28]
	fcomp	DWORD PTR _dR$[ebp]
	fnstsw	ax
	test	ah, 5
	jnp	SHORT $L81317
	mov	edx, DWORD PTR _field$[ebp]
	fld	DWORD PTR [edx+40]
	fcomp	DWORD PTR _dR$[ebp+8]
	fnstsw	ax
	test	ah, 65					; 00000041H
	je	SHORT $L81317
	mov	eax, DWORD PTR _field$[ebp]
	fld	DWORD PTR [eax+44]
	fcomp	DWORD PTR _dR$[ebp+8]
	fnstsw	ax
	test	ah, 5
	jnp	SHORT $L81317
	mov	ecx, DWORD PTR _field$[ebp]
	fld	DWORD PTR [ecx+32]
	fcomp	DWORD PTR _dR$[ebp+4]
	fnstsw	ax
	test	ah, 65					; 00000041H
	je	SHORT $L81317
	mov	edx, DWORD PTR _field$[ebp]
	fld	DWORD PTR [edx+36]
	fcomp	DWORD PTR _dR$[ebp+4]
	fnstsw	ax
	test	ah, 5
	jnp	SHORT $L81317
	mov	DWORD PTR tv133[ebp], 1
	jmp	SHORT $L81318
$L81317:
	mov	DWORD PTR tv133[ebp], 0
$L81318:
	cmp	DWORD PTR tv133[ebp], 0
	jne	SHORT $L81083

; 787  : 		return FALSE;

	xor	al, al
	jmp	$L81079
$L81083:

; 788  : 	}
; 789  : 
; 790  : 	// Proper test
; 791  : 	for (iFace = 0; iFace < 3; iFace++) {

	mov	DWORD PTR _iFace$[ebp], 0
	jmp	SHORT $L81084
$L81085:
	mov	eax, DWORD PTR _iFace$[ebp]
	add	eax, 1
	mov	DWORD PTR _iFace$[ebp], eax
$L81084:
	cmp	DWORD PTR _iFace$[ebp], 3
	jge	$L81086

; 792  : 		if (abs(VecDotVec(&dR, &field->MatPtr->mv[iFace])) > params->Size.v[iFace]) {

	mov	eax, DWORD PTR _iFace$[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _field$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	fld	DWORD PTR _dR$[ebp]
	fmul	DWORD PTR [edx+eax]
	mov	eax, DWORD PTR _iFace$[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _field$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	fld	DWORD PTR _dR$[ebp+4]
	fmul	DWORD PTR [edx+eax+4]
	faddp	ST(1), ST(0)
	mov	eax, DWORD PTR _iFace$[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _field$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	fld	DWORD PTR _dR$[ebp+8]
	fmul	DWORD PTR [edx+eax+8]
	faddp	ST(1), ST(0)
	fcomp	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $L81319
	mov	eax, DWORD PTR _iFace$[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _field$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	fld	DWORD PTR _dR$[ebp]
	fmul	DWORD PTR [edx+eax]
	mov	eax, DWORD PTR _iFace$[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _field$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	fld	DWORD PTR _dR$[ebp+4]
	fmul	DWORD PTR [edx+eax+4]
	faddp	ST(1), ST(0)
	mov	eax, DWORD PTR _iFace$[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _field$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	fld	DWORD PTR _dR$[ebp+8]
	fmul	DWORD PTR [edx+eax+8]
	faddp	ST(1), ST(0)
	fstp	DWORD PTR tv199[ebp]
	jmp	SHORT $L81320
$L81319:
	mov	eax, DWORD PTR _iFace$[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _field$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	fld	DWORD PTR _dR$[ebp]
	fmul	DWORD PTR [edx+eax]
	mov	eax, DWORD PTR _iFace$[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _field$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	fld	DWORD PTR _dR$[ebp+4]
	fmul	DWORD PTR [edx+eax+4]
	faddp	ST(1), ST(0)
	mov	eax, DWORD PTR _iFace$[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _field$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	fld	DWORD PTR _dR$[ebp+8]
	fmul	DWORD PTR [edx+eax+8]
	faddp	ST(1), ST(0)
	fchs
	fstp	DWORD PTR tv199[ebp]
$L81320:
	mov	eax, DWORD PTR _iFace$[ebp]
	mov	ecx, DWORD PTR _params$[ebp]
	fld	DWORD PTR tv199[ebp]
	fcomp	DWORD PTR [ecx+eax*4]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $L81087

; 793  : 			return FALSE;

	xor	al, al
	jmp	SHORT $L81079
$L81087:

; 794  : 		}
; 795  : 
; 796  : 	}

	jmp	$L81085
$L81086:

; 797  : 
; 798  : 	return TRUE;

	mov	al, 1
$L81079:

; 799  : 
; 800  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?LocalFieldCollTest@@YA_NPAUForceFieldStruct@@PAUVectorStruct@@@Z ENDP ; LocalFieldCollTest
; Function compile flags: /Odt /ZI
_TEXT	ENDS
;	COMDAT ?LocalFieldImpulse@@YAXPAUForceFieldStruct@@PAUFieldDataStruct@@PAUVectorStruct@@2@Z
_TEXT	SEGMENT
_params$ = -8						; size = 4
_scale$ = -4						; size = 4
_field$ = 8						; size = 4
_data$ = 12						; size = 4
_imp$ = 16						; size = 4
_angImp$ = 20						; size = 4
?LocalFieldImpulse@@YAXPAUForceFieldStruct@@PAUFieldDataStruct@@PAUVectorStruct@@2@Z PROC NEAR ; LocalFieldImpulse, COMDAT

; 803  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi

; 804  : 	REAL	scale;
; 805  : 	LOCAL_FIELD_PARAMS *params = &field->Params.LocalParams;

	mov	eax, DWORD PTR _field$[ebp]
	add	eax, 48					; 00000030H
	mov	DWORD PTR _params$[ebp], eax

; 806  : 
; 807  : 	scale = (params->Mag - MulScalar(params->Damping, VecDotVec(params->DirPtr, data->Vel)));

	mov	eax, DWORD PTR _params$[ebp]
	fld	DWORD PTR [eax+20]
	mov	ecx, DWORD PTR _params$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR _data$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	fld	DWORD PTR [edx]
	fmul	DWORD PTR [ecx]
	mov	edx, DWORD PTR _params$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR _data$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	fld	DWORD PTR [eax+4]
	fmul	DWORD PTR [edx+4]
	faddp	ST(1), ST(0)
	mov	eax, DWORD PTR _params$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _data$[ebp]
	mov	eax, DWORD PTR [edx+12]
	fld	DWORD PTR [ecx+8]
	fmul	DWORD PTR [eax+8]
	faddp	ST(1), ST(0)
	fmulp	ST(1), ST(0)
	mov	ecx, DWORD PTR _params$[ebp]
	fsubr	DWORD PTR [ecx+16]
	fstp	DWORD PTR _scale$[ebp]

; 808  : 	scale = MulScalar(MulScalar(scale, data->Mass), TimeStep);

	mov	eax, DWORD PTR _data$[ebp]
	fld	DWORD PTR [eax+28]
	fmul	DWORD PTR _scale$[ebp]
	fmul	DWORD PTR ?TimeStep@@3MA		; TimeStep
	fstp	DWORD PTR _scale$[ebp]

; 809  : 
; 810  : 	VecPlusEqScalarVec(imp, scale, params->DirPtr);

	mov	eax, DWORD PTR _params$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	fld	DWORD PTR _scale$[ebp]
	fmul	DWORD PTR [ecx]
	mov	edx, DWORD PTR _imp$[ebp]
	fadd	DWORD PTR [edx]
	mov	eax, DWORD PTR _imp$[ebp]
	fstp	DWORD PTR [eax]
	mov	eax, DWORD PTR _params$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	fld	DWORD PTR _scale$[ebp]
	fmul	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _imp$[ebp]
	fadd	DWORD PTR [edx+4]
	mov	eax, DWORD PTR _imp$[ebp]
	fstp	DWORD PTR [eax+4]
	mov	eax, DWORD PTR _params$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	fld	DWORD PTR _scale$[ebp]
	fmul	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _imp$[ebp]
	fadd	DWORD PTR [edx+8]
	mov	eax, DWORD PTR _imp$[ebp]
	fstp	DWORD PTR [eax+8]

; 811  : 
; 812  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?LocalFieldImpulse@@YAXPAUForceFieldStruct@@PAUFieldDataStruct@@PAUVectorStruct@@2@Z ENDP ; LocalFieldImpulse
_TEXT	ENDS
PUBLIC	?__LINE__Var@?1??FreeForceFields@@YAXXZ@4JA	; `FreeForceFields'::`2'::__LINE__Var
PUBLIC	?FreeForceFields@@YAXXZ				; FreeForceFields
EXTRN	?LEV_LevelFieldPos@@3PAUVectorStruct@@A:DWORD	; LEV_LevelFieldPos
EXTRN	?LEV_LevelFieldMat@@3PATMatrixUnion@@A:DWORD	; LEV_LevelFieldMat
EXTRN	?DebugFree@@YAXPAXHPAD@Z:NEAR			; DebugFree
;	COMDAT ?__LINE__Var@?1??FreeForceFields@@YAXXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?1??FreeForceFields@@YAXXZ@4JA DD 0337H	; `FreeForceFields'::`2'::__LINE__Var
; Function compile flags: /Odt /ZI
_DATA	ENDS
;	COMDAT ?FreeForceFields@@YAXXZ
_TEXT	SEGMENT
?FreeForceFields@@YAXXZ PROC NEAR			; FreeForceFields, COMDAT

; 823  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 824  : #ifndef _PSX
; 825  : 	free(LEV_LevelFieldPos);

	push	OFFSET FLAT:??_C@_0IK@LONOMOLI@c?3?2documents?5and?5settings?2jarhea@
	mov	eax, DWORD PTR ?__LINE__Var@?1??FreeForceFields@@YAXXZ@4JA
	add	eax, 2
	push	eax
	mov	ecx, DWORD PTR ?LEV_LevelFieldPos@@3PAUVectorStruct@@A ; LEV_LevelFieldPos
	push	ecx
	call	?DebugFree@@YAXPAXHPAD@Z		; DebugFree
	add	esp, 12					; 0000000cH

; 826  : 	free(LEV_LevelFieldMat);

	push	OFFSET FLAT:??_C@_0IK@LONOMOLI@c?3?2documents?5and?5settings?2jarhea@
	mov	eax, DWORD PTR ?__LINE__Var@?1??FreeForceFields@@YAXXZ@4JA
	add	eax, 3
	push	eax
	mov	ecx, DWORD PTR ?LEV_LevelFieldMat@@3PATMatrixUnion@@A ; LEV_LevelFieldMat
	push	ecx
	call	?DebugFree@@YAXPAXHPAD@Z		; DebugFree
	add	esp, 12					; 0000000cH

; 827  : 	LEV_LevelFieldPos = NULL;

	mov	DWORD PTR ?LEV_LevelFieldPos@@3PAUVectorStruct@@A, 0 ; LEV_LevelFieldPos

; 828  : 	LEV_LevelFieldMat = NULL;

	mov	DWORD PTR ?LEV_LevelFieldMat@@3PATMatrixUnion@@A, 0 ; LEV_LevelFieldMat

; 829  : #endif
; 830  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?FreeForceFields@@YAXXZ ENDP				; FreeForceFields
_TEXT	ENDS
END
