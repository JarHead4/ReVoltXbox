; Listing generated by Microsoft (R) Optimizing Compiler Version 13.10.3077 

	TITLE	.\source\edittrig.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_03IDDGKHFD@X?5Y?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_03KIBLPEJA@X?5Z?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_03CJDPGPNI@Z?5Y?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_01MMEEDKFM@X?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_01NFFPALBN@Y?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_01POHCFINO@Z?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_06JCBBMBIP@Camera?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_05MFLOHCHP@World?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0N@MILDJOCH@Chicane?5left?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_08IOGIEBHB@180?5left?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_07PIKDFOLJ@90?5left?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_07DBJOGEMP@45?5left?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0O@LPDNAJJM@Chicane?5right?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_09DKNPCDLE@180?5Right?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_08KPBGKCCJ@90?5Right?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_08BGLJELBK@45?5Right?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_05GHAHLDJM@Ahead?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_06MCJJLJDN@Danger?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_04FMFHEMAM@Fork?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BA@FMKNDLMP@Collision?3?5None?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BA@IBDPKINC@Collision?3?5Full?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_05PFCHECLD@Piano?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_05EAFAMACM@Split?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_09JJHJPHKH@Track?5dir?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0L@CHIIFDKL@CameraRail?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_07PKJGOEDF@AI?5Home?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0IN@CDMNGFIK@c?3?2documents?5and?5settings?2jarhea@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CG@FPOLIOAE@Can?8t?5alloc?5memory?5for?5file?5trig@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_02JDPG@rb?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_02GMLFBBN@wb?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_03ENLJPBPJ@tr?9?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BE@GIEDBLIC@Saved?5Trigger?5File?3?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_02DKCKIIND@?$CFs?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_07EOKGDPFJ@Flag?5?$CFd?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_07ELCFLLMP@Flag?5?$CFs?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0N@MOINFLNL@Axis?5?$CFs?5?9?5?$CFs?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_03NJKMHLPI@tri?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _IsEqualGUID
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _==
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _acosl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _asinl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _atanl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _atan2l
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _ceill
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _cosl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _coshl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _expl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _fabsl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _floorl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _fmodl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _frexpl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _ldexpl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _logl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _log10l
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _modfl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _powl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _sinl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _sinhl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _sqrtl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _tanl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _tanhl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _frexpf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _ldexpf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _acosf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _asinf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _atanf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _atan2f
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _ceilf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _cosf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _coshf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _expf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _fabsf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _floorf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _fmodf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _logf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _log10f
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _modff
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _powf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _sinf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _sinhf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _sqrtf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _tanf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _tanhf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?sqrt@@YAMM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?InitFileTriggers@@YAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?KillFileTriggers@@YAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?LoadFileTriggers@@YAXPAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SaveFileTriggers@@YAXPAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AllocFileTrigger@@YAPAUFILE_TRIGGER@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?FreeFileTrigger@@YAXPAUFILE_TRIGGER@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DrawTriggers@@YAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DisplayTriggerInfo@@YAXPAUFILE_TRIGGER@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?EditTriggers@@YAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Pow_int@N@@YANNH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Pow_int@H@@YAHHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Pow_int@M@@YAMMH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Pow_int@O@@YAOOH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?__LINE__Var@?1??KillFileTriggers@@YAXXZ@4JA
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??InitFileTriggers@@YAXXZ@4JA
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
sxdata	SEGMENT DWORD USE32 'SXDATA'
sxdata	ENDS
FLAT	GROUP _DATA, CONST, _BSS
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBCD
INCLUDELIB OLDNAMES

PUBLIC	??_C@_03IDDGKHFD@X?5Y?$AA@			; `string'
PUBLIC	??_C@_03KIBLPEJA@X?5Z?$AA@			; `string'
PUBLIC	??_C@_03CJDPGPNI@Z?5Y?$AA@			; `string'
PUBLIC	??_C@_01MMEEDKFM@X?$AA@				; `string'
PUBLIC	??_C@_01NFFPALBN@Y?$AA@				; `string'
PUBLIC	??_C@_01POHCFINO@Z?$AA@				; `string'
PUBLIC	??_C@_06JCBBMBIP@Camera?$AA@			; `string'
PUBLIC	??_C@_05MFLOHCHP@World?$AA@			; `string'
PUBLIC	?TriggerEnumTrackDir@@3PAPADA			; TriggerEnumTrackDir
PUBLIC	??_C@_0N@MILDJOCH@Chicane?5left?$AA@		; `string'
PUBLIC	??_C@_08IOGIEBHB@180?5left?$AA@			; `string'
PUBLIC	??_C@_07PIKDFOLJ@90?5left?$AA@			; `string'
PUBLIC	??_C@_07DBJOGEMP@45?5left?$AA@			; `string'
PUBLIC	??_C@_0O@LPDNAJJM@Chicane?5right?$AA@		; `string'
PUBLIC	??_C@_09DKNPCDLE@180?5Right?$AA@		; `string'
PUBLIC	??_C@_08KPBGKCCJ@90?5Right?$AA@			; `string'
PUBLIC	??_C@_08BGLJELBK@45?5Right?$AA@			; `string'
PUBLIC	??_C@_05GHAHLDJM@Ahead?$AA@			; `string'
PUBLIC	??_C@_06MCJJLJDN@Danger?$AA@			; `string'
PUBLIC	??_C@_04FMFHEMAM@Fork?$AA@			; `string'
PUBLIC	?TriggerEnumCameraRail@@3PAPADA			; TriggerEnumCameraRail
PUBLIC	??_C@_0BA@FMKNDLMP@Collision?3?5None?$AA@	; `string'
PUBLIC	??_C@_0BA@IBDPKINC@Collision?3?5Full?$AA@	; `string'
PUBLIC	??_C@_05PFCHECLD@Piano?$AA@			; `string'
PUBLIC	??_C@_05EAFAMACM@Split?$AA@			; `string'
PUBLIC	??_C@_09JJHJPHKH@Track?5dir?$AA@		; `string'
PUBLIC	??_C@_0L@CHIIFDKL@CameraRail?$AA@		; `string'
PUBLIC	??_C@_07PKJGOEDF@AI?5Home?$AA@			; `string'
PUBLIC	?CurrentTrigger@@3PAUFILE_TRIGGER@@A		; CurrentTrigger
_BSS	SEGMENT
?CurrentTrigger@@3PAUFILE_TRIGGER@@A DD 01H DUP (?)	; CurrentTrigger
_BSS	ENDS
;	COMDAT ??_C@_03IDDGKHFD@X?5Y?$AA@
CONST	SEGMENT
??_C@_03IDDGKHFD@X?5Y?$AA@ DB 'X Y', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03KIBLPEJA@X?5Z?$AA@
CONST	SEGMENT
??_C@_03KIBLPEJA@X?5Z?$AA@ DB 'X Z', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03CJDPGPNI@Z?5Y?$AA@
CONST	SEGMENT
??_C@_03CJDPGPNI@Z?5Y?$AA@ DB 'Z Y', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01MMEEDKFM@X?$AA@
CONST	SEGMENT
??_C@_01MMEEDKFM@X?$AA@ DB 'X', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01NFFPALBN@Y?$AA@
CONST	SEGMENT
??_C@_01NFFPALBN@Y?$AA@ DB 'Y', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01POHCFINO@Z?$AA@
CONST	SEGMENT
??_C@_01POHCFINO@Z?$AA@ DB 'Z', 00H			; `string'
CONST	ENDS
_DATA	SEGMENT
_FileTriggerAxisNames DD FLAT:??_C@_03IDDGKHFD@X?5Y?$AA@
	DD	FLAT:??_C@_03KIBLPEJA@X?5Z?$AA@
	DD	FLAT:??_C@_03CJDPGPNI@Z?5Y?$AA@
	DD	FLAT:??_C@_01MMEEDKFM@X?$AA@
	DD	FLAT:??_C@_01NFFPALBN@Y?$AA@
	DD	FLAT:??_C@_01POHCFINO@Z?$AA@
_DATA	ENDS
;	COMDAT ??_C@_06JCBBMBIP@Camera?$AA@
CONST	SEGMENT
??_C@_06JCBBMBIP@Camera?$AA@ DB 'Camera', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05MFLOHCHP@World?$AA@
CONST	SEGMENT
??_C@_05MFLOHCHP@World?$AA@ DB 'World', 00H		; `string'
CONST	ENDS
_DATA	SEGMENT
_FileTriggerAxisTypeNames DD FLAT:??_C@_06JCBBMBIP@Camera?$AA@
	DD	FLAT:??_C@_05MFLOHCHP@World?$AA@
_DrawTriggerIndex DW 01H
	DW	03H
	DW	07H
	DW	05H
	DW	02H
	DW	00H
	DW	04H
	DW	06H
	DW	04H
	DW	05H
	DW	07H
	DW	06H
	DW	00H
	DW	02H
	DW	03H
	DW	01H
	DW	03H
	DW	02H
	DW	06H
	DW	07H
	DW	00H
	DW	01H
	DW	05H
	DW	04H
_DrawTriggerCol DD 080ff0000H
	DD	08000ff00H
	DD	0800000ffH
	DD	080ffff00H
	DD	080ff00ffH
	DD	08000ffffH
_DATA	ENDS
;	COMDAT ??_C@_0N@MILDJOCH@Chicane?5left?$AA@
CONST	SEGMENT
??_C@_0N@MILDJOCH@Chicane?5left?$AA@ DB 'Chicane left', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08IOGIEBHB@180?5left?$AA@
CONST	SEGMENT
??_C@_08IOGIEBHB@180?5left?$AA@ DB '180 left', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07PIKDFOLJ@90?5left?$AA@
CONST	SEGMENT
??_C@_07PIKDFOLJ@90?5left?$AA@ DB '90 left', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07DBJOGEMP@45?5left?$AA@
CONST	SEGMENT
??_C@_07DBJOGEMP@45?5left?$AA@ DB '45 left', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@LPDNAJJM@Chicane?5right?$AA@
CONST	SEGMENT
??_C@_0O@LPDNAJJM@Chicane?5right?$AA@ DB 'Chicane right', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09DKNPCDLE@180?5Right?$AA@
CONST	SEGMENT
??_C@_09DKNPCDLE@180?5Right?$AA@ DB '180 Right', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08KPBGKCCJ@90?5Right?$AA@
CONST	SEGMENT
??_C@_08KPBGKCCJ@90?5Right?$AA@ DB '90 Right', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08BGLJELBK@45?5Right?$AA@
CONST	SEGMENT
??_C@_08BGLJELBK@45?5Right?$AA@ DB '45 Right', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05GHAHLDJM@Ahead?$AA@
CONST	SEGMENT
??_C@_05GHAHLDJM@Ahead?$AA@ DB 'Ahead', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06MCJJLJDN@Danger?$AA@
CONST	SEGMENT
??_C@_06MCJJLJDN@Danger?$AA@ DB 'Danger', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04FMFHEMAM@Fork?$AA@
CONST	SEGMENT
??_C@_04FMFHEMAM@Fork?$AA@ DB 'Fork', 00H		; `string'
CONST	ENDS
_DATA	SEGMENT
?TriggerEnumTrackDir@@3PAPADA DD FLAT:??_C@_0N@MILDJOCH@Chicane?5left?$AA@ ; TriggerEnumTrackDir
	DD	FLAT:??_C@_08IOGIEBHB@180?5left?$AA@
	DD	FLAT:??_C@_07PIKDFOLJ@90?5left?$AA@
	DD	FLAT:??_C@_07DBJOGEMP@45?5left?$AA@
	DD	FLAT:??_C@_0O@LPDNAJJM@Chicane?5right?$AA@
	DD	FLAT:??_C@_09DKNPCDLE@180?5Right?$AA@
	DD	FLAT:??_C@_08KPBGKCCJ@90?5Right?$AA@
	DD	FLAT:??_C@_08BGLJELBK@45?5Right?$AA@
	DD	FLAT:??_C@_05GHAHLDJM@Ahead?$AA@
	DD	FLAT:??_C@_06MCJJLJDN@Danger?$AA@
	DD	FLAT:??_C@_04FMFHEMAM@Fork?$AA@
	DD	00H
_DATA	ENDS
;	COMDAT ??_C@_0BA@FMKNDLMP@Collision?3?5None?$AA@
CONST	SEGMENT
??_C@_0BA@FMKNDLMP@Collision?3?5None?$AA@ DB 'Collision: None', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@IBDPKINC@Collision?3?5Full?$AA@
CONST	SEGMENT
??_C@_0BA@IBDPKINC@Collision?3?5Full?$AA@ DB 'Collision: Full', 00H ; `string'
CONST	ENDS
_DATA	SEGMENT
?TriggerEnumCameraRail@@3PAPADA DD FLAT:??_C@_0BA@FMKNDLMP@Collision?3?5None?$AA@ ; TriggerEnumCameraRail
	DD	FLAT:??_C@_0BA@IBDPKINC@Collision?3?5Full?$AA@
	DD	00H
_DATA	ENDS
;	COMDAT ??_C@_05PFCHECLD@Piano?$AA@
CONST	SEGMENT
??_C@_05PFCHECLD@Piano?$AA@ DB 'Piano', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05EAFAMACM@Split?$AA@
CONST	SEGMENT
??_C@_05EAFAMACM@Split?$AA@ DB 'Split', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09JJHJPHKH@Track?5dir?$AA@
CONST	SEGMENT
??_C@_09JJHJPHKH@Track?5dir?$AA@ DB 'Track dir', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@CHIIFDKL@CameraRail?$AA@
CONST	SEGMENT
??_C@_0L@CHIIFDKL@CameraRail?$AA@ DB 'CameraRail', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07PKJGOEDF@AI?5Home?$AA@
CONST	SEGMENT
??_C@_07PKJGOEDF@AI?5Home?$AA@ DB 'AI Home', 00H	; `string'
CONST	ENDS
_DATA	SEGMENT
_TriggerNames DD FLAT:??_C@_05PFCHECLD@Piano?$AA@
	DD	FLAT:??_C@_05EAFAMACM@Split?$AA@
	DD	FLAT:??_C@_09JJHJPHKH@Track?5dir?$AA@
	DD	FLAT:??_C@_0L@CHIIFDKL@CameraRail?$AA@
	DD	FLAT:??_C@_07PKJGOEDF@AI?5Home?$AA@
	DD	00H
_TriggerEnums DD 00H
	DD	00H
	DD	FLAT:?TriggerEnumTrackDir@@3PAPADA
	DD	00H
	DD	00H
_DATA	ENDS
PUBLIC	?__LINE__Var@?1??InitFileTriggers@@YAXXZ@4JA	; `InitFileTriggers'::`2'::__LINE__Var
PUBLIC	??_C@_0IN@CDMNGFIK@c?3?2documents?5and?5settings?2jarhea@ ; `string'
PUBLIC	??_C@_0CG@FPOLIOAE@Can?8t?5alloc?5memory?5for?5file?5trig@ ; `string'
PUBLIC	?InitFileTriggers@@YAXXZ			; InitFileTriggers
EXTRN	?DebugMalloc@@YAPAXIHPAD@Z:NEAR			; DebugMalloc
EXTRN	?Box@@YAJPAD0J@Z:NEAR				; Box
EXTRN	?QuitGame@@3DA:BYTE				; QuitGame
_BSS	SEGMENT
_FileTriggers DD 01H DUP (?)
_BSS	ENDS
;	COMDAT ??_C@_0IN@CDMNGFIK@c?3?2documents?5and?5settings?2jarhea@
; File c:\documents and settings\jarhead\desktop\shit to display my love for xbox revolt and fuck you borman-ness\revolt source\source\edittrig.cpp
CONST	SEGMENT
??_C@_0IN@CDMNGFIK@c?3?2documents?5and?5settings?2jarhea@ DB 'c:\document'
	DB	's and settings\jarhead\desktop\shit to display my love for xb'
	DB	'ox revolt and fuck you borman-ness\revolt source\source\editt'
	DB	'rig.cpp', 00H				; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??InitFileTriggers@@YAXXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?1??InitFileTriggers@@YAXXZ@4JA DD 06cH	; `InitFileTriggers'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0CG@FPOLIOAE@Can?8t?5alloc?5memory?5for?5file?5trig@
CONST	SEGMENT
??_C@_0CG@FPOLIOAE@Can?8t?5alloc?5memory?5for?5file?5trig@ DB 'Can''t all'
	DB	'oc memory for file triggers!', 00H		; `string'
; Function compile flags: /Odt /ZI
CONST	ENDS
;	COMDAT ?InitFileTriggers@@YAXXZ
_TEXT	SEGMENT
?InitFileTriggers@@YAXXZ PROC NEAR			; InitFileTriggers, COMDAT

; 108  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 109  : 	FileTriggers = (FILE_TRIGGER*)malloc(sizeof(FILE_TRIGGER) * MAX_FILE_TRIGGERS);

	push	OFFSET FLAT:??_C@_0IN@CDMNGFIK@c?3?2documents?5and?5settings?2jarhea@
	mov	eax, DWORD PTR ?__LINE__Var@?1??InitFileTriggers@@YAXXZ@4JA
	add	eax, 1
	push	eax
	push	4352					; 00001100H
	call	?DebugMalloc@@YAPAXIHPAD@Z		; DebugMalloc
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _FileTriggers, eax

; 110  : 	if (!FileTriggers)

	cmp	DWORD PTR _FileTriggers, 0
	jne	SHORT $L81306

; 111  : 	{
; 112  : 		Box(NULL, "Can't alloc memory for file triggers!", MB_OK);

	push	0
	push	OFFSET FLAT:??_C@_0CG@FPOLIOAE@Can?8t?5alloc?5memory?5for?5file?5trig@
	push	0
	call	?Box@@YAJPAD0J@Z			; Box
	add	esp, 12					; 0000000cH

; 113  : 		QuitGame = TRUE;

	mov	BYTE PTR ?QuitGame@@3DA, 1		; QuitGame
$L81306:

; 114  : 	}
; 115  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?InitFileTriggers@@YAXXZ ENDP				; InitFileTriggers
_TEXT	ENDS
PUBLIC	?__LINE__Var@?1??KillFileTriggers@@YAXXZ@4JA	; `KillFileTriggers'::`2'::__LINE__Var
PUBLIC	?KillFileTriggers@@YAXXZ			; KillFileTriggers
EXTRN	?DebugFree@@YAXPAXHPAD@Z:NEAR			; DebugFree
;	COMDAT ?__LINE__Var@?1??KillFileTriggers@@YAXXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?1??KillFileTriggers@@YAXXZ@4JA DD 07aH	; `KillFileTriggers'::`2'::__LINE__Var
; Function compile flags: /Odt /ZI
_DATA	ENDS
;	COMDAT ?KillFileTriggers@@YAXXZ
_TEXT	SEGMENT
?KillFileTriggers@@YAXXZ PROC NEAR			; KillFileTriggers, COMDAT

; 122  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 123  : 	free(FileTriggers);

	push	OFFSET FLAT:??_C@_0IN@CDMNGFIK@c?3?2documents?5and?5settings?2jarhea@
	mov	eax, DWORD PTR ?__LINE__Var@?1??KillFileTriggers@@YAXXZ@4JA
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _FileTriggers
	push	ecx
	call	?DebugFree@@YAXPAXHPAD@Z		; DebugFree
	add	esp, 12					; 0000000cH

; 124  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?KillFileTriggers@@YAXXZ ENDP				; KillFileTriggers
_TEXT	ENDS
PUBLIC	??_C@_02JDPG@rb?$AA@				; `string'
PUBLIC	??_C@_02GMLFBBN@wb?$AA@				; `string'
PUBLIC	?LoadFileTriggers@@YAXPAD@Z			; LoadFileTriggers
EXTRN	_fclose:NEAR
EXTRN	_fopen:NEAR
EXTRN	_fread:NEAR
EXTRN	_fwrite:NEAR
EXTRN	__fltused:NEAR
EXTRN	?EditScale@@3MA:DWORD				; EditScale
_BSS	SEGMENT
_FileTriggerNum DD 01H DUP (?)
_BSS	ENDS
;	COMDAT ??_C@_02JDPG@rb?$AA@
CONST	SEGMENT
??_C@_02JDPG@rb?$AA@ DB 'rb', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02GMLFBBN@wb?$AA@
CONST	SEGMENT
??_C@_02GMLFBBN@wb?$AA@ DB 'wb', 00H			; `string'
; Function compile flags: /Odt /ZI
CONST	ENDS
;	COMDAT ?LoadFileTriggers@@YAXPAD@Z
_TEXT	SEGMENT
_ftri$ = -76						; size = 68
_fp$ = -8						; size = 4
_i$ = -4						; size = 4
_file$ = 8						; size = 4
?LoadFileTriggers@@YAXPAD@Z PROC NEAR			; LoadFileTriggers, COMDAT

; 131  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 140				; 0000008cH
	push	ebx
	push	esi
	push	edi

; 132  : 	long i;
; 133  : 	FILE *fp;
; 134  : 	FILE_TRIGGER ftri;
; 135  : 
; 136  : // open trigger file
; 137  : 
; 138  : 	fp = fopen(file, "rb");

	push	OFFSET FLAT:??_C@_02JDPG@rb?$AA@
	mov	eax, DWORD PTR _file$[ebp]
	push	eax
	call	_fopen
	add	esp, 8
	mov	DWORD PTR _fp$[ebp], eax

; 139  : 
; 140  : // if not there create empty one
; 141  : 
; 142  : 	if (!fp)

	cmp	DWORD PTR _fp$[ebp], 0
	jne	SHORT $L81324

; 143  : 	{
; 144  : 		fp = fopen(file, "wb");

	push	OFFSET FLAT:??_C@_02GMLFBBN@wb?$AA@
	mov	eax, DWORD PTR _file$[ebp]
	push	eax
	call	_fopen
	add	esp, 8
	mov	DWORD PTR _fp$[ebp], eax

; 145  : 		if (!fp) return;

	cmp	DWORD PTR _fp$[ebp], 0
	jne	SHORT $L81326
	jmp	$L81319
$L81326:

; 146  : 		i = 0;

	mov	DWORD PTR _i$[ebp], 0

; 147  : 		fwrite(&i, sizeof(i), 1, fp);

	mov	eax, DWORD PTR _fp$[ebp]
	push	eax
	push	1
	push	4
	lea	ecx, DWORD PTR _i$[ebp]
	push	ecx
	call	_fwrite
	add	esp, 16					; 00000010H

; 148  : 		fclose(fp);

	mov	eax, DWORD PTR _fp$[ebp]
	push	eax
	call	_fclose
	add	esp, 4

; 149  : 		fp = fopen(file, "rb");

	push	OFFSET FLAT:??_C@_02JDPG@rb?$AA@
	mov	eax, DWORD PTR _file$[ebp]
	push	eax
	call	_fopen
	add	esp, 8
	mov	DWORD PTR _fp$[ebp], eax

; 150  : 		if (!fp) return;

	cmp	DWORD PTR _fp$[ebp], 0
	jne	SHORT $L81324
	jmp	$L81319
$L81324:

; 151  : 	}
; 152  : 
; 153  : // loop thru all triggers
; 154  : 
; 155  : 	fread(&FileTriggerNum, sizeof(FileTriggerNum), 1, fp);

	mov	eax, DWORD PTR _fp$[ebp]
	push	eax
	push	1
	push	4
	push	OFFSET FLAT:_FileTriggerNum
	call	_fread
	add	esp, 16					; 00000010H

; 156  : 
; 157  : 	for (i = 0 ; i < FileTriggerNum ; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $L81328
$L81329:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$L81328:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _FileTriggerNum
	jge	SHORT $L81330

; 158  : 	{
; 159  : 
; 160  : // load one file trigger
; 161  : 
; 162  : 		fread(&ftri, sizeof(ftri), 1, fp);

	mov	eax, DWORD PTR _fp$[ebp]
	push	eax
	push	1
	push	68					; 00000044H
	lea	ecx, DWORD PTR _ftri$[ebp]
	push	ecx
	call	_fread
	add	esp, 16					; 00000010H

; 163  : 
; 164  : 		VecMulScalar(&ftri.Pos, EditScale);

	fld	DWORD PTR _ftri$[ebp+8]
	fmul	DWORD PTR ?EditScale@@3MA		; EditScale
	fstp	DWORD PTR _ftri$[ebp+8]
	fld	DWORD PTR _ftri$[ebp+12]
	fmul	DWORD PTR ?EditScale@@3MA		; EditScale
	fstp	DWORD PTR _ftri$[ebp+12]
	fld	DWORD PTR _ftri$[ebp+16]
	fmul	DWORD PTR ?EditScale@@3MA		; EditScale
	fstp	DWORD PTR _ftri$[ebp+16]

; 165  : 
; 166  : // setup edit trigger
; 167  : 
; 168  : 		FileTriggers[i] = ftri;

	mov	edi, DWORD PTR _i$[ebp]
	imul	edi, 68					; 00000044H
	add	edi, DWORD PTR _FileTriggers
	mov	ecx, 17					; 00000011H
	lea	esi, DWORD PTR _ftri$[ebp]
	rep movsd

; 169  : 	}

	jmp	SHORT $L81329
$L81330:

; 170  : 
; 171  : // close trigger file
; 172  : 
; 173  : 	fclose(fp);

	mov	eax, DWORD PTR _fp$[ebp]
	push	eax
	call	_fclose
	add	esp, 4
$L81319:

; 174  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?LoadFileTriggers@@YAXPAD@Z ENDP			; LoadFileTriggers
_TEXT	ENDS
PUBLIC	??_C@_03ENLJPBPJ@tr?9?$AA@			; `string'
PUBLIC	??_C@_0BE@GIEDBLIC@Saved?5Trigger?5File?3?$AA@	; `string'
PUBLIC	?SaveFileTriggers@@YAXPAD@Z			; SaveFileTriggers
EXTRN	_remove:NEAR
EXTRN	_rename:NEAR
EXTRN	_memcpy:NEAR
EXTRN	_strlen:NEAR
EXTRN	__imp__wsprintfA:NEAR
;	COMDAT ??_C@_03ENLJPBPJ@tr?9?$AA@
CONST	SEGMENT
??_C@_03ENLJPBPJ@tr?9?$AA@ DB 'tr-', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@GIEDBLIC@Saved?5Trigger?5File?3?$AA@
CONST	SEGMENT
??_C@_0BE@GIEDBLIC@Saved?5Trigger?5File?3?$AA@ DB 'Saved Trigger File:', 00H ; `string'
; Function compile flags: /Odt /ZI
CONST	ENDS
;	COMDAT ?SaveFileTriggers@@YAXPAD@Z
_TEXT	SEGMENT
_bak$ = -332						; size = 256
_ftri$ = -76						; size = 68
_fp$ = -8						; size = 4
_i$ = -4						; size = 4
_file$ = 8						; size = 4
?SaveFileTriggers@@YAXPAD@Z PROC NEAR			; SaveFileTriggers, COMDAT

; 181  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 396				; 0000018cH
	push	ebx
	push	esi
	push	edi

; 182  : 	long i;
; 183  : 	FILE *fp;
; 184  : 	FILE_TRIGGER ftri;
; 185  : 	char bak[256];
; 186  : 
; 187  : // backup old file
; 188  : 
; 189  : 	memcpy(bak, file, strlen(file) - 3);

	mov	eax, DWORD PTR _file$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	sub	eax, 3
	push	eax
	mov	ecx, DWORD PTR _file$[ebp]
	push	ecx
	lea	edx, DWORD PTR _bak$[ebp]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 190  : 	wsprintf(bak + strlen(file) - 3, "tr-");

	push	OFFSET FLAT:??_C@_03ENLJPBPJ@tr?9?$AA@
	mov	eax, DWORD PTR _file$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	lea	ecx, DWORD PTR _bak$[ebp+eax-3]
	push	ecx
	call	DWORD PTR __imp__wsprintfA
	add	esp, 8

; 191  : 	remove(bak);

	lea	eax, DWORD PTR _bak$[ebp]
	push	eax
	call	_remove
	add	esp, 4

; 192  : 	rename(file, bak);

	lea	eax, DWORD PTR _bak$[ebp]
	push	eax
	mov	ecx, DWORD PTR _file$[ebp]
	push	ecx
	call	_rename
	add	esp, 8

; 193  : 
; 194  : // open trigger file
; 195  : 
; 196  : 	fp = fopen(file, "wb");

	push	OFFSET FLAT:??_C@_02GMLFBBN@wb?$AA@
	mov	eax, DWORD PTR _file$[ebp]
	push	eax
	call	_fopen
	add	esp, 8
	mov	DWORD PTR _fp$[ebp], eax

; 197  : 	if (!fp) return;

	cmp	DWORD PTR _fp$[ebp], 0
	jne	SHORT $L81339
	jmp	SHORT $L81333
$L81339:

; 198  : 
; 199  : // write num
; 200  : 
; 201  : 	fwrite(&FileTriggerNum, sizeof(FileTriggerNum), 1, fp);

	mov	eax, DWORD PTR _fp$[ebp]
	push	eax
	push	1
	push	4
	push	OFFSET FLAT:_FileTriggerNum
	call	_fwrite
	add	esp, 16					; 00000010H

; 202  : 
; 203  : // write out each trigger
; 204  : 
; 205  : 	for (i = 0 ; i < FileTriggerNum ; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $L81340
$L81341:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$L81340:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _FileTriggerNum
	jge	SHORT $L81342

; 206  : 	{
; 207  : 
; 208  : // set file trigger
; 209  : 
; 210  : 		ftri = FileTriggers[i];

	mov	esi, DWORD PTR _i$[ebp]
	imul	esi, 68					; 00000044H
	add	esi, DWORD PTR _FileTriggers
	mov	ecx, 17					; 00000011H
	lea	edi, DWORD PTR _ftri$[ebp]
	rep movsd

; 211  : 
; 212  : // write it
; 213  : 
; 214  : 		fwrite(&ftri, sizeof(ftri), 1, fp);

	mov	eax, DWORD PTR _fp$[ebp]
	push	eax
	push	1
	push	68					; 00000044H
	lea	ecx, DWORD PTR _ftri$[ebp]
	push	ecx
	call	_fwrite
	add	esp, 16					; 00000010H

; 215  : 	}

	jmp	SHORT $L81341
$L81342:

; 216  : 
; 217  : // close file
; 218  : 
; 219  : 	Box("Saved Trigger File:", file, MB_OK);

	push	0
	mov	eax, DWORD PTR _file$[ebp]
	push	eax
	push	OFFSET FLAT:??_C@_0BE@GIEDBLIC@Saved?5Trigger?5File?3?$AA@
	call	?Box@@YAJPAD0J@Z			; Box
	add	esp, 12					; 0000000cH

; 220  : 	fclose(fp);

	mov	eax, DWORD PTR _fp$[ebp]
	push	eax
	call	_fclose
	add	esp, 4
$L81333:

; 221  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?SaveFileTriggers@@YAXPAD@Z ENDP			; SaveFileTriggers
_TEXT	ENDS
PUBLIC	?AllocFileTrigger@@YAPAUFILE_TRIGGER@@XZ	; AllocFileTrigger
; Function compile flags: /Odt /ZI
;	COMDAT ?AllocFileTrigger@@YAPAUFILE_TRIGGER@@XZ
_TEXT	SEGMENT
tv68 = -68						; size = 4
?AllocFileTrigger@@YAPAUFILE_TRIGGER@@XZ PROC NEAR	; AllocFileTrigger, COMDAT

; 228  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 229  : 
; 230  : // full?
; 231  : 
; 232  : 	if (FileTriggerNum >= MAX_FILE_TRIGGERS)

	cmp	DWORD PTR _FileTriggerNum, 64		; 00000040H
	jl	SHORT $L81347

; 233  : 		return NULL;

	xor	eax, eax
	jmp	SHORT $L81346
$L81347:

; 234  : 
; 235  : // inc counter, return slot
; 236  : 
; 237  : 	return &FileTriggers[FileTriggerNum++];

	mov	eax, DWORD PTR _FileTriggerNum
	imul	eax, 68					; 00000044H
	add	eax, DWORD PTR _FileTriggers
	mov	DWORD PTR tv68[ebp], eax
	mov	ecx, DWORD PTR _FileTriggerNum
	add	ecx, 1
	mov	DWORD PTR _FileTriggerNum, ecx
	mov	eax, DWORD PTR tv68[ebp]
$L81346:

; 238  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?AllocFileTrigger@@YAPAUFILE_TRIGGER@@XZ ENDP		; AllocFileTrigger
_TEXT	ENDS
PUBLIC	?FreeFileTrigger@@YAXPAUFILE_TRIGGER@@@Z	; FreeFileTrigger
; Function compile flags: /Odt /ZI
;	COMDAT ?FreeFileTrigger@@YAXPAUFILE_TRIGGER@@@Z
_TEXT	SEGMENT
_i$ = -8						; size = 4
_idx$ = -4						; size = 4
_trigger$ = 8						; size = 4
?FreeFileTrigger@@YAXPAUFILE_TRIGGER@@@Z PROC NEAR	; FreeFileTrigger, COMDAT

; 245  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi

; 246  : 	long idx, i;
; 247  : 
; 248  : // find index into list
; 249  : 
; 250  : 	idx = (long)(trigger - FileTriggers);

	mov	eax, DWORD PTR _trigger$[ebp]
	sub	eax, DWORD PTR _FileTriggers
	cdq
	mov	ecx, 68					; 00000044H
	idiv	ecx
	mov	DWORD PTR _idx$[ebp], eax

; 251  : 
; 252  : // copy all higher triggers down one
; 253  : 
; 254  : 	for (i = idx ; i < FileTriggerNum - 1; i++)

	mov	eax, DWORD PTR _idx$[ebp]
	mov	DWORD PTR _i$[ebp], eax
	jmp	SHORT $L81354
$L81355:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$L81354:
	mov	eax, DWORD PTR _FileTriggerNum
	sub	eax, 1
	cmp	DWORD PTR _i$[ebp], eax
	jge	SHORT $L81356

; 255  : 	{
; 256  : 		FileTriggers[i] = FileTriggers[i + 1];

	mov	esi, DWORD PTR _i$[ebp]
	add	esi, 1
	imul	esi, 68					; 00000044H
	add	esi, DWORD PTR _FileTriggers
	mov	edi, DWORD PTR _i$[ebp]
	imul	edi, 68					; 00000044H
	add	edi, DWORD PTR _FileTriggers
	mov	ecx, 17					; 00000011H
	rep movsd

; 257  : 	}

	jmp	SHORT $L81355
$L81356:

; 258  : 
; 259  : // dec num
; 260  : 
; 261  : 	FileTriggerNum--;

	mov	eax, DWORD PTR _FileTriggerNum
	sub	eax, 1
	mov	DWORD PTR _FileTriggerNum, eax

; 262  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?FreeFileTrigger@@YAXPAUFILE_TRIGGER@@@Z ENDP		; FreeFileTrigger
_TEXT	ENDS
PUBLIC	??_C@_02DKCKIIND@?$CFs?$AA@			; `string'
PUBLIC	?DrawTriggers@@YAXXZ				; DrawTriggers
PUBLIC	__real@42800000
PUBLIC	__real@41000000
EXTRN	?DrawAxis@@YAXPATMatrixUnion@@PAUVectorStruct@@@Z:NEAR ; DrawAxis
EXTRN	?ViewMatrix@@3TMatrixUnion@@A:BYTE		; ViewMatrix
EXTRN	?ViewTrans@@3UVectorStruct@@A:BYTE		; ViewTrans
EXTRN	?DrawLine@@YAXPAUVectorStruct@@0JJ@Z:NEAR	; DrawLine
EXTRN	?CAM_MainCamera@@3PAUCameraStruct@@A:DWORD	; CAM_MainCamera
EXTRN	?DumpText3D@@YAXPAUVectorStruct@@MMJPAD@Z:NEAR	; DumpText3D
EXTRN	?DxState@@3UDX_STATE@@A:BYTE			; DxState
EXTRN	?D3Ddevice@@3PAUIDirect3DDevice3@@A:DWORD	; D3Ddevice
EXTRN	?RenderStateChange@@3JA:DWORD			; RenderStateChange
EXTRN	?TextureStateChange@@3JA:DWORD			; TextureStateChange
EXTRN	?RenderTP@@3FA:WORD				; RenderTP
EXTRN	?RenderAlpha@@3FA:WORD				; RenderAlpha
EXTRN	?RenderAlphaSrc@@3FA:WORD			; RenderAlphaSrc
EXTRN	?RenderAlphaDest@@3FA:WORD			; RenderAlphaDest
EXTRN	?RenderZwrite@@3FA:WORD				; RenderZwrite
EXTRN	?RenderZbuffer@@3FA:WORD			; RenderZbuffer
EXTRN	?RotTransVector@@YAXPATMatrixUnion@@PAUVectorStruct@@11@Z:NEAR ; RotTransVector
EXTRN	?CopyMatrix@@YAXPATMatrixUnion@@0@Z:NEAR	; CopyMatrix
EXTRN	?MatMulScalar@@YAXPATMatrixUnion@@M@Z:NEAR	; MatMulScalar
EXTRN	?IdentityMatrix@@3TMatrixUnion@@A:BYTE		; IdentityMatrix
EXTRN	?FrameCount@@3KA:DWORD				; FrameCount
EXTRN	?RenderSettings@@3URENDER_SETTINGS@@A:BYTE	; RenderSettings
EXTRN	_strcmp:NEAR
EXTRN	?TexInfo@@3PAUTEXINFO@@A:DWORD			; TexInfo
EXTRN	?DrawNearClipPolyTEX0@@YAXPAUVectorStruct@@PAJJ@Z:NEAR ; DrawNearClipPolyTEX0
_BSS	SEGMENT
_FileTriggerAxisType DD 01H DUP (?)
_FileTriggerSide DD 01H DUP (?)
_BSS	ENDS
;	COMDAT ??_C@_02DKCKIIND@?$CFs?$AA@
CONST	SEGMENT
??_C@_02DKCKIIND@?$CFs?$AA@ DB '%s', 00H		; `string'
CONST	ENDS
;	COMDAT __real@42800000
CONST	SEGMENT
__real@42800000 DD 042800000r			; 64
CONST	ENDS
;	COMDAT __real@41000000
CONST	SEGMENT
__real@41000000 DD 041000000r			; 8
; Function compile flags: /Odt /ZI
CONST	ENDS
;	COMDAT ?DrawTriggers@@YAXXZ
_TEXT	SEGMENT
tv751 = -540						; size = 8
tv801 = -536						; size = 4
tv797 = -536						; size = 4
tv794 = -536						; size = 4
_buf$ = -468						; size = 128
_v4$ = -340						; size = 4
_v3$ = -336						; size = 4
_v2$ = -332						; size = 4
_v1$ = -328						; size = 4
_vec$ = -324						; size = 12
_mat$ = -312						; size = 36
_pos$ = -276						; size = 48
_vpos$ = -228						; size = 96
_v$ = -132						; size = 96
_time$ = -36						; size = 4
_trigger$ = -32						; size = 4
_col$ = -28						; size = 16
_k$ = -12						; size = 4
_j$ = -8						; size = 4
_i$ = -4						; size = 4
?DrawTriggers@@YAXXZ PROC NEAR				; DrawTriggers, COMDAT

; 269  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 540				; 0000021cH
	push	ebx
	push	esi
	push	edi

; 270  : 	long i, j, k, col[4];
; 271  : 	FILE_TRIGGER *trigger;
; 272  : 	REAL time;
; 273  : 	VEC v[8], vpos[8], pos[4];
; 274  : 	MAT mat;
; 275  : 	VEC vec, *v1, *v2, *v3, *v4;
; 276  : 	char buf[128];
; 277  : 
; 278  : // set render states
; 279  : 
; 280  : 	ALPHA_SRC(D3DBLEND_SRCALPHA);

	movsx	eax, WORD PTR ?RenderAlphaSrc@@3FA	; RenderAlphaSrc
	cmp	eax, 5
	je	SHORT $L81376
	mov	WORD PTR ?RenderAlphaSrc@@3FA, 5	; RenderAlphaSrc
	movsx	eax, WORD PTR ?RenderAlphaSrc@@3FA	; RenderAlphaSrc
	push	eax
	push	19					; 00000013H
	mov	ecx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	eax
	call	DWORD PTR [edx+88]
	mov	eax, DWORD PTR ?RenderStateChange@@3JA	; RenderStateChange
	add	eax, 1
	mov	DWORD PTR ?RenderStateChange@@3JA, eax	; RenderStateChange
$L81376:

; 281  : 	ALPHA_DEST(D3DBLEND_INVSRCALPHA);

	movsx	eax, WORD PTR ?RenderAlphaDest@@3FA	; RenderAlphaDest
	cmp	eax, 6
	je	SHORT $L81377
	mov	WORD PTR ?RenderAlphaDest@@3FA, 6	; RenderAlphaDest
	movsx	eax, WORD PTR ?RenderAlphaDest@@3FA	; RenderAlphaDest
	push	eax
	push	20					; 00000014H
	mov	ecx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	eax
	call	DWORD PTR [edx+88]
	mov	eax, DWORD PTR ?RenderStateChange@@3JA	; RenderStateChange
	add	eax, 1
	mov	DWORD PTR ?RenderStateChange@@3JA, eax	; RenderStateChange
$L81377:

; 282  : 	WIREFRAME_OFF();

	push	3
	push	8
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	edx
	call	DWORD PTR [ecx+88]
	mov	eax, DWORD PTR ?RenderStateChange@@3JA	; RenderStateChange
	add	eax, 1
	mov	DWORD PTR ?RenderStateChange@@3JA, eax	; RenderStateChange

; 283  : 	ZWRITE_OFF();

	movsx	eax, WORD PTR ?RenderZwrite@@3FA	; RenderZwrite
	test	eax, eax
	je	SHORT $L81378
	mov	WORD PTR ?RenderZwrite@@3FA, 0		; RenderZwrite
	movsx	eax, WORD PTR ?RenderZwrite@@3FA	; RenderZwrite
	push	eax
	push	14					; 0000000eH
	mov	ecx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	eax
	call	DWORD PTR [edx+88]
	mov	eax, DWORD PTR ?RenderStateChange@@3JA	; RenderStateChange
	add	eax, 1
	mov	DWORD PTR ?RenderStateChange@@3JA, eax	; RenderStateChange
$L81378:

; 284  : 
; 285  : // loop thru all triggers
; 286  : 
; 287  : 	trigger = FileTriggers;

	mov	eax, DWORD PTR _FileTriggers
	mov	DWORD PTR _trigger$[ebp], eax

; 288  : 	for (i = 0 ; i < FileTriggerNum ; i++, trigger++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $L81379
$L81380:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	mov	ecx, DWORD PTR _trigger$[ebp]
	add	ecx, 68					; 00000044H
	mov	DWORD PTR _trigger$[ebp], ecx
$L81379:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _FileTriggerNum
	jge	$L81381

; 289  : 	{
; 290  : 
; 291  : // get 8 corners
; 292  : 
; 293  : 		SetVector(&v[0], -trigger->Size[X], -trigger->Size[Y], -trigger->Size[Z]);

	mov	eax, DWORD PTR _trigger$[ebp]
	fld	DWORD PTR [eax+56]
	fchs
	fstp	DWORD PTR _v$[ebp]
	mov	eax, DWORD PTR _trigger$[ebp]
	fld	DWORD PTR [eax+60]
	fchs
	fstp	DWORD PTR _v$[ebp+4]
	mov	eax, DWORD PTR _trigger$[ebp]
	fld	DWORD PTR [eax+64]
	fchs
	fstp	DWORD PTR _v$[ebp+8]

; 294  : 		SetVector(&v[1], trigger->Size[X], -trigger->Size[Y], -trigger->Size[Z]);

	mov	eax, DWORD PTR _trigger$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	DWORD PTR _v$[ebp+12], ecx
	mov	eax, DWORD PTR _trigger$[ebp]
	fld	DWORD PTR [eax+60]
	fchs
	fstp	DWORD PTR _v$[ebp+16]
	mov	eax, DWORD PTR _trigger$[ebp]
	fld	DWORD PTR [eax+64]
	fchs
	fstp	DWORD PTR _v$[ebp+20]

; 295  : 		SetVector(&v[2], -trigger->Size[X], -trigger->Size[Y], trigger->Size[Z]);

	mov	eax, DWORD PTR _trigger$[ebp]
	fld	DWORD PTR [eax+56]
	fchs
	fstp	DWORD PTR _v$[ebp+24]
	mov	eax, DWORD PTR _trigger$[ebp]
	fld	DWORD PTR [eax+60]
	fchs
	fstp	DWORD PTR _v$[ebp+28]
	mov	eax, DWORD PTR _trigger$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	mov	DWORD PTR _v$[ebp+32], ecx

; 296  : 		SetVector(&v[3], trigger->Size[X], -trigger->Size[Y], trigger->Size[Z]);

	mov	eax, DWORD PTR _trigger$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	DWORD PTR _v$[ebp+36], ecx
	mov	eax, DWORD PTR _trigger$[ebp]
	fld	DWORD PTR [eax+60]
	fchs
	fstp	DWORD PTR _v$[ebp+40]
	mov	eax, DWORD PTR _trigger$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	mov	DWORD PTR _v$[ebp+44], ecx

; 297  : 
; 298  : 		SetVector(&v[4], -trigger->Size[X], trigger->Size[Y], -trigger->Size[Z]);

	mov	eax, DWORD PTR _trigger$[ebp]
	fld	DWORD PTR [eax+56]
	fchs
	fstp	DWORD PTR _v$[ebp+48]
	mov	eax, DWORD PTR _trigger$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	mov	DWORD PTR _v$[ebp+52], ecx
	mov	eax, DWORD PTR _trigger$[ebp]
	fld	DWORD PTR [eax+64]
	fchs
	fstp	DWORD PTR _v$[ebp+56]

; 299  : 		SetVector(&v[5], trigger->Size[X], trigger->Size[Y], -trigger->Size[Z]);

	mov	eax, DWORD PTR _trigger$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	DWORD PTR _v$[ebp+60], ecx
	mov	eax, DWORD PTR _trigger$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	mov	DWORD PTR _v$[ebp+64], ecx
	mov	eax, DWORD PTR _trigger$[ebp]
	fld	DWORD PTR [eax+64]
	fchs
	fstp	DWORD PTR _v$[ebp+68]

; 300  : 		SetVector(&v[6], -trigger->Size[X], trigger->Size[Y], trigger->Size[Z]);

	mov	eax, DWORD PTR _trigger$[ebp]
	fld	DWORD PTR [eax+56]
	fchs
	fstp	DWORD PTR _v$[ebp+72]
	mov	eax, DWORD PTR _trigger$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	mov	DWORD PTR _v$[ebp+76], ecx
	mov	eax, DWORD PTR _trigger$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	mov	DWORD PTR _v$[ebp+80], ecx

; 301  : 		SetVector(&v[7], trigger->Size[X], trigger->Size[Y], trigger->Size[Z]);

	mov	eax, DWORD PTR _trigger$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	DWORD PTR _v$[ebp+84], ecx
	mov	eax, DWORD PTR _trigger$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	mov	DWORD PTR _v$[ebp+88], ecx
	mov	eax, DWORD PTR _trigger$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	mov	DWORD PTR _v$[ebp+92], ecx

; 302  : 
; 303  : 		for (j = 0 ; j < 8 ; j++)

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $L81382
$L81383:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$L81382:
	cmp	DWORD PTR _j$[ebp], 8
	jge	SHORT $L81384

; 304  : 		{
; 305  : 			RotTransVector(&trigger->Matrix, &trigger->Pos, &v[j], &vpos[j]);

	mov	eax, DWORD PTR _j$[ebp]
	imul	eax, 12					; 0000000cH
	lea	ecx, DWORD PTR _vpos$[ebp+eax]
	push	ecx
	mov	edx, DWORD PTR _j$[ebp]
	imul	edx, 12					; 0000000cH
	lea	eax, DWORD PTR _v$[ebp+edx]
	push	eax
	mov	ecx, DWORD PTR _trigger$[ebp]
	add	ecx, 8
	push	ecx
	mov	edx, DWORD PTR _trigger$[ebp]
	add	edx, 20					; 00000014H
	push	edx
	call	?RotTransVector@@YAXPATMatrixUnion@@PAUVectorStruct@@11@Z ; RotTransVector
	add	esp, 16					; 00000010H

; 306  : 		}

	jmp	SHORT $L81383
$L81384:

; 307  : 
; 308  : // draw
; 309  : 
; 310  : 		SET_TPAGE(-1);

	movsx	eax, WORD PTR ?RenderTP@@3FA		; RenderTP
	cmp	eax, -1
	je	SHORT $L81385
	mov	WORD PTR ?RenderTP@@3FA, -1		; RenderTP
	movsx	eax, WORD PTR ?RenderTP@@3FA		; RenderTP
	cmp	eax, -1
	jne	SHORT $L81386
	push	0
	push	0
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	edx
	call	DWORD PTR [ecx+152]
	mov	eax, DWORD PTR ?TextureStateChange@@3JA	; TextureStateChange
	add	eax, 1
	mov	DWORD PTR ?TextureStateChange@@3JA, eax	; TextureStateChange
	jmp	SHORT $L81385
$L81386:
	movsx	eax, WORD PTR ?RenderTP@@3FA		; RenderTP
	shl	eax, 6
	mov	ecx, DWORD PTR ?TexInfo@@3PAUTEXINFO@@A	; TexInfo
	mov	edx, DWORD PTR [ecx+eax+52]
	push	edx
	push	0
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	edx
	call	DWORD PTR [ecx+152]
	mov	eax, DWORD PTR ?TextureStateChange@@3JA	; TextureStateChange
	add	eax, 1
	mov	DWORD PTR ?TextureStateChange@@3JA, eax	; TextureStateChange
$L81385:

; 311  : 		ALPHA_ON();

	movsx	eax, WORD PTR ?RenderAlpha@@3FA		; RenderAlpha
	test	eax, eax
	jne	SHORT $L81388
	mov	WORD PTR ?RenderAlpha@@3FA, 1		; RenderAlpha
	movsx	eax, WORD PTR ?RenderAlpha@@3FA		; RenderAlpha
	push	eax
	push	27					; 0000001bH
	mov	ecx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	eax
	call	DWORD PTR [edx+88]
	mov	eax, DWORD PTR ?RenderStateChange@@3JA	; RenderStateChange
	add	eax, 1
	mov	DWORD PTR ?RenderStateChange@@3JA, eax	; RenderStateChange
$L81388:

; 312  : 		ZBUFFER_ON();

	movsx	eax, WORD PTR ?RenderZbuffer@@3FA	; RenderZbuffer
	cmp	eax, 1
	je	SHORT $L81389
	mov	WORD PTR ?RenderZbuffer@@3FA, 1		; RenderZbuffer
	movsx	eax, WORD PTR ?RenderZbuffer@@3FA	; RenderZbuffer
	push	eax
	push	7
	mov	ecx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	eax
	call	DWORD PTR [edx+88]
	mov	eax, DWORD PTR ?RenderStateChange@@3JA	; RenderStateChange
	add	eax, 1
	mov	DWORD PTR ?RenderStateChange@@3JA, eax	; RenderStateChange
$L81389:

; 313  : 
; 314  : 		for (j = 0 ; j < 6 ; j++)

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $L81390
$L81391:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$L81390:
	cmp	DWORD PTR _j$[ebp], 6
	jge	$L81392

; 315  : 		{
; 316  : 			for (k = 0 ; k < 4 ; k++)

	mov	DWORD PTR _k$[ebp], 0
	jmp	SHORT $L81393
$L81394:
	mov	eax, DWORD PTR _k$[ebp]
	add	eax, 1
	mov	DWORD PTR _k$[ebp], eax
$L81393:
	cmp	DWORD PTR _k$[ebp], 4
	jge	$L81395

; 317  : 			{
; 318  : 				pos[k] = vpos[DrawTriggerIndex[j * 4 + k]];

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _k$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	movzx	eax, WORD PTR _DrawTriggerIndex[edx*2]
	imul	eax, 12					; 0000000cH
	lea	ecx, DWORD PTR _vpos$[ebp+eax]
	mov	edx, DWORD PTR _k$[ebp]
	imul	edx, 12					; 0000000cH
	lea	eax, DWORD PTR _pos$[ebp+edx]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], ecx

; 319  : 
; 320  : 				if (CurrentTrigger == trigger && j == FileTriggerSide)

	mov	eax, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	cmp	eax, DWORD PTR _trigger$[ebp]
	jne	SHORT $L81396
	mov	eax, DWORD PTR _j$[ebp]
	cmp	eax, DWORD PTR _FileTriggerSide
	jne	SHORT $L81396

; 321  : 					col[k] = 0x80ffffff * (FrameCount & 1);

	mov	eax, DWORD PTR ?FrameCount@@3KA		; FrameCount
	and	eax, 1
	imul	eax, -2130706433			; 80ffffffH
	mov	ecx, DWORD PTR _k$[ebp]
	mov	DWORD PTR _col$[ebp+ecx*4], eax

; 322  : 				else

	jmp	SHORT $L81397
$L81396:

; 323  : 					col[k] = DrawTriggerCol[trigger->ID % 6];

	mov	eax, DWORD PTR _trigger$[ebp]
	mov	eax, DWORD PTR [eax]
	cdq
	mov	ecx, 6
	idiv	ecx
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _DrawTriggerCol[edx*4]
	mov	DWORD PTR _col$[ebp+eax*4], ecx
$L81397:

; 324  : 			}

	jmp	$L81394
$L81395:

; 325  : 
; 326  : 		DrawNearClipPolyTEX0(pos, col, 4);

	push	4
	lea	eax, DWORD PTR _col$[ebp]
	push	eax
	lea	ecx, DWORD PTR _pos$[ebp]
	push	ecx
	call	?DrawNearClipPolyTEX0@@YAXPAUVectorStruct@@PAJJ@Z ; DrawNearClipPolyTEX0
	add	esp, 12					; 0000000cH

; 327  : 		}

	jmp	$L81391
$L81392:

; 328  : 
; 329  : // display name
; 330  : 
; 331  : 		wsprintf(buf, "%s", TriggerNames[trigger->ID]);

	mov	eax, DWORD PTR _trigger$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _TriggerNames[ecx*4]
	push	edx
	push	OFFSET FLAT:??_C@_02DKCKIIND@?$CFs?$AA@
	lea	eax, DWORD PTR _buf$[ebp]
	push	eax
	call	DWORD PTR __imp__wsprintfA
	add	esp, 12					; 0000000cH

; 332  : 		RotTransVector(&ViewMatrix, &ViewTrans, &trigger->Pos, &vec);

	lea	eax, DWORD PTR _vec$[ebp]
	push	eax
	mov	ecx, DWORD PTR _trigger$[ebp]
	add	ecx, 8
	push	ecx
	push	OFFSET FLAT:?ViewTrans@@3UVectorStruct@@A ; ViewTrans
	push	OFFSET FLAT:?ViewMatrix@@3TMatrixUnion@@A ; ViewMatrix
	call	?RotTransVector@@YAXPATMatrixUnion@@PAUVectorStruct@@11@Z ; RotTransVector
	add	esp, 16					; 00000010H

; 333  : 		vec.v[X] -= 32 * strlen(TriggerNames[trigger->ID]);

	mov	eax, DWORD PTR _trigger$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _TriggerNames[ecx*4]
	push	edx
	call	_strlen
	add	esp, 4
	shl	eax, 5
	mov	DWORD PTR tv751[ebp], eax
	mov	DWORD PTR tv751[ebp+4], 0
	fild	QWORD PTR tv751[ebp]
	fsubr	DWORD PTR _vec$[ebp]
	fstp	DWORD PTR _vec$[ebp]

; 334  : 		vec.v[Y] -= 64;

	fld	DWORD PTR _vec$[ebp+4]
	fsub	DWORD PTR __real@42800000
	fstp	DWORD PTR _vec$[ebp+4]

; 335  : 		if (vec.v[Z] > RenderSettings.NearClip)

	fld	DWORD PTR _vec$[ebp+8]
	fcomp	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+28
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	$L81399

; 336  : 		{
; 337  : 			ALPHA_OFF();

	movsx	eax, WORD PTR ?RenderAlpha@@3FA		; RenderAlpha
	test	eax, eax
	je	SHORT $L81400
	mov	WORD PTR ?RenderAlpha@@3FA, 0		; RenderAlpha
	movsx	eax, WORD PTR ?RenderAlpha@@3FA		; RenderAlpha
	push	eax
	push	27					; 0000001bH
	mov	ecx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	eax
	call	DWORD PTR [edx+88]
	mov	eax, DWORD PTR ?RenderStateChange@@3JA	; RenderStateChange
	add	eax, 1
	mov	DWORD PTR ?RenderStateChange@@3JA, eax	; RenderStateChange
$L81400:

; 338  : 			ZBUFFER_OFF();

	movsx	eax, WORD PTR ?RenderZbuffer@@3FA	; RenderZbuffer
	test	eax, eax
	je	SHORT $L81401
	mov	WORD PTR ?RenderZbuffer@@3FA, 0		; RenderZbuffer
	movsx	eax, WORD PTR ?RenderZbuffer@@3FA	; RenderZbuffer
	push	eax
	push	7
	mov	ecx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	eax
	call	DWORD PTR [edx+88]
	mov	eax, DWORD PTR ?RenderStateChange@@3JA	; RenderStateChange
	add	eax, 1
	mov	DWORD PTR ?RenderStateChange@@3JA, eax	; RenderStateChange
$L81401:

; 339  : 			DumpText3D(&vec, 64, 128, 0x00ffff, buf);

	lea	eax, DWORD PTR _buf$[ebp]
	push	eax
	push	65535					; 0000ffffH
	push	1124073472				; 43000000H
	push	1115684864				; 42800000H
	lea	ecx, DWORD PTR _vec$[ebp]
	push	ecx
	call	?DumpText3D@@YAXPAUVectorStruct@@MMJPAD@Z ; DumpText3D
	add	esp, 20					; 00000014H
$L81399:

; 340  : 		}
; 341  : 
; 342  : // draw axis?
; 343  : 
; 344  : 		if (CurrentTrigger == trigger)

	mov	eax, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	cmp	eax, DWORD PTR _trigger$[ebp]
	jne	$L81402

; 345  : 		{
; 346  : 			ALPHA_OFF();

	movsx	eax, WORD PTR ?RenderAlpha@@3FA		; RenderAlpha
	test	eax, eax
	je	SHORT $L81403
	mov	WORD PTR ?RenderAlpha@@3FA, 0		; RenderAlpha
	movsx	eax, WORD PTR ?RenderAlpha@@3FA		; RenderAlpha
	push	eax
	push	27					; 0000001bH
	mov	ecx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	eax
	call	DWORD PTR [edx+88]
	mov	eax, DWORD PTR ?RenderStateChange@@3JA	; RenderStateChange
	add	eax, 1
	mov	DWORD PTR ?RenderStateChange@@3JA, eax	; RenderStateChange
$L81403:

; 347  : 			ZBUFFER_OFF();

	movsx	eax, WORD PTR ?RenderZbuffer@@3FA	; RenderZbuffer
	test	eax, eax
	je	SHORT $L81404
	mov	WORD PTR ?RenderZbuffer@@3FA, 0		; RenderZbuffer
	movsx	eax, WORD PTR ?RenderZbuffer@@3FA	; RenderZbuffer
	push	eax
	push	7
	mov	ecx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	eax
	call	DWORD PTR [edx+88]
	mov	eax, DWORD PTR ?RenderStateChange@@3JA	; RenderStateChange
	add	eax, 1
	mov	DWORD PTR ?RenderStateChange@@3JA, eax	; RenderStateChange
$L81404:

; 348  : 
; 349  : 			if (FileTriggerAxisType)

	cmp	DWORD PTR _FileTriggerAxisType, 0
	je	SHORT $L81405

; 350  : 				CopyMatrix(&IdentityMatrix, &mat);

	lea	eax, DWORD PTR _mat$[ebp]
	push	eax
	push	OFFSET FLAT:?IdentityMatrix@@3TMatrixUnion@@A ; IdentityMatrix
	call	?CopyMatrix@@YAXPATMatrixUnion@@0@Z	; CopyMatrix
	add	esp, 8

; 351  : 			else

	jmp	SHORT $L81406
$L81405:

; 352  : 				CopyMatrix(&CAM_MainCamera->WMatrix, &mat);

	lea	eax, DWORD PTR _mat$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	add	ecx, 16					; 00000010H
	push	ecx
	call	?CopyMatrix@@YAXPATMatrixUnion@@0@Z	; CopyMatrix
	add	esp, 8
$L81406:

; 353  : 
; 354  : 			MatMulScalar(&mat, 2.0f);

	push	1073741824				; 40000000H
	lea	eax, DWORD PTR _mat$[ebp]
	push	eax
	call	?MatMulScalar@@YAXPATMatrixUnion@@M@Z	; MatMulScalar
	add	esp, 8

; 355  : 			DrawAxis(&mat, &trigger->Pos);

	mov	eax, DWORD PTR _trigger$[ebp]
	add	eax, 8
	push	eax
	lea	ecx, DWORD PTR _mat$[ebp]
	push	ecx
	call	?DrawAxis@@YAXPATMatrixUnion@@PAUVectorStruct@@@Z ; DrawAxis
	add	esp, 8
$L81402:

; 356  : 		}
; 357  : 
; 358  : // draw 'special case' AI home line
; 359  : 
; 360  : 		if (!strcmp(TriggerNames[trigger->ID], "AI Home"))

	push	OFFSET FLAT:??_C@_07PKJGOEDF@AI?5Home?$AA@
	mov	eax, DWORD PTR _trigger$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _TriggerNames[ecx*4]
	push	edx
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	$L81407

; 361  : 		{
; 362  : 			trigger->Flag &= 31;

	mov	eax, DWORD PTR _trigger$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	and	ecx, 31					; 0000001fH
	mov	edx, DWORD PTR _trigger$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 363  : 
; 364  : 			if (trigger->Flag < 8)

	mov	eax, DWORD PTR _trigger$[ebp]
	cmp	DWORD PTR [eax+4], 8
	jge	SHORT $L81408

; 365  : 			{
; 366  : 				v1 = &v[0];

	lea	eax, DWORD PTR _v$[ebp]
	mov	DWORD PTR _v1$[ebp], eax

; 367  : 				v2 = &v[2];

	lea	eax, DWORD PTR _v$[ebp+24]
	mov	DWORD PTR _v2$[ebp], eax

; 368  : 				v3 = &v[4];

	lea	eax, DWORD PTR _v$[ebp+48]
	mov	DWORD PTR _v3$[ebp], eax

; 369  : 				v4 = &v[6];

	lea	eax, DWORD PTR _v$[ebp+72]
	mov	DWORD PTR _v4$[ebp], eax

; 370  : 				time = (float)trigger->Flag / 8.0f;

	mov	eax, DWORD PTR _trigger$[ebp]
	fild	DWORD PTR [eax+4]
	fdiv	DWORD PTR __real@41000000
	fstp	DWORD PTR _time$[ebp]

; 371  : 			}
; 372  : 			else if (trigger->Flag < 16)

	jmp	$L81410
$L81408:
	mov	eax, DWORD PTR _trigger$[ebp]
	cmp	DWORD PTR [eax+4], 16			; 00000010H
	jge	SHORT $L81411

; 373  : 			{
; 374  : 				v1 = &v[2];

	lea	eax, DWORD PTR _v$[ebp+24]
	mov	DWORD PTR _v1$[ebp], eax

; 375  : 				v2 = &v[3];

	lea	eax, DWORD PTR _v$[ebp+36]
	mov	DWORD PTR _v2$[ebp], eax

; 376  : 				v3 = &v[6];

	lea	eax, DWORD PTR _v$[ebp+72]
	mov	DWORD PTR _v3$[ebp], eax

; 377  : 				v4 = &v[7];

	lea	eax, DWORD PTR _v$[ebp+84]
	mov	DWORD PTR _v4$[ebp], eax

; 378  : 				time = (float)(trigger->Flag - 8) / 8.0f;

	mov	eax, DWORD PTR _trigger$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, 8
	mov	DWORD PTR tv794[ebp], ecx
	fild	DWORD PTR tv794[ebp]
	fdiv	DWORD PTR __real@41000000
	fstp	DWORD PTR _time$[ebp]

; 379  : 			}
; 380  : 			else if (trigger->Flag < 24)

	jmp	$L81410
$L81411:
	mov	eax, DWORD PTR _trigger$[ebp]
	cmp	DWORD PTR [eax+4], 24			; 00000018H
	jge	SHORT $L81414

; 381  : 			{
; 382  : 				v1 = &v[3];

	lea	eax, DWORD PTR _v$[ebp+36]
	mov	DWORD PTR _v1$[ebp], eax

; 383  : 				v2 = &v[1];

	lea	eax, DWORD PTR _v$[ebp+12]
	mov	DWORD PTR _v2$[ebp], eax

; 384  : 				v3 = &v[7];

	lea	eax, DWORD PTR _v$[ebp+84]
	mov	DWORD PTR _v3$[ebp], eax

; 385  : 				v4 = &v[5];

	lea	eax, DWORD PTR _v$[ebp+60]
	mov	DWORD PTR _v4$[ebp], eax

; 386  : 				time = (float)(trigger->Flag - 16) / 8.0f;

	mov	eax, DWORD PTR _trigger$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, 16					; 00000010H
	mov	DWORD PTR tv797[ebp], ecx
	fild	DWORD PTR tv797[ebp]
	fdiv	DWORD PTR __real@41000000
	fstp	DWORD PTR _time$[ebp]

; 387  : 			}
; 388  : 			else if (trigger->Flag < 32)

	jmp	SHORT $L81410
$L81414:
	mov	eax, DWORD PTR _trigger$[ebp]
	cmp	DWORD PTR [eax+4], 32			; 00000020H
	jge	SHORT $L81410

; 389  : 			{
; 390  : 				v1 = &v[1];

	lea	eax, DWORD PTR _v$[ebp+12]
	mov	DWORD PTR _v1$[ebp], eax

; 391  : 				v2 = &v[0];

	lea	eax, DWORD PTR _v$[ebp]
	mov	DWORD PTR _v2$[ebp], eax

; 392  : 				v3 = &v[5];

	lea	eax, DWORD PTR _v$[ebp+60]
	mov	DWORD PTR _v3$[ebp], eax

; 393  : 				v4 = &v[4];

	lea	eax, DWORD PTR _v$[ebp+48]
	mov	DWORD PTR _v4$[ebp], eax

; 394  : 				time = (float)(trigger->Flag - 24) / 8.0f;

	mov	eax, DWORD PTR _trigger$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, 24					; 00000018H
	mov	DWORD PTR tv801[ebp], ecx
	fild	DWORD PTR tv801[ebp]
	fdiv	DWORD PTR __real@41000000
	fstp	DWORD PTR _time$[ebp]
$L81410:

; 395  : 			}
; 396  : 
; 397  : 			v[0].v[X] = v1->v[X] + (v2->v[X] - v1->v[X]) * time;

	mov	eax, DWORD PTR _v2$[ebp]
	mov	ecx, DWORD PTR _v1$[ebp]
	fld	DWORD PTR [eax]
	fsub	DWORD PTR [ecx]
	fmul	DWORD PTR _time$[ebp]
	mov	edx, DWORD PTR _v1$[ebp]
	fadd	DWORD PTR [edx]
	fstp	DWORD PTR _v$[ebp]

; 398  : 			v[0].v[Y] = v1->v[Y] + (v2->v[Y] - v1->v[Y]) * time;

	mov	eax, DWORD PTR _v2$[ebp]
	mov	ecx, DWORD PTR _v1$[ebp]
	fld	DWORD PTR [eax+4]
	fsub	DWORD PTR [ecx+4]
	fmul	DWORD PTR _time$[ebp]
	mov	edx, DWORD PTR _v1$[ebp]
	fadd	DWORD PTR [edx+4]
	fstp	DWORD PTR _v$[ebp+4]

; 399  : 			v[0].v[Z] = v1->v[Z] + (v2->v[Z] - v1->v[Z]) * time;

	mov	eax, DWORD PTR _v2$[ebp]
	mov	ecx, DWORD PTR _v1$[ebp]
	fld	DWORD PTR [eax+8]
	fsub	DWORD PTR [ecx+8]
	fmul	DWORD PTR _time$[ebp]
	mov	edx, DWORD PTR _v1$[ebp]
	fadd	DWORD PTR [edx+8]
	fstp	DWORD PTR _v$[ebp+8]

; 400  : 
; 401  : 			v[1].v[X] = v3->v[X] + (v4->v[X] - v3->v[X]) * time;

	mov	eax, DWORD PTR _v4$[ebp]
	mov	ecx, DWORD PTR _v3$[ebp]
	fld	DWORD PTR [eax]
	fsub	DWORD PTR [ecx]
	fmul	DWORD PTR _time$[ebp]
	mov	edx, DWORD PTR _v3$[ebp]
	fadd	DWORD PTR [edx]
	fstp	DWORD PTR _v$[ebp+12]

; 402  : 			v[1].v[Y] = v3->v[Y] + (v4->v[Y] - v3->v[Y]) * time;

	mov	eax, DWORD PTR _v4$[ebp]
	mov	ecx, DWORD PTR _v3$[ebp]
	fld	DWORD PTR [eax+4]
	fsub	DWORD PTR [ecx+4]
	fmul	DWORD PTR _time$[ebp]
	mov	edx, DWORD PTR _v3$[ebp]
	fadd	DWORD PTR [edx+4]
	fstp	DWORD PTR _v$[ebp+16]

; 403  : 			v[1].v[Z] = v3->v[Z] + (v4->v[Z] - v3->v[Z]) * time;

	mov	eax, DWORD PTR _v4$[ebp]
	mov	ecx, DWORD PTR _v3$[ebp]
	fld	DWORD PTR [eax+8]
	fsub	DWORD PTR [ecx+8]
	fmul	DWORD PTR _time$[ebp]
	mov	edx, DWORD PTR _v3$[ebp]
	fadd	DWORD PTR [edx+8]
	fstp	DWORD PTR _v$[ebp+20]

; 404  : 
; 405  : 			RotTransVector(&trigger->Matrix, &trigger->Pos, &v[0], &v[2]);

	lea	eax, DWORD PTR _v$[ebp+24]
	push	eax
	lea	ecx, DWORD PTR _v$[ebp]
	push	ecx
	mov	edx, DWORD PTR _trigger$[ebp]
	add	edx, 8
	push	edx
	mov	eax, DWORD PTR _trigger$[ebp]
	add	eax, 20					; 00000014H
	push	eax
	call	?RotTransVector@@YAXPATMatrixUnion@@PAUVectorStruct@@11@Z ; RotTransVector
	add	esp, 16					; 00000010H

; 406  : 			RotTransVector(&trigger->Matrix, &trigger->Pos, &v[1], &v[3]);

	lea	eax, DWORD PTR _v$[ebp+36]
	push	eax
	lea	ecx, DWORD PTR _v$[ebp+12]
	push	ecx
	mov	edx, DWORD PTR _trigger$[ebp]
	add	edx, 8
	push	edx
	mov	eax, DWORD PTR _trigger$[ebp]
	add	eax, 20					; 00000014H
	push	eax
	call	?RotTransVector@@YAXPATMatrixUnion@@PAUVectorStruct@@11@Z ; RotTransVector
	add	esp, 16					; 00000010H

; 407  : 
; 408  : 			ALPHA_OFF();

	movsx	eax, WORD PTR ?RenderAlpha@@3FA		; RenderAlpha
	test	eax, eax
	je	SHORT $L81419
	mov	WORD PTR ?RenderAlpha@@3FA, 0		; RenderAlpha
	movsx	eax, WORD PTR ?RenderAlpha@@3FA		; RenderAlpha
	push	eax
	push	27					; 0000001bH
	mov	ecx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	eax
	call	DWORD PTR [edx+88]
	mov	eax, DWORD PTR ?RenderStateChange@@3JA	; RenderStateChange
	add	eax, 1
	mov	DWORD PTR ?RenderStateChange@@3JA, eax	; RenderStateChange
$L81419:

; 409  : 			ZBUFFER_OFF();

	movsx	eax, WORD PTR ?RenderZbuffer@@3FA	; RenderZbuffer
	test	eax, eax
	je	SHORT $L81420
	mov	WORD PTR ?RenderZbuffer@@3FA, 0		; RenderZbuffer
	movsx	eax, WORD PTR ?RenderZbuffer@@3FA	; RenderZbuffer
	push	eax
	push	7
	mov	ecx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	eax
	call	DWORD PTR [edx+88]
	mov	eax, DWORD PTR ?RenderStateChange@@3JA	; RenderStateChange
	add	eax, 1
	mov	DWORD PTR ?RenderStateChange@@3JA, eax	; RenderStateChange
$L81420:

; 410  : 
; 411  : 			DrawLine(&v[2], &v[3], 0x00ff00, 0x00ff00);

	push	65280					; 0000ff00H
	push	65280					; 0000ff00H
	lea	eax, DWORD PTR _v$[ebp+36]
	push	eax
	lea	ecx, DWORD PTR _v$[ebp+24]
	push	ecx
	call	?DrawLine@@YAXPAUVectorStruct@@0JJ@Z	; DrawLine
	add	esp, 16					; 00000010H
$L81407:

; 412  : 		}
; 413  : 	}

	jmp	$L81380
$L81381:

; 414  : 
; 415  : // reset render states
; 416  : 
; 417  : 	WIREFRAME_ON();

	mov	eax, DWORD PTR ?DxState@@3UDX_STATE@@A+4
	push	eax
	push	8
	mov	ecx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	eax
	call	DWORD PTR [edx+88]
	mov	eax, DWORD PTR ?RenderStateChange@@3JA	; RenderStateChange
	add	eax, 1
	mov	DWORD PTR ?RenderStateChange@@3JA, eax	; RenderStateChange

; 418  : 	ZBUFFER_ON();

	movsx	eax, WORD PTR ?RenderZbuffer@@3FA	; RenderZbuffer
	cmp	eax, 1
	je	SHORT $L81421
	mov	WORD PTR ?RenderZbuffer@@3FA, 1		; RenderZbuffer
	movsx	eax, WORD PTR ?RenderZbuffer@@3FA	; RenderZbuffer
	push	eax
	push	7
	mov	ecx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	eax
	call	DWORD PTR [edx+88]
	mov	eax, DWORD PTR ?RenderStateChange@@3JA	; RenderStateChange
	add	eax, 1
	mov	DWORD PTR ?RenderStateChange@@3JA, eax	; RenderStateChange
$L81421:

; 419  : 	ZWRITE_ON();

	movsx	eax, WORD PTR ?RenderZwrite@@3FA	; RenderZwrite
	test	eax, eax
	jne	SHORT $L81422
	mov	WORD PTR ?RenderZwrite@@3FA, 1		; RenderZwrite
	movsx	eax, WORD PTR ?RenderZwrite@@3FA	; RenderZwrite
	push	eax
	push	14					; 0000000eH
	mov	ecx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	eax
	call	DWORD PTR [edx+88]
	mov	eax, DWORD PTR ?RenderStateChange@@3JA	; RenderStateChange
	add	eax, 1
	mov	DWORD PTR ?RenderStateChange@@3JA, eax	; RenderStateChange
$L81422:

; 420  : 	ALPHA_OFF();

	movsx	eax, WORD PTR ?RenderAlpha@@3FA		; RenderAlpha
	test	eax, eax
	je	SHORT $L81359
	mov	WORD PTR ?RenderAlpha@@3FA, 0		; RenderAlpha
	movsx	eax, WORD PTR ?RenderAlpha@@3FA		; RenderAlpha
	push	eax
	push	27					; 0000001bH
	mov	ecx, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?D3Ddevice@@3PAUIDirect3DDevice3@@A ; D3Ddevice
	push	eax
	call	DWORD PTR [edx+88]
	mov	eax, DWORD PTR ?RenderStateChange@@3JA	; RenderStateChange
	add	eax, 1
	mov	DWORD PTR ?RenderStateChange@@3JA, eax	; RenderStateChange
$L81359:

; 421  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?DrawTriggers@@YAXXZ ENDP				; DrawTriggers
_TEXT	ENDS
PUBLIC	??_C@_07EOKGDPFJ@Flag?5?$CFd?$AA@		; `string'
PUBLIC	??_C@_07ELCFLLMP@Flag?5?$CFs?$AA@		; `string'
PUBLIC	??_C@_0N@MOINFLNL@Axis?5?$CFs?5?9?5?$CFs?$AA@	; `string'
PUBLIC	?DisplayTriggerInfo@@YAXPAUFILE_TRIGGER@@@Z	; DisplayTriggerInfo
EXTRN	?DumpText@@YAXFFFFJPAD@Z:NEAR			; DumpText
_BSS	SEGMENT
_FileTriggerAxis DD 01H DUP (?)
_BSS	ENDS
;	COMDAT ??_C@_07EOKGDPFJ@Flag?5?$CFd?$AA@
CONST	SEGMENT
??_C@_07EOKGDPFJ@Flag?5?$CFd?$AA@ DB 'Flag %d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07ELCFLLMP@Flag?5?$CFs?$AA@
CONST	SEGMENT
??_C@_07ELCFLLMP@Flag?5?$CFs?$AA@ DB 'Flag %s', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@MOINFLNL@Axis?5?$CFs?5?9?5?$CFs?$AA@
CONST	SEGMENT
??_C@_0N@MOINFLNL@Axis?5?$CFs?5?9?5?$CFs?$AA@ DB 'Axis %s - %s', 00H ; `string'
; Function compile flags: /Odt /ZI
CONST	ENDS
;	COMDAT ?DisplayTriggerInfo@@YAXPAUFILE_TRIGGER@@@Z
_TEXT	SEGMENT
_buf$ = -128						; size = 128
_trigger$ = 8						; size = 4
?DisplayTriggerInfo@@YAXPAUFILE_TRIGGER@@@Z PROC NEAR	; DisplayTriggerInfo, COMDAT

; 428  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi

; 429  : 	char buf[128];
; 430  : 
; 431  : // ID
; 432  : 
; 433  : 	wsprintf(buf, "%s", TriggerNames[trigger->ID]);

	mov	eax, DWORD PTR _trigger$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _TriggerNames[ecx*4]
	push	edx
	push	OFFSET FLAT:??_C@_02DKCKIIND@?$CFs?$AA@
	lea	eax, DWORD PTR _buf$[ebp]
	push	eax
	call	DWORD PTR __imp__wsprintfA
	add	esp, 12					; 0000000cH

; 434  : 	DumpText(450, 0, 8, 16, 0xffff00, buf);

	lea	eax, DWORD PTR _buf$[ebp]
	push	eax
	push	16776960				; 00ffff00H
	push	16					; 00000010H
	push	8
	push	0
	push	450					; 000001c2H
	call	?DumpText@@YAXFFFFJPAD@Z		; DumpText
	add	esp, 24					; 00000018H

; 435  : 
; 436  : // Flag
; 437  : 
; 438  : 	if (!TriggerEnums[trigger->ID])

	mov	eax, DWORD PTR _trigger$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	DWORD PTR _TriggerEnums[ecx*4], 0
	jne	SHORT $L81428

; 439  : 	{
; 440  : 		wsprintf(buf, "Flag %d", trigger->Flag);

	mov	eax, DWORD PTR _trigger$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	push	OFFSET FLAT:??_C@_07EOKGDPFJ@Flag?5?$CFd?$AA@
	lea	edx, DWORD PTR _buf$[ebp]
	push	edx
	call	DWORD PTR __imp__wsprintfA
	add	esp, 12					; 0000000cH

; 441  : 		DumpText(450, 24, 8, 16, 0x00ffff, buf);

	lea	eax, DWORD PTR _buf$[ebp]
	push	eax
	push	65535					; 0000ffffH
	push	16					; 00000010H
	push	8
	push	24					; 00000018H
	push	450					; 000001c2H
	call	?DumpText@@YAXFFFFJPAD@Z		; DumpText
	add	esp, 24					; 00000018H

; 442  : 	}
; 443  : 	else

	jmp	SHORT $L81430
$L81428:

; 444  : 	{
; 445  : 		wsprintf(buf, "Flag %s", TriggerEnums[trigger->ID][trigger->Flag]);

	mov	eax, DWORD PTR _trigger$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _trigger$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _TriggerEnums[ecx*4]
	mov	edx, DWORD PTR [ecx+eax*4]
	push	edx
	push	OFFSET FLAT:??_C@_07ELCFLLMP@Flag?5?$CFs?$AA@
	lea	eax, DWORD PTR _buf$[ebp]
	push	eax
	call	DWORD PTR __imp__wsprintfA
	add	esp, 12					; 0000000cH

; 446  : 		DumpText(450, 24, 8, 16, 0x00ffff, buf);

	lea	eax, DWORD PTR _buf$[ebp]
	push	eax
	push	65535					; 0000ffffH
	push	16					; 00000010H
	push	8
	push	24					; 00000018H
	push	450					; 000001c2H
	call	?DumpText@@YAXFFFFJPAD@Z		; DumpText
	add	esp, 24					; 00000018H
$L81430:

; 447  : 	}
; 448  : 
; 449  : // axis
; 450  : 
; 451  : 	wsprintf(buf, "Axis %s - %s", FileTriggerAxisNames[FileTriggerAxis], FileTriggerAxisTypeNames[FileTriggerAxisType]);

	mov	eax, DWORD PTR _FileTriggerAxisType
	mov	ecx, DWORD PTR _FileTriggerAxisTypeNames[eax*4]
	push	ecx
	mov	edx, DWORD PTR _FileTriggerAxis
	mov	eax, DWORD PTR _FileTriggerAxisNames[edx*4]
	push	eax
	push	OFFSET FLAT:??_C@_0N@MOINFLNL@Axis?5?$CFs?5?9?5?$CFs?$AA@
	lea	ecx, DWORD PTR _buf$[ebp]
	push	ecx
	call	DWORD PTR __imp__wsprintfA
	add	esp, 16					; 00000010H

; 452  : 	DumpText(450, 48, 8, 16, 0xff00ff, buf);

	lea	eax, DWORD PTR _buf$[ebp]
	push	eax
	push	16711935				; 00ff00ffH
	push	16					; 00000010H
	push	8
	push	48					; 00000030H
	push	450					; 000001c2H
	call	?DumpText@@YAXFFFFJPAD@Z		; DumpText
	add	esp, 24					; 00000018H

; 453  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?DisplayTriggerInfo@@YAXPAUFILE_TRIGGER@@@Z ENDP	; DisplayTriggerInfo
_TEXT	ENDS
PUBLIC	?sqrt@@YAMM@Z					; sqrt
PUBLIC	??_C@_03NJKMHLPI@tri?$AA@			; `string'
PUBLIC	?EditTriggers@@YAXXZ				; EditTriggers
PUBLIC	__real@45400000
PUBLIC	__real@3f800000
PUBLIC	__real@43a00000
PUBLIC	__real@43700000
PUBLIC	__real@43000000
PUBLIC	__real@40800000
PUBLIC	__real@c0800000
PUBLIC	__real@00000000
PUBLIC	__real@41800000
PUBLIC	__real@3ba3d70a
PUBLIC	__real@3e800000
EXTRN	?MouseXpos@@3MA:DWORD				; MouseXpos
EXTRN	?MouseYpos@@3MA:DWORD				; MouseYpos
EXTRN	?MouseXrel@@3MA:DWORD				; MouseXrel
EXTRN	?MouseYrel@@3MA:DWORD				; MouseYrel
EXTRN	?CameraEditXrel@@3MA:DWORD			; CameraEditXrel
EXTRN	?CameraEditYrel@@3MA:DWORD			; CameraEditYrel
EXTRN	?CameraEditZrel@@3MA:DWORD			; CameraEditZrel
EXTRN	?MouseLeft@@3DA:BYTE				; MouseLeft
EXTRN	?MouseRight@@3DA:BYTE				; MouseRight
EXTRN	?Keys@@3PADA:BYTE				; Keys
EXTRN	?LastKeys@@3PADA:BYTE				; LastKeys
EXTRN	?Mouse@@3U_DIMOUSESTATE@@A:BYTE			; Mouse
EXTRN	?GetLevelFilename@@YAPADPADJ@Z:NEAR		; GetLevelFilename
EXTRN	?FreeTriggers@@YAXXZ:NEAR			; FreeTriggers
EXTRN	?LoadTriggers@@YAXPAD@Z:NEAR			; LoadTriggers
EXTRN	?RotMatrixZYX@@YAXPATMatrixUnion@@MMM@Z:NEAR	; RotMatrixZYX
EXTRN	?RotVector@@YAXPATMatrixUnion@@PAUVectorStruct@@1@Z:NEAR ; RotVector
EXTRN	?MulMatrix@@YAXPATMatrixUnion@@00@Z:NEAR	; MulMatrix
EXTRN	?TimeFactor@@3MA:DWORD				; TimeFactor
_BSS	SEGMENT
_LastFileTriggerID DD 01H DUP (?)
_BSS	ENDS
;	COMDAT __real@45400000
CONST	SEGMENT
__real@45400000 DD 045400000r			; 3072
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT ??_C@_03NJKMHLPI@tri?$AA@
CONST	SEGMENT
??_C@_03NJKMHLPI@tri?$AA@ DB 'tri', 00H			; `string'
CONST	ENDS
;	COMDAT __real@43a00000
CONST	SEGMENT
__real@43a00000 DD 043a00000r			; 320
CONST	ENDS
;	COMDAT __real@43700000
CONST	SEGMENT
__real@43700000 DD 043700000r			; 240
CONST	ENDS
;	COMDAT __real@43000000
CONST	SEGMENT
__real@43000000 DD 043000000r			; 128
CONST	ENDS
;	COMDAT __real@40800000
CONST	SEGMENT
__real@40800000 DD 040800000r			; 4
CONST	ENDS
;	COMDAT __real@c0800000
CONST	SEGMENT
__real@c0800000 DD 0c0800000r			; -4
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT __real@41800000
CONST	SEGMENT
__real@41800000 DD 041800000r			; 16
CONST	ENDS
;	COMDAT __real@3ba3d70a
CONST	SEGMENT
__real@3ba3d70a DD 03ba3d70ar			; 0.005
CONST	ENDS
;	COMDAT __real@3e800000
CONST	SEGMENT
__real@3e800000 DD 03e800000r			; 0.25
; Function compile flags: /Odt /ZI
CONST	ENDS
;	COMDAT ?EditTriggers@@YAXXZ
_TEXT	SEGMENT
tv1737 = -296						; size = 4
tv912 = -296						; size = 4
tv687 = -296						; size = 4
__mul$81557 = -228					; size = 4
__mul$81555 = -224					; size = 4
__mul$81550 = -220					; size = 4
__mul$81548 = -216					; size = 4
__mul$81461 = -212					; size = 4
__mul$81459 = -208					; size = 4
_trigger$ = -204					; size = 4
_ntrigger$ = -200					; size = 4
_mat2$ = -196						; size = 36
_mat$ = -160						; size = 36
_add$ = -124						; size = 4
_rad$ = -120						; size = 4
_sy$ = -116						; size = 4
_sx$ = -112						; size = 4
_z$ = -108						; size = 4
_l2$ = -104						; size = 12
_u2$ = -92						; size = 12
_r2$ = -80						; size = 12
_l$ = -68						; size = 12
_u$ = -56						; size = 12
_r$ = -44						; size = 12
_vec2$ = -32						; size = 12
_vec$ = -20						; size = 12
_j$ = -8						; size = 4
_i$ = -4						; size = 4
?EditTriggers@@YAXXZ PROC NEAR				; EditTriggers, COMDAT

; 460  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 296				; 00000128H
	push	ebx
	push	esi
	push	edi

; 461  : 	long i, j;
; 462  : 	VEC vec, vec2, r, u, l, r2, u2, l2;
; 463  : 	float z, sx, sy, rad, add;
; 464  : 	MAT mat, mat2;
; 465  : 	FILE_TRIGGER *ntrigger, *trigger;
; 466  : 
; 467  : // quit if not in edit mode
; 468  : 
; 469  : 	if (CAM_MainCamera->Type != CAM_EDIT)

	mov	eax, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	cmp	DWORD PTR [eax], 5
	je	SHORT $L81455

; 470  : 	{
; 471  : 		CurrentTrigger = NULL;

	mov	DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A, 0 ; CurrentTrigger

; 472  : 		return;

	jmp	$L81435
$L81455:

; 473  : 	}
; 474  : 
; 475  : // rotate camera?
; 476  : 
; 477  : 	if (MouseRight)

	movsx	eax, BYTE PTR ?MouseRight@@3DA		; MouseRight
	test	eax, eax
	je	$L81456

; 478  : 	{
; 479  : 		RotMatrixZYX(&mat, (float)-Mouse.lY / 3072, -(float)Mouse.lX / 3072, 0);

	push	0
	fild	DWORD PTR ?Mouse@@3U_DIMOUSESTATE@@A
	fchs
	fdiv	DWORD PTR __real@45400000
	push	ecx
	fstp	DWORD PTR [esp]
	mov	eax, DWORD PTR ?Mouse@@3U_DIMOUSESTATE@@A+4
	neg	eax
	mov	DWORD PTR tv1737[ebp], eax
	fild	DWORD PTR tv1737[ebp]
	fdiv	DWORD PTR __real@45400000
	push	ecx
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR _mat$[ebp]
	push	ecx
	call	?RotMatrixZYX@@YAXPATMatrixUnion@@MMM@Z	; RotMatrixZYX
	add	esp, 16					; 00000010H

; 480  : 		MulMatrix(&CAM_MainCamera->WMatrix, &mat, &mat2);

	lea	eax, DWORD PTR _mat2$[ebp]
	push	eax
	lea	ecx, DWORD PTR _mat$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	add	edx, 16					; 00000010H
	push	edx
	call	?MulMatrix@@YAXPATMatrixUnion@@00@Z	; MulMatrix
	add	esp, 12					; 0000000cH

; 481  : 		CopyMatrix(&mat2, &CAM_MainCamera->WMatrix);

	mov	eax, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	add	eax, 16					; 00000010H
	push	eax
	lea	ecx, DWORD PTR _mat2$[ebp]
	push	ecx
	call	?CopyMatrix@@YAXPATMatrixUnion@@0@Z	; CopyMatrix
	add	esp, 8

; 482  : 
; 483  : 		CAM_MainCamera->WMatrix.m[RY] = 0;

	mov	eax, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	mov	DWORD PTR [eax+20], 0

; 484  : 		NormalizeVector(&CAM_MainCamera->WMatrix.mv[X]);

	mov	eax, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	mov	ecx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fld	DWORD PTR [eax+16]
	fmul	DWORD PTR [ecx+16]
	mov	edx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	mov	eax, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fld	DWORD PTR [edx+20]
	fmul	DWORD PTR [eax+20]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	mov	edx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fld	DWORD PTR [ecx+24]
	fmul	DWORD PTR [edx+24]
	faddp	ST(1), ST(0)
	push	ecx
	fstp	DWORD PTR [esp]
	call	?sqrt@@YAMM@Z				; sqrt
	add	esp, 4
	fdivr	DWORD PTR __real@3f800000
	fstp	DWORD PTR __mul$81459[ebp]
	mov	eax, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fld	DWORD PTR __mul$81459[ebp]
	fmul	DWORD PTR [eax+16]
	mov	ecx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fstp	DWORD PTR [ecx+16]
	mov	eax, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fld	DWORD PTR __mul$81459[ebp]
	fmul	DWORD PTR [eax+20]
	mov	ecx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fstp	DWORD PTR [ecx+20]
	mov	eax, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fld	DWORD PTR __mul$81459[ebp]
	fmul	DWORD PTR [eax+24]
	mov	ecx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fstp	DWORD PTR [ecx+24]

; 485  : 		CrossProduct(&CAM_MainCamera->WMatrix.mv[Z], &CAM_MainCamera->WMatrix.mv[X], &CAM_MainCamera->WMatrix.mv[Y]);

	mov	eax, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	mov	ecx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fld	DWORD PTR [eax+44]
	fmul	DWORD PTR [ecx+24]
	mov	edx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	mov	eax, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fld	DWORD PTR [edx+48]
	fmul	DWORD PTR [eax+20]
	fsubp	ST(1), ST(0)
	mov	ecx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fstp	DWORD PTR [ecx+28]
	mov	eax, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	mov	ecx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fld	DWORD PTR [eax+48]
	fmul	DWORD PTR [ecx+16]
	mov	edx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	mov	eax, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fld	DWORD PTR [edx+40]
	fmul	DWORD PTR [eax+24]
	fsubp	ST(1), ST(0)
	mov	ecx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fstp	DWORD PTR [ecx+32]
	mov	eax, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	mov	ecx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fld	DWORD PTR [eax+40]
	fmul	DWORD PTR [ecx+20]
	mov	edx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	mov	eax, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fld	DWORD PTR [edx+44]
	fmul	DWORD PTR [eax+16]
	fsubp	ST(1), ST(0)
	mov	ecx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fstp	DWORD PTR [ecx+36]

; 486  : 		NormalizeVector(&CAM_MainCamera->WMatrix.mv[Y]);

	mov	eax, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	mov	ecx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fld	DWORD PTR [eax+28]
	fmul	DWORD PTR [ecx+28]
	mov	edx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	mov	eax, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fld	DWORD PTR [edx+32]
	fmul	DWORD PTR [eax+32]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	mov	edx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fld	DWORD PTR [ecx+36]
	fmul	DWORD PTR [edx+36]
	faddp	ST(1), ST(0)
	push	ecx
	fstp	DWORD PTR [esp]
	call	?sqrt@@YAMM@Z				; sqrt
	add	esp, 4
	fdivr	DWORD PTR __real@3f800000
	fstp	DWORD PTR __mul$81461[ebp]
	mov	eax, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fld	DWORD PTR __mul$81461[ebp]
	fmul	DWORD PTR [eax+28]
	mov	ecx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fstp	DWORD PTR [ecx+28]
	mov	eax, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fld	DWORD PTR __mul$81461[ebp]
	fmul	DWORD PTR [eax+32]
	mov	ecx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fstp	DWORD PTR [ecx+32]
	mov	eax, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fld	DWORD PTR __mul$81461[ebp]
	fmul	DWORD PTR [eax+36]
	mov	ecx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fstp	DWORD PTR [ecx+36]

; 487  : 		CrossProduct(&CAM_MainCamera->WMatrix.mv[X], &CAM_MainCamera->WMatrix.mv[Y], &CAM_MainCamera->WMatrix.mv[Z]);

	mov	eax, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	mov	ecx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fld	DWORD PTR [eax+20]
	fmul	DWORD PTR [ecx+36]
	mov	edx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	mov	eax, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fld	DWORD PTR [edx+24]
	fmul	DWORD PTR [eax+32]
	fsubp	ST(1), ST(0)
	mov	ecx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fstp	DWORD PTR [ecx+40]
	mov	eax, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	mov	ecx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fld	DWORD PTR [eax+24]
	fmul	DWORD PTR [ecx+28]
	mov	edx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	mov	eax, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fld	DWORD PTR [edx+16]
	fmul	DWORD PTR [eax+36]
	fsubp	ST(1), ST(0)
	mov	ecx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fstp	DWORD PTR [ecx+44]
	mov	eax, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	mov	ecx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fld	DWORD PTR [eax+16]
	fmul	DWORD PTR [ecx+32]
	mov	edx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	mov	eax, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fld	DWORD PTR [edx+20]
	fmul	DWORD PTR [eax+28]
	fsubp	ST(1), ST(0)
	mov	ecx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fstp	DWORD PTR [ecx+48]
$L81456:

; 488  : 	}
; 489  : 
; 490  : // save triggers?
; 491  : 
; 492  : 	if (Keys[DIK_LCONTROL] && Keys[DIK_F4] && !LastKeys[DIK_F4])

	movsx	eax, BYTE PTR ?Keys@@3PADA+29
	test	eax, eax
	je	SHORT $L81463
	movsx	eax, BYTE PTR ?Keys@@3PADA+62
	test	eax, eax
	je	SHORT $L81463
	movsx	eax, BYTE PTR ?LastKeys@@3PADA+62
	test	eax, eax
	jne	SHORT $L81463

; 493  : 	{
; 494  : 		SaveFileTriggers(GetLevelFilename("tri", FILENAME_MAKE_BODY | FILENAME_GAME_SETTINGS));

	push	3
	push	OFFSET FLAT:??_C@_03NJKMHLPI@tri?$AA@
	call	?GetLevelFilename@@YAPADPADJ@Z		; GetLevelFilename
	add	esp, 8
	push	eax
	call	?SaveFileTriggers@@YAXPAD@Z		; SaveFileTriggers
	add	esp, 4

; 495  : 		FreeTriggers();

	call	?FreeTriggers@@YAXXZ			; FreeTriggers

; 496  : 		LoadTriggers(GetLevelFilename("tri", FILENAME_MAKE_BODY | FILENAME_GAME_SETTINGS));

	push	3
	push	OFFSET FLAT:??_C@_03NJKMHLPI@tri?$AA@
	call	?GetLevelFilename@@YAPADPADJ@Z		; GetLevelFilename
	add	esp, 8
	push	eax
	call	?LoadTriggers@@YAXPAD@Z			; LoadTriggers
	add	esp, 4
$L81463:

; 497  : 	}
; 498  : 
; 499  : // get a current trigger?
; 500  : 
; 501  : 	if (!CurrentTrigger && Keys[DIK_RETURN] && !LastKeys[DIK_RETURN])

	cmp	DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A, 0 ; CurrentTrigger
	jne	$L81465
	movsx	eax, BYTE PTR ?Keys@@3PADA+28
	test	eax, eax
	je	$L81465
	movsx	eax, BYTE PTR ?LastKeys@@3PADA+28
	test	eax, eax
	jne	$L81465

; 502  : 	{
; 503  : 		ntrigger = NULL;

	mov	DWORD PTR _ntrigger$[ebp], 0

; 504  : 		z = RenderSettings.FarClip;

	mov	eax, DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+32
	mov	DWORD PTR _z$[ebp], eax

; 505  : 
; 506  : 		trigger = FileTriggers;

	mov	eax, DWORD PTR _FileTriggers
	mov	DWORD PTR _trigger$[ebp], eax

; 507  : 		for (i = 0 ; i < FileTriggerNum ; i++, trigger++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $L81466
$L81467:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	mov	ecx, DWORD PTR _trigger$[ebp]
	add	ecx, 68					; 00000044H
	mov	DWORD PTR _trigger$[ebp], ecx
$L81466:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _FileTriggerNum
	jge	$L81468

; 508  : 		{
; 509  : 			for (j = 0 ; j < 2 ; j++)

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $L81469
$L81470:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$L81469:
	cmp	DWORD PTR _j$[ebp], 2
	jge	$L81471

; 510  : 			{
; 511  : 				RotTransVector(&ViewMatrix, &ViewTrans, &trigger->Pos, &vec);

	lea	eax, DWORD PTR _vec$[ebp]
	push	eax
	mov	ecx, DWORD PTR _trigger$[ebp]
	add	ecx, 8
	push	ecx
	push	OFFSET FLAT:?ViewTrans@@3UVectorStruct@@A ; ViewTrans
	push	OFFSET FLAT:?ViewMatrix@@3TMatrixUnion@@A ; ViewMatrix
	call	?RotTransVector@@YAXPATMatrixUnion@@PAUVectorStruct@@11@Z ; RotTransVector
	add	esp, 16					; 00000010H

; 512  : 
; 513  : 				if (vec.v[Z] < RenderSettings.NearClip || vec.v[Z] >= RenderSettings.FarClip) continue;

	fld	DWORD PTR _vec$[ebp+8]
	fcomp	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+28
	fnstsw	ax
	test	ah, 5
	jnp	SHORT $L81473
	fld	DWORD PTR _vec$[ebp+8]
	fcomp	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A+32
	fnstsw	ax
	test	ah, 1
	jne	SHORT $L81472
$L81473:
	jmp	SHORT $L81470
$L81472:

; 514  : 
; 515  : 				sx = vec.v[X] * RenderSettings.GeomPers / vec.v[Z] + REAL_SCREEN_XHALF;

	fld	DWORD PTR _vec$[ebp]
	fmul	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A
	fdiv	DWORD PTR _vec$[ebp+8]
	fadd	DWORD PTR __real@43a00000
	fstp	DWORD PTR _sx$[ebp]

; 516  : 				sy = vec.v[Y] * RenderSettings.GeomPers / vec.v[Z] + REAL_SCREEN_YHALF;

	fld	DWORD PTR _vec$[ebp+4]
	fmul	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A
	fdiv	DWORD PTR _vec$[ebp+8]
	fadd	DWORD PTR __real@43700000
	fstp	DWORD PTR _sy$[ebp]

; 517  : 
; 518  : 				rad = 128 * RenderSettings.GeomPers / vec.v[Z];

	fld	DWORD PTR __real@43000000
	fmul	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A
	fdiv	DWORD PTR _vec$[ebp+8]
	fstp	DWORD PTR _rad$[ebp]

; 519  : 
; 520  : 				if (MouseXpos > sx - rad && MouseXpos < sx + rad && MouseYpos > sy - rad && MouseYpos < sy + rad)

	fld	DWORD PTR _sx$[ebp]
	fsub	DWORD PTR _rad$[ebp]
	fcomp	DWORD PTR ?MouseXpos@@3MA		; MouseXpos
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L81474
	fld	DWORD PTR _sx$[ebp]
	fadd	DWORD PTR _rad$[ebp]
	fcomp	DWORD PTR ?MouseXpos@@3MA		; MouseXpos
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $L81474
	fld	DWORD PTR _sy$[ebp]
	fsub	DWORD PTR _rad$[ebp]
	fcomp	DWORD PTR ?MouseYpos@@3MA		; MouseYpos
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L81474
	fld	DWORD PTR _sy$[ebp]
	fadd	DWORD PTR _rad$[ebp]
	fcomp	DWORD PTR ?MouseYpos@@3MA		; MouseYpos
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $L81474

; 521  : 				{
; 522  : 					if (vec.v[Z] < z)

	fld	DWORD PTR _vec$[ebp+8]
	fcomp	DWORD PTR _z$[ebp]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L81474

; 523  : 					{
; 524  : 						ntrigger = trigger;

	mov	eax, DWORD PTR _trigger$[ebp]
	mov	DWORD PTR _ntrigger$[ebp], eax

; 525  : 						z = vec.v[Z];

	mov	eax, DWORD PTR _vec$[ebp+8]
	mov	DWORD PTR _z$[ebp], eax
$L81474:

; 526  : 					}
; 527  : 				}
; 528  : 			}

	jmp	$L81470
$L81471:

; 529  : 		}

	jmp	$L81467
$L81468:

; 530  : 		if (ntrigger)

	cmp	DWORD PTR _ntrigger$[ebp], 0
	je	SHORT $L81465

; 531  : 		{
; 532  : 			CurrentTrigger = ntrigger;

	mov	eax, DWORD PTR _ntrigger$[ebp]
	mov	DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A, eax ; CurrentTrigger

; 533  : 			return;

	jmp	$L81435
$L81465:

; 534  : 		}
; 535  : 	}
; 536  : 
; 537  : // new trigger?
; 538  : 
; 539  : 	if (Keys[DIK_INSERT] && !LastKeys[DIK_INSERT])

	movsx	eax, BYTE PTR ?Keys@@3PADA+210
	test	eax, eax
	je	$L81477
	movsx	eax, BYTE PTR ?LastKeys@@3PADA+210
	test	eax, eax
	jne	$L81477

; 540  : 	{
; 541  : 		if ((trigger = AllocFileTrigger()))

	call	?AllocFileTrigger@@YAPAUFILE_TRIGGER@@XZ ; AllocFileTrigger
	mov	DWORD PTR _trigger$[ebp], eax
	cmp	DWORD PTR _trigger$[ebp], 0
	je	$L81477

; 542  : 		{
; 543  : 			vec.v[X] = 0;

	mov	DWORD PTR _vec$[ebp], 0

; 544  : 			vec.v[Y] = 0;

	mov	DWORD PTR _vec$[ebp+4], 0

; 545  : 			vec.v[Z] = 512;

	mov	DWORD PTR _vec$[ebp+8], 1140850688	; 44000000H

; 546  : 			RotVector(&CAM_MainCamera->WMatrix, &vec, &vec2);

	lea	eax, DWORD PTR _vec2$[ebp]
	push	eax
	lea	ecx, DWORD PTR _vec$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	add	edx, 16					; 00000010H
	push	edx
	call	?RotVector@@YAXPATMatrixUnion@@PAUVectorStruct@@1@Z ; RotVector
	add	esp, 12					; 0000000cH

; 547  : 			AddVector(&CAM_MainCamera->WPos, &vec2, &trigger->Pos);

	mov	eax, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fld	DWORD PTR _vec2$[ebp]
	fadd	DWORD PTR [eax+68]
	mov	ecx, DWORD PTR _trigger$[ebp]
	fstp	DWORD PTR [ecx+8]
	mov	eax, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fld	DWORD PTR _vec2$[ebp+4]
	fadd	DWORD PTR [eax+72]
	mov	ecx, DWORD PTR _trigger$[ebp]
	fstp	DWORD PTR [ecx+12]
	mov	eax, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	fld	DWORD PTR _vec2$[ebp+8]
	fadd	DWORD PTR [eax+76]
	mov	ecx, DWORD PTR _trigger$[ebp]
	fstp	DWORD PTR [ecx+16]

; 548  : 
; 549  : 			CopyMatrix(&IdentityMatrix, &trigger->Matrix);

	mov	eax, DWORD PTR _trigger$[ebp]
	add	eax, 20					; 00000014H
	push	eax
	push	OFFSET FLAT:?IdentityMatrix@@3TMatrixUnion@@A ; IdentityMatrix
	call	?CopyMatrix@@YAXPATMatrixUnion@@0@Z	; CopyMatrix
	add	esp, 8

; 550  : 
; 551  : 			trigger->Size[X] = trigger->Size[Y] = trigger->Size[Z] = 128;

	mov	eax, DWORD PTR _trigger$[ebp]
	mov	DWORD PTR [eax+64], 1124073472		; 43000000H
	mov	ecx, DWORD PTR _trigger$[ebp]
	mov	DWORD PTR [ecx+60], 1124073472		; 43000000H
	mov	edx, DWORD PTR _trigger$[ebp]
	mov	DWORD PTR [edx+56], 1124073472		; 43000000H

; 552  : 			trigger->ID = LastFileTriggerID;

	mov	eax, DWORD PTR _trigger$[ebp]
	mov	ecx, DWORD PTR _LastFileTriggerID
	mov	DWORD PTR [eax], ecx

; 553  : 			trigger->Flag = 0;

	mov	eax, DWORD PTR _trigger$[ebp]
	mov	DWORD PTR [eax+4], 0

; 554  : 
; 555  : 			CurrentTrigger = trigger;

	mov	eax, DWORD PTR _trigger$[ebp]
	mov	DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A, eax ; CurrentTrigger
$L81477:

; 556  : 		}
; 557  : 	}
; 558  : 
; 559  : // quit now if no current file trigger
; 560  : 
; 561  : 	if (!CurrentTrigger) return;

	cmp	DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A, 0 ; CurrentTrigger
	jne	SHORT $L81479
	jmp	$L81435
$L81479:

; 562  : 
; 563  : // save ID to last
; 564  : 
; 565  : 	LastFileTriggerID = CurrentTrigger->ID;

	mov	eax, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _LastFileTriggerID, ecx

; 566  : 
; 567  : // exit current edit?
; 568  : 
; 569  : 	if (Keys[DIK_RETURN] && !LastKeys[DIK_RETURN])

	movsx	eax, BYTE PTR ?Keys@@3PADA+28
	test	eax, eax
	je	SHORT $L81480
	movsx	eax, BYTE PTR ?LastKeys@@3PADA+28
	test	eax, eax
	jne	SHORT $L81480

; 570  : 	{
; 571  : 		CurrentTrigger = NULL;

	mov	DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A, 0 ; CurrentTrigger

; 572  : 		return;

	jmp	$L81435
$L81480:

; 573  : 	}
; 574  : 
; 575  : // delete current trigger?
; 576  : 
; 577  : 	if (Keys[DIK_DELETE] && !LastKeys[DIK_DELETE])

	movsx	eax, BYTE PTR ?Keys@@3PADA+211
	test	eax, eax
	je	SHORT $L81481
	movsx	eax, BYTE PTR ?LastKeys@@3PADA+211
	test	eax, eax
	jne	SHORT $L81481

; 578  : 	{
; 579  : 		FreeFileTrigger(CurrentTrigger);

	mov	eax, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	push	eax
	call	?FreeFileTrigger@@YAXPAUFILE_TRIGGER@@@Z ; FreeFileTrigger
	add	esp, 4

; 580  : 		CurrentTrigger = NULL;

	mov	DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A, 0 ; CurrentTrigger

; 581  : 		return;

	jmp	$L81435
$L81481:

; 582  : 	}
; 583  : 
; 584  : // change axis?
; 585  : 
; 586  : 	if (Keys[DIK_TAB] && !LastKeys[DIK_TAB])

	movsx	eax, BYTE PTR ?Keys@@3PADA+15
	test	eax, eax
	je	SHORT $L81482
	movsx	eax, BYTE PTR ?LastKeys@@3PADA+15
	test	eax, eax
	jne	SHORT $L81482

; 587  : 	{
; 588  : 		if (Keys[DIK_LSHIFT]) FileTriggerAxis--;

	movsx	eax, BYTE PTR ?Keys@@3PADA+42
	test	eax, eax
	je	SHORT $L81483
	mov	eax, DWORD PTR _FileTriggerAxis
	sub	eax, 1
	mov	DWORD PTR _FileTriggerAxis, eax

; 589  : 		else FileTriggerAxis++;

	jmp	SHORT $L81484
$L81483:
	mov	eax, DWORD PTR _FileTriggerAxis
	add	eax, 1
	mov	DWORD PTR _FileTriggerAxis, eax
$L81484:

; 590  : 		if (FileTriggerAxis == -1) FileTriggerAxis = 5;

	cmp	DWORD PTR _FileTriggerAxis, -1
	jne	SHORT $L81485
	mov	DWORD PTR _FileTriggerAxis, 5
$L81485:

; 591  : 		if (FileTriggerAxis == 6) FileTriggerAxis = 0;

	cmp	DWORD PTR _FileTriggerAxis, 6
	jne	SHORT $L81482
	mov	DWORD PTR _FileTriggerAxis, 0
$L81482:

; 592  : 	}
; 593  : 
; 594  : // change axis type?
; 595  : 
; 596  : 	if (Keys[DIK_LALT] && !LastKeys[DIK_LALT])

	movsx	eax, BYTE PTR ?Keys@@3PADA+56
	test	eax, eax
	je	SHORT $L81487
	movsx	eax, BYTE PTR ?LastKeys@@3PADA+56
	test	eax, eax
	jne	SHORT $L81487

; 597  : 		FileTriggerAxisType ^= 1;

	mov	eax, DWORD PTR _FileTriggerAxisType
	xor	eax, 1
	mov	DWORD PTR _FileTriggerAxisType, eax
$L81487:

; 598  : 
; 599  : // change ID?
; 600  : 
; 601  : 	if (Keys[DIK_NUMPADMINUS] && !LastKeys[DIK_NUMPADMINUS] && CurrentTrigger->ID)

	movsx	eax, BYTE PTR ?Keys@@3PADA+74
	test	eax, eax
	je	SHORT $L81488
	movsx	eax, BYTE PTR ?LastKeys@@3PADA+74
	test	eax, eax
	jne	SHORT $L81488
	mov	eax, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	cmp	DWORD PTR [eax], 0
	je	SHORT $L81488

; 602  : 		CurrentTrigger->ID--;

	mov	eax, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	mov	ecx, DWORD PTR [eax]
	sub	ecx, 1
	mov	edx, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	mov	DWORD PTR [edx], ecx
$L81488:

; 603  : 	if (Keys[DIK_NUMPADPLUS] && !LastKeys[DIK_NUMPADPLUS] && TriggerNames[CurrentTrigger->ID + 1])

	movsx	eax, BYTE PTR ?Keys@@3PADA+78
	test	eax, eax
	je	SHORT $L81489
	movsx	eax, BYTE PTR ?LastKeys@@3PADA+78
	test	eax, eax
	jne	SHORT $L81489
	mov	eax, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	mov	ecx, DWORD PTR [eax]
	cmp	DWORD PTR _TriggerNames[ecx*4+4], 0
	je	SHORT $L81489

; 604  : 		CurrentTrigger->ID++;

	mov	eax, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	mov	DWORD PTR [edx], ecx
$L81489:

; 605  : 
; 606  : // change Flag?
; 607  : 
; 608  : 	if (Keys[DIK_MINUS] && !LastKeys[DIK_MINUS])

	movsx	eax, BYTE PTR ?Keys@@3PADA+12
	test	eax, eax
	je	SHORT $L81490
	movsx	eax, BYTE PTR ?LastKeys@@3PADA+12
	test	eax, eax
	jne	SHORT $L81490

; 609  : 	{
; 610  : 		CurrentTrigger->Flag--;

	mov	eax, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, 1
	mov	edx, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	mov	DWORD PTR [edx+4], ecx
$L81490:

; 611  : 	}
; 612  : 	if (Keys[DIK_EQUALS] && !LastKeys[DIK_EQUALS])

	movsx	eax, BYTE PTR ?Keys@@3PADA+13
	test	eax, eax
	je	SHORT $L81491
	movsx	eax, BYTE PTR ?LastKeys@@3PADA+13
	test	eax, eax
	jne	SHORT $L81491

; 613  : 	{
; 614  : 		CurrentTrigger->Flag++;

	mov	eax, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	mov	DWORD PTR [edx+4], ecx
$L81491:

; 615  : 	}
; 616  : 
; 617  : 	if (CurrentTrigger->Flag < 0)

	mov	eax, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	cmp	DWORD PTR [eax+4], 0
	jge	SHORT $L81492

; 618  : 		CurrentTrigger->Flag = 0;

	mov	eax, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	mov	DWORD PTR [eax+4], 0
$L81492:

; 619  : 
; 620  : 	if (TriggerEnums[CurrentTrigger->ID])

	mov	eax, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	mov	ecx, DWORD PTR [eax]
	cmp	DWORD PTR _TriggerEnums[ecx*4], 0
	je	SHORT $L81493

; 621  : 	{
; 622  : 		i = 0;

	mov	DWORD PTR _i$[ebp], 0
$L81495:

; 623  : 		while (TriggerEnums[CurrentTrigger->ID][i]) i++;

	mov	eax, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _TriggerEnums[ecx*4]
	mov	eax, DWORD PTR _i$[ebp]
	cmp	DWORD PTR [edx+eax*4], 0
	je	SHORT $L81496
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	jmp	SHORT $L81495
$L81496:

; 624  : 		if (CurrentTrigger->Flag > i - 1)

	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 1
	mov	ecx, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	cmp	DWORD PTR [ecx+4], eax
	jle	SHORT $L81493

; 625  : 			CurrentTrigger->Flag = i - 1;

	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 1
	mov	ecx, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	mov	DWORD PTR [ecx+4], eax
$L81493:

; 626  : 	}
; 627  : 
; 628  : // change side?
; 629  : 
; 630  : 	if (Keys[DIK_SPACE] && !LastKeys[DIK_SPACE])

	movsx	eax, BYTE PTR ?Keys@@3PADA+57
	test	eax, eax
	je	SHORT $L81498
	movsx	eax, BYTE PTR ?LastKeys@@3PADA+57
	test	eax, eax
	jne	SHORT $L81498

; 631  : 		FileTriggerSide = (FileTriggerSide + 1) % 6;

	mov	eax, DWORD PTR _FileTriggerSide
	add	eax, 1
	cdq
	mov	ecx, 6
	idiv	ecx
	mov	DWORD PTR _FileTriggerSide, edx
$L81498:

; 632  : 
; 633  : // resize?
; 634  : 
; 635  : 	add = 0;

	mov	DWORD PTR _add$[ebp], 0

; 636  : 	if (Keys[DIK_NUMPADSTAR])

	movsx	eax, BYTE PTR ?Keys@@3PADA+55
	test	eax, eax
	je	SHORT $L81499

; 637  : 		add = 4 * TimeFactor;

	fld	DWORD PTR __real@40800000
	fmul	DWORD PTR ?TimeFactor@@3MA		; TimeFactor
	fstp	DWORD PTR _add$[ebp]
$L81499:

; 638  : 	if (Keys[DIK_NUMPADSLASH])

	movsx	eax, BYTE PTR ?Keys@@3PADA+181
	test	eax, eax
	je	SHORT $L81500

; 639  : 		add = -4 * TimeFactor;

	fld	DWORD PTR __real@c0800000
	fmul	DWORD PTR ?TimeFactor@@3MA		; TimeFactor
	fstp	DWORD PTR _add$[ebp]
$L81500:

; 640  : 
; 641  : 	if (Keys[DIK_LCONTROL]) add *= 4;

	movsx	eax, BYTE PTR ?Keys@@3PADA+29
	test	eax, eax
	je	SHORT $L81501
	fld	DWORD PTR _add$[ebp]
	fmul	DWORD PTR __real@40800000
	fstp	DWORD PTR _add$[ebp]
$L81501:

; 642  : 
; 643  : 	if (add)

	fld	DWORD PTR __real@00000000
	fld	DWORD PTR _add$[ebp]
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jnp	$L81502

; 644  : 	{
; 645  : 		if (Keys[DIK_LSHIFT])

	movsx	eax, BYTE PTR ?Keys@@3PADA+42
	test	eax, eax
	je	$L81503

; 646  : 		{
; 647  : 			CurrentTrigger->Size[X] += add;

	mov	eax, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	fld	DWORD PTR _add$[ebp]
	fadd	DWORD PTR [eax+56]
	mov	ecx, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	fstp	DWORD PTR [ecx+56]

; 648  : 			if (CurrentTrigger->Size[X] < 16) CurrentTrigger->Size[X] = 16;

	mov	eax, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	fld	DWORD PTR [eax+56]
	fcomp	DWORD PTR __real@41800000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L81504
	mov	eax, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	mov	DWORD PTR [eax+56], 1098907648		; 41800000H
$L81504:

; 649  : 			CurrentTrigger->Size[Y] += add;

	mov	eax, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	fld	DWORD PTR _add$[ebp]
	fadd	DWORD PTR [eax+60]
	mov	ecx, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	fstp	DWORD PTR [ecx+60]

; 650  : 			if (CurrentTrigger->Size[Y] < 16) CurrentTrigger->Size[Y] = 16;

	mov	eax, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	fld	DWORD PTR [eax+60]
	fcomp	DWORD PTR __real@41800000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L81505
	mov	eax, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	mov	DWORD PTR [eax+60], 1098907648		; 41800000H
$L81505:

; 651  : 			CurrentTrigger->Size[Z] += add;

	mov	eax, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	fld	DWORD PTR _add$[ebp]
	fadd	DWORD PTR [eax+64]
	mov	ecx, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	fstp	DWORD PTR [ecx+64]

; 652  : 			if (CurrentTrigger->Size[Z] < 16) CurrentTrigger->Size[Z] = 16;

	mov	eax, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	fld	DWORD PTR [eax+64]
	fcomp	DWORD PTR __real@41800000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L81506
	mov	eax, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	mov	DWORD PTR [eax+64], 1098907648		; 41800000H
$L81506:

; 653  : 		}
; 654  : 		else

	jmp	$L81502
$L81503:

; 655  : 		{
; 656  : 			switch (FileTriggerSide)

	mov	eax, DWORD PTR _FileTriggerSide
	mov	DWORD PTR tv687[ebp], eax
	cmp	DWORD PTR tv687[ebp], 5
	ja	$L81502
	mov	ecx, DWORD PTR tv687[ebp]
	jmp	DWORD PTR $L81750[ecx*4]
$L81512:

; 657  : 			{
; 658  : 				case 0:
; 659  : 					CurrentTrigger->Size[X] += add;

	mov	eax, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	fld	DWORD PTR _add$[ebp]
	fadd	DWORD PTR [eax+56]
	mov	ecx, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	fstp	DWORD PTR [ecx+56]

; 660  : 					if (CurrentTrigger->Size[X] < 16) CurrentTrigger->Size[X] = 16;

	mov	eax, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	fld	DWORD PTR [eax+56]
	fcomp	DWORD PTR __real@41800000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L81513
	mov	eax, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	mov	DWORD PTR [eax+56], 1098907648		; 41800000H
$L81513:

; 661  : 					CurrentTrigger->Pos.v[X] += CurrentTrigger->Matrix.m[RX] * add;

	mov	eax, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	fld	DWORD PTR _add$[ebp]
	fmul	DWORD PTR [eax+20]
	mov	ecx, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	fadd	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	fstp	DWORD PTR [edx+8]

; 662  : 					CurrentTrigger->Pos.v[Y] += CurrentTrigger->Matrix.m[RY] * add;

	mov	eax, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	fld	DWORD PTR _add$[ebp]
	fmul	DWORD PTR [eax+24]
	mov	ecx, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	fadd	DWORD PTR [ecx+12]
	mov	edx, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	fstp	DWORD PTR [edx+12]

; 663  : 					CurrentTrigger->Pos.v[Z] += CurrentTrigger->Matrix.m[RZ] * add;

	mov	eax, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	fld	DWORD PTR _add$[ebp]
	fmul	DWORD PTR [eax+28]
	mov	ecx, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	fadd	DWORD PTR [ecx+16]
	mov	edx, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	fstp	DWORD PTR [edx+16]

; 664  : 					break;

	jmp	$L81502
$L81514:

; 665  : 				case 1:
; 666  : 					CurrentTrigger->Size[X] += add;

	mov	eax, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	fld	DWORD PTR _add$[ebp]
	fadd	DWORD PTR [eax+56]
	mov	ecx, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	fstp	DWORD PTR [ecx+56]

; 667  : 					if (CurrentTrigger->Size[X] < 16) CurrentTrigger->Size[X] = 16;

	mov	eax, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	fld	DWORD PTR [eax+56]
	fcomp	DWORD PTR __real@41800000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L81515
	mov	eax, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	mov	DWORD PTR [eax+56], 1098907648		; 41800000H
$L81515:

; 668  : 					CurrentTrigger->Pos.v[X] -= CurrentTrigger->Matrix.m[RX] * add;

	mov	eax, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	fld	DWORD PTR _add$[ebp]
	fmul	DWORD PTR [eax+20]
	mov	ecx, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	fsubr	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	fstp	DWORD PTR [edx+8]

; 669  : 					CurrentTrigger->Pos.v[Y] -= CurrentTrigger->Matrix.m[RY] * add;

	mov	eax, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	fld	DWORD PTR _add$[ebp]
	fmul	DWORD PTR [eax+24]
	mov	ecx, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	fsubr	DWORD PTR [ecx+12]
	mov	edx, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	fstp	DWORD PTR [edx+12]

; 670  : 					CurrentTrigger->Pos.v[Z] -= CurrentTrigger->Matrix.m[RZ] * add;

	mov	eax, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	fld	DWORD PTR _add$[ebp]
	fmul	DWORD PTR [eax+28]
	mov	ecx, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	fsubr	DWORD PTR [ecx+16]
	mov	edx, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	fstp	DWORD PTR [edx+16]

; 671  : 					break;

	jmp	$L81502
$L81516:

; 672  : 				case 2:
; 673  : 					CurrentTrigger->Size[Y] += add;

	mov	eax, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	fld	DWORD PTR _add$[ebp]
	fadd	DWORD PTR [eax+60]
	mov	ecx, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	fstp	DWORD PTR [ecx+60]

; 674  : 					if (CurrentTrigger->Size[Y] < 16) CurrentTrigger->Size[Y] = 16;

	mov	eax, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	fld	DWORD PTR [eax+60]
	fcomp	DWORD PTR __real@41800000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L81517
	mov	eax, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	mov	DWORD PTR [eax+60], 1098907648		; 41800000H
$L81517:

; 675  : 					CurrentTrigger->Pos.v[X] += CurrentTrigger->Matrix.m[UX] * add;

	mov	eax, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	fld	DWORD PTR _add$[ebp]
	fmul	DWORD PTR [eax+32]
	mov	ecx, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	fadd	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	fstp	DWORD PTR [edx+8]

; 676  : 					CurrentTrigger->Pos.v[Y] += CurrentTrigger->Matrix.m[UY] * add;

	mov	eax, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	fld	DWORD PTR _add$[ebp]
	fmul	DWORD PTR [eax+36]
	mov	ecx, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	fadd	DWORD PTR [ecx+12]
	mov	edx, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	fstp	DWORD PTR [edx+12]

; 677  : 					CurrentTrigger->Pos.v[Z] += CurrentTrigger->Matrix.m[UZ] * add;

	mov	eax, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	fld	DWORD PTR _add$[ebp]
	fmul	DWORD PTR [eax+40]
	mov	ecx, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	fadd	DWORD PTR [ecx+16]
	mov	edx, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	fstp	DWORD PTR [edx+16]

; 678  : 					break;

	jmp	$L81502
$L81518:

; 679  : 				case 3:
; 680  : 					CurrentTrigger->Size[Y] += add;

	mov	eax, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	fld	DWORD PTR _add$[ebp]
	fadd	DWORD PTR [eax+60]
	mov	ecx, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	fstp	DWORD PTR [ecx+60]

; 681  : 					if (CurrentTrigger->Size[Y] < 16) CurrentTrigger->Size[Y] = 16;

	mov	eax, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	fld	DWORD PTR [eax+60]
	fcomp	DWORD PTR __real@41800000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L81519
	mov	eax, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	mov	DWORD PTR [eax+60], 1098907648		; 41800000H
$L81519:

; 682  : 					CurrentTrigger->Pos.v[X] -= CurrentTrigger->Matrix.m[UX] * add;

	mov	eax, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	fld	DWORD PTR _add$[ebp]
	fmul	DWORD PTR [eax+32]
	mov	ecx, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	fsubr	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	fstp	DWORD PTR [edx+8]

; 683  : 					CurrentTrigger->Pos.v[Y] -= CurrentTrigger->Matrix.m[UY] * add;

	mov	eax, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	fld	DWORD PTR _add$[ebp]
	fmul	DWORD PTR [eax+36]
	mov	ecx, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	fsubr	DWORD PTR [ecx+12]
	mov	edx, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	fstp	DWORD PTR [edx+12]

; 684  : 					CurrentTrigger->Pos.v[Z] -= CurrentTrigger->Matrix.m[UZ] * add;

	mov	eax, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	fld	DWORD PTR _add$[ebp]
	fmul	DWORD PTR [eax+40]
	mov	ecx, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	fsubr	DWORD PTR [ecx+16]
	mov	edx, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	fstp	DWORD PTR [edx+16]

; 685  : 					break;

	jmp	$L81502
$L81520:

; 686  : 				case 4:
; 687  : 					CurrentTrigger->Size[Z] += add;

	mov	eax, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	fld	DWORD PTR _add$[ebp]
	fadd	DWORD PTR [eax+64]
	mov	ecx, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	fstp	DWORD PTR [ecx+64]

; 688  : 					if (CurrentTrigger->Size[Z] < 16) CurrentTrigger->Size[Z] = 16;

	mov	eax, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	fld	DWORD PTR [eax+64]
	fcomp	DWORD PTR __real@41800000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L81521
	mov	eax, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	mov	DWORD PTR [eax+64], 1098907648		; 41800000H
$L81521:

; 689  : 					CurrentTrigger->Pos.v[X] += CurrentTrigger->Matrix.m[LX] * add;

	mov	eax, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	fld	DWORD PTR _add$[ebp]
	fmul	DWORD PTR [eax+44]
	mov	ecx, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	fadd	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	fstp	DWORD PTR [edx+8]

; 690  : 					CurrentTrigger->Pos.v[Y] += CurrentTrigger->Matrix.m[LY] * add;

	mov	eax, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	fld	DWORD PTR _add$[ebp]
	fmul	DWORD PTR [eax+48]
	mov	ecx, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	fadd	DWORD PTR [ecx+12]
	mov	edx, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	fstp	DWORD PTR [edx+12]

; 691  : 					CurrentTrigger->Pos.v[Z] += CurrentTrigger->Matrix.m[LZ] * add;

	mov	eax, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	fld	DWORD PTR _add$[ebp]
	fmul	DWORD PTR [eax+52]
	mov	ecx, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	fadd	DWORD PTR [ecx+16]
	mov	edx, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	fstp	DWORD PTR [edx+16]

; 692  : 					break;

	jmp	$L81502
$L81522:

; 693  : 				case 5:
; 694  : 					CurrentTrigger->Size[Z] += add;

	mov	eax, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	fld	DWORD PTR _add$[ebp]
	fadd	DWORD PTR [eax+64]
	mov	ecx, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	fstp	DWORD PTR [ecx+64]

; 695  : 					if (CurrentTrigger->Size[Z] < 16) CurrentTrigger->Size[Z] = 16;

	mov	eax, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	fld	DWORD PTR [eax+64]
	fcomp	DWORD PTR __real@41800000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L81523
	mov	eax, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	mov	DWORD PTR [eax+64], 1098907648		; 41800000H
$L81523:

; 696  : 					CurrentTrigger->Pos.v[X] -= CurrentTrigger->Matrix.m[LX] * add;

	mov	eax, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	fld	DWORD PTR _add$[ebp]
	fmul	DWORD PTR [eax+44]
	mov	ecx, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	fsubr	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	fstp	DWORD PTR [edx+8]

; 697  : 					CurrentTrigger->Pos.v[Y] -= CurrentTrigger->Matrix.m[LY] * add;

	mov	eax, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	fld	DWORD PTR _add$[ebp]
	fmul	DWORD PTR [eax+48]
	mov	ecx, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	fsubr	DWORD PTR [ecx+12]
	mov	edx, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	fstp	DWORD PTR [edx+12]

; 698  : 					CurrentTrigger->Pos.v[Z] -= CurrentTrigger->Matrix.m[LZ] * add;

	mov	eax, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	fld	DWORD PTR _add$[ebp]
	fmul	DWORD PTR [eax+52]
	mov	ecx, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	fsubr	DWORD PTR [ecx+16]
	mov	edx, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	fstp	DWORD PTR [edx+16]
$L81502:

; 699  : 					break;
; 700  : 			}
; 701  : 		}
; 702  : 	}
; 703  : 
; 704  : // move?
; 705  : 
; 706  : 	if (MouseLeft)

	movsx	eax, BYTE PTR ?MouseLeft@@3DA		; MouseLeft
	test	eax, eax
	je	$L81524

; 707  : 	{
; 708  : 		RotTransVector(&ViewMatrix, &ViewTrans, &CurrentTrigger->Pos, &vec);

	lea	eax, DWORD PTR _vec$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	add	ecx, 8
	push	ecx
	push	OFFSET FLAT:?ViewTrans@@3UVectorStruct@@A ; ViewTrans
	push	OFFSET FLAT:?ViewMatrix@@3TMatrixUnion@@A ; ViewMatrix
	call	?RotTransVector@@YAXPATMatrixUnion@@PAUVectorStruct@@11@Z ; RotTransVector
	add	esp, 16					; 00000010H

; 709  : 
; 710  : 		switch (FileTriggerAxis)

	mov	eax, DWORD PTR _FileTriggerAxis
	mov	DWORD PTR tv912[ebp], eax
	cmp	DWORD PTR tv912[ebp], 5
	ja	$L81526
	mov	ecx, DWORD PTR tv912[ebp]
	jmp	DWORD PTR $L81751[ecx*4]
$L81529:

; 711  : 		{
; 712  : 			case FILE_TRIGGER_AXIS_XY:
; 713  : 				vec.v[X] = MouseXrel * vec.v[Z] / RenderSettings.GeomPers + CameraEditXrel;

	fld	DWORD PTR ?MouseXrel@@3MA		; MouseXrel
	fmul	DWORD PTR _vec$[ebp+8]
	fdiv	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A
	fadd	DWORD PTR ?CameraEditXrel@@3MA		; CameraEditXrel
	fstp	DWORD PTR _vec$[ebp]

; 714  : 				vec.v[Y] = MouseYrel * vec.v[Z] / RenderSettings.GeomPers + CameraEditYrel;

	fld	DWORD PTR ?MouseYrel@@3MA		; MouseYrel
	fmul	DWORD PTR _vec$[ebp+8]
	fdiv	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A
	fadd	DWORD PTR ?CameraEditYrel@@3MA		; CameraEditYrel
	fstp	DWORD PTR _vec$[ebp+4]

; 715  : 				vec.v[Z] = CameraEditZrel;

	mov	eax, DWORD PTR ?CameraEditZrel@@3MA
	mov	DWORD PTR _vec$[ebp+8], eax

; 716  : 				break;

	jmp	$L81526
$L81530:

; 717  : 			case FILE_TRIGGER_AXIS_XZ:
; 718  : 				vec.v[X] = MouseXrel * vec.v[Z] / RenderSettings.GeomPers + CameraEditXrel;

	fld	DWORD PTR ?MouseXrel@@3MA		; MouseXrel
	fmul	DWORD PTR _vec$[ebp+8]
	fdiv	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A
	fadd	DWORD PTR ?CameraEditXrel@@3MA		; CameraEditXrel
	fstp	DWORD PTR _vec$[ebp]

; 719  : 				vec.v[Y] = CameraEditYrel;

	mov	eax, DWORD PTR ?CameraEditYrel@@3MA
	mov	DWORD PTR _vec$[ebp+4], eax

; 720  : 				vec.v[Z] = -MouseYrel * vec.v[Z] / RenderSettings.GeomPers + CameraEditZrel;

	fld	DWORD PTR ?MouseYrel@@3MA		; MouseYrel
	fchs
	fmul	DWORD PTR _vec$[ebp+8]
	fdiv	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A
	fadd	DWORD PTR ?CameraEditZrel@@3MA		; CameraEditZrel
	fstp	DWORD PTR _vec$[ebp+8]

; 721  : 				break;

	jmp	$L81526
$L81531:

; 722  : 			case FILE_TRIGGER_AXIS_ZY:
; 723  : 				vec.v[X] = CameraEditXrel;

	mov	eax, DWORD PTR ?CameraEditXrel@@3MA
	mov	DWORD PTR _vec$[ebp], eax

; 724  : 				vec.v[Y] = MouseYrel * vec.v[Z] / RenderSettings.GeomPers + CameraEditYrel;

	fld	DWORD PTR ?MouseYrel@@3MA		; MouseYrel
	fmul	DWORD PTR _vec$[ebp+8]
	fdiv	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A
	fadd	DWORD PTR ?CameraEditYrel@@3MA		; CameraEditYrel
	fstp	DWORD PTR _vec$[ebp+4]

; 725  : 				vec.v[Z] = MouseXrel * vec.v[Z] / RenderSettings.GeomPers + CameraEditZrel;

	fld	DWORD PTR ?MouseXrel@@3MA		; MouseXrel
	fmul	DWORD PTR _vec$[ebp+8]
	fdiv	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A
	fadd	DWORD PTR ?CameraEditZrel@@3MA		; CameraEditZrel
	fstp	DWORD PTR _vec$[ebp+8]

; 726  : 				break;

	jmp	SHORT $L81526
$L81532:

; 727  : 			case FILE_TRIGGER_AXIS_X:
; 728  : 				vec.v[X] = MouseXrel * vec.v[Z] / RenderSettings.GeomPers + CameraEditXrel;

	fld	DWORD PTR ?MouseXrel@@3MA		; MouseXrel
	fmul	DWORD PTR _vec$[ebp+8]
	fdiv	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A
	fadd	DWORD PTR ?CameraEditXrel@@3MA		; CameraEditXrel
	fstp	DWORD PTR _vec$[ebp]

; 729  : 				vec.v[Y] = CameraEditYrel;

	mov	eax, DWORD PTR ?CameraEditYrel@@3MA
	mov	DWORD PTR _vec$[ebp+4], eax

; 730  : 				vec.v[Z] = CameraEditZrel;

	mov	eax, DWORD PTR ?CameraEditZrel@@3MA
	mov	DWORD PTR _vec$[ebp+8], eax

; 731  : 				break;

	jmp	SHORT $L81526
$L81533:

; 732  : 			case FILE_TRIGGER_AXIS_Y:
; 733  : 				vec.v[X] = CameraEditXrel;

	mov	eax, DWORD PTR ?CameraEditXrel@@3MA
	mov	DWORD PTR _vec$[ebp], eax

; 734  : 				vec.v[Y] = MouseYrel * vec.v[Z] / RenderSettings.GeomPers + CameraEditYrel;

	fld	DWORD PTR ?MouseYrel@@3MA		; MouseYrel
	fmul	DWORD PTR _vec$[ebp+8]
	fdiv	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A
	fadd	DWORD PTR ?CameraEditYrel@@3MA		; CameraEditYrel
	fstp	DWORD PTR _vec$[ebp+4]

; 735  : 				vec.v[Z] = CameraEditZrel;

	mov	eax, DWORD PTR ?CameraEditZrel@@3MA
	mov	DWORD PTR _vec$[ebp+8], eax

; 736  : 				break;

	jmp	SHORT $L81526
$L81534:

; 737  : 			case FILE_TRIGGER_AXIS_Z:
; 738  : 				vec.v[X] = CameraEditXrel;

	mov	eax, DWORD PTR ?CameraEditXrel@@3MA
	mov	DWORD PTR _vec$[ebp], eax

; 739  : 				vec.v[Y] = CameraEditYrel;

	mov	eax, DWORD PTR ?CameraEditYrel@@3MA
	mov	DWORD PTR _vec$[ebp+4], eax

; 740  : 				vec.v[Z] = -MouseYrel * vec.v[Z] / RenderSettings.GeomPers + CameraEditZrel;

	fld	DWORD PTR ?MouseYrel@@3MA		; MouseYrel
	fchs
	fmul	DWORD PTR _vec$[ebp+8]
	fdiv	DWORD PTR ?RenderSettings@@3URENDER_SETTINGS@@A
	fadd	DWORD PTR ?CameraEditZrel@@3MA		; CameraEditZrel
	fstp	DWORD PTR _vec$[ebp+8]
$L81526:

; 741  : 				break;
; 742  : 		}
; 743  : 
; 744  : 		if (FileTriggerAxisType == 1) 

	cmp	DWORD PTR _FileTriggerAxisType, 1
	jne	SHORT $L81535

; 745  : 		{
; 746  : 			SetVector(&vec2, vec.v[X], vec.v[Y], vec.v[Z]);

	mov	eax, DWORD PTR _vec$[ebp]
	mov	DWORD PTR _vec2$[ebp], eax
	mov	eax, DWORD PTR _vec$[ebp+4]
	mov	DWORD PTR _vec2$[ebp+4], eax
	mov	eax, DWORD PTR _vec$[ebp+8]
	mov	DWORD PTR _vec2$[ebp+8], eax

; 747  : 		}
; 748  : 		else

	jmp	SHORT $L81536
$L81535:

; 749  : 		{
; 750  : 			RotVector(&CAM_MainCamera->WMatrix, &vec, &vec2);

	lea	eax, DWORD PTR _vec2$[ebp]
	push	eax
	lea	ecx, DWORD PTR _vec$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	add	edx, 16					; 00000010H
	push	edx
	call	?RotVector@@YAXPATMatrixUnion@@PAUVectorStruct@@1@Z ; RotVector
	add	esp, 12					; 0000000cH
$L81536:

; 751  : 		}
; 752  : 
; 753  : 		CurrentTrigger->Pos.v[X] += vec2.v[X];

	mov	eax, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	fld	DWORD PTR _vec2$[ebp]
	fadd	DWORD PTR [eax+8]
	mov	ecx, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	fstp	DWORD PTR [ecx+8]

; 754  : 		CurrentTrigger->Pos.v[Y] += vec2.v[Y];

	mov	eax, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	fld	DWORD PTR _vec2$[ebp+4]
	fadd	DWORD PTR [eax+12]
	mov	ecx, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	fstp	DWORD PTR [ecx+12]

; 755  : 		CurrentTrigger->Pos.v[Z] += vec2.v[Z];

	mov	eax, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	fld	DWORD PTR _vec2$[ebp+8]
	fadd	DWORD PTR [eax+16]
	mov	ecx, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	fstp	DWORD PTR [ecx+16]
$L81524:

; 756  : 	}
; 757  : 
; 758  : // rotate?
; 759  : 
; 760  : 	vec.v[X] = vec.v[Y] = vec.v[Z] = 0;

	mov	DWORD PTR _vec$[ebp+8], 0
	mov	eax, DWORD PTR _vec$[ebp+8]
	mov	DWORD PTR _vec$[ebp+4], eax
	mov	ecx, DWORD PTR _vec$[ebp+4]
	mov	DWORD PTR _vec$[ebp], ecx

; 761  : 
; 762  : 	if (Keys[DIK_NUMPAD7]) vec.v[X] -= 0.005f;

	movsx	eax, BYTE PTR ?Keys@@3PADA+71
	test	eax, eax
	je	SHORT $L81537
	fld	DWORD PTR _vec$[ebp]
	fsub	DWORD PTR __real@3ba3d70a
	fstp	DWORD PTR _vec$[ebp]
$L81537:

; 763  : 	if (Keys[DIK_NUMPAD4]) vec.v[X] += 0.005f;

	movsx	eax, BYTE PTR ?Keys@@3PADA+75
	test	eax, eax
	je	SHORT $L81538
	fld	DWORD PTR _vec$[ebp]
	fadd	DWORD PTR __real@3ba3d70a
	fstp	DWORD PTR _vec$[ebp]
$L81538:

; 764  : 	if (Keys[DIK_NUMPAD8]) vec.v[Y] -= 0.005f;

	movsx	eax, BYTE PTR ?Keys@@3PADA+72
	test	eax, eax
	je	SHORT $L81539
	fld	DWORD PTR _vec$[ebp+4]
	fsub	DWORD PTR __real@3ba3d70a
	fstp	DWORD PTR _vec$[ebp+4]
$L81539:

; 765  : 	if (Keys[DIK_NUMPAD5]) vec.v[Y] += 0.005f;

	movsx	eax, BYTE PTR ?Keys@@3PADA+76
	test	eax, eax
	je	SHORT $L81540
	fld	DWORD PTR _vec$[ebp+4]
	fadd	DWORD PTR __real@3ba3d70a
	fstp	DWORD PTR _vec$[ebp+4]
$L81540:

; 766  : 	if (Keys[DIK_NUMPAD9]) vec.v[Z] -= 0.005f;

	movsx	eax, BYTE PTR ?Keys@@3PADA+73
	test	eax, eax
	je	SHORT $L81541
	fld	DWORD PTR _vec$[ebp+8]
	fsub	DWORD PTR __real@3ba3d70a
	fstp	DWORD PTR _vec$[ebp+8]
$L81541:

; 767  : 	if (Keys[DIK_NUMPAD6]) vec.v[Z] += 0.005f;

	movsx	eax, BYTE PTR ?Keys@@3PADA+77
	test	eax, eax
	je	SHORT $L81542
	fld	DWORD PTR _vec$[ebp+8]
	fadd	DWORD PTR __real@3ba3d70a
	fstp	DWORD PTR _vec$[ebp+8]
$L81542:

; 768  : 
; 769  : 	if (Keys[DIK_NUMPAD1] && !LastKeys[DIK_NUMPAD1]) vec.v[X] += 0.25f;

	movsx	eax, BYTE PTR ?Keys@@3PADA+79
	test	eax, eax
	je	SHORT $L81543
	movsx	eax, BYTE PTR ?LastKeys@@3PADA+79
	test	eax, eax
	jne	SHORT $L81543
	fld	DWORD PTR _vec$[ebp]
	fadd	DWORD PTR __real@3e800000
	fstp	DWORD PTR _vec$[ebp]
$L81543:

; 770  : 	if (Keys[DIK_NUMPAD2] && !LastKeys[DIK_NUMPAD2]) vec.v[Y] += 0.25f;

	movsx	eax, BYTE PTR ?Keys@@3PADA+80
	test	eax, eax
	je	SHORT $L81544
	movsx	eax, BYTE PTR ?LastKeys@@3PADA+80
	test	eax, eax
	jne	SHORT $L81544
	fld	DWORD PTR _vec$[ebp+4]
	fadd	DWORD PTR __real@3e800000
	fstp	DWORD PTR _vec$[ebp+4]
$L81544:

; 771  : 	if (Keys[DIK_NUMPAD3] && !LastKeys[DIK_NUMPAD3]) vec.v[Z] += 0.25f;

	movsx	eax, BYTE PTR ?Keys@@3PADA+81
	test	eax, eax
	je	SHORT $L81545
	movsx	eax, BYTE PTR ?LastKeys@@3PADA+81
	test	eax, eax
	jne	SHORT $L81545
	fld	DWORD PTR _vec$[ebp+8]
	fadd	DWORD PTR __real@3e800000
	fstp	DWORD PTR _vec$[ebp+8]
$L81545:

; 772  : 
; 773  : 	if (Keys[DIK_NUMPAD0]) CopyMatrix(&IdentityMatrix, &CurrentTrigger->Matrix);

	movsx	eax, BYTE PTR ?Keys@@3PADA+82
	test	eax, eax
	je	SHORT $L81546
	mov	eax, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	add	eax, 20					; 00000014H
	push	eax
	push	OFFSET FLAT:?IdentityMatrix@@3TMatrixUnion@@A ; IdentityMatrix
	call	?CopyMatrix@@YAXPATMatrixUnion@@0@Z	; CopyMatrix
	add	esp, 8
$L81546:

; 774  : 
; 775  : 	RotMatrixZYX(&mat, vec.v[X], vec.v[Y], vec.v[Z]);

	mov	eax, DWORD PTR _vec$[ebp+8]
	push	eax
	mov	ecx, DWORD PTR _vec$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _vec$[ebp]
	push	edx
	lea	eax, DWORD PTR _mat$[ebp]
	push	eax
	call	?RotMatrixZYX@@YAXPATMatrixUnion@@MMM@Z	; RotMatrixZYX
	add	esp, 16					; 00000010H

; 776  : 
; 777  : 	if (FileTriggerAxisType)

	cmp	DWORD PTR _FileTriggerAxisType, 0
	je	$L81547

; 778  : 	{
; 779  : 		MulMatrix(&mat, &CurrentTrigger->Matrix, &mat2);

	lea	eax, DWORD PTR _mat2$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	add	ecx, 20					; 00000014H
	push	ecx
	lea	edx, DWORD PTR _mat$[ebp]
	push	edx
	call	?MulMatrix@@YAXPATMatrixUnion@@00@Z	; MulMatrix
	add	esp, 12					; 0000000cH

; 780  : 		CopyMatrix(&mat2, &CurrentTrigger->Matrix);

	mov	eax, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	add	eax, 20					; 00000014H
	push	eax
	lea	ecx, DWORD PTR _mat2$[ebp]
	push	ecx
	call	?CopyMatrix@@YAXPATMatrixUnion@@0@Z	; CopyMatrix
	add	esp, 8

; 781  : 		NormalizeMatrix(&CurrentTrigger->Matrix);

	mov	eax, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	mov	ecx, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	fld	DWORD PTR [eax+32]
	fmul	DWORD PTR [ecx+32]
	mov	edx, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	mov	eax, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	fld	DWORD PTR [edx+36]
	fmul	DWORD PTR [eax+36]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	mov	edx, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	fld	DWORD PTR [ecx+40]
	fmul	DWORD PTR [edx+40]
	faddp	ST(1), ST(0)
	push	ecx
	fstp	DWORD PTR [esp]
	call	?sqrt@@YAMM@Z				; sqrt
	add	esp, 4
	fdivr	DWORD PTR __real@3f800000
	fstp	DWORD PTR __mul$81548[ebp]
	mov	eax, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	fld	DWORD PTR __mul$81548[ebp]
	fmul	DWORD PTR [eax+32]
	mov	ecx, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	fstp	DWORD PTR [ecx+32]
	mov	eax, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	fld	DWORD PTR __mul$81548[ebp]
	fmul	DWORD PTR [eax+36]
	mov	ecx, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	fstp	DWORD PTR [ecx+36]
	mov	eax, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	fld	DWORD PTR __mul$81548[ebp]
	fmul	DWORD PTR [eax+40]
	mov	ecx, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	fstp	DWORD PTR [ecx+40]
	mov	eax, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	mov	ecx, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	fld	DWORD PTR [eax+44]
	fmul	DWORD PTR [ecx+44]
	mov	edx, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	mov	eax, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	fld	DWORD PTR [edx+48]
	fmul	DWORD PTR [eax+48]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	mov	edx, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	fld	DWORD PTR [ecx+52]
	fmul	DWORD PTR [edx+52]
	faddp	ST(1), ST(0)
	push	ecx
	fstp	DWORD PTR [esp]
	call	?sqrt@@YAMM@Z				; sqrt
	add	esp, 4
	fdivr	DWORD PTR __real@3f800000
	fstp	DWORD PTR __mul$81550[ebp]
	mov	eax, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	fld	DWORD PTR __mul$81550[ebp]
	fmul	DWORD PTR [eax+44]
	mov	ecx, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	fstp	DWORD PTR [ecx+44]
	mov	eax, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	fld	DWORD PTR __mul$81550[ebp]
	fmul	DWORD PTR [eax+48]
	mov	ecx, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	fstp	DWORD PTR [ecx+48]
	mov	eax, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	fld	DWORD PTR __mul$81550[ebp]
	fmul	DWORD PTR [eax+52]
	mov	ecx, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	fstp	DWORD PTR [ecx+52]
	mov	eax, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	mov	ecx, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	fld	DWORD PTR [eax+36]
	fmul	DWORD PTR [ecx+52]
	mov	edx, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	mov	eax, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	fld	DWORD PTR [edx+40]
	fmul	DWORD PTR [eax+48]
	fsubp	ST(1), ST(0)
	mov	ecx, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	fstp	DWORD PTR [ecx+20]
	mov	eax, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	mov	ecx, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	fld	DWORD PTR [eax+40]
	fmul	DWORD PTR [ecx+44]
	mov	edx, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	mov	eax, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	fld	DWORD PTR [edx+32]
	fmul	DWORD PTR [eax+52]
	fsubp	ST(1), ST(0)
	mov	ecx, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	fstp	DWORD PTR [ecx+24]
	mov	eax, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	mov	ecx, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	fld	DWORD PTR [eax+32]
	fmul	DWORD PTR [ecx+48]
	mov	edx, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	mov	eax, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	fld	DWORD PTR [edx+36]
	fmul	DWORD PTR [eax+44]
	fsubp	ST(1), ST(0)
	mov	ecx, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	fstp	DWORD PTR [ecx+28]
	mov	eax, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	mov	ecx, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	fld	DWORD PTR [eax+48]
	fmul	DWORD PTR [ecx+28]
	mov	edx, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	mov	eax, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	fld	DWORD PTR [edx+52]
	fmul	DWORD PTR [eax+24]
	fsubp	ST(1), ST(0)
	mov	ecx, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	fstp	DWORD PTR [ecx+32]
	mov	eax, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	mov	ecx, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	fld	DWORD PTR [eax+52]
	fmul	DWORD PTR [ecx+20]
	mov	edx, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	mov	eax, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	fld	DWORD PTR [edx+44]
	fmul	DWORD PTR [eax+28]
	fsubp	ST(1), ST(0)
	mov	ecx, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	fstp	DWORD PTR [ecx+36]
	mov	eax, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	mov	ecx, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	fld	DWORD PTR [eax+44]
	fmul	DWORD PTR [ecx+24]
	mov	edx, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	mov	eax, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	fld	DWORD PTR [edx+48]
	fmul	DWORD PTR [eax+20]
	fsubp	ST(1), ST(0)
	mov	ecx, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	fstp	DWORD PTR [ecx+40]

; 782  : 	}
; 783  : 	else if (vec.v[X] || vec.v[Y] || vec.v[Z])

	jmp	$L81435
$L81547:
	fld	DWORD PTR __real@00000000
	fld	DWORD PTR _vec$[ebp]
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $L81554
	fld	DWORD PTR __real@00000000
	fld	DWORD PTR _vec$[ebp+4]
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $L81554
	fld	DWORD PTR __real@00000000
	fld	DWORD PTR _vec$[ebp+8]
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jnp	$L81435
$L81554:

; 784  : 	{
; 785  : 		RotVector(&ViewMatrix, &CurrentTrigger->Matrix.mv[X], &r);

	lea	eax, DWORD PTR _r$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	add	ecx, 20					; 00000014H
	push	ecx
	push	OFFSET FLAT:?ViewMatrix@@3TMatrixUnion@@A ; ViewMatrix
	call	?RotVector@@YAXPATMatrixUnion@@PAUVectorStruct@@1@Z ; RotVector
	add	esp, 12					; 0000000cH

; 786  : 		RotVector(&ViewMatrix, &CurrentTrigger->Matrix.mv[Y], &u);

	lea	eax, DWORD PTR _u$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	add	ecx, 32					; 00000020H
	push	ecx
	push	OFFSET FLAT:?ViewMatrix@@3TMatrixUnion@@A ; ViewMatrix
	call	?RotVector@@YAXPATMatrixUnion@@PAUVectorStruct@@1@Z ; RotVector
	add	esp, 12					; 0000000cH

; 787  : 		RotVector(&ViewMatrix, &CurrentTrigger->Matrix.mv[Z], &l);

	lea	eax, DWORD PTR _l$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	add	ecx, 44					; 0000002cH
	push	ecx
	push	OFFSET FLAT:?ViewMatrix@@3TMatrixUnion@@A ; ViewMatrix
	call	?RotVector@@YAXPATMatrixUnion@@PAUVectorStruct@@1@Z ; RotVector
	add	esp, 12					; 0000000cH

; 788  : 
; 789  : 		RotVector(&mat, &r, &r2);

	lea	eax, DWORD PTR _r2$[ebp]
	push	eax
	lea	ecx, DWORD PTR _r$[ebp]
	push	ecx
	lea	edx, DWORD PTR _mat$[ebp]
	push	edx
	call	?RotVector@@YAXPATMatrixUnion@@PAUVectorStruct@@1@Z ; RotVector
	add	esp, 12					; 0000000cH

; 790  : 		RotVector(&mat, &u, &u2);

	lea	eax, DWORD PTR _u2$[ebp]
	push	eax
	lea	ecx, DWORD PTR _u$[ebp]
	push	ecx
	lea	edx, DWORD PTR _mat$[ebp]
	push	edx
	call	?RotVector@@YAXPATMatrixUnion@@PAUVectorStruct@@1@Z ; RotVector
	add	esp, 12					; 0000000cH

; 791  : 		RotVector(&mat, &l, &l2);

	lea	eax, DWORD PTR _l2$[ebp]
	push	eax
	lea	ecx, DWORD PTR _l$[ebp]
	push	ecx
	lea	edx, DWORD PTR _mat$[ebp]
	push	edx
	call	?RotVector@@YAXPATMatrixUnion@@PAUVectorStruct@@1@Z ; RotVector
	add	esp, 12					; 0000000cH

; 792  : 
; 793  : 		RotVector(&CAM_MainCamera->WMatrix, &r2, &CurrentTrigger->Matrix.mv[X]);

	mov	eax, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	add	eax, 20					; 00000014H
	push	eax
	lea	ecx, DWORD PTR _r2$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	add	edx, 16					; 00000010H
	push	edx
	call	?RotVector@@YAXPATMatrixUnion@@PAUVectorStruct@@1@Z ; RotVector
	add	esp, 12					; 0000000cH

; 794  : 		RotVector(&CAM_MainCamera->WMatrix, &u2, &CurrentTrigger->Matrix.mv[Y]);

	mov	eax, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	add	eax, 32					; 00000020H
	push	eax
	lea	ecx, DWORD PTR _u2$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	add	edx, 16					; 00000010H
	push	edx
	call	?RotVector@@YAXPATMatrixUnion@@PAUVectorStruct@@1@Z ; RotVector
	add	esp, 12					; 0000000cH

; 795  : 		RotVector(&CAM_MainCamera->WMatrix, &l2, &CurrentTrigger->Matrix.mv[Z]);

	mov	eax, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	add	eax, 44					; 0000002cH
	push	eax
	lea	ecx, DWORD PTR _l2$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?CAM_MainCamera@@3PAUCameraStruct@@A ; CAM_MainCamera
	add	edx, 16					; 00000010H
	push	edx
	call	?RotVector@@YAXPATMatrixUnion@@PAUVectorStruct@@1@Z ; RotVector
	add	esp, 12					; 0000000cH

; 796  : 
; 797  : 		NormalizeMatrix(&CurrentTrigger->Matrix);

	mov	eax, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	mov	ecx, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	fld	DWORD PTR [eax+32]
	fmul	DWORD PTR [ecx+32]
	mov	edx, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	mov	eax, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	fld	DWORD PTR [edx+36]
	fmul	DWORD PTR [eax+36]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	mov	edx, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	fld	DWORD PTR [ecx+40]
	fmul	DWORD PTR [edx+40]
	faddp	ST(1), ST(0)
	push	ecx
	fstp	DWORD PTR [esp]
	call	?sqrt@@YAMM@Z				; sqrt
	add	esp, 4
	fdivr	DWORD PTR __real@3f800000
	fstp	DWORD PTR __mul$81555[ebp]
	mov	eax, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	fld	DWORD PTR __mul$81555[ebp]
	fmul	DWORD PTR [eax+32]
	mov	ecx, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	fstp	DWORD PTR [ecx+32]
	mov	eax, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	fld	DWORD PTR __mul$81555[ebp]
	fmul	DWORD PTR [eax+36]
	mov	ecx, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	fstp	DWORD PTR [ecx+36]
	mov	eax, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	fld	DWORD PTR __mul$81555[ebp]
	fmul	DWORD PTR [eax+40]
	mov	ecx, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	fstp	DWORD PTR [ecx+40]
	mov	eax, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	mov	ecx, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	fld	DWORD PTR [eax+44]
	fmul	DWORD PTR [ecx+44]
	mov	edx, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	mov	eax, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	fld	DWORD PTR [edx+48]
	fmul	DWORD PTR [eax+48]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	mov	edx, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	fld	DWORD PTR [ecx+52]
	fmul	DWORD PTR [edx+52]
	faddp	ST(1), ST(0)
	push	ecx
	fstp	DWORD PTR [esp]
	call	?sqrt@@YAMM@Z				; sqrt
	add	esp, 4
	fdivr	DWORD PTR __real@3f800000
	fstp	DWORD PTR __mul$81557[ebp]
	mov	eax, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	fld	DWORD PTR __mul$81557[ebp]
	fmul	DWORD PTR [eax+44]
	mov	ecx, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	fstp	DWORD PTR [ecx+44]
	mov	eax, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	fld	DWORD PTR __mul$81557[ebp]
	fmul	DWORD PTR [eax+48]
	mov	ecx, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	fstp	DWORD PTR [ecx+48]
	mov	eax, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	fld	DWORD PTR __mul$81557[ebp]
	fmul	DWORD PTR [eax+52]
	mov	ecx, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	fstp	DWORD PTR [ecx+52]
	mov	eax, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	mov	ecx, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	fld	DWORD PTR [eax+36]
	fmul	DWORD PTR [ecx+52]
	mov	edx, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	mov	eax, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	fld	DWORD PTR [edx+40]
	fmul	DWORD PTR [eax+48]
	fsubp	ST(1), ST(0)
	mov	ecx, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	fstp	DWORD PTR [ecx+20]
	mov	eax, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	mov	ecx, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	fld	DWORD PTR [eax+40]
	fmul	DWORD PTR [ecx+44]
	mov	edx, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	mov	eax, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	fld	DWORD PTR [edx+32]
	fmul	DWORD PTR [eax+52]
	fsubp	ST(1), ST(0)
	mov	ecx, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	fstp	DWORD PTR [ecx+24]
	mov	eax, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	mov	ecx, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	fld	DWORD PTR [eax+32]
	fmul	DWORD PTR [ecx+48]
	mov	edx, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	mov	eax, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	fld	DWORD PTR [edx+36]
	fmul	DWORD PTR [eax+44]
	fsubp	ST(1), ST(0)
	mov	ecx, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	fstp	DWORD PTR [ecx+28]
	mov	eax, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	mov	ecx, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	fld	DWORD PTR [eax+48]
	fmul	DWORD PTR [ecx+28]
	mov	edx, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	mov	eax, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	fld	DWORD PTR [edx+52]
	fmul	DWORD PTR [eax+24]
	fsubp	ST(1), ST(0)
	mov	ecx, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	fstp	DWORD PTR [ecx+32]
	mov	eax, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	mov	ecx, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	fld	DWORD PTR [eax+52]
	fmul	DWORD PTR [ecx+20]
	mov	edx, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	mov	eax, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	fld	DWORD PTR [edx+44]
	fmul	DWORD PTR [eax+28]
	fsubp	ST(1), ST(0)
	mov	ecx, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	fstp	DWORD PTR [ecx+36]
	mov	eax, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	mov	ecx, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	fld	DWORD PTR [eax+44]
	fmul	DWORD PTR [ecx+24]
	mov	edx, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	mov	eax, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	fld	DWORD PTR [edx+48]
	fmul	DWORD PTR [eax+20]
	fsubp	ST(1), ST(0)
	mov	ecx, DWORD PTR ?CurrentTrigger@@3PAUFILE_TRIGGER@@A ; CurrentTrigger
	fstp	DWORD PTR [ecx+40]
$L81435:

; 798  : 	}
; 799  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
$L81750:
	DD	$L81512
	DD	$L81514
	DD	$L81516
	DD	$L81518
	DD	$L81520
	DD	$L81522
$L81751:
	DD	$L81529
	DD	$L81530
	DD	$L81531
	DD	$L81532
	DD	$L81533
	DD	$L81534
?EditTriggers@@YAXXZ ENDP				; EditTriggers
_TEXT	ENDS
PUBLIC	_sqrtf
; Function compile flags: /Odt /ZI
; File c:\program files\microsoft visual studio .net 2003\vc7\include\math.h
;	COMDAT ?sqrt@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?sqrt@@YAMM@Z PROC NEAR					; sqrt, COMDAT

; 579  :         {return (sqrtf(_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR __X$[ebp]
	push	eax
	call	_sqrtf
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?sqrt@@YAMM@Z ENDP					; sqrt
_TEXT	ENDS
EXTRN	_sqrt:NEAR
; Function compile flags: /Odt /ZI
;	COMDAT _sqrtf
_TEXT	SEGMENT
tv70 = -68						; size = 4
__X$ = 8						; size = 4
_sqrtf	PROC NEAR					; COMDAT

; 470  :         {return ((float)sqrt((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	fld	DWORD PTR __X$[ebp]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	call	_sqrt
	add	esp, 8
	fst	DWORD PTR tv70[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_sqrtf	ENDP
_TEXT	ENDS
END
